/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 08:42:05 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile("Save Changes.jar", "Save Changes.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector3 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector3;
      archiveScanner0.addDefaultExcludes();
      Vector<InputStream> vector4 = new Vector<InputStream>();
      archiveScanner0.dirsExcluded = vector4;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@MCS4sNct";
      stringArray0[1] = "Save Changes.jar";
      stringArray0[2] = "Save Changes.jar";
      stringArray0[3] = "5.ZD3!H";
      stringArray0[4] = "{8l.hFaG)$#Jb@tR";
      vector2.add((Object) "<4?L5XF($Xjm5y");
      stringArray0[5] = "Save Changes.jar";
      stringArray0[6] = "Save Changes.jar";
      stringArray0[7] = "Save Changes.jar";
      stringArray0[8] = "0jM>F$TyzIK!1._?9kj)L~U.jar";
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector5 = new Vector<Object>();
      Object object4 = new Object();
      vector2.add(object4);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "Save Changes.jar", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("d2vB5|UFnK");
      Object object0 = new Object();
      Object object1 = new Object();
      Vector<Object> vector0 = new Vector<Object>();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Vector<Object> vector1 = new Vector<Object>();
      Object object5 = new Object();
      vector1.add(object0);
      ImprovedFile improvedFile1 = new ImprovedFile("m_WS\"*wW?@C>hu\"6", "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      Object object6 = new Object();
      vector1.removeElement(object3);
      Iterator<Object> iterator0 = vector1.iterator();
      vector1.add((Object) evoSuiteFile0);
      vector1.iterator();
      archiveScanner0.addDefaultExcludes();
      vector0.addElement(iterator0);
      Vector<Integer> vector2 = new Vector<Integer>();
      archiveScanner0.filesNotIncluded = vector2;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "'b\"6C#<|s";
      stringArray0[1] = "";
      stringArray0[2] = "m_WS\"*wW?@C>hu\"6";
      stringArray0[3] = "m_WS\"*wW?@C>hu\"6";
      stringArray0[4] = "'b\"6C#<|s";
      stringArray0[5] = "";
      stringArray0[6] = "";
      archiveScanner0.setIncludes(stringArray0);
      vector1.add(object0);
      vector1.add(object3);
      Vector<Object> vector3 = new Vector<Object>();
      Object object7 = new Object();
      Object object8 = new Object();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile1, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("d2vB5|UFnK");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("d2vB5|UFnK/d2vB5|UFnK/Failed to delete directory, 0P}Q(+dWShgC+XU");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      MockFile mockFile0 = new MockFile(improvedFile0, "zW`UQw");
      mockFile0.createNewFile();
      archiveScanner0.toFileType(mockFile0);
      System.setCurrentTimeMillis(archiveScanner0.ARCHIVE);
      String string0 = "A1FuNHDlUlc)uO?";
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Vector<Object> vector3 = new Vector<Object>();
      Object object6 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile("'o\"6C#<|s", "'o\"6C#<|s");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[7];
      Vector<Object> vector4 = new Vector<Object>();
      archiveScanner0.dirsExcluded = vector4;
      stringArray0[0] = "'o\"6C#<|s";
      vector4.iterator();
      archiveScanner0.haveSlowResults = true;
      stringArray0[1] = "m_WS\"*wW?@C>hu\"6";
      stringArray0[2] = "'o\"6C#<|s";
      stringArray0[3] = "m_WS\"*wW?@C>hu\"6";
      stringArray0[4] = "m_WS\"*wW?@C>hu\"6";
      stringArray0[5] = "m_WS\"*wW?@C>hu\"6";
      stringArray0[6] = "m_WS\"*wW?@C>hu\"6";
      vector4.iterator();
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      vector4.add((Object) "'o\"6C#<|s");
      vector4.add((Object) null);
      Vector<Object> vector5 = new Vector<Object>();
      Object object7 = new Object();
      Object object8 = new Object();
      try { 
        archiveScanner0.processDirectory(improvedFile0, "'o\"6C#<|s", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/'o\"6C#<|s/'o\"6C#<|s
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("nh", "nh");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "nh";
      stringArray0[1] = "nh";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList1.stream();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.clone();
      linkedList3.poll();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      linkedList0.pollFirst();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList1.stream();
      linkedList5.add("nh");
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList6.add("nh");
      linkedList6.add((String) null);
      Object object0 = new Object();
      linkedList4.add((Locale.LanguageRange) null);
      Vector<Object> vector1 = new Vector<Object>();
      Vector<List<String>> vector2 = new Vector<List<String>>();
      archiveScanner0.filesExcluded = vector2;
      vector1.add((Object) linkedList4);
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector3 = new Vector<Object>();
      boolean boolean0 = archiveScanner0.haveSlowResults;
      Object object1 = new Object();
      archiveScanner0.processFile("nh");
      archiveScanner0.processArchive(improvedFile0, "nh");
      assertFalse(improvedFile0.canRead());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("Z", "Z");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Z";
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.filesNotIncluded = vector0;
      stringArray0[1] = "vhange.j;r";
      stringArray0[2] = "Z";
      archiveScanner0.setExcludes(stringArray0);
      Vector<InputStream> vector1 = new Vector<InputStream>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      archiveScanner0.dirsNotIncluded = vector1;
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      vector1.add((InputStream) pipedInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 8192);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      int int0 = ArchiveScanner.ARCHIVE;
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, pipedInputStream1);
      byte[] byteArray0 = new byte[10];
      Integer integer0 = new Integer(0);
      vector0.add(integer0);
      vector1.add((InputStream) sequenceInputStream0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      byteArrayInputStream0.mark(8192);
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      ImprovedFile improvedFile0 = new ImprovedFile("Z", "Z");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector2 = new Vector<Object>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Z";
      Vector<Integer> vector3 = new Vector<Integer>();
      archiveScanner0.filesNotIncluded = vector3;
      stringArray0[1] = "veCKhange.j;r";
      stringArray0[2] = "Z";
      archiveScanner0.setExcludes(stringArray0);
      Vector<InputStream> vector4 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector4;
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      vector3.add((Integer) 2);
      Object object1 = new Object();
      vector3.add((Integer) 2);
      Vector<Object> vector5 = new Vector<Object>();
      Object object2 = new Object();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("Z", 1);
      vector2.add((Object) locale_LanguageRange0);
      Vector<Object> vector6 = new Vector<Object>();
      boolean boolean0 = archiveScanner0.haveSlowResults;
      Object object3 = new Object();
      archiveScanner0.processFile("cOQNk");
      assertEquals(1, ArchiveScanner.DIRECTORY);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Vector<Object> vector3 = new Vector<Object>();
      Object object6 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile(".zip", ".zip");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[7];
      Vector<Object> vector4 = new Vector<Object>();
      archiveScanner0.dirsExcluded = vector4;
      stringArray0[0] = ".zip";
      vector4.retainAll(vector2);
      vector4.iterator();
      stringArray0[1] = "m_WS\"*wW?@C>|u\"6";
      stringArray0[2] = ".zip";
      stringArray0[3] = ".zip";
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      vector4.replaceAll(unaryOperator0);
      stringArray0[4] = "m_WS\"*wW?@C>|u\"6";
      stringArray0[5] = "m_WS\"*wW?@C>|u\"6";
      stringArray0[6] = "m_WS\"*wW?@C>|u\"6";
      vector4.iterator();
      vector4.remove((Object) "m_WS\"*wW?@C>|u\"6");
      archiveScanner0.setExcludes(stringArray0);
      vector4.add((Object) "m_WS\"*wW?@C>|u\"6");
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector5 = new Vector<Object>();
      Object object7 = new Object();
      Object object8 = new Object();
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("zW`UQw.jar.jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Vector<Object> vector3 = new Vector<Object>();
      Object object6 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile(".zip", ".zip");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[7];
      Vector<Object> vector4 = new Vector<Object>();
      archiveScanner0.dirsExcluded = vector4;
      stringArray0[0] = ".zip";
      vector4.retainAll(vector2);
      vector4.iterator();
      stringArray0[1] = "m_WS\"*wW?@C>|u\"6";
      stringArray0[2] = ".zip";
      stringArray0[3] = ".zip";
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      vector4.replaceAll(unaryOperator0);
      stringArray0[4] = "m_WS\"*wW?@C>|u\"6";
      stringArray0[5] = "m_WS\"*wW?@C>|u\"6";
      stringArray0[6] = "m_WS\"*wW?@C>|u\"6";
      vector4.iterator();
      archiveScanner0.setExcludes(stringArray0);
      vector4.remove((Object) "m_WS\"*wW?@C>|u\"6");
      archiveScanner0.setExcludes(stringArray0);
      vector4.add((Object) "m_WS\"*wW?@C>|u\"6");
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector5 = new Vector<Object>();
      Object object7 = new Object();
      Object object8 = new Object();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, ".zip");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      ImprovedFile improvedFile0 = new ImprovedFile("Z", "Z");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Z";
      stringArray0[1] = "";
      stringArray0[2] = "Z";
      Vector<InputStream> vector1 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector1;
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-1L));
      pipedInputStream0.markSupported();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 8192);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      sequenceInputStream0.available();
      vector1.addElement(sequenceInputStream0);
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, pipedInputStream1);
      pipedOutputStream0.write((-2688));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      vector1.add((InputStream) pipedInputStream1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte)43);
      byteArrayInputStream0.skip((byte)43);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("cMm.lts.utl.TreeNod");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("{~l8", "{~l8");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{~l8";
      stringArray0[1] = "";
      stringArray0[2] = "{~l8";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-1L));
      pipedInputStream0.markSupported();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 8192);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      vector0.addElement((InputStream) null);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      vector0.add((InputStream) sequenceInputStream1);
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, pipedInputStream1);
      pipedOutputStream0.write((-2688));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      vector0.add((InputStream) pipedInputStream1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte)43);
      byteArrayInputStream0.skip((byte)43);
      try { 
        archiveScanner0.processDirectory(improvedFile0, "cMm.lts.utl.TreeNod", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/{~l8/{~l8
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.55213793531794
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      archiveScanner0.setExcludes(stringArray0);
      Vector<InputStream> vector1 = new Vector<InputStream>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      archiveScanner0.dirsNotIncluded = vector1;
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-1L));
      pipedInputStream0.markSupported();
      vector1.add((InputStream) pipedInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 8192);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      sequenceInputStream0.available();
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, pipedInputStream1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      vector1.add((InputStream) sequenceInputStream0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      Vector<String> vector2 = new Vector<String>();
      archiveScanner0.scandir(improvedFile0, ".sL+b+\"g;'hr+$ybs%", true);
      assertEquals(0L, improvedFile0.getUsableSpace());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile("I{B", "(=HM9bBe>b|0WkQW7^");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector3 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector3;
      archiveScanner0.addDefaultExcludes();
      vector1.add((Object) "Save Changes.jar");
      String[] stringArray0 = new String[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "Save Changes.jar";
      stringArray0[1] = "@MCS4sNct";
      stringArray0[2] = "[pPHVm<Conu&I#GL";
      stringArray0[3] = "5.ZD3!H";
      vector3.add((Object) "Save Changes.jar");
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.excludes = stringArray0;
      vector1.add((Object) "%r1T/:");
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      vector0.add((Object) "I{B");
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("Save Changes.jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      DirectoryScanner.match("veCKhange.j;r", "");
      ImprovedFile improvedFile0 = new ImprovedFile("", "veCKhange.j;r");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream1.markSupported();
      Integer integer0 = new Integer((-156));
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, byteArrayInputStream0);
      String[] stringArray0 = new String[5];
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector1;
      stringArray0[0] = "";
      stringArray0[1] = "veCKhange.j;r";
      stringArray0[2] = "";
      stringArray0[3] = "veCKhange.j;r";
      sequenceInputStream0.read(byteArray0);
      stringArray0[4] = "";
      archiveScanner0.setIncludes(stringArray0);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream2, sequenceInputStream2);
      sequenceInputStream3.available();
      sequenceInputStream1.skip((-776L));
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration0);
      sequenceInputStream2.markSupported();
      sequenceInputStream3.available();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "veCKhange.j;r", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Vector<Object> vector3 = new Vector<Object>();
      Object object6 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile("'o\"6C#<|s", "'o\"6C#<|s");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[7];
      Vector<Object> vector4 = new Vector<Object>();
      archiveScanner0.dirsExcluded = vector4;
      stringArray0[0] = "'o\"6C#<|s";
      vector4.iterator();
      stringArray0[1] = "m_WS\"*wW?@C>hu\"6";
      stringArray0[2] = "'o\"6C#<|s";
      stringArray0[3] = "m_WS\"*wW?@C>hu\"6";
      stringArray0[4] = "m_WS\"*wW?@C>hu\"6";
      stringArray0[5] = "m_WS\"*wW?@C>hu\"6";
      stringArray0[6] = "m_WS\"*wW?@C>hu\"6";
      vector4.iterator();
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      vector4.remove((Object) "m_WS\"*wW?@C>hu\"6");
      archiveScanner0.setIncludes(stringArray0);
      vector4.add((Object) "'o\"6C#<|s");
      vector4.add((Object) null);
      Vector<Object> vector5 = new Vector<Object>();
      Object object7 = new Object();
      Object object8 = new Object();
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("m_WS\"*wW?@C>hu\"6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile("Save Changes.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[4];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector2.sort(comparator0);
      vector2.ensureCapacity((-431));
      stringArray0[0] = "`E\"OXKsv.bN";
      vector2.add((Object) archiveScanner0);
      stringArray0[1] = "`E\"OXKsv.bN";
      stringArray0[2] = "Save Changes.jar";
      stringArray0[3] = "ae ChangesEjar";
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector3 = new Vector<Object>();
      Vector<Object> vector4 = new Vector<Object>(vector2);
      archiveScanner0.filesIncluded = vector4;
      vector4.add((Object) "`E\"OXKsv.bN");
      Object object4 = new Object();
      vector4.add((Object) "ae CngesEjar");
      Object object5 = new Object();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "Save Changes.jar", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile("I{B", "(=HM9bBe>b|0WkQW7^");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector3 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector3;
      archiveScanner0.addDefaultExcludes();
      vector1.add((Object) "Save Changes.jar");
      String[] stringArray0 = new String[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "Save Changes.jar";
      stringArray0[1] = "@MCS4sNct";
      stringArray0[2] = "[pPHVm<Conu&I#GL";
      stringArray0[3] = "5.ZD3!H";
      archiveScanner0.setIncludes(stringArray0);
      Object object4 = new Object();
      vector1.add((Object) "%r1T/:");
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      vector0.add((Object) "I{B");
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("Save Changes.jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Vector<Object> vector3 = new Vector<Object>();
      Object object6 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile("'o\"6C#<|s", "'o\"6C#<|s");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[7];
      Vector<Object> vector4 = new Vector<Object>();
      archiveScanner0.dirsExcluded = vector4;
      stringArray0[0] = "'o\"6C#<|s";
      vector4.iterator();
      stringArray0[1] = "m_WS\"*wW?@C>hu\"6";
      stringArray0[2] = "'o\"6C#<|s";
      stringArray0[3] = "m_WS\"*wW?@C>hu\"6";
      stringArray0[4] = "m_WS\"*wW?@C>hu\"6";
      stringArray0[5] = "m_WS\"*wW?@C>hu\"6";
      stringArray0[6] = "m_WS\"*wW?@C>hu\"6";
      vector4.iterator();
      archiveScanner0.addDefaultExcludes();
      vector4.remove((Object) "m_WS\"*wW?@C>hu\"6");
      archiveScanner0.setIncludes(stringArray0);
      vector4.add((Object) "'o\"6C#<|s");
      vector4.add((Object) null);
      Vector<Object> vector5 = new Vector<Object>();
      Object object7 = new Object();
      Object object8 = new Object();
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("m_WS\"*wW?@C>hu\"6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile("Save Changes.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[4];
      vector2.ensureCapacity((-431));
      stringArray0[0] = "`E\"OXKsv.bN";
      stringArray0[1] = "`E\"OXKsv.bN";
      stringArray0[2] = "Save Changes.jar";
      stringArray0[3] = "ae ChangesEjar";
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector3 = new Vector<Object>();
      Vector<Object> vector4 = new Vector<Object>(vector2);
      archiveScanner0.filesIncluded = vector4;
      Object object4 = new Object();
      vector4.add((Object) null);
      vector4.add((Object) "ae CngesEjar");
      archiveScanner0.processFile("`E\"OXKsv.bN");
      Object object5 = new Object();
      try { 
        archiveScanner0.processArchive(improvedFile0, "Save Changes.jar");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, Save Changes.jar
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile("Save Changes.jar", "Save Changes.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "`E\"OXKsv.bN";
      stringArray0[1] = "Save ChangesEjar";
      stringArray0[2] = "Save Changes.jar";
      stringArray0[3] = "Save ChangesEjar";
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector3 = new Vector<Object>();
      Vector<Object> vector4 = new Vector<Object>(vector2);
      archiveScanner0.filesIncluded = vector4;
      Object object4 = new Object();
      vector2.add((Object) vector1);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("6PizF#S0sx8t|)z3Q6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("{~l8", "{~l8");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{~l8";
      stringArray0[1] = "{~l8";
      stringArray0[2] = "{~l8";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-1L));
      pipedInputStream0.markSupported();
      vector0.add((InputStream) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 8180);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      vector0.addElement((InputStream) null);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      vector0.add((InputStream) sequenceInputStream1);
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, pipedInputStream1);
      byte[] byteArray0 = new byte[0];
      pipedInputStream1.read(byteArray0);
      pipedOutputStream0.write((-2688));
      byte[] byteArray1 = new byte[7];
      vector0.add((InputStream) pipedInputStream1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream0.mark((byte)43);
      byteArrayInputStream0.skip((byte)0);
      archiveScanner0.processDirectory(improvedFile0, "cMmlts.utl.TreeNod", true);
      assertEquals(0L, improvedFile0.lastModified());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile("Save Changes.jar", "Save Changes.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@MCS4sNct";
      stringArray0[1] = "Save Changes.jar";
      stringArray0[2] = "Save Changes.jar";
      stringArray0[3] = "5.ZD3!H";
      stringArray0[4] = "{8l.hFaG)$#Jb@tR";
      stringArray0[5] = "Save Changes.jar";
      stringArray0[6] = "Save Changes.jar";
      stringArray0[7] = "Save Changes.jar";
      stringArray0[8] = "Save Changes.jar";
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector3 = new Vector<Object>();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      vector2.add((Object) null);
      Vector<Object> vector4 = new Vector<Object>();
      Predicate<Object> predicate0 = Predicate.isEqual(object3);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      vector4.removeIf(predicate3);
      archiveScanner0.filesExcluded = vector4;
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("@MCS4sNct.jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      ImprovedFile improvedFile0 = new ImprovedFile((String) null, "Q;ZUNr9");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      Integer integer0 = new Integer((-156));
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, byteArrayInputStream0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Quit the application?";
      stringArray0[1] = "Q;ZUNr9";
      stringArray0[2] = "Quit the application?";
      stringArray0[3] = "Q;ZUNr9";
      sequenceInputStream0.read(byteArray0);
      sequenceInputStream2.read(byteArray0);
      stringArray0[4] = "Quit the application?";
      archiveScanner0.setIncludes(stringArray0);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream2, sequenceInputStream2);
      sequenceInputStream3.available();
      sequenceInputStream1.skip((-776L));
      sequenceInputStream3.available();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration0);
      sequenceInputStream2.markSupported();
      sequenceInputStream1.close();
      sequenceInputStream3.available();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream1);
      byteArrayInputStream0.skip(1L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "Quit the application?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      ImprovedFile improvedFile0 = new ImprovedFile("Z", "Z");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Z";
      stringArray0[1] = "";
      stringArray0[2] = "Z";
      Vector<InputStream> vector1 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector1;
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-1L));
      pipedInputStream0.markSupported();
      vector1.add((InputStream) pipedInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 8192);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      sequenceInputStream0.available();
      vector1.addElement(sequenceInputStream0);
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, pipedInputStream1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      vector1.add((InputStream) pipedInputStream1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte)43);
      byteArrayInputStream0.skip((byte)43);
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      ImprovedFile improvedFile0 = new ImprovedFile("Z", "Z");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector2 = new Vector<Object>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Z";
      Vector<Integer> vector3 = new Vector<Integer>();
      archiveScanner0.filesNotIncluded = vector3;
      stringArray0[1] = "veCKhange.j;r";
      stringArray0[2] = "Z";
      archiveScanner0.setExcludes(stringArray0);
      Vector<InputStream> vector4 = new Vector<InputStream>();
      improvedFile0.mkdir();
      Object object0 = new Object();
      vector0.add((Object) improvedFile0);
      Object object1 = new Object();
      vector1.add(object1);
      vector2.addAll((Collection<?>) vector4);
      vector2.clear();
      vector0.iterator();
      Integer integer0 = new Integer(2147);
      Vector<Object> vector5 = new Vector<Object>();
      Object object2 = new Object();
      vector0.sort((Comparator<? super Object>) null);
      vector0.add((Object) vector1);
      Vector<Object> vector6 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector6;
      vector1.add(object0);
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector7 = new Vector<Object>();
      Object object3 = new Object();
      Object object4 = new Object();
      archiveScanner0.processArchive(improvedFile0, "tempdir");
      assertEquals(0L, improvedFile0.getFreeSpace());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile("Save Changes.jar", "Save Changes.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "`E\"OXKsv.bN";
      stringArray0[1] = "Save ChangesEjar";
      stringArray0[2] = "`E\"OXKsv.bN";
      stringArray0[3] = "Save ChangesEjar";
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector3 = new Vector<Object>();
      Vector<Object> vector4 = new Vector<Object>(vector2);
      archiveScanner0.filesIncluded = vector4;
      Object object4 = new Object();
      Object object5 = new Object();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "Save Changes.jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Vector<Object> vector3 = new Vector<Object>();
      Object object6 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile("'o\"6C#<|s", "'o\"6C#<|s");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[7];
      Vector<Object> vector4 = new Vector<Object>();
      archiveScanner0.dirsExcluded = vector4;
      stringArray0[0] = "'o\"6C#<|s";
      vector4.iterator();
      stringArray0[1] = "m_WS\"*wW?@C>hu\"6";
      stringArray0[2] = "'o\"6C#<|s";
      stringArray0[3] = "m_WS\"*wW?@C>hu\"6";
      stringArray0[4] = "m_WS\"*wW?@C>hu\"6";
      stringArray0[5] = "m_WS\"*wW?@C>hu\"6";
      stringArray0[6] = "m_WS\"*wW?@C>hu\"6";
      Object object7 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector2.sort(comparator0);
      vector0.add((Object) consumer0);
      vector4.add((Object) null);
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector5 = new Vector<Object>();
      Object object8 = new Object();
      Object object9 = new Object();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "n~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      vector1.add((Object) "2Y$W+JM}&U19AJ.jar");
      vector0.add((Object) consumer0);
      Object object1 = new Object();
      vector0.add((Object) "2Y$W+JM}&U19AJ.jar");
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object5 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile("Iw1Lgd`[5>uVc", "Iw1Lgd`[5>uVc");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner1.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<Object> vector3 = new Vector<Object>();
      Vector<Object> vector4 = new Vector<Object>(vector1);
      Object object6 = new Object();
      Vector<Locale.LanguageRange> vector5 = new Vector<Locale.LanguageRange>();
      archiveScanner1.filesNotIncluded = vector5;
      Object object7 = new Object();
      String string0 = " it?";
      archiveScanner1.processArchive(improvedFile0, string0);
      assertFalse(improvedFile0.canRead());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("{~l8", "{~l8");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{~l8";
      stringArray0[1] = "";
      stringArray0[2] = "{~l8";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-1L));
      pipedInputStream0.markSupported();
      vector0.add((InputStream) pipedInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 8192);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      vector0.addElement((InputStream) null);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      vector0.add((InputStream) sequenceInputStream1);
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, pipedInputStream1);
      pipedOutputStream0.write((-2688));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      vector0.add((InputStream) pipedInputStream1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte)43);
      byteArrayInputStream0.skip((byte)43);
      archiveScanner0.processDirectory(improvedFile0, "cMm.lts.utl.TreeNod", true);
      assertEquals("{~l8", improvedFile0.getName());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("d2vB5|UFnK");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("d2vB5|UFnK/d2vB5|UFnK/Failed to delete directory, 0P}Q(+dWShgC+XU");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.setPermissions(evoSuiteFile1, false, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("d2vB5|UFnK/d2vB5|UFnK/Failed to delete directory, 0P}Q(+dWShgC+XU");
      FileSystemHandling.createFolder(evoSuiteFile2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ImprovedFile improvedFile1 = new ImprovedFile("zW`UQw");
      improvedFile1.toPath();
      improvedFile1.createNewFile();
      archiveScanner0.toFileType(improvedFile1);
      System.setCurrentTimeMillis(archiveScanner0.ARCHIVE);
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8548720307766426
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("d2vB5|UFnK");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("d2vB5|UFnK/d2vB5|UFnK/Failed to delete directory, 0P}Q(+dWShgC+XU");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      MockFile mockFile0 = new MockFile(improvedFile0, "zW`UQw");
      mockFile0.createNewFile();
      MockFile mockFile1 = new MockFile("");
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile1, "zW`UQw", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("IM*KN9iq1E");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("IM*KN9iq1E");
      linkedList1.add("IM*KN9iq1E");
      linkedList1.add("IM*KN9iq1E");
      linkedList0.clone();
      linkedList1.add("IM*KN9iq1E");
      Vector<String> vector0 = new Vector<String>();
      linkedList0.poll();
      linkedList0.add("IM*KN9iq1E");
      Integer[] integerArray0 = new Integer[6];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = (Integer) int0;
      Integer integer3 = new Integer(4);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[1] = integer5;
      vector0.toArray(integerArray0);
      linkedList0.add("IM*KN9iq1E");
      linkedList1.add("IM*KN9iq1E");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList1.removeAll(vector0);
      linkedList1.add("M*!NH]");
      linkedList1.poll();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList5.poll();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int1 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      vector0.add(object5);
      Object object6 = new Object();
      Object object7 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile("Ly9i%~\"a");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "*QdI";
      stringArray0[1] = "Save Changes.jar.jar";
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector2 = new Vector<Object>();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      archiveScanner0.isArchive(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      vector0.add((Object) "})]Izeo(C%K<n~P");
      Vector<Object> vector2 = new Vector<Object>();
      ImprovedFile improvedFile0 = new ImprovedFile("@MCS4sNct");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "5.ZD3!H";
      stringArray0[1] = "0jM>F$TyzIK!1._?9kj)L~U.jar";
      stringArray0[2] = "@MCS4sNct";
      stringArray0[3] = "5.ZD3!H";
      stringArray0[4] = "5.ZD3!H";
      stringArray0[5] = ";1Q";
      stringArray0[6] = "@MCS4sNct";
      stringArray0[7] = "0jM>F$TyzIK!1._?9kj)L~U.jar";
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector3 = new Vector<Object>();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      archiveScanner0.isArchive(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("d2vB5|UFnK");
      improvedFile0.getCanonicalPath();
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0, "d2vB5|UFnK");
      ImprovedFile improvedFile2 = new ImprovedFile(improvedFile1, ".jar");
      improvedFile2.setReadable(false);
      ImprovedFile.createTempFileName("Failed to delete directory, ", "vqs", improvedFile1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      MockFile mockFile0 = new MockFile("zW`UQw.jar");
      MockFile mockFile1 = new MockFile(mockFile0, "Failed to delete directory, ");
      improvedFile2.createNewFile();
      archiveScanner0.toFileType(mockFile0);
      long long0 = 2200L;
      System.setCurrentTimeMillis(long0);
      long long1 = 1306L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("d2vB5|UFnK");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("d2vB5|UFnK/d2vB5|UFnK/Failed to delete directory, 0P}Q(+dWShgC+XU");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      improvedFile0.toPath();
      FileSystemHandling.setPermissions(evoSuiteFile1, false, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<String> vector0 = new Vector<String>();
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, ">X|FEUovb*]T|% eY2 ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("&GN1E");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("&GN1E");
      linkedList3.add("bDU*Ej?:'");
      linkedList3.add("g`Ux%Im.._");
      linkedList1.clone();
      linkedList3.add("&GN1E");
      Vector<String> vector0 = new Vector<String>();
      linkedList1.poll();
      linkedList0.pollFirst();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList1.add("&GN1E");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList4.add((String) null);
      Integer[] integerArray0 = new Integer[6];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      int int1 = 4;
      Integer integer1 = new Integer(4);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(4);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int1);
      integerArray0[5] = integer5;
      vector0.toArray(integerArray0);
      linkedList5.add("&GN1E");
      linkedList4.add("&GN1E");
      linkedList5.add("&GN1E");
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList5.removeAll(vector0);
      linkedList5.add(".ZIP");
      linkedList4.poll();
      linkedList2.retainAll(vector0);
      LinkedList<String> linkedList7 = new LinkedList<String>();
      LinkedList<String> linkedList8 = new LinkedList<String>();
      linkedList2.iterator();
      LinkedList<String> linkedList9 = new LinkedList<String>();
      linkedList9.poll();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("d2vB5|UFnK");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("d2vB5|UFnK/d2vB5|UFnK/Failed to delete directory, 0P}Q(+dWShgC+XU");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.setPermissions(evoSuiteFile1, false, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<String> vector0 = new Vector<String>();
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "`7lL`#/y?dgBALp?*C_", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("{~l8", "{~l8");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{~l8";
      stringArray0[1] = "{~l8";
      stringArray0[2] = "{~l8";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      long long0 = pipedInputStream0.skip((-1L));
      pipedInputStream0.markSupported();
      vector0.add((InputStream) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 8180);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      vector0.addElement((InputStream) null);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      vector0.add((InputStream) sequenceInputStream1);
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, pipedInputStream1);
      byte[] byteArray0 = new byte[0];
      pipedInputStream1.read(byteArray0);
      pipedOutputStream0.write((-2688));
      byte[] byteArray1 = new byte[7];
      vector0.add((InputStream) pipedInputStream1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      archiveScanner0.toFileType(improvedFile0);
      long long1 = (-172L);
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale locale0 = Locale.forLanguageTag("");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      locale0.getUnicodeLocaleKeys();
      locale0.getDisplayVariant();
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector1, (Collection<String>) set0, locale_FilteringMode0);
      Vector<Locale.LanguageRange> vector2 = new Vector<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) vector2, (Collection<String>) list0, locale_FilteringMode0);
      Vector<Locale.LanguageRange> vector3 = new Vector<Locale.LanguageRange>();
      vector2.addElement((Locale.LanguageRange) null);
      Vector<Locale.LanguageRange> vector4 = new Vector<Locale.LanguageRange>(6, 6);
      Vector<Locale.LanguageRange> vector5 = new Vector<Locale.LanguageRange>();
      Vector<Locale.LanguageRange> vector6 = new Vector<Locale.LanguageRange>();
      Vector<Locale.LanguageRange> vector7 = new Vector<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      locale0.getExtension('M');
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) vector1, (Collection<String>) list0);
      Locale locale1 = Locale.CHINA;
      Locale locale2 = Locale.FRENCH;
      locale2.getDisplayName(locale0);
      Vector<Locale.LanguageRange> vector8 = new Vector<Locale.LanguageRange>('M');
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) vector4, (Collection<String>) list0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Vector<Locale.LanguageRange> vector9 = new Vector<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(vector9);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list1, locale_FilteringMode1);
      linkedList1.add((Locale.LanguageRange) null);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list2, locale_FilteringMode3);
      Locale.filterTags((List<Locale.LanguageRange>) vector3, (Collection<String>) list0, locale_FilteringMode2);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("`sl8", "`sl8");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`sl8";
      stringArray0[1] = "`sl8";
      stringArray0[2] = "`sl8";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-1L));
      pipedInputStream0.markSupported();
      vector0.add((InputStream) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 8180);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      vector0.addElement((InputStream) null);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      vector0.add((InputStream) null);
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, pipedInputStream1);
      byte[] byteArray0 = new byte[0];
      pipedInputStream1.read(byteArray0);
      pipedOutputStream0.write(8180);
      vector0.add((InputStream) pipedInputStream1);
      Vector<String> vector1 = new Vector<String>();
      try { 
        archiveScanner0.scanArchive(improvedFile0, "s.ar");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /home/ubuntu/termite/projects/78_caloriecount/`sl8/`sl8
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.excludes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<String> vector0 = new Vector<String>();
      vector0.add("f]`i%TK");
      archiveScanner0.dirsExcluded = vector0;
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, "f]`i%TK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("-~l8", "-~l8");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-~l8";
      stringArray0[1] = "-~l8";
      stringArray0[2] = "-~l8";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-1L));
      pipedInputStream0.markSupported();
      vector0.add((InputStream) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 8180);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      vector0.addElement((InputStream) null);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      vector0.add((InputStream) null);
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, pipedInputStream1);
      byte[] byteArray0 = new byte[0];
      pipedInputStream1.read(byteArray0);
      pipedOutputStream0.write((-2688));
      byte[] byteArray1 = new byte[7];
      vector0.add((InputStream) pipedInputStream1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream0.mark((byte)43);
      byteArrayInputStream0.skip((byte)0);
      archiveScanner0.processDirectory(improvedFile0, "cMmlts.utl.TreeNod", true);
      assertFalse(improvedFile0.exists());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("IM*KN1E");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("IM*KN1E");
      linkedList1.add("g`Ux%Im..0");
      linkedList1.add("g`Ux%Im..0");
      linkedList0.clone();
      linkedList1.add("IM*KN1E");
      Vector<String> vector0 = new Vector<String>();
      linkedList0.poll();
      linkedList0.add("IM*KN1E");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList1.add((String) null);
      Integer[] integerArray0 = new Integer[6];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = (Integer) int0;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      vector0.toArray(integerArray0);
      linkedList2.add("IM*KN1E");
      linkedList1.add("IM*KN1E");
      linkedList2.add("IM*KN1E");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scandir(improvedFile0, (String) null, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/IM*KN1E
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.533344419789668
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      archiveScanner0.setIncludes(stringArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.pollFirst();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList2, locale_FilteringMode0);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList1.stream();
      linkedList2.poll();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) linkedList1);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) linkedList1, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) linkedList1, locale_FilteringMode2);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("IM*KN1E");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("IM*KN1E");
      linkedList1.add("g`Ux%Im..0");
      linkedList1.add("g`Ux%Im..0");
      linkedList1.add("IM*KN1E");
      Vector<String> vector0 = new Vector<String>();
      linkedList0.poll();
      linkedList0.add("IM*KN1E");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList1.add((String) null);
      Integer[] integerArray0 = new Integer[6];
      int int0 = 26;
      Integer integer0 = new Integer(26);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = (Integer) int0;
      Integer integer3 = new Integer(26);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      vector0.toArray(integerArray0);
      linkedList2.add("IM*KN1E");
      linkedList1.add("IM*KN1E");
      linkedList2.add("IM*KN1E");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scandir(improvedFile0, (String) null, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/IM*KN1E
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }
}
