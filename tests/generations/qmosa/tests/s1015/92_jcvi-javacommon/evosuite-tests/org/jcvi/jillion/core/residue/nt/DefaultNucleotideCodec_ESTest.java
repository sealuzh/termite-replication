/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 07:18:18 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      int int0 = (-1230);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode((byte[]) null, 37L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3502774894239584
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      Byte byte0 = new Byte((byte) (-12));
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide1 = Nucleotide.Cytosine;
      linkedList1.add(nucleotide1);
      linkedList1.clone();
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (-925));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-34)}, byteArray1);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide2 = Nucleotide.NotThymine;
      Set<Nucleotide> set1 = nucleotide2.getAllPossibleAmbiguities();
      byte[] byteArray2 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.isGap(byteArray2, (-925));
      byte[] byteArray3 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList3);
      Byte byte1 = new Byte((byte) (-1));
      Byte byte2 = new Byte((byte) (-81));
      int int0 = defaultNucleotideCodec2.getGappedOffsetFor(byteArray3, (-148));
      assertEquals(0, int0);
      
      long long0 = defaultNucleotideCodec2.getUngappedLength(byteArray3);
      assertEquals(0L, long0);
      
      byte[] byteArray4 = defaultNucleotideCodec1.encode((int) (byte) (-1), iterator0);
      assertEquals(5, byteArray4.length);
      
      Nucleotide nucleotide3 = Nucleotide.Purine;
      Set<Nucleotide> set2 = nucleotide3.getAllPossibleAmbiguities();
      byte[] byteArray5 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray5);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4523308411108564
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-2925));
      assertEquals((-2925), int0);
      
      byteArray0[0] = (byte) (-64);
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide1 = Nucleotide.Cytosine;
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      linkedList2.add(nucleotide1);
      linkedList2.clone();
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList4 = new LinkedList<Byte>();
      linkedList1.retainAll(set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec1.getUngappedLength(byteArray0);
      assertEquals((-1073741824L), long0);
      
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-64));
      byte[] byteArray2 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList1);
      linkedList2.retainAll(linkedList3);
      defaultNucleotideCodec1.isGap(byteArray2, (-2925));
      Byte byte0 = new Byte((byte)9);
      Byte byte1 = new Byte((byte)51);
      int int1 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (byte) (-64));
      assertEquals(1, int1);
      
      defaultNucleotideCodec1.getGapOffsets(byteArray2);
      assertEquals(4, byteArray2.length);
      
      String string0 = defaultNucleotideCodec1.toString(byteArray1);
      assertEquals("-", string0);
      assertEquals(5, byteArray1.length);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.04823494143235
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte)51, (long) (byte)51);
      Range range1 = Range.of((long) (byte)51);
      range1.toString(range_CoordinateSystem0);
      Range.parseRange("[ 51 .. 51 ]/0B", range_CoordinateSystem0);
      range1.intersects(range0);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getLength();
      range0.getBegin(range_CoordinateSystem1);
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      range0.getBegin();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-3542));
      // Undeclared exception!
      try { 
        Range.parseRange("L'A=6WPG|>", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse L'A=6WPG|> into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3510602807266006
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-4);
      Integer integer0 = new Integer(1908874367);
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      linkedList3.add(nucleotide0);
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      linkedList4.clone();
      LinkedList<Byte> linkedList5 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList6 = new LinkedList<Byte>();
      linkedList2.retainAll(linkedList1);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray1);
      assertEquals(0L, long0);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, (-352));
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList3);
      defaultNucleotideCodec3.isGap(byteArray1, (-352));
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray1, 1908874367);
      int int0 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, 0);
      assertEquals(1, int0);
      
      defaultNucleotideCodec2.isGap(byteArray1, (-566));
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.211128820965081
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)64;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3165227918580564
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Integer integer0 = new Integer(1908874367);
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      linkedList2.add(nucleotide0);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      linkedList2.clone();
      LinkedList<Byte> linkedList4 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList5 = new LinkedList<Byte>();
      LinkedList<Nucleotide> linkedList6 = new LinkedList<Nucleotide>();
      LinkedList<Object> linkedList7 = new LinkedList<Object>();
      linkedList6.retainAll(linkedList7);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedLength(byteArray1);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, 2438);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) linkedList6);
      assertEquals(4, byteArray2.length);
      
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec4.getUngappedOffsetFor(byteArray1, 13);
      assertEquals(5, byteArray1.length);
      assertEquals(12, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8602912106037675
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.toString(byteArray0);
      int int0 = 13;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 13);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int1 = 6;
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 6);
      Range range0 = Range.of((long) 0, (long) 0);
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 14);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7931511307298944
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      Range.ofLength(0);
      Integer integer0 = new Integer(9);
      Integer integer1 = new Integer(266);
      Integer.sum(13, 0);
      Integer integer2 = new Integer(9);
      Integer.toUnsignedString(0);
      Integer integer3 = new Integer(251692469);
      Integer.getInteger("b)V\"j%jUc+;");
      Integer integer4 = new Integer(13);
      Integer.getInteger("b)V\"j%jUc+;", 13);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      linkedList2.retainAll(linkedList0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, (-1946));
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 4294967294L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483645
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1279462185041473
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Byte byte0 = new Byte((byte)54);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)54);
      Integer integer0 = new Integer(13);
      Integer.compare(0, 2018);
      Integer.getInteger(" corresponds to encodedIndex ", 13);
      Integer.getInteger("(}!-yj}C", integer0);
      Integer integer1 = new Integer(1888);
      Integer.getInteger("(}!-yj}C", integer1);
      Integer integer2 = new Integer((-93046272));
      Integer.getInteger("unable to mkdirs for ");
      Integer integer3 = new Integer((-93046272));
      Integer.getInteger("(}!-yj}C", (-93046272));
      Integer.min(1073741824, 6);
      Integer.divideUnsigned(0, 1888);
      Integer.divideUnsigned(2306, (-862));
      Integer integer4 = new Integer(0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Byte byte1 = new Byte((byte)54);
      defaultNucleotideCodec0.decode(byteArray0, 0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.200603043118146
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      Byte byte0 = new Byte((byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 13);
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, (byte)0);
      Range range0 = Range.ofLength((long) byte0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0, range0);
      defaultNucleotideCodec0.encode((int) (byte)0, iterator0);
      Integer.divideUnsigned(887, 12);
      Integer.divideUnsigned((byte)0, 9);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(13);
      Integer.getInteger("6%Gc^c\u0007-{", integer1);
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator1 = defaultNucleotideCodec0.iterator(byteArray1, range0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.encode((-2), iterator1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 2023;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)52;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.437685587430974
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-2925));
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide1 = Nucleotide.Cytosine;
      linkedList1.add(nucleotide1);
      linkedList1.add(nucleotide1);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      linkedList3.add((Byte) null);
      linkedList1.retainAll(linkedList3);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)9);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray1, (byte) (-64));
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Byte byte0 = new Byte((byte) (-64));
      byte byte1 = (byte) (-11);
      Byte byte2 = new Byte((byte) (-11));
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (byte)9);
      Nucleotide nucleotide2 = Nucleotide.Pyrimidine;
      defaultNucleotideCodec1.encode(nucleotide2);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Integer integer0 = new Integer(1908874354);
      Integer integer1 = new Integer(1908874354);
      Integer integer2 = new Integer((-2807));
      Integer.toUnsignedString((-2807));
      Integer[] integerArray0 = new Integer[6];
      Integer integer3 = new Integer((-943));
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      Integer integer4 = Integer.getInteger("4294964489", integerArray0[0]);
      Integer integer5 = new Integer((byte)0);
      integerArray0[2] = integer3;
      Integer integer6 = new Integer((-2807));
      Integer integer7 = new Integer((int) integerArray0[1]);
      Integer integer8 = new Integer((int) integer4);
      Integer integer9 = new Integer((int) integerArray0[1]);
      Integer.compareUnsigned((-2807), (int) integerArray0[2]);
      integerArray0[3] = integer0;
      integerArray0[5] = integer2;
      Integer integer10 = new Integer(1908874354);
      Integer integer11 = new Integer((-2807));
      Integer integer12 = new Integer((int) integerArray0[1]);
      Integer.min((int) integerArray0[5], (int) integerArray0[1]);
      Integer integer13 = new Integer((int) integer4);
      Integer.compareUnsigned((int) integerArray0[5], 1908874354);
      Integer integer14 = new Integer((int) integerArray0[2]);
      Integer.toUnsignedString(1908874354);
      Integer integer15 = new Integer((int) integerArray0[3]);
      Integer.toUnsignedLong((int) integerArray0[5]);
      Integer integer16 = new Integer((int) integerArray0[3]);
      Integer.getInteger("4294964489", integer16);
      Integer integer17 = new Integer((int) integerArray0[1]);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer18 = new Integer((int) integer9);
      defaultNucleotideCodec0.isGap(byteArray0, (int) integer4);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) integerArray0[2], iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9697514389118647
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte)38;
      byteArray1[2] = (byte)38;
      byteArray1[3] = (byte)38;
      byteArray1[4] = (byte)38;
      byteArray1[5] = (byte)38;
      defaultNucleotideCodec0.iterator(byteArray1);
      Byte byte0 = new Byte((byte)38);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, (byte)38);
      Range range0 = Range.ofLength((byte)38);
      Range range1 = Range.ofLength((byte)38);
      range1.intersection(range0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec2.iterator(byteArray0, range1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-1347);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.encode((-1347), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-4);
      Integer integer0 = new Integer(1908874354);
      Integer integer1 = new Integer((-1199));
      Integer integer2 = new Integer(1908874354);
      Integer integer3 = new Integer((-205));
      Integer.toUnsignedString(880);
      Integer[] integerArray0 = new Integer[8];
      Integer integer4 = new Integer((-93046272));
      integerArray0[0] = integer4;
      integerArray0[1] = integer1;
      Integer.getInteger("880");
      Integer integer5 = new Integer((byte) (-4));
      integerArray0[2] = integer5;
      Integer.getInteger("880", (int) (byte) (-4));
      Integer.min((-1199), 10);
      Integer.divideUnsigned((byte) (-4), (int) integerArray0[1]);
      Integer.divideUnsigned(82, (-1199));
      integerArray0[3] = integer2;
      integerArray0[5] = integer3;
      integerArray0[6] = integer3;
      Integer.getInteger("880", integer4);
      Integer.getInteger("880", integer1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor((byte[]) null, (-93046272));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)6;
      byteArray1[3] = (byte) (-122);
      byteArray1[4] = (byte) (-32);
      byteArray1[5] = (byte)68;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-1968526676), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.027215791000468
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Integer integer0 = new Integer(1908874354);
      Integer integer1 = new Integer(1908874354);
      Integer integer2 = new Integer(1908874354);
      Integer integer3 = new Integer((-2807));
      Integer.toUnsignedString((-2807));
      Integer[] integerArray0 = new Integer[6];
      Integer integer4 = new Integer((-943));
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      Integer integer5 = new Integer((int) integerArray0[1]);
      Integer integer6 = new Integer((byte)0);
      integerArray0[2] = integer4;
      Integer integer7 = new Integer((-2807));
      Integer integer8 = new Integer((int) integerArray0[0]);
      Integer integer9 = new Integer((int) integerArray0[1]);
      Integer integer10 = new Integer((int) integerArray0[1]);
      Integer.compareUnsigned((-2807), (int) integerArray0[2]);
      integerArray0[3] = integer2;
      integerArray0[5] = integer3;
      Integer integer11 = new Integer(1908874354);
      Integer integer12 = new Integer((-2807));
      Integer integer13 = new Integer((int) integerArray0[1]);
      Integer.min((int) integerArray0[5], (int) integerArray0[1]);
      Integer integer14 = new Integer((int) integerArray0[0]);
      Integer.compareUnsigned((int) integerArray0[5], 1908874354);
      Integer integer15 = new Integer((int) integerArray0[2]);
      Integer.toUnsignedString(1908874354);
      Integer.getInteger("1908874354");
      Integer.toUnsignedLong((int) integerArray0[5]);
      Integer integer16 = new Integer((int) integerArray0[3]);
      Integer.getInteger("4294964489", integer16);
      Integer integer17 = new Integer((int) integerArray0[1]);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer18 = new Integer((int) integer9);
      defaultNucleotideCodec0.isGap(byteArray0, (int) integerArray0[0]);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) integerArray0[1], iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9397928111645655
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Integer integer0 = new Integer(1908874354);
      Integer integer1 = new Integer(1908874354);
      Integer integer2 = new Integer(1908874354);
      Integer integer3 = new Integer((-227));
      Integer.toUnsignedString(880);
      Integer[] integerArray0 = new Integer[8];
      Integer integer4 = new Integer((-93046272));
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      Integer integer5 = new Integer((int) integerArray0[1]);
      Integer integer6 = new Integer((byte)0);
      integerArray0[2] = integer6;
      Integer integer7 = Integer.getInteger("880", (int) (byte)0);
      Integer integer8 = new Integer(880);
      Integer integer9 = new Integer((int) integerArray0[0]);
      Integer integer10 = new Integer((int) integerArray0[1]);
      Integer integer11 = new Integer((int) integerArray0[1]);
      Integer.compareUnsigned(14, (int) integer7);
      integerArray0[3] = integer2;
      integerArray0[5] = integer3;
      Integer integer12 = new Integer(880);
      Integer.getInteger("880");
      Integer integer13 = new Integer((int) integerArray0[1]);
      Integer.getInteger("880", integer0);
      Integer integer14 = new Integer((int) integerArray0[3]);
      Integer.getInteger("+$~1DvAn7", integer14);
      Integer.getInteger("+$~1DvAn7", integer13);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer15 = new Integer((int) integer10);
      defaultNucleotideCodec0.isGap(byteArray0, 65);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(14, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.814678195767729
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Keto;
      linkedList0.offerFirst(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Purine;
      linkedList0.add(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("KR", string0);
      assertEquals(5, byteArray0.length);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0512269188651104
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(2L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)30}, byteArray0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8141986525875637
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)0;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(103, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.4902377680594854
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-2925));
      byte byte0 = (byte) (-64);
      byteArray0[0] = (byte) (-64);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-116));
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      nucleotide0.getBasesFor();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide1 = Nucleotide.Cytosine;
      linkedList1.add(nucleotide1);
      LinkedList linkedList2 = new LinkedList<Nucleotide>();
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList4 = new LinkedList<Byte>();
      linkedList1.retainAll(linkedList4);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-64));
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      linkedList1.retainAll(linkedList4);
      defaultNucleotideCodec1.isGap(byteArray1, (byte) (-64));
      Byte byte1 = new Byte((byte) (-64));
      Byte byte2 = new Byte((byte) (-11));
      Byte byte3 = new Byte((byte)77);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray1, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 0 corresponds to encodedIndex 4  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2037023750152533
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Byte byte0 = new Byte((byte)54);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)54);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)54);
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, 2);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((int) (byte)0, (Iterator<Nucleotide>) null);
      int int1 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      assertTrue(int1 == int0);
      
      int int2 = defaultNucleotideCodec2.getUngappedOffsetFor(byteArray1, (-58));
      assertEquals((-58), int2);
      
      defaultNucleotideCodec2.toString(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      Range range0 = Range.ofLength(0);
      defaultNucleotideCodec0.iterator(byteArray0, range0);
      Integer integer0 = new Integer(13);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      Range range1 = Range.of((long) 0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.parseRange("65iub$lwYqM<uN+OG.u", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 65iub$lwYqM<uN+OG.u into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      int int0 = (-2925);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7988457068767891
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte byte0 = (byte)0;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte)0, (long) (byte)0);
      Range range1 = Range.of((long) (byte)0);
      range1.intersects(range0);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8936217685248664
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-2925));
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)0;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[6] = (byte) (-127);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-2227));
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)9);
      int int1 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)33);
      assertEquals(33, int1);
      
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (-2227));
      assertFalse(boolean0);
      
      int int2 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)62);
      assertTrue(int2 == int0);
      
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals((-1073092546L), long0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, (-2070));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.520805078028692
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      Integer integer0 = new Integer(1908874354);
      Integer integer1 = new Integer((-1199));
      Integer integer2 = new Integer(1908874354);
      Integer.sum(1908874354, 1908874354);
      Integer integer3 = new Integer((-205));
      Integer.toUnsignedString(880);
      Integer[] integerArray0 = new Integer[8];
      Integer integer4 = new Integer((byte)38);
      Integer.compareUnsigned((-48), (-477218588));
      integerArray0[0] = integer4;
      integerArray0[1] = integer1;
      Integer.getInteger("880");
      Integer integer5 = new Integer(2205);
      integerArray0[2] = integer5;
      Integer.getInteger("880", (int) (byte)38);
      Integer.min((-1199), 10);
      Integer.divideUnsigned((byte)38, (int) integerArray0[1]);
      Integer.divideUnsigned(82, (-1588));
      integerArray0[3] = integer2;
      integerArray0[5] = integer3;
      integerArray0[7] = integer1;
      Integer integer6 = new Integer((-2222));
      Integer integer7 = Integer.getInteger("6%Gc^c\u0007-{", integer6);
      Integer.getInteger("880", integer7);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 967);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)50;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-4);
      Integer integer0 = new Integer(1908874354);
      Integer integer1 = new Integer(1908874354);
      Integer integer2 = new Integer(1908874354);
      Integer integer3 = new Integer((-227));
      Integer.toUnsignedString(880);
      Integer[] integerArray0 = new Integer[8];
      Integer integer4 = new Integer((-93046272));
      integerArray0[0] = integer4;
      integerArray0[1] = integer1;
      Integer.getInteger("880");
      Integer integer5 = new Integer((byte) (-4));
      integerArray0[2] = integer5;
      Integer.getInteger("880", (int) (byte) (-4));
      Integer integer6 = new Integer(880);
      Integer.divideUnsigned((byte) (-4), (int) integerArray0[1]);
      Integer.divideUnsigned(82, (int) integer6);
      Integer.compareUnsigned(14, (-2139));
      integerArray0[3] = integer2;
      integerArray0[5] = integer3;
      Integer.sum((byte) (-4), (-1896));
      Integer integer7 = new Integer((int) integerArray0[1]);
      Integer integer8 = new Integer((int) integerArray0[3]);
      Integer.getInteger("+$~1DvAn7", integer8);
      Integer.getInteger("+$~1DvAn7", integer7);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      Byte byte0 = new Byte((byte) (-4));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-1851L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -1851
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)25;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)25);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2156158187660675
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)38;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte)38;
      byteArray1[2] = (byte)38;
      byteArray1[3] = (byte)38;
      byteArray1[4] = (byte)38;
      byteArray1[5] = (byte)126;
      byteArray1[6] = (byte)38;
      Range range0 = Range.of((-3048L), (long) (byte)38);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -3048 .. 38 ]/0B is out of range of sequence which is only [ 0 .. 640034341 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer(1908874354);
      Integer integer1 = new Integer(1908874354);
      Integer integer2 = new Integer(1908874354);
      Integer integer3 = new Integer((-2807));
      Integer.toUnsignedString((-2807));
      Integer[] integerArray0 = new Integer[6];
      Integer integer4 = new Integer((-943));
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      Integer integer5 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer4;
      Integer integer6 = new Integer((-2807));
      Integer integer7 = new Integer((int) integerArray0[0]);
      Integer integer8 = new Integer((int) integerArray0[1]);
      Integer integer9 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer2;
      integerArray0[5] = integer3;
      Integer integer10 = new Integer((-2807));
      Integer integer11 = new Integer((int) integerArray0[1]);
      Integer.min((int) integerArray0[5], (int) integerArray0[1]);
      Integer integer12 = new Integer((int) integerArray0[0]);
      Integer.compareUnsigned((int) integerArray0[5], 1908874354);
      Integer integer13 = new Integer((int) integerArray0[2]);
      Integer.toUnsignedString(1908874354);
      Integer.getInteger("1908874354");
      Integer.toUnsignedLong((int) integerArray0[5]);
      Integer integer14 = new Integer((int) integerArray0[3]);
      Integer.getInteger("4294964489", integer14);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer15 = new Integer((int) integer8);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)8;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)54;
      Byte byte1 = new Byte((byte)54);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)54;
      byteArray1[2] = (byte)54;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (-925));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.3766265400583184
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)11;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-2485));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer(1908874354);
      Integer integer1 = new Integer(1908874354);
      Integer integer2 = new Integer(1908874354);
      Integer integer3 = new Integer((-2807));
      Integer.toUnsignedString((-2807));
      Integer[] integerArray0 = new Integer[6];
      Integer integer4 = new Integer((-943));
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      Integer integer5 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer4;
      Integer integer6 = new Integer((-2807));
      Integer integer7 = new Integer((int) integerArray0[0]);
      Integer integer8 = new Integer((int) integerArray0[1]);
      Integer integer9 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer2;
      integerArray0[5] = integer3;
      Integer integer10 = new Integer((-2807));
      Integer integer11 = new Integer((int) integerArray0[1]);
      Integer.min((int) integerArray0[5], (int) integerArray0[1]);
      Integer integer12 = new Integer((int) integerArray0[0]);
      Integer.compareUnsigned((int) integerArray0[5], 1908874354);
      Integer integer13 = new Integer((int) integerArray0[2]);
      Integer.toUnsignedString(1908874354);
      Integer.getInteger("1908874354");
      Integer.toUnsignedLong((int) integerArray0[5]);
      Integer.divideUnsigned((-943), 1231);
      Integer integer14 = new Integer((int) integerArray0[3]);
      Integer.getInteger("4294964489", integer14);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer15 = new Integer((int) integer8);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (int) integerArray0[0]);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      Range range0 = Range.ofLength(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      defaultNucleotideCodec0.isGap(byteArray0, 0);
      linkedList0.sort((Comparator<? super Object>) null);
      long long0 = (-2212L);
      Range.of((-2212L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-4);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, 1840700269);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Integer integer0 = new Integer(1908874354);
      Integer integer1 = new Integer(1908874354);
      Integer integer2 = new Integer((-2807));
      Integer.toUnsignedString(880);
      Integer[] integerArray0 = new Integer[8];
      Integer integer3 = new Integer((-938));
      integerArray0[0] = integer3;
      integerArray0[1] = integer1;
      Integer integer4 = new Integer((int) integerArray0[1]);
      Integer integer5 = new Integer((byte)0);
      integerArray0[2] = integer5;
      Integer integer6 = new Integer((-2807));
      Integer integer7 = new Integer(880);
      Integer integer8 = new Integer((int) integerArray0[0]);
      Integer integer9 = new Integer((int) integerArray0[1]);
      Integer integer10 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer1;
      integerArray0[5] = integer2;
      Integer integer11 = new Integer(880);
      Integer.getInteger("880");
      Integer integer12 = new Integer((int) integerArray0[1]);
      Integer integer13 = new Integer((int) integerArray0[0]);
      Integer.getInteger("880", integer13);
      Integer.toUnsignedString(1908874354);
      Integer integer14 = new Integer((int) integerArray0[3]);
      Integer.toUnsignedLong(880);
      Integer.getInteger("880", integer14);
      Integer.getInteger("880", integer12);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer15 = new Integer((int) integer9);
      defaultNucleotideCodec0.isGap(byteArray0, (int) integerArray0[0]);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.178407455825234
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)38;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-43);
      Byte byte0 = new Byte((byte)13);
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      String string0 = defaultNucleotideCodec0.toString(byteArray1);
      assertEquals("NVHBMSY", string0);
      
      List<Integer> list0 = defaultNucleotideCodec1.getGapOffsets(byteArray1);
      assertTrue(list0.isEmpty());
      
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.isGap(byteArray1, (byte)13);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)7, (byte) (-9), (byte) (-104), (byte) (-85), (byte)48}, byteArray1);
      assertEquals(8, byteArray1.length);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-4);
      Integer integer0 = new Integer(1908874354);
      Integer integer1 = new Integer(1908874354);
      Integer integer2 = new Integer(1908874354);
      Integer integer3 = new Integer((-227));
      Integer.toUnsignedString(880);
      Integer[] integerArray0 = new Integer[8];
      Integer integer4 = new Integer((-93046272));
      integerArray0[0] = integer4;
      integerArray0[1] = integer1;
      Integer.getInteger("880");
      Integer integer5 = new Integer((byte) (-4));
      integerArray0[2] = integer5;
      Integer.getInteger("880", (int) (byte) (-4));
      Integer integer6 = new Integer(880);
      Integer.divideUnsigned((byte) (-4), (int) integerArray0[1]);
      Integer.divideUnsigned(82, (int) integer6);
      Integer.compareUnsigned(14, (-2139));
      integerArray0[3] = integer2;
      integerArray0[5] = integer3;
      Integer.sum((byte) (-4), (-1896));
      Integer integer7 = new Integer((int) integerArray0[1]);
      Integer integer8 = new Integer((int) integerArray0[3]);
      Integer.getInteger("+$~1DvAn7", integer8);
      Integer.getInteger("+$~1DvAn7", integer7);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      Byte byte0 = new Byte((byte) (-4));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Byte byte0 = new Byte((byte)54);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      defaultNucleotideCodec0.isGap(byteArray0, (-1380));
      linkedList0.sort(comparator0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.clone();
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      linkedList1.parallelStream();
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      linkedList1.retainAll(linkedList0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Byte byte1 = new Byte((byte)54);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte)54);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 54 corresponds to encodedIndex 31  encodedglyph length is 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.170793809518273
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      defaultNucleotideCodec0.decode(byteArray0, 6L);
      defaultNucleotideCodec0.iterator(byteArray0);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)87;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(50943774, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = new Integer(1908874354);
      Integer integer1 = new Integer(1908874354);
      Integer integer2 = new Integer(1908874354);
      Integer integer3 = new Integer((-2824));
      Integer.toUnsignedString((-2824));
      Integer[] integerArray0 = new Integer[6];
      Integer integer4 = new Integer((-943));
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      Integer integer5 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer4;
      Integer integer6 = new Integer((-2824));
      Integer integer7 = new Integer((int) integerArray0[0]);
      Integer integer8 = new Integer((int) integerArray0[1]);
      Integer integer9 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer2;
      integerArray0[5] = integer3;
      Integer integer10 = new Integer((-2824));
      Integer integer11 = new Integer((int) integerArray0[1]);
      Integer.min((int) integerArray0[5], (int) integerArray0[1]);
      Integer.compareUnsigned((int) integerArray0[5], 1908874354);
      Integer integer12 = new Integer((int) integerArray0[2]);
      Integer.toUnsignedString(1908874354);
      Integer.getInteger("1908874354");
      Integer.toUnsignedLong((int) integerArray0[5]);
      Integer integer13 = new Integer((int) integerArray0[3]);
      Integer.getInteger("4294964472", integer13);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer14 = new Integer((int) integer8);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)8;
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, (byte)9);
      assertEquals(Nucleotide.Gap, nucleotide0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Integer integer0 = new Integer(1908874354);
      Integer integer1 = new Integer(1908874354);
      Integer integer2 = new Integer(1908874354);
      Integer integer3 = new Integer((-227));
      Integer.toUnsignedString(880);
      Integer[] integerArray0 = new Integer[8];
      Integer integer4 = new Integer((-93046272));
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      Integer integer5 = new Integer((int) integerArray0[1]);
      Integer integer6 = new Integer((byte)0);
      integerArray0[2] = integer6;
      Integer integer7 = Integer.getInteger("880", (int) (byte)0);
      Integer integer8 = new Integer(880);
      Integer integer9 = new Integer((int) integerArray0[0]);
      Integer integer10 = new Integer((int) integerArray0[1]);
      Integer integer11 = new Integer((int) integerArray0[1]);
      Integer.compareUnsigned(14, (int) integer7);
      integerArray0[3] = integer2;
      integerArray0[5] = integer3;
      Integer integer12 = new Integer(880);
      Integer.getInteger("880");
      Integer integer13 = new Integer((int) integerArray0[0]);
      Integer.getInteger("880", integer13);
      Integer integer14 = new Integer((int) integerArray0[3]);
      Integer.getInteger("+$~1DvAn7", integer14);
      Integer.getInteger("+$~1DvAn7", integer3);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer15 = new Integer((int) integer10);
      defaultNucleotideCodec0.isGap(byteArray0, 65);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-111);
      byteArray1[1] = (byte)45;
      byteArray1[2] = (byte) (-89);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Byte byte0 = new Byte((byte)54);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.toArray();
      LinkedList linkedList2 = new LinkedList<Byte>();
      linkedList0.add((Object) linkedList1);
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      linkedList1.parallelStream();
      LinkedList<Byte> linkedList4 = new LinkedList<Byte>();
      LinkedList<Nucleotide> linkedList5 = new LinkedList<Nucleotide>();
      linkedList5.retainAll(linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList6 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList6.iterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(14, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.2745180899177098
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Byte byte0 = new Byte((byte)54);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.toArray();
      linkedList1.clone();
      linkedList0.add((Object) linkedList1);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      linkedList1.parallelStream();
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      linkedList4.retainAll(linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      DefaultNucleotideCodec.values();
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-4);
      Integer integer0 = new Integer(1908874354);
      Integer integer1 = new Integer((-1199));
      Integer integer2 = new Integer(1908874354);
      Integer integer3 = new Integer((-205));
      Integer.toUnsignedString(880);
      Integer[] integerArray0 = new Integer[8];
      Integer integer4 = new Integer((-93046272));
      integerArray0[0] = integer4;
      integerArray0[1] = integer1;
      Integer.getInteger("880");
      Integer integer5 = new Integer((byte) (-4));
      integerArray0[2] = integer5;
      Integer integer6 = Integer.getInteger("880", (int) (byte) (-4));
      Integer integer7 = new Integer(880);
      Integer.divideUnsigned((byte) (-4), (int) integerArray0[1]);
      Integer.divideUnsigned(82, (int) integer7);
      Integer.compareUnsigned((int) integer6, (-2139));
      integerArray0[3] = integer2;
      integerArray0[5] = integer3;
      Integer.sum((-1199), (-1896));
      Integer integer8 = new Integer(87);
      Integer integer9 = new Integer(87);
      Integer.getInteger("+$~1DvAn7", integer9);
      Integer.getInteger("+$~1DvAn7", integer8);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      Range range0 = Range.ofLength(87);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Integer integer0 = new Integer(1908874354);
      Integer integer1 = new Integer(1908874354);
      Integer integer2 = new Integer((-2817));
      Integer.toUnsignedString((-2817));
      Integer[] integerArray0 = new Integer[6];
      Integer integer3 = new Integer((-943));
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      Integer integer4 = new Integer((int) integerArray0[1]);
      Integer integer5 = new Integer((byte)0);
      integerArray0[2] = integer3;
      Integer integer6 = new Integer((-2817));
      Integer integer7 = new Integer((int) integerArray0[1]);
      Integer integer8 = new Integer((int) integerArray0[0]);
      Integer integer9 = new Integer((int) integerArray0[1]);
      Integer integer10 = new Integer((int) integerArray0[1]);
      Integer.compareUnsigned((-2817), (int) integerArray0[2]);
      integerArray0[3] = integer2;
      integerArray0[5] = integer0;
      Integer integer11 = new Integer(1908874354);
      Integer integer12 = new Integer((-2817));
      Integer integer13 = new Integer((int) integerArray0[1]);
      Integer.min((int) integerArray0[5], (int) integerArray0[1]);
      Integer integer14 = new Integer((int) integerArray0[0]);
      Integer.compareUnsigned((int) integerArray0[5], 1908874354);
      Integer integer15 = new Integer((int) integerArray0[2]);
      Integer.toUnsignedString(1908874354);
      Integer integer16 = new Integer((int) integerArray0[3]);
      Integer.toUnsignedLong((int) integerArray0[5]);
      Integer integer17 = new Integer((int) integerArray0[3]);
      Integer.getInteger("4294964479", integer17);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer18 = new Integer((int) integer9);
      defaultNucleotideCodec0.isGap(byteArray0, (int) integerArray0[0]);
      Range range0 = Range.of(779L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 779 .. 779 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.8349519987112974
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.iterator(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Byte byte0 = new Byte((byte)0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 2);
      int int0 = defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, (byte)62);
      assertEquals(62, int0);
      
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
      assertFalse(boolean0);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)62;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)62;
      byteArray1[7] = (byte) (-127);
      byteArray1[8] = (byte)33;
      int int1 = defaultNucleotideCodec2.getGappedOffsetFor(byteArray1, (byte)0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.833519675961238
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Byte byte0 = new Byte((byte)54);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.clone();
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      linkedList1.retainAll(linkedList0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-2787));
      assertEquals(0, int0);
      
      int int1 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)54;
      byteArray1[2] = (byte)54;
      byteArray1[3] = (byte)54;
      byteArray1[4] = (byte)54;
      byteArray1[5] = (byte)54;
      byteArray1[6] = (byte)54;
      byteArray1[7] = (byte)54;
      int int2 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, 14);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Integer integer0 = new Integer(1908874354);
      Integer integer1 = new Integer(1908874354);
      Integer integer2 = new Integer(1908874354);
      Integer integer3 = new Integer(1908874354);
      Integer.toUnsignedString(1908874354);
      Integer[] integerArray0 = new Integer[6];
      Integer integer4 = new Integer((-943));
      integerArray0[0] = integer4;
      integerArray0[1] = integer1;
      Integer integer5 = new Integer((int) integerArray0[1]);
      Integer integer6 = new Integer((byte)0);
      integerArray0[2] = integer4;
      Integer integer7 = new Integer(1908874354);
      Integer integer8 = new Integer((int) integerArray0[1]);
      Integer integer9 = new Integer((int) integerArray0[0]);
      Integer integer10 = new Integer((int) integerArray0[1]);
      Integer integer11 = new Integer((int) integerArray0[1]);
      Integer.compareUnsigned(1908874354, (int) integerArray0[2]);
      integerArray0[3] = integer2;
      Integer.sum((-2), (-1));
      integerArray0[5] = integer3;
      Integer integer12 = new Integer(1908874354);
      Integer integer13 = new Integer(1908874354);
      Integer integer14 = new Integer((int) integerArray0[1]);
      Integer.min((int) integerArray0[5], (int) integerArray0[1]);
      Integer integer15 = new Integer((int) integerArray0[0]);
      Integer.compareUnsigned((int) integerArray0[5], 1908874354);
      Integer integer16 = new Integer((int) integerArray0[2]);
      Integer.toUnsignedString(1908874354);
      Integer integer17 = new Integer((int) integerArray0[3]);
      Integer.toUnsignedLong((int) integerArray0[5]);
      Integer integer18 = new Integer((int) integerArray0[3]);
      Integer.getInteger("1908874354", integer18);
      Integer integer19 = new Integer((int) integerArray0[1]);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer20 = new Integer((int) integer10);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (int) integerArray0[0]);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte byte0 = (byte)78;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte)78, 1888L);
      range0.getLength();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      byte[] byteArray0 = new byte[3];
      byte byte1 = (byte) (-46);
      byteArray0[2] = (byte)8;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte)51, (long) (byte)51);
      Range range1 = Range.of((long) (byte)51);
      range1.toString(range_CoordinateSystem0);
      Range range2 = Range.parseRange("[ 51 .. 51 ]/0B", range_CoordinateSystem0);
      range1.intersects(range0);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString();
      range0.getBegin(range_CoordinateSystem1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      range0.getBegin();
      Range.parseRange("[ 51 .. 51 ]/0B", range_CoordinateSystem0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)102;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.5213722930031675
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      Byte byte0 = new Byte((byte)38);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      linkedList2.parallelStream();
      LinkedList<Byte> linkedList4 = new LinkedList<Byte>();
      linkedList2.retainAll(linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.403763330235561
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte) (-58);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Byte byte0 = new Byte((byte)1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)1;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray1, (-2147418112));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.924886245768638
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-79);
      byteArray0[0] = (byte) (-79);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.valueOf("INSTANCE");
      byte byte1 = (byte)54;
      byteArray0[0] = (byte)54;
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.4063645937063898
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Integer integer0 = new Integer(1908874354);
      Integer integer1 = new Integer(1908874354);
      Integer integer2 = new Integer(1908874354);
      Integer integer3 = new Integer((-2817));
      Integer.toUnsignedString((-2817));
      Integer[] integerArray0 = new Integer[6];
      Integer integer4 = new Integer((-943));
      integerArray0[0] = integer2;
      integerArray0[1] = integer0;
      Integer integer5 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer4;
      Integer integer6 = new Integer((-2817));
      Integer integer7 = new Integer((int) integerArray0[0]);
      Integer integer8 = new Integer((int) integerArray0[1]);
      Integer integer9 = new Integer((int) integerArray0[1]);
      Integer.compareUnsigned((-2817), (int) integerArray0[2]);
      integerArray0[3] = integer2;
      integerArray0[5] = integer3;
      Integer integer10 = new Integer((-2817));
      Integer integer11 = new Integer((int) integerArray0[1]);
      Integer.min((int) integerArray0[5], (int) integerArray0[1]);
      Integer integer12 = new Integer((int) integerArray0[0]);
      Integer.compareUnsigned((int) integerArray0[5], 1908874354);
      Integer integer13 = new Integer((int) integerArray0[2]);
      Integer.toUnsignedString(1908874354);
      Integer.toUnsignedLong((int) integerArray0[5]);
      Integer integer14 = new Integer((int) integerArray0[3]);
      Integer integer15 = new Integer(1908874354);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer16 = new Integer((int) integer8);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.5213722930031675
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      Byte byte0 = new Byte((byte)38);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      linkedList1.add((Object) byte0);
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      linkedList2.parallelStream();
      LinkedList<Byte> linkedList4 = new LinkedList<Byte>();
      linkedList2.retainAll(linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.6205643331111412
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      Integer integer0 = new Integer(1908874353);
      Integer integer1 = new Integer((-1199));
      Integer integer2 = Integer.valueOf((-205));
      Integer integer3 = new Integer((-205));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer.toUnsignedString(880);
      Integer[] integerArray0 = new Integer[8];
      Integer integer4 = new Integer((-93046272));
      integerArray0[0] = integer4;
      integerArray0[1] = integer1;
      Integer integer5 = new Integer(2205);
      integerArray0[2] = integer5;
      Integer.divideUnsigned((byte)38, (int) integerArray0[1]);
      Integer.divideUnsigned(82, (-1588));
      integerArray0[3] = integer2;
      integerArray0[5] = integer3;
      integerArray0[6] = integer3;
      integerArray0[7] = integer1;
      Integer integer6 = new Integer((-2222));
      Integer integer7 = Integer.getInteger("6%Gc^c\u0007-{", integer6);
      Integer.getInteger("880", integer7);
      linkedList0.toArray(integerArray0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (int) integerArray0[1]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
