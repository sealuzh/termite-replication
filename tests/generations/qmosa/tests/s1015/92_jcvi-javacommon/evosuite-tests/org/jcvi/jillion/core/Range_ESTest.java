/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 08:22:30 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3264610833314743
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(1283L, 2147485927L);
      range0.equals((Object) null);
      Long long0 = new Long(2147485927L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("'Y9s<Zf*HY|WzNH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.'Y9s<Zf*HY|WzNH
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.736005665877757
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 116L, 9223372036854775807L);
      Range.of(9223372036854775807L);
      Range range1 = Range.of(116L);
      Range range2 = Range.of(2147485927L, 9223372036854775807L);
      Object object0 = new Object();
      range2.equals(object0);
      Range range3 = range0.intersection(range1);
      assertSame(range3, range1);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6401539588030483
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = (-1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-32768L), (-1L));
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      Range.of((-32768L), (-1L));
      Object object0 = new Object();
      Range.of((-744L), (-715L));
      Range range1 = Range.of((-32768L));
      range0.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(9223372036854774984L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-151L), (-744L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=4.010194221820207
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 355L);
      range1.endsBefore(range0);
      range1.complement(range0);
      boolean boolean0 = range1.intersects(range1);
      assertTrue(boolean0);
      
      Range range2 = Range.of(range_CoordinateSystem0, (-856L), (-1L));
      Range range3 = range1.intersection(range0);
      boolean boolean1 = range2.endsBefore(range3);
      range3.startsBefore(range2);
      assertTrue(range3.isEmpty());
      
      range0.endsBefore(range2);
      assertFalse(range0.isEmpty());
      
      boolean boolean2 = range1.endsBefore(range2);
      assertFalse(boolean2 == boolean1);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-1L), 127L);
      Range range4 = Range.of(range_CoordinateSystem1, 2147485927L, 2147485927L);
      assertTrue(range4.isEmpty());
      
      boolean boolean3 = range2.equals(range1);
      assertFalse(boolean3 == boolean1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.5742275435301387
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(2147485927L, 2147485927L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      Range.of((-3494L), 2147485927L);
      Object object0 = new Object();
      Long long0 = new Long((-3494L));
      Range range1 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.9514807674662373
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.ofLength(116L);
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(116L);
      Long long0 = new Long(116L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 116L, (long) long0);
      range2.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range3 = Range.of((-9223372036854775808L));
      Range range4 = Range.of((-2147483648L));
      range4.equals(range2);
      Range.of((-1922L));
      Range.of((-2147483648L), (-2147483648L));
      // Undeclared exception!
      try { 
        range3.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.928475467284143
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = 255L;
      Range.Builder range_Builder0 = new Range.Builder(255L, 9223372036854774983L);
      range_Builder0.shift(9223372036854774983L);
      Range range0 = Range.of(9223372036854774983L);
      long long1 = (-2466L);
      Range range1 = Range.of((-2466L));
      List<Range> list0 = range0.split(9223372036854774983L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>(list0);
      linkedList0.add(range1);
      // Undeclared exception!
      try { 
        range1.complementFrom(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2466 would make range [9223372036854774983 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.237103507699655
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = 4294967295L;
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(4294967295L);
      Range range0 = range_Builder1.build();
      range0.equals(range0);
      long long1 = 252L;
      range0.spliterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.987708093345822
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.expandBegin((-2500L));
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_Builder0.expandBegin(255L);
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 9223372036854775807L);
      Range range1 = Range.of(814L);
      Range range2 = Range.of(814L, 32767L);
      range1.equals(range2);
      Range range3 = range0.intersection(range0);
      range3.complement(range1);
      Range.of((-1509L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("xoAX(Fldu~jkYW{HP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.xoAX(Fldu~jkYW{HP
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.9024541236610277
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 347L, 9223372036854775807L);
      Range.of(9223372036854775807L);
      Range range1 = Range.of(347L);
      Long long0 = new Long(347L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 347L, (long) long0);
      boolean boolean0 = range2.equals(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, (-1470L), (long) long0);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.of(2147485927L, 9223372036854775807L);
      Object object0 = new Object();
      range4.equals(object0);
      assertFalse(range4.isEmpty());
      
      Range range5 = range0.intersection(range1);
      assertSame(range5, range1);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5482181022102073
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of((-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      Range range1 = Range.of((-1L), 1L);
      Range.of((-3494L), 159L);
      range0.equals(range1);
      Consumer<Object> consumer0 = null;
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.152573647162874
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(55L);
      linkedList0.removeLastOccurrence(long0);
      long long1 = (-2147483648L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.removeLastOccurrence((Object) null);
      Range.Comparators.values();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range.Comparators.values();
      Range range0 = Range.ofLength(2147483647L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.7159569086462794
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4326L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      Range range2 = Range.of(4326L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long0 = new Long(4326L);
      Long.compare((-2334L), 4326L);
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache");
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(range0.equals((Object)range2));
      
      range1.equals(range2);
      assertFalse(range2.isEmpty());
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1459983229767676
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.910370848538398
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(812L);
      range0.equals(range1);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.of((-636L), 2147485927L);
      // Undeclared exception!
      try { 
        Range.parseRange("SPACE_BASED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse SPACE_BASED into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1730503524754727
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Long long0 = new Long(1287L);
      Range range0 = Range.ofLength(251L);
      Range range1 = Range.of(251L);
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.9462503126649
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 116L, 9223372036854775807L);
      Range.of(9223372036854775807L);
      Range range0 = Range.of(116L);
      Long long0 = new Long(116L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 116L, (long) long0);
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, (-1470L), (long) long0);
      Range range3 = range0.intersection(range2);
      range0.complement(range3);
      Range.of(2147483647L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("xoAX(Fldu~jkYW{HP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.xoAX(Fldu~jkYW{HP
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.327665418939663
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      long long0 = 1771L;
      Range range0 = Range.of(1771L, 9223372036854775499L);
      range0.equals(range0);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.of(4294967312L, 65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.701607617361609
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(2147485927L, 2147485927L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      Range range1 = Range.of((-3494L), 2147485927L);
      Object object0 = new Object();
      Range range2 = Range.of((-744L), 2147485927L);
      range1.equals(range2);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(2147485927L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147485927L, (-325L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.5064066020248075
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 1771L, 1771L);
      Range.of(3388L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.576289768852745
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(3218L);
      range_Builder0.contractBegin(3218L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.build();
      range0.equals(range_Builder2);
      range0.spliterator();
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-2491L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=4.037027457157575
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of(241L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.equals((Object) null);
      range0.complement(range1);
      assertFalse(range1.isEmpty());
      
      Range.of((-2147483648L), 241L);
      String string0 = range0.toString();
      assertEquals("[ -2147483648 .. -2147483648 ]/0B", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.5551472573134517
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 4326L;
      long long1 = 9223372036854775807L;
      Range range0 = Range.of(range_CoordinateSystem0, 4326L, 9223372036854775807L);
      Range.of(9223372036854775807L);
      Range.of(4326L);
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.4530928466352613
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.of((-128L));
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      Range range1 = Range.of((-128L));
      assertSame(range1, range0);
      
      Range range2 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range2.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.981785704213213
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 355L);
      range1.endsBefore(range0);
      range1.complement(range0);
      range0.endsBefore(range1);
      Range range2 = Range.of(range_CoordinateSystem0, (-856L), (-1L));
      Range range3 = range1.intersection(range0);
      range2.endsBefore(range3);
      range3.startsBefore(range2);
      range0.endsBefore(range2);
      range1.endsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-1L), 127L);
      Range range4 = Range.of((-1L), 127L);
      range1.intersection(range4);
      // Undeclared exception!
      try { 
        Range.ofLength((-2527L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.308352013638765
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getEnd();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.getEnd();
      Range range1 = Range.of(0L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.947635103924827
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      
      Range range2 = Range.of((-2147489420L));
      Range range3 = Range.of((-809L), (-809L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range4 = range2.intersection(range0);
      assertTrue(range4.isEmpty());
      assertFalse(range0.isEmpty());
      assertFalse(range0.equals((Object)range3));
      assertSame(range0, range1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3638267132239434
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Long long0 = new Long((-32768L));
      Long.compare((-32768L), (-1708L));
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache");
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=4.01464324302824
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 355L);
      boolean boolean0 = range1.endsBefore(range0);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      boolean boolean1 = range1.intersects(range1);
      Range range2 = Range.of(range_CoordinateSystem0, (-856L), (-1L));
      Range range3 = range1.intersection(range0);
      boolean boolean2 = range2.endsBefore(range3);
      assertTrue(boolean2 == boolean1);
      
      range3.startsBefore(range2);
      range0.endsBefore(range2);
      range1.endsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-1L), 127L);
      Range range4 = Range.of(range_CoordinateSystem1, 2147485927L, 2147485927L);
      boolean boolean3 = range4.equals(range0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=4.044024526531299
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 355L);
      range1.endsBefore(range0);
      range0.endsBefore(range1);
      Range range2 = Range.of(range_CoordinateSystem0, (-856L), (-1L));
      range1.intersection(range0);
      range0.endsBefore(range2);
      range1.endsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-1L), 127L);
      Range.parseRange("Az7,7x{oWH_{3", range_CoordinateSystem1);
      Range range3 = Range.of(range_CoordinateSystem1, 2147485927L, 2147485927L);
      Range range4 = Range.of(9223372036854775807L);
      range3.equals(range4);
      // Undeclared exception!
      try { 
        Range.parseRange("invalid startOffset %d: file is only %d bytes");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse invalid startOffset %d: file is only %d bytes into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.748273287514014
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(32767L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 4813L, 2147453161L);
      Range.of(2147487038L);
      Range range1 = Range.of(32767L);
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.8157681053188885
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-981L), 2887L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-981L));
      Range range0 = Range.of((-981L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long0 = new Long((-600L));
      range0.equals(range_Builder1);
      Range range1 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -981 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.759201822268399
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = 32766L;
      Range range0 = Range.ofLength(32766L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 32767L;
      long long2 = 2147487037L;
      Range range1 = Range.of(range_CoordinateSystem0, 32767L, 2147487037L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.intersection(range1);
      // Undeclared exception!
      range1.forEach(consumer0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.4306246850176714
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(9223372036854775500L, 9223372036854775500L);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.7513234103567856
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.of(2147485927L, 2147485927L);
      Range range0 = Range.of((-3494L), 2147485927L);
      Object object0 = new Object();
      range0.equals(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(2604L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.5808224913949234
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(2147485927L, 2147485927L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      Range range1 = Range.of((-3494L), 2147485927L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean1 = range1.equals((Object) null);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.714544857464145
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals(range0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.of((-1L), 2710L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("0;t_y1)w>Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.0;t_y1)w>Q
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.5718817304922994
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L, 2147485928L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      range1.endsBefore(range0);
      boolean boolean1 = range0.endsBefore(range1);
      boolean boolean2 = range1.isEmpty();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Range range2 = range_Builder0.build();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.914036100721349
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(9223372036854775500L);
      range1.equals(range0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Range range2 = Range.of((-1L), 2710L);
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer2);
      range2.intersection(range0);
      // Undeclared exception!
      try { 
        range1.split(9223372036854775500L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -617 would make range [9223372036854775500 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.437847349224043
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1205L, 1205L);
      range_Builder0.shift(1205L);
      Range.of(55L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-855L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -855 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.626531740719157
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.expandBegin((-2500L));
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Object object0 = new Object();
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder((-9223372036854775808L), (-2500L));
      Range range0 = range_Builder3.build();
      range0.equals(range_Builder2);
      range0.spliterator();
      long long0 = (-2491L);
      Range.Builder range_Builder4 = new Range.Builder(0L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=4.037524040896228
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4326L, 9223372036854775807L);
      Range.ofLength(9223372036854775807L);
      long long0 = 4294967295L;
      Range range1 = Range.of(4294967295L);
      range0.getBegin(range_CoordinateSystem0);
      range1.endsBefore(range0);
      range0.intersection(range1);
      range1.startsBefore(range0);
      range0.complement(range1);
      Range.of(728L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.4555606405128056
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 610L, 3388L);
      linkedList0.removeLastOccurrence(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.removeLastOccurrence("");
      Range.Comparators.values();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range.Comparators.values();
      Range range1 = Range.ofLength(32767L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        range1.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.659607589411429
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775005L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(9223372036854775005L);
      Range.Builder range_Builder2 = range_Builder1.copy();
      range_Builder2.shift(9223372036854775005L);
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder1.build();
      boolean boolean0 = range0.equals("");
      //  // Unstable assertion: assertFalse(boolean0);
      
      range1.spliterator();
      Range.Builder range_Builder3 = new Range.Builder(252L);
      Range.Builder range_Builder4 = new Range.Builder();
      Range range2 = range_Builder2.build();
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      
      Long.compareUnsigned(677L, 9223372036854775005L);
      Range range3 = range_Builder0.build();
      Range range4 = range_Builder0.build();
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      //  // Unstable assertion: assertSame(range4, range3);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.9663460385335156
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1205L, 1205L);
      range_Builder0.shift(1205L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.Comparators.values();
      Range range0 = Range.ofLength(65535L);
      range0.equals(object1);
      Range range1 = Range.of(2147483647L, 9223372036854775499L);
      range1.complement(range0);
      assertFalse(range0.isEmpty());
      
      Range range2 = Range.of((-2244L));
      Range range3 = range2.intersection(range1);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.914676714736294
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775278L);
      Range.of((-855L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.761780401145981
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(2147485927L, 2147485927L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      Object object0 = new Object();
      Range.of((-744L), 2147485927L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      Range range1 = Range.of(372L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775789L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.2399964246178232
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(0L);
      Object object1 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-550L), (-550L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.5351069487323903
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(22L);
      range_Builder0.contractBegin(22L);
      Range range0 = range_Builder0.build();
      range0.equals((Object) null);
      range_Builder0.shift(22L);
      Range.of(2568L);
      Range.of(2568L);
      long long0 = 455L;
      // Undeclared exception!
      try { 
        Range.of(2147453161L, 2568L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.7292162470499486
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Long long0 = new Long((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2625L), 2147483647L);
      Range.of((-1L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.5216780283679263
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(1283L, 2147483647L);
      Long long0 = new Long(2147485927L);
      range0.equals(long0);
      Object object0 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.4709265391746555
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.expandBegin((-2500L));
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Object object0 = new Object();
      Range.Builder range_Builder2 = range_Builder1.expandBegin(255L);
      Range.of((-2500L));
      range_Builder2.build();
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.5358810746362574
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.expandBegin((-2500L));
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Object object0 = new Object();
      Range.of(32767L, 9223372036854775807L);
      Range.of((-2500L), 32767L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-1507L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1507 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.386461111682804
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      range0.equals(range_CoordinateSystem0);
      range0.spliterator();
      Range.Builder range_Builder1 = new Range.Builder(252L);
      range_Builder1.shift(9223372036854775807L);
      Long long0 = new Long(252L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775558 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=4.018093327400691
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-32768L), (-1095L));
      Range range2 = range1.intersection(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer1);
      Range range3 = Range.of(2147483647L);
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer2);
      boolean boolean0 = range3.intersects(range2);
      assertFalse(range3.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.2063321639941105
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      range0.equals(range1);
      range1.spliterator();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1519L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.8419270538788033
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(9223372036854775500L);
      boolean boolean0 = range1.equals(range0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Range range2 = Range.of((-1L), (-1L));
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = range2.intersects(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      
      Consumer<Long> consumer3 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer3);
      range2.forEach(consumer2);
      Range range3 = range2.intersection(range0);
      assertFalse(range3.isEmpty());
      assertSame(range3, range0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.7697523375927933
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 116L, 9223372036854775807L);
      Range.of(9223372036854775807L);
      Range range1 = Range.of(116L);
      Long long0 = new Long(116L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 116L, (long) long0);
      boolean boolean0 = range2.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      boolean boolean1 = range1.endsBefore(range2);
      assertTrue(boolean1 == boolean0);
      
      Range range3 = Range.of(range_CoordinateSystem2, 127L, 127L);
      assertTrue(range3.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem3, 2147486672L, 9223372036854775807L);
      boolean boolean2 = range0.equals("*$");
      assertTrue(boolean2 == boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=4.060817480068674
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L, 9223372036854774983L);
      range_Builder0.shift(9223372036854774983L);
      Range range0 = Range.of(255L);
      long long0 = (-2466L);
      Range range1 = Range.of((-2466L));
      List<Range> list0 = range0.split(9223372036854774983L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>(list0);
      linkedList0.add(range1);
      range1.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem0, 255L, (-2466L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.767390733427648
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(3761L, 9223372036854775510L);
      range1.equals(range0);
      range1.getBegin();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      range0.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("8Sa{Wzsz4>0z^m~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.8Sa{Wzsz4>0z^m~
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.807846405454954
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(11264L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 1226L;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1226L);
      range1.endsBefore(range0);
      range1.complement(range0);
      Range range2 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.728131724219856
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(2147485927L, 2147485927L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      Object object0 = new Object();
      Range.of((-744L), 2147485927L);
      range0.equals((Object) null);
      Range.of((-744L));
      // Undeclared exception!
      try { 
        Range.of((-809L), (-3494L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.1517986823729784
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(55L);
      Long.compareUnsigned(55L, 55L);
      linkedList0.removeLastOccurrence(long0);
      long long1 = (-2147483648L);
      Long long2 = new Long((-2147483648L));
      linkedList0.remove((Object) long2);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.removeLastOccurrence((Object) null);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList0.pollFirst();
      Range.Comparators.values();
      Range range0 = Range.ofLength(2147483647L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=4.020523543188022
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 355L);
      boolean boolean0 = range1.endsBefore(range0);
      List<Range> list0 = range1.complement(range0);
      boolean boolean1 = range1.intersects(range1);
      Range range2 = Range.of(range_CoordinateSystem0, (-856L), (-1L));
      Range range3 = range1.intersection(range0);
      boolean boolean2 = range2.endsBefore(range3);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = range3.startsBefore(range2);
      assertFalse(boolean3 == boolean0);
      
      range0.endsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-1L), 127L);
      Range range4 = Range.of(range_CoordinateSystem1, 2147485927L, 2147485927L);
      range4.complementFrom(list0);
      assertTrue(range4.isEmpty());
      
      Range range5 = range3.intersection(range2);
      assertTrue(range5.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.2903731321583303
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-2147483648L));
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(object2);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=4.085512496492116
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.ofLength(4003L);
      range0.isSubRangeOf(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      linkedList0.addFirst(range1);
      linkedList0.addFirst(range1);
      linkedList0.add(range1);
      range1.complementFrom(linkedList0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = range1.intersection(range0);
      range2.asRange();
      Range.ofLength(243L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("!<UM+IxB%WQ)WDD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.!<UM+IxB%WQ)WDD
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.884957925036504
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of((-32768L), 32766L);
      range1.equals(range1);
      range1.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 11278L, 11278L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.723328867988111
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1044L), (-1044L));
      Range.Builder range_Builder1 = range_Builder0.shift((-1044L));
      Range.Builder range_Builder2 = range_Builder1.expandBegin(824L);
      Range range0 = Range.of(824L);
      range_Builder2.shift((-1044L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.endsBefore(range1);
      assertTrue(boolean1);
      assertTrue(range1.isEmpty());
      
      Range range2 = Range.of(1L);
      assertFalse(range2.isEmpty());
      
      boolean boolean2 = range0.isEmpty();
      assertTrue(boolean2 == boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.7975252014540755
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1205L, 1205L);
      Range.Builder range_Builder1 = range_Builder0.shift(1205L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(1205L, 65516L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 821L, 65516L);
      Range range2 = Range.of(65516L);
      Range range3 = range1.intersection(range0);
      List<Range> list0 = range3.complement(range1);
      assertTrue(list0.isEmpty());
      
      range_Builder1.build();
      range_Builder1.build();
      Range range4 = range2.intersection(range1);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.8158780493562316
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1205L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(1205L, 65516L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1743L), 1205L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.392854699360294
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(4294967294L);
      range0.split(4294967294L);
      Range.ofLength(4294967294L);
      // Undeclared exception!
      try { 
        Range.of(4294967294L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.865397983768904
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      Range range1 = range0.asRange();
      List<Range> list0 = range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem0);
      List<Range> list1 = range0.complementFrom(list0);
      range1.complementFrom(list1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.parseRange("[ 0 .. 1 ]/SB", range_CoordinateSystem1);
      range0.isSubRangeOf(range2);
      String string0 = "0;M-b0";
      // Undeclared exception!
      try { 
        Range.parseRange("0;M-b0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 0;M-b0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.4920534387246747
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1205L);
      Range.Builder range_Builder1 = range_Builder0.shift(1205L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      
      range0.spliterator();
      Range.Builder range_Builder2 = new Range.Builder(1205L);
      Range.Builder range_Builder3 = new Range.Builder();
      Range range1 = range_Builder1.build();
      assertSame(range1, range0);
      
      Long.compareUnsigned(11264L, (-1884L));
      Range range2 = range_Builder2.build();
      assertFalse(range2.isEmpty());
      
      Range range3 = range_Builder3.build();
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.834282301998354
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      Range range1 = range0.asRange();
      List<Range> list0 = range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem0);
      Range.parseRange("[ 0 .. 1 ]/SB");
      List<Range> list1 = range0.complementFrom(list0);
      range1.complementFrom(list1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.789389130650314
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range range1 = Range.of(0L, 0L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(2568L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      
      range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range range3 = range_Builder0.build();
      Range range4 = range_Builder0.build();
      assertSame(range4, range3);
      assertNotSame(range4, range1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.377727737830942
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-865L));
      Range range0 = range_Builder1.build();
      range0.equals(range_Builder0);
      range0.spliterator();
      Range.Builder range_Builder2 = new Range.Builder(4294967295L);
      range_Builder0.contractBegin(127L);
      Long long0 = new Long(678L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=4.023327907406774
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.ofLength(1001L);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1L), long0);
      
      long long1 = range2.getLength();
      assertEquals(0L, long1);
      
      range1.split(1134L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = range2.getEnd(range_CoordinateSystem2);
      assertEquals(0L, long2);
      
      Range range3 = Range.of(2119L);
      List<Range> list0 = range3.split(65535L);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.contains(range3));
      
      range2.getEnd(range_CoordinateSystem0);
      boolean boolean0 = range2.isEmpty();
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.9489884362182854
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(3218L);
      range_Builder0.build();
      range_Builder0.contractBegin(3218L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.build();
      Range.of(3218L);
      Range.Builder range_Builder2 = new Range.Builder(1922L);
      range_Builder0.build();
      Long.compareUnsigned(1L, (-9223372036854775808L));
      Range.Builder range_Builder3 = new Range.Builder((-2491L), 0L);
      Range range0 = range_Builder3.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.663825995711399
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.contractBegin((-879L));
      Range.Builder range_Builder2 = new Range.Builder((-879L), 116L);
      range_Builder0.shift((-879L));
      Range range0 = range_Builder2.build();
      range0.spliterator();
      Range.Builder range_Builder3 = new Range.Builder(1230L);
      range_Builder1.expandBegin(1230L);
      Range.Builder range_Builder4 = range_Builder1.contractBegin(116L);
      Long long0 = new Long(116L);
      range0.equals(range_Builder4);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.487134618489304
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3018L, 4294967318L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1L), 4294967318L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.4381454225800567
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-2147483666L), 55L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.486782992255533
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(1283L, 2147485927L);
      Long long0 = new Long(2147485927L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=4.01755323631529
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(2147485927L);
      range_Builder0.expandBegin(960L);
      Range.of(960L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder(0L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder0);
      Range range1 = Range.ofLength(960L);
      Range range2 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of((-9223372036854775808L));
      range3.getBegin(range_CoordinateSystem0);
      Range range4 = range3.intersection(range2);
      assertTrue(range4.isEmpty());
      assertFalse(range2.isEmpty());
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=4.014067818353397
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1205L, 1205L);
      range_Builder0.shift(1205L);
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.ofLength(1205L);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(range_CoordinateSystem0, (-601L), 9223372036854774984L);
      Range range4 = range3.intersection(range0);
      assertTrue(range4.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = range3.endsBefore(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      
      boolean boolean1 = range3.isSubRangeOf(range0);
      assertFalse(boolean1);
      
      boolean boolean2 = range0.isEmpty();
      assertTrue(boolean2 == boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.5232099952975515
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.equals(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775510L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.564232003189625
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1205L, 1205L);
      range_Builder0.shift(1205L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(1205L, 65535L);
      Range range1 = Range.of((-2147473655L), (-2147473656L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.5832962355116034
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1044L), (-1044L));
      Range.of((-1044L), 9365L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 2797L;
      long long1 = 9369L;
      Range range0 = Range.of(range_CoordinateSystem0, 2797L, 9369L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.3799283420528075
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(22L);
      range0.startsBefore(range0);
      Range range1 = Range.of(22L);
      range0.endsBefore(range1);
      range0.asRange();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.9161403639644368
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 355L);
      range1.endsBefore(range0);
      range1.complement(range0);
      range0.endsBefore(range1);
      Range range2 = Range.of(range_CoordinateSystem0, (-856L), (-1L));
      Range range3 = range1.intersection(range0);
      range2.endsBefore(range3);
      range3.startsBefore(range2);
      range0.endsBefore(range2);
      range1.isSubRangeOf(range3);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long0 = 55L;
      Long long1 = new Long(55L);
      Object object0 = new Object();
      long long2 = 32767L;
      long long3 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.414564466298768
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.870803247287776
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(40L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(40L);
      Range.Builder range_Builder2 = range_Builder1.copy();
      range_Builder1.build();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1099L, 1099L);
      Range range2 = Range.of(104L);
      Range range3 = range0.intersection(range2);
      assertTrue(range3.isEmpty());
      
      List<Range> list0 = range1.complement(range2);
      range_Builder1.build();
      Range range4 = range_Builder2.build();
      long long0 = range4.getLength();
      assertEquals(0L, long0);
      
      range_Builder2.build();
      range4.complementFrom(list0);
      List<Range> list1 = range2.complementFrom(list0);
      assertFalse(range2.isEmpty());
      assertTrue(list1.contains(range1));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.5382724337380704
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 979L, 4294967295L);
      Range range1 = Range.of(4294967295L);
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 32767L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.601398796455524
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 960L, 4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Long long0 = new Long((-2147483672L));
      Object object0 = new Object();
      range0.intersects(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range.of(range_CoordinateSystem0, (-2147483672L), (-2147483672L));
      // Undeclared exception!
      try { 
        Range.of((-924L), (-2006L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.8839408760346803
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      linkedList1.addFirst(range0);
      linkedList1.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList1);
      assertEquals(0, list0.size());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.expandEnd(2147485927L);
      Range range1 = Range.of(2147485927L);
      Range.of(2147485927L);
      Range range2 = range1.intersection(range0);
      assertSame(range0, range2);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=4.039923379780818
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Long long0 = new Long((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-325L), 2147483647L);
      range1.intersection(range0);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("invalid startOffset %d: file is only %d bytes");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.invalid startOffset %d: file is only %d bytes
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.515261591594097
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractEnd((-2878L));
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.split((-2878L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.445049519655863
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.ofLength(7L);
      List<Range> list0 = range0.split(7L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.8037402838035774
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(3218L);
      range_Builder0.contractBegin(3218L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder();
      Range range1 = range_Builder2.build();
      range1.startsBefore(range0);
      range0.spliterator();
      Range.Builder range_Builder3 = new Range.Builder(1922L);
      Range range2 = range_Builder0.build();
      Long.compareUnsigned(1L, (-9223372036854775808L));
      Range.Builder range_Builder4 = new Range.Builder((-2491L), 0L);
      Range range3 = range_Builder4.build();
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.594487771814081
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2905L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2905L, 3753L);
      range_CoordinateSystem0.toString();
      Range range0 = Range.of(3753L);
      String string0 = "+'dct]3^#1'T7M";
      long long1 = 2743L;
      Range range1 = Range.of(2743L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("+'dct]3^#1'T7M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.+'dct]3^#1'T7M
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-7346L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 0L, (-7346L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.2441276219266
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 255L, 2147485927L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2147485927L, (-1911L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.392989925864689
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.of(2147485927L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 1L, 4294967318L);
      Long long0 = new Long(9223372036854775004L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967318L, 10800L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.2111232223551296
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(40L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(40L);
      range_Builder1.build();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder1);
      assertFalse(boolean0);
      
      range0.spliterator();
      Range.Builder range_Builder2 = new Range.Builder(252L);
      range_Builder0.build();
      Long.compareUnsigned(40L, 1L);
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.277514926855928
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(9223372036854775500L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775500L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.830288101198855
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(9223372036854772736L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      boolean boolean0 = range0.isSubRangeOf(range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.49458185200482
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1205L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Object object0 = new Object();
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder0.build();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      range1.spliterator();
      Range.Builder range_Builder2 = new Range.Builder(991L);
      range_Builder1.build();
      Long.compareUnsigned(65535L, 1L);
      Range range2 = range_Builder1.build();
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.6291517911508087
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(40L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(40L);
      range_Builder1.copy();
      range_Builder1.expandBegin(40L);
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      range1.spliterator();
      Range.Builder range_Builder2 = new Range.Builder(252L);
      range_Builder0.build();
      Long.compareUnsigned(40L, 3L);
      Range range2 = range_Builder0.build();
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.7937863110466643
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.expandBegin((-2500L));
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_Builder0.expandBegin(255L);
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 9223372036854775807L);
      Range.of(814L);
      Range range1 = range0.intersection(range0);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.7970157870846717
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 630L, 4294967318L);
      Long long0 = new Long(9223372036854775004L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(9223372036854775004L);
      Range range1 = Range.of(range_CoordinateSystem0, 630L, 630L);
      Range range2 = range0.intersection(range1);
      range2.complement(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("VW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.VW
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.4616515267389834
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Long long0 = new Long((-32768L));
      Range range1 = range0.asRange();
      Range range2 = range1.intersection(range0);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=4.014114959914281
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-1L));
      long long0 = 9223372036854775500L;
      Range range1 = Range.of(9223372036854775500L, 9223372036854775500L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      Range.of((-1L), 9223372036854775500L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("0;t_y1)w>Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.0;t_y1)w>Q
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.9992173674054086
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.expandBegin((-2500L));
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 9223372036854775807L;
      Range.Builder range_Builder2 = range_Builder0.expandBegin(255L);
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 9223372036854775807L);
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), 32767L);
      Range range2 = Range.of((-32768L));
      range1.intersection(range2);
      range_Builder2.expandEnd(255L);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.872581910292653
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-2500L));
      Range.Builder range_Builder2 = new Range.Builder(0L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_Builder0.expandBegin((-746L));
      Range range0 = Range.of(range_CoordinateSystem0, (-746L), (-1L));
      Range range1 = Range.of((-1L));
      range1.intersection(range0);
      range0.complement(range1);
      range_Builder2.build();
      range_Builder2.build();
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.3335223813539465
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of((-128L));
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(9223372036854770995L);
      Long.compareUnsigned((-128L), 9223372036854770995L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.9582897068559406
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.ofLength(2147485927L);
      Range range1 = range0.asRange();
      List<Range> list0 = range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range2 = Range.of(2147485927L);
      range2.complementFrom(list0);
      range2.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.parseRange("[ 0 .. 2147485927 ]/SB", range_CoordinateSystem1);
      long long0 = 9223372036854772722L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854772722L, 2147485927L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.998636416591065
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4326L, 9223372036854775807L);
      Range.of(9223372036854775807L);
      Range range1 = Range.of(4294967302L);
      range0.getBegin(range_CoordinateSystem0);
      range1.endsBefore(range0);
      range0.intersection(range1);
      range1.startsBefore(range0);
      range0.complement(range1);
      range1.endsBefore(range0);
      Range.ofLength(4326L);
      // Undeclared exception!
      try { 
        Range.parseRange("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse f into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.5077024370249523
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range range1 = Range.of(2147485927L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 127L, 2147485927L);
      boolean boolean1 = range0.endsBefore(range2);
      assertFalse(boolean1);
      
      boolean boolean2 = range1.endsBefore(range0);
      assertFalse(boolean2 == boolean0);
      
      Range range3 = Range.of(2147485927L);
      assertSame(range3, range0);
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.561032150061772
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range range1 = Range.of(2147485927L, 2147485927L);
      range1.isSubRangeOf(range0);
      range0.endsBefore(range1);
      range1.endsBefore(range0);
      boolean boolean0 = range1.isEmpty();
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("0B", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.524119089027349
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-856L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-1L), 127L);
      range0.getBegin();
      Range.of((-1L), 127L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2527L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(55L);
      linkedList0.removeLastOccurrence(long0);
      Long long1 = new Long(2147483647L);
      linkedList0.remove((Object) long0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Long long2 = new Long(1135L);
      linkedList1.remove((Object) long2);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range range0 = Range.of((-5336L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long3 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-5336L), long3);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.811673529006928
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 3388L);
      Range range1 = Range.ofLength(2147485927L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.ofLength(3388L);
      long long0 = range2.getLength();
      assertEquals(3388L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder(range2);
      long long1 = range0.getLength();
      assertEquals(2147487037L, long1);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.3533424457953815
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(55L);
      linkedList0.removeLastOccurrence(long0);
      Long long1 = new Long((-2147483648L));
      linkedList0.remove((Object) long1);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Long long2 = new Long((-2147483648L));
      linkedList0.remove((Object) "The second parameter in the comparison is null.");
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range.of(65535L);
      Range.of((-2823L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.3203691289568624
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(55L);
      linkedList0.removeLastOccurrence(long0);
      Long long1 = new Long((-2147483648L));
      linkedList0.remove((Object) long1);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.removeLastOccurrence((Object) null);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range.Comparators.values();
      long long2 = (-325L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 55L, 55L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.5402249077874375
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.6507728240230084
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = new Object();
      Range.of((-2147483648L));
      Object object1 = new Object();
      Object object2 = new Object();
      Long.compareUnsigned(2147483647L, 2836L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 4294967295L);
      Range range0 = Range.of(2836L, 2836L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.5589405857959937
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(40L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(40L);
      Range.Builder range_Builder2 = range_Builder0.shift(591L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder1);
      assertFalse(boolean0);
      
      range_Builder0.expandBegin(22L);
      range0.intersection(range0);
      range0.complement(range0);
      assertTrue(range0.isEmpty());
      
      range_Builder2.build();
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.5531820090846615
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), (-1L));
      Range.Builder range_Builder1 = range_Builder0.shift((-1L));
      Range.Builder range_Builder2 = range_Builder1.expandBegin((-1L));
      Range.of(824L);
      range_Builder0.shift((-1L));
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      // Undeclared exception!
      try { 
        Range.of(691L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = (-1L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandEnd((-2147483647L));
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd((-1928L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.643388568155041
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(55L);
      Long long1 = new Long((-2147483648L));
      linkedList0.remove((Object) long1);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Long long2 = new Long((-2147483648L));
      linkedList0.remove((Object) "The second parameter in the comparison is null.");
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range range0 = Range.of(65535L);
      Range range1 = Range.of((-2147483648L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=4.022862075897372
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 355L);
      range1.endsBefore(range0);
      range1.complement(range0);
      range0.endsBefore(range1);
      Range range2 = Range.of(range_CoordinateSystem0, (-856L), (-1L));
      Range range3 = range1.intersection(range0);
      boolean boolean0 = range2.endsBefore(range3);
      range3.startsBefore(range2);
      boolean boolean1 = range0.endsBefore(range2);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, (-1L), 127L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range4.getBegin(range_CoordinateSystem2);
      Range range5 = Range.of(range_CoordinateSystem1, 2147485927L, 2147485927L);
      boolean boolean2 = range5.equals(range0);
      //  // Unstable assertion: assertTrue(range5.equals((Object)range3));
      //  // Unstable assertion: assertNotSame(range5, range3);
      //  // Unstable assertion: assertTrue(boolean2);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.464150190099969
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.of((-128L));
      Range range0 = Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      range_Builder0.build();
      Range range1 = range_Builder1.build();
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.520973294312773
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(32L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(32L);
      range_Builder1.copy();
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder0.build();
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      range1.spliterator();
      Range.Builder range_Builder2 = new Range.Builder(252L);
      range_Builder0.build();
      Long.compareUnsigned(32L, 1L);
      Range range2 = range_Builder0.build();
      assertSame(range2, range0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.7617016130210432
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-2500L));
      Range.Builder range_Builder2 = new Range.Builder(0L);
      Object object0 = new Object();
      range_Builder1.expandBegin((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 138L, 255L);
      Range range1 = Range.of(336L);
      Range range2 = range1.intersection(range0);
      range2.complement(range0);
      range_Builder2.build();
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.925528824299752
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Long long0 = new Long((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(2147483647L);
      Consumer<Long> consumer3 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer3);
      Range range1 = Range.of((-744L), (-55L));
      Consumer<Object> consumer4 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer4);
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.8348000929705637
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(2147485927L);
      range_Builder1.expandEnd(2147485927L);
      Range.Builder range_Builder2 = range_Builder0.expandBegin(960L);
      Range range1 = Range.of(960L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      range_Builder2.shift(2147485927L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder(0L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder0);
      Range range2 = Range.ofLength(255L);
      Range range3 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(9353L);
      long long0 = range4.getBegin(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(9353L, long0);
      
      Range range5 = range4.intersection(range3);
      //  // Unstable assertion: assertTrue(range5.isEmpty());
      //  // Unstable assertion: assertNotSame(range3, range2);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = 9223372036854775005L;
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775005L);
      range_Builder0.contractEnd(9223372036854775005L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(9223372036854775005L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.5623084329114674
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(22L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(22L);
      Range.of(0L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      assertNotSame(range_Builder2, range_Builder1);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.1817377124206847
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(55L);
      linkedList0.removeLastOccurrence(long0);
      Long long1 = new Long((-2147483648L));
      linkedList0.remove((Object) long1);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Long long2 = new Long((-2147483648L));
      linkedList0.remove((Object) "The second parameter in the comparison is null.");
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range range0 = Range.of(65535L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long3 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(65535L, long3);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=4.068838163604247
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.ofLength(1001L);
      List<Range> list0 = range1.split(1001L);
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      range1.getLength();
      Range range2 = Range.of(1126L);
      List<Range> list1 = range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, (-4258L), 1L);
      Range.ofLength(1001L);
      Range range4 = Range.ofLength(1211L);
      List<Range> list2 = range4.complementFrom(list1);
      Range range5 = Range.of(1001L, 1001L);
      Range range6 = range5.intersection(range3);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      //  // Unstable assertion: assertTrue(range6.isEmpty());
      
      range5.asRange();
      String string0 = range2.toString();
      //  // Unstable assertion: assertEquals("[ 1126 .. 1126 ]/0B", string0);
      
      range2.complementFrom(list2);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      //  // Unstable assertion: assertTrue(list2.contains(range0));
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.1865551172380897
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.removeLastOccurrence(range0);
      Long long0 = new Long((-2147483648L));
      linkedList0.remove((Object) "Zero Based");
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Long long1 = new Long(9223372036854775807L);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.remove((Object) long0);
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      Range range1 = Range.of((-1L));
      range1.getEnd();
      Range range2 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = range2.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals((-2L), long2);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.62708935604761
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of((-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      Range range1 = Range.of((-1L), 1L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Long long0 = new Long((-1L));
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      linkedList3.remove((Object) linkedList2);
      LinkedList<Range> linkedList4 = new LinkedList<Range>();
      Range range2 = Range.of(1L);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals((-1L), long1);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.180624539878941
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long0 = new Long(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.remove((Object) null);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Long long1 = new Long((-2147483648L));
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.remove((Object) long1);
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      Range range0 = Range.of(65535L);
      long long2 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(65536L, long2);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.2671143019073323
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(3761L, 9223372036854775510L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.3976800595209387
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of((-2147473655L), (-2147473641L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.415813153555773
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 355L);
      Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-1L), 127L);
      Range range0 = Range.of(range_CoordinateSystem1, 2147485927L, 2147485927L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.2009388382289825
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-701L), (-701L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.3203691289568624
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.of(248L, 248L);
      Object object0 = new Object();
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.2915860976209297
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(55L);
      linkedList0.removeLastOccurrence(long0);
      Long long1 = new Long((-2147483648L));
      Long.toUnsignedString((-2144L));
      linkedList0.remove((Object) long1);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Long long2 = new Long((-2147483648L));
      linkedList0.remove((Object) "The second parameter in the comparison is null.");
      Range range0 = Range.of(65535L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      assertFalse(range1.equals((Object)range0));
  }
}
