/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 07:33:20 GMT 2019
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.Instant;
import java.time.ZoneOffset;
import java.time.temporal.Temporal;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.jcvi.jillion.assembly.consed.phd.ArtificialPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhd;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.assembly.consed.phd.PhdBuilder;
import org.jcvi.jillion.assembly.consed.phd.PhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.PhdWholeReadItem;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.internal.trace.chromat.BasicChromatogram;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannel;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannelGroup;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhdBuilder_ESTest extends PhdBuilder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("L", nucleotideSequence0, qualitySequence0);
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(positionSequence0).getLength();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap1.clone();
      hashMap1.putIfAbsent("L", "");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap3.put("", "L");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap1.put("", "");
      hashMap1.put("L", "can not parse ");
      hashMap6.put((String) null, "");
      hashMap6.put((String) null, "");
      hashMap6.put("U;28~g", (String) null);
      hashMap6.entrySet();
      hashMap6.replace((String) null, (String) null);
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      hashMap1.put("U;28~g", (String) null);
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      hashMap14.replace("_ }u", "", (String) null);
      hashMap14.put("U;28~g", "");
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      phdBuilder0.peaks(positionSequence0);
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      assertTrue(hashMap16.equals((Object)hashMap15));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "L";
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("L", nucleotideSequence0, qualitySequence0);
      long long0 = (-12L);
      System.setCurrentTimeMillis(360L);
      phdBuilder0.peaks((PositionSequence) null);
      Instant instant0 = MockInstant.now();
      ZoneOffset zoneOffset0 = null;
      Clock clock0 = mock(Clock.class, new ViolatedAssumptionAnswer());
      doReturn((Instant) null).when(clock0).instant();
      MockInstant.now(clock0);
      // Undeclared exception!
      try { 
        MockInstant.atOffset(instant0, (ZoneOffset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // zone
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("L", nucleotideSequence0, qualitySequence0);
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(positionSequence0).getLength();
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.JAPANESE;
      Locale locale2 = locale0.stripExtensions();
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      locale2.getDisplayLanguage();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale1);
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale locale3 = Locale.JAPANESE;
      locale2.getDisplayCountry();
      Locale.setDefault(locale_Category1, locale2);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale locale4 = Locale.SIMPLIFIED_CHINESE;
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale locale5 = Locale.KOREAN;
      linkedList1.add(locale2);
      linkedList3.add(locale5);
      linkedList3.stream();
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      locale5.getUnicodeLocaleAttributes();
      Locale locale6 = Locale.CANADA;
      Locale locale7 = Locale.CANADA;
      Locale locale8 = Locale.ITALY;
      locale7.getDisplayLanguage(locale8);
      locale4.getDisplayScript(locale7);
      Locale locale9 = Locale.TRADITIONAL_CHINESE;
      Locale.getISOLanguages();
      linkedList2.containsAll(set0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) set0, locale_FilteringMode1);
      PhdBuilder phdBuilder1 = phdBuilder0.peaks(positionSequence0);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("L", nucleotideSequence0, qualitySequence0);
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(positionSequence0).getLength();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap1.clone();
      hashMap1.putIfAbsent("L", "");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap3.put("", "L");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap1.put("", "");
      Function<String, String> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<String, String> function2 = function0.compose((Function<? super String, ? extends String>) function1);
      Function<String, String> function3 = function2.andThen((Function<? super String, ? extends String>) function0);
      hashMap6.computeIfAbsent("YtZHKSfF.al", function3);
      hashMap1.put("L", "can not parse ");
      hashMap6.put((String) null, "");
      hashMap6.put((String) null, "");
      hashMap6.put("U;28~g", "G%rR.%K KxeSg");
      hashMap6.entrySet();
      hashMap6.replace((String) null, (String) null);
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      hashMap1.put("U;28~g", (String) null);
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      hashMap14.put("U;28~g", "");
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      PhdBuilder phdBuilder1 = phdBuilder0.peaks(positionSequence0);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      Locale locale0 = Locale.forLanguageTag("gj");
      Locale locale1 = Locale.UK;
      Locale locale2 = Locale.GERMAN;
      locale1.getUnicodeLocaleKeys();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale1);
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale locale3 = Locale.JAPANESE;
      locale2.getDisplayCountry();
      Locale.setDefault(locale_Category1, locale2);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.lookup(linkedList3, linkedList1);
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      linkedList4.retainAll(linkedList0);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList6, (Collection<Locale>) linkedList4, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList6, (Collection<Locale>) list0, locale_FilteringMode0);
      Set<String> set0 = locale2.getUnicodeLocaleAttributes();
      locale1.getDisplayScript(locale0);
      locale2.stripExtensions();
      Locale.getISOCountries();
      LinkedList<DefaultPhd> linkedList7 = new LinkedList<DefaultPhd>();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      linkedList6.containsAll(linkedList1);
      LinkedList<String> linkedList9 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList6, (Collection<String>) set0, locale_FilteringMode2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)114;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)105;
      shortArray0[1] = (short) (byte)114;
      shortArray0[2] = (short)2007;
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel0, defaultChannel0, defaultChannel0, defaultChannel0);
      BasicChromatogram basicChromatogram0 = new BasicChromatogram("47%A%11mzrVM`", nucleotideSequence0, qualitySequence0, positionSequence0, defaultChannelGroup0, hashMap0);
      PhdBuilder phdBuilder0 = new PhdBuilder(basicChromatogram0);
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks();
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      DefaultPhd defaultPhd0 = new DefaultPhd("", nucleotideSequence0, qualitySequence0, (PositionSequence) null);
      List<PhdWholeReadItem> list0 = defaultPhd0.getWholeReadItems();
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence1).getLength();
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      defaultPhd0.getReadTags();
      ArtificialPhd artificialPhd0 = ArtificialPhd.createNewbler454Phd("P9J$jkY..s+iv|L@", nucleotideSequence1, qualitySequence1, (Map<String, String>) null);
      defaultPhd0.toString();
      List<PhdReadTag> list1 = artificialPhd0.getReadTags();
      DefaultPhd defaultPhd1 = new DefaultPhd("P9J$jkY..s+iv|L@", nucleotideSequence0, qualitySequence0, (PositionSequence) null, (Map<String, String>) null, list0, list1);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(defaultPhd1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.putIfAbsent("", "O(&GpE");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap0.put("#V2;C\"0", "EoE*&l;|!)k_");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap0.entrySet();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap2.put("", "bY!R_.;[<5xb9oi");
      hashMap2.put("#V2;C\"0", "yfU$G9^,");
      hashMap1.put("oogNVP,w|b08?|H6", "W:(^OGYz}J1V2]CrXp");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      hashMap2.put("W:(^OGYz}J1V2]CrXp", "[BK\"JH/ K\"");
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      DefaultPhd defaultPhd0 = new DefaultPhd("", (NucleotideSequence) null, qualitySequence0, (PositionSequence) null, hashMap4);
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      PhdBuilder phdBuilder1 = phdBuilder0.peaks((PositionSequence) null);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("phd to copy can not be null", nucleotideSequence0, qualitySequence0);
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence1).getLength();
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      LinkedList<PhdReadTag> linkedList0 = new LinkedList<PhdReadTag>();
      ArtificialPhd artificialPhd0 = new ArtificialPhd("phd to copy can not be null", nucleotideSequence1, qualitySequence1, (Map<String, String>) null, (List<PhdWholeReadItem>) null, linkedList0, 2645, 1273);
      artificialPhd0.getComments();
      linkedList0.add((PhdReadTag) null);
      // Undeclared exception!
      try { 
        phdBuilder0.comments((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("L", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap1.clone();
      hashMap1.putIfAbsent("L", "");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap1.put("", "L");
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      hashMap1.put("", "");
      hashMap5.put((String) null, "");
      hashMap5.put((String) null, "");
      hashMap5.put("U;28~g", "G%rR.%K KxeSg");
      hashMap5.entrySet();
      hashMap5.replace((String) null, (String) null);
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      hashMap1.put("U;28~g", (String) null);
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      hashMap13.put("U;28~g", "");
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        phdBuilder0.wholeReadItems((List<PhdWholeReadItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("L", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap1.clone();
      hashMap1.putIfAbsent("L", "");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap3.put("", "L");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap1.put("", "");
      hashMap1.put("L", "can not parse ");
      hashMap6.put((String) null, "");
      hashMap6.put((String) null, "");
      hashMap6.put("U;28~g", (String) null);
      hashMap6.entrySet();
      hashMap6.replace((String) null, (String) null);
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      hashMap1.put("U;28~g", (String) null);
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      hashMap13.put("U;28~g", "");
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      phdBuilder0.comments(hashMap1);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap3.putIfAbsent("", (String) null);
      hashMap3.put("qz,z`{FR#", "[p`fc_QfQJ%)s@moS8W");
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      hashMap0.put("Qe`Eqc", "N_R5WPd354GnM,jR");
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      hashMap4.put("Qe`Eqc", (String) null);
      hashMap2.put((String) null, "qz,z`{FR#");
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((String) null, (NucleotideSequence) null, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("L", nucleotideSequence0, qualitySequence0);
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.UK;
      Locale locale2 = Locale.GERMAN;
      locale1.getUnicodeLocaleKeys();
      locale2.getDisplayLanguage();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale1);
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale locale3 = Locale.JAPANESE;
      locale2.getDisplayCountry();
      Locale.setDefault(locale_Category1, locale2);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList2.parallelStream();
      Locale.lookup(linkedList2, linkedList0);
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      linkedList0.add(locale1);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList5, (Collection<Locale>) linkedList3, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList5, (Collection<Locale>) list0, locale_FilteringMode0);
      Set<String> set0 = locale2.getUnicodeLocaleAttributes();
      locale1.getDisplayScript(locale0);
      locale2.stripExtensions();
      Locale.getISOLanguages();
      LinkedList<DefaultPhd> linkedList6 = new LinkedList<DefaultPhd>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      linkedList5.containsAll(linkedList0);
      LinkedList<String> linkedList8 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList5, (Collection<String>) set0, locale_FilteringMode2);
      LinkedList<PhdWholeReadItem> linkedList9 = new LinkedList<PhdWholeReadItem>();
      PhdBuilder phdBuilder1 = phdBuilder0.wholeReadItems(linkedList9);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "ylL";
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("ylL", nucleotideSequence0, qualitySequence0);
      phdBuilder0.fakePeaks();
      phdBuilder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-27L), (-27L));
      Date date0 = null;
      String string1 = "D}xTCNp)U@JZ|OS";
      range0.getBegin(range_CoordinateSystem0);
      String string2 = "";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "ylL";
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("ylL", nucleotideSequence0, qualitySequence0);
      phdBuilder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-27L);
      Range range0 = Range.of(range_CoordinateSystem0, (-27L), (-27L));
      Date date0 = null;
      String string1 = "D}xTCNp)U@JZ|OS";
      range0.getBegin(range_CoordinateSystem0);
      String string2 = "";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("/{}]iFMm", "");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.putAll(hashMap1);
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("/{}]iFMm", "");
      hashMap2.put((String) null, (String) null);
      hashMap2.put((String) null, "Uins");
      hashMap0.put((String) null, "r?.I]0");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap3.entrySet();
      hashMap1.replace((String) null, "/{}]iFMm");
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      hashMap7.put("", "^AsS");
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      hashMap5.put("r?.I]0", "Uins");
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = ArtificialPhd.createNewbler454Phd((String) null, nucleotideSequence0, qualitySequence0, (Map<String, String>) hashMap5);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("", nucleotideSequence0, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualities can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("L", nucleotideSequence0, qualitySequence0);
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      Locale locale0 = Locale.forLanguageTag("gj");
      Locale locale1 = Locale.UK;
      Locale locale2 = Locale.GERMAN;
      locale1.getUnicodeLocaleKeys();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale1);
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale locale3 = Locale.JAPANESE;
      locale2.getDisplayCountry();
      Locale.setDefault(locale_Category1, locale2);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.lookup(linkedList3, linkedList1);
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      linkedList4.retainAll(linkedList0);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList6, (Collection<Locale>) linkedList4, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList6, (Collection<Locale>) list0, locale_FilteringMode0);
      Set<String> set0 = locale2.getUnicodeLocaleAttributes();
      locale1.getDisplayScript(locale0);
      locale2.stripExtensions();
      Locale.getISOCountries();
      LinkedList<DefaultPhd> linkedList7 = new LinkedList<DefaultPhd>();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      linkedList6.containsAll(linkedList1);
      LinkedList<String> linkedList9 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList6, (Collection<String>) set0, locale_FilteringMode2);
      PhdBuilder phdBuilder1 = phdBuilder0.copy();
      assertNotSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.JAPANESE;
      Locale locale2 = locale0.stripExtensions();
      locale1.getUnicodeLocaleKeys();
      locale2.getDisplayLanguage();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale1);
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale locale3 = Locale.JAPANESE;
      locale2.getDisplayCountry();
      Locale.setDefault(locale_Category1, locale2);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList2.parallelStream();
      Locale.lookup(linkedList2, linkedList0);
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale locale4 = Locale.KOREAN;
      linkedList3.add(locale4);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      linkedList0.add(locale1);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList4, (Collection<Locale>) linkedList3, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList4, (Collection<Locale>) list0, locale_FilteringMode0);
      Set<String> set0 = locale2.getUnicodeLocaleAttributes();
      locale1.getDisplayScript(locale0);
      Locale locale5 = Locale.TRADITIONAL_CHINESE;
      Locale.getISOLanguages();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList4.containsAll(linkedList0);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList4, (Collection<String>) set0, locale_FilteringMode2);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("", (NucleotideSequence) null, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sequence can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Phd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // phd to copy can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("L", nucleotideSequence0, qualitySequence0);
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap hashMap3 = new HashMap<Object, String>();
      hashMap1.put("L", "flGt#>#+L~&;y");
      hashMap1.putIfAbsent("L", "");
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      hashMap4.put("", "L");
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      hashMap7.put((String) null, "");
      hashMap7.put((String) null, "UGis1g-Z&a97[][r]");
      hashMap7.put("U;28~g", "G%rR.%K KxeSg");
      hashMap7.entrySet();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      hashMap9.put("Fp}Z^", "'qrCUuP+m,F,+|B*}!");
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      hashMap9.put("", "initial capacity must be >=1");
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        phdBuilder0.readTags((List<PhdReadTag>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("L", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      Locale.forLanguageTag("gj");
      Locale locale0 = Locale.forLanguageTag("L");
      Locale locale1 = Locale.US;
      locale1.getDisplayVariant();
      locale0.getUnicodeLocaleKeys();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale locale2 = Locale.JAPANESE;
      Locale.setDefault(locale_Category1, locale1);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      linkedList3.retainAll(linkedList0);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList5, (Collection<Locale>) linkedList3, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList5, (Collection<Locale>) list0, locale_FilteringMode0);
      locale1.getUnicodeLocaleAttributes();
      Locale.getISOCountries();
      LinkedList<DefaultPhd> linkedList6 = new LinkedList<DefaultPhd>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Temporal> linkedList8 = new LinkedList<Temporal>();
      linkedList7.containsAll(linkedList8);
      LinkedList<String> linkedList9 = new LinkedList<String>();
      LinkedList<PhdReadTag> linkedList10 = new LinkedList<PhdReadTag>();
      PhdBuilder phdBuilder1 = phdBuilder0.readTags(linkedList10);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("L", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap1.clone();
      hashMap1.putIfAbsent("L", "");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap3.put("", "L");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap6.put((String) null, "UGis1g-Z&a97[][r]");
      hashMap6.put("U;28~g", "G%rR.%K KxeSg");
      hashMap6.entrySet();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      hashMap8.put("Fp}Z^", "'qrCUuP+m,F,+|B*}!");
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      hashMap8.put((String) null, (String) null);
      hashMap8.put("", "initial capacity must be >=1");
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks(1, 1);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "ylL";
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("ylL", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks((-2302), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("L", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap1.clone();
      hashMap1.putIfAbsent("L", "L");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap3.put("", "L");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap6.put((String) null, "");
      hashMap6.put((String) null, "UGis1g-Z&a97[][r]");
      hashMap6.put("U;28~g", "G%rR.%K KxeSg");
      hashMap6.entrySet();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      hashMap2.put((String) null, "could not find index ");
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      System.setCurrentTimeMillis((-1928L));
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(1123, (-653));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // peak spacing must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Chromatogram chromatogram0 = null;
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "ylL";
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("ylL", nucleotideSequence0, qualitySequence0);
      phdBuilder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-27L), (-27L));
      Date date0 = null;
      String string1 = "D}xTCNp)U@JZ|OS";
      range0.getBegin(range_CoordinateSystem0);
      String string2 = "";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
