/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 07:58:30 GMT 2019
 */

package freemind.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import freemind.controller.Controller;
import freemind.main.FreeMindMain;
import freemind.modes.schememode.SchemeMode;
import freemind.preferences.FreemindPropertyListener;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentEvent;
import java.io.OutputStream;
import java.util.Collection;
import java.util.Properties;
import javax.help.FavoritesView;
import javax.swing.Action;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.Icon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JSlider;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.apps.svgbrowser.Main;
import org.apache.xalan.transformer.TransformerIdentityImpl;
import org.apache.xml.serializer.ToHTMLSAXHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import plugins.collaboration.database.DatabaseConnectionHook;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Controller_ESTest extends Controller_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Controller.addPropertyChangeListener((FreemindPropertyListener) null);
      Properties properties0 = null;
      TransformerIdentityImpl transformerIdentityImpl0 = new TransformerIdentityImpl(true);
      Properties properties1 = transformerIdentityImpl0.getOutputProperties();
      ToHTMLSAXHandler toHTMLSAXHandler0 = new ToHTMLSAXHandler(transformerIdentityImpl0, transformerIdentityImpl0, "f>#%fw46MvIU$,8mdT");
      toHTMLSAXHandler0.getOutputStream();
      // Undeclared exception!
      try { 
        properties1.storeToXML((OutputStream) null, "org/apache/xml/serializer", "f>#%fw46MvIU$,8mdT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode((Object) null);
      FavoritesView.DefaultFavoritesFactory favoritesView_DefaultFavoritesFactory0 = new FavoritesView.DefaultFavoritesFactory();
      favoritesView_DefaultFavoritesFactory0.parsingEnded(defaultMutableTreeNode0);
      // Undeclared exception!
      try { 
        Controller.addPropertyChangeListenerAndPropagate((FreemindPropertyListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Controller controller0 = null;
      try {
        controller0 = new Controller((FreeMindMain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      SchemeMode schemeMode0 = new SchemeMode();
      schemeMode0.getController();
      Controller.CloseAction controller_CloseAction0 = null;
      try {
        controller_CloseAction0 = new Controller.CloseAction((Controller) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$CloseAction", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultLeafIcon();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("S", icon0);
      JMenu jMenu0 = new JMenu((Action) null);
      JMenuItem jMenuItem0 = jMenu0.add((JMenuItem) jCheckBoxMenuItem0);
      JMenuItem jMenuItem1 = new JMenuItem((Action) null);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[5];
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      menuElementArray0[1] = (MenuElement) jMenu0;
      menuElementArray0[2] = (MenuElement) jMenuItem0;
      menuElementArray0[3] = (MenuElement) jMenuItem0;
      menuElementArray0[4] = (MenuElement) jCheckBoxMenuItem0;
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jMenuItem1, 507, 507, 1344, 1159, 10137, (-292), (-332), 61, false, menuElementArray0, menuSelectionManager0);
      Controller.DisposeOnClose controller_DisposeOnClose0 = new Controller.DisposeOnClose();
      // Undeclared exception!
      try { 
        controller_DisposeOnClose0.componentHidden(menuDragMouseEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JMenuItem cannot be cast to java.awt.Window
         //
         verifyException("freemind.controller.Controller$DisposeOnClose", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Controller.DisposeOnClose controller_DisposeOnClose0 = new Controller.DisposeOnClose();
      // Undeclared exception!
      try { 
        controller_DisposeOnClose0.componentHidden((ComponentEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$DisposeOnClose", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Controller.Closer controller_Closer0 = new Controller.Closer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "attributes_show_selected";
      stringArray0[1] = "attributes_show_selected";
      stringArray0[2] = "attributes_show_selected";
      stringArray0[3] = "attributes_show_selected";
      stringArray0[4] = "attributes_show_selected";
      stringArray0[5] = "attributes_show_selected";
      stringArray0[6] = "L%Y:x-7";
      stringArray0[7] = "attributes_show_selected";
      stringArray0[8] = "attributes_show_selected";
      Main main0 = null;
      try {
        main0 = new Main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Collection collection0 = Controller.getPropertyChangeListeners();
      assertNotNull(collection0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Controller.getCommonJColorChooser();
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      ActionEvent actionEvent0 = new ActionEvent(databaseConnectionHook0, (-2812), (String) null, 0L, (-2812));
      assertEquals((-2812), actionEvent0.getModifiers());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DefaultBoundedRangeModel defaultBoundedRangeModel0 = new DefaultBoundedRangeModel();
      defaultBoundedRangeModel0.setExtent(294);
      JSlider jSlider0 = new JSlider(defaultBoundedRangeModel0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer2 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer2.getBackgroundNonSelectionColor();
      DefaultTreeCellRenderer defaultTreeCellRenderer3 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer2.setAlignmentY(3009.3281F);
      try { 
        Controller.showCommonJColorChooserDialog(defaultTreeCellRenderer1, "v[%olT^;%aBG?Eg<x", color0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
