/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 09:00:58 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.actions.MoveNodeAction;
import freemind.view.mindmapview.MultipleImage;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseMotionListener;
import java.awt.image.ImageObserver;
import java.io.File;
import java.io.FileDescriptor;
import java.sql.Time;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import javax.help.HelpSet;
import javax.help.JHelpContentViewer;
import javax.swing.AbstractButton;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JPasswordField;
import javax.swing.JPopupMenu;
import javax.swing.JTabbedPane;
import javax.swing.JTextPane;
import javax.swing.JToggleButton;
import javax.swing.KeyStroke;
import javax.swing.event.AncestorListener;
import javax.swing.plaf.basic.BasicPanelUI;
import javax.swing.plaf.multi.MultiPanelUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.JTextComponent;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.dom.svg.SVGDOMImplementation;
import org.apache.batik.dom.svg12.SVG12DOMImplementation;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xml.serializer.ToHTMLStream;
import org.apache.xml.serializer.ToUnknownStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.persist.HsqlProperties;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.217533100586621
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(1);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "JDayChooser");
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.load(4191);
      jpegImage0.getTransparentColor();
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.setFocus();
      jDayChooser0.getInputVerifier();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4191, (-2663L), 1201, (-1699), '8');
      String string0 = AbstractButton.DISABLED_ICON_CHANGED_PROPERTY;
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay((-948));
      MapDialog mapDialog0 = new MapDialog();
      mapDialog0.getMindMapController();
      MoveNodeAction moveNodeAction0 = null;
      try {
        moveNodeAction0 = new MoveNodeAction((MindMapController) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.mindmapmode.actions.NodeGeneralAction", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.128639690437934
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = (-2796);
      jDayChooser0.setDay(32);
      Color color0 = Color.GREEN;
      JButton[] jButtonArray0 = new JButton[3];
      JButton jButton0 = new JButton();
      jButtonArray0[0] = jButton0;
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser("day");
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      MockFile mockFile0 = new MockFile("day", "day");
      File file0 = fileUtil0.canonicalFile((File) mockFile0);
      Icon icon0 = mockJFileChooser0.getIcon(file0);
      JButton jButton1 = new JButton(icon0);
      jButtonArray0[1] = jButton1;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jButtonArray0[2] = (JButton) jDayChooser_DecoratorButton0;
      jDayChooser0.weeks = jButtonArray0;
      // Undeclared exception!
      try { 
        jDayChooser0.setDecorationBackgroundColor(color0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2056219650639624
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getSelectedDay();
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      jDayChooser0.setForeground(systemColor0);
      Locale locale0 = new Locale("ld3m>!320;95$lvfYp");
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) canvasGraphicsNode0, (Collection<String>) canvasGraphicsNode0, locale_FilteringMode0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.updateUI();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.211263088283608
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(1);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "JDayChooser");
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      Locale locale0 = Locale.KOREA;
      locale0.hasExtensions();
      Locale locale1 = Locale.ENGLISH;
      jDayChooser0.setLocale(locale1);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setFocus();
      int int0 = jDayChooser0.getDay();
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1239999869456354
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = jYearChooser0.dayChooser;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getComponentListeners();
      jDayChooser1.getToolTipText();
      MockFile.createTempFile("Star%ing to w~ite clip?oardmage ", "Star%ing to w~ite clip?oardmage ");
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFont();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      JDayChooser jDayChooser3 = new JDayChooser(true);
      jDayChooser3.setMonth(1410);
      assertEquals(31, jDayChooser3.getDay());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertFalse(jDayChooser3.isDecorationBordersVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.376591494319695
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.load(345);
      JpegImage jpegImage1 = new JpegImage(fopImage_ImageInfo0);
      jpegImage1.load(23);
      jpegImage1.getTransparentColor();
      jDayChooser0.setMaxDayCharacters(12341);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setFocus();
      jDayChooser0.getInputVerifier();
      jDayChooser1.setAlignmentY((-1186.0F));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 4, 9L, (-3803), 12341, ' ');
      String string0 = AbstractButton.DISABLED_ICON_CHANGED_PROPERTY;
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMonth(36);
      jDayChooser0.isDayBordersVisible();
      jDayChooser1.getDay();
      jDayChooser1.setDayBordersVisible(false);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1326303323964093
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      ToUnknownStream toUnknownStream0 = new ToUnknownStream();
      ToHTMLStream toHTMLStream0 = new ToHTMLStream();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "day");
      Color color0 = Color.GREEN;
      jDayChooser0.setDecorationBackgroundColor(color0);
      StyleContext styleContext0 = new StyleContext();
      JPasswordField jPasswordField0 = new JPasswordField("12", 17);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jPasswordField0.new AccessibleJTextComponent();
      AttributeSet attributeSet0 = jTextComponent_AccessibleJTextComponent0.getCharacterAttribute(17);
      styleContext0.reclaim(attributeSet0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1609223925836183
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      StyleContext styleContext0 = new StyleContext();
      StyleContext.getDefaultStyleContext();
      StyleContext styleContext1 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext1.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext1.new NamedStyle(styleContext_NamedStyle0);
      styleContext_NamedStyle0.containsAttributes(styleContext_NamedStyle1);
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet(styleContext_NamedStyle0);
      styleContext1.reclaim(styleContext_NamedStyle0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2646491414703145
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(true);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo1);
      jpegImage0.load(0);
      jpegImage0.getTransparentColor();
      jDayChooser0.setMaxDayCharacters(90);
      jDayChooser0.setFocus();
      jDayChooser0.getInputVerifier();
      JMenu jMenu0 = new JMenu((String) null, true);
      jMenu0.getMenuComponent(10023);
      String string0 = AbstractButton.DISABLED_ICON_CHANGED_PROPERTY;
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.344998817396667
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.firePropertyChange("25z2K|&k+^k[()o", 784.27F, 784.27F);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.setFocus();
      jDayChooser0.getInputVerifier();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 87, 87, 1, 3, 'y');
      String string0 = AbstractButton.DISABLED_ICON_CHANGED_PROPERTY;
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMonth(28);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getDay();
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0918164583074423
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      String string0 = AbstractButton.TEXT_CHANGED_PROPERTY;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ORIENTATION_AUTO;
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.add(inputMethodListener1, inputMethodListener1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InputMethodListener inputMethodListener3 = AWTEventMulticaster.remove(inputMethodListener2, inputMethodListener1);
      InputMethodListener inputMethodListener4 = AWTEventMulticaster.remove(inputMethodListener2, inputMethodListener1);
      InputMethodListener inputMethodListener5 = AWTEventMulticaster.add(inputMethodListener3, inputMethodListener2);
      InputMethodListener inputMethodListener6 = AWTEventMulticaster.remove(inputMethodListener4, inputMethodListener2);
      AWTEventMulticaster.add(inputMethodListener5, inputMethodListener6);
      AWTEventMulticaster.add(inputMethodListener2, inputMethodListener5);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3152, 3152, 850, 13, '1');
      String string1 = AbstractButton.DISABLED_ICON_CHANGED_PROPERTY;
      jDayChooser0.setDay((-319));
      jDayChooser0.getDay();
      jDayChooser0.setDayBordersVisible(false);
      MapDialog mapDialog0 = new MapDialog();
      mapDialog0.getMindMapController();
      MoveNodeAction moveNodeAction0 = null;
      try {
        moveNodeAction0 = new MoveNodeAction((MindMapController) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.mindmapmode.actions.NodeGeneralAction", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3846296650145757
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getTransparentColor();
      jDayChooser0.weekdayForeground = null;
      jDayChooser0.setMaxDayCharacters(12);
      jDayChooser0.setFocus();
      jDayChooser0.getInputVerifier();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 12, 0L, 44, 12, 'y');
      InputEvent.getModifiersExText(164);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getDaysInMonth();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-6029312), color0.getRGB());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.addListeners(42);
      jDayChooser0.getDay();
      jDayChooser0.setMaxSelectableDate((Date) null);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 34, 2430L, 34, 2337, 'm', 34);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = 1799;
      int int1 = (-1081);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1799, (-1271), (-1081), 1799, 9827);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      // Undeclared exception!
      try { 
        jTabbedPane0.getDisabledIconAt((-1081));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1509516053141597
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener2 = AWTEventMulticaster.remove(containerListener0, containerListener1);
      ContainerListener containerListener3 = AWTEventMulticaster.add(containerListener2, containerListener2);
      jDayChooser0.addContainerListener(containerListener3);
      jDayChooser0.initDecorations();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1337055042791766
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      String string0 = AbstractButton.TEXT_CHANGED_PROPERTY;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ORIENTATION_AUTO;
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) null);
      AWTEventMulticaster.remove((AdjustmentListener) aWTEventMulticaster2, (AdjustmentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((AdjustmentListener) null, (AdjustmentListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((AdjustmentListener) null, (AdjustmentListener) aWTEventMulticaster3);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster2, (InputMethodListener) aWTEventMulticaster1);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster4, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster6, (InputMethodListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster5, (InputMethodListener) aWTEventMulticaster5);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster5, (HierarchyBoundsListener) aWTEventMulticaster1);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster7, (HierarchyBoundsListener) aWTEventMulticaster4);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) aWTEventMulticaster6);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) aWTEventMulticaster6);
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      Locale locale0 = Locale.KOREA;
      locale0.hasExtensions();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      MockDate mockDate0 = new MockDate(792, 97, 0, 24, (-655), (-2725));
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.21897484884367
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(6);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMaxDayCharacters(6);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "1?b");
      jDayChooser0.setDay(184);
      jDayChooser0.setDay((-1));
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2216908241967506
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)123;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.addContainerListener((ContainerListener) null);
      jDayChooser0.setYear(8);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MultiPanelUI multiPanelUI0 = new MultiPanelUI();
      jDayChooser0.setUI(multiPanelUI0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      jDayChooser0.addContainerListener((ContainerListener) null);
      jDayChooser0.setYear(730);
      jDayChooser0.initDecorations();
      jDayChooser0.setWeekOfYearVisible(true);
      MockDate mockDate0 = new MockDate((-4076L));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1977785422026814
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(true);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.load((-2154));
      jpegImage0.load(347);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      jDayChooser0.setDay(34);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer1.getTextSelectionColor();
      Color color1 = new Color(11, 0, 0);
      jDayChooser0.setDecorationBackgroundColor(color1);
      jDayChooser0.setMonth((-286));
      jDayChooser0.setForeground(color0);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getTransferHandler();
      jDayChooser0.setMaxDayCharacters(0);
      boolean boolean0 = true;
      jDayChooser0.setAlwaysFireDayProperty(true);
      MockFile.createTempFile("day", "");
      ToUnknownStream toUnknownStream0 = new ToUnknownStream();
      // Undeclared exception!
      try { 
        toUnknownStream0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.serializer.SerializerBase", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1700179605675673
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont("day", 39, (-1456));
      font0.getTransform();
      jDayChooser0.setFont(font0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 548L, 39, 39, '%');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.setMonth((-1456));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.09747264597468
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultipleImage multipleImage0 = new MultipleImage((-0.25));
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      defaultTreeCellRenderer0.getFont();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setMonth(2);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1509776724370013
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-1421));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      MockFile mockFile0 = new MockFile("/v8)J!IhvZ!i");
      ToUnknownStream toUnknownStream0 = new ToUnknownStream();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        toUnknownStream0.addAttribute("26", "pu'W@R>hD", "day", "Finished configuring.", "Finished configuring.", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.serializer.ToXMLStream", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.086761435341095
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          JDayChooser jDayChooser0 = new JDayChooser(true);
          jDayChooser0.setDecorationBordersVisible(true);
          SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
          sVGDOMImplementation0.getLocale();
          JDayChooser jDayChooser1 = new JDayChooser();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          jDayChooser0.addListeners(1);
          MockFileWriter mockFileWriter0 = null;
          try {
            mockFileWriter0 = new MockFileWriter(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // java.io.FileWriter.<init>(FileWriter.java:116)
             // org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
             // sun.reflect.GeneratedConstructorAccessor118.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.170076619162811
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultipleImage multipleImage0 = new MultipleImage(0.0);
      MultipleImage multipleImage1 = new MultipleImage(0.0);
      multipleImage1.getImage();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.prepareImage((Image) null, 0, 32, (ImageObserver) null);
      jDayChooser0.setFocus();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.updateUI();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 11, false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2055099842350803
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ORIENTATION_AUTO;
      MockDate mockDate0 = new MockDate((byte)19);
      jDayChooser0.setMinSelectableDate(mockDate0);
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      jDayChooser0.getClientProperty((Object) null);
      jDayChooser0.setWeekdayForeground(systemColor0);
      jDayChooser0.setDayBordersVisible(true);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JComponent.getDefaultLocale();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.maxDayCharacters = 1648;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1648, true, jDayChooser0);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.1700179605675673
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Ws";
      stringArray0[1] = "(d";
      MultipleImage multipleImage0 = new MultipleImage(4271.620595877507);
      multipleImage0.getImage();
      multipleImage0.setDescription("(d");
      multipleImage0.getAccessibleContext();
      multipleImage0.getImage();
      String[] stringArray1 = new String[9];
      stringArray1[1] = "Ws";
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(46);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setDayBordersVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1608966978625985
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ORIENTATION_AUTO;
      ActionEvent actionEvent0 = new ActionEvent(integer0, 8747, (String) null, 0);
      Time time0 = new Time(0L);
      jDayChooser0.setSelectableDateRange(time0, time0);
      jDayChooser0.isWeekOfYearVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.218930098605934
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(true);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.load(345);
      jpegImage0.load((-1594));
      jpegImage0.getTransparentColor();
      jDayChooser0.setMaxDayCharacters(31);
      jpegImage0.load(345);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "day");
      jDayChooser0.setDay(347);
      jDayChooser0.setDay(0);
      jDayChooser0.getSelectedDay();
      MockDate mockDate0 = new MockDate(34, 34, 3397, 1765, (-3052), 0);
      jDayChooser0.isWeekOfYearVisible();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      java.sql.Date date0 = new java.sql.Date(0L);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.0966166083347697
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener3 = AWTEventMulticaster.add(hierarchyBoundsListener2, hierarchyBoundsListener2);
      HierarchyBoundsListener hierarchyBoundsListener4 = AWTEventMulticaster.add(hierarchyBoundsListener2, hierarchyBoundsListener3);
      HierarchyBoundsListener hierarchyBoundsListener5 = AWTEventMulticaster.remove(hierarchyBoundsListener4, hierarchyBoundsListener2);
      HierarchyBoundsListener hierarchyBoundsListener6 = AWTEventMulticaster.add(hierarchyBoundsListener3, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener7 = AWTEventMulticaster.add(hierarchyBoundsListener5, hierarchyBoundsListener5);
      HierarchyBoundsListener hierarchyBoundsListener8 = AWTEventMulticaster.add(hierarchyBoundsListener2, hierarchyBoundsListener6);
      HierarchyBoundsListener hierarchyBoundsListener9 = AWTEventMulticaster.remove(hierarchyBoundsListener5, hierarchyBoundsListener2);
      HierarchyBoundsListener hierarchyBoundsListener10 = AWTEventMulticaster.remove(hierarchyBoundsListener4, hierarchyBoundsListener6);
      HierarchyBoundsListener hierarchyBoundsListener11 = AWTEventMulticaster.add(hierarchyBoundsListener10, hierarchyBoundsListener3);
      HierarchyBoundsListener hierarchyBoundsListener12 = AWTEventMulticaster.add(hierarchyBoundsListener11, hierarchyBoundsListener11);
      AWTEventMulticaster.remove(hierarchyBoundsListener9, hierarchyBoundsListener5);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener6);
      AWTEventMulticaster.remove(hierarchyBoundsListener2, hierarchyBoundsListener4);
      AWTEventMulticaster.remove(hierarchyBoundsListener7, hierarchyBoundsListener8);
      AWTEventMulticaster.remove(hierarchyBoundsListener3, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove(hierarchyBoundsListener11, hierarchyBoundsListener11);
      HierarchyBoundsListener hierarchyBoundsListener13 = AWTEventMulticaster.remove(hierarchyBoundsListener7, hierarchyBoundsListener12);
      AWTEventMulticaster.add(hierarchyBoundsListener13, hierarchyBoundsListener6);
      AWTEventMulticaster.add(hierarchyBoundsListener12, hierarchyBoundsListener8);
      HierarchyBoundsListener hierarchyBoundsListener14 = AWTEventMulticaster.add(hierarchyBoundsListener4, hierarchyBoundsListener2);
      HierarchyBoundsListener hierarchyBoundsListener15 = AWTEventMulticaster.remove(hierarchyBoundsListener14, hierarchyBoundsListener9);
      AWTEventMulticaster.add(hierarchyBoundsListener10, hierarchyBoundsListener9);
      AWTEventMulticaster.remove(hierarchyBoundsListener12, hierarchyBoundsListener15);
      AWTEventMulticaster.remove(hierarchyBoundsListener7, hierarchyBoundsListener1);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(1410);
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1410783604778616
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      sVGDOMImplementation0.getLocale();
      JDayChooser jDayChooser1 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser1.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.0967547282919528
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVetoableChangeListeners();
      Color color0 = Color.white;
      jDayChooser0.sundayForeground = color0;
      color0.getRGBComponents((float[]) null);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1001.1103F);
      floatArray0[1] = 2039.5173F;
      floatArray0[2] = 464.25F;
      jDayChooser0.updateUI();
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1616.5F;
      jDayChooser0.setBackground(color0);
      float[] floatArray1 = color0.getRGBComponents(floatArray0);
      color0.getRGBColorComponents(floatArray1);
      int int0 = (-9);
      jDayChooser0.firePropertyChange("aGZ&", 108, (-9));
      jDayChooser0.decorationBordersVisible = false;
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.init();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-1026));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MultiPanelUI multiPanelUI0 = new MultiPanelUI();
      jDayChooser0.setUI(multiPanelUI0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove((ContainerListener) aWTEventMulticaster0, (ContainerListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      JPasswordField jPasswordField0 = new JPasswordField(10165);
      jPasswordField0.addInputMethodListener(aWTEventMulticaster1);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-2535));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.1016510389035683
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.128728079881931
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      defaultTreeCellRenderer0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      defaultTreeCellRenderer0.getFont();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-3379));
      jDayChooser0.setMonth(1650);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(0, color0.getRed());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.413299039771611
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(true);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.load(0);
      jpegImage0.load(1);
      jpegImage0.load(345);
      jpegImage0.getTransparentColor();
      jDayChooser0.firePropertyChange("14", (float) 345, 1361.13F);
      jDayChooser0.setMaxDayCharacters(31);
      jDayChooser0.setFocus();
      jDayChooser0.getInputVerifier();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 31, 0L, 0, 43, 'y');
      String string0 = AbstractButton.DISABLED_ICON_CHANGED_PROPERTY;
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getMinSelectableDate();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMonth(2059);
      jDayChooser0.isDayBordersVisible();
      int int1 = jDayChooser0.getDay();
      assertEquals(14, int1);
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDecorationBackgroundColor();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.0867876009366073
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((ContainerListener) aWTEventMulticaster1, (ContainerListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((ContainerListener) aWTEventMulticaster1, (ContainerListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) aWTEventMulticaster0, (ContainerListener) aWTEventMulticaster1);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      jDayChooser0.updateUI();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet(styleContext_NamedStyle0);
      styleContext0.reclaim((AttributeSet) null);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.058591591902833
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.putClientProperty(",|Z", ",|Z");
      jDayChooser0.isFocusable();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getColorSpace();
      Color color0 = Color.RED;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      jDayChooser0.drawDays();
      floatArray0[3] = (-889.18945F);
      floatArray0[4] = 0.928F;
      // Undeclared exception!
      try { 
        color0.getColorComponents((ColorSpace) null, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1700419077878936
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-911), (-911), (-911), 1249, 'X', 0);
      InputEvent.getModifiersExText(1249);
      keyEvent0.setSource(jDayChooser0);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.drawDays();
      jDayChooser0.setIgnoreRepaint(false);
      jDayChooser0.getDaysInMonth();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getTopLevelAncestor();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      SystemColor systemColor0 = SystemColor.text;
      jDayChooser0.setSundayForeground(systemColor0);
      KeyEvent keyEvent1 = null;
      try {
        keyEvent1 = new KeyEvent((Component) null, 3411, (-911), 8928, 0, 'X', (-3619));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Ws";
      stringArray0[1] = "(d";
      MultipleImage multipleImage0 = new MultipleImage(4271.620595877507);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.addFocusListener((FocusListener) null);
      defaultTreeCellRenderer0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1236847859261854
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      String string0 = AbstractButton.TEXT_CHANGED_PROPERTY;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ORIENTATION_AUTO;
      KeyStroke.getKeyStroke(1254, 1249);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, 1249, "text");
      actionEvent0.paramString();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(9, threadFactory0);
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ScheduledFuture<Integer> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule(callable0, (long) (-2796), timeUnit0);
      actionEvent0.setSource(scheduledFuture0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.297170024711629
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(false);
      jDayChooser0.init();
      Date date0 = jDayChooser0.getMaxSelectableDate();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      java.sql.Date date1 = new java.sql.Date(0L);
      jDayChooser0.setSelectableDateRange(date0, date1);
      MockDate mockDate0 = new MockDate(1L);
      jDayChooser0.setMinSelectableDate(mockDate0);
      Date date2 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date2);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.3250371887942003
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Wegt";
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      Date date0 = jDayChooser1.getMaxSelectableDate();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      java.sql.Date date1 = new java.sql.Date(3025L);
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext(1522, stringArray0, stringArray0, stringArray0, stringArray0, iBindingFactory0);
      Date date2 = jDayChooser1.maxSelectableDate;
      jDayChooser1.setSelectableDateRange(date0, date2);
      MockDate mockDate0 = new MockDate(86400000L);
      jDayChooser0.setMinSelectableDate(mockDate0);
      Date date3 = jDayChooser1.maxSelectableDate;
      assertSame(date3, date0);
      
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.isRequestFocusEnabled();
      jTextPane0.getStyle("AzJ");
      jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      String string0 = AbstractButton.TEXT_CHANGED_PROPERTY;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ORIENTATION_AUTO;
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke((-2796), 1249);
      ActionEvent actionEvent0 = new ActionEvent(keyStroke0, 6, "DkMh|", (-2796));
      ActionEvent actionEvent1 = new ActionEvent("DkMh|", 32, "S@|rx5iR]~]JC");
      actionEvent1.paramString();
      JButton jButton0 = new JButton("Metal");
      actionEvent1.setSource(jButton0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Metal\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JToggleButton jToggleButton0 = new JToggleButton("");
      int int0 = 10138;
      ItemEvent itemEvent0 = new ItemEvent(jToggleButton0, 10138, "", (-968));
      jDayChooser0.dispatchEvent(itemEvent0);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection((HsqlProperties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcConnection", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ORIENTATION_AUTO;
      JPopupMenu.Separator jPopupMenu_Separator0 = new JPopupMenu.Separator();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.091803330640885
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Ws";
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.dayNames = stringArray0;
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      Locale locale0 = jDayChooser0.locale;
      Color color0 = Color.GREEN;
      jDayChooser0.setDay((-1525));
      jDayChooser0.getSelectedDay();
      MockDate mockDate0 = new MockDate((-1757), 30, (-56), 10145, (-1525), (-1757));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.2308216109542167
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(6);
      Date date0 = jDayChooser0.getMinSelectableDate();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      jDayChooser0.setMaxSelectableDate(date0);
      MockFile.createTempFile("rAI^}c:X!:y<n-*LU", (String) null);
      ToUnknownStream toUnknownStream0 = new ToUnknownStream();
      // Undeclared exception!
      try { 
        toUnknownStream0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.serializer.SerializerBase", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.175592593151128
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "14";
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.firePropertyChange("14", 1361.13F, 1361.13F);
      jDayChooser0.getInputVerifier();
      HelpSet helpSet0 = new HelpSet();
      JHelpContentViewer jHelpContentViewer0 = new JHelpContentViewer(helpSet0);
      KeyEvent keyEvent0 = new KeyEvent(jHelpContentViewer0, 584, 584, 43, 43, 'U');
      String string1 = AbstractButton.DISABLED_ICON_CHANGED_PROPERTY;
      jDayChooser0.keyPressed(keyEvent0);
      ToUnknownStream toUnknownStream0 = new ToUnknownStream();
      // Undeclared exception!
      try { 
        toUnknownStream0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.serializer.SerializerBase", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.096591278091726
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      jDayChooser0.setUI(basicPanelUI0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      Date date0 = jDayChooser0.maxSelectableDate;
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.isRequestFocusEnabled();
      jTextPane0.getLogicalStyle();
      jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      StyleContext styleContext0 = new StyleContext();
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle(styleContext_NamedStyle0);
      styleContext_NamedStyle0.containsAttributes(styleContext_NamedStyle1);
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet(styleContext_NamedStyle1);
      styleContext1.reclaim(simpleAttributeSet0);
      Font font0 = styleContext1.getFont("day", 861, 10017);
      jDayChooser0.setFont(font0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      String string0 = AbstractButton.TEXT_CHANGED_PROPERTY;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ORIENTATION_AUTO;
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.add((InputMethodListener) null, inputMethodListener1);
      InputMethodListener inputMethodListener3 = AWTEventMulticaster.remove(inputMethodListener2, (InputMethodListener) null);
      AWTEventMulticaster.remove(inputMethodListener2, inputMethodListener1);
      InputMethodListener inputMethodListener4 = AWTEventMulticaster.add(inputMethodListener3, inputMethodListener2);
      AWTEventMulticaster.remove((InputMethodListener) null, inputMethodListener2);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener4, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener2, inputMethodListener4);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener2, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster2, (InputMethodListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster2, inputMethodListener1);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster0, inputMethodListener2);
      AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster3, (InputMethodListener) null);
      AWTEventMulticaster.remove((MouseMotionListener) aWTEventMulticaster0, (MouseMotionListener) aWTEventMulticaster3);
      JPasswordField jPasswordField0 = new JPasswordField(10);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
