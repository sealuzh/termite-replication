/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 08:58:21 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.Proxy;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.xmlreader.DBObjectPoolConfig;
import org.quickserver.util.xmlreader.QuickServerConfig;
import sun.nio.ch.SocketAdaptor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1945366875886965
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.toString();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientAuthenticationHandler();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.close();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      theClient0.setSocket(mockSocket0);
      theClient0.setTimeout((-1485));
      theClient0.getSocket();
      theClient0.getClientBinaryHandler();
      theClient0.getAuthenticator();
      assertEquals((-1485), theClient0.getTimeout());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 335);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("=");
      theClient0.setTimeoutMsg("");
      MockSocket mockSocket0 = new MockSocket("", 335);
      theClient0.setSocket(mockSocket0);
      theClient0.setTimeout((-2407));
      theClient0.getSocket();
      theClient0.getAuthenticator();
      assertEquals((-2407), theClient0.getTimeout());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      quickServerConfig0.getDBObjectPoolConfig();
      quickServer0.setMaxAuthTry(0);
      quickServerConfig0.setPort(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      quickServer0.setDBObjectPoolConfig((DBObjectPoolConfig) null);
      theClient0.setServer(quickServer0);
      theClient0.setTimeout(0);
      theClient0.toString();
      theClient0.getServer();
      theClient0.getClientExtendedEventHandler();
      System.setCurrentTimeMillis(0);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.toString();
      theClient0.toString();
      theClient0.getClientBinaryHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(500L);
      TheClient theClient0 = new TheClient();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      mockSocket0.bind(mockInetSocketAddress0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      mockSocket0.setSendBufferSize(91);
      mockSocket0.setOOBInline(false);
      theClient0.setSocket(mockSocket0);
      theClient0.getClientWriteHandler();
      theClient0.getSocket();
      theClient0.getSocketChannel();
      System.setCurrentTimeMillis(1299L);
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      
      System.setCurrentTimeMillis(1299L);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("\t<port>", 7);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      System.setCurrentTimeMillis(6416L);
      theClient0.getClientObjectHandler();
      theClient0.getAuthenticator();
      theClient0.getClientWriteHandler();
      theClient0.getAuthenticator();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      quickServer0.getQSAdminServer();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      quickServer0.initService(quickServerConfig0);
      theClient0.setServer(quickServer0);
      theClient0.getAuthenticator();
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientEvent();
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.052128844641025
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("");
      theClient0.getClientObjectHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      String string0 = blockingClientHandler0.toString();
      //  // Unstable assertion: assertEquals("{<ClientHandler-Pool#-1-ID:16> - [non-connected]}", string0);
      
      blockingClientHandler0.closeConnection();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      commandHandler0.closingConnection(blockingClientHandler0);
      commandHandler0.lostConnection(blockingClientHandler0);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.toString();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getAuthenticator();
      theClient0.getServer();
      theClient0.getClientData();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientWriteHandler();
      theClient0.getAuthenticator();
      theClient0.getMaxAuthTryMsg();
      theClient0.getServer();
      System.setCurrentTimeMillis(2896L);
      theClient0.getClientObjectHandler();
      theClient0.getAuthenticator();
      //  // Unstable assertion: assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte) (-1);
      data0.setPassword(byteArray0);
      data0.setLastAsked("no socket");
      data0.setLastAsked("no socket");
      data0.setLastAsked("!!$8V5V[\"iB_j+");
      theClient0.setClientData(data0);
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      Data data1 = (Data)theClient0.getClientData();
      data1.setPassword((byte[]) null);
      theClient0.setClientData(data1);
      theClient0.setTimeoutMsg("</object-pool>\n");
      theClient0.getClientBinaryHandler();
      SocketChannel socketChannel0 = SocketChannel.open();
      theClient0.getClientObjectHandler();
      System.setCurrentTimeMillis(1380L);
      theClient0.getAuthenticator();
      theClient0.getClientObjectHandler();
      SocketAdaptor socketAdaptor0 = (SocketAdaptor)socketChannel0.socket();
      assertNotNull(socketAdaptor0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)108;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      byteArray0[2] = (byte)22;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)0;
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("N");
      theClient0.getTimeoutMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.052754235510318
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getSocket();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient0.getClientCommandHandler();
      theClient0.setMaxAuthTry((-3844));
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.getMaxAuthTry();
      theClient0.getMaxAuthTry();
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocket();
      assertEquals((-3844), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      theClient0.getAuthenticator();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setClientAuthenticationHandler(authenticator0);
      ClientAuthenticationHandler clientAuthenticationHandler0 = theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler(clientAuthenticationHandler0);
      boolean boolean0 = theClient0.getTrusted();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      ClientEvent clientEvent1 = ClientEvent.LOST_CON;
      TheClient theClient0 = new TheClient();
      theClient0.setCommunicationLogging(false);
      theClient0.getCommunicationLogging();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      int int0 = (-1055);
      theClient0.setTimeout((-1055));
      theClient0.getTimeout();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket((String) null, (-1055));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1055
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("", 0);
      quickServer0.clearAllPools();
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-115);
      byteArray1[1] = (byte) (-115);
      byteArray1[3] = (byte) (-3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray1[4] = (byte) (-70);
      byteArray1[5] = (byte)0;
      byteArray1[5] = (byte)4;
      byteArray1[7] = (byte)0;
      byteArray1[7] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("");
      theClient0.setTimeoutMsg("-u{crJO3SA~Lk");
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:13>", nonBlockingClientHandler0.getName());
      
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientCommandHandler();
      //  // Unstable assertion: assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      MockSocket mockSocket1 = new MockSocket();
      MockSocket mockSocket2 = new MockSocket();
      MockSocket mockSocket3 = new MockSocket();
      theClient0.getSocket();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.321585437079472
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxConnectionMsg("no socket");
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.toString();
      theClient0.getServer();
      TheClient theClient1 = new TheClient();
      theClient1.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getMaxConnectionMsg();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.setServer((QuickServer) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient1.getClientBinaryHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler0.closingConnection(nonBlockingClientHandler0);
      assertEquals("<ClientHandler-Pool#-1-ID:1>", nonBlockingClientHandler0.getName());
      
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientEventHandler();
      theClient0.getClientExtendedEventHandler();
      System.setCurrentTimeMillis(120000L);
      String string0 = theClient1.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.261950424367441
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setMaxAuthTry(125);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxAuthTry(1890);
      theClient0.getTrusted();
      theClient0.setTimeout(1890);
      ClientEvent clientEvent0 = ClientEvent.READ;
      theClient0.getClientWriteHandler();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setMaxAuthTry(1890);
      theClient0.getAuthenticator();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getMaxAuthTryMsg();
      theClient0.getTimeout();
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(938L);
      Integer integer0 = new Integer(1890);
      theClient0.getClientObjectHandler();
      theClient0.getSocketChannel();
      theClient0.getAuthenticator();
      assertEquals(1890, theClient0.getTimeout());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)33;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      byte[] byteArray1 = new byte[1];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray1);
      byte[] byteArray2 = new byte[9];
      byteArray2[1] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-70);
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)4;
      byteArray2[7] = (byte)0;
      byteArray2[7] = (byte)0;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray2);
      TheClient theClient0 = new TheClient();
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)108;
      byteArray0[8] = (byte)22;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-14);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArray0[7] = (byte)0;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      byteArray0[8] = (byte)0;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("os.version");
      theClient0.setMaxAuthTry(0);
      theClient0.getMaxAuthTryMsg();
      theClient0.toString();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-70);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getTimeout();
      assertFalse(theClient0.getTrusted());
      assertEquals(0, int0);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)0;
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getChannel();
      TheClient theClient0 = new TheClient();
      theClient0.setSocketChannel((SocketChannel) null);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      ClientEvent clientEvent1 = ClientEvent.CLOSE_CON;
      TheClient theClient0 = new TheClient();
      theClient0.getClientEvent();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-115);
      byteArray1[1] = (byte) (-115);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-70);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)4;
      byteArray1[7] = (byte)0;
      byteArray1[7] = (byte)0;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray1);
      TheClient theClient0 = new TheClient();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("no socket", 125);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(730);
      theClient0.setTrusted(false);
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(730, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "$B>y");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)0;
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("no socket", 125);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getMaxAuthTry();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9687776175299367
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setTimeoutMsg("");
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getTimeoutMsg();
      theClient0.setMaxConnectionMsg("\"?");
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)33;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      byte[] byteArray1 = new byte[1];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray1);
      byte[] byteArray2 = new byte[8];
      byteArray2[1] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-70);
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)4;
      byteArray2[7] = (byte)0;
      byteArray2[7] = (byte)4;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray2);
      TheClient theClient0 = new TheClient();
      theClient0.getTimeoutMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }
}
