/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 09:04:36 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import java.util.Random;
import java.util.Stack;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.CorrelationAttributeEval;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.evaluation.output.prediction.HTML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.lazy.KStar;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomForest;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.ChebyshevDistance;
import weka.core.CheckOptionHandler;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.ManhattanDistance;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.estimators.KernelEstimator;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      byte byte0 = (byte)23;
      MockRandom mockRandom0 = new MockRandom((byte)124);
      mockRandom0.nextBoolean();
      evaluation0.areaUnderPRC((byte)39);
      Classifier classifier0 = null;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) instances0;
      objectArray0[2] = (Object) evaluation0;
      objectArray0[3] = (Object) textDirectoryLoader0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) null;
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, (int) (byte)124, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.48224547680049
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances1);
      String string0 = evaluation0.toClassDetailsString("#Zkkh*7d~xmz!G>");
      assertEquals("#Zkkh*7d~xmz!G>\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      instances0.parallelStream();
      Evaluation evaluation1 = new Evaluation(instances0);
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      Evaluation evaluation2 = new Evaluation(instances0);
      boolean boolean0 = evaluation2.equals(evaluation1);
      assertTrue(boolean0);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) fileSystemHandling0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate2.or(predicate0);
      predicate0.and(predicate2);
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation1.numTruePositives((-2));
      evaluation3.truePositiveRate(1);
      evaluation3.numTrueNegatives(1);
      evaluation2.falseNegativeRate((-2));
      evaluation0.areaUnderPRC((-2));
      assertTrue(evaluation0.equals((Object)evaluation2));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.86207719526477
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.stratify(33);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka.clusterers.HierarchicalClusterer");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-54);
      MockRandom mockRandom0 = new MockRandom((-2483L));
      mockRandom0.nextBoolean();
      evaluation0.areaUnderPRC((byte) (-37));
      Classifier classifier0 = null;
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 33, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_ClassIsNominal = false;
      double double0 = evaluation1.m_SumSqrErr;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Classifier not incremental, or no test file provided: can't use both train and model file.");
      testInstances0.setNumRelationalString(25);
      testInstances0.setNumInstancesRelational(660);
      try { 
        evaluation1.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.errorRate();
      MockRandom mockRandom1 = new MockRandom(1495L);
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      AllFilter allFilter2 = new AllFilter();
      AllFilter allFilter3 = new AllFilter();
      AllFilter allFilter4 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter1.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1287696428704037
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-1172.707736), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation0.toClassDetailsString(".bsi");
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-2);
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (-1172.707736);
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) (-2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray1, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.008830317272389
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.m_MinTarget;
      evaluation0.toSummaryString();
      evaluation0.weightedFMeasure();
      double double1 = evaluation0.numFalsePositives(188);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader1 = new PipedReader(pipedWriter0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.trueNegativeRate(52);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\nTotal Number of Instances                0     \n");
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.falseNegativeRate((-2));
      double double2 = evaluation2.numFalseNegatives(188);
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TestInstances testInstances0 = new TestInstances();
      KernelEstimator kernelEstimator0 = new KernelEstimator((-2));
      Capabilities capabilities0 = kernelEstimator0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate("@data");
      RandomForest randomForest0 = new RandomForest();
      Instances instances0 = testInstances1.generate("ndn10");
      RandomForest randomForest1 = new RandomForest();
      randomForest1.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      RandomForest randomForest2 = new RandomForest();
      randomForest0.enumerateMeasures();
      TestInstances testInstances2 = new TestInstances();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9768745552096143
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate(84);
      evaluation0.addNumericTrainClass(0.0, 0.95);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      evaluation0.weightedFMeasure();
      evaluation0.numFalsePositives(1);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader1 = new PipedReader(pipedWriter0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_SumPredicted = 2.0;
      double double0 = evaluation0.trueNegativeRate(6698);
      assertEquals(0.0, double0, 0.01);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " seconds");
      REPTree rEPTree0 = new REPTree();
      Evaluation.makeOptionString(rEPTree0, true);
      double double1 = evaluation1.weightedFalsePositiveRate();
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3491167981951846
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CoverTree coverTree0 = new CoverTree();
      double double0 = evaluation0.m_SumErr;
      evaluation0.setPriors(instances0);
      CoverTree coverTree1 = new CoverTree();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate((String) null);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.weightedFalseNegativeRate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation1.equals(evaluation0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2360.5212767240273;
      doubleArray0[1] = 2360.5212767240273;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation1.updateStatsForConditionalDensityEstimator(gaussianProcesses0, sparseInstance0, 1024.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.972239355064468
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString((String) null);
      assertEquals("null\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      Evaluation evaluation1 = new Evaluation(instances1);
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.equals(evaluation1);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      evaluation1.weightedFalsePositiveRate();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      evaluation1.weightedFalsePositiveRate();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.weightedTruePositiveRate();
      Evaluation evaluation4 = new Evaluation(instances0);
      evaluation4.numTrueNegatives((-1));
      double double0 = evaluation4.weightedAreaUnderROC();
      assertTrue(evaluation4.equals((Object)evaluation0));
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.187737762476829
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka.clusterers.HierarchicalClusterer");
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_SumSqrErr;
      testInstances0.setNumInstancesRelational(479);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double1 = evaluation1.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = evaluation1.makeDistribution(0.0);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.669791527460666
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[6];
      evaluation0.rootRelativeSquaredError();
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(Double.NaN, doubleArray0);
      binarySparseInstance1.toString((-2), 182);
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray1 = evaluation1.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double3 = evaluation0.SFMeanEntropyGain();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8978071409118553
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("g");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getWords();
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      evaluation0.toMatrixString("@data");
      MultiScheme multiScheme0 = new MultiScheme();
      Object object0 = new Object();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      try { 
        evaluation1.evaluateModel((Classifier) inputMappedClassifier0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.346141041194418
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      testInstances0.getWords();
      double[] doubleArray0 = new double[4];
      SystemInUtil.addInputLine("leaf ");
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 854.922923;
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances0.generate("quick,brown,fox,jumps,over,the,lazy,dog");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "quick,brown,fox,jumps,over,the,lazy,dog");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      evaluation0.useNoPriors();
      double double0 = evaluation0.m_SumAbsErr;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      textDirectoryLoader0.setDirectory(file0);
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      evaluation0.equals(textDirectoryLoader0);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "@data");
      evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.KBInformation();
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3307102464186924
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.remove((Object) textDirectoryLoader0);
      textDirectoryLoader0.setRetrieval(486);
      MultiScheme multiScheme0 = new MultiScheme();
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      UnivariateKernelEstimator univariateKernelEstimator1 = new UnivariateKernelEstimator();
      univariateKernelEstimator1.addValue(486, 486);
      univariateKernelEstimator1.updateWidth();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.priorEntropy();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3507118584044866
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      UnivariateKernelEstimator univariateKernelEstimator1 = new UnivariateKernelEstimator();
      univariateKernelEstimator1.addValue((-0.9189385332046727), (-0.9189385332046727));
      univariateKernelEstimator1.updateWidth();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("@data");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation1 = new Evaluation(instances1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@data";
      stringArray0[2] = "Vq8sADD.";
      stringArray0[3] = "makeCopies";
      stringArray0[4] = "@data";
      stringArray0[5] = "@data";
      testInstances0.setOptions(stringArray0);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation1.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation1.priorEntropy();
      assertEquals(0.9940302114769565, double3, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation0.kappa();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-0.9189385332046727);
      doubleArray0[1] = (-0.9189385332046727);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-0.9189385332046727);
      doubleArray0[4] = (-0.9189385332046727);
      doubleArray0[0] = (-306.49614466078);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-306.49614466078), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1);
      binarySparseInstance2.setValueSparse(2, (-2));
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, binarySparseInstance2, 0.3183098861837907);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.137129205952912
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      UnivariateKernelEstimator univariateKernelEstimator1 = new UnivariateKernelEstimator();
      univariateKernelEstimator1.updateWidth();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("@data");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation1 = new Evaluation(instances1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@data";
      stringArray0[2] = "graphType";
      stringArray0[3] = "makeCopies";
      stringArray0[4] = "@data";
      stringArray0[5] = "@data";
      testInstances0.setOptions(stringArray0);
      double double0 = evaluation1.m_SumSqrErr;
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      testInstances0.setNumRelationalNominal(3735);
      Evaluation evaluation2 = new Evaluation(instances1);
      double double1 = evaluation2.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation2.falseNegativeRate(2090);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.448442309591302
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.0E75;
      doubleArray0[1] = 1.0E75;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      double double0 = evaluation0.m_SumAbsErr;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier1.getOnDemandDirectory();
      textDirectoryLoader0.setDirectory(file0);
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      ListOptions listOptions0 = new ListOptions();
      Stacking stacking0 = new Stacking();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) evaluation0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.and(predicate0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numTruePositives(6);
      evaluation0.truePositiveRate(1);
      evaluation1.numTrueNegatives(494);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      
      double double1 = evaluation0.falseNegativeRate(2);
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances1.generate(".bsi");
      MockRandom mockRandom0 = new MockRandom();
      RandomForest randomForest0 = new RandomForest();
      randomForest0.getCapabilities();
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      Capabilities.forInstances(instances1, true);
      TestInstances.forCapabilities(capabilities0);
      RandomForest randomForest1 = new RandomForest();
      randomForest0.enumerateMeasures();
      TestInstances testInstances2 = new TestInstances();
      TestInstances testInstances3 = new TestInstances();
      testInstances1.setNoClass(false);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumSchemeEntropy;
      double double1 = evaluation0.truePositiveRate((-1082));
      double double2 = evaluation0.numFalseNegatives((-1));
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.numTrueNegatives((-2));
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.stratify(33);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka.clusterers.HierarchicalClusterer");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-2));
      KStar kStar0 = new KStar();
      MockRandom mockRandom2 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1226757988207967
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, doubleArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBRelativeInformation();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter1.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7865701671931913
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Ad!");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      RandomForest randomForest0 = new RandomForest();
      randomForest0.getCapabilities();
      testInstances0.generate("}D.OzXZEU");
      Capabilities capabilities0 = randomForest0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      RandomForest randomForest1 = new RandomForest();
      randomForest1.enumerateMeasures();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numTruePositives((-1));
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2877));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2877
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9784724942075065
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CoverTree coverTree0 = new CoverTree();
      double double0 = evaluation0.m_SumErr;
      evaluation0.setPriors(instances0);
      CoverTree coverTree1 = new CoverTree();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalseNegativeRate();
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[1] = '2';
      charArray0[2] = '&';
      charArray0[3] = ')';
      charArray0[4] = 'w';
      charArray0[5] = '6';
      charArray0[6] = ';';
      charArray0[7] = 'Y';
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID(1727, charArray0, (-3866));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1327270376713896
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      univariateKernelEstimator0.updateWidth();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate(".bsi");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setOptions((String[]) null);
      textDirectoryLoader1.getDataSet();
      evaluation0.weightedMatthewsCorrelation();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      boolean boolean0 = evaluation0.m_NoPriors;
      UnivariateKernelEstimator univariateKernelEstimator1 = evaluation0.m_PriorEstimator;
      evaluation0.weightedFalsePositiveRate();
      evaluation0.trueNegativeRate(509);
      evaluation0.weightedFalseNegativeRate();
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = '{';
      charArray0[2] = '&';
      charArray0[3] = 'h';
      charArray0[4] = ']';
      charArray0[5] = 'b';
      charArray0[6] = 'i';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2), charArray0, 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.045644588734372
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      evaluation0.weightedAreaUnderPRC();
      evaluation0.addNumericTrainClass(1294.99092784397, Double.NaN);
      evaluation0.toSummaryString();
      evaluation0.weightedFMeasure();
      evaluation0.numFalsePositives(7);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader1 = new PipedReader(pipedWriter0, 84);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.941214632562954
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-2));
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.precision((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.603809722935932
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setOptions");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("@data");
      Evaluation evaluation1 = new Evaluation(instances0);
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      evaluation0.equals(technicalInformationHandlerJavadoc0);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation1.m_PriorEstimator;
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.trueNegativeRate(0);
      evaluation1.weightedAreaUnderPRC();
      evaluation1.addNumericTrainClass(1213.453306435155, 186.0);
      try { 
        CostMatrix.parseMatlab("San Francisco, CA, USA");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.6273502878205566
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString(" ");
      Evaluation evaluation1 = new Evaluation(instances0);
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (-10.0);
      doubleArray0[5] = (-1845.0);
      doubleArray0[6] = 3423.9;
      doubleArray0[7] = (double) (-2);
      doubleArray0[8] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation2.evaluateModelOnce(1.0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7037935070525467
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MockRandom mockRandom0 = new MockRandom();
      RandomForest randomForest0 = new RandomForest();
      testInstances0.generate("}D.OzXZEU");
      randomForest0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numTrueNegatives((-1));
      PipedReader pipedReader0 = new PipedReader();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        CostMatrix.parseMatlab("@data");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 854.922923;
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) evaluation0;
      objectArray0[2] = (Object) 854.922923;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) multiScheme0;
      objectArray0[5] = (Object) multiScheme0;
      evaluation0.evaluateModel((Classifier) multiScheme0, instances0, objectArray0);
      double double0 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.272539375087381
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      inputMappedClassifier0.setEnvironment((Environment) null);
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      MockRandom mockRandom0 = new MockRandom();
      KStar kStar0 = new KStar();
      MockRandom mockRandom1 = new MockRandom();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      String string0 = Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      assertEquals("\nSynopsis for weka.classifiers.bayes.NaiveBayesMultinomial:\n\nClass for building and using a multinomial Naive Bayes classifier. For more information see,\n\nAndrew Mccallum, Kamal Nigam: A Comparison of Event Models for Naive Bayes Text Classification. In: AAAI-98 Workshop on 'Learning for Text Categorization', 1998.\n\nThe core equation for this classifier:\n\nP[Ci|D] = (P[D|Ci] x P[Ci]) / P[D] (Bayes rule)\n\nwhere Ci is class i and D is a document.", string0);
      
      double double0 = evaluation0.totalCost();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.getRevision();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.01718692134263
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 854.922923;
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) evaluation0;
      objectArray0[2] = (Object) 854.922923;
      Object object0 = new Object();
      objectArray0[3] = object0;
      evaluation0.weightedFMeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      int int0 = 785;
      evaluation1.precision(785);
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        pipedReader0.skip((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // skip value is negative
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.045644588734372
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-2));
      evaluation0.weightedAreaUnderPRC();
      evaluation0.addNumericTrainClass(Double.NaN, 0.95);
      evaluation0.toSummaryString();
      evaluation0.weightedFMeasure();
      int int0 = 188;
      evaluation0.numFalsePositives(188);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader1 = new PipedReader(pipedWriter0);
      // Undeclared exception!
      try { 
        pipedReader1.skip((-1770L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // skip value is negative
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8324188438745903
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate(84);
      evaluation0.addNumericTrainClass(0.0, 0.95);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.numFalsePositives(1);
      assertEquals(0.0, double1, 0.01);
      
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader1 = new PipedReader(pipedWriter0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_SumPredicted = 2.0;
      evaluation0.trueNegativeRate(6698);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " seconds");
      Evaluation evaluation2 = new Evaluation(instances0);
      double double2 = evaluation2.falseNegativeRate(6698);
      double double3 = evaluation1.numFalseNegatives((-7));
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.045644588734372
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-997));
      evaluation0.weightedAreaUnderPRC();
      evaluation0.addNumericTrainClass((-2), 0.95);
      evaluation0.toSummaryString();
      evaluation0.weightedFMeasure();
      evaluation0.numFalsePositives((-2));
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader1 = new PipedReader(pipedWriter0);
      try { 
        pipedReader0.skip(2244L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.50804676777597
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1644.16190784592;
      doubleArray0[1] = 1644.16190784592;
      doubleArray0[2] = 1644.16190784592;
      SparseInstance sparseInstance0 = new SparseInstance(1644.16190784592, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation0.toMatrixString((String) null);
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.numTruePositives((-2));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.truePositiveRate(2);
      evaluation1.numTrueNegatives(2003);
      double double2 = evaluation1.SFEntropyGain();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.485215761775983
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      doubleArray0[2] = (-1.0);
      doubleArray0[0] = 854.922923;
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) evaluation0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = objectArray0[1];
      objectArray0[4] = (Object) multiScheme0;
      objectArray0[5] = (Object) multiScheme0;
      double double1 = evaluation0.m_MaxTarget;
      double double2 = evaluation0.coverageOfTestCasesByPredictedRegions();
      SparseInstance sparseInstance0 = new SparseInstance(1);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double3 = evaluation0.KBInformation();
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.SFEntropyGain();
      assertEquals(double4, double0, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double5, double2, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      MultiScheme multiScheme0 = new MultiScheme();
      Object object0 = new Object();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      inputMappedClassifier2.getModelHeader(instances0);
      InputMappedClassifier inputMappedClassifier3 = new InputMappedClassifier();
      inputMappedClassifier3.enumerateMeasures();
      MockRandom mockRandom0 = new MockRandom(1958L);
      KStar kStar0 = new KStar();
      try { 
        evaluation0.crossValidateModel((Classifier) multiScheme0, instances0, 500, (Random) mockRandom0, (Object[]) kStar0.TAGS_MISSING);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-399.513197);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = ".arff";
      double double0 = evaluation0.m_SumSqrErr;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNominal(1705);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getHeader();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7369638066602349
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation2.m_SumSqrErr;
      Evaluation evaluation3 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation2.updateMargins((double[]) null, (-7), 717.644854);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      RandomForest randomForest0 = new RandomForest();
      Capabilities capabilities0 = randomForest0.getCapabilities();
      Instances instances0 = testInstances0.generate("}D.OzXZEU");
      randomForest0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances.forCapabilities(capabilities0);
      RandomForest randomForest1 = new RandomForest();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MissingClass;
      double double1 = evaluation0.m_TotalSizeOfRegions;
      double double2 = evaluation0.meanPriorAbsoluteError();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.0611976639656677
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka.clusterers.HierarchicalClusterer");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)124;
      instances0.clear();
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte) (-21);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.numFalsePositives((-1));
      LWL lWL0 = new LWL();
      // Undeclared exception!
      try { 
        evaluation0.recall((-4433));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4433
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.656185661560307
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      CoverTree coverTree0 = new CoverTree();
      evaluation0.setPriors(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-10.0), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2951.339, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      instances0.add((Instance) binarySparseInstance1);
      double double0 = evaluation0.falsePositiveRate(25);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.avgCost();
      evaluation0.confusionMatrix();
      double double2 = evaluation0.incorrect();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.meanAbsoluteError();
      assertEquals(double3, double1, 0.01);
      
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0125511218468293
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances1.generate(".bsi");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      evaluation0.useNoPriors();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.areaUnderROC((-2));
      evaluation0.getClassPriors();
      Evaluation.makeOptionString(inputMappedClassifier0, true);
      evaluation0.SFMeanEntropyGain();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      BallNode ballNode0 = new BallNode(1084, (-1), (-2));
      try { 
        BallNode.calcPivot(ballNode0, ballNode0, instances1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0113066331003315
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "normTipText");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.fMeasure((-868));
      double double1 = evaluation0.matthewsCorrelationCoefficient((-868));
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString("result", true);
      assertEquals("result\nTotal Number of Instances                0     \n", string0);
      
      evaluation0.numTrueNegatives((-22));
      PipedReader pipedReader0 = new PipedReader();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.getRevision();
      evaluation0.numTruePositives((-22));
      evaluation0.truePositiveRate(46);
      double double2 = evaluation1.numTrueNegatives(484);
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.5180837896977577
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-2));
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalseNegativeRate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation1.m_ClassPriors = null;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation1.m_PriorEstimator;
      evaluation0.SFMeanSchemeEntropy();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.weightedFalsePositiveRate();
      StringReader stringReader0 = new StringReader(".arff");
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(stringReader0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \".arff\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6753760674923666
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      MultiScheme multiScheme0 = new MultiScheme();
      Object object0 = new Object();
      inputMappedClassifier0.enumerateMeasures();
      MockRandom mockRandom0 = new MockRandom(1958L);
      KStar kStar0 = new KStar();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) regressionByDiscretization0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate2.or(predicate0);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.5425708016095645
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      evaluation0.rootRelativeSquaredError();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.kappa();
      evaluation0.rootMeanPriorSquaredError();
      Evaluation evaluation2 = new Evaluation(instances0);
      boolean boolean0 = evaluation2.m_ComplexityStatisticsAvailable;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[2] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray0);
      Instance instance0 = null;
      try { 
        evaluation2.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.009653988412479
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      double double0 = 2360.5212767240273;
      double double1 = 0.964;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1030.44200279792;
      doubleArray0[1] = 0.964;
      SparseInstance sparseInstance0 = new SparseInstance((-2.0), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8564909139241834
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(3209);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3209
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.657913269211706
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) evaluation0;
      evaluation0.rootRelativeSquaredError();
      evaluation0.rootMeanPriorSquaredError();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      MultiScheme multiScheme1 = new MultiScheme();
      MultiScheme multiScheme2 = new MultiScheme();
      Object object0 = new Object();
      evaluation0.areaUnderROC((-2341));
      evaluation0.getClassPriors();
      Evaluation.makeOptionString(multiScheme2, true);
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.554997779753894
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.toClassDetailsString("#Zkkh*7d~xmz!G>");
      Evaluation evaluation1 = new Evaluation(instances0);
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.equals(evaluation1);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation2.m_PriorEstimator;
      evaluation1.weightedFalsePositiveRate();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.weightedTruePositiveRate();
      evaluation2.numTrueNegatives(16);
      instances1.delete();
      evaluation1.weightedAreaUnderROC();
      evaluation0.weightedTrueNegativeRate();
      evaluation1.getClassPriors();
      evaluation1.numFalseNegatives(1426);
      // Undeclared exception!
      try { 
        evaluation0.precision((-9));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -9
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      MultiScheme multiScheme0 = new MultiScheme();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      MockRandom mockRandom0 = new MockRandom();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(33);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      int int0 = 4255;
      SparseInstance sparseInstance0 = new SparseInstance(4255);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.costMatrixSourceTipText();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ComplexityStatisticsAvailable = true;
      evaluation0.SFMeanEntropyGain();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.4347240733919024
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 854.922923;
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) evaluation0;
      objectArray0[2] = (Object) 854.922923;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) multiScheme0;
      objectArray0[5] = (Object) multiScheme0;
      evaluation0.evaluateModel((Classifier) multiScheme0, instances0, objectArray0);
      double double0 = evaluation0.m_MaxTarget;
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      RandomForest randomForest0 = new RandomForest();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.and(predicate0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation0.numTruePositives(90);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.truePositiveRate(90);
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation1.numTrueNegatives(90);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.451920750018101
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setRetrieval(486);
      MultiScheme multiScheme0 = new MultiScheme();
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      UnivariateKernelEstimator univariateKernelEstimator1 = new UnivariateKernelEstimator();
      univariateKernelEstimator1.addValue(486, 486);
      univariateKernelEstimator1.updateWidth();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@data";
      stringArray0[2] = "Vq8sADD.";
      stringArray0[3] = "makeCopies";
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.priorEntropy();
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.2433670903506866
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Stacking stacking0 = new Stacking();
      stacking0.getTechnicalInformation();
      Evaluation.getGlobalInfo(stacking0);
      double double0 = 4141.88781276577;
      textDirectoryLoader0.setDebug(true);
      textDirectoryLoader0.setOutputFilename(true);
      LinkedHashSet<ChebyshevDistance> linkedHashSet0 = new LinkedHashSet<ChebyshevDistance>();
      instances0.removeAll(linkedHashSet0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double1 = evaluation0.m_SumClass;
      BallTree ballTree0 = new BallTree();
      evaluation0.numInstances();
      evaluation0.numFalsePositives((-738));
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel((Classifier) stacking0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.Stacking:
         // 
         // -M <scheme specification>
         // \tFull name of meta classifier, followed by options.
         // \t(default: \"weka.classifiers.rules.Zero\")
         // -X <number of folds>
         // \tSets the number of cross-validation folds.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -num-slots <num>
         // \tNumber of execution slots.
         // \t(default 1 - i.e. no parallelism)
         // -B <classifier specification>
         // \tFull class name of classifier to include, followed
         // \tby scheme options. May be specified multiple times.
         // \t(default: \"weka.classifiers.rules.ZeroR\")
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.getCapabilities();
      testInstances0.generate("z}a>GF");
      naiveBayesMultinomialUpdateable0.setOptions(testInstances0.DEFAULT_WORDS);
      try { 
        Evaluation.evaluateModel(" ", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name  .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.1354993326809195
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MultiScheme multiScheme0 = new MultiScheme();
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      testInstances0.setNoClass(true);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      double double0 = evaluation0.weightedFalsePositiveRate();
      double double1 = evaluation0.m_TotalCost;
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.6588611674269642
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-399.513197);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      instances0.add((Instance) binarySparseInstance0);
      evaluation0.falsePositiveRate(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8466435205545344
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2958.5106899677;
      doubleArray0[1] = 2360.5212767240273;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.964;
      doubleArray0[5] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance(0.964, doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) inputMappedClassifier0, (Instance) sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.7489754331659837
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation0.toMatrixString("");
      evaluation0.SFMeanPriorEntropy();
      evaluation0.kappa();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      double double0 = evaluation0.m_MissingClass;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate2);
      predicate3.or(predicate4);
      predicate3.and(predicate1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numTruePositives(6);
      evaluation1.truePositiveRate(1);
      evaluation0.numTrueNegatives(2);
      evaluation0.falseNegativeRate(2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) gaussianProcesses0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 2458);
      CostMatrix costMatrix0 = new CostMatrix(2458);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.27015303711032
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MockRandom mockRandom0 = new MockRandom();
      RandomForest randomForest0 = new RandomForest();
      testInstances0.generate("}D.OzXZEU");
      randomForest0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      evaluation0.unweightedMicroFmeasure();
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.192665112384125
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation0.toMatrixString("");
      evaluation0.SFMeanPriorEntropy();
      evaluation0.kappa();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      LWL lWL0 = new LWL();
      double double0 = evaluation0.m_MissingClass;
      evaluation0.confusionMatrix();
      double double1 = evaluation0.m_TotalSizeOfRegions;
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.3015574568421027
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[4];
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-10.0), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      double double0 = evaluation0.m_SumSqrErr;
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation2.weightedTrueNegativeRate();
      double double2 = evaluation2.rootMeanSquaredError();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
      evaluation0.getDiscardPredictions();
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5254553900338617
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CoverTree coverTree0 = new CoverTree();
      double double0 = evaluation0.m_SumErr;
      evaluation0.setPriors(instances0);
      CoverTree coverTree1 = new CoverTree();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalseNegativeRate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation1.m_TotalCoverage = 1.7976931348623157E308;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1.7976931348623157E308;
      evaluation1.equals(evaluation0);
      SparseInstance sparseInstance0 = new SparseInstance(2360.5212767240273, doubleArray0);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation1.m_PriorEstimator;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForPredictor(2.0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7022227534918573
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1.0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      evaluation0.falsePositiveRate((-2));
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      MultiScheme multiScheme0 = new MultiScheme();
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom(1958L);
      KStar kStar0 = new KStar();
      double double0 = evaluation0.correct();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double1 = evaluation0.trueNegativeRate(1286);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.4486869174985209
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      CoverTree coverTree0 = new CoverTree();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0E75;
      doubleArray0[1] = 1.0E75;
      MockRandom mockRandom0 = new MockRandom((-1L));
      instances0.resampleWithWeights((Random) mockRandom0);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-2.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.885536637367016
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("g");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getWords();
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      evaluation0.toMatrixString("@data");
      evaluation0.kappa();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-0.9189385332046727);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2951.339;
      doubleArray0[4] = (-0.9189385332046727);
      doubleArray0[5] = (-0.9189385332046727);
      doubleArray0[6] = (-0.9189385332046727);
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 1.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-737.686), doubleArray0);
      LWL lWL0 = new LWL();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) lWL0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      predicate3.or(predicate2);
      instances0.removeIf(predicate0);
      evaluation0.weightedFalsePositiveRate();
      double double0 = evaluation0.weightedAreaUnderPRC();
      evaluation0.numTrueNegatives(377);
      double double1 = evaluation0.weightedPrecision();
      assertEquals(double1, double0, 0.01);
      
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      try { 
        evaluation0.evaluateModelOnce(1901.3591, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1901
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.0217997374003334
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.05037721405903
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka.clusterers.HierarchicalClusterer");
      Evaluation evaluation1 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@data";
      stringArray0[2] = " ";
      stringArray0[3] = "getRevision";
      stringArray0[4] = ".bsi";
      stringArray0[5] = "ijner";
      stringArray0[6] = "@data";
      textDirectoryLoader0.setOptions(stringArray0);
      textDirectoryLoader0.getDataSet();
      evaluation1.useNoPriors();
      double double0 = evaluation1.weightedMatthewsCorrelation();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      boolean boolean0 = evaluation1.m_NoPriors;
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      double double1 = evaluation1.weightedFalsePositiveRate();
      assertEquals(double1, double0, 0.01);
      
      evaluation1.trueNegativeRate(400);
      evaluation0.weightedFalseNegativeRate();
      double double2 = evaluation0.falsePositiveRate(400);
      assertEquals(0.0, double2, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5019550489079336
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MockRandom mockRandom0 = new MockRandom();
      RandomForest randomForest0 = new RandomForest();
      testInstances0.generate("}D.OzXZEU");
      Capabilities capabilities0 = randomForest0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      RandomForest randomForest1 = new RandomForest();
      randomForest1.enumerateMeasures();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNoClass(false);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumSchemeEntropy;
      double double1 = evaluation0.trueNegativeRate(145);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.0146512553840488
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      RandomForest randomForest0 = new RandomForest();
      randomForest0.getCapabilities();
      testInstances0.generate("}D.OzXZEU");
      Capabilities capabilities0 = randomForest0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      RandomForest randomForest1 = new RandomForest();
      randomForest1.enumerateMeasures();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.unweightedMacroFmeasure();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.477543127504883
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 854.922923;
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) evaluation0;
      objectArray0[2] = (Object) 854.922923;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) multiScheme0;
      objectArray0[5] = (Object) multiScheme0;
      evaluation0.evaluateModel((Classifier) multiScheme0, instances0, objectArray0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      evaluation0.m_SumKBInfo = 1035.9314561635;
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".arff";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@data";
      stringArray0[3] = ".arff";
      stringArray0[4] = ".bsi";
      stringArray0[5] = ".bsi";
      naiveBayesMultinomialUpdateable0.setOptions(stringArray0);
      evaluation0.equals(naiveBayesMultinomialUpdateable0);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = evaluation0.KBInformation();
      assertEquals(1035.9314561635, double1, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CoverTree coverTree0 = new CoverTree();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.842345486040718
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka.clusterers.HierarchicalClusterer");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-37);
      byteArray0[0] = (byte)124;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)73;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte) (-21);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double double0 = evaluation0.numFalsePositives((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      MultiScheme multiScheme0 = new MultiScheme();
      inputMappedClassifier0.setIgnoreCaseForNames(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      inputMappedClassifier0.setModelPath("   */\n");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) inputMappedClassifier0, instances0, objectArray0);
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.5112610695451294
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      Version.MAJOR = 1109;
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      doubleArray0[2] = (-1.0);
      doubleArray0[0] = 854.922923;
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) evaluation0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = objectArray0[1];
      objectArray0[4] = (Object) multiScheme0;
      objectArray0[5] = (Object) multiScheme0;
      double double1 = evaluation0.m_MaxTarget;
      double double2 = evaluation0.weightedMatthewsCorrelation();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      boolean boolean0 = evaluation0.m_NoPriors;
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      double double3 = evaluation0.weightedFalsePositiveRate();
      instances0.delete();
      double double4 = evaluation0.weightedAreaUnderROC();
      assertEquals(double4, double3, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double5 = evaluation1.weightedTrueNegativeRate();
      assertEquals(double5, double2, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.6714599763614508
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka.clusterers.HierarchicalClusterer");
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(81.691, doubleArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      OneR oneR0 = new OneR();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "Root relative squared error        ";
      stringArray0[2] = "$*g~:";
      stringArray0[3] = "$*g~:";
      stringArray0[4] = "Root relative squared error        ";
      stringArray0[5] = "@data";
      stringArray0[6] = "@relation";
      try { 
        Evaluation.evaluateModel((Classifier) oneR0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.OneR:
         // 
         // -B <minimum bucket size>
         // \tThe minimum number of objects in a bucket (default: 6).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.955450063904944
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CoverTree coverTree0 = new CoverTree();
      double double0 = evaluation0.m_SumErr;
      evaluation0.setPriors(instances0);
      CoverTree coverTree1 = new CoverTree();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalseNegativeRate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      boolean boolean0 = evaluation1.equals(evaluation0);
      assertTrue(boolean0);
      
      SparseInstance sparseInstance0 = new SparseInstance(2360.5212767240273, doubleArray0);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) evaluation1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate2.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      predicate0.or(predicate3);
      instances0.removeIf(predicate1);
      double double1 = evaluation1.weightedFalsePositiveRate();
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.numTrueNegatives((-1114383320));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.5437918503437977
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("@relation");
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      Evaluation evaluation2 = new Evaluation(instances0);
      Integer integer0 = new Integer(458);
      evaluation1.equals(integer0);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation1.m_PriorEstimator;
      evaluation2.weightedFalsePositiveRate();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      evaluation2.weightedFalsePositiveRate();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      evaluation2.numTrueNegatives(16);
      evaluation2.weightedAreaUnderROC();
      evaluation0.numTruePositives(480);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.3377277902783415
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2191.7497;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(583.10972375149, doubleArray0);
      evaluation0.KBRelativeInformation();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      SparseInstance sparseInstance0 = new SparseInstance(2334.43602538129, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation1.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.2692404415462466
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      Double double0 = new Double((-1978.2262319325));
      evaluation0.rootMeanPriorSquaredError();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1963.02;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-1978.2262319325);
      doubleArray0[4] = 1963.02;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1963.02;
      doubleArray0[7] = 1963.02;
      SparseInstance sparseInstance0 = new SparseInstance(1963.02, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.0E75;
      doubleArray0[1] = 1.0E75;
      SparseInstance sparseInstance0 = new SparseInstance(1.0E75, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.0791449651465737
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 854.922923;
      doubleArray0[2] = 0.0;
      evaluation0.setPriors(instances0);
      evaluation0.m_Header = instances0;
      evaluation0.fMeasure(67);
      evaluation0.matthewsCorrelationCoefficient(67);
      evaluation0.toSummaryString("graph", true);
      evaluation0.numTrueNegatives(1544);
      evaluation0.priorEntropy();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.9809787598716668
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.equals((Object) null);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation1.m_PriorEstimator;
      evaluation0.weightedFalsePositiveRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedFalsePositiveRate();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.7221489918454203
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      double double0 = evaluation0.m_SumSqrErr;
      Evaluation evaluation1 = new Evaluation(instances0);
      ConverterUtils.DataSource.read((InputStream) null);
      try { 
        evaluation1.evaluateModel((Classifier) inputMappedClassifier0, (Instances) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CoverTree coverTree0 = new CoverTree();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":b'F0&vdq%d";
      Evaluation.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.6714599763614508
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      inputMappedClassifier0.setEnvironment((Environment) null);
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      MockRandom mockRandom0 = new MockRandom();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(100);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.evaluationForSingleInstance((Classifier) inputMappedClassifier0, (Instance) binarySparseInstance0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.0E75;
      doubleArray0[1] = 1.0E75;
      SparseInstance sparseInstance0 = new SparseInstance(1.0E75, doubleArray0);
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      MockRandom mockRandom0 = new MockRandom();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(100);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      SMOreg sMOreg0 = new SMOreg();
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) sMOreg0, (Instance) denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.errorRate();
      MockRandom mockRandom1 = new MockRandom(1495L);
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      AllFilter allFilter2 = new AllFilter();
      AllFilter allFilter3 = new AllFilter();
      AllFilter allFilter4 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter2.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.4486869174985209
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      try { 
        evaluation0.updateStatsForPredictor((-0.4375), (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 854.922923;
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) multiScheme0;
      Stack<SMOreg> stack0 = new Stack<SMOreg>();
      instances0.containsAll(stack0);
      multiScheme0.getOptions();
      objectArray0[1] = (Object) evaluation0;
      objectArray0[2] = (Object) 854.922923;
      evaluation0.m_DiscardPredictions = true;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) multiScheme0;
      objectArray0[5] = (Object) multiScheme0;
      try { 
        evaluation0.evaluateModel((Classifier) multiScheme0, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.classifiers.meta.MultiScheme cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.039370090311158
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("g");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getWords();
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      evaluation0.toMatrixString("@data");
      evaluation0.kappa();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-0.9189385332046727);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2951.339;
      doubleArray0[4] = (-0.9189385332046727);
      doubleArray0[5] = (-0.9189385332046727);
      doubleArray0[6] = (-0.9189385332046727);
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 1.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-737.686), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.updateStatsForClassifier(doubleArray0, binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka.clusterers.HierarchicalClusterer");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)23;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (byte)23;
      doubleArray0[2] = (double) (byte)39;
      doubleArray0[3] = (double) (byte)39;
      doubleArray0[4] = (-399.513197);
      doubleArray0[5] = (double) (byte)23;
      doubleArray0[6] = (double) (byte)39;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.3109290309357102
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instance instance0 = null;
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.k_MarginResolution = (-2);
      try { 
        evaluation0.evaluateModelOnce(0.95, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      String string0 = "{z)dJ8yz\\u#(";
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, string0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.3526418957132877
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) evaluation0;
      Evaluation evaluation1 = new Evaluation(instances0);
      Object object0 = new Object();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.lnFactorial(5);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable1.setOptions((String[]) null);
      HTML hTML0 = new HTML();
      evaluation1.equals(hTML0);
      evaluation1.setNumericPriorsFromBuffer();
      double double0 = evaluation1.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation2.KBInformation();
      assertEquals(0.0, evaluation2.SFSchemeEntropy(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertTrue(evaluation2.equals((Object)evaluation0));
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.8055189431338858
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CoverTree coverTree0 = new CoverTree();
      double double0 = evaluation0.m_SumErr;
      evaluation0.setPriors(instances0);
      CoverTree coverTree1 = new CoverTree();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalseNegativeRate();
      boolean boolean0 = evaluation1.m_CoverageStatisticsAvailable;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      evaluation1.m_TotalCoverage = 1.7976931348623157E308;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1.7976931348623157E308;
      evaluation1.equals(evaluation0);
      SparseInstance sparseInstance0 = new SparseInstance(2360.5212767240273, doubleArray0);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation1.m_PriorEstimator;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation1.updateStatsForConditionalDensityEstimator(gaussianProcesses0, sparseInstance0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.281614436899083
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.setDiscardPredictions(true);
      DenseInstance denseInstance0 = new DenseInstance(17);
      try { 
        evaluation0.evaluateModelOnce((Classifier) inputMappedClassifier0, (Instance) denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CoverTree coverTree0 = new CoverTree();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+5";
      naiveBayesMultinomialUpdateable0.setOptions(stringArray0);
      String string0 = Evaluation.makeOptionString(inputMappedClassifier0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.402681682620755
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.stratify(33);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka.clusterers.HierarchicalClusterer");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-37);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader1 = new PipedReader(pipedWriter0);
      evaluation0.trueNegativeRate(3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " seconds");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falseNegativeRate(115);
      evaluation1.numFalseNegatives(350);
      evaluation0.toSummaryString("@relation", false);
      org.evosuite.runtime.Random.setNextRandom((byte)39);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.035754728630011
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("W%#BtwIKE");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getWords();
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      AbstractClassifier.runClassifier(costSensitiveClassifier1, testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.m_TotalCoverage;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 401.53096836901;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2.0);
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = 401.53096836901;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (-0.9189385332046727);
      doubleArray1[5] = 896.0;
      doubleArray1[6] = (-0.9189385332046727);
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, (-2.0));
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.1100843864598464
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      CoverTree coverTree0 = new CoverTree();
      evaluation0.setPriors(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-10.0), doubleArray0);
      double[] doubleArray1 = new double[0];
      evaluation0.updateNumericScores(doubleArray1, doubleArray0, 1213.453306435155);
      evaluation0.pctUnclassified();
      instances0.add((Instance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      
      MultiScheme multiScheme0 = new MultiScheme();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) evoSuiteFile0;
      objectArray0[3] = (Object) multiScheme0;
      objectArray0[4] = (Object) inputMappedClassifier0;
      objectArray0[5] = (Object) evaluation0;
      objectArray0[6] = (Object) evaluation0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.evaluateModel((Classifier) inputMappedClassifier0, instances0, objectArray0);
      evaluation0.areaUnderROC(114);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.148815922340797
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CoverTree coverTree0 = new CoverTree();
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.setPriors(instances0);
      evaluation0.getDiscardPredictions();
      PriorityQueue<SGDText> priorityQueue0 = new PriorityQueue<SGDText>();
      instances0.removeAll(priorityQueue0);
      evaluation0.setDiscardPredictions(false);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedTrueNegativeRate();
      evaluation1.setDiscardPredictions(false);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      // Undeclared exception!
      try { 
        textDirectoryLoader0.getNextInstance(instances0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0E75;
      doubleArray0[1] = 1.0E75;
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderROC((-2060));
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.3181226458588844
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.6031192709911521
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getWords();
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      assertEquals(0.0, evaluation2.SFPriorEntropy(), 0.01);
      
      evaluation2.m_NoPriors = true;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (-0.9189385332046727);
      AllFilter allFilter0 = new AllFilter();
      double double0 = evaluation1.avgCost();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 854.922923;
      MultiScheme multiScheme0 = new MultiScheme();
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      Object object1 = new Object();
      MockRandom mockRandom1 = new MockRandom();
      int int0 = 27;
      try { 
        evaluation0.crossValidateModel("@data", instances0, 27, (String[]) null, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @data
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.9799151714181009
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "@data";
      stringArray0[3] = "$*g~:";
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0E75;
      doubleArray0[1] = 1.0E75;
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.numFalsePositives(70);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.486476853275102
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MockRandom mockRandom0 = new MockRandom();
      RandomForest randomForest0 = new RandomForest();
      testInstances0.generate("}D.OzXZEU");
      Capabilities capabilities0 = randomForest0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      RandomForest randomForest1 = new RandomForest();
      randomForest1.enumerateMeasures();
      TestInstances testInstances1 = new TestInstances();
      RandomForest randomForest2 = new RandomForest();
      randomForest2.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      RandomForest randomForest3 = new RandomForest();
      randomForest2.enumerateMeasures();
      TestInstances testInstances2 = new TestInstances();
      TestInstances testInstances3 = new TestInstances();
      testInstances0.setNoClass(false);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_NumFolds = (-2);
      double double0 = evaluation0.m_SumSchemeEntropy;
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1018));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1018
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.855822103188824
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      evaluation0.toSummaryString("Cannot print complexity statistics ('-k') without training file ('-t')!", true);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      RandomForest randomForest0 = new RandomForest();
      randomForest0.enumerateMeasures();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNoClass(false);
      try { 
        CostMatrix.parseMatlab("bmCjk=a");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.3450363141108999
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MockRandom mockRandom0 = new MockRandom();
      RandomForest randomForest0 = new RandomForest();
      testInstances0.generate("}D.OzXZEU");
      Capabilities capabilities0 = randomForest0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      RandomForest randomForest1 = new RandomForest();
      randomForest1.enumerateMeasures();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNoClass(false);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumSchemeEntropy;
      double double1 = evaluation0.unclassified();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(9);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(13);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 78);
      Instances instances1 = instances0.resampleWithWeights((Random) mockRandom0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = 854.922923;
      MultiScheme multiScheme0 = new MultiScheme();
      MultiScheme multiScheme1 = new MultiScheme();
      Object object0 = new Object();
      String string0 = Evaluation.makeOptionString(multiScheme1, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "x'BEP";
      String string0 = "RS-igPN}7CID/FdxV";
      stringArray0[1] = "RS-igPN}7CID/FdxV";
      stringArray0[2] = "Root relative squared error        ";
      stringArray0[3] = "$*g~:";
      try { 
        Evaluation.evaluateModel((Classifier) multiClassClassifierUpdateable0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.MultiClassClassifierUpdateable:
         // 
         // -M <num>
         // \tSets the method to use. Valid values are 0 (1-against-all),
         // \t1 (random codes), 2 (exhaustive code), and 3 (1-against-1). (default 0)
         // 
         // -R <num>
         // \tSets the multiplier when using random codes. (default 2.0)
         // -P
         // \tUse pairwise coupling (only has an effect for 1-against1)
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.functions.Logistic)
         // 
         // Options specific to classifier weka.classifiers.functions.Logistic:
         // 
         // -D
         // \tTurn on debugging output.
         // -C
         // \tUse conjugate gradient descent rather than BFGS updates.
         // -R <ridge>
         // \tSet the ridge in the log-likelihood.
         // -M <number>
         // \tSet the maximum number of iterations (default -1, until convergence).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      String[] stringArray0 = new String[4];
      String string0 = "RS-igPN}7CID/FdxV";
      stringArray0[1] = "RS-igPN}7CID/FdxV";
      stringArray0[2] = "Root relative squared error        ";
      stringArray0[3] = "$*g~:";
      try { 
        Evaluation.evaluateModel((Classifier) multiClassClassifierUpdateable0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2376.4440991);
      doubleArray0[1] = (-2376.4440991);
      doubleArray0[2] = (-2376.4440991);
      doubleArray0[3] = (-2376.4440991);
      doubleArray0[4] = (-2376.4440991);
      SparseInstance sparseInstance0 = new SparseInstance((-2376.4440991), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.dataset();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kH 2yqtt9E|d#eK");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The seed used for randomizing the data.");
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)80;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "setNumFolds";
      stringArray0[1] = "m=4s^'_f8V!:&";
      stringArray0[2] = "o`4FISHZ*QLH'q!C";
      stringArray0[3] = "metaClassifierTipText";
      stringArray0[4] = "weka.packageManager.loadPackages";
      stringArray0[5] = "KI_>6H9nCPdo3jU#PR";
      stringArray0[6] = "Class implementing the brute force search algorithm for nearest neighbour search.";
      stringArray0[7] = "F:[Fe";
      zeroR0.setOptions(stringArray0);
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "646 555-4567");
      assertNotNull(string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MultiScheme multiScheme0 = new MultiScheme();
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      UnivariateKernelEstimator univariateKernelEstimator1 = new UnivariateKernelEstimator();
      univariateKernelEstimator0.updateWidth();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      String string0 = "Vq8sADD.";
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1673);
      doubleArray0[1] = (-0.9189385332046727);
      doubleArray0[2] = 1783.0;
      doubleArray0[3] = (-0.9189385332046727);
      doubleArray0[4] = (-0.9189385332046727);
      doubleArray0[5] = (-0.9189385332046727);
      doubleArray0[6] = (-0.9189385332046727);
      doubleArray0[7] = (-0.9189385332046727);
      doubleArray0[8] = (double) (-1673);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-1673), (-0.9189385332046727));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1673
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Evaluation.handleCostOption("", 22);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 84;
      try { 
        Evaluation.handleCostOption("kH 2yqtt9E|d#eK", 84);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
