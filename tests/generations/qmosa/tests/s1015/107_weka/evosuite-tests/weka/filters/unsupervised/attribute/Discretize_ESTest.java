/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 09:21:14 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5738972096346933
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("(]VET7+>NmiR", arrayList0, 2908);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockRandom mockRandom0 = new MockRandom();
      instances0.resampleWithWeights((Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      MockRandom mockRandom3 = new MockRandom();
      mockRandom2.nextInt();
      MockRandom mockRandom4 = new MockRandom();
      mockRandom4.longs((long) 0);
      mockRandom4.nextDouble();
      mockRandom2.longs();
      Attribute attribute0 = new Attribute("(]VET7+>NmiR", "y");
      mockRandom4.longs();
      mockRandom4.nextLong();
      arrayList0.add(attribute0);
      MockRandom mockRandom5 = new MockRandom();
      mockRandom4.nextInt((-1));
      mockRandom0.longs();
      MockRandom mockRandom6 = new MockRandom();
      mockRandom3.nextLong();
      MockRandom mockRandom7 = new MockRandom();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(true);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      mockRandom2.doubles();
      System.setCurrentTimeMillis(0L);
      discretize0.findNumBins(0);
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9376745528287675
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)69;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Instances instances0 = new Instances("packageList.txt", arrayList0, 77);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Attribute attribute0 = new Attribute("packageList.txt", 298);
      Attribute attribute1 = new Attribute("@attribute");
      Attribute.typeToString(attribute0);
      attribute1.equals("real");
      attribute1.addRelation(instances0);
      Object object0 = attribute1.copy();
      attribute0.addStringValue(attribute1, 0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, false);
      arrayList0.add(attribute0);
      arrayList0.add((Attribute) object0);
      Attribute attribute2 = attribute1.copy("relational");
      attribute1.copy();
      attribute2.indexOfValue("@attribute");
      Attribute attribute3 = new Attribute("real", instances0, (-1));
      Attribute attribute4 = new Attribute("@attribute", 1);
      Attribute.typeToString(2);
      attribute2.isInRange(1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      AllFilter allFilter0 = new AllFilter();
      Filter.wekaStaticWrapper(allFilter0, "date", instances0, instances0);
      discretize0.setOutputFormat();
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0463689531388662
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("packageList.txt", arrayList0, 77);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Attribute attribute0 = new Attribute("packageList.txt", 294);
      Attribute attribute1 = new Attribute("@attribute");
      Attribute.typeToString(attribute0);
      attribute1.equals("real");
      attribute1.addRelation(instances0);
      Attribute attribute2 = (Attribute)attribute1.copy();
      attribute0.addStringValue(attribute1, 0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      arrayList0.add(attribute0);
      arrayList0.add(attribute2);
      Attribute attribute3 = attribute1.copy("relational");
      attribute1.copy();
      attribute3.indexOfValue("@attribute");
      Attribute attribute4 = new Attribute("real", instances0, (-1));
      Attribute attribute5 = new Attribute("]", 1);
      Attribute.typeToString(2);
      attribute3.isInRange(1);
      MockRandom mockRandom0 = new MockRandom();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      AllFilter allFilter0 = new AllFilter();
      Filter.wekaStaticWrapper(allFilter0, "date", instances0, instances0);
      discretize0.setOutputFormat();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(34);
      binarySparseInstance0.setValue(attribute2, (double) 77);
      discretize0.input(binarySparseInstance0);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3957689962741138
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("package;ist.t4t", arrayList0, 75);
      Attribute attribute0 = new Attribute("package;ist.t4t", 294);
      Attribute attribute1 = attribute0.copy("@end");
      attribute1.equals("real");
      attribute1.addRelation(instances0);
      Object object0 = attribute1.copy();
      attribute0.addStringValue(attribute1, 0);
      arrayList0.add(attribute0);
      arrayList0.add((Attribute) object0);
      Attribute attribute2 = attribute1.copy("relational");
      Attribute attribute3 = new Attribute("real", instances0, (-1));
      Attribute attribute4 = new Attribute("Tw", 1);
      Attribute.typeToString(attribute1);
      attribute4.addStringValue(attribute2, (-195225787));
      Attribute.typeToString(2);
      arrayList0.ensureCapacity(1);
      attribute2.isInRange(1);
      attribute3.addStringValue(attribute1, 1);
      Discretize discretize0 = new Discretize();
      attribute0.setStringValue("real");
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      System.setCurrentTimeMillis(2884L);
      discretize0.findNumBins(1);
      Discretize discretize1 = new Discretize("integer");
      // Undeclared exception!
      try { 
        discretize1.calculateCutPointsByEqualWidthBinning(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.59087785859761
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("package;ist.t4t", arrayList0, 75);
      Attribute attribute0 = new Attribute("package;ist.t4t", 294);
      Attribute attribute1 = attribute0.copy("@end");
      attribute1.equals("real");
      attribute1.addRelation(instances0);
      Object object0 = attribute1.copy();
      attribute0.addStringValue(attribute1, 0);
      arrayList0.add(attribute0);
      arrayList0.add((Attribute) object0);
      Attribute attribute2 = attribute1.copy("relational");
      Attribute attribute3 = new Attribute("real", instances0, (-1));
      Attribute attribute4 = new Attribute("]", 1);
      Attribute.typeToString(attribute1);
      Attribute.typeToString(2);
      arrayList0.ensureCapacity(1);
      attribute2.isInRange(1);
      attribute3.addStringValue(attribute1, 1);
      Discretize discretize0 = new Discretize();
      attribute0.setStringValue("real");
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) 2;
      discretize0.calculateCutPointsByEqualFrequencyBinning(1);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3732331562637627
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_IgnoreClass = true;
      discretize0.m_DesiredWeightOfInstancesPerInterval = 2.0;
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      int int0 = (-1489);
      discretize0.getBinRangesString((-1489));
      discretize0.useEqualFrequencyTipText();
      String[] stringArray0 = discretize0.getOptions();
      Filter.runFilter(discretize0, stringArray0);
      discretize0.listOptions();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.m_DefaultCols = null;
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5673137131368806
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("packageList.txt", arrayList0, 77);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Attribute attribute0 = new Attribute("packageList.txt", 294);
      Attribute attribute1 = attribute0.copy("@end");
      attribute1.equals("real");
      attribute1.addRelation(instances0);
      Object object0 = attribute1.copy();
      attribute0.addStringValue(attribute1, 0);
      arrayList0.add(attribute0);
      arrayList0.add((Attribute) object0);
      Attribute attribute2 = attribute1.copy("relational");
      attribute2.indexOfValue("@attribute");
      Attribute attribute3 = new Attribute("real", instances0, (-1));
      Attribute attribute4 = new Attribute("]", 1);
      Attribute.typeToString(2);
      attribute2.toString();
      attribute2.isInRange(1);
      MockRandom mockRandom0 = new MockRandom();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      AllFilter allFilter0 = new AllFilter();
      Filter.wekaStaticWrapper(allFilter0, "date", instances0, instances0);
      SystemInUtil.addInputLine("integer");
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) 0;
      discretize0.calculateCutPointsByEqualFrequencyBinning(1);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2975049169006727
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("(]VET7+>NmiR", arrayList0, 2908);
      MockRandom mockRandom0 = new MockRandom();
      instances0.resampleWithWeights((Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      MockRandom mockRandom3 = new MockRandom();
      mockRandom2.nextInt();
      MockRandom mockRandom4 = new MockRandom();
      mockRandom4.longs((long) 0);
      mockRandom4.nextDouble();
      mockRandom2.longs();
      mockRandom4.doubles();
      Attribute attribute0 = new Attribute("(]VET7+>NmiR", "y");
      mockRandom4.longs();
      mockRandom4.nextLong();
      arrayList0.add(attribute0);
      MockRandom mockRandom5 = new MockRandom();
      mockRandom4.nextInt((-1));
      mockRandom0.longs();
      MockRandom mockRandom6 = new MockRandom();
      mockRandom3.nextLong();
      MockRandom mockRandom7 = new MockRandom();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      mockRandom2.doubles();
      System.setCurrentTimeMillis(0L);
      discretize0.findNumBins(0);
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3925483843578497
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(";dbxg+XRC", arrayList0, 2908);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      MockRandom mockRandom3 = new MockRandom();
      mockRandom2.nextInt();
      MockRandom mockRandom4 = new MockRandom();
      mockRandom4.longs(0L);
      mockRandom4.nextDouble();
      mockRandom2.longs();
      Attribute attribute0 = new Attribute(";dbxg+XRC", "y");
      mockRandom4.nextLong();
      arrayList0.add(attribute0);
      MockRandom mockRandom5 = new MockRandom();
      arrayList0.add(attribute0);
      mockRandom4.nextInt((-1));
      MockRandom mockRandom6 = new MockRandom();
      mockRandom0.longs();
      MockRandom mockRandom7 = new MockRandom();
      MockRandom mockRandom8 = new MockRandom((-1230L));
      SystemInUtil.addInputLine("relational");
      mockRandom0.nextInt();
      MockRandom mockRandom9 = new MockRandom();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.useEqualFrequencyTipText();
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: ';dbxg+XRC' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5673137131368806
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("package;ist.t4t", arrayList0, 75);
      Attribute attribute0 = new Attribute("package;ist.t4t", 294);
      Attribute attribute1 = attribute0.copy("@end");
      attribute1.equals("real");
      attribute1.addRelation(instances0);
      Attribute.typeToString(attribute1);
      Object object0 = attribute1.copy();
      attribute0.addStringValue(attribute1, 0);
      arrayList0.add(attribute0);
      arrayList0.add((Attribute) object0);
      Attribute attribute2 = attribute1.copy("relational");
      Attribute attribute3 = new Attribute("real", instances0, (-1));
      Attribute attribute4 = new Attribute("Tw", 1);
      Attribute.typeToString(attribute1);
      attribute4.addStringValue(attribute2, (-195225787));
      Attribute.typeToString(2);
      arrayList0.ensureCapacity(1);
      attribute2.isInRange(1);
      attribute3.addStringValue(attribute1, 1);
      Discretize discretize0 = new Discretize();
      attribute0.setStringValue("real");
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      discretize0.calculateCutPoints();
      AllFilter allFilter0 = new AllFilter();
      Filter.wekaStaticWrapper(allFilter0, "date", instances0, instances0);
      discretize0.calculateCutPointsByEqualFrequencyBinning(1);
      String string0 = discretize0.getBinRangesString(1);
      assertEquals("All", string0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.428715181307695
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("0qcIekez;;Dq&x?5}|", arrayList0, 2908);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      MockRandom mockRandom3 = new MockRandom();
      mockRandom2.longs();
      mockRandom2.nextInt();
      MockRandom mockRandom4 = new MockRandom();
      mockRandom4.nextDouble();
      mockRandom2.longs();
      Attribute attribute0 = new Attribute("0qcIekez;;Dq&x?5}|", "hy");
      mockRandom4.nextLong();
      arrayList0.add(attribute0);
      mockRandom0.nextInt(12);
      MockRandom mockRandom5 = new MockRandom();
      mockRandom0.ints();
      mockRandom4.nextInt((-1));
      MockRandom mockRandom6 = new MockRandom();
      mockRandom0.longs();
      MockRandom mockRandom7 = new MockRandom();
      arrayList0.add(attribute0);
      MockRandom mockRandom8 = new MockRandom((-1230L));
      SystemInUtil.addInputLine("pP7");
      mockRandom0.nextInt();
      mockRandom8.nextLong();
      MockRandom mockRandom9 = new MockRandom();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      System.setCurrentTimeMillis(2);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '0qcIekez;;Dq&x?5}|' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.097766814891269
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("11,-2844,-1157,-1025,1861,1,-3580,80", arrayList0, 75);
      Attribute attribute0 = new Attribute("11,-2844,-1157,-1025,1861,1,-3580,80", 75);
      Attribute attribute1 = attribute0.copy("@end");
      attribute1.equals("real");
      Object object0 = attribute1.copy();
      attribute0.addStringValue(attribute1, 0);
      arrayList0.add(attribute0);
      arrayList0.add((Attribute) object0);
      Attribute attribute2 = new Attribute("real", instances0);
      Attribute attribute3 = new Attribute("real", instances0, 1);
      Attribute attribute4 = new Attribute("]", 1);
      Attribute.typeToString(attribute1);
      Attribute.typeToString(2);
      arrayList0.ensureCapacity(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      attribute3.addStringValue(attribute1, 1);
      Discretize discretize0 = new Discretize();
      attribute3.setStringValue("numeric");
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      AllFilter allFilter0 = new AllFilter();
      discretize0.calculateCutPoints();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "integer";
      stringArray0[1] = "numeric";
      discretize0.setOptions(stringArray0);
      discretize0.setMakeBinary(true);
      discretize0.getMakeBinary();
      boolean boolean0 = discretize0.m_UseBinNumbers;
      discretize0.findNumBinsTipText();
      int int0 = discretize0.getBins();
      assertTrue(discretize0.getMakeBinary());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseBinNumbers = true;
      discretize0.getUseBinNumbers();
      discretize0.findNumBinsTipText();
      StringReader stringReader0 = new StringReader("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "z%(P|>)";
      stringArray0[1] = "rKM\"nl-[5S-?Wmp@WKO";
      stringArray0[2] = "au9AEPVeG:";
      stringArray0[3] = "InstancesTest";
      stringArray0[4] = "else if (format.attribute(i).isNominal())";
      stringArray0[5] = "Q[i]S`-,a_";
      stringArray0[6] = "5D";
      stringArray0[7] = "-B";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -B option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4459311899497576
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(";<bog+RO", arrayList0, 2908);
      MockRandom mockRandom0 = new MockRandom();
      instances0.resampleWithWeights((Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      MockRandom mockRandom3 = new MockRandom();
      mockRandom2.nextInt();
      MockRandom mockRandom4 = new MockRandom();
      mockRandom4.nextFloat();
      mockRandom4.nextDouble();
      mockRandom2.longs();
      Attribute attribute0 = new Attribute(";<bog+RO", "");
      mockRandom4.nextLong();
      arrayList0.add(attribute0);
      MockRandom mockRandom5 = new MockRandom(0);
      mockRandom4.nextInt((-1));
      MockRandom mockRandom6 = new MockRandom();
      mockRandom0.longs();
      MockRandom mockRandom7 = new MockRandom();
      MockRandom mockRandom8 = new MockRandom((-1230L));
      SystemInUtil.addInputLine("pP7");
      mockRandom0.nextInt();
      mockRandom8.nextLong();
      MockRandom mockRandom9 = new MockRandom();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      System.setCurrentTimeMillis(0);
      Discretize discretize1 = new Discretize("string");
      System.setCurrentTimeMillis(5L);
      discretize0.input((Instance) null);
      System.setCurrentTimeMillis(2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.494243348406938
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("packageList.txt", arrayList0, 77);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Attribute attribute0 = new Attribute("packageList.txt", 294);
      Attribute attribute1 = new Attribute("@attribute");
      Attribute.typeToString(attribute0);
      attribute1.equals("real");
      attribute1.addRelation(instances0);
      Attribute attribute2 = (Attribute)attribute1.copy();
      attribute0.addStringValue(attribute1, 0);
      arrayList0.add(attribute0);
      arrayList0.add(attribute2);
      Attribute attribute3 = attribute1.copy("relational");
      attribute1.copy();
      attribute3.indexOfValue("@attribute");
      Attribute attribute4 = new Attribute("real", instances0, (-1));
      Attribute attribute5 = new Attribute("]", 1);
      Attribute.typeToString(2);
      attribute3.isInRange(1);
      MockRandom mockRandom0 = new MockRandom();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      AllFilter allFilter0 = new AllFilter();
      Filter.wekaStaticWrapper(allFilter0, "date", instances0, instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(34);
      binarySparseInstance0.setValue(attribute2, (double) 77);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8840072277723863
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("v(zA*uN3g4}Y", arrayList0, 2908);
      MockRandom mockRandom0 = new MockRandom();
      instances0.resampleWithWeights((Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      MockRandom mockRandom3 = new MockRandom();
      mockRandom2.nextInt();
      MockRandom mockRandom4 = new MockRandom();
      mockRandom4.longs((long) 0);
      mockRandom4.nextDouble();
      mockRandom2.longs();
      Attribute attribute0 = new Attribute("v(zA*uN3g4}Y", "y");
      mockRandom4.longs();
      mockRandom4.nextLong();
      arrayList0.add(attribute0);
      MockRandom mockRandom5 = new MockRandom();
      mockRandom4.nextInt((-1));
      MockRandom mockRandom6 = new MockRandom();
      mockRandom0.longs();
      MockRandom mockRandom7 = new MockRandom();
      MockRandom mockRandom8 = new MockRandom((-1230L));
      SystemInUtil.addInputLine("relational");
      mockRandom0.nextInt();
      mockRandom8.nextLong();
      MockRandom mockRandom9 = new MockRandom();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.setOutputFormat();
      System.setCurrentTimeMillis(0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-384));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -384
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9166731665848316
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(";dbxg+X;C", arrayList0, 2908);
      MockRandom mockRandom0 = new MockRandom();
      instances0.resampleWithWeights((Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      MockRandom mockRandom3 = new MockRandom();
      mockRandom2.nextInt();
      MockRandom mockRandom4 = new MockRandom();
      mockRandom4.doubles((long) 2908);
      mockRandom4.nextDouble();
      mockRandom2.longs();
      mockRandom0.longs();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute(";dbxg+X;C", "y");
      arrayList0.add(attribute0);
      MockRandom mockRandom5 = new MockRandom();
      mockRandom4.nextInt((-1));
      MockRandom mockRandom6 = new MockRandom();
      mockRandom0.longs();
      MockRandom mockRandom7 = new MockRandom();
      MockRandom mockRandom8 = new MockRandom((-1230L));
      SystemInUtil.addInputLine("relational");
      mockRandom0.nextInt();
      mockRandom8.nextLong();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(";<bog+RO", arrayList0, 2908);
      MockRandom mockRandom0 = new MockRandom();
      instances0.resampleWithWeights((Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      MockRandom mockRandom3 = new MockRandom();
      mockRandom2.nextInt();
      MockRandom mockRandom4 = new MockRandom();
      mockRandom4.nextFloat();
      mockRandom4.nextDouble();
      Attribute attribute0 = new Attribute(";<bog+RO", "");
      mockRandom4.nextLong();
      arrayList0.add(attribute0);
      MockRandom mockRandom5 = new MockRandom(0);
      mockRandom4.nextInt((-1));
      MockRandom mockRandom6 = new MockRandom();
      mockRandom0.longs();
      MockRandom mockRandom7 = new MockRandom();
      MockRandom mockRandom8 = new MockRandom((-1230L));
      SystemInUtil.addInputLine("pP7");
      mockRandom0.nextInt();
      MockRandom mockRandom9 = new MockRandom();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      System.setCurrentTimeMillis(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2908);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4201417618774737
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("11,-2844,-1157,-1025,1861,1,-3580,80", arrayList0, 75);
      Attribute attribute0 = new Attribute("11,-2844,-1157,-1025,1861,1,-3580,80", 75);
      Attribute attribute1 = attribute0.copy("@end");
      attribute1.equals("real");
      Object object0 = attribute1.copy();
      attribute0.addStringValue(attribute1, 0);
      arrayList0.add(attribute0);
      arrayList0.add((Attribute) object0);
      Attribute attribute2 = new Attribute("real", instances0);
      Attribute attribute3 = new Attribute("real", instances0, 1);
      Attribute attribute4 = new Attribute("]", 1);
      attribute4.enumerateValues();
      Attribute.typeToString(attribute1);
      Attribute.typeToString(2);
      arrayList0.ensureCapacity(1);
      attribute2.isInRange(1);
      attribute3.addStringValue(attribute1, 1);
      Discretize discretize0 = new Discretize();
      attribute3.setStringValue("numeric");
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5673137131368806
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("package;ist.t4t", arrayList0, 75);
      Attribute attribute0 = new Attribute("package;ist.t4t", 294);
      Attribute attribute1 = attribute0.copy("@end");
      attribute1.equals("real");
      attribute1.addRelation(instances0);
      Object object0 = attribute1.copy();
      attribute0.addStringValue(attribute1, 0);
      arrayList0.add(attribute0);
      arrayList0.add((Attribute) object0);
      Attribute attribute2 = attribute1.copy("relational");
      Attribute attribute3 = new Attribute("real", instances0, (-1));
      Attribute attribute4 = new Attribute("]", 1);
      Attribute.typeToString(attribute1);
      attribute4.addStringValue(attribute2, (-195225787));
      Attribute.typeToString(2);
      arrayList0.ensureCapacity(1);
      attribute2.isInRange(1);
      attribute3.addStringValue(attribute1, 1);
      Discretize discretize0 = new Discretize();
      attribute0.setStringValue("real");
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      AllFilter allFilter0 = new AllFilter();
      Filter.wekaStaticWrapper(allFilter0, "date", instances0, instances0);
      discretize0.calculateCutPointsByEqualFrequencyBinning(1);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.59087785859761
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("packageList.txt", arrayList0, 77);
      Attribute attribute0 = new Attribute("packageList.txt", 294);
      Attribute attribute1 = attribute0.copy("@end");
      attribute1.equals("real");
      attribute1.addRelation(instances0);
      Object object0 = attribute1.copy();
      attribute0.addStringValue(attribute1, 0);
      arrayList0.add(attribute0);
      arrayList0.add((Attribute) object0);
      Attribute attribute2 = attribute1.copy("relational");
      Attribute attribute3 = new Attribute("real", instances0, (-1));
      Attribute attribute4 = new Attribute("]", 1);
      Attribute.typeToString(2);
      arrayList0.ensureCapacity(1);
      attribute2.isInRange(1);
      attribute3.addStringValue(attribute1, 923);
      Discretize discretize0 = new Discretize();
      attribute0.setStringValue("real");
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      AllFilter allFilter0 = new AllFilter();
      Filter.wekaStaticWrapper(allFilter0, "date", instances0, instances0);
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) 2;
      discretize0.calculateCutPointsByEqualFrequencyBinning(1);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9372463274793663
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("0qcIekez;;Dq&x?5}|", arrayList0, 2908);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      MockRandom mockRandom3 = new MockRandom();
      mockRandom2.longs();
      mockRandom2.nextInt();
      MockRandom mockRandom4 = new MockRandom();
      mockRandom4.nextDouble();
      mockRandom2.longs();
      Attribute attribute0 = new Attribute("0qcIekez;;Dq&x?5}|", "hy");
      mockRandom4.nextLong();
      arrayList0.add(attribute0);
      mockRandom0.nextInt(12);
      MockRandom mockRandom5 = new MockRandom();
      mockRandom0.ints();
      mockRandom4.nextInt((-1));
      MockRandom mockRandom6 = new MockRandom();
      mockRandom0.longs();
      MockRandom mockRandom7 = new MockRandom();
      MockRandom mockRandom8 = new MockRandom((-1230L));
      SystemInUtil.addInputLine("pP7");
      mockRandom0.nextInt();
      mockRandom8.nextLong();
      MockRandom mockRandom9 = new MockRandom();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      System.setCurrentTimeMillis(2);
      discretize0.batchFinished();
      StringReader stringReader0 = new StringReader("@end");
      Instances instances1 = null;
      try {
        instances1 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[@end], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("bdR@L9R^r ?oq^y],g\"=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=bdr@l9r^r ?oq^y],g\"=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5719579500515657
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SystemInUtil.addInputLine("Can't ignore class when changing the number of attributes!");
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Can't ignore class when changing the number of attributes!";
      String string0 = "-B";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[1] = "-B";
      stringArray0[2] = "Can't ignore class when changing the number of attributes!";
      stringArray0[3] = "Can't ignore class when changing the number of attributes!";
      stringArray0[4] = "Can't ignore class when changing the number of attributes!";
      stringArray0[5] = "Can't ignore class when changing the number of attributes!";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Can't ignore class when changing the number of attributes!\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      discretize0.m_FindNumBins = true;
      discretize0.getFindNumBins();
      discretize0.makeBinaryTipText();
      int int0 = (-1908874351);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1908874351));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(";dbxg+XRC", arrayList0, 2908);
      MockRandom mockRandom0 = new MockRandom();
      instances0.resampleWithWeights((Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom(2908);
      MockRandom mockRandom2 = new MockRandom();
      MockRandom mockRandom3 = new MockRandom();
      mockRandom0.nextDouble();
      MockRandom mockRandom4 = new MockRandom();
      mockRandom4.nextDouble();
      mockRandom2.longs();
      Attribute attribute0 = new Attribute(";dbxg+XRC", "");
      arrayList0.add(attribute0);
      MockRandom mockRandom5 = new MockRandom();
      mockRandom4.nextInt((-1));
      MockRandom mockRandom6 = new MockRandom();
      MockRandom mockRandom7 = new MockRandom();
      MockRandom mockRandom8 = new MockRandom((-1230L));
      mockRandom0.nextInt();
      mockRandom8.nextLong();
      MockRandom mockRandom9 = new MockRandom(0L);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      protectedProperties1.propertyNames();
      Attribute attribute1 = new Attribute("D", arrayList2, 1451);
      protectedProperties1.replace((Object) instances0, (Object) mockRandom0, (Object) attribute1);
      Attribute.typeToString(attribute1);
      Discretize discretize0 = new Discretize("date");
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at date
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      
      String string1 = discretize0.getAttributeIndices();
      assertEquals("first-last", string1);
      
      discretize0.setInvertSelection(true);
      boolean boolean0 = discretize0.getInvertSelection();
      assertTrue(boolean0);
      
      String string2 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string2);
      
      String string3 = discretize0.makeBinaryTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", string3);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.4601874721532875
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 1457;
      Filter.makeCopies(discretize0, 1457);
      discretize0.setOutputFormat();
      String[] stringArray0 = new String[11];
      stringArray0[0] = "$H(4GFS=,Y**_XJ";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "$H(4GFS=,Y**_XJ";
      stringArray1[1] = "$H(4GFS=,Y**_XJ";
      discretize0.m_UseEqualFrequency = true;
      stringArray1[2] = "4";
      Discretize.main(stringArray1);
      stringArray0[1] = "MK(&a@$<fXp}oJ5c`z";
      stringArray0[2] = "-mQJfC";
      discretize0.setUseEqualFrequency(true);
      stringArray0[3] = "$H(4GFS,Y**_XJ";
      discretize0.getOptions();
      discretize0.makeBinaryTipText();
      discretize0.getUseEqualFrequency();
      discretize0.getCutPoints(1457);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-335));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("$H(4GFS=,Y**_XJ", arrayList0, 4);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.nextDouble();
      MockRandom mockRandom2 = new MockRandom();
      MockRandom mockRandom3 = new MockRandom();
      mockRandom3.nextInt((-1));
      MockRandom mockRandom4 = new MockRandom();
      mockRandom3.nextLong();
      MockRandom mockRandom5 = new MockRandom((-710L));
      mockRandom5.nextLong();
      instances0.randomize(mockRandom3);
      AllFilter allFilter0 = new AllFilter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dX,l;c.CyEMpT{");
      Discretize discretize0 = new Discretize();
      discretize0.setBins((-237));
      discretize0.setOutputFormat();
      int int0 = discretize0.getBins();
      assertEquals((-237), int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("packageList.txt", arrayList0, 77);
      Properties properties0 = new Properties();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      protectedProperties1.propertyNames();
      Attribute attribute0 = new Attribute("packageList.txt", 294);
      Attribute attribute1 = new Attribute("7>1m", protectedProperties1);
      attribute1.equals("real");
      attribute1.addRelation(instances0);
      attribute1.copy();
      attribute0.addStringValue(attribute1, 0);
      arrayList0.add(attribute0);
      protectedProperties1.propertyNames();
      Collection<Object> collection0 = new ArrayList<Object>();
      Attribute attribute2 = new Attribute("\"+07OUjY?+z=", arrayList1, 1463);
      Attribute attribute3 = new Attribute("numeric", instances0, 2);
      attribute2.addStringValue(attribute1, 0);
      Attribute attribute4 = new Attribute("]", 1);
      attribute4.equalsMsg("]");
      protectedProperties1.replace((Object) attribute4, (Object) instances0, (Object) protectedProperties0);
      Attribute.typeToString(2);
      arrayList1.add("integer");
      protectedProperties0.replace((Object) attribute3, (Object) instances0, (Object) protectedProperties1);
      Attribute.typeToString(attribute2);
      arrayList0.stream();
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      discretize0.getMakeBinary();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7132389994392954
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      discretize0.getOptions();
      discretize0.getCapabilities();
      boolean boolean0 = discretize0.m_UseBinNumbers;
      discretize0.getCapabilities();
      discretize0.m_FindNumBins = false;
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-1994091956));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 5.55555;
      doubleArray1[1] = (-2610.0);
      doubleArray1[2] = (-1984.27);
      doubleArray1[3] = (-2210.0382696);
      doubleArray1[4] = 2956.0;
      doubleArray1[5] = (-87.61);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 2956.0;
      doubleArray2[1] = (-87.61);
      doubleArray2[2] = (-0.1);
      doubleArray2[3] = (-2210.0382696);
      doubleArray2[4] = (-87.61);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-2610.0);
      doubleArray2[7] = (-2210.0382696);
      doubleArray2[8] = (-2610.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-2610.0);
      doubleArray4[1] = (-1984.27);
      doubleArray4[2] = (-2610.0);
      doubleArray4[3] = 2956.0;
      doubleArray4[4] = 1001.3354265773393;
      doubleArray4[5] = (-2610.0);
      doubleArray4[6] = (-1984.27);
      doubleArray4[7] = (-1984.27);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(422);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 422
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.798534689126567
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      discretize0.getOptions();
      discretize0.setOutputFormat();
      discretize0.getBinRangesString(72);
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_W~`d=(O&y>O");
      double[][] doubleArray0 = new double[24][7];
      double[] doubleArray1 = new double[9];
      SystemInUtil.addInputLine("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_W~`d=(O&y>O");
      doubleArray1[5] = 4.5556090304380055;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      doubleArray1[0] = 0.5944598236708205;
      SystemInUtil.addInputLine("_W~`d=(O&y>O");
      doubleArray1[8] = (-2409.1462364750832);
      doubleArray0[4] = doubleArray1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ia-;U-");
      doubleArray0[2] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      doubleArray0[3] = doubleArray1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_W~`d=(O&y>O");
      doubleArray0[5] = doubleArray1;
      doubleArray0[6] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-1);
      int[] intArray0 = new int[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 6);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(3310.0, intArray0, (-1));
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(0, intArray0, 596);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-3);
      doubleArray0[1] = (double) (-3);
      AllFilter allFilter0 = new AllFilter();
      SystemInUtil.addInputLine((String) null);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.3448446247581227
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(false);
      discretize0.setOutputFormat();
      discretize0.m_DiscretizeCols = null;
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      Locale.getISOCountries();
      // Undeclared exception!
      try { 
        discretize0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("DoNotLoadIfFileNot>resent");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Discretize discretize0 = new Discretize("");
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      
      discretize0.getBinRangesString(1216);
      discretize0.getAttributeIndices();
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(boolean0);
      
      Filter.makeCopy(discretize0);
      String string1 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string1);
      
      String string2 = discretize0.binsTipText();
      assertEquals("Number of bins.", string2);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "";
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_W~`d=(O&y>O");
      double[][] doubleArray0 = new double[24][7];
      double[] doubleArray1 = new double[9];
      SystemInUtil.addInputLine("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_W~`d=(O&y>O");
      doubleArray1[5] = 4.5556090304380055;
      doubleArray1[0] = 0.5944598236708205;
      SystemInUtil.addInputLine("_W~`d=(O&y>O");
      doubleArray1[8] = (-2409.1462364750832);
      doubleArray0[4] = doubleArray1;
      discretize0.getUseBinNumbers();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ia-;U-");
      doubleArray0[2] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      doubleArray0[3] = doubleArray1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_W~`d=(O&y>O");
      doubleArray0[5] = doubleArray1;
      doubleArray0[6] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      System.setCurrentTimeMillis(313L);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(2908);
      MockRandom mockRandom2 = new MockRandom();
      MockRandom mockRandom3 = new MockRandom();
      MockRandom mockRandom4 = new MockRandom();
      mockRandom4.nextDouble();
      mockRandom4.nextInt((-1));
      MockRandom mockRandom5 = new MockRandom();
      MockRandom mockRandom6 = new MockRandom();
      MockRandom mockRandom7 = new MockRandom((-1));
      mockRandom7.setSeed(0L);
      mockRandom7.doubles(0.0, (double) 2908);
      mockRandom0.nextInt();
      mockRandom7.nextLong();
      MockRandom mockRandom8 = new MockRandom();
      AllFilter allFilter0 = new AllFilter();
      Properties properties0 = new Properties();
      properties0.remove((Object) mockRandom4);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bdt@L9R^[ ?oq^y],g\"=");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Eg|;#p8t={@");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",$H(4GFS=,Y**_XJ");
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double double0 = 0.0;
      String string0 = "-V";
      Discretize discretize0 = new Discretize("-V");
      discretize0.getFindNumBins();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      String string1 = "w0Ka*}=[";
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis((-679));
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.binsTipText();
      assertEquals("Number of bins.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1111.3113);
      doubleArray1[1] = (-1111.3113);
      doubleArray1[2] = 4447.825155;
      doubleArray1[4] = 4447.825155;
      doubleArray1[5] = (-1713.4725629);
      doubleArray1[6] = 2012.7217548984902;
      doubleArray1[7] = (-1866.201477321859);
      doubleArray1[8] = (-2422.2945310877617);
      doubleArray0[4] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1713.4725629);
      doubleArray2[2] = (-1866.201477321859);
      doubleArray0[1] = doubleArray2;
      AllFilter allFilter0 = new AllFilter();
      DenseInstance denseInstance0 = new DenseInstance((-3220.0), doubleArray1);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      DenseInstance denseInstance2 = new DenseInstance(denseInstance1);
      Discretize discretize0 = new Discretize("A^;[KgMMZLZq@'Q=n'Z");
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "bdR@ZhUQr ?o5^R#,g\"=";
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(false);
      discretize0.m_MakeBinary = true;
      Filter.runFilter(discretize0, (String[]) null);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("bdR@ZhUQr ?o5^R#,g\"=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=bdr@zhuqr ?o5^r#,g\"=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_W~`d=(O&y>O");
      double[][] doubleArray0 = new double[24][7];
      discretize0.setAttributeIndices("_W~`d=(O&y>O");
      double[] doubleArray1 = new double[9];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_W~`d=(O&y>O");
      doubleArray1[5] = 4.5556090304380055;
      doubleArray1[0] = 0.5944598236708205;
      doubleArray1[8] = (-2409.1462364750832);
      doubleArray0[4] = doubleArray1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_W~`d=(O&y>O");
      doubleArray0[2] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      doubleArray0[3] = doubleArray1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_W~`d=(O&y>O");
      doubleArray0[5] = doubleArray1;
      doubleArray0[6] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("packageList.txt", arrayList0, 77);
      Properties properties0 = new Properties();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      protectedProperties0.propertyNames();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      protectedProperties2.propertyNames();
      Object object0 = new Object();
      properties0.remove(object0, (Object) "packageList.txt");
      Attribute attribute0 = new Attribute("Zi$MlfIH.b", 3457);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      Attribute attribute1 = new Attribute("@end", protectedProperties2);
      Discretize discretize0 = new Discretize();
      instances0.removeAll(arrayList1);
      Filter.runFilter(discretize0, (String[]) null);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(139);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 811.7688252969;
      doubleArray0[1] = 811.7688252969;
      doubleArray0[2] = 811.7688252969;
      doubleArray0[3] = 811.7688252969;
      doubleArray0[4] = 811.7688252969;
      doubleArray0[5] = 811.7688252969;
      doubleArray0[6] = (-1.7976931348623157E308);
      SparseInstance sparseInstance0 = new SparseInstance(811.7688252969, doubleArray0);
      sparseInstance0.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "-R <col1,col2-col4,...>";
      String string1 = "";
      Discretize discretize0 = new Discretize("");
      discretize0.getOptions();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.8221303550794707
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[3];
      intArray0[0] = (-626);
      intArray0[1] = (-4131);
      intArray0[2] = 82;
      discretize0.setAttributeIndicesArray(intArray0);
      Filter.runFilter(discretize0, (String[]) null);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange(")--vA/Fj7h;LP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=)--va/fj7h;lp
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.8221303550794707
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[1];
      intArray0[0] = 66;
      discretize0.setAttributeIndicesArray(intArray0);
      Filter.runFilter(discretize0, (String[]) null);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange(")--vA/Fj7h;LP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=)--va/fj7h;lp
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[][] doubleArray0 = new double[19][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1111.3113);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      doubleArray1[5] = 4.5556090304380055;
      doubleArray1[6] = 2012.7217548984902;
      doubleArray0[4] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      doubleArray0[17] = doubleArray1;
      doubleArray0[3] = doubleArray1;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte) (-21);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      doubleArray0[4] = doubleArray1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray0[5] = doubleArray1;
      doubleArray0[6] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5190725895733266
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1111.3113);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[WekaPackageManager] weka.core.WekaPackageRepositoryURL = ");
      doubleArray1[5] = 4.5556090304380055;
      doubleArray1[6] = 2012.7217548984902;
      doubleArray1[6] = 2012.7217548984902;
      doubleArray1[8] = (-2410.34716391011);
      doubleArray0[4] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      doubleArray0[3] = doubleArray1;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      doubleArray0[4] = doubleArray1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      doubleArray0[5] = doubleArray1;
      doubleArray0[6] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString((byte)4);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("(-inf--1111.3113],(-1111.3113-0],(0-0],(0-0],(0-0],(0-4.555609],(4.555609-2012.721755],(2012.721755-0],(0--2410.347164],(-2410.347164-inf)", string0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertNotNull(string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5190725895733266
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[][] doubleArray0 = new double[19][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1111.3113);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      doubleArray1[5] = 4.5556090304380055;
      doubleArray1[6] = 2012.7217548984902;
      doubleArray0[4] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      doubleArray0[17] = doubleArray1;
      doubleArray0[3] = doubleArray1;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte) (-21);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      doubleArray0[4] = doubleArray1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray0[5] = doubleArray1;
      doubleArray0[6] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString((byte)4);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("(-inf--1111.3113],(-1111.3113-0],(0-0],(0-0],(0-0],(0-4.555609],(4.555609-2012.721755],(2012.721755-0],(0-0],(0-inf)", string0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Discretize discretize0 = new Discretize("S=M^43kbx{&");
      discretize0.setIgnoreClass(true);
      discretize0.m_DiscretizeCols = null;
      // Undeclared exception!
      try { 
        discretize0.getInvertSelection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("Eg|;#p8t={@");
      discretize0.getInvertSelection();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.runFilter(discretize0, (String[]) null);
      int int0 = discretize0.getBins();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, int0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "rKM\"nl-[5S-?Wmp@WKO");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("DoNotLoadIfFileNot>resent");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-11);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "DoNotLoadIfFileNot>resent");
      SystemInUtil.addInputLine("rKM\"nl-[5S-?Wmp@WKO");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("DoNotLoadIfFileNot>resent");
      discretize0.getCutPoints((byte) (-120));
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("j0!y] kj&.$lAk0", arrayList0, 6);
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.ints();
      instances0.randomize(mockRandom0);
      AllFilter allFilter1 = new AllFilter();
      Filter.wekaStaticWrapper(allFilter1, "DoNotLoadIfFileNotPresent", instances0, instances0);
      Discretize discretize0 = new Discretize("Make resulting attributes binary.");
      discretize0.setBins((-4357));
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Discretize discretize0 = new Discretize("bdR@L{^r ?oq^y]gQ=");
      String string0 = discretize0.invertSelectionTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      AllFilter allFilter0 = new AllFilter();
      String[] stringArray0 = new String[6];
      stringArray0[2] = "@=P5e";
      Filter.runFilter(allFilter0, stringArray0);
      AllFilter allFilter1 = new AllFilter();
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Discretize discretize0 = new Discretize("rKM\"nl-[5S-?Wmp@WKO");
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      intArray0[2] = 2894;
      intArray0[3] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 2147483645);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4002);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "rKM\"nl-[5S-?Wmp@WKO";
      stringArray0[1] = "rKM\"nl-[5S-?Wmp@WKO";
      stringArray0[3] = "rKM\"nl-[5S-?Wmp@WKO";
      stringArray0[4] = "rKM\"nl-[5S-?Wmp@WKO";
      stringArray0[5] = "rKM\"nl-[5S-?Wmp@WKO";
      stringArray0[6] = "rKM\"nl-[5S-?Wmp@WKO";
      stringArray0[7] = "Class attribute not set!";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(";dbxg+XRC", arrayList0, 2908);
      MockRandom mockRandom0 = new MockRandom();
      instances0.resampleWithWeights((Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom(2908);
      MockRandom mockRandom2 = new MockRandom();
      MockRandom mockRandom3 = new MockRandom();
      MockRandom mockRandom4 = new MockRandom();
      mockRandom4.nextDouble();
      MockRandom mockRandom5 = new MockRandom();
      mockRandom4.nextInt((-1));
      MockRandom mockRandom6 = new MockRandom();
      MockRandom mockRandom7 = new MockRandom();
      MockRandom mockRandom8 = new MockRandom();
      mockRandom8.setSeed(0L);
      mockRandom8.doubles(0.0, (double) 2908);
      mockRandom8.nextLong();
      MockRandom mockRandom9 = new MockRandom();
      AllFilter allFilter0 = new AllFilter();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("5bnD", arrayList1, 2908);
      Attribute.typeToString(2);
      SystemInUtil.addInputLine("@attribute");
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getRevision();
      assertEquals(10, discretize0.getBins());
      assertEquals("8964", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.setFindNumBins(false);
      discretize0.setFindNumBins(true);
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[0] = (-4);
      int int0 = 20;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 20);
      BinarySparseInstance binarySparseInstance1 = null;
      try {
        binarySparseInstance1 = new BinarySparseInstance((-3));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = (-1);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int int1 = 25;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 25);
      BinarySparseInstance binarySparseInstance1 = null;
      try {
        binarySparseInstance1 = new BinarySparseInstance((-3));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Discretize discretize0 = new Discretize("EUuq'kJy!~e{8");
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Discretize discretize0 = new Discretize(",$H(4GFS=,Y**_XJ");
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "zEg|;p8pt={@");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",$H(4GFS=,Y**_XJ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",$H(4GFS=,Y**_XJ");
      discretize0.m_IgnoreClass = true;
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Discretize discretize0 = new Discretize("rKM\"nl-[5S-?Wmp@WKO");
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      intArray0[2] = 2894;
      intArray0[3] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 2147483645);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4002);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "rKM\"nl-[5S-?Wmp@WKO";
      stringArray0[1] = "rKM\"nl-[5S-?Wmp@WKO";
      stringArray0[2] = "rKM\"nl-[5S-?Wmp@WKO";
      stringArray0[3] = "rKM\"nl-[5S-?Wmp@WKO";
      stringArray0[4] = "rKM\"nl-[5S-?Wmp@WKO";
      stringArray0[5] = "rKM\"nl-[5S-?Wmp@WKO";
      stringArray0[6] = "rKM\"nl-[5S-?Wmp@WKO";
      stringArray0[7] = "Class attribute not set!";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "ErKM\"nl-[5S-?WmpRWKO");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("DoNotLoadIfFileNot>resent");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-63);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@=P5e");
      SystemInUtil.addInputLine("vp2*(v_ka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~Dj5';P");
      Discretize discretize0 = new Discretize(">GMsk ID2\"");
      discretize0.getCapabilities();
      discretize0.getCapabilities();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = "bdR@ZhUQr ?o5^R#,g\"=";
      Discretize discretize0 = new Discretize();
      Filter.runFilter(discretize0, (String[]) null);
      discretize0.getOptions();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("bdR@ZhUQr ?o5^R#,g\"=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=bdr@zhuqr ?o5^r#,g\"=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = "-V";
      Discretize discretize0 = new Discretize("-V");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1111.3113);
      doubleArray1[1] = (-1111.3113);
      doubleArray1[2] = 4447.825155;
      doubleArray1[4] = 4447.825155;
      doubleArray1[5] = 5.70001;
      doubleArray1[6] = 2012.7217548984902;
      doubleArray1[7] = (-1866.201477321859);
      doubleArray1[8] = (-2410.34716391011);
      doubleArray0[4] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1713.4725629);
      doubleArray2[2] = (-1866.201477321859);
      doubleArray0[1] = doubleArray2;
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("5,1,5,1,3", arrayList0, 44);
      Filter.wekaStaticWrapper(allFilter0, "5,1,5,1,3", instances0, instances0);
      Discretize discretize0 = new Discretize();
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Instances instances2 = new Instances(instances1);
      try { 
        discretize0.setInputFormat(instances2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }
}
