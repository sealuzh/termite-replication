/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 06:47:25 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.StringReader;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.SymmetricalUncertAttributeEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.SerializedClassifier;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.Environment;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.neighboursearch.BallTree;
import weka.core.stemmers.IteratedLovinsStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.supervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.481688957619344
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("p[\\e2xMNo9");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      serializedClassifier1.getModelFile();
      MockFile.createTempFile("\tUse word frequencies instead of binary bag of words.", "\tUse word frequencies instead of binary bag of words.");
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1841.4208174382), (int[]) null, (-12));
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.toString();
      System.setCurrentTimeMillis((-12));
      naiveBayesMultinomialText1.stemmerTipText();
      naiveBayesMultinomialText1.stemmerTipText();
      try { 
        naiveBayesMultinomialText1.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4255324117086787
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      serializedClassifier1.getModelFile();
      MockFile.createTempFile("\tUse word frequencies instead of binary bag of words.", "\tUse word frequencies instead of binary bag of words.");
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setMinWordFrequency((-1841.4208174382));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      naiveBayesMultinomialText0.setMinWordFrequency((-99.0));
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText1.setLNorm((-673.0));
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      System.setCurrentTimeMillis(67L);
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval1 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = symmetricalUncertAttributeEval1.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("5YH4$/");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      double double0 = naiveBayesMultinomialText1.getLNorm();
      assertEquals((-1841.4208174382), naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
      assertEquals((-673.0), double0, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 1519;
      String[] stringArray0 = new String[8];
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.setMinWordFrequency(1546.981699);
      naiveBayesMultinomialText0.setMinWordFrequency(1519);
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.setLNorm(1519);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      Stopwords stopwords0 = new Stopwords();
      StringReader stringReader0 = new StringReader("Whether to convert all tokens to lowercase");
      stringReader0.reset();
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      stopwords0.read(bufferedReader0);
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals(1519.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = (NaiveBayesMultinomialText)AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.m_periodicP = 1519;
      String[] stringArray0 = new String[8];
      AbstractClassifier.runClassifier(naiveBayesMultinomialText1, stringArray0);
      double double0 = 1546.981699;
      naiveBayesMultinomialText1.setDebug(false);
      naiveBayesMultinomialText1.setMinWordFrequency(1546.981699);
      naiveBayesMultinomialText1.setMinWordFrequency(1519);
      naiveBayesMultinomialText1.reset();
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText1.setLNorm(1519);
      naiveBayesMultinomialText1.lowercaseTokensTipText();
      Stopwords stopwords0 = new Stopwords();
      naiveBayesMultinomialText1.m_stopwords = stopwords0;
      StringReader stringReader0 = new StringReader("Whether to convert all tokens to lowercase");
      stringReader0.reset();
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      stopwords0.read(bufferedReader0);
      naiveBayesMultinomialText0.stopwordsTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      naiveBayesMultinomialText0.m_periodicP = (-1953);
      File file0 = serializedClassifier0.getModelFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.setNorm(12.291226797141944);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getCapabilities();
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals(12.291226797141944, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals((-1953), int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3875202408941916
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_wordFrequencies = false;
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.m_minWordP = (-1532.44);
      naiveBayesMultinomialText0.setNorm(0.0);
      naiveBayesMultinomialText0.m_wordFrequencies = false;
      String[] stringArray0 = new String[0];
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.normTipText();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1532.44);
      doubleArray0[1] = (-1532.44);
      doubleArray0[2] = (-1532.44);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 44.7;
      doubleArray0[5] = (-1532.44);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1532.44);
      doubleArray0[8] = (-1532.44);
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.getOptions();
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.442406814876221
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("p[\\e2xMNo9");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\tUse word frequencies instead of binary bag of words.");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      serializedClassifier1.getModelFile();
      MockFile.createTempFile("\tUse word frequencies instead of binary bag of words.", "\tUse word frequencies instead of binary bag of words.");
      naiveBayesMultinomialText0.setDebug(true);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      naiveBayesMultinomialText0.m_periodicP = 433;
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.getLNorm();
      assertEquals(433, naiveBayesMultinomialText0.getPeriodicPruning());
      
      naiveBayesMultinomialText1.getOptions();
      System.setCurrentTimeMillis((-1582L));
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.getLNorm();
      naiveBayesMultinomialText1.normalizeDocLengthTipText();
      assertEquals(0, naiveBayesMultinomialText1.getPeriodicPruning());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3656436689350784
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 15000;
      intArray0[1] = 30;
      intArray0[2] = 15000;
      intArray0[3] = 15000;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(30, intArray0, (-5498));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(15000, intArray0, 436);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.deleteAttributeAt(1139);
      binarySparseInstance1.setWeight(15000);
      BinarySparseInstance binarySparseInstance3 = (BinarySparseInstance)binarySparseInstance1.copy();
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance2);
      binarySparseInstance3.setWeight(30);
      binarySparseInstance3.isMissing(30);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(30);
      binarySparseInstance5.setWeight((-1448.8084956174328));
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(1139);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((Instance) binarySparseInstance2);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      instances0.add((Instance) binarySparseInstance6);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 30;
      intArray0[2] = 10036;
      intArray0[3] = (-980);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(30, intArray0, (-5498));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1444, intArray0, 456);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.deleteAttributeAt((-1512));
      binarySparseInstance1.setWeight(1139);
      BinarySparseInstance binarySparseInstance3 = (BinarySparseInstance)binarySparseInstance1.copy();
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance2);
      binarySparseInstance3.setWeight(30);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(30);
      binarySparseInstance5.setWeight((-1448.8084956174328));
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((-1841.4208174382), intArray0, 1444);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance3);
      Vote vote0 = new Vote();
      Capabilities capabilities0 = vote0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.368373327680306
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemInUtil.addInputLine("4");
      int[] intArray0 = new int[4];
      intArray0[0] = 15000;
      intArray0[1] = 30;
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      nGramTokenizer0.setNGramMinSize((-3148));
      File file0 = MockFile.createTempFile("Using classifier: ", "Using classifier: ");
      MockFile mockFile0 = new MockFile(file0, "XrqKE\"WbmT>*/=o(@/");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.setNorm(15000);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getNorm();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1075.3924426825222, intArray0, (-492));
      file0.delete();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      properties0.put(technicalInformationHandlerJavadoc0, file0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("\tSet internal nodes' radius to the sum \n\tof the child balls radii. So that it \ncontains the child balls.", protectedProperties1);
      binarySparseInstance0.value(attribute0);
      binarySparseInstance0.setValueSparse(0, 1.0E-6);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.079966914136905
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.setTokenizer((Tokenizer) null);
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4923450529545823
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("p[\\e2xMNo9");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)16;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = 0.0;
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      MockFile.createTempFile("e{w@Z'_AC", "Weight nearest neighbours by their distance.");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      file0.mkdir();
      MockFile mockFile0 = new MockFile(file0, "p[e2xMNo9");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.setNorm(12.291226797141944);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getNorm();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      Instances instances0 = naiveBayesMultinomialText0.m_data;
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("PiyFJK_:jNYb1WD");
      naiveBayesMultinomialText0.buildClassifier(instances1);
      assertEquals(12.291226797141944, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.230330547328481
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 15000;
      intArray0[1] = 30;
      intArray0[2] = 15000;
      intArray0[3] = 15000;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(30, intArray0, (-5498));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1444, intArray0, 436);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.deleteAttributeAt((-1512));
      binarySparseInstance1.setWeight(0.0);
      BinarySparseInstance binarySparseInstance3 = (BinarySparseInstance)binarySparseInstance1.copy();
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance2);
      binarySparseInstance3.setWeight(30);
      binarySparseInstance3.isMissing(1444);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(30);
      binarySparseInstance5.setWeight((-1448.8084956174328));
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(1139);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance(1139);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance8);
      BinarySparseInstance binarySparseInstance10 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.316344336598403
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("p[\\e2xMNo9");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)16;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      MockFile.createTempFile("e{w@Z'_AC", "Weight nearest neighbours by their distance.");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      file0.mkdir();
      MockFile mockFile0 = new MockFile(file0, "p[e2xMNo9");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.setNorm(12.291226797141944);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getNorm();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)16;
      intArray0[1] = (int) (byte) (-42);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)105, intArray0, (byte)16);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.106301467527162
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.stemString("\tSpecify L-norm to use (default 2.0)");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      iteratedLovinsStemmer0.stemString("ZmanWK{");
      iteratedLovinsStemmer0.getTechnicalInformation();
      naiveBayesMultinomialText0.m_leplace = 0.0;
      naiveBayesMultinomialText0.setNorm(0.0);
      Stopwords stopwords0 = naiveBayesMultinomialText0.m_stopwords;
      naiveBayesMultinomialText0.m_stopwords = null;
      iteratedLovinsStemmer0.globalInfo();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      iteratedLovinsStemmer0.stem("");
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      naiveBayesMultinomialText0.getLowercaseTokens();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
      
      String[] stringArray0 = new String[0];
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Random.setNextRandom(864);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      SparseInstance sparseInstance0 = new SparseInstance(864);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getMinWordFrequency();
      String string0 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 1.0;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.755399432874636
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("p[\\e2xMNo9");
      String string0 = "<=?|";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "<=?|");
      EvoSuiteFile evoSuiteFile1 = null;
      EvoSuiteFile evoSuiteFile2 = null;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile3 = null;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "<=?|");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.064256878224803
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 15000;
      intArray0[1] = 30;
      intArray0[2] = 15000;
      intArray0[3] = 15000;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(30, intArray0, (-5498));
      binarySparseInstance0.setValue(3736, (double) 15000);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(15000, intArray0, 436);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.deleteAttributeAt(1139);
      binarySparseInstance1.setWeight(15000);
      BinarySparseInstance binarySparseInstance3 = (BinarySparseInstance)binarySparseInstance1.copy();
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance2);
      binarySparseInstance3.setWeight(30);
      Attribute attribute0 = new Attribute("", (List<String>) null);
      binarySparseInstance2.stringValue(attribute0);
      binarySparseInstance3.isMissing(30);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(30);
      binarySparseInstance5.setWeight((-1448.8084956174328));
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(1139);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance(1139);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(1139);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tNormalize document length (use in conjunction with -norm and -lnorm)");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance2, false);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0436506099620244
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.setNorm(5137.42278);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getLNorm();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.globalInfo();
      try { 
        AbstractClassifier.forName("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.042632211710285
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm((-3946.164));
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getNorm();
      int[] intArray0 = new int[5];
      intArray0[0] = 1444;
      intArray0[1] = (-980);
      intArray0[2] = 1444;
      intArray0[3] = 30;
      intArray0[4] = (-482);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(51, intArray0, 3629);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.75012938226178
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      MockFile mockFile0 = new MockFile(file0, "p[e2xMNo9");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.setNorm(12.291226797141944);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setPeriodicPruning(1);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.getCapabilities();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 2945;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2945, intArray0, (-888));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.getMinWordFrequency();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("");
      Instances instances0 = naiveBayesMultinomialText0.m_data;
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1411461439556105
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("p[\\e2xMNo9");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)16;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      MockFile.createTempFile("e{w@Z'_AC", "Weight nearest neighbours by their distance.");
      MockFile.createTempFile("#,f", "cs");
      MockFile mockFile0 = new MockFile(file0, "p[e2xMNo9");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.setNorm(12.291226797141944);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.setNorm(0.0);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getNorm();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Weight nearest neighbours by their distance.");
      Random.setNextRandom(0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.576534609090467
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      BallTree ballTree0 = new BallTree();
      naiveBayesMultinomialText0.normTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "If true, ignores all words that are on the stoplist.";
      stringArray0[1] = "-norm";
      try { 
        naiveBayesMultinomialText2.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -norm option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4287877436062972
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[8];
      intArray0[0] = (-138);
      intArray0[1] = (-7);
      naiveBayesMultinomialText0.setUseStopList(false);
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      nGramTokenizer0.nextElement();
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = " to ";
      stringArray0[2] = "T(j!l:ERISP";
      stringArray0[3] = "-tokenizer";
      stringArray0[4] = "r!Q2;V}~GLo]";
      stringArray0[5] = "";
      stringArray0[6] = ":]L,\"E&Cj{8sBz#";
      stringArray0[7] = "\t";
      stringArray0[8] = "";
      Tokenizer.runTokenizer(tokenizer0, stringArray0);
      naiveBayesMultinomialText0.setTokenizer(nGramTokenizer0);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-980);
      intArray0[1] = 30;
      intArray0[2] = (-980);
      intArray0[3] = 15000;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(30, intArray0, (-5498));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-1.0), intArray0, 864);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      int[] intArray1 = new int[9];
      intArray1[0] = 1141;
      intArray1[1] = 15000;
      intArray1[2] = 1141;
      binarySparseInstance0.s_numericAfterDecimalPoint = 1139;
      intArray1[4] = 1444;
      intArray1[5] = 1139;
      intArray1[6] = (-5498);
      intArray1[7] = (-980);
      intArray0[3] = 30;
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-980), intArray1, 30);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4287877436062972
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "+>{ytRtCc/C";
      stringArray0[1] = "The tokenizing algorithm to use on the strings.";
      stringArray0[2] = "4p.xqK";
      stringArray0[3] = "measureAttributesUsed";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "73%}i~yWo!v~*";
      stringArray0[7] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.881766240540306
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      Stemmer stemmer0 = naiveBayesMultinomialText1.getStemmer();
      stemmer0.stem("If true, ignores all words that are on the stoplist.");
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText1.pruneDictionary();
      assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
      
      BallTree ballTree0 = new BallTree();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 63.289656431649;
      naiveBayesMultinomialText1.m_normalize = true;
      doubleArray0[2] = 63.289656431649;
      doubleArray0[3] = 63.289656431649;
      doubleArray0[4] = 63.289656431649;
      doubleArray0[5] = 63.289656431649;
      doubleArray0[0] = 63.289656431649;
      doubleArray0[7] = 1.0;
      naiveBayesMultinomialText0.normTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.getLowercaseTokens();
      Random.setNextRandom((-16));
      naiveBayesMultinomialText2.tokenizerTipText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText2.useWordFrequenciesTipText();
      String string0 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      boolean boolean0 = naiveBayesMultinomialText0.getUseWordFrequencies();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4408250123292614
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.setMinWordFrequency(4125.2);
      naiveBayesMultinomialText0.setPeriodicPruning(0);
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.setLNorm(81.381621235);
      naiveBayesMultinomialText0.setMinWordFrequency((-2007.0));
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getOptions();
      System.setCurrentTimeMillis((-2572L));
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getCapabilities();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6778227086572697
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      String string0 = "";
      stringArray0[0] = "";
      String string1 = "-stoplist";
      stringArray0[1] = "-stoplist";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      Instance instance0 = null;
      try { 
        naiveBayesMultinomialText0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.209400384757829
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 30;
      intArray0[1] = 30;
      intArray0[1] = 30;
      intArray0[3] = 30;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(30, intArray0, (-5527));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 30;
      doubleArray0[2] = (double) 30;
      SparseInstance sparseInstance0 = new SparseInstance(30, doubleArray0, intArray0, (-5527));
      binarySparseInstance0.mergeInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(30, intArray0, 436);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.deleteAttributeAt(1141);
      binarySparseInstance1.setWeight(30);
      BinarySparseInstance binarySparseInstance3 = (BinarySparseInstance)binarySparseInstance1.copy();
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance2);
      binarySparseInstance3.setWeight(30);
      binarySparseInstance3.isMissing(30);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(30);
      binarySparseInstance5.setWeight((-1448.8084956174328));
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(1141);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance(1141);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tNormalize document length (use in conjunction with -norm and -lnorm)");
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance8);
      BinarySparseInstance binarySparseInstance10 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 15000;
      intArray0[1] = 30;
      intArray0[2] = 15000;
      intArray0[3] = 15000;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(30, intArray0, (-5498));
      binarySparseInstance0.setValue(3736, (double) 15000);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(15000, intArray0, 436);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.setWeight(17.0);
      binarySparseInstance0.deleteAttributeAt(1141);
      binarySparseInstance1.setWeight(15000);
      BinarySparseInstance binarySparseInstance3 = (BinarySparseInstance)binarySparseInstance1.copy();
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance2);
      binarySparseInstance3.setWeight(30);
      Attribute attribute0 = new Attribute("", (List<String>) null);
      binarySparseInstance2.stringValue(attribute0);
      binarySparseInstance3.isMissing(30);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(30);
      binarySparseInstance5.setWeight((-1448.8084956174328));
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(1141);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance(1141);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(1141);
      TestInstances testInstances1 = new TestInstances();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/youOsn:ss0$C%hlq;");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "<=?|");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "<=?|");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      MockFile.createTempFile("yo!Osn:ss", "$C%hlq;");
      naiveBayesMultinomialText0.setOptions(stringArray0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yo!Osn:ss");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$C%hlq;");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine(")NnFMJlj=b9s/]3yj%");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X");
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("p[\\e2xMNo9");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "<=?|");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(3181.63856888);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      MockFile.createTempFile("iousness", "$C%hlq;");
      naiveBayesMultinomialText0.setOptions(stringArray0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tHow often to prune the dictionary of low frequency words (default = 0, i.e. don't prune)");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine(")NnFMJlj=b9s/]3yj%");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X");
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-980);
      intArray0[1] = 30;
      intArray0[2] = 15000;
      intArray0[3] = (-980);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(30, intArray0, (-5498));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1444, intArray0, 456);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.setWeight(0.0);
      BinarySparseInstance binarySparseInstance3 = (BinarySparseInstance)binarySparseInstance1.copy();
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance2);
      binarySparseInstance3.setWeight(30);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(30);
      binarySparseInstance6.setWeight((-1448.8084956174328));
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((-1841.4208174382), intArray0, 1444);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("aZ?-;->lQ;sf|WNF", list0, 1141);
      binarySparseInstance7.setValue(attribute0, (-540.66114817487));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance((Instance) binarySparseInstance7);
      BinarySparseInstance binarySparseInstance10 = new BinarySparseInstance((SparseInstance) binarySparseInstance8);
      BinarySparseInstance binarySparseInstance11 = new BinarySparseInstance((SparseInstance) binarySparseInstance10);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 15000;
      intArray0[1] = 30;
      intArray0[2] = 15000;
      intArray0[3] = 15000;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(30, intArray0, (-5498));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(15000, intArray0, 436);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      AbstractInstance.s_numericAfterDecimalPoint = 1141;
      binarySparseInstance0.deleteAttributeAt(1141);
      binarySparseInstance1.setWeight(15000);
      BinarySparseInstance binarySparseInstance3 = (BinarySparseInstance)binarySparseInstance1.copy();
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance2);
      binarySparseInstance3.setWeight(30);
      binarySparseInstance3.isMissing(30);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(30);
      binarySparseInstance5.setWeight((-1448.8084956174328));
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(1141);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance3);
      binarySparseInstance5.setWeight(15000);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(0.0, intArray0, 436);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance6);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance((SparseInstance) binarySparseInstance5);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      System.setCurrentTimeMillis(0L);
      BinarySparseInstance binarySparseInstance10 = new BinarySparseInstance(1141);
      try { 
        naiveBayesMultinomialText1.updateClassifier((Instance) binarySparseInstance10, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5323204850794725
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("p[\\e2xMNo9");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "<=?|");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<=?|";
      stringArray0[1] = "<=?|";
      naiveBayesMultinomialText0.setPeriodicPruning(2496);
      FileSystemHandling.createFolder(evoSuiteFile0);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<=?|");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      int[] intArray0 = new int[4];
      intArray0[0] = 3187;
      intArray0[1] = 3187;
      intArray0[2] = (-7);
      intArray0[3] = (-2292);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 1110);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1110);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      try { 
        naiveBayesMultinomialText0.classifyInstance(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3398303221457053
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      naiveBayesMultinomialText1.LNormTipText();
      naiveBayesMultinomialText0.setLNorm(30);
      naiveBayesMultinomialText1.minWordFrequencyTipText();
      naiveBayesMultinomialText1.getStemmer();
      naiveBayesMultinomialText0.useStopListTipText();
      assertEquals(30.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.useWordFrequenciesTipText();
      naiveBayesMultinomialText1.stemmerTipText();
      naiveBayesMultinomialText1.tokenizerTipText();
      String string0 = naiveBayesMultinomialText2.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 1550.70996617;
      doubleArray0[2] = 1.0E75;
      doubleArray0[3] = 318.6;
      doubleArray0[4] = 0.0;
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      naiveBayesMultinomialText0.m_lowercaseTokens = false;
      naiveBayesMultinomialText0.getUseStopList();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "+>{ytRtCc/C";
      stringArray0[2] = "4p.xqK";
      stringArray0[3] = "measureAttributesUsed";
      stringArray0[4] = "";
      stringArray0[5] = "";
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      wordTokenizer0.getOptions();
      wordTokenizer0.setDelimiters("+>{ytRtCc/C");
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      stringArray0[6] = "";
      stringArray0[7] = "";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_stopwords = null;
      naiveBayesMultinomialText0.getTokenizer();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setUseStopList(true);
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      nGramTokenizer0.setNGramMinSize(1332);
      nGramTokenizer0.setOptions(stringArray0);
      NGramTokenizer nGramTokenizer1 = new NGramTokenizer();
      nGramTokenizer1.listOptions();
      Tokenizer.tokenize((Tokenizer) nGramTokenizer1, stringArray0);
      NGramTokenizer nGramTokenizer2 = new NGramTokenizer();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Random.setNextRandom((-5498));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\",F";
      stringArray0[1] = "' ";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "-ignored <comma-separated list of properties>";
      stringArray0[5] = "SVI5zy9lK9hXhhZ,o";
      stringArray0[6] = "/r*%Hz}B^livOisQs";
      stringArray0[7] = "xb0`2CKi%<eQ";
      stringArray0[8] = "Aiarh#/B%Hx(}zP";
      NaiveBayesMultinomialText.main(stringArray0);
      Random.setNextRandom((-1602));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 15000;
      intArray0[2] = 15000;
      intArray0[3] = 15000;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1444, intArray0, 436);
      binarySparseInstance0.setWeight(0.0);
      BinarySparseInstance binarySparseInstance1 = (BinarySparseInstance)binarySparseInstance0.copy();
      binarySparseInstance1.setWeight(0);
      binarySparseInstance1.isMissing((-433));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0);
      binarySparseInstance2.setWeight((-1448.8084956174328));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStopwords((File) null);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\tNormalize document length (use in conjunction with -norm and -lnorm)";
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Stopwords stopwords0 = naiveBayesMultinomialText0.m_stopwords;
      naiveBayesMultinomialText0.setMinWordFrequency(1.0E10);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      naiveBayesMultinomialText0.getMinWordFrequency();
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      MockFile mockFile0 = new MockFile(file0, "p[e2xMNo9");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.setNorm(12.291226797141944);
      naiveBayesMultinomialText0.getNorm();
      int[] intArray0 = new int[3];
      intArray0[0] = 1660;
      intArray0[1] = (-1602);
      intArray0[2] = 51;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4168.93932, intArray0, 1053);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1660);
      double[] doubleArray0 = naiveBayesMultinomialText0.m_probOfClass;
      double double0 = naiveBayesMultinomialText0.getLNorm();
      assertEquals(12.291226797141944, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-980);
      intArray0[1] = 1444;
      intArray0[2] = (-758);
      intArray0[3] = (-980);
      intArray0[4] = 15000;
      intArray0[5] = (-980);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-980), intArray0, 2431);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0.0, intArray0, (-980));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      String string0 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string0);
      
      String string1 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string1);
      
      naiveBayesMultinomialText0.reset();
      String string2 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string2);
      
      String string3 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string3);
      
      String string4 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string4);
      
      String string5 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string5);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      
      naiveBayesMultinomialText0.m_minWordP = (-4381.719);
      MockFile mockFile0 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
      naiveBayesMultinomialText0.m_stopwordsFile = (File) mockFile0;
      naiveBayesMultinomialText0.m_lowercaseTokens = false;
      naiveBayesMultinomialText0.getUseStopList();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\n";
      stringArray0[1] = "? y??T";
      stringArray0[2] = "^)0";
      stringArray0[3] = "";
      stringArray0[4] = "Use word frequencies rather than binary bag of words representation";
      stringArray0[5] = "XCa\"I9W:t5^UTOG3_";
      stringArray0[6] = "well";
      stringArray0[7] = "";
      Tokenizer.runTokenizer(nGramTokenizer0, stringArray0);
      String[] stringArray1 = new String[7];
      SMOreg sMOreg0 = new SMOreg();
      AbstractClassifier.runClassifier(sMOreg0, stringArray1);
      stringArray1[0] = "";
      naiveBayesMultinomialText0.pruneDictionary();
      stringArray1[1] = "^)0";
      naiveBayesMultinomialText0.setUseStopList(true);
      stringArray1[2] = "";
      nGramTokenizer0.setNGramMinSize(0);
      stringArray1[3] = "\tScore type (BAYES, BDeu, MDL, ENTROPY and AIC)";
      nGramTokenizer0.tokenize("weka.classifiers.functions.LinearRegression");
      stringArray1[4] = "#J";
      stringArray1[5] = "w;:X:sTaDn`iqT/`.z";
      stringArray1[6] = "IE";
      Tokenizer.runTokenizer(nGramTokenizer0, stringArray1);
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getUseStopList();
      Random.setNextRandom(5);
      naiveBayesMultinomialText0.tokenizerTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.795294412433909
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("p[\\e2xMNo9");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)16;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      MockFile.createTempFile("e{w@Z'_AC", "Weight nearest neighbours by their distance.");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      file0.mkdir();
      MockFile mockFile0 = new MockFile(file0, "p[e2xMNo9");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.LNormTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.normalizeDocLengthTipText();
      String string0 = naiveBayesMultinomialText1.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string0);
      
      String string1 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string1);
      
      naiveBayesMultinomialText1.getStemmer();
      String string2 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string2);
      
      String string3 = naiveBayesMultinomialText1.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string3);
      
      String string4 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string4);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      String string5 = naiveBayesMultinomialText2.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string5);
      
      String string6 = naiveBayesMultinomialText1.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string6);
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText1.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.4267173502315558
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Cp8$x8i9g)\"B,ft-";
      stringArray0[1] = "-normalize";
      stringArray0[2] = "[b6(<v7J?OS HH";
      stringArray0[3] = "$(npVQ?ksBa_-/=L&<K";
      stringArray0[4] = "(6#WJJXL[0#T<:";
      stringArray0[5] = "Invalid tokenizer specification string";
      stringArray0[6] = "\n";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.247142731449634
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setUseStopList(true);
      MockFile mockFile0 = new MockFile("0-Bjv-1XqY;^`d6[(", "0-Bjv-1XqY;^`d6[(");
      File file0 = MockFile.createTempFile("T??HrXRWcLlbw", "T??HrXRWcLlbw", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "T??HrXRWcLlbw");
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 1479);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.738840717855686
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("p[\\e2xMNo9");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.listOptions();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      serializedClassifier0.setModel(classificationViaRegression0);
      serializedClassifier0.getModelFile();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{u(C@m");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, (String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.getOptions();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.2698986887396755
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "<=?$");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      byteArray0[3] = (byte)16;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)51;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      MockFile.createTempFile("Weight nearest neighbours by their distance.", "<=?$");
      naiveBayesMultinomialText1.setOptions(stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-T <name of test file>\n");
      Random.setNextRandom((byte)16);
      System.setCurrentTimeMillis((byte)51);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.4287877436062972
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("p[\\e2xMNo9");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("p[\\e2xMNo9");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendDataToFile(evoSuiteFile2, (byte[]) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.setOptions((String[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tUse word f7equ|ncies instead of binary bag of words.");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\tUse word f7equ|ncies instead of binary bag of words.");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      SystemInUtil.addInputLine(")NnFMJlj=b9s/]3yj%");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, (byte[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      System.setCurrentTimeMillis(0L);
  }
}
