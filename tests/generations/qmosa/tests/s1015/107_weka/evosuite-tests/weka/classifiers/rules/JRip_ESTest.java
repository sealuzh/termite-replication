/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 07:19:03 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASEvaluation;
import weka.attributeSelection.ASSearch;
import weka.attributeSelection.Ranker;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.MiddleOutConstructor;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo(0.0);
      String[] stringArray0 = new String[19];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip_RipperRule0.setConsequent(0.0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wka.core.matrix.CholeskyDecomposition");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.parallelStream();
      Instances instances0 = new Instances("\fi", arrayList0, 83);
      jRip_RipperRule0.grow(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double double0 = jRip0.getMinNo();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[19];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[1] = "Y]?kH:i2z3(t4|>";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[3] = "n";
      stringArray0[4] = "d";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      stringArray0[5] = "Y]?kH:i2z3(t4|>";
      stringArray0[6] = "A6Ni#s/]#kTGC:lwM";
      jRip0.setMinNo((-99.0));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A6Ni#s/]#kTGC:lwM");
      jRip0.getMinNo();
      Instances instances0 = null;
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("A6Ni#s/]#kTGC:lwM", (Instances) null, 2139);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      Locale locale1 = Locale.ITALIAN;
      locale1.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      arrayList2.containsAll(list0);
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList3, (Collection<Locale>) linkedList1, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) arrayList3, (Collection<Locale>) linkedList1);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      linkedList1.add(locale0);
      linkedList2.add(locale1);
      locale1.getDisplayCountry(locale0);
      Locale locale2 = Locale.CHINESE;
      Locale locale3 = Locale.SIMPLIFIED_CHINESE;
      locale3.getDisplayName();
      Locale locale4 = Locale.JAPANESE;
      Locale locale5 = Locale.CANADA;
      locale4.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) arrayList0);
      locale3.getUnicodeLocaleKeys();
      linkedList1.add(locale1);
      Locale locale6 = new Locale("Chinese (China)", "Chinese (China)", "Chinese (China)");
      Properties properties0 = new Properties();
      properties0.keys();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      Attribute attribute0 = new Attribute("Chinese (China)", protectedProperties0);
      arrayList4.add(attribute0);
      Instances instances0 = new Instances("Chinese (China)", arrayList4, 115);
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      double[] doubleArray0 = new double[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[3] = (double) 4;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 5;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 4;
      doubleArray1[5] = (double) 4;
      decisionTable0.m_classPriors = doubleArray0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 3;
      doubleArray2[1] = (double) 3;
      doubleArray2[2] = (double) 2;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 4;
      doubleArray2[5] = (double) 2;
      decisionTable0.m_classPriors = doubleArray2;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray1[3] = (double) 2;
      decisionTable0.m_classPriorCounts = doubleArray0;
      decisionTable0.m_classIsNominal = true;
      Instances instances0 = new Instances("@l0`a*Z\"UY3Y7", arrayList0, 4);
      int[] intArray0 = new int[23];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5, intArray0, 4);
      instances0.add((Instance) binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(true);
      jRip0.toString();
      jRip0.setDebug(true);
      try { 
        jRip0.rulesetForOneClass(Double.NaN, (Instances) null, Double.NaN, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleAttributes();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale locale2 = new Locale("_^", "Ibp}4f``u9cfq#sA:*");
      locale1.getDisplayName();
      Locale locale3 = Locale.SIMPLIFIED_CHINESE;
      List<Locale> list1 = new LinkedList<Locale>();
      linkedList1.add(locale3);
      Locale locale4 = Locale.FRENCH;
      locale3.clone();
      linkedList1.add(locale0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList2, 125);
      instances0.enumerateInstances();
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@data", instances0, protectedProperties0);
      arrayList2.add(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, true);
      int[] intArray0 = new int[9];
      intArray0[4] = 125;
      intArray0[7] = 125;
      Instances instances1 = new Instances("", arrayList2, 125);
      try { 
        jRip0.buildClassifier(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Whether hold-one-out cross-validation will be used to select the best k value.");
      DecisionTable decisionTable0 = new DecisionTable();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Instances instances0 = new Instances("8um@R9jF_Q@9qs?Og", arrayList0, 5);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 4;
      doubleArray0[0] = (double) 3;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(571.5918464772209, doubleArray0);
      Attribute attribute0 = new Attribute("@relation", instances0, 5);
      instances0.add((Instance) binarySparseInstance0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = decisionTable0.m_theInstances;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute.typeToString(234);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 3352.0, (-1586.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jRip0.getOptions();
      Properties properties0 = new Properties();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        pipedOutputStream0.write((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.OutputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale1.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList1, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      linkedList1.add(locale1);
      linkedList1.add(locale1);
      Locale locale2 = Locale.CHINESE;
      locale1.getDisplayName();
      Locale locale3 = Locale.SIMPLIFIED_CHINESE;
      linkedList1.add(locale3);
      Locale locale4 = Locale.FRENCH;
      linkedList1.add(locale0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList3, 125);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[17];
      intArray0[3] = 125;
      intArray0[4] = 125;
      intArray0[5] = 125;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(125, intArray0, 0);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute("@data", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 1.0, (-0.6262757833770232));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      Integer integer0 = new Integer((-2252));
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Instances instances1 = decisionTable0.m_dtInstances;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-3305.5594904));
      jRip_RipperRule0.hasAntds();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances2 = new Instances(".arff", arrayList1, 1);
      jRip_RipperRule0.grow(instances2);
      assertEquals((-3305.5594904), jRip_RipperRule0.getConsequent(), 0.01);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tRandom number seed.\n\t(default 1)");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tRandom number seed.\n\t(default 1)");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      RuleStats ruleStats0 = new RuleStats();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(783.413573271297, doubleArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("JRIP: No model built yet.", linkedList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.value = 604.437744052;
      jRip_NominalAntd0.covers(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("relational", arrayList0, 1159);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 2981;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2981);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("", linkedList0, 708);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      Properties properties0 = new Properties();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale1.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      locale0.hasExtensions();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList1, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      linkedList1.add(locale1);
      Locale locale2 = new Locale("D#{';7J7(&|:h", "Ibp}4f``u9cfq#sA:*");
      locale1.getDisplayName();
      Locale locale3 = Locale.SIMPLIFIED_CHINESE;
      linkedList1.add(locale3);
      Locale locale4 = Locale.FRENCH;
      linkedList1.add(locale0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList3, 125);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[6];
      Attribute attribute0 = new Attribute(".arff");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 420.41246973, 2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, (-2146833989));
      jRip_NumericAntd0.covers(binarySparseInstance0);
      int int0 = jRip0.getOptimizations();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      locale0.toLanguageTag();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Locale locale1 = Locale.ITALIAN;
      locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList1);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale locale2 = new Locale("gsKJ*DkB-Bavm>'", "");
      linkedList2.add(locale1);
      linkedList2.add(locale1);
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      linkedList1.push(locale2);
      linkedList1.add(locale1);
      linkedList3.add(locale2);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list1);
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList2, (Locale.FilteringMode) null);
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list2, locale_FilteringMode2);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) arrayList4, (Collection<Locale>) list3);
      JRip jRip0 = new JRip();
      jRip0.setOptions((String[]) null);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("optimization in this implementation.\n\n", list0, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.44358964168773
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 64.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(64.0, doubleArray0);
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties3.forEach(biConsumer0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties4.forEach(biConsumer1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties14);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.globalInfo();
      Attribute attribute0 = new Attribute("R4jhbk0MYY+rtP");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean1 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(boolean1 == boolean0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.44358964168773
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 64.0;
      doubleArray0[2] = 64.0;
      doubleArray0[3] = 64.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(64.0, doubleArray0);
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties2.forEach(biConsumer0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties0.forEach(biConsumer1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties4);
      protectedProperties12.clone();
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.globalInfo();
      Attribute attribute0 = new Attribute("ap");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean1 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      BayesNet bayesNet0 = new BayesNet();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      AbstractClassifier.makeCopies(randomSubSpace0, 68);
      jRip0.setOptions((String[]) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list1);
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list2);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list3);
      Attribute attribute0 = new Attribute("", list0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer(2);
      arrayList1.add((Integer) 0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DenseInstance denseInstance0 = new DenseInstance(11);
      boolean boolean0 = jRip_RipperRule0.covers(denseInstance0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(boolean0);
      
      JRip jRip1 = new JRip();
      int int0 = jRip0.getFolds();
      assertEquals(3, int0);
      
      DecisionTable decisionTable0 = new DecisionTable();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3825);
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getMaxInfoGain();
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertFalse(jRip1.getDebug());
      assertEquals(0.0, double0, 0.01);
      assertTrue(jRip1.getCheckErrorRate());
      assertTrue(jRip1.getUsePruning());
      assertEquals(2, jRip1.getOptimizations());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = locale0.stripExtensions();
      locale1.getUnicodeLocaleKeys();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0001;
      doubleArray0[1] = 1.0001;
      doubleArray0[2] = 1.0001;
      doubleArray0[3] = 1.0001;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0001, doubleArray0);
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int[] intArray0 = new int[7];
      intArray0[0] = 103;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = (-102);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1.0001, intArray0, 566);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances0 = new Instances("", arrayList0, 103);
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      try { 
        jRip0.rulesetForOneClass(2984.26283411093, instances1, 2, (-102));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[7];
      attribute0.copy("");
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)17;
      attribute0.toString();
      byteArray0[6] = (byte) (-120);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-86);
      intArray0[1] = (-527);
      intArray0[2] = (int) (byte) (-120);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)39, intArray0, (-17));
      try { 
        jRip0.rulesetForOneClass(264.1040349, (Instances) null, 2.0, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(") and ", arrayList0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      RuleStats ruleStats0 = new RuleStats();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (-1958.5163943);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      
      jRip_NumericAntd0.maxInfoGain = (double) 4;
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(") and  >= NaN", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[19];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip_RipperRule0.setConsequent(0.0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wka.core.matrix.CholeskyDecomposition");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.parallelStream();
      Instances instances0 = new Instances("\fi", arrayList0, 83);
      jRip_RipperRule0.grow(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 64.0;
      doubleArray0[1] = 64.0;
      doubleArray0[2] = 64.0;
      doubleArray0[3] = 64.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(64.0, doubleArray0);
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties0.forEach(biConsumer0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties4);
      protectedProperties12.clone();
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties12);
      protectedProperties13.entrySet();
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties13);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string0 = jRip0.seedTipText();
      assertFalse(jRip0.getDebug());
      assertEquals("The seed used for randomizing the data.", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      double[] doubleArray0 = new double[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[3] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 3;
      decisionTable0.m_classPriorCounts = doubleArray0;
      decisionTable0.m_classIsNominal = true;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5, decisionTable0.m_classPriorCounts);
      int[] intArray0 = new int[23];
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 3;
      decisionTable0.m_classPriors = doubleArray0;
      intArray0[4] = 4;
      intArray0[5] = 3;
      Attribute attribute0 = new Attribute("alJlic", (List<String>) null);
      Utils.log2 = 0.1;
      Instances instances0 = decisionTable0.m_theInstances;
      Attribute.typeToString(1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = 10.545028965195765;
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.setThreshold(2956.42);
      decisionTable0.m_evaluator = (ASEvaluation) wrapperSubsetEval0;
      jRip_NumericAntd0.covers(binarySparseInstance0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("alJlic >= NaN", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.495914456064185
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer((-2252));
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_RipperRule0.setConsequent(5);
      jRip_RipperRule0.hasAntds();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 4);
      jRip_RipperRule0.grow(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ox5;#?");
      Attribute attribute0 = new Attribute("}", (List<String>) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getSplitPoint();
      Random.setNextRandom((-1942));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip0.rulesetForOneClass(3.0, (Instances) null, (-3305.5594904), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("0B}M9f3]", (List<String>) null, protectedProperties2);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAttrValue();
      int int0 = jRip0.getOptimizations();
      assertEquals(2, int0);
      
      double double1 = jRip_NumericAntd0.getCover();
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.062711125700289
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      double[] doubleArray0 = new double[10];
      doubleArray0[3] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 3;
      decisionTable0.m_classPriorCounts = doubleArray0;
      decisionTable0.setSearch((ASSearch) null);
      Instances instances1 = new Instances("8um@R9djF_Q@9qs?Og\"", arrayList0, 4);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5, decisionTable0.m_classPriorCounts);
      int[] intArray0 = new int[6];
      intArray0[1] = 4;
      intArray0[2] = 2;
      intArray0[4] = 5;
      intArray0[5] = 3;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(5, intArray0, 0);
      Attribute attribute0 = new Attribute("allic", (List<String>) null);
      attribute0.copy(".bsi");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Instances instances2 = decisionTable0.m_theInstances;
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      boolean boolean0 = jRip0.getUsePruning();
      assertTrue(boolean0);
      
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances1, 5, (-2209.923));
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1, instancesArray0.length);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[4];
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      doubleArray0[3] = (double) 4;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 5;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 4;
      doubleArray1[5] = (double) 4;
      decisionTable0.m_classPriors = doubleArray1;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 3;
      decisionTable0.m_classPriorCounts = doubleArray0;
      decisionTable0.m_classIsNominal = true;
      Instances instances0 = new Instances("8um@R9jF_Q@9qs?Og", arrayList0, 4);
      int[] intArray0 = new int[23];
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 3;
      intArray0[4] = 5;
      intArray0[5] = 5;
      Attribute attribute0 = new Attribute("alJlic", (List<String>) null);
      doubleArray1[0] = 0.1;
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      decisionTable0.setDisplayRules(true);
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = decisionTable0.m_theInstances;
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
      
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 5, (-2209.923));
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1, instancesArray0.length);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jRip0.setFolds((-1142));
      Attribute attribute0 = new Attribute(") and ", arrayList0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      RuleStats ruleStats0 = new RuleStats();
      arrayList1.add((Integer) 1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}mA|");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DenseInstance denseInstance0 = new DenseInstance(3);
      jRip_RipperRule0.covers(denseInstance0);
      jRip0.getFolds();
      DecisionTable decisionTable0 = new DecisionTable();
      AbstractClassifier.makeCopies(decisionTable0, 3);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 970;
      intArray0[2] = (-956);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      Instances instances0 = binarySparseInstance0.dataset();
      assertNull(instances0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      Locale locale1 = Locale.ITALIAN;
      locale1.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      List<Locale> list1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      linkedList1.add(locale1);
      linkedList1.add(locale1);
      Locale locale2 = Locale.CHINESE;
      locale1.getDisplayName();
      Locale locale3 = Locale.TAIWAN;
      linkedList1.add(locale3);
      Locale locale4 = Locale.CHINA;
      linkedList1.add(locale0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList3, 125);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[10];
      intArray0[3] = 125;
      intArray0[4] = 125;
      intArray0[5] = 125;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(125);
      jRip0.getUsePruning();
      Attribute attribute0 = new Attribute("@data", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 1.0, (-0.6262757833770232));
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      Locale locale1 = Locale.ITALIAN;
      locale1.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList1, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      linkedList1.add(locale1);
      linkedList1.add(locale1);
      Locale locale2 = Locale.CHINESE;
      locale1.getDisplayName();
      Locale locale3 = Locale.TAIWAN;
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Italian", arrayList3, 125);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(125);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute((String) null, list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 2, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList0, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      locale0.getDisplayName(locale1);
      linkedList1.add(locale1);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) list1, locale_FilteringMode2);
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList1);
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("", list2);
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      DecisionTable decisionTable0 = new DecisionTable();
      ArrayList<Integer> arrayList3 = new ArrayList<Integer>();
      JRip jRip0 = new JRip();
      Attribute attribute1 = new Attribute("ty", (-4));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd0.toString();
      CoverTree coverTree0 = new CoverTree();
      Instance instance0 = null;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[19];
      stringArray0[0] = "\nOne condition: size = ";
      stringArray0[1] = "q%fNBGv1H-)t";
      Utils.SMALL = 3.4;
      stringArray0[3] = "n";
      stringArray0[5] = "";
      stringArray0[6] = "A6Ni#s/]#kTGC:lwM";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A6Ni#s/]#kTGC:lwM");
      Random.setNextRandom((-1431));
      Attribute attribute0 = new Attribute("\nOne condition: size = ");
      System.setCurrentTimeMillis(1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3628722294375422
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      RuleStats ruleStats0 = new RuleStats();
      String[] stringArray0 = jRip0.getOptions();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties7);
      JRip jRip1 = new JRip();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties7);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(69);
      jRip1.setOptions(stringArray0);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertTrue(jRip1.getCheckErrorRate());
      assertTrue(jRip1.getUsePruning());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(11, stringArray0.length);
      assertEquals(3, jRip1.getFolds());
      assertEquals(1L, jRip1.getSeed());
      assertFalse(jRip1.getDebug());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\nOne condition: size = ";
      stringArray0[2] = "\tSet the loss function to minimize. 0 = hinge loss (SVM), 1 = log loss (logistic regression),\n\t2 = squared loss (regression).\n\t(default = 0)";
      stringArray0[3] = "n";
      stringArray0[4] = "d";
      stringArray0[5] = "";
      stringArray0[6] = "A6Ni#s/]#kTGC:lwM";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Utils.log2 = 275.78606689095426;
      CoverTree coverTree0 = new CoverTree();
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("z");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2954);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      Properties properties0 = new Properties();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      int int0 = 3;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 3.0, 401.67);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[19];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[1] = "q%fNBGv1H-)t";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[3] = null;
      stringArray0[4] = "d";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      stringArray0[17] = "q%fNBGv1H-)t";
      stringArray0[6] = "A6Ni#s/]#kTGC:lwM";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jRip0.getMeasure(stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Utils.log2 = 269.37;
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 269.37;
      doubleArray0[2] = (-0.4375);
      doubleArray0[5] = 269.37;
      doubleArray0[8] = 269.37;
      int[] intArray0 = new int[4];
      intArray0[0] = (-3858);
      intArray0[2] = 1276;
      JRip jRip0 = new JRip();
      jRip0.usePruningTipText();
      String string0 = jRip0.usePruningTipText();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals("Whether pruning is performed.", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = 0.5;
      doubleArray0[3] = 0.5;
      doubleArray0[4] = 0.5;
      doubleArray0[5] = 0.5;
      doubleArray0[6] = 0.5;
      DenseInstance denseInstance0 = new DenseInstance(0.5, doubleArray0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties2.forEach(biConsumer0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties0.forEach(biConsumer1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties4);
      protectedProperties12.clone();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("7!}c]GJp0QIp@", arrayList0, 765);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      JRip jRip1 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1857.5552530980874, (int[]) null, 302);
      instances0.add((Instance) binarySparseInstance0);
      String string0 = jRip1.foldsTipText();
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      assertFalse(jRip1.getDebug());
      assertEquals(3, jRip1.getFolds());
      assertTrue(jRip1.getUsePruning());
      assertEquals(1L, jRip1.getSeed());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>(arrayList0);
      Properties properties0 = new Properties();
      Object object0 = new Object();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("'qX:4}~$c", linkedList0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties4);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties4);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      Properties properties6 = new Properties();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties4);
      ProtectedProperties protectedProperties13 = null;
      try {
        protectedProperties13 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_RipperRule0.hasAntds();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.size();
      System.setCurrentTimeMillis(3711L);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties0.forEach(biConsumer0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties0);
      protectedProperties5.stringPropertyNames();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties4);
      protectedProperties9.clone();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties6);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties7);
      Properties properties2 = new Properties();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("): ", arrayList0, 125);
      JRip jRip1 = new JRip();
      try { 
        jRip1.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale1.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list1);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale locale2 = new Locale("", "Ibp}4f``u9cfq#sA:*");
      linkedList2.add(locale2);
      linkedList2.add(locale0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList2);
      Consumer<Locale> consumer0 = (Consumer<Locale>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList2.forEach(consumer0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) list2, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList2);
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", (-119));
      Attribute attribute1 = attribute0.copy((String) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      double double0 = jRip_NominalAntd0.getAccuRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("therefore");
      attribute0.value(14);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAccu();
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Q]td";
      stringArray0[1] = "]^ z";
      stringArray0[2] = "weka.classifiers.rules.JRip$Antd";
      stringArray0[3] = "/ mPP.F";
      stringArray0[4] = "^@J<?W+R?t";
      stringArray0[5] = "";
      stringArray0[6] = "";
      JRip.main(stringArray0);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 3;
      decisionTable0.m_classPriorCounts = doubleArray0;
      Instances instances1 = new Instances("8um@R9djF_Q@9qs?Og\"", arrayList0, 4);
      decisionTable0.m_numAttributes = 7;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5, decisionTable0.m_classPriorCounts);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int[] intArray0 = new int[6];
      intArray0[1] = 4;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 5;
      DecisionTable decisionTable1 = new DecisionTable();
      decisionTable1.getEvaluationMeasure();
      Instances instances2 = decisionTable0.m_theInstances;
      Random.setNextRandom(3);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptimizations();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      try { 
        middleOutConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\nPruning the rule ...");
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DecisionTable decisionTable0 = new DecisionTable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(4);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable1 = new DecisionTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_RipperRule0.setConsequent(4);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 1758);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      jRip0.getRevision();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) (-119);
      byteArray0[8] = (byte) (-15);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      jRip_RipperRule0.hasAntds();
      System.setCurrentTimeMillis(1940L);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-476));
      byte[] byteArray0 = null;
      Locale.getISOLanguages();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = (-3);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-63));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 909;
      jRip0.setSeed(0L);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("hbRbNamx(3`MR", arrayList0, 909);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        pipedOutputStream0.write((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.OutputStream", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale1.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList1, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      linkedList1.add(locale1);
      Locale locale2 = new Locale("D#{';7J7L|:h", "q^[yvWB|8!<cge");
      locale1.getDisplayName();
      Locale locale3 = Locale.SIMPLIFIED_CHINESE;
      linkedList1.add(locale3);
      Locale locale4 = Locale.FRENCH;
      linkedList1.add(locale0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[6];
      intArray0[3] = 125;
      intArray0[3] = 125;
      intArray0[5] = 125;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(125, intArray0, (-1255));
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("On_&]\"a}5OtFr", arrayList0, 0);
      Attribute attribute1 = attribute0.copy("On_&]\"a}5OtFr");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      String string0 = jRip0.debugTipText();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals("Whether debug information is output to the console.", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8821103874851657
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[7];
      Classifier classifier0 = AbstractClassifier.makeCopy(jRip0);
      stringArray0[0] = "9fZgy~gsga";
      stringArray0[1] = "9fZgy~gsga";
      stringArray0[2] = "#J";
      AbstractClassifier.runClassifier(classifier0, stringArray0);
      stringArray0[3] = "w;:X:ETaDn`iqT/`.";
      stringArray0[4] = "IE";
      stringArray0[5] = ">15MUe/pS:i6#";
      stringArray0[6] = "G.{H=fct~LdBqd-";
      jRip0.setOptions(stringArray0);
      jRip0.getTechnicalInformation();
      Attribute attribute0 = new Attribute("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Attribute attribute1 = jRip_NominalAntd0.getAttr();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ClassOrder classOrder0 = new ClassOrder();
      attribute1.equalsMsg(classOrder0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.5;
      doubleArray0[5] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.5, doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute isn't relation-valued!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      double[] doubleArray0 = new double[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[3] = (double) 4;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 5;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 4;
      doubleArray1[5] = (double) 4;
      decisionTable0.m_classPriors = doubleArray0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 3;
      doubleArray2[1] = (double) 3;
      doubleArray2[2] = (double) 2;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 4;
      doubleArray2[5] = (double) 2;
      decisionTable0.m_classPriors = doubleArray2;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray1[3] = (double) 2;
      decisionTable0.m_classPriorCounts = doubleArray0;
      decisionTable0.m_classIsNominal = true;
      Instances instances0 = new Instances("@l0`a*Z\"UY3Y7", arrayList0, 4);
      int[] intArray0 = new int[23];
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 3;
      intArray0[4] = 5;
      intArray0[5] = 5;
      Attribute attribute0 = new Attribute("", (List<String>) null);
      doubleArray1[0] = (double) 2;
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      decisionTable0.setDisplayRules(true);
      Attribute.typeToString(1);
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 5, (-2221.8170726620538));
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1, instancesArray0.length);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      String string0 = jRip0.optimizationsTipText();
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("The number of optimization runs.", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Ranker ranker0 = new Ranker();
      JRip jRip0 = new JRip();
      String string0 = jRip0.minNoTipText();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals("The minimum total weight of the instances in a rule.", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(903.9291720679);
      jRip_RipperRule0.hasAntds();
      assertEquals(903.9291720679, jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.setDebug(true);
      jRip0.getDebug();
      jRip0.getCheckErrorRate();
      String string0 = jRip0.optimizationsTipText();
      assertEquals("The number of optimization runs.", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Utils.log2 = 269.37;
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 269.37;
      doubleArray0[2] = (-0.4375);
      doubleArray0[5] = 269.37;
      doubleArray0[8] = 269.37;
      int[] intArray0 = new int[4];
      intArray0[0] = (-3858);
      intArray0[2] = 1276;
      JRip jRip0 = new JRip();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q%fNBGv1H-)t");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka.core.neighboursearch.balltrees.BallTreeConstructor");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Utils.log2 = 275.78606689095426;
      CoverTree coverTree0 = new CoverTree();
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2954);
      jRip0.getDebug();
      Properties properties0 = new Properties();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[19];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      stringArray0[0] = "";
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[1] = "q%fNBGv1H-)t";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utils.SMALL = 3.4;
      stringArray0[3] = "h";
      stringArray0[4] = "d";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      stringArray0[5] = "q%fNBGv1H-)t";
      stringArray0[6] = "A6Ni#s/]#kTGC:lwM";
      Utils.SMALL = 3.4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A6Ni#s/]#kTGC:lwM");
      // Undeclared exception!
      try { 
        jRip0.getMeasure("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // h not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[19];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[1] = "q%fNBGv1H-)t";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[3] = "n";
      stringArray0[4] = "d";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      stringArray0[5] = "q%fNBGv1H-)t";
      stringArray0[6] = "A6Ni#s/]#kTGC:lwM";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A6Ni#s/]#kTGC:lwM");
      // Undeclared exception!
      try { 
        jRip0.getMeasure("n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // n not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleAttributes();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.getISOLanguages();
      Locale locale2 = new Locale("`#{{.;7P7(&q:h", "Ibp}4f``u9cfq#sA:*");
      locale1.getDisplayName();
      Locale locale3 = Locale.SIMPLIFIED_CHINESE;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) list1, locale_FilteringMode1);
      linkedList1.add(locale3);
      Locale locale4 = Locale.FRENCH;
      locale3.clone();
      linkedList1.add(locale0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList2, 125);
      instances0.enumerateInstances();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, true);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[4] = 125;
      intArray0[7] = 125;
      jRip0.listOptions();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>(arrayList0);
      Properties properties0 = new Properties();
      Object object0 = new Object();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", linkedList0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties4);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties4);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      Properties properties6 = new Properties();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties4);
      ProtectedProperties protectedProperties13 = null;
      try {
        protectedProperties13 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(false);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.accu = (-1.0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("hbRENmS(3`MR", arrayList0, 953);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, (-1.0), 953);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds(0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1172.4, doubleArray0);
      jRip0.enumerateMeasures();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      properties0.put("F}Z<a(,~&H+", "F}Z<a(,~&H+");
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("F}Z<a(,~&H+");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" => F}Z<a(,~&H+=", string0);
      
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertNotSame(jRip_RipperRule1, jRip_RipperRule0);
      
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties2);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties1);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties13);
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties15 = new ProtectedProperties(properties5);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(properties5);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties21 = new ProtectedProperties(properties2);
      String string1 = jRip0.toString();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("JRIP: No model built yet.", string1);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      jRip0.setFolds(3);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(boolean0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Utils.log2 = 269.37;
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 269.37;
      doubleArray0[2] = (-0.4375);
      doubleArray0[5] = 269.37;
      doubleArray0[8] = 269.37;
      int[] intArray0 = new int[4];
      intArray0[0] = (-3858);
      intArray0[2] = (-570);
      System.setCurrentTimeMillis((-570));
      JRip jRip0 = new JRip();
      long long0 = jRip0.getSeed();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, long0);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[4];
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      doubleArray0[3] = (double) 4;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 5;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 4;
      doubleArray1[5] = (double) 4;
      decisionTable0.m_classPriors = doubleArray1;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 3;
      decisionTable0.m_classPriorCounts = doubleArray0;
      decisionTable0.m_classIsNominal = true;
      Instances instances0 = new Instances("8um@R9jF_Q@9qs?Og", arrayList0, 4);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5, decisionTable0.m_classPriorCounts);
      int[] intArray0 = new int[23];
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 3;
      intArray0[4] = 5;
      intArray0[5] = 3;
      Attribute attribute0 = new Attribute("alJlic", (List<String>) null);
      instances0.add((Instance) binarySparseInstance0);
      Utils.log2 = 0.1;
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      decisionTable0.setDisplayRules(true);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = decisionTable0.m_theInstances;
      Attribute.typeToString(1);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 5, (-2209.923));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getFolds();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      BallNode ballNode0 = new BallNode(3, 3, 3);
      JRip.NominalAntd jRip_NominalAntd0 = null;
      try {
        jRip_NominalAntd0 = jRip0.new NominalAntd((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 64.0;
      doubleArray0[1] = 64.0;
      doubleArray0[2] = 64.0;
      doubleArray0[3] = 64.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(64.0, doubleArray0);
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties0.forEach(biConsumer0);
      protectedProperties3.propertyNames();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties14);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties15);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties15);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties3);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(boolean0);
      
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      Attribute attribute0 = new Attribute("JRIP: No model built yet.", linkedList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
  }
}
