/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 08:43:56 GMT 2019
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URL;
import java.security.cert.Certificate;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.function.Predicate;
import javax.management.remote.JMXPrincipal;
import javax.security.auth.Subject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.firebirdsql.gds.GDSException;
import org.firebirdsql.gds.XSQLDA;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.AbstractIscTrHandle;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.jni.isc_blob_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_tr_handle_impl;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.gds.impl.wire.XdrOutputStream;
import org.firebirdsql.gds.impl.wire.isc_db_handle_impl;
import org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.firebirdsql.jdbc.FBFetcher;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.firebirdsql.jdbc.field.FBLongVarCharField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][4];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-111);
      byteArray1[2] = (byte) (-59);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-111);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte) (-111);
      byteArray2[6] = (byte) (-59);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-111);
      byteArray3[1] = (byte)1;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)1;
      byteArray3[4] = (byte) (-59);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte) (-111);
      byteArray4[2] = (byte)1;
      byteArray4[3] = (byte) (-111);
      byteArray0[3] = byteArray4;
      linkedList0.offerLast(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.setFetchSize((byte)1);
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setRsr_rdb((isc_db_handle_impl) null);
      XSQLDA xSQLDA0 = new XSQLDA(0);
      XSQLDA xSQLDA1 = new XSQLDA();
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl2 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      isc_db_handle_impl0.getSubject();
      isc_db_handle_impl0.setSubject((Subject) null);
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.setDb(isc_db_handle_impl0);
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.setRblId((-1408));
      isc_blob_handle_impl0.getTr();
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl4 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl4.setStatementType(0);
      isc_stmt_handle_impl4.registerTransaction((AbstractIscTrHandle) null);
      isc_blob_handle_impl0.getDb();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLDA0.sqlvar, linkedList0);
      isc_stmt_handle_impl0.setStatementType(2);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((GDSHelper) null, 1, 0, isc_stmt_handle_impl0, fBResultSet0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      XSQLDA xSQLDA0 = new XSQLDA(0);
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      isc_blob_handle_impl1.getTr();
      isc_blob_handle_impl isc_blob_handle_impl2 = new isc_blob_handle_impl();
      isc_blob_handle_impl1.setBlobId(61L);
      isc_blob_handle_impl isc_blob_handle_impl3 = new isc_blob_handle_impl();
      isc_blob_handle_impl2.setRblId((-1322));
      isc_blob_handle_impl isc_blob_handle_impl4 = new isc_blob_handle_impl();
      isc_blob_handle_impl2.setRblId(4);
      isc_blob_handle_impl2.setRblId((-4250));
      isc_blob_handle_impl isc_blob_handle_impl5 = new isc_blob_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl6 = new isc_blob_handle_impl();
      isc_blob_handle_impl1.setBlobId(5);
      isc_blob_handle_impl isc_blob_handle_impl7 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.setBlobId((-2182L));
      isc_blob_handle_impl2.setRblId((-1));
      isc_blob_handle_impl4.setBlobId(568L);
      isc_blob_handle_impl3.setRblId(0);
      isc_blob_handle_impl isc_blob_handle_impl8 = new isc_blob_handle_impl();
      isc_blob_handle_impl4.getTr();
      isc_blob_handle_impl8.setBlobId(4);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((GDSHelper) null, 0, 1, isc_stmt_handle_impl0, (FBObjectListener.FetcherListener) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.606483544522957
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer.getInteger("");
      byte[][] byteArray0 = new byte[0][5];
      linkedList0.add(byteArray0);
      Integer integer0 = new Integer((-19));
      Integer integer1 = new Integer((byte)50);
      Integer integer2 = new Integer((byte)50);
      Integer.getInteger("", (int) (byte)50);
      Integer.toUnsignedLong((-231));
      Integer.compare((-19), (-1134));
      Integer.divideUnsigned((-198), (-1134));
      Integer.getInteger("", (-1134));
      Integer.compare((-19), (byte)50);
      Integer.getInteger("", integer2);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.relative(335544354);
      fBCachedFetcher0.insertRow((byte[][]) null);
      linkedList0.removeLastOccurrence((Object) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.relative((-2545));
      fBCachedFetcher0.insertRow(byteArray0);
      fBCachedFetcher0.relative(4006);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.next();
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1029244281091923
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      XSQLDA xSQLDA0 = new XSQLDA(0);
      isc_stmt_handle_impl0.getOutSqlda();
      isc_stmt_handle_impl0.setAllRowsFetched(true);
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl2 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl0);
      isc_blob_handle_impl0.getDb();
      isc_tr_handle_impl isc_tr_handle_impl1 = isc_blob_handle_impl0.getTr();
      isc_tr_handle_impl1.registerStatementWithTransaction(isc_stmt_handle_impl1);
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl1);
      isc_blob_handle_impl0.setDb((org.firebirdsql.gds.impl.jni.isc_db_handle_impl) null);
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl2 = new isc_blob_handle_impl();
      isc_blob_handle_impl2.setRblId(0);
      isc_tr_handle_impl isc_tr_handle_impl2 = isc_blob_handle_impl0.getTr();
      isc_stmt_handle_impl0.registerTransaction(isc_tr_handle_impl2);
      isc_blob_handle_impl isc_blob_handle_impl3 = new isc_blob_handle_impl();
      isc_blob_handle_impl3.getDb();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLDA0.sqlvar, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.first();
      fBCachedFetcher0.first();
      boolean boolean0 = fBCachedFetcher0.relative((-2));
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3349414035884517
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer.getInteger((String) null);
      byte[][] byteArray0 = new byte[0][5];
      linkedList0.add(byteArray0);
      Integer integer0 = new Integer((-25));
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer1 = new Integer((byte)50);
      Integer.getInteger("F(!=sf5E+");
      Integer integer2 = new Integer((byte)50);
      Integer.getInteger("", integer1);
      Integer.toUnsignedLong((-25));
      Integer.getInteger((String) null, integer0);
      Integer integer3 = new Integer((-1134));
      Integer.compare((-25), (-1134));
      Integer.getInteger("", (-1134));
      Integer.compare((-25), (byte)50);
      Integer integer4 = new Integer((-25));
      Integer integer5 = new Integer((-25));
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      fBCachedFetcher0.insertRow(byteArray0);
      fBCachedFetcher0.insertRow(byteArray0);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.deleteRow();
      System.setCurrentTimeMillis((-1616L));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3706127656140428
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer.getInteger((String) null);
      Integer.compareUnsigned((-1), (-1));
      byte[][] byteArray0 = new byte[0][5];
      linkedList0.add(byteArray0);
      Integer integer0 = new Integer((-25));
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer.getInteger("!g6r4a~!YM&yL", (Integer) null);
      Integer.remainderUnsigned(4911, (-1));
      Integer.toUnsignedLong(4911);
      Integer.compareUnsigned(383, 4911);
      Integer.getInteger((String) null);
      Integer integer1 = new Integer((byte)50);
      Integer.divideUnsigned(2604, 3087);
      Integer.getInteger("!g6r4a~!YM&yL", (Integer) null);
      Integer.toUnsignedString((-1));
      Integer.toUnsignedLong(3087);
      Integer integer2 = new Integer(4911);
      Integer integer3 = new Integer((-1));
      Integer.compare((-25), (byte)50);
      Integer integer4 = new Integer((-25));
      Integer integer5 = new Integer((-25));
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow(byteArray0);
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.absolute((-1));
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3271046605602583
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer.getInteger("");
      byte[][] byteArray0 = new byte[0][5];
      linkedList0.add(byteArray0);
      Integer integer0 = new Integer((-19));
      Integer integer1 = new Integer((byte)50);
      Integer integer2 = new Integer((byte)50);
      Integer integer3 = new Integer((-19));
      Integer.compare((-19), (-1134));
      Integer.getInteger("", (-1134));
      Integer.compare((-19), (byte)50);
      Integer.getInteger("", integer2);
      Integer.toUnsignedLong(335544354);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow(byteArray0);
      fBCachedFetcher0.insertRow(fBResultSet0.row);
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.next();
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2218396677739918
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer integer0 = new Integer((-336));
      Integer.getInteger("");
      Integer.compare((-336), (-3514));
      Object object0 = new Object();
      Integer integer1 = new Integer((-3514));
      Integer integer2 = new Integer(452);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      Subject subject0 = new Subject();
      jMXPrincipal0.toString();
      jMXPrincipal0.implies(subject0);
      jMXPrincipal0.equals("");
      JMXPrincipal jMXPrincipal1 = new JMXPrincipal("");
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.isAfterLast();
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      XSQLDA xSQLDA0 = new XSQLDA(4);
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.getTr();
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      isc_blob_handle_impl1.setBlobId(4);
      isc_blob_handle_impl isc_blob_handle_impl2 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.setBlobId(0L);
      isc_blob_handle_impl1.setRblId(5);
      isc_blob_handle_impl isc_blob_handle_impl3 = new isc_blob_handle_impl();
      isc_blob_handle_impl2.setRblId(4);
      isc_blob_handle_impl0.setRblId(4);
      isc_blob_handle_impl isc_blob_handle_impl4 = new isc_blob_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl5 = new isc_blob_handle_impl();
      isc_blob_handle_impl5.setBlobId(4);
      isc_blob_handle_impl isc_blob_handle_impl6 = new isc_blob_handle_impl();
      isc_blob_handle_impl1.setBlobId(3);
      isc_blob_handle_impl6.setRblId(4);
      isc_blob_handle_impl0.setRblId(4);
      isc_blob_handle_impl6.setRblId((-1256));
      isc_blob_handle_impl6.setBlobId(4);
      isc_blob_handle_impl6.setBlobId(0L);
      isc_blob_handle_impl0.setRblId(2);
      isc_blob_handle_impl isc_blob_handle_impl7 = new isc_blob_handle_impl();
      isc_blob_handle_impl7.getTr();
      isc_blob_handle_impl4.setBlobId(1223);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((GDSHelper) null, 400, 4, isc_stmt_handle_impl0, (FBObjectListener.FetcherListener) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.field.FBField", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.352641895713288
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer.getInteger((String) null);
      Integer.compareUnsigned((-1), (-1));
      byte[][] byteArray0 = new byte[1][5];
      Integer integer0 = new Integer((-25));
      Integer.getInteger("%Oi5=$8&,", (Integer) null);
      Integer.remainderUnsigned((-1), (-1));
      Integer.compareUnsigned((-1), 0);
      Integer.toUnsignedLong(0);
      Integer.getInteger("F(!=sf5E+");
      Integer.toUnsignedLong(1);
      Integer integer1 = new Integer((byte)50);
      Integer.compareUnsigned((-1), (-1115));
      Integer.toUnsignedLong(0);
      linkedList0.add(byteArray0);
      Integer.getInteger("%Oi5=$8&,", (Integer) null);
      Integer.toUnsignedLong(3073);
      Integer integer2 = new Integer((byte)50);
      Integer integer3 = new Integer((-1135));
      Integer.compare((-25), (-1135));
      Integer integer4 = new Integer((-1));
      Integer integer5 = new Integer((byte)50);
      Integer integer6 = new Integer((-25));
      Integer integer7 = new Integer((-25));
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.insertRow(byteArray0);
      fBCachedFetcher0.deleteRow();
      assertFalse(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.123216193669003
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque0 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque1 = new LinkedBlockingDeque<byte[][]>();
      byte[][] byteArray0 = new byte[8][1];
      byte[] byteArray1 = new byte[5];
      linkedBlockingDeque0.toArray();
      linkedList0.addAll((Collection<? extends byte[][]>) linkedBlockingDeque0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque2 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque3 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque4 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque2.stream();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque5 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque0.add(byteArray0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque6 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque6.add(byteArray0);
      byte[][] byteArray2 = linkedBlockingDeque6.peekLast();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      linkedBlockingDeque6.offerFirst(byteArray2, (long) (byte)0, timeUnit0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque7 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque4.contains(linkedBlockingDeque7);
      linkedBlockingDeque2.add(byteArray2);
      linkedBlockingDeque0.add(byteArray0);
      linkedBlockingDeque7.size();
      linkedBlockingDeque6.add(byteArray0);
      linkedList0.removeAll(linkedBlockingDeque4);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      SynchronousQueue<FBLongVarCharField> synchronousQueue0 = new SynchronousQueue<FBLongVarCharField>();
      synchronousQueue0.remainingCapacity();
      synchronousQueue0.peek();
      linkedList0.removeAll(linkedBlockingDeque7);
      fBCachedFetcher0.insertRow(byteArray2);
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.insertRow(byteArray0);
      int int0 = fBCachedFetcher0.getRowNum();
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3822194921698756
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer.getInteger((String) null);
      Integer.compareUnsigned((-1), (-1));
      byte[][] byteArray0 = new byte[1][5];
      Integer integer0 = new Integer((-25));
      Integer.getInteger("%Oi5=$8&,", (Integer) null);
      Integer.remainderUnsigned((-1), (-1));
      Integer.compareUnsigned((-1), 0);
      Integer.toUnsignedLong(0);
      Integer integer1 = new Integer((-25));
      Integer.toUnsignedLong(804);
      Integer integer2 = new Integer((byte)50);
      Integer.compareUnsigned((-1), (-1088));
      Integer.toUnsignedLong(0);
      Integer.sum((-1088), (-30));
      Integer.divideUnsigned(0, 3073);
      Integer.getInteger("%Oi5=$8&,", (Integer) null);
      Integer.toUnsignedLong(3073);
      Integer integer3 = new Integer((byte)50);
      Integer integer4 = new Integer(0);
      Integer.compare((-25), (-1088));
      Integer integer5 = new Integer((-1));
      Integer integer6 = new Integer((byte)50);
      Integer integer7 = new Integer((-25));
      Integer integer8 = new Integer((-25));
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow(byteArray0);
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.097878170750067
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque0 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque1 = new LinkedBlockingDeque<byte[][]>();
      byte[][] byteArray0 = new byte[2][6];
      byte[] byteArray1 = new byte[3];
      byteArray0[1] = byteArray1;
      linkedBlockingDeque0.add(byteArray0);
      linkedList0.addAll((Collection<? extends byte[][]>) linkedBlockingDeque0);
      linkedBlockingDeque1.add(byteArray0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque2 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque3 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque4 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque0.toString();
      linkedBlockingDeque0.add(byteArray0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      linkedBlockingDeque4.offerLast(byteArray0, (-4829L), timeUnit0);
      linkedBlockingDeque4.add(byteArray0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque5 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque5.add(byteArray0);
      linkedBlockingDeque5.offerLast(byteArray0);
      linkedBlockingDeque1.offerLast(byteArray0);
      linkedBlockingDeque4.add(byteArray0);
      linkedBlockingDeque5.offerFirst(byteArray0, (long) (byte)0, timeUnit0);
      linkedBlockingDeque3.offerFirst(byteArray0, (-755L), timeUnit0);
      linkedBlockingDeque1.spliterator();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque6 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque1.add(byteArray0);
      linkedBlockingDeque6.add(byteArray0);
      linkedBlockingDeque6.add(byteArray0);
      linkedBlockingDeque6.addAll(linkedBlockingDeque2);
      linkedBlockingDeque0.add(byteArray0);
      linkedBlockingDeque6.size();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.last();
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6365588860131264
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque0 = new LinkedBlockingDeque<byte[][]>();
      byte[][] byteArray0 = new byte[8][1];
      byte[] byteArray1 = new byte[5];
      linkedBlockingDeque0.toArray();
      linkedList0.addAll((Collection<? extends byte[][]>) linkedBlockingDeque0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque1 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque2 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque3 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque4 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque0.add(byteArray0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque5 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque5.add(byteArray0);
      byte[][] byteArray2 = linkedBlockingDeque5.peekLast();
      linkedBlockingDeque4.add(byteArray2);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      linkedBlockingDeque5.offerFirst(byteArray2, (long) (byte)0, timeUnit0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque6 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque1.add(byteArray2);
      linkedBlockingDeque0.add(byteArray0);
      linkedBlockingDeque6.size();
      linkedList0.removeAll(linkedBlockingDeque3);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.relative(3724);
      linkedBlockingDeque6.put(byteArray2);
      SynchronousQueue<FBLongVarCharField> synchronousQueue0 = new SynchronousQueue<FBLongVarCharField>();
      synchronousQueue0.remainingCapacity();
      synchronousQueue0.peek();
      linkedList0.removeAll(linkedBlockingDeque6);
      fBCachedFetcher0.insertRow(byteArray2);
      fBCachedFetcher0.isFirst();
      fBCachedFetcher0.getRowNum();
      boolean boolean0 = fBCachedFetcher0.previous();
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.469607282976206
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<Object> predicate5 = predicate2.and(predicate3);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate<Object> predicate8 = predicate7.and(predicate2);
      Predicate<Object> predicate9 = predicate5.negate();
      Predicate<Object> predicate10 = predicate5.and(predicate3);
      predicate5.or(predicate1);
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate<Object> predicate12 = predicate6.negate();
      Predicate<Object> predicate13 = predicate4.negate();
      predicate11.and(predicate9);
      predicate12.or(predicate4);
      Predicate<Object> predicate14 = predicate12.negate();
      predicate14.negate();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("J7CR0tdG=");
      predicate14.test(jMXPrincipal0);
      predicate11.negate();
      predicate13.negate();
      Predicate<Object> predicate15 = predicate0.and(predicate0);
      Predicate<Object> predicate16 = predicate4.negate();
      Predicate.isEqual((Object) predicate10);
      predicate8.and(predicate16);
      predicate5.negate();
      predicate1.and(predicate15);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.next();
      int int0 = fBCachedFetcher0.getRowNum();
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3539190349214616
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.toArray();
      Integer.getInteger("");
      byte[][] byteArray0 = new byte[0][5];
      linkedList0.add(byteArray0);
      Integer integer0 = new Integer((-19));
      Integer integer1 = new Integer((byte)50);
      Integer integer2 = new Integer((byte)50);
      Integer.getInteger("", (int) (byte)50);
      Integer.compare((-19), (-1134));
      Integer.getInteger("", (-1134));
      Integer.compare((-19), (byte)50);
      Integer.getInteger("", integer2);
      Integer.toUnsignedLong(335544354);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.updateRow(byteArray0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[6][6];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-111);
      byteArray1[1] = (byte)14;
      byteArray1[2] = (byte)17;
      byteArray1[3] = (byte)86;
      byteArray1[4] = (byte) (-46);
      byteArray1[5] = (byte)56;
      byteArray1[6] = (byte) (-98);
      byteArray1[7] = (byte) (-112);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)14;
      byteArray2[1] = (byte)86;
      byteArray2[2] = (byte)17;
      byteArray2[3] = (byte) (-112);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte) (-111);
      byteArray3[1] = (byte) (-111);
      byteArray3[2] = (byte)17;
      byteArray3[3] = (byte)17;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte) (-112);
      byteArray4[1] = (byte)14;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[9];
      byteArray5[0] = (byte)56;
      byteArray5[1] = (byte)17;
      byteArray5[2] = (byte)56;
      byteArray5[3] = (byte) (-112);
      byteArray5[4] = (byte) (-98);
      byteArray5[5] = (byte)17;
      byteArray5[6] = (byte) (-111);
      byteArray5[7] = (byte) (-111);
      byteArray5[8] = (byte) (-98);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[6];
      byteArray6[0] = (byte)14;
      byteArray6[1] = (byte)86;
      byteArray6[2] = (byte) (-112);
      byteArray6[3] = (byte)86;
      byteArray6[4] = (byte)14;
      byteArray6[5] = (byte)56;
      byteArray0[5] = byteArray6;
      linkedList0.add(byteArray0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isLast();
      Certificate[] certificateArray0 = new Certificate[9];
      Certificate certificate0 = mock(Certificate.class, new ViolatedAssumptionAnswer());
      certificateArray0[0] = certificate0;
      certificateArray0[1] = certificate0;
      certificateArray0[3] = certificateArray0[2];
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = null;
      try {
        internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator(internalTransactionCoordinator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator$MetaDataTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      MockThread mockThread0 = new MockThread();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.addArgument((-655));
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      databaseParameterBufferImp0.getArgumentAsString(64);
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp1.hasArgument((-45));
      byte[] byteArray0 = new byte[32];
      databaseParameterBufferImp1.getArgumentAsString((-45));
      DatabaseParameterBufferImp databaseParameterBufferImp2 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp2.write((XdrOutputStream) null);
      databaseParameterBufferImp2.addArgument((-2), "PURE_JAVA");
      databaseParameterBufferImp0.getArgumentAsInt(335544738);
      databaseParameterBufferImp0.addArgument((int) (byte) (-1), byteArray0);
      databaseParameterBufferImp1.addArgument(2902, 2004);
      DatabaseParameterBufferImp databaseParameterBufferImp3 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.getLength();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DatabaseParameterBufferImp databaseParameterBufferImp4 = new DatabaseParameterBufferImp();
      byte[][] byteArray1 = new byte[3][2];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      boolean boolean0 = linkedList0.add(byteArray1);
      databaseParameterBufferImp4.addArgument((-2), byteArray0);
      databaseParameterBufferImp4.addArgument((-45));
      databaseParameterBufferImp4.addArgument(64);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean1 = fBCachedFetcher0.isEmpty();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[1][5];
      byte[][] byteArray1 = new byte[5][8];
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-33);
      byteArray2[2] = (byte)0;
      byteArray1[0] = byteArray2;
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)0;
      byteArray1[1] = byteArray3;
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte) (-33);
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte) (-33);
      byteArray1[2] = byteArray4;
      byte[] byteArray5 = new byte[8];
      byteArray5[0] = (byte) (-33);
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte)0;
      byteArray5[3] = (byte)0;
      byteArray5[4] = (byte)0;
      byteArray5[5] = (byte)0;
      byteArray5[7] = (byte) (-33);
      byte[] byteArray6 = new byte[7];
      byteArray6[0] = (byte) (-33);
      byteArray6[1] = (byte)0;
      byteArray6[2] = (byte) (-33);
      byteArray6[3] = (byte) (-33);
      byteArray6[4] = (byte)0;
      byteArray6[5] = (byte) (-33);
      byteArray6[6] = (byte) (-33);
      byteArray1[4] = byteArray6;
      linkedList0.offerFirst(byteArray1);
      byte[] byteArray7 = new byte[3];
      byteArray7[0] = (byte) (-16);
      byteArray7[1] = (byte)6;
      byteArray7[2] = (byte) (-114);
      byteArray0[0] = byteArray7;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      XSQLDA xSQLDA0 = new XSQLDA(0);
      XSQLDA xSQLDA1 = new XSQLDA(0);
      isc_stmt_handle_impl0.setAllRowsFetched(true);
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl2 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl0);
      isc_blob_handle_impl0.getDb();
      isc_tr_handle_impl isc_tr_handle_impl1 = isc_blob_handle_impl0.getTr();
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl1);
      isc_blob_handle_impl0.setDb((org.firebirdsql.gds.impl.jni.isc_db_handle_impl) null);
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl2 = new isc_blob_handle_impl();
      isc_blob_handle_impl2.setRblId(0);
      isc_tr_handle_impl isc_tr_handle_impl2 = isc_blob_handle_impl0.getTr();
      isc_stmt_handle_impl0.registerTransaction(isc_tr_handle_impl2);
      isc_blob_handle_impl isc_blob_handle_impl3 = new isc_blob_handle_impl();
      isc_blob_handle_impl3.getDb();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLDA0.sqlvar, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((GDSHelper) null, (-370), (byte) (-8), isc_stmt_handle_impl0, fBResultSet0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.363132203143378
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque0 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque1 = new LinkedBlockingDeque<byte[][]>();
      byte[][] byteArray0 = new byte[6][1];
      byte[] byteArray1 = new byte[5];
      linkedBlockingDeque0.toArray();
      linkedList0.addAll((Collection<? extends byte[][]>) linkedBlockingDeque0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque2 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque3 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque4 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque5 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque0.add(byteArray0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque6 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque6.add(byteArray0);
      byte[][] byteArray2 = linkedBlockingDeque6.peekLast();
      linkedBlockingDeque5.add(byteArray2);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      linkedBlockingDeque6.offerFirst(byteArray2, (long) (byte)0, timeUnit0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque7 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque2.add(byteArray2);
      linkedBlockingDeque0.add(byteArray0);
      linkedBlockingDeque7.size();
      linkedList0.removeAll(linkedBlockingDeque4);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      SynchronousQueue<FBLongVarCharField> synchronousQueue0 = new SynchronousQueue<FBLongVarCharField>();
      synchronousQueue0.remainingCapacity();
      linkedList0.pollLast();
      fBCachedFetcher0.insertRow(byteArray2);
      fBCachedFetcher0.next();
      byte[][] byteArray3 = new byte[9][1];
      byteArray3[0] = byteArray1;
      byteArray3[1] = byteArray1;
      byteArray3[2] = byteArray1;
      byteArray3[3] = byteArray1;
      byteArray3[4] = byteArray1;
      byteArray3[5] = byteArray1;
      byteArray3[6] = byteArray1;
      byteArray3[7] = byteArray1;
      byteArray3[8] = byteArray1;
      fBCachedFetcher0.updateRow(byteArray3);
      assertFalse(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.344744728858361
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer.getInteger((String) null);
      Integer.compareUnsigned((-1), (-1));
      byte[][] byteArray0 = new byte[0][5];
      linkedList0.add(byteArray0);
      Integer integer0 = new Integer((-25));
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer.getInteger("", (Integer) null);
      Integer.remainderUnsigned(4911, (-1));
      Integer.toUnsignedLong(4911);
      Integer.getInteger("F(!=sf5E+");
      Integer integer1 = new Integer((byte)50);
      Integer.divideUnsigned(2584, 3087);
      Integer.getInteger("", (Integer) null);
      Integer.toUnsignedString((-1));
      Integer.toUnsignedLong(3087);
      Integer.getInteger((String) null, integer0);
      Integer integer2 = new Integer((-1134));
      Integer.compare((-25), (-1134));
      Integer integer3 = new Integer((-1));
      Integer.compare((-25), (byte)50);
      Integer integer4 = new Integer((-25));
      Integer integer5 = new Integer((-25));
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.insertRow(byteArray0);
      fBCachedFetcher0.deleteRow();
      assertFalse(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque0 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque1 = new LinkedBlockingDeque<byte[][]>();
      byte[] byteArray0 = new byte[5];
      linkedBlockingDeque0.toArray();
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      linkedList0.addAll((Collection<? extends byte[][]>) linkedBlockingDeque0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque2 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque3 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque4 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque4.peekLast();
      byte[][] byteArray1 = new byte[9][7];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque5 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque2.peekLast();
      Object object0 = new Object();
      linkedList0.removeLastOccurrence(object0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque6 = new LinkedBlockingDeque<byte[][]>();
      linkedList0.removeAll(linkedBlockingDeque2);
      linkedBlockingDeque6.peekLast();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque7 = new LinkedBlockingDeque<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.removeAll(linkedBlockingDeque5);
      linkedList0.clone();
      linkedList1.offerFirst(byteArray1);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1437065979373684
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = new byte[8][4];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-47);
      byteArray1[1] = (byte) (-95);
      byteArray1[2] = (byte) (-98);
      byteArray1[3] = (byte) (-110);
      byteArray1[4] = (byte) (-44);
      byteArray1[5] = (byte) (-50);
      byteArray1[6] = (byte) (-20);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-110);
      byteArray2[1] = (byte) (-20);
      byteArray2[2] = (byte) (-98);
      byteArray2[3] = (byte) (-95);
      byteArray2[4] = (byte) (-20);
      byteArray2[5] = (byte) (-95);
      byteArray2[6] = (byte) (-95);
      byteArray2[7] = (byte) (-110);
      byteArray2[8] = (byte) (-110);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte) (-110);
      byteArray3[1] = (byte) (-110);
      byteArray3[2] = (byte) (-50);
      byteArray3[3] = (byte) (-20);
      byteArray3[4] = (byte) (-110);
      byteArray3[5] = (byte) (-44);
      byteArray3[6] = (byte) (-110);
      byteArray3[7] = (byte) (-95);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte) (-44);
      byteArray4[1] = (byte) (-44);
      byteArray4[2] = (byte) (-39);
      byteArray4[3] = (byte) (-95);
      byteArray4[4] = (byte) (-34);
      byteArray4[5] = (byte)64;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[9];
      byteArray5[0] = (byte) (-20);
      byteArray5[1] = (byte) (-34);
      byteArray5[2] = (byte) (-44);
      byteArray5[3] = (byte) (-112);
      byteArray5[4] = (byte) (-110);
      byteArray5[5] = (byte)2;
      byteArray5[6] = (byte) (-39);
      byteArray5[7] = (byte)38;
      byteArray5[8] = (byte) (-47);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[3];
      byteArray6[0] = (byte) (-39);
      byteArray6[1] = (byte) (-110);
      byteArray6[2] = (byte) (-20);
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[7];
      byteArray7[0] = (byte) (-98);
      byteArray7[1] = (byte) (-95);
      byteArray7[2] = (byte) (-50);
      byteArray7[3] = (byte) (-110);
      byteArray7[4] = (byte) (-20);
      byteArray7[5] = (byte) (-44);
      byteArray7[6] = (byte) (-20);
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[5];
      byteArray8[0] = (byte) (-47);
      byteArray8[1] = (byte) (-34);
      byteArray8[2] = (byte) (-34);
      byteArray8[3] = (byte) (-44);
      byteArray8[4] = (byte) (-34);
      byteArray0[7] = byteArray8;
      linkedList0.add(byteArray0);
      linkedList0.forEach(consumer0);
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isLast();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = null;
      try {
        internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator(internalTransactionCoordinator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator$MetaDataTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      byte[][] byteArray0 = new byte[6][0];
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((List<byte[][]>) null, (FBObjectListener.FetcherListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.964384998359833
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[9][7];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-119);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-119);
      byteArray2[1] = (byte) (-119);
      byteArray2[2] = (byte) (-119);
      linkedList0.add(byteArray0);
      fBCachedFetcher0.relative((-1));
      linkedList0.spliterator();
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher1.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      XSQLDA xSQLDA0 = new XSQLDA(1);
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl2 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      byte[] byteArray0 = new byte[25];
      isc_blob_handle_impl0.setBlobId(1);
      byteArray0[8] = (byte)50;
      xSQLDA0.sqld = (int) (byte)38;
      xSQLDA0.sqln = (int) (byte)0;
      byteArray0[10] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-31);
      xSQLDA0.version = (int) (byte)3;
      byteArray0[8] = (byte)38;
      xSQLDA0.blr = byteArray0;
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      isc_blob_handle_impl1.setBlobId(1966L);
      isc_blob_handle_impl1.setRblId(1);
      isc_blob_handle_impl0.setRblId(0);
      isc_blob_handle_impl0.getTr();
      isc_stmt_handle_impl0.registerTransaction((AbstractIscTrHandle) null);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.toArray();
      byte[][] byteArray1 = new byte[2][7];
      byteArray1[0] = byteArray0;
      byte[] byteArray2 = new byte[0];
      byteArray1[1] = byteArray2;
      linkedList0.add(byteArray1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative(335544738);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1437065979373684
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[6][0];
      byte[] byteArray1 = new byte[3];
      linkedList0.listIterator();
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      linkedList0.add(byteArray0);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      MockThread mockThread0 = new MockThread();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      databaseParameterBufferImp0.getArgumentAsInt((-59));
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp1.hasArgument((-59));
      byte[] byteArray0 = new byte[18];
      databaseParameterBufferImp1.getArgumentAsString((-59));
      DatabaseParameterBufferImp databaseParameterBufferImp2 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp2.addArgument((-2), "PURE_JAVA");
      databaseParameterBufferImp1.getArgumentAsString(881);
      databaseParameterBufferImp0.getArgumentAsInt(335544738);
      databaseParameterBufferImp0.addArgument((int) (byte) (-1), byteArray0);
      databaseParameterBufferImp1.addArgument(2902, 1998);
      DatabaseParameterBufferImp databaseParameterBufferImp3 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.getLength();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DatabaseParameterBufferImp databaseParameterBufferImp4 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp4.addArgument((-59));
      databaseParameterBufferImp4.addArgument(336330798);
      byte[][] byteArray1 = new byte[6][3];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      byteArray1[3] = byteArray0;
      byteArray1[4] = byteArray0;
      byteArray1[5] = byteArray0;
      linkedList0.add(byteArray1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute((byte) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8809457317913751
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate0);
      predicate4.or(predicate1);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate6.and(predicate2);
      byte[][] byteArray0 = new byte[8][8];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)38;
      byteArray2[1] = (byte) (-2);
      byteArray2[2] = (byte) (-128);
      byteArray2[3] = (byte) (-17);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)38;
      byteArray3[1] = (byte) (-2);
      byteArray3[2] = (byte) (-17);
      byteArray3[3] = (byte) (-2);
      byteArray3[4] = (byte)57;
      byteArray3[5] = (byte) (-128);
      byteArray3[6] = (byte) (-17);
      byteArray3[7] = (byte) (-17);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte)57;
      byteArray4[1] = (byte)38;
      byteArray4[2] = (byte) (-17);
      byteArray4[3] = (byte) (-128);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[0];
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[8];
      byteArray6[0] = (byte)57;
      byteArray6[1] = (byte)38;
      byteArray6[2] = (byte) (-17);
      byteArray6[3] = (byte)38;
      byteArray6[4] = (byte) (-17);
      byteArray6[5] = (byte) (-128);
      byteArray6[6] = (byte) (-2);
      byteArray6[7] = (byte)57;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[6];
      byteArray7[0] = (byte)38;
      byteArray7[1] = (byte)38;
      byteArray7[2] = (byte)57;
      byteArray7[3] = (byte) (-2);
      byteArray7[4] = (byte) (-2);
      byteArray7[5] = (byte) (-17);
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[0];
      byteArray0[7] = byteArray8;
      linkedList0.add(byteArray0);
      Predicate<Object> predicate8 = predicate3.and(predicate7);
      Predicate<Object> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate5.negate();
      predicate4.test(predicate3);
      Predicate<Object> predicate11 = predicate0.negate();
      Integer.toUnsignedLong((-1858));
      predicate2.negate();
      predicate11.or(predicate0);
      Predicate<Object> predicate12 = predicate6.negate();
      predicate10.and(predicate12);
      Predicate<Object> predicate13 = predicate0.and(predicate11);
      predicate10.negate();
      Predicate<Object> predicate14 = predicate8.negate();
      predicate14.and(predicate4);
      predicate14.and(predicate2);
      predicate6.or(predicate3);
      predicate7.and(predicate14);
      predicate9.negate();
      predicate1.and(predicate13);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.relative((-1136));
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.995295628324261
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque0 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque1 = new LinkedBlockingDeque<byte[][]>();
      byte[][] byteArray0 = new byte[2][6];
      byte[] byteArray1 = new byte[3];
      byteArray0[1] = byteArray1;
      linkedBlockingDeque0.add(byteArray0);
      linkedBlockingDeque0.toArray();
      linkedList0.addAll((Collection<? extends byte[][]>) linkedBlockingDeque0);
      linkedBlockingDeque1.add(byteArray0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque2 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque3 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque4 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque0.toString();
      linkedBlockingDeque0.add(byteArray0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      linkedBlockingDeque4.offerLast(byteArray0, (-4829L), timeUnit0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque5 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque5.add(byteArray0);
      linkedBlockingDeque5.offerLast(byteArray0);
      linkedList0.add(byteArray0);
      linkedBlockingDeque4.peek();
      linkedBlockingDeque1.offerLast(byteArray0);
      linkedBlockingDeque4.add(byteArray0);
      linkedBlockingDeque5.offerFirst(byteArray0, (long) (byte)0, timeUnit0);
      linkedBlockingDeque3.offerFirst(byteArray0, (-755L), timeUnit0);
      linkedBlockingDeque1.spliterator();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque6 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque1.add(byteArray0);
      linkedBlockingDeque6.add(byteArray0);
      linkedBlockingDeque6.add(byteArray0);
      linkedBlockingDeque6.addAll(linkedBlockingDeque2);
      linkedBlockingDeque0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.first();
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7754337976947767
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      MockThread mockThread0 = new MockThread();
      byte[][] byteArray0 = new byte[2][0];
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0141266108053313
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque0 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque1 = new LinkedBlockingDeque<byte[][]>();
      byte[][] byteArray0 = new byte[8][1];
      byte[] byteArray1 = new byte[5];
      linkedBlockingDeque0.toArray();
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte)89;
      linkedList0.addAll((Collection<? extends byte[][]>) linkedBlockingDeque0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque2 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque3 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque0.add(byteArray0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque4 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque4.add(byteArray0);
      linkedBlockingDeque4.peekLast();
      byte[][] byteArray2 = new byte[9][7];
      byteArray2[0] = byteArray1;
      byteArray2[1] = byteArray1;
      byteArray2[2] = byteArray1;
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque5 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque5.add(byteArray0);
      linkedBlockingDeque0.add(byteArray2);
      Consumer<byte[][]> consumer0 = (Consumer<byte[][]>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      linkedBlockingDeque2.putLast(byteArray2);
      byte[][] byteArray3 = linkedBlockingDeque0.peekLast();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque6 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque0.remainingCapacity();
      linkedBlockingDeque3.size();
      linkedBlockingDeque5.add(byteArray3);
      linkedList0.addAll((Collection<? extends byte[][]>) linkedBlockingDeque2);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      fBCachedFetcher0.updateRow(byteArray0);
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.negate();
      predicate6.and(predicate7);
      Predicate<Object> predicate8 = predicate1.negate();
      predicate4.and(predicate2);
      Predicate<Object> predicate9 = predicate4.or(predicate1);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate<Object> predicate12 = predicate6.negate();
      Predicate.isEqual((Object) predicate11);
      Predicate<Object> predicate13 = predicate10.negate();
      predicate12.test(predicate1);
      Predicate<Object> predicate14 = predicate6.negate();
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate15 = predicate11.negate();
      Predicate<Object> predicate16 = predicate14.negate();
      Predicate<Object> predicate17 = predicate3.negate();
      Predicate<Object> predicate18 = predicate4.negate();
      predicate4.and(predicate11);
      Predicate<Object> predicate19 = predicate18.negate();
      Predicate<Object> predicate20 = predicate15.negate();
      predicate5.and(predicate16);
      predicate15.negate();
      Predicate<Object> predicate21 = predicate13.and(predicate19);
      Predicate.isEqual((Object) predicate20);
      predicate17.and(predicate12);
      predicate8.negate();
      predicate21.negate();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(boolean0);
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1084013788541878
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.beforeFirst();
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate6.and(predicate7);
      Predicate<Object> predicate9 = predicate1.negate();
      Predicate<Object> predicate10 = predicate4.and(predicate2);
      Predicate<Object> predicate11 = predicate4.or(predicate1);
      Predicate<Object> predicate12 = predicate11.negate();
      Predicate<Object> predicate13 = predicate5.negate();
      Predicate<Object> predicate14 = predicate6.negate();
      Predicate.isEqual((Object) predicate13);
      Predicate<Object> predicate15 = predicate12.negate();
      predicate14.test(predicate1);
      Predicate<Object> predicate16 = predicate6.negate();
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate17 = predicate10.negate();
      Predicate<Object> predicate18 = predicate16.negate();
      Predicate<Object> predicate19 = predicate3.negate();
      Predicate<Object> predicate20 = predicate4.negate();
      predicate4.and(predicate13);
      Predicate<Object> predicate21 = predicate20.negate();
      Predicate<Object> predicate22 = predicate17.negate();
      predicate5.and(predicate18);
      predicate8.negate();
      Predicate<Object> predicate23 = predicate15.and(predicate21);
      Predicate.isEqual((Object) predicate22);
      predicate19.and(predicate14);
      predicate9.negate();
      predicate23.negate();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(boolean0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.180066384203239
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setRsr_rdb((isc_db_handle_impl) null);
      XSQLDA xSQLDA0 = new XSQLDA(0);
      XSQLDA xSQLDA1 = new XSQLDA();
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl2 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      xSQLDA0.version = 0;
      isc_db_handle_impl0.getSubject();
      isc_db_handle_impl0.setSubject((Subject) null);
      isc_db_handle_impl0.getWarnings();
      isc_db_handle_impl0.getRdbId();
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.setDb(isc_db_handle_impl0);
      xSQLDA1.ioLength = null;
      GDSException gDSException0 = new GDSException(0);
      isc_blob_handle_impl0.addWarning(gDSException0);
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.getTr();
      GDSException gDSException1 = new GDSException(1, (String) null);
      gDSException1.fillInStackTrace();
      isc_blob_handle_impl0.addWarning(gDSException1);
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.clearRows();
      isc_stmt_handle_impl0.setRsr_rdb((isc_db_handle_impl) null);
      isc_stmt_handle_impl3.statement = "T*]5ANH`0zoob-";
      xSQLDA0.sqln = 0;
      isc_stmt_handle_impl3.setOutSqlda(xSQLDA0);
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl2 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLDA0.sqlvar, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.getRowNum();
      FBCachedFetcher fBCachedFetcher1 = null;
      try {
        fBCachedFetcher1 = new FBCachedFetcher((GDSHelper) null, 1, 3, isc_stmt_handle_impl0, fBResultSet0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      XSQLDA xSQLDA0 = new XSQLDA(0);
      isc_stmt_handle_impl0.getInSqlda();
      isc_stmt_handle_impl0.setAllRowsFetched(true);
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl2 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      isc_stmt_handle_impl0.statement = isc_stmt_handle_impl0.statement;
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl0);
      isc_blob_handle_impl0.getDb();
      isc_tr_handle_impl isc_tr_handle_impl1 = isc_blob_handle_impl0.getTr();
      isc_tr_handle_impl1.registerStatementWithTransaction(isc_stmt_handle_impl1);
      isc_tr_handle_impl0.unregisterStatementFromTransaction(isc_stmt_handle_impl2);
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl1);
      isc_blob_handle_impl0.setDb((org.firebirdsql.gds.impl.jni.isc_db_handle_impl) null);
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl2 = new isc_blob_handle_impl();
      isc_tr_handle_impl isc_tr_handle_impl2 = isc_blob_handle_impl0.getTr();
      isc_tr_handle_impl1.forgetResultSets();
      isc_tr_handle_impl2.forgetResultSets();
      isc_stmt_handle_impl0.registerTransaction(isc_tr_handle_impl2);
      isc_blob_handle_impl isc_blob_handle_impl3 = new isc_blob_handle_impl();
      isc_blob_handle_impl3.getDb();
      isc_tr_handle_impl isc_tr_handle_impl3 = isc_blob_handle_impl0.getTr();
      isc_blob_handle_impl1.setTr(isc_tr_handle_impl3);
      isc_blob_handle_impl1.setRblId(3);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLDA0.sqlvar, linkedList0);
      isc_blob_handle_impl1.setRblId(5);
      isc_blob_handle_impl3.getTr();
      isc_blob_handle_impl3.setBlobId(3);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isEmpty();
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[7][5];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte) (-44);
      byteArray1[2] = (byte) (-20);
      byteArray1[3] = (byte)122;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-20);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-69);
      byteArray3[1] = (byte)122;
      byteArray3[2] = (byte) (-69);
      byteArray3[3] = (byte) (-44);
      byteArray3[4] = (byte)122;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte) (-69);
      byteArray4[1] = (byte) (-69);
      byteArray4[2] = (byte)122;
      byteArray4[3] = (byte) (-20);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte) (-63);
      byteArray5[1] = (byte)53;
      byteArray5[2] = (byte) (-69);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[8];
      byteArray6[0] = (byte)122;
      byteArray6[1] = (byte)122;
      byteArray6[2] = (byte) (-63);
      byteArray6[3] = (byte) (-44);
      byteArray6[4] = (byte)53;
      byteArray6[5] = (byte) (-20);
      byteArray6[6] = (byte)122;
      byteArray6[7] = (byte) (-20);
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[2];
      byteArray7[0] = (byte) (-20);
      byteArray7[1] = (byte) (-65);
      byteArray0[6] = byteArray7;
      linkedList0.addLast(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isAfterLast();
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = null;
      try {
        internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator(internalTransactionCoordinator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator$MetaDataTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer integer0 = new Integer(160);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      boolean boolean0 = linkedList0.removeIf(predicate3);
      linkedList0.clear();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.close();
      SynchronousQueue<FBLongVarCharField> synchronousQueue0 = new SynchronousQueue<FBLongVarCharField>(true);
      synchronousQueue0.remainingCapacity();
      synchronousQueue0.peek();
      boolean boolean1 = linkedList0.removeAll(synchronousQueue0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[] byteArray0 = new byte[1];
      byte[][] byteArray1 = new byte[5][1];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      fBCachedFetcher0.isFirst();
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      linkedList0.add(byteArray1);
      FBManagedConnection fBManagedConnection0 = null;
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection((FBManagedConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.0108940605206342
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque0 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque1 = new LinkedBlockingDeque<byte[][]>();
      byte[][] byteArray0 = new byte[8][1];
      byte[] byteArray1 = new byte[5];
      linkedBlockingDeque0.toArray();
      linkedList0.addAll((Collection<? extends byte[][]>) linkedBlockingDeque0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque2 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque3 = new LinkedBlockingDeque<byte[][]>();
      byte[][] byteArray2 = new byte[5][0];
      byteArray2[0] = byteArray1;
      byteArray2[2] = byteArray1;
      byteArray2[3] = byteArray1;
      byteArray2[4] = byteArray1;
      linkedBlockingDeque0.add(byteArray2);
      linkedBlockingDeque1.stream();
      linkedList0.clear();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque4 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque0.add(byteArray0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque5 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque5.add(byteArray0);
      byte[][] byteArray3 = linkedBlockingDeque5.peekLast();
      linkedBlockingDeque4.add(byteArray3);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque6 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque3.contains(linkedBlockingDeque6);
      linkedBlockingDeque0.add(byteArray3);
      linkedBlockingDeque0.add(byteArray0);
      linkedBlockingDeque6.size();
      linkedBlockingDeque6.stream();
      linkedList0.removeAll(linkedBlockingDeque3);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.afterLast();
      System.setCurrentTimeMillis((-856L));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer.getInteger((String) null);
      Integer.compareUnsigned((-1), (-1));
      byte[][] byteArray0 = new byte[1][5];
      Integer integer0 = new Integer((-25));
      Integer.getInteger("%Oi5=$8&,", (Integer) null);
      Integer.remainderUnsigned((-1), (-1));
      Integer.compareUnsigned((-1), 0);
      Integer.toUnsignedLong(0);
      Integer integer1 = new Integer((-25));
      Integer.toUnsignedLong(804);
      Integer integer2 = new Integer((byte)50);
      Integer.compareUnsigned((-1), (-1115));
      Integer.toUnsignedLong(0);
      linkedList0.add(byteArray0);
      Integer.sum((-6), (-6));
      Integer.divideUnsigned(0, 3073);
      Integer.getInteger("%Oi5=$8&,", (Integer) null);
      Integer.toUnsignedLong(3073);
      Integer integer3 = new Integer((byte)50);
      Integer integer4 = new Integer((-1135));
      Integer.compare((-25), (-1135));
      Integer integer5 = new Integer((-1));
      Integer integer6 = new Integer((byte)50);
      Integer integer7 = new Integer((-25));
      Integer integer8 = new Integer((-25));
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.addArgument(721);
      byte[] byteArray0 = new byte[21];
      byteArray0[8] = (byte)59;
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte)59;
      byteArray0[4] = (byte)48;
      databaseParameterBufferImp0.addArgument((-224), byteArray0);
      databaseParameterBufferImp0.getArgumentAsInt((-58));
      databaseParameterBufferImp0.addArgument((-58));
      databaseParameterBufferImp0.getArgumentAsString(95);
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp2 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp1.hasArgument((-58));
      byte[] byteArray1 = new byte[3];
      databaseParameterBufferImp1.getArgumentAsString((-58));
      DatabaseParameterBufferImp databaseParameterBufferImp3 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp3.write((XdrOutputStream) null);
      databaseParameterBufferImp0.getArgumentAsInt((byte)48);
      databaseParameterBufferImp0.addArgument((int) (byte)0, byteArray1);
      databaseParameterBufferImp1.addArgument((int) (byte)59, 335544765);
      databaseParameterBufferImp1.addArgument(2902, 2004);
      databaseParameterBufferImp0.getLength();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DatabaseParameterBufferImp databaseParameterBufferImp4 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp4.addArgument(721, byteArray1);
      databaseParameterBufferImp4.hasArgument(0);
      databaseParameterBufferImp4.addArgument((-58));
      databaseParameterBufferImp4.addArgument(95);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.absolute(335544765);
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.addArgument(721);
      byte[] byteArray0 = new byte[21];
      byteArray0[8] = (byte)59;
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte)59;
      byteArray0[4] = (byte)48;
      databaseParameterBufferImp0.addArgument((-223), byteArray0);
      databaseParameterBufferImp0.getArgumentAsInt((-58));
      databaseParameterBufferImp0.addArgument((-58));
      databaseParameterBufferImp0.getArgumentAsString(95);
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp2 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp1.hasArgument((-58));
      byte[] byteArray1 = new byte[3];
      databaseParameterBufferImp1.getArgumentAsString((-58));
      DatabaseParameterBufferImp databaseParameterBufferImp3 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp3.write((XdrOutputStream) null);
      databaseParameterBufferImp0.getArgumentAsInt((byte)48);
      databaseParameterBufferImp0.addArgument((int) (byte)0, byteArray1);
      databaseParameterBufferImp1.addArgument((-2667), 335544765);
      databaseParameterBufferImp1.addArgument(2902, 2004);
      databaseParameterBufferImp0.getLength();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DatabaseParameterBufferImp databaseParameterBufferImp4 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp4.addArgument((-2667), byteArray1);
      databaseParameterBufferImp4.hasArgument(0);
      databaseParameterBufferImp4.addArgument((-58));
      databaseParameterBufferImp4.addArgument(95);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.absolute(335544765);
      assertFalse(boolean0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate6.and(predicate0);
      Predicate<Object> predicate8 = predicate1.negate();
      predicate4.and(predicate2);
      predicate4.or(predicate1);
      Predicate<Object> predicate9 = predicate4.negate();
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate3.negate();
      Predicate<Object> predicate12 = predicate9.negate();
      predicate11.test(predicate1);
      Predicate<Object> predicate13 = predicate1.negate();
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate14 = predicate3.negate();
      Predicate<Object> predicate15 = predicate13.negate();
      Predicate<Object> predicate16 = predicate5.negate();
      predicate1.negate();
      predicate4.and(predicate10);
      predicate4.negate();
      Predicate<Object> predicate17 = predicate14.negate();
      predicate5.and(predicate15);
      predicate7.negate();
      Predicate.isEqual(object0);
      predicate12.and(predicate4);
      Predicate.isEqual((Object) predicate17);
      predicate16.and(predicate11);
      predicate8.negate();
      predicate12.and(predicate11);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setSingletonResult(false);
      XSQLDA xSQLDA0 = new XSQLDA(0);
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      isc_blob_handle_impl1.getTr();
      isc_blob_handle_impl isc_blob_handle_impl2 = new isc_blob_handle_impl();
      isc_blob_handle_impl1.setBlobId(61L);
      isc_blob_handle_impl isc_blob_handle_impl3 = new isc_blob_handle_impl();
      isc_blob_handle_impl2.setRblId((-1322));
      isc_blob_handle_impl isc_blob_handle_impl4 = new isc_blob_handle_impl();
      isc_blob_handle_impl2.setRblId(4);
      isc_blob_handle_impl2.setRblId((-4250));
      isc_blob_handle_impl isc_blob_handle_impl5 = new isc_blob_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl6 = new isc_blob_handle_impl();
      isc_blob_handle_impl1.setBlobId(5);
      isc_blob_handle_impl isc_blob_handle_impl7 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.setBlobId((-2182L));
      isc_blob_handle_impl7.setRblId(1);
      isc_blob_handle_impl isc_blob_handle_impl8 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.getTr();
      isc_blob_handle_impl4.setBlobId(4650L);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[7][0];
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isBeforeFirst();
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = null;
      try {
        internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator(internalTransactionCoordinator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator$MetaDataTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      MockThread mockThread0 = new MockThread();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isBeforeFirst();
      assertFalse(boolean0);
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate6.and(predicate7);
      Predicate<Object> predicate9 = predicate1.negate();
      Predicate<Object> predicate10 = predicate4.and(predicate2);
      Predicate<Object> predicate11 = predicate4.or(predicate1);
      Predicate<Object> predicate12 = predicate11.negate();
      Predicate<Object> predicate13 = predicate5.negate();
      Predicate<Object> predicate14 = predicate6.negate();
      Predicate.isEqual((Object) predicate13);
      Predicate<Object> predicate15 = predicate12.negate();
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate16 = predicate10.negate();
      Predicate<Object> predicate17 = predicate8.negate();
      Predicate<Object> predicate18 = predicate3.negate();
      Predicate<Object> predicate19 = predicate4.negate();
      predicate4.and(predicate13);
      Predicate<Object> predicate20 = predicate19.negate();
      Predicate<Object> predicate21 = predicate16.negate();
      predicate5.and(predicate17);
      predicate8.negate();
      Predicate<Object> predicate22 = predicate15.and(predicate20);
      Predicate.isEqual((Object) predicate21);
      predicate18.and(predicate14);
      predicate9.negate();
      predicate22.negate();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(boolean0);
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque0 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque1 = new LinkedBlockingDeque<byte[][]>();
      byte[][] byteArray0 = new byte[2][6];
      byte[] byteArray1 = new byte[3];
      byteArray0[1] = byteArray1;
      linkedBlockingDeque0.add(byteArray0);
      linkedBlockingDeque0.toArray();
      linkedList0.addAll((Collection<? extends byte[][]>) linkedBlockingDeque0);
      linkedBlockingDeque1.add(byteArray0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque2 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque3 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque4 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque0.toString();
      linkedBlockingDeque0.add(byteArray0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      linkedBlockingDeque4.offerLast(byteArray0, (-4829L), timeUnit0);
      linkedBlockingDeque4.add(byteArray0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque5 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque5.add(byteArray0);
      linkedBlockingDeque4.peek();
      linkedBlockingDeque4.removeLast();
      byte[][] byteArray2 = linkedBlockingDeque5.peekLast();
      linkedBlockingDeque4.add(byteArray2);
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      linkedBlockingDeque5.offerFirst(byteArray2, (long) (byte)0, timeUnit1);
      linkedBlockingDeque3.offerFirst(byteArray2, (-755L), timeUnit1);
      linkedBlockingDeque1.spliterator();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque6 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque1.add(byteArray2);
      linkedBlockingDeque6.offer(byteArray2, (-755L), timeUnit1);
      linkedBlockingDeque6.add(byteArray2);
      linkedBlockingDeque6.add(byteArray0);
      linkedBlockingDeque0.add(byteArray0);
      linkedBlockingDeque6.size();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, int0);
      assertFalse(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate6.and(predicate7);
      Predicate<Object> predicate9 = predicate1.negate();
      predicate4.and(predicate2);
      Predicate<Object> predicate10 = predicate4.or(predicate1);
      predicate10.negate();
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate<Object> predicate12 = predicate6.negate();
      Predicate.isEqual((Object) predicate11);
      predicate12.test(predicate1);
      Predicate<Object> predicate13 = predicate6.negate();
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate14 = predicate11.negate();
      Predicate<Object> predicate15 = predicate13.negate();
      Predicate<Object> predicate16 = predicate3.negate();
      Predicate<Object> predicate17 = predicate4.negate();
      predicate4.and(predicate11);
      Predicate<Object> predicate18 = predicate17.negate();
      Predicate<Object> predicate19 = predicate14.negate();
      predicate5.and(predicate15);
      predicate8.negate();
      predicate7.and(predicate18);
      Predicate.isEqual((Object) predicate19);
      predicate16.and(predicate12);
      predicate9.negate();
      predicate3.and(predicate12);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.relative((-1265));
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate6.and(predicate7);
      Predicate<Object> predicate9 = predicate1.negate();
      Predicate<Object> predicate10 = predicate4.and(predicate2);
      Predicate<Object> predicate11 = predicate4.or(predicate1);
      Predicate<Object> predicate12 = predicate11.negate();
      Predicate<Object> predicate13 = predicate6.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate14 = predicate12.negate();
      predicate13.test(predicate1);
      Predicate<Object> predicate15 = predicate6.negate();
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate16 = predicate10.negate();
      Predicate<Object> predicate17 = predicate15.negate();
      Predicate<Object> predicate18 = predicate3.negate();
      Predicate<Object> predicate19 = predicate4.negate();
      predicate4.and(predicate3);
      Predicate<Object> predicate20 = predicate19.negate();
      Predicate<Object> predicate21 = predicate16.negate();
      predicate5.and(predicate17);
      predicate8.negate();
      predicate14.and(predicate20);
      Predicate.isEqual((Object) predicate21);
      predicate18.and(predicate13);
      predicate9.negate();
      predicate14.and(predicate13);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.relative((-1265));
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.9253539308675658
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      MockThread mockThread0 = new MockThread();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp1.hasArgument((-59));
      byte[] byteArray0 = new byte[18];
      databaseParameterBufferImp1.getArgumentAsString((-59));
      DatabaseParameterBufferImp databaseParameterBufferImp2 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp2.getArgumentAsString(335544827);
      databaseParameterBufferImp2.addArgument((-2), "PURE_JAVA");
      databaseParameterBufferImp0.getArgumentAsInt(335544738);
      databaseParameterBufferImp0.addArgument((int) (byte) (-1), byteArray0);
      databaseParameterBufferImp1.addArgument(2902, (int) (byte) (-1));
      DatabaseParameterBufferImp databaseParameterBufferImp3 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.getLength();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DatabaseParameterBufferImp databaseParameterBufferImp4 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp4.addArgument((-59));
      databaseParameterBufferImp4.addArgument(336330798);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      databaseParameterBufferImp4.hasArgument(401);
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      byte[][] byteArray1 = new byte[5][3];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      byteArray1[3] = byteArray0;
      byte[] byteArray2 = new byte[0];
      byteArray1[4] = byteArray2;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.clear();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.last();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection((FBManagedConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.9487205928347628
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque0 = new LinkedBlockingDeque<byte[][]>();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque1 = new LinkedBlockingDeque<byte[][]>();
      byte[][] byteArray0 = new byte[8][1];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte)89;
      linkedList0.addAll((Collection<? extends byte[][]>) linkedBlockingDeque0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque2 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque0.add(byteArray0);
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque3 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque3.add(byteArray0);
      linkedBlockingDeque3.peekLast();
      byte[][] byteArray2 = new byte[9][7];
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque1.forEach(consumer0);
      byteArray2[0] = byteArray1;
      byteArray2[1] = byteArray1;
      byteArray2[2] = byteArray1;
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque4 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque4.add(byteArray0);
      linkedBlockingDeque0.add(byteArray2);
      Consumer<byte[][]> consumer1 = (Consumer<byte[][]>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer1);
      linkedBlockingDeque0.putLast(byteArray2);
      linkedBlockingDeque0.peekLast();
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque5 = new LinkedBlockingDeque<byte[][]>();
      linkedBlockingDeque0.remainingCapacity();
      linkedBlockingDeque2.size();
      linkedList0.addAll((Collection<? extends byte[][]>) linkedBlockingDeque1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[1][5];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-16);
      byteArray1[1] = (byte)6;
      byteArray1[2] = (byte) (-114);
      byteArray0[0] = byteArray1;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[7][3];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)41;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)41;
      byteArray2[1] = (byte)41;
      byteArray2[2] = (byte)41;
      byteArray2[3] = (byte)41;
      byteArray2[4] = (byte)41;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte)41;
      byteArray3[2] = (byte)41;
      byteArray3[3] = (byte)41;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte) (-1);
      byteArray4[1] = (byte) (-1);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[8];
      byteArray5[0] = (byte) (-1);
      byteArray5[1] = (byte)41;
      byteArray5[2] = (byte)70;
      byteArray5[3] = (byte) (-1);
      byteArray5[4] = (byte) (-1);
      byteArray5[5] = (byte) (-1);
      byteArray5[6] = (byte) (-1);
      byteArray5[7] = (byte)1;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[1];
      byteArray6[0] = (byte)41;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[4];
      byteArray7[0] = (byte)41;
      byteArray7[1] = (byte)107;
      byteArray7[2] = (byte)1;
      byteArray7[3] = (byte) (-1);
      byteArray0[6] = byteArray7;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate5.and(predicate0);
      Predicate<Object> predicate7 = predicate1.negate();
      predicate5.negate();
      Predicate<Object> predicate8 = predicate3.or(predicate1);
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate4.negate();
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate<Object> predicate12 = predicate9.negate();
      predicate11.test(predicate1);
      Predicate<Object> predicate13 = predicate5.negate();
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate14 = predicate1.negate();
      Predicate<Object> predicate15 = predicate13.negate();
      Predicate<Object> predicate16 = predicate3.negate();
      Predicate<Object> predicate17 = predicate1.negate();
      predicate0.and(predicate10);
      predicate17.negate();
      Predicate<Object> predicate18 = predicate14.negate();
      predicate4.and(predicate15);
      predicate6.negate();
      Predicate.isEqual(object0);
      predicate12.and(predicate0);
      Predicate.isEqual((Object) predicate18);
      predicate16.and(predicate11);
      predicate7.negate();
      predicate12.and(predicate11);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.relative((-1265));
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[7];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[4] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[5] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[6] = fBLongVarCharField0;
      linkedList0.toArray(fBLongVarCharFieldArray0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.previous();
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
  }
}
