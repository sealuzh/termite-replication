/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 08:59:10 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.697323849299565
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject.doubleToString(3281.5415);
      JSONObject.quote("9yN^qr");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("9yN^qr", 15);
      JSONObject jSONObject1 = jSONObject0.put("[LfQ9B2*qWtb", (double) 0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONObject jSONObject2 = jSONObject0.put("9yN^qr", 15);
      jSONObject2.toJSONArray(jSONArray0);
      Float.valueOf(0.0F);
      JSONObject.testValidity("3281.5415");
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      JSONObject.quote("[LfQ9B2*qWtb");
      jSONObject1.getDouble("9yN^qr");
      try { 
        jSONObject1.getJSONObject("[LfQ9B2*qWtb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[LfQ9B2*qWtb\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2329431780124764
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.valueToString(boolean0);
      JSONTokener jSONTokener0 = new JSONTokener("java.lang.Boolean@0000000001");
      JSONObject jSONObject0 = new JSONObject();
      jSONTokener0.next();
      JSONObject.valueToString(jSONObject0);
      jSONTokener0.syntaxError(",!]}@|\"[;=#");
      jSONObject0.optInt("W5;/q38I/TDE)cS3");
      Boolean.compare(true, true);
      jSONObject0.toString(0, 0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "W5;/q38I/TDE)cS3";
      stringArray0[1] = "java.lang.Boolean@0000000001";
      stringArray0[3] = "Un@closed comment";
      stringArray0[5] = "java.lang.Boolean@0000000001";
      stringArray0[6] = "Untermin%ted st_ing";
      stringArray0[7] = ",!]}@|\"[;=#";
      Boolean boolean1 = new Boolean(",!]}@|\"[;=#");
      Long.getLong("java.lang.Boolean@0000000001", 1365L);
      Float float0 = new Float((-1.0F));
      JSONObject.valueToString("Untermin%ted st_ing", 92, 2515);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.close();
      stringWriter0.append((CharSequence) "java.lang.Boolean@0000000001");
      jSONObject0.optString("Un@closed comment", (String) null);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "Untermin%ted st_ing", (-3799), (-12437164));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.658431973742667
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "] is not a JSONObject.";
      jSONObject0.optLong("] is not a JSONObject.");
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", 1927L);
      jSONObject0.getInt("] is not a JSONObject.");
      JSONObject jSONObject2 = jSONObject1.put("] is not a JSONObject.", (double) 1927L);
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject.valueToString(boolean0);
      jSONObject2.optInt("] is not a JSONObject.");
      try { 
        jSONObject1.getJSONObject("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Integer integer0 = new Integer((-400));
      hashMap0.values();
      Long long0 = new Long((-32L));
      hashMap0.put(integer0, long0);
      Set<Map.Entry<Object, Long>> set0 = (Set<Map.Entry<Object, Long>>)hashMap0.entrySet();
      Short short0 = new Short((short)83);
      Float float0 = new Float((float) (short)0);
      Integer integer1 = new Integer((short)0);
      Long long1 = new Long(0L);
      BiFunction<Object, Long, Long> biFunction0 = (BiFunction<Object, Long, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyLong());
      hashMap0.computeIfPresent(integer0, biFunction0);
      Double double0 = new Double(0L);
      Double.isFinite((-1.0));
      Long long2 = new Long((-1L));
      hashMap0.putIfAbsent(set0, long2);
      Boolean boolean0 = new Boolean(true);
      Long.max((-400), (-305L));
      hashMap0.put(double0, (Long) null);
      Short.toUnsignedLong((short)83);
      Short short1 = new Short((short)0);
      HashMap<Long, Integer> hashMap1 = new HashMap<Long, Integer>();
      Short.toUnsignedLong((short) (-3272));
      Integer integer2 = new Integer((short)83);
      Long.remainderUnsigned((-3843L), 1651L);
      Short.valueOf((short)83);
      Short.toUnsignedInt((short) (-3272));
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3200030533729894
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Integer integer0 = new Integer((-400));
      Collection<Long> collection0 = hashMap0.values();
      Long long0 = new Long((-10L));
      hashMap0.put(integer0, long0);
      hashMap0.entrySet();
      Short short0 = new Short((short)49);
      Float float0 = new Float((float) (short)0);
      Float.max(2030.6969F, 1.0F);
      Double double0 = new Double(1046.124);
      HashMap<Long, Double> hashMap1 = new HashMap<Long, Double>();
      Long.getLong(",\n", (Long) null);
      hashMap1.replace((Long) null, double0, double0);
      hashMap1.replace(long0, double0, double0);
      hashMap1.put(long0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("iYkgy>0$`!C}", (Map) hashMap0);
      JSONObject.valueToString(collection0, (short)0, (-1112));
      Float float1 = new Float((double) 2030.6969F);
      HashMap<Short, Float> hashMap2 = new HashMap<Short, Float>();
      BiFunction<Object, Long, Long> biFunction0 = (BiFunction<Object, Long, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Short short1 = new Short((short) (-3758));
      JSONObject.quote("[java.lang.Long@0000000005]");
      jSONObject1.optJSONArray("9l6Ja pU%faj~T");
      try { 
        jSONObject1.getBoolean("[java.lang.Long@0000000005]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[java.lang.Long@0000000005]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{%SzU'eHI},i!oG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of {%SzU'eHI},i!oG
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8290654625355067
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Integer integer0 = new Integer((-400));
      hashMap0.values();
      Long long0 = new Long((-10L));
      hashMap0.put(integer0, long0);
      hashMap0.entrySet();
      Short short0 = new Short((short)83);
      Integer integer1 = new Integer((short)83);
      Long long1 = new Long(0L);
      Double double0 = new Double(0L);
      Double.isFinite((-1.0));
      Double.isFinite((-400));
      Long.max((-400), (-305L));
      hashMap0.put(double0, (Long) null);
      Short.toUnsignedLong((short)83);
      Short short1 = new Short((short)83);
      HashMap<Long, Integer> hashMap1 = new HashMap<Long, Integer>();
      Short.toUnsignedLong((short) (-3272));
      Integer integer2 = new Integer((short)83);
      hashMap0.put((Object) null, (Long) null);
      Long.remainderUnsigned((-3843L), 1651L);
      Short short2 = Short.valueOf((short)83);
      JSONObject.valueToString(hashMap0);
      hashMap0.put(short2, long0);
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.263382514323708
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      int int0 = (-522);
      jSONObject0.toString((-522), (-522));
      Float float0 = new Float((float) (-522));
      HashMap<Short, Float> hashMap1 = new HashMap<Short, Float>();
      Double double0 = new Double((-3046.577));
      hashMap0.put((Long) null, double0);
      Boolean boolean1 = new Boolean("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      String string0 = "co";
      Float float1 = new Float(0.0F);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (short)21, (short)21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.732536923403914
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Float float0 = new Float((double) (short)900);
      Float.max(104.18284F, (-1.0F));
      Long long0 = new Long((short)900);
      Integer.getInteger((String) null);
      Short short0 = new Short((short) (-39));
      Long long1 = new Long(1802L);
      Boolean boolean0 = new Boolean("isvalueOf");
      Long.remainderUnsigned((-1311L), (-1078L));
      Double double0 = new Double(0.0);
      Byte byte0 = new Byte((byte)55);
      Integer integer0 = new Integer((byte)118);
      JSONObject jSONObject0 = new JSONObject(byte0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      linkedList0.clone();
      linkedList0.containsAll(linkedList1);
      linkedList1.poll();
      linkedList1.push((JSONArray) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4316244347695988
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (Map) hashMap0);
      HashMap<JSONArray, Byte> hashMap1 = new HashMap<JSONArray, Byte>();
      Byte byte0 = new Byte((byte) (-115));
      Boolean boolean0 = Boolean.FALSE;
      jSONObject1.accumulate("] not found.", boolean0);
      jSONObject0.append("] not found.", (Object) null);
      HashMap<JSONArray, Byte> hashMap2 = new HashMap<JSONArray, Byte>(hashMap1);
      Byte byte1 = new Byte((byte)100);
      Byte byte2 = new Byte((byte) (-4));
      JSONArray jSONArray0 = new JSONArray();
      Byte byte3 = new Byte((byte) (-115));
      Integer integer0 = new Integer(245);
      jSONObject1.optJSONObject("d;z^b3=1mzK<");
      HashMap<JSONArray, Byte> hashMap3 = new HashMap<JSONArray, Byte>();
      Byte byte4 = new Byte((byte)61);
      Double double0 = new Double((byte) (-115));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.154106927631802
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "] ot ound.";
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("] ot ound.", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.accumulate("] ot ound.", "] ot ound.");
      jSONObject0.accumulate("] ot ound.", hashMap0);
      String string1 = "Expected a ',' or '}'";
      short short0 = (short) (-1395);
      Short.valueOf((short) (-1395));
      try { 
        Byte.valueOf("] ot ound.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"] ot ound.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.164168270951795
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Short short0 = new Short((short)900);
      Short.compare((short) (-1242), (short) (-1242));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gettoHexString";
      Float.sum(819.0F, 0);
      Float.sum(1768.74F, 943.60394F);
      Short.compare((short)13, (short) (-1242));
      Float.sum(0.0F, 0.0F);
      Short.compare((short)0, (short)0);
      Float.sum(3424.6F, (short)0);
      Double double0 = new Double(819.0F);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Double.min(Double.NaN, (short) (-1242));
      linkedList0.removeLastOccurrence(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("] not found.", (Collection) linkedList0);
      JSONObject.valueToString(short0, 45, 57);
      jSONObject0.put(")Bx", false);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6337444666655783
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("zVBP\"iCZ", object0);
      jSONObject1.append("zVBP\"iCZ", object0);
      JSONObject jSONObject2 = new JSONObject((Object) "zVBP\"iCZ");
      // Undeclared exception!
      jSONObject2.toString(2217);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.398805401317134
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Integer integer0 = new Integer((-415));
      hashMap0.values();
      Integer.toUnsignedLong((-415));
      Long long0 = new Long((-10L));
      hashMap0.put(integer0, long0);
      hashMap0.entrySet();
      Short short0 = new Short((short)49);
      Float float0 = new Float((float) (short)0);
      Float.max(2030.6969F, 1.0F);
      Long long1 = new Long(0L);
      Double double0 = new Double(0L);
      Double.isFinite(0.0);
      Long.max((-415), (-305L));
      Double.min(0.0, (short)0);
      hashMap0.put(double0, (Long) null);
      Integer integer1 = new Integer((short)0);
      JSONObject jSONObject0 = new JSONObject();
      Float float1 = new Float(2030.6969F);
      String string0 = "xwM+t$PZvM`;%S''8";
      JSONObject jSONObject1 = jSONObject0.put("xwM+t$PZvM`;%S''8", (Object) double0);
      jSONObject1.optDouble("xwM+t$PZvM`;%S''8");
      jSONObject0.isNull("xwM+t$PZvM`;%S''8");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "xwM+t$PZvM`;%S''8", (-54582745), 1391);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.844047895106879
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Integer integer0 = new Integer((-400));
      hashMap0.values();
      Long long0 = new Long((-10L));
      hashMap0.put(integer0, long0);
      hashMap0.entrySet();
      Short short0 = new Short((short)49);
      Float float0 = new Float((float) (short)0);
      Float.max(2030.6969F, 1.0F);
      Long long1 = new Long(0L);
      Double double0 = new Double(0L);
      Double.isFinite(0.0);
      Long.max((-400), (-305L));
      hashMap0.put(double0, (Long) null);
      hashMap0.replace((Object) null, long1);
      Short.toUnsignedLong((short)49);
      Short short1 = new Short((short)0);
      HashMap<Long, Integer> hashMap1 = new HashMap<Long, Integer>();
      Short.toUnsignedLong((short) (-3272));
      Integer integer1 = new Integer((short)49);
      Double double1 = new Double((-3158.71573867));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Double double2 = new Double(1.0F);
      JSONObject jSONObject0 = new JSONObject(double2);
      JSONObject jSONObject1 = jSONObject0.put(": ", (Collection) linkedList0);
      jSONObject1.optJSONArray(": ");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4569451692362887
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("syZzOV{ ',+NM");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      String string0 = "java.lang.Long@00000000030";
      JSONObject jSONObject2 = jSONObject0.put("java.lang.Long@00000000030", 1689);
      jSONObject2.optInt("java.lang.Long@00000000030");
      JSONArray jSONArray0 = null;
      jSONObject2.toJSONArray((JSONArray) null);
      String string1 = "\\56mx(}m";
      try { 
        jSONObject1.getJSONObject(".mx(}m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".mx(}m\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3336889061514894
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer integer0 = new Integer((-416));
      Integer integer1 = new Integer((-416));
      Long long0 = new Long((-416));
      String string0 = "h\\ux#3_?";
      Integer.getInteger(string0);
      Float.sum((short)49, (-416));
      Short.compare((short)91, (short) (-1707));
      Float.sum(0.0F, (-416));
      Double double0 = new Double((short)91);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      linkedList1.removeAll(linkedList0);
      linkedList0.toArray();
      Double.isFinite((-1455.1592914460323));
      LinkedList<Boolean> linkedList2 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList3 = new LinkedList<Boolean>();
      linkedList3.toArray();
      linkedList3.removeLastOccurrence((Object) null);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      jSONObject0.toString((-416));
      Double double1 = new Double((short)26294);
      LinkedList<Boolean> linkedList4 = new LinkedList<Boolean>();
      assertTrue(linkedList4.equals((Object)linkedList3));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3948818610756617
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Integer integer0 = new Integer((-422));
      hashMap0.values();
      Long long0 = new Long((-10L));
      hashMap0.put(integer0, long0);
      hashMap0.entrySet();
      Short short0 = new Short((short)49);
      Float float0 = new Float((float) (short)0);
      Float.max(2030.6969F, 1.0F);
      Long long1 = new Long(0L);
      Double double0 = new Double(0L);
      Double.isFinite((short)0);
      Long.max((-422), (-305L));
      Double.min(0.0, (short)0);
      hashMap0.replace((Object) null, long1);
      Short short1 = new Short((short)0);
      HashMap<Long, Integer> hashMap1 = new HashMap<Long, Integer>();
      Short.toUnsignedLong((short) (-3272));
      Integer integer1 = new Integer((short)49);
      Short short2 = new Short((short) (-3272));
      JSONObject.valueToString(hashMap0);
      hashMap0.put(short2, (Long) null);
      Object object0 = new Object();
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.Integer@0000000002\":java.lang.Long@0000000003}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.516982385943524
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Short short0 = new Short((short)895);
      Short.compare((short) (-1242), (short) (-1242));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gettoHexString";
      Float.sum(819.0F, 0);
      Float.sum(1768.74F, 943.60394F);
      Short.compare((short)895, (short) (-1242));
      Float.sum(943.60394F, 0.0F);
      Float.sum(1.0F, 819.0F);
      Object object0 = new Object();
      JSONObject.doubleToString(1.0F);
      JSONObject jSONObject0 = new JSONObject((Object) "1");
      // Undeclared exception!
      jSONObject0.toString(3964, (int) (short)895);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.431974533709136
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Short short0 = new Short((short) (-1242));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(]{D";
      Short.compare((short)10, (short)10);
      Float.sum(0.0F, (short)13);
      Short.compare((short)2994, (short)2683);
      Float.sum(0.0F, 1634.05F);
      Double double0 = new Double(1095.671);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      linkedList1.toArray();
      boolean boolean0 = Double.isFinite((short)10);
      LinkedList<Boolean> linkedList2 = new LinkedList<Boolean>();
      Boolean boolean1 = Boolean.valueOf("(]{D");
      linkedList1.removeLastOccurrence(boolean1);
      JSONObject jSONObject0 = new JSONObject((Object) "(]{D");
      jSONObject0.toString((int) (short) (-1242));
      Double double1 = new Double(0.0);
      LinkedList<Boolean> linkedList3 = new LinkedList<Boolean>();
      assertFalse(linkedList3.contains(boolean0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.788490352562607
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (Map) hashMap0);
      jSONObject0.optDouble("] not found.", 1.0);
      Short.compare((short)2, (short)2);
      jSONObject1.put("] not found.", false);
      Short.toUnsignedLong((short) (-1818));
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(boolean0, boolean0);
      hashMap0.values();
      Short.compare((short)2, (short)46);
      Short.toUnsignedInt((short)2);
      Short.toUnsignedLong((short)1481);
      jSONObject1.optBoolean("] not found.");
      Short.compare((short)2, (short)2);
      StringWriter stringWriter0 = new StringWriter(0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "] not found.", (-1), (-44));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.2251567975820177
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
      JSONObject.quote("null");
      Float float0 = new Float(Double.NaN);
      Float.isFinite(109.0F);
      Float.max((-597.0F), 0.0F);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Short short0 = new Short((short)895);
      Short.compare((short) (-1242), (short) (-1242));
      String[] stringArray0 = new String[5];
      String string0 = "gettoHexString";
      stringArray0[0] = "gettoHexString";
      Float.sum(819.0F, 0);
      Float.sum(1768.74F, 943.60394F);
      Short.compare((short)13, (short) (-1242));
      Float.sum(943.60394F, 0.0F);
      Short.compare((short) (-2025), (short) (-2025));
      Float float0 = new Float((float) (short)0);
      Float.sum(0.0F, 0);
      Short short1 = new Short((short)0);
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      String string1 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Short.compare((short) (-1242), (short) (-1242));
      String[] stringArray0 = new String[5];
      stringArray0[1] = "java.lang.Long@0000000004.";
      Float float0 = new Float((double) (short)900);
      Float.max(95.85F, (-1.0F));
      Float.max(95.85F, 0.0F);
      Float.isFinite((-1894.2094F));
      Float.min(95.85F, 803.9F);
      Float.isFinite(0.0F);
      Float.isFinite(1037.0F);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9121791195292497
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Short short0 = new Short((short) (-2939));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L";
      stringArray0[1] = "getintern";
      stringArray0[2] = "7ZX~u6F.l";
      Short.toUnsignedInt((short)113);
      stringArray0[3] = "] is not a number.";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      Double double0 = new Double((-3490.75415340227));
      JSONObject.valueToString(double0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.names();
      jSONObject1.keys();
      JSONObject.quote("] is not a Boolean.");
      Object object0 = JSONObject.NULL;
      jSONObject0.append("getintern", object0);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.putOpt("7ZX~u6F.l", object1);
      jSONObject2.optString("7ZX~u6F.l");
      jSONObject1.putOpt("w]\"bM", "] is not a Boolean.");
      Short short1 = new Short((short) (-2939));
      JSONObject jSONObject3 = jSONObject0.accumulate(";/D", short1);
      jSONObject1.optJSONArray((String) null);
      JSONArray jSONArray0 = jSONObject3.names();
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2623477045221727
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Integer integer0 = new Integer((-415));
      hashMap0.values();
      Integer.toUnsignedLong((-415));
      Long long0 = new Long((-415));
      hashMap0.put(integer0, long0);
      hashMap0.entrySet();
      Short short0 = new Short((short)49);
      Float float0 = new Float((float) (short)0);
      String string0 = Long.toUnsignedString(1L);
      Float.max(2030.6969F, 1.0F);
      Long long1 = new Long(0L);
      Double double0 = new Double(0L);
      Integer.sum((short)0, (-415));
      Long.max((-415), (-305L));
      Double.min(0.0, (short)0);
      hashMap0.put(double0, (Long) null);
      Integer integer1 = new Integer((short)0);
      JSONObject jSONObject0 = new JSONObject();
      Float float1 = new Float(2030.6969F);
      jSONObject0.put("xwM+t$PZvM`;%S''8", (Object) double0);
      jSONObject0.isNull("xwM+t$PZvM`;%S''8");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "xwM+t$PZvM`;%S''8");
      Double double1 = new Double(0.0);
      String string1 = jSONObject0.optString("xwM+t$PZvM`;%S''8", "xwM+t$PZvM`;%S''8");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject.quote((String) null);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"\"";
      stringArray0[1] = null;
      stringArray0[2] = null;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.239295418721528
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Short short0 = new Short((short)900);
      Short.compare((short) (-1242), (short) (-1242));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gettoHexString";
      stringArray0[1] = "java.lang.Long@0000000004.";
      stringArray0[2] = "DYn3V&379wEFA6%N8!";
      Float float0 = new Float((double) (short)900);
      String[] stringArray1 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray1);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray1);
      double double0 = jSONObject0.optDouble("gettoHexString");
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.369398032962639
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Short.compare((short) (-1242), (short) (-1242));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "YJ[C{GOV";
      stringArray0[1] = "java.lang.Long@0000000004.";
      stringArray0[2] = "DYn3V&379wEFA6%N8!";
      Float float0 = new Float((double) (short)900);
      Float.isFinite((-1.0F));
      Float.max((-1.0F), (short) (-1242));
      Float.isFinite(0.0F);
      Float.isFinite(4726.021F);
      Float.min(0.0F, 0.0F);
      Float.isFinite(0);
      Float.isFinite(0);
      Float.max(0.0F, 0);
      Float.sum((short)900, 15.183699F);
      Short short0 = new Short((short) (-1242));
      String[] stringArray1 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(short0, stringArray1);
      jSONObject0.optInt("DYn3V&379wEFA6%N8!");
      try { 
        jSONObject0.getJSONArray("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.091462342152091
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("]not found.", (Map) hashMap0);
      jSONObject0.put("En", (-1302.97));
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      Boolean boolean0 = new Boolean("g=>OT)|/ZLsy~iZ7X");
      Boolean.compare(false, true);
      hashMap1.put(boolean0, ">U(yJRd!6ZuF[so9j:");
      Boolean boolean1 = new Boolean("(?2xlig`~}w$9w");
      Boolean boolean2 = Boolean.FALSE;
      hashMap0.put(boolean2, ">U(yJRd!6ZuF[so9j:");
      hashMap1.put(boolean1, "(?2xlig`~}w$9w");
      hashMap0.putAll(hashMap1);
      try { 
        jSONObject0.getJSONArray("]not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]not found.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6367430586192193
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Short.compare((short) (-1242), (short) (-1242));
      String[] stringArray0 = new String[5];
      Boolean boolean0 = Boolean.valueOf(")u7SVO+o/9tV1|");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = null;
      long long0 = 0L;
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.058909994634681
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "] not found.";
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] not found.", (Map) hashMap0);
      jSONObject0.optDouble("] not found.", 1.0);
      try { 
        jSONObject0.getDouble("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.513757284310045
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Integer integer0 = new Integer((-400));
      hashMap0.values();
      Long long0 = new Long((-10L));
      hashMap0.put(integer0, long0);
      hashMap0.entrySet();
      Short short0 = new Short((short)83);
      Float float0 = new Float((float) (short)0);
      Integer integer1 = new Integer((short)0);
      Long long1 = new Long(0L);
      Double.isFinite((-1.0));
      Double.isFinite((-400));
      Long.max((-400), (-305L));
      Short.toUnsignedLong((short)83);
      Short short1 = new Short((short)0);
      HashMap<Long, Integer> hashMap1 = new HashMap<Long, Integer>();
      Short.toUnsignedLong((short) (-3272));
      Integer integer2 = new Integer((short)83);
      Long.remainderUnsigned((-3843L), 1651L);
      Short short2 = Short.valueOf((short)83);
      JSONObject.valueToString(hashMap0);
      hashMap0.put(short2, long0);
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.Integer@0000000002\":java.lang.Long@0000000003}");
      JSONObject jSONObject1 = jSONObject0.put("{\"java.lang.Integer@0000000002\":java.lang.Long@0000000003}", (Map) hashMap0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8887556116065112
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Short short0 = new Short((short) (-1242));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "H$9}";
      stringArray0[1] = "ava.lang.Long@0000000004.";
      stringArray0[2] = "DYn3V&379wEFA6%N8!";
      Long long0 = new Long((-114L));
      Boolean boolean0 = new Boolean("!$jL!.");
      Long.remainderUnsigned((short) (-1242), 3925L);
      Double double0 = new Double(1.0);
      Byte byte0 = new Byte((byte)15);
      JSONObject jSONObject0 = new JSONObject(byte0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte.toUnsignedLong((byte)47);
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      LinkedList linkedList2 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      linkedList1.add(jSONArray0);
      linkedList0.containsAll(linkedList1);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList1);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertNotNull(jSONArray2);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.0714336167335894
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "] is not a number.";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = " !E(n";
      stringArray0[7] = "A JSONArray text must start with '['";
      stringArray0[8] = "A JSONArray text must start with '['";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optInt("A JSONArray text must start with '['", 33);
      jSONObject1.put("", (-2661.0792582106774));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.put((-1L));
      stringWriter0.append((CharSequence) "] is not a number.");
      StringWriter stringWriter1 = new StringWriter(33);
      jSONObject1.write(stringWriter1);
      jSONObject0.optInt("", 1261);
      jSONObject1.optDouble("java.lang.Short@0000000004.");
      JSONObject.doubleToString(33);
      jSONObject1.getDouble("");
      JSONObject jSONObject2 = jSONObject0.put("", (Collection) linkedList0);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5769935917544204
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("] ot ound.", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.accumulate("] ot ound.", hashMap0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] ot ound.";
      stringArray0[1] = "] ot ound.";
      stringArray0[2] = "Expected a ',' or '}'";
      stringArray0[3] = "] ot ound.";
      stringArray0[4] = "Expected a ',' or '}'";
      stringArray0[5] = "] not found.";
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      jSONObject1.has("] ot ound.");
      JSONObject jSONObject4 = new JSONObject();
      double double0 = 24.845720836066576;
      JSONObject.doubleToString((short) (-1395));
      jSONObject4.opt("+,Z@-L>&s[Lg");
      JSONObject.doubleToString(2119.791);
      StringWriter stringWriter0 = new StringWriter(2814);
      StringWriter stringWriter1 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "] ot ound.", (int) (short) (-1395), 2169);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9951323767276916
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      hashMap0.values();
      Long long0 = new Long((-10L));
      hashMap0.entrySet();
      Short short0 = new Short((short)83);
      Float float0 = new Float((float) (short)0);
      Integer integer0 = new Integer((short)0);
      Integer.remainderUnsigned((-3294), 123);
      Long long1 = new Long(0L);
      Double double0 = new Double(0L);
      Double.isFinite((-1.0));
      Double.isFinite((-400));
      Long.max((-400), (-305L));
      Short.toUnsignedLong((short)83);
      Short short1 = new Short((short)0);
      HashMap<Long, Integer> hashMap1 = new HashMap<Long, Integer>();
      Short.toUnsignedLong((short) (-3272));
      Integer integer1 = new Integer((short)83);
      Long.remainderUnsigned(0L, 1651L);
      Short.valueOf((short)83);
      JSONObject.valueToString(hashMap0);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = new Integer((-416));
      Integer.toUnsignedLong((-416));
      Long long0 = new Long((-416));
      String string0 = "h\\ux#3_?";
      Integer.getInteger(string0);
      Short short0 = new Short((short)49);
      Float float0 = new Float((float) (short)0);
      Integer integer1 = new Integer((-416));
      Long long1 = new Long(18L);
      Double double0 = new Double(18L);
      Integer.sum((short)0, (-416));
      Long.max((-416), (-305L));
      Integer integer2 = new Integer((short)49);
      JSONObject jSONObject0 = new JSONObject();
      Float float1 = new Float((float) 18L);
      Long.getLong("xwM+t$PZvM`;%S''8");
      jSONObject0.put("xwM+t$PZvM`;%S''8", (Object) null);
      String string1 = "E#{t]B|,&IGR{as~d";
      jSONObject0.isNull("E#{t]B|,&IGR{as~d");
      int int0 = 2037;
      StringWriter stringWriter0 = new StringWriter(2037);
      stringWriter0.append((CharSequence) "E#{t]B|,&IGR{as~d");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Short short0 = new Short((short)900);
      Short.compare((short) (-1242), (short) (-1242));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gettoHexString";
      Float.sum(0.0F, 0);
      Float.sum(0, (-1.0F));
      Float.sum(0.0F, 0.0F);
      Short.compare((short)125, (short) (-509));
      Float.sum(620.31F, 3748.671F);
      Short.toUnsignedLong((short)125);
      Short.compare((short) (-1242), (short)900);
      Short.compare((short) (-1272), (short) (-1242));
      Float.sum(1.0F, 1595.7F);
      Short.toUnsignedLong((short)1885);
      Short short1 = new Short((short)110);
      Short.toUnsignedLong((short)85);
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Integer integer0 = new Integer((-416));
      Long long0 = new Long((-416));
      String string0 = "h\\ux#3_?";
      Integer.getInteger(string0);
      Short short0 = new Short((short)49);
      Long long1 = new Long((-1078L));
      Boolean boolean0 = new Boolean("isvalueOf");
      Long.remainderUnsigned(0L, (-1319L));
      Double double0 = new Double((-416));
      Byte byte0 = new Byte((byte)118);
      Float.min(1292.771F, 1.0F);
      Float.min(837.0F, (-161.61F));
      Float.min((byte)118, (-1078L));
      Float.max(0.0F, (-1466.9F));
      Float.max((-1.0F), (-1087.6882F));
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6559124588144398
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Integer integer0 = new Integer((-416));
      Integer.toUnsignedLong((-416));
      Long long0 = new Long((-416));
      String string0 = "h\\ux#3_?";
      Integer.getInteger(string0);
      Short short0 = new Short((short)49);
      Long long1 = new Long((-1078L));
      Boolean boolean0 = new Boolean("isvalueOf");
      Long.remainderUnsigned(0L, (-1319L));
      Double double0 = new Double((-416));
      Byte byte0 = new Byte((byte)118);
      Integer integer1 = new Integer((-416));
      JSONObject jSONObject0 = new JSONObject(integer1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.clone();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4037695553960567
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(114);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.append('$');
      jSONArray0.write(stringWriter1);
      StringWriter stringWriter2 = new StringWriter();
      Boolean.valueOf(true);
      StringWriter stringWriter3 = new StringWriter(3035);
      JSONArray jSONArray1 = jSONArray0.put(true);
      jSONArray1.write(stringWriter1);
      stringWriter2.write(3035);
      jSONObject0.write(stringWriter2);
      jSONObject1.optJSONObject("] not found.");
      try { 
        jSONObject0.getJSONArray("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.740049864619031
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}cki]m>%s.J";
      stringArray0[1] = "] is not a number.";
      Double.isFinite(0.0);
      stringArray0[2] = "+JN4ct7t";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("(=o]5", 0.0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Float float0 = new Float(0.0);
      jSONObject0.putOpt((String) null, float0);
      HashMap<Long, Object> hashMap1 = new HashMap<Long, Object>();
      JSONObject jSONObject2 = jSONObject1.put("is", (Map) hashMap0);
      long long0 = jSONObject2.optLong("mi");
      assertEquals(0L, long0);
      
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.put("NI:gf/YN[h1", 0.0);
      double double1 = jSONObject2.optDouble("%<{");
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6457928323748754
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Integer integer0 = new Integer((-400));
      hashMap0.values();
      Long long0 = new Long((-10L));
      hashMap0.put(integer0, long0);
      Set<Map.Entry<Object, Long>> set0 = (Set<Map.Entry<Object, Long>>)hashMap0.entrySet();
      Short short0 = new Short((short)49);
      Float float0 = new Float((float) (short)0);
      Float.max(2030.6969F, 1.0F);
      Long long1 = new Long(0L);
      Double double0 = new Double(0L);
      Double.isFinite(0.0);
      Long.max((-400), (-305L));
      Float.sum(2030.6969F, 1214.672F);
      int int0 = new Short((short)0);
      Float.sum((short)0, 1.0F);
      Double double1 = new Double((-694.0));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.put((String) null, (Collection) set0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.057269053475154
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ",,5'YwR6KdhU'@@$g\"";
      jSONObject0.optString(",,5'YwR6KdhU'@@$g\"", "null");
      jSONTokener0.syntaxError("null");
      jSONObject0.put("null", (-780.380203352));
      jSONObject0.optInt("null");
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",,5'YwR6KdhU'@@$g\"";
      stringArray0[1] = ",,5'YwR6KdhU'@@$g\"";
      stringArray0[2] = "null";
      stringArray0[3] = "null";
      stringArray0[4] = ",,5'YwR6KdhU'@@$g\"";
      stringArray0[5] = "null";
      stringArray0[6] = "0@Q[>!av9DR/";
      stringArray0[7] = "null";
      stringArray0[8] = ",,5'YwR6KdhU'@@$g\"";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("0@Q[>!av9DR/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 0@Q[>!av9DR/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6733943577113073
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Integer integer0 = new Integer((-400));
      hashMap0.values();
      Long long0 = new Long((-10L));
      hashMap0.put(integer0, long0);
      hashMap0.entrySet();
      Short short0 = new Short((short)83);
      Float float0 = new Float((float) (short)0);
      Integer integer1 = new Integer((short)0);
      Integer.remainderUnsigned((-3294), 123);
      Long long1 = new Long(0L);
      Double double0 = new Double(0L);
      Double.isFinite((-1.0));
      Double.isFinite((-400));
      Long.max((-400), (-305L));
      hashMap0.put(double0, (Long) null);
      Short.toUnsignedLong((short)83);
      Short short1 = new Short((short)0);
      HashMap<Long, Integer> hashMap1 = new HashMap<Long, Integer>();
      Short.toUnsignedLong((short) (-3272));
      Integer integer2 = new Integer((short)83);
      Long.remainderUnsigned((-3843L), 1651L);
      Short short2 = Short.valueOf((short)83);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      
      hashMap0.put(short2, long0);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.Double@0000000002\":null,\"java.lang.Integer@0000000003\":java.lang.Long@0000000004}");
      String string1 = JSONObject.valueToString(hashMap1, (-400), (short)0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.128096336579608
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Integer integer0 = new Integer((-437));
      hashMap0.values();
      Long long0 = new Long((-437));
      hashMap0.entrySet();
      short short0 = (short)49;
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Short> hashMap1 = new HashMap<Byte, Short>();
      JSONObject jSONObject1 = jSONObject0.put("", (long) (-437));
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1007, (int) (short)49);
      Integer.getInteger("", (int) (short)49);
      Double double0 = new Double(0.0);
      jSONArray0.optJSONObject((-437));
      jSONObject1.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter((short)49);
      stringWriter0.append((CharSequence) "java.lang.Long@00000000080");
      jSONObject1.get("");
      try { 
        jSONObject0.getJSONArray("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.3336610304416983
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      jSONObject0.optDouble((String) null, 0.0);
      Short.compare((short)2, (short)102);
      Short.toUnsignedLong((short)2480);
      Short.compare((short)1274, (short)46);
      Short.toUnsignedInt((short)102);
      Short.toUnsignedLong((short)81);
      jSONObject0.optBoolean("Missing value");
      Short.compare((short)46, (short)3619);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Object object0 = new Object();
      jSONObject0.accumulate("Missing value", object0);
      jSONObject0.opt((String) null);
      try { 
        jSONObject0.getString("J&O(]s;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"J&O(]s;\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.819575559936706
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject.valueToString("false");
      JSONObject.valueToString("false", 60, 60);
      JSONObject.doubleToString(60);
      Long long0 = new Long((-799L));
      JSONObject.doubleToString((-36833786));
      JSONTokener jSONTokener0 = new JSONTokener("getaccumulate");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of getaccumulate
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.960841804955975
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "] ot ound.";
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("] ot ound.", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.934551794074474
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Float float0 = new Float((double) (short)900);
      Float.max(104.18284F, (-1.0F));
      Float.max(104.18284F, 0.0F);
      Float.isFinite((-1.0F));
      Float.isFinite((-1894.21F));
      Float.min(104.18284F, 0.0F);
      Float.isFinite(1416.3867F);
      Float.isFinite(0.0F);
      Float.max((-248.031F), (-156.0F));
      Float.min((-16.955395F), (-1894.21F));
      Float.isFinite(803.9F);
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      Float.min((-1.0F), (-156.0F));
      Float.min((-2652.403F), 26.3783F);
      Float.min((-2652.403F), (-1894.21F));
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.862651478716261
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
      
      Object object1 = new Object();
      long long0 = jSONObject0.optLong("null");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.010451110613131
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      hashMap0.put(jSONObject0, (Boolean) null);
      stringArray0[0] = "] is not a number.";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = " !E(n";
      stringArray0[7] = "A JSONArray text must start with '['";
      stringArray0[8] = "Untermin%ted st_ing";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optInt("Untermin%ted st_ing", 33);
      JSONObject jSONObject2 = jSONObject1.put("", (-2661.0792582106774));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.put((-1L));
      jSONArray0.put(102, (Map) hashMap0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "] is not a number.");
      Writer writer0 = jSONArray0.write(stringWriter1);
      jSONObject1.write(writer0);
      jSONObject0.optInt("", 1261);
      jSONObject2.optJSONObject("hGUsHdTWHw3;w");
      jSONObject0.names();
      try { 
        jSONObject1.getDouble("Untermin%ted st_ing");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Untermin%ted st_ing\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.862366295747018
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("V-V!9F*']+&]", hashMap0);
      hashMap0.clear();
      String[] stringArray0 = new String[9];
      jSONObject1.optBoolean("] is not a number.", true);
      String string0 = "";
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject2 = new JSONObject(jSONArray0, stringArray0);
      jSONObject1.optLong("");
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      String string1 = null;
      jSONObject2.optDouble((String) null, (double) 0L);
      LinkedList<JSONArray> linkedList2 = new LinkedList<JSONArray>();
      LinkedList<Object> linkedList3 = new LinkedList<Object>();
      jSONObject0.put("V-V!9F*']+&]", (Collection) linkedList3);
      jSONObject2.has("getformat");
      JSONObject jSONObject3 = new JSONObject();
      jSONObject2.put("V-V!9F*']+&]", 1L);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList3);
      try { 
        jSONObject0.accumulate((String) null, jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.3310920704424722
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.valueToString(boolean0);
      JSONTokener jSONTokener0 = new JSONTokener("java.lang.Boolean@0000000001");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("java.lang.Boolean@0000000001", "java.lang.Boolean@0000000001");
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>(130);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("(QJc8Kx^m,zn", (Map) hashMap0);
      HashMap<Boolean, Object> hashMap1 = new HashMap<Boolean, Object>();
      BiConsumer<Boolean, Object> biConsumer0 = (BiConsumer<Boolean, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap1.forEach(biConsumer0);
      jSONObject1.optDouble("-37:Lf@GUcun", (-760.570831185298));
      try { 
        jSONObject2.getLong("java.lang.Boolean@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Boolean@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.152928571989533
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "{";
      stringArray0[1] = "] is not a JSONObject.";
      stringArray0[2] = "";
      stringArray0[3] = "vNUJH>%K";
      stringArray0[4] = "bjaP(&qIG7ON";
      stringArray0[5] = "A";
      stringArray0[6] = "Unclosed comment";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.keys();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Float float0 = new Float((double) (short)900);
      Float.max(104.18284F, (-1.0F));
      Float.max(104.18284F, 0.0F);
      Float.isFinite((-1.0F));
      Float.isFinite((-1894.21F));
      Float.min(104.18284F, 0.0F);
      Float.isFinite(1416.3867F);
      Float.isFinite(0.0F);
      Float.max((-248.031F), (-156.0F));
      Float.min((-16.955395F), (-1894.21F));
      Float.isFinite(803.9F);
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      Float.min((-1.0F), (-156.0F));
      Float.min((-2652.403F), 26.3783F);
      Float.min((-2652.403F), (-1894.21F));
      Float.max((-248.031F), 104.18284F);
      Float.max(0.0F, (-1087.6882F));
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("~u ");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~u 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("java.lang.Short@00000000060");
      Short.valueOf((short) (-1395));
      HashMap<JSONArray, Byte> hashMap1 = new HashMap<JSONArray, Byte>();
      Long long0 = new Long((short) (-1395));
      StringWriter stringWriter0 = new StringWriter();
      Byte byte0 = new Byte((byte)18);
      Byte byte1 = new Byte((byte)46);
      HashMap<JSONArray, Byte> hashMap2 = new HashMap<JSONArray, Byte>();
      HashMap<JSONArray, Byte> hashMap3 = new HashMap<JSONArray, Byte>(hashMap2);
      JSONArray jSONArray0 = new JSONArray();
      Byte byte2 = new Byte((byte)18);
      assertTrue(byte2.equals((Object)byte0));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1361557235984077
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Short.compare((short)900, (short) (-1242));
      Short.compare((short)900, (short)128);
      Float float0 = new Float((-1.0));
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("X\"69h+L& /$%\"V/?4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"X\\\"69h+L& /$%\\\"V/?4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject.quote("i");
      String string0 = JSONObject.quote("Vj|1,>D7/(Z");
      assertEquals("\"Vj|1,>D7/(Z\"", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.876194008674677
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      hashMap0.put(jSONObject0, (Boolean) null);
      stringArray0[0] = "] is not a number.";
      stringArray0[5] = "";
      stringArray0[3] = "";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = " !E(n";
      stringArray0[7] = "A JSONArray text must start with '['";
      stringArray0[8] = " !E(n";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("", (-2661.0792582106774));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(1237);
      StringWriter stringWriter1 = stringWriter0.append('.');
      jSONArray0.write(stringWriter1);
      StringWriter stringWriter2 = new StringWriter();
      jSONObject2.putOpt("0xd >[}&3_t", "] is not a number.");
      jSONArray0.put((-1L));
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "] is not a number.");
      Writer writer0 = jSONArray0.write(stringWriter3);
      jSONObject1.write(writer0);
      jSONObject0.optInt("", 1237);
      jSONObject2.optJSONObject("hGUsHdTWHw3;w");
      try { 
        jSONObject1.getDouble("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6757009464813035
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString("false");
      jSONObject0.opt("\"java.lang.String@0000000002\"");
      Long long0 = new Long((-2419L));
      Long.getLong("", 0L);
      JSONObject.valueToString((Object) null, 47, 2127);
      Long long1 = new Long(890L);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = new JSONObject((Object) "\"java.lang.String@0000000002\"");
      jSONObject0.optJSONArray("\"java.lang.String@0000000002\"");
      Boolean.logicalXor(false, false);
      StringWriter stringWriter0 = new StringWriter(47);
      jSONObject1.write(stringWriter0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      JSONObject jSONObject2 = jSONObject1.put("", (Map) hashMap1);
      try { 
        jSONObject2.getBoolean("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.596910116635168
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Short short0 = new Short((short)900);
      Short short1 = new Short((short)900);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "YJ[C1GOV";
      stringArray0[1] = "java.lang.Long@0000000004.";
      Float float0 = new Float((double) (short) (-1242));
      Boolean.valueOf("YJ[C1GOV");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      jSONObject0.optJSONObject("java.lang.Long@0000000004.");
      jSONObject0.names();
      String string0 = "";
      Short short2 = new Short((short)55);
      jSONObject0.accumulate("", short2);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      try { 
        Byte.valueOf("java.lang.Long@0000000004.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Long@0000000004.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.291088974030933
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("iswait", 0L);
      jSONObject0.getString("iswait");
      double double0 = jSONObject0.optDouble("iswait", Double.NaN);
      jSONObject0.optBoolean("java.lang.Long@0000000003");
      double double1 = new Long(0L);
      //  // Unstable assertion: assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.4101713965249894
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Short short0 = new Short((short)900);
      Short.compare((short) (-1242), (short) (-1242));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gettoHexString";
      Float.sum(819.0F, 0);
      Float.sum(1768.74F, 943.60394F);
      Short short1 = new Short((short)900);
      Long long0 = new Long((short)900);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.accumulate("gettoHexString", (Object) null);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.spliterator();
      try { 
        jSONObject1.getBoolean("gettoHexString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoHexString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.8686680436626375
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Integer integer0 = new Integer((-400));
      long long0 = (-10L);
      hashMap0.values();
      Long long1 = new Long((-10L));
      Double double0 = new Double((-10L));
      JSONObject jSONObject0 = new JSONObject(double0);
      Float float0 = new Float(2205.89F);
      jSONObject0.append("zVBP\"iCZ", float0);
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.033810204512617
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float float0 = (-815.0F);
      Float float1 = new Float((-815.0F));
      Float.sum(1.0F, (-815.0F));
      Float.sum(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float1);
      String string0 = "E{tLzP`q ";
      jSONObject0.optDouble("E{tLzP`q ", 0.0);
      try { 
        jSONObject0.getInt("E{tLzP`q ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"E{tLzP`q \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.0430654791171134
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      jSONObject0.put("is", (Object) "is");
      String string0 = "rot";
      jSONObject0.optLong("rot", (-305L));
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7850162101970208
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      Boolean boolean1 = Boolean.FALSE;
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      Long long0 = new Long(0L);
      hashMap1.put(long0, boolean1);
      Boolean.logicalXor(false, true);
      Boolean.logicalAnd(false, true);
      HashMap<Object, Boolean> hashMap2 = new HashMap<Object, Boolean>();
      Short short0 = new Short((short)701);
      hashMap2.put(short0, boolean0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.put("", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.063407745759119
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "sum";
      jSONObject0.put("sum", (Map) hashMap0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      jSONObject0.optDouble("sum", (double) (short)900);
      try { 
        jSONObject0.getLong("sum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sum\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1807382878069084
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "}<\"iwaOSeBfrAG5@4=W";
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.566690211457924
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short.toUnsignedInt((short)0);
      BiFunction<Object, Object, Boolean> biFunction0 = (BiFunction<Object, Object, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Short.toUnsignedLong((short) (-10));
      jSONObject0.optBoolean("] is not a number.");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Object object0 = JSONObject.NULL;
      jSONObject0.optInt("] is not a number.", (int) (short) (-10));
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a number.", object0);
      jSONObject0.opt("] is not a number.");
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getString("] is not a number.");
      int int0 = jSONObject1.optInt("] is not a number.");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.433243078354111
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float float0 = new Float((-815.0F));
      Float.sum(1.0F, (-815.0F));
      float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optDouble("E{tLzP`q ", 0.0);
      jSONObject0.put("E{tLzP`q ", (double) 0.0F);
      jSONObject0.getInt("E{tLzP`q ");
      jSONObject0.put("JSON does not allow non-finite numbers.", (-1L));
      jSONObject0.accumulate("tQb?kd", "JSON does not allow non-finite numbers.");
      jSONObject0.opt(" ;ZOmTaw6(]m5<");
      try { 
        jSONObject0.getString("isoptJSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isoptJSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.5362293178287714
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = "";
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      jSONObject1.optInt("");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", 59, (-522));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Short.compare((short) (-1242), (short) (-1242));
      Short.compare((short)1286, (short)6);
      Float.sum(1.0F, (short) (-1242));
      Float.sum((short)6, (-3908.1965F));
      Float.sum(1.0F, (-5700.4893F));
      Float.sum(1849.4885F, 1849.4885F);
      Short.compare((short) (-1242), (short)6);
      Float.sum((-5699.4893F), 0.0F);
      Short short0 = new Short((short)1286);
      Short.toUnsignedLong((short)6);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "l=|hHxM|rN>6b/k{";
      String string0 = "su";
      stringArray0[1] = "su";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Byte byte0 = new Byte((byte) (-13));
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.append("su", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.500829388195143
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("V-V!9F*']+&]", hashMap0);
      String[] stringArray0 = new String[28];
      stringArray0[0] = "] is not a number.";
      stringArray0[2] = "";
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put("", boolean0);
      stringArray0[8] = "";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = " !E(n";
      Boolean.logicalXor(false, false);
      Boolean.logicalAnd(false, true);
      stringArray0[7] = "A JSONArray text must start with '['";
      hashMap0.put("flo", (Boolean) null);
      stringArray0[8] = "Untermin%ted st_ing";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      double double0 = (-2661.0792582106774);
      JSONObject jSONObject2 = jSONObject1.put("", (-2661.0792582106774));
      try { 
        jSONObject2.append("", "] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1641428120570025
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer((-416));
      Integer.toUnsignedLong((-416));
      Long long0 = new Long((-416));
      String string0 = "h\\ux#3_?";
      Integer.getInteger(string0);
      Short short0 = new Short((short)49);
      Float float0 = new Float((float) (short)0);
      Integer integer1 = new Integer((-416));
      Long long1 = new Long(4294966880L);
      Double double0 = new Double(4294966880L);
      Integer.sum((short)0, (-416));
      Long.max((-416), (-283L));
      Integer integer2 = new Integer((short)49);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("not", false);
      Float float1 = new Float((float) (short)49);
      Float.max((-1.0F), 5595.45F);
      Float float2 = new Float((float) (-416));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) string0);
      stringWriter1.append((CharSequence) string0);
      Long long2 = new Long((-1L));
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = new JSONObject(boolean0);
      jSONObject1.putOpt("u{_?TnaTI/", stringWriter1);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.67956024529521
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("V-V!9F*']+&]", hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "] is not a number.";
      hashMap0.entrySet();
      stringArray0[2] = "";
      stringArray0[8] = "";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = " !E(n";
      stringArray0[7] = "A JSONArray text must start with '['";
      Boolean boolean0 = new Boolean(false);
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      Boolean boolean1 = Boolean.valueOf(true);
      hashMap1.put("A JSONArray text must start with '['", boolean1);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.put("]xWbhTz^R'hzpC", (-2661.0792582106774));
      Object object0 = new Object();
      jSONObject1.append("ismin", object0);
      Long long0 = new Long(1L);
      Byte byte0 = Byte.valueOf((byte) (-79));
      jSONObject2.append("] is not a number.", byte0);
      assertEquals(2, jSONObject1.length());
      
      Object object1 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object1, (byte) (-79), (-214));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = new Short((short) (-1242));
      int int1 = new Integer((short)900);
      Float float0 = new Float((-1.0));
      Float.sum((short)900, 379.82F);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString((Object) null, (short)900, (short) (-1242));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.9071412423779184
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString(",,5'YwR6KdhU'@@$g\"", "null");
      jSONTokener0.syntaxError("null");
      JSONObject jSONObject1 = jSONObject0.put("9", (-780.380203352));
      jSONObject0.optInt("null");
      String[] stringArray0 = new String[9];
      stringArray0[1] = "9";
      stringArray0[7] = ",,5'YwR6KdhU'@@$g\"";
      stringArray0[3] = "9";
      stringArray0[5] = "null";
      stringArray0[6] = "0@Q[>!av9DR/";
      stringArray0[7] = "null";
      stringArray0[8] = "null";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject2, stringArray0);
      jSONObject2.optLong("9");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject1.put("wheel.json.JSONException", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(1882);
      jSONObject0.putOpt("null", "0@Q[>!av9DR/");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.0580825290189733
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      hashMap0.values();
      Long long0 = new Long((-10L));
      hashMap0.entrySet();
      Short short0 = new Short((short)49);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Short> hashMap1 = new HashMap<Byte, Short>();
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("I %h6|A<_jj", object0);
      JSONObject jSONObject1 = jSONObject0.put("", (-10L));
      JSONArray jSONArray0 = new JSONArray();
      Integer.getInteger("", (int) (short)49);
      Double double0 = new Double(0.0);
      HashMap<Boolean, Object> hashMap2 = new HashMap<Boolean, Object>();
      Boolean boolean0 = Boolean.valueOf("I %h6|A<_jj");
      hashMap2.put(boolean0, jSONArray0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap2.forEach(biConsumer0);
      double double1 = new Double(0.0);
      jSONObject1.getLong("");
      try { 
        jSONObject1.getDouble("w-u{?jf/|_[5:zPGZe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"w-u{?jf/|_[5:zPGZe\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.5344839714082266
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Integer integer0 = new Integer((-400));
      hashMap0.values();
      Long long0 = new Long((-10L));
      hashMap0.put(integer0, long0);
      hashMap0.entrySet();
      Short short0 = new Short((short)49);
      Float float0 = new Float((float) (short)0);
      Float.max(2030.6969F, 1.0F);
      Double double0 = new Double(1046.124);
      HashMap<Long, Double> hashMap1 = new HashMap<Long, Double>();
      String string0 = ",\n";
      Long.getLong(",\n", (Long) null);
      hashMap1.replace((Long) null, double0, double0);
      hashMap1.replace(long0, double0, double0);
      hashMap1.put(long0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("iYkgy>0$`!C}", (Map) hashMap0);
      jSONObject1.toString((int) (short)0, (-1112));
      Float float1 = new Float((double) 2030.6969F);
      HashMap<Short, Float> hashMap2 = new HashMap<Short, Float>();
      BiFunction<Object, Long, Long> biFunction0 = (BiFunction<Object, Long, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Short short1 = new Short((short) (-3758));
      JSONObject.quote("{\n\"java.lang.String@0000000003\": {\"java.lang.Integer@0000000004\": java.lang.Long@0000000005},\n\"java.lang.Integer@0000000004\": java.lang.Long@0000000005\n}");
      jSONObject1.optJSONArray("9l6Ja pU%faj~T");
      try { 
        jSONObject1.getBoolean("{\n\"java.lang.String@0000000003\": {\"java.lang.Integer@0000000004\": java.lang.Long@0000000005},\n\"java.lang.Integer@0000000004\": java.lang.Long@0000000005\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000003\\\": {\\\"java.lang.Integer@0000000004\\\": java.lang.Long@0000000005},\\n\\\"java.lang.Integer@0000000004\\\": java.lang.Long@0000000005\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1807382878069084
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(114);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append('\"');
      StringWriter stringWriter2 = new StringWriter();
      Boolean.valueOf(true);
      Integer integer0 = new Integer(114);
      try { 
        jSONObject0.getJSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.4497927527284427
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put(jSONArray0, (Long) null);
      hashMap0.values();
      Long long0 = new Long((-10L));
      hashMap0.entrySet();
      Short short0 = new Short((short)49);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Short> hashMap1 = new HashMap<Byte, Short>();
      String string0 = "";
      jSONObject0.put("", (-10L));
      JSONArray jSONArray1 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(3534);
      StringWriter stringWriter1 = stringWriter0.append('w');
      stringWriter1.write("toS");
      jSONArray1.write(stringWriter0);
      StringWriter stringWriter2 = new StringWriter();
      Boolean.valueOf(false);
      StringWriter stringWriter3 = new StringWriter(45);
      jSONArray1.put(true);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.0115537715672924
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "] notf und.";
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 964;
      StringWriter stringWriter0 = new StringWriter(964);
      char char0 = '\u001B';
      stringWriter0.append('\u001B');
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      short short0 = (short)62;
      Short short1 = new Short((short)62);
      short short2 = (short)0;
      hashMap0.values();
      Long long0 = new Long((short)0);
      jSONObject0.accumulate("] notf und.", long0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.spliterator();
      try { 
        jSONObject0.getBoolean("] notf und.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] notf und.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.7506817223249798
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Short short0 = new Short((short)900);
      Short.compare((short)133, (short)133);
      Float.sum((short) (-1242), 0.0F);
      Float.sum((-693.275F), 0.0F);
      Short.compare((short)8192, (short)8192);
      Float.sum(0.0F, 0.0F);
      Short.compare((short) (-1242), (short)8192);
      Float.sum(1.0F, 1215.9F);
      Double double0 = new Double((-362.922137));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = Boolean.FALSE;
      linkedList0.add((Boolean) null);
      Boolean.compare(false, true);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      linkedList1.addLast(boolean1);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      jSONObject0.optJSONObject("od");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = new Integer((-416));
      Integer.toUnsignedLong((-416));
      Long long0 = new Long((-416));
      String string0 = "h\\ux#3_?";
      Integer.getInteger(string0);
      Short short0 = new Short((short)49);
      Long long1 = new Long(0L);
      Boolean boolean0 = new Boolean("isvalueOf");
      Float.sum(0L, 1173.7979F);
      Double double0 = new Double(Double.NaN);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean1 = Boolean.TRUE;
      Boolean boolean2 = Boolean.FALSE;
      linkedList0.add((Boolean) null);
      Boolean.compare(false, true);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      Boolean boolean3 = Boolean.FALSE;
      linkedList0.add(boolean3);
      Boolean boolean4 = new Boolean("isvalueOf");
      linkedList0.addLast(boolean4);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Short.compare((short) (-1242), (short) (-1242));
      Short.compare((short)1286, (short)6);
      Float.sum(1.0F, (short) (-1242));
      Float.sum((short)6, (-3908.1965F));
      Float.sum(1.0F, (-5700.4893F));
      Float.sum(1848.988F, 1848.988F);
      Short.compare((short) (-1242), (short)6);
      Float.sum((-5699.4893F), 0.0F);
      int int0 = new Short((short)1286);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getJSONArray("lo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7843707658942787
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Integer integer0 = new Integer((-440));
      Collection<Long> collection0 = hashMap0.values();
      Long long0 = new Long((-10L));
      hashMap0.put(integer0, long0);
      hashMap0.entrySet();
      Short short0 = new Short((short)49);
      Float float0 = new Float((float) (short)0);
      Float.max(2030.6969F, 1.0F);
      Double double0 = new Double(0L);
      Double.isFinite(0.0);
      Long.max((-440), (-305L));
      Double.min(0.0, (short)0);
      hashMap0.put(double0, (Long) null);
      hashMap0.replace((Object) null, long0);
      Short.toUnsignedLong((short)49);
      Short short1 = new Short((short)0);
      HashMap<Long, Integer> hashMap1 = new HashMap<Long, Integer>();
      Short.toUnsignedLong((short) (-3272));
      Integer integer1 = new Integer((short)49);
      Short short2 = new Short((short) (-3272));
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(collection0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.8530039128771998
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Short short0 = new Short((short)900);
      Short.compare((short)133, (short)133);
      Float.sum((short) (-1242), 0.0F);
      Float.sum((-693.275F), 0.0F);
      Short.compare((short)8192, (short)8192);
      Float.sum(0.0F, 0.0F);
      Short.compare((short) (-1242), (short)8192);
      Float.sum(1.0F, 1215.9F);
      Double double0 = new Double((-362.922137));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      linkedList0.add(boolean0);
      Boolean boolean1 = Boolean.TRUE;
      Boolean boolean2 = Boolean.FALSE;
      linkedList0.add((Boolean) null);
      Boolean.compare(false, true);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      Boolean.logicalXor(false, false);
      linkedList1.add(boolean2);
      linkedList1.addLast(boolean2);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(4, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.8076824485687797
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      hashMap0.entrySet();
      Short short0 = new Short((short)49);
      Float.max(2030.6969F, 1.0F);
      Double double0 = new Double(1046.124);
      HashMap<Long, Double> hashMap1 = new HashMap<Long, Double>();
      String string0 = ",\n";
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("_Ykgy>0$`!C}", (Map) hashMap0);
      hashMap0.put(",\n", (Long) null);
      Long.compareUnsigned((-1112), (-1L));
      Long long0 = new Long(0L);
      hashMap0.put(long0, (Long) null);
      Byte byte0 = new Byte((byte)123);
      Byte.compare((byte)33, (byte)76);
      JSONObject jSONObject2 = jSONObject0.put(",\n", (Object) byte0);
      jSONObject1.toString((int) (short)49, (-1112));
      Float float0 = new Float((double) 2030.6969F);
      jSONObject0.toString();
      HashMap<Short, Float> hashMap2 = new HashMap<Short, Float>();
      StringWriter stringWriter0 = new StringWriter(4);
      stringWriter0.append((CharSequence) ",\n");
      jSONObject2.getString(",\n");
      String string1 = "java.lang.Float@00000000020";
      try { 
        jSONObject0.getJSONObject("java.lang.Float@00000000020");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@00000000020\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.8111428303362396
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Short short0 = new Short((short)900);
      Short.toUnsignedLong((short)1346);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.opt("0");
      jSONObject0.optLong("0");
      try { 
        jSONObject0.getString("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.2879001942443233
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Integer integer0 = new Integer((-399));
      hashMap0.values();
      Long long0 = new Long((-10L));
      hashMap0.put(integer0, long0);
      hashMap0.entrySet();
      Short short0 = new Short((short)49);
      Float float0 = new Float((float) (short)0);
      Float.max(2030.6969F, 1.0F);
      Double double0 = new Double(1046.124);
      HashMap<Long, Double> hashMap1 = new HashMap<Long, Double>();
      Long.getLong(",\n", (Long) null);
      hashMap1.replace((Long) null, double0, double0);
      hashMap1.replace(long0, double0, double0);
      hashMap1.put(long0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)123);
      Byte.compare((byte)123, (byte)61);
      Float float1 = new Float((float) (short)0);
      jSONObject0.put(":", (Object) float1);
      jSONObject0.toString((int) (short)49, 62);
      Float float2 = new Float((double) (byte)61);
      HashMap<Short, Float> hashMap2 = new HashMap<Short, Float>();
      StringWriter stringWriter0 = new StringWriter(1031);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ",\n");
      assertSame(stringWriter1, stringWriter0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.3128868859883003
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Integer integer0 = new Integer((-416));
      Integer.toUnsignedLong((-416));
      Long long0 = new Long((-416));
      String string0 = "h\\ux#3_?";
      Integer.getInteger(string0);
      Short short0 = new Short((short)49);
      Integer integer1 = new Integer((-416));
      Long long1 = new Long(18L);
      long long2 = new Short((short)49);
      Integer integer2 = new Integer((short)0);
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((float) (short)49);
      jSONObject0.isNull("xwM+t$PZvM`;%S''8");
      StringWriter stringWriter0 = new StringWriter((short)0);
      stringWriter0.append((CharSequence) "xwM+t$PZvM`;%S''8");
      jSONObject0.putOpt("xwM+t$PZvM`;%S''8", "xwM+t$PZvM`;%S''8");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.496564514542002
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("wheel.json.JSONObject$Null");
      jSONObject0.optDouble("NO");
      jSONObject0.length();
      jSONObject0.put("NO", true);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.6602723849639225
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("wheel.json.JSONObject$Null");
      jSONObject0.optDouble("NO");
      jSONObject0.length();
      jSONObject0.optDouble("wheel.json.JSONObject$Null", Double.NaN);
      JSONObject jSONObject1 = jSONObject0.put("NO", true);
      Float float0 = new Float(Double.NaN);
      jSONObject1.accumulate("issignum", "wheel.json.JSONObject$Null");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      jSONObject1.getBoolean("NO");
      try { 
        jSONObject1.accumulate("rH Q^o", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.039871718747301
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Short short0 = new Short((short) (-1242));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(]{D";
      stringArray0[1] = "ava.lang.Long@0000000004.";
      stringArray0[2] = "ava.lang.Long@0000000004.";
      Float float0 = new Float((double) (short)900);
      Float.min((short)900, (-2783.5F));
      Float.max(95.85F, (-1.0F));
      Byte byte0 = new Byte((byte)72);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      linkedList0.clone();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      LinkedList<JSONArray> linkedList2 = new LinkedList<JSONArray>();
      linkedList2.clone();
      linkedList2.add(jSONArray0);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      LinkedList<Float> linkedList5 = new LinkedList<Float>();
      linkedList0.containsAll(linkedList5);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList2);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray2);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.917499217543191
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Long, Double> hashMap1 = new HashMap<Long, Double>();
      String string0 = JSONObject.valueToString(jSONArray0, 92, (-522));
      Float.sum(1.0F, (-522));
      Short short0 = new Short((short)47);
      Short.compare((short)12, (short)47);
      String string1 = JSONObject.valueToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.504217917936588
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('$');
      stringWriter0.write((-26705495));
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = '$';
      charArray0[6] = '$';
      charArray0[7] = '$';
      charArray0[8] = '$';
      stringWriter1.write(charArray0);
      stringWriter1.write(1247);
      stringWriter1.append('$');
      jSONArray0.write(stringWriter0);
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter('$');
      jSONArray0.put(true);
      Writer writer0 = jSONArray0.write(stringWriter3);
      char[] charArray1 = new char[4];
      charArray1[0] = '$';
      charArray1[1] = '$';
      Float float0 = new Float((double) 1247);
      jSONObject0.append("] not found.", float0);
      charArray1[2] = '$';
      charArray1[3] = '$';
      writer0.write(charArray1);
      writer0.write(114);
      jSONObject0.write(writer0);
      jSONArray0.optJSONObject('$');
      JSONArray jSONArray1 = jSONObject0.getJSONArray("] not found.");
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.4818821022086537
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((-26705495));
      char[] charArray0 = new char[9];
      charArray0[0] = '\u001E';
      jSONObject0.put("cop", (long) 114);
      charArray0[1] = '\u001E';
      charArray0[2] = '\u001E';
      charArray0[1] = '\u001E';
      charArray0[4] = '\u001E';
      charArray0[6] = '\u001E';
      charArray0[7] = '\u001E';
      charArray0[8] = '\u001E';
      stringWriter0.write(charArray0);
      stringWriter0.write(charArray0);
      stringWriter0.write(1237);
      stringWriter0.append('\u001E');
      jSONArray0.write(stringWriter0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter('\u001E');
      jSONArray0.put(true);
      Writer writer0 = jSONArray0.write(stringWriter2);
      writer0.write(charArray0);
      writer0.write(114);
      jSONObject0.write(writer0);
      jSONArray0.optJSONObject('\u0000');
      try { 
        jSONObject0.getJSONArray(",P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",P\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.505083718802389
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('$');
      stringWriter0.write((-26705495));
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = '$';
      charArray0[6] = '$';
      charArray0[7] = '$';
      charArray0[8] = '$';
      stringWriter1.write(charArray0);
      stringWriter1.write(1247);
      stringWriter1.append('$');
      jSONArray0.write(stringWriter0);
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter('$');
      jSONArray0.put(true);
      Writer writer0 = jSONArray0.write(stringWriter3);
      char[] charArray1 = new char[4];
      charArray1[1] = '$';
      Float float0 = new Float((double) 1247);
      jSONObject0.append("] not found.", float0);
      charArray1[2] = '$';
      charArray1[3] = '$';
      writer0.write(charArray1);
      writer0.write(114);
      jSONObject0.write(writer0);
      jSONArray0.optJSONObject('$');
      try { 
        jSONObject0.getJSONArray(",P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",P\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.8253655043352244
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\u001E');
      stringWriter0.write((-26705495));
      char[] charArray0 = new char[9];
      charArray0[0] = '\u001E';
      charArray0[1] = '\u001E';
      charArray0[2] = '\u001E';
      charArray0[1] = '\u001E';
      charArray0[4] = '\u001E';
      charArray0[6] = '\u001E';
      charArray0[7] = '\u001E';
      charArray0[8] = '\u001E';
      stringWriter0.write(charArray0);
      stringWriter1.write(charArray0);
      stringWriter1.write(1237);
      stringWriter1.append('\u001E');
      jSONArray0.write(stringWriter0);
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter('\u001E');
      jSONArray0.put(true);
      Writer writer0 = jSONArray0.write(stringWriter3);
      char[] charArray1 = new char[4];
      charArray1[0] = '\u001E';
      charArray1[1] = '\u001E';
      charArray1[3] = '\u001E';
      writer0.write(charArray1);
      writer0.write(114);
      jSONObject0.write(writer0);
      jSONArray0.optJSONObject('\u0000');
      try { 
        jSONObject0.getJSONArray(",P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",P\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.8466881234035157
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      boolean boolean1 = false;
      Boolean.logicalAnd(false, true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("getreverse", (-134));
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.670792086347495
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Short short0 = new Short((short)35);
      Short.toUnsignedInt((short) (-152));
      Short.toUnsignedLong((short)92);
      Short.toUnsignedLong((short)1346);
      Short.compare((short)70, (short)970);
      Short.toUnsignedLong((short)92);
      Short.compare((short)247, (short) (-2153));
      Short.toUnsignedInt((short)1002);
      Short.toUnsignedLong((short)1002);
      Short.compare((short)970, (short)2154);
      Object object0 = new Object();
      Short short1 = Short.valueOf((short)1564);
      Short.toUnsignedInt((short)101);
      Short.toUnsignedInt((short)70);
      JSONObject jSONObject0 = new JSONObject(short1);
      try { 
        jSONObject0.put((String) null, (int) (short)247);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      stringArray0[1] = "A JSONObject text must end with '}'";
      stringArray0[2] = "A JSONObject text must begin with '{'";
      stringArray0[3] = "A JSONObject text must end with '}'";
      stringArray0[4] = "A JSONObject text must end with '}'";
      stringArray0[5] = "A JSONObject text must end with '}'";
      stringArray0[6] = "A JSONObject text must end with '}'";
      stringArray0[7] = "A JSONObject text must end with '}'";
      JSONObject jSONObject0 = new JSONObject("A JSONObject text must end with '}'", stringArray0);
      int int0 = jSONObject0.optInt("A JSONObject text must begin with '{'");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put(jSONArray0, (Boolean) null);
      hashMap0.put(jSONObject0, (Boolean) null);
      Short.compare((short)0, (short)23);
      Float float0 = new Float(0.0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.optJSONObject(2913);
      jSONObject0.length();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.299266585490379
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      int int0 = (-522);
      jSONObject0.toString((-522), (-522));
      float float0 = 0.0F;
      Float float1 = new Float((float) (-522));
      String string0 = "/{Z?KCiX_:4@";
      HashMap<Long, Double> hashMap1 = new HashMap<Long, Double>();
      hashMap0.putAll(hashMap1);
      try { 
        jSONObject0.get("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000002\\\": \\\"java.lang.Class@0000000003\\\"}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.3309780944634566
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Short short0 = new Short((short)900);
      Short.compare((short) (-1242), (short) (-1242));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gettoHexString";
      Float.sum(819.0F, 0);
      Float.sum(1768.74F, 943.60394F);
      Short.compare((short)13, (short) (-1242));
      Float.sum(0.0F, 0.0F);
      Short.compare((short)0, (short)0);
      Float.sum(3424.6F, (short)0);
      Double double0 = new Double(819.0F);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Double.isFinite(0.0);
      linkedList0.removeLastOccurrence(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(1255);
      Double double1 = new Double(0.0);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      assertTrue(linkedList1.equals((Object)linkedList0));
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.1719330103601107
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      short short0 = (short)895;
      Short short1 = new Short((short)895);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "ha";
      jSONObject0.put("ha", (Map) hashMap0);
      Short short2 = new Short((short)895);
      jSONObject0.accumulate("] not found.", short2);
      try { 
        Short.decode("ha");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ha\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.6443458088150464
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Integer integer0 = new Integer((-416));
      Integer.toUnsignedLong((-416));
      Long long0 = new Long((-416));
      String string0 = "h\\ux#3_?";
      Integer.getInteger(string0);
      Short short0 = new Short((short)49);
      Float float0 = new Float((float) (short)0);
      Integer integer1 = new Integer((-416));
      Double double0 = new Double(18L);
      Integer.sum((short)0, (-416));
      Long.max((-416), (short)49);
      Integer integer2 = new Integer((short)49);
      JSONObject jSONObject0 = new JSONObject();
      Float float1 = new Float((float) (short)49);
      jSONObject0.optLong((String) null, 4294966880L);
      jSONObject0.put("xwM+t$PZvM`;%S''8", (Object) double0);
      jSONObject0.isNull("xwM+t$PZvM`;%S''8");
      StringWriter stringWriter0 = new StringWriter((short)0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "xwM+t$PZvM`;%S''8");
      assertSame(stringWriter1, stringWriter0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Short short0 = new Short((short) (-1242));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(]{D";
      stringArray0[1] = "ava.lang.Long@0000000004.";
      stringArray0[2] = "ava.lang.Long@0000000004.";
      Float float0 = new Float((double) (short)900);
      Float.min((short)900, (-2783.5F));
      Float.max(95.85F, (-1.0F));
      Float.isFinite(0.0F);
      Float.isFinite((-7251.9204F));
      Float.isFinite(0.0F);
      Float.isFinite(95.85F);
      Float.min((-2668.0F), (-1.0F));
      Float.max(17.68026F, (short) (-1242));
      Float.isFinite(0.0F);
      Float.isFinite(4726.021F);
      Integer integer0 = new Integer((short) (-1242));
      Float.min(0.0F, 0.0F);
      Float.isFinite(0.0F);
      Float.max((short) (-1242), 95.85F);
      Float.isFinite(17.68026F);
      Float.isFinite((float) short0);
      Float.isFinite((float) short0);
      Float.max(0.0F, (float) short0);
      Short short1 = new Short((short) (-1242));
      String[] stringArray1 = JSONObject.getNames((Object) null);
      assertNull(stringArray1);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Float float0 = new Float((double) (short)900);
      Float.max(104.18284F, (-1.0F));
      Float.max(104.18284F, 0.0F);
      Float.isFinite((-1.0F));
      Float.isFinite((-1894.21F));
      Float.min(104.18284F, 0.0F);
      Float.isFinite(1416.3867F);
      Float.isFinite(0.0F);
      Float.max((-248.031F), (-156.0F));
      Float.min((-16.955395F), (-1894.21F));
      Float.isFinite(803.9F);
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      Float.min((-1.0F), (-156.0F));
      Float.min((-2652.403F), 26.3783F);
      Float.min((-2652.403F), (-1894.21F));
      Float.max(0.0F, 104.18284F);
      Float.max(0.0F, (-1087.6882F));
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Integer integer0 = new Integer((-416));
      Integer.toUnsignedLong((-416));
      String string0 = "h\\ux#3_?";
      Integer.getInteger(string0);
      Short short0 = new Short((short)49);
      Float float0 = new Float((float) (short)0);
      Integer integer1 = new Integer((-416));
      Long long0 = new Long(18L);
      Double double0 = new Double(18L);
      Integer.sum((short)0, (-416));
      Long.max((-416), (-283L));
      Integer integer2 = new Integer((short)49);
      Float float1 = new Float((float) (short)49);
      Float float2 = new Float((float) 18L);
      Short short1 = new Short((short)0);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      String string1 = JSONObject.valueToString(jSONArray1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.486476853275102
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Short short0 = new Short((short)900);
      Short.toUnsignedInt((short)900);
      Short.toUnsignedLong((short)12);
      Short.toUnsignedLong((short)12);
      Short.compare((short)1346, (short)1346);
      Short.compare((short)70, (short)2);
      Short.toUnsignedLong((short)1346);
      Short.compare((short)2, (short)70);
      Short.toUnsignedInt((short) (-453));
      Short.toUnsignedLong((short) (-2087));
      Short.compare((short)900, (short)900);
      JSONObject.valueToString(short0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.3987405541121611
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("] not found.", 1.0);
      try { 
        jSONObject0.getLong("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.8124199695444132
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("] not found.", 1.0);
      Short.compare((short)2, (short)2);
      Short.toUnsignedLong((short) (-1818));
      Short.compare((short)2, (short)46);
      Short.toUnsignedInt((short)2);
      Short.toUnsignedLong((short)1481);
      jSONObject0.optBoolean("] not found.");
      Short.compare((short) (-2087), (short) (-2087));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.opt("kGsor~CZwH]Lh'k");
      try { 
        jSONObject0.getString("Py");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Py\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("vAh%j+?t");
      assertEquals("", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7B!)#wP\"HpGT";
      stringArray0[1] = "7B!)#wP\"HpGT";
      Byte.toUnsignedLong((byte) (-69));
      stringArray0[2] = "] not found.";
      stringArray0[3] = "low";
      stringArray0[4] = "] not found.";
      stringArray0[6] = "?kZl";
      stringArray0[7] = "7B!)#wP\"HpGT";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      String string0 = jSONObject0.optString("low");
      assertEquals("", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject.quote("i");
      String string0 = JSONObject.quote("\"i\"");
      assertEquals("\"\\\"i\\\"\"", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "] ot ound.";
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.valueOf(true);
      Short short0 = new Short((short)45);
      hashMap0.replace(boolean0, (Object) boolean0, (Object) short0);
      try { 
        jSONObject0.getInt("sig");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sig\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.0752440338628615
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Short short0 = new Short((short)900);
      Short.compare((short)133, (short)133);
      Float.sum((short) (-1242), 0.0F);
      Float.sum((-693.275F), 0.0F);
      Short.compare((short)8192, (short)8192);
      Float.sum(0.0F, 0.0F);
      Short.compare((short) (-1242), (short)8192);
      Float.sum(1.0F, 1215.9F);
      Double double0 = new Double((-352.3782150170186));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      linkedList0.add(boolean0);
      Boolean boolean1 = Boolean.TRUE;
      Boolean boolean2 = Boolean.FALSE;
      linkedList0.add((Boolean) null);
      Boolean.compare(false, true);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      linkedList1.parallelStream();
      Boolean.logicalXor(false, false);
      linkedList1.add((Boolean) null);
      linkedList1.add(boolean2);
      linkedList1.addLast(boolean2);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      try { 
        jSONObject0.getLong("2^]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2^]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.5490230514048333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "M>1x9";
      stringArray0[1] = "JSON does not allow non-finite numbers.";
      stringArray0[2] = "";
      stringArray0[3] = "!hFakXC{";
      stringArray0[4] = "Z_^%PxHf";
      stringArray0[5] = "";
      stringArray0[6] = "] is not a Boolean.";
      stringArray0[7] = "b8LhG";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("M@<NJ$`Oh:>", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.3457659019580777
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer integer0 = new Integer((-416));
      Integer.toUnsignedLong((-416));
      Long long0 = new Long((-416));
      String string0 = "h\\ux#3_?";
      Integer.getInteger(string0);
      Short short0 = new Short((short)49);
      Float float0 = new Float((float) (short)0);
      Integer integer1 = new Integer((-416));
      Long long1 = new Long(21L);
      Double double0 = new Double(21L);
      int int0 = new Short((short)0);
      Long.max((-416), (-305L));
      Integer integer2 = new Integer((short)49);
      JSONObject jSONObject0 = new JSONObject();
      Float float1 = new Float((float) (short)49);
      jSONObject0.put("xo(e''fVv--ZsDB}&)'", (Object) double0);
      jSONObject0.isNull("xo(e''fVv--ZsDB}&)'");
      StringWriter stringWriter0 = new StringWriter((short)0);
      stringWriter0.append((CharSequence) "xo(e''fVv--ZsDB}&)'");
      JSONObject jSONObject1 = jSONObject0.putOpt("xo(e''fVv--ZsDB}&)'", "xo(e''fVv--ZsDB}&)'");
      boolean boolean0 = jSONObject1.optBoolean("getshortValue");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer integer0 = new Integer((-416));
      Integer integer1 = new Integer((-416));
      Long long0 = new Long((-416));
      String string0 = "h\\ux#3_?";
      Integer.getInteger(string0);
      Short short0 = new Short((short)49);
      Integer integer2 = new Integer((-416));
      Long long1 = new Long(18L);
      Double double0 = new Double(18L);
      Integer.sum((short)0, (-416));
      Long.max((-416), (-283L));
      Integer integer3 = new Integer((short)49);
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((float) (short)49);
      Float float1 = new Float((float) 18L);
      Short short1 = new Short((short)0);
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.950089105224377
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Float float0 = new Float(Double.NaN);
      float float1 = new Float((double) 0.0F);
      Float.max((-1.0F), (-1.0F));
      Float.isFinite(0.0F);
      Float.min(3.4305816F, (-1.0F));
      Float.isFinite((-1.0F));
      Float.sum(0.0F, 4726.021F);
      Float.sum(0.0F, (-2213.9792F));
      try { 
        jSONObject0.getBoolean("(42t%yrg*=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(42t%yrg*=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.5973763681381548
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put("`7", (Map) hashMap0);
      int int0 = (-538);
      Long long0 = new Long((-538));
      Double double0 = new Double(0.0);
      hashMap0.put(long0, double0);
      jSONObject0.toString((-538), (-538));
      float float0 = 0.0F;
      Float float1 = new Float((float) (-538));
      String string0 = "&YKCNNR]E=";
      HashMap<Long, Double> hashMap1 = new HashMap<Long, Double>();
      hashMap0.putAll(hashMap1);
      try { 
        jSONObject0.getInt("`7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`7\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.272074335252757
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Float.sum(897.4079F, 943.60394F);
      Short.compare((short)13, (short) (-1502));
      Float.sum(1280.6F, 1768.74F);
      Short.compare((short)26294, (short)26294);
      Float.sum(0.0F, 897.4079F);
      Double double0 = new Double((short)13);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      linkedList1.removeAll(linkedList0);
      linkedList1.toArray();
      Double.isFinite(0.0);
      LinkedList<Boolean> linkedList2 = new LinkedList<Boolean>();
      linkedList2.toArray();
      linkedList2.removeLastOccurrence("Vj|1,>D7/(Z");
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.valueToString(jSONObject0, (short) (-1502), (-960));
      Double double1 = new Double(1578.750379012);
      LinkedList<Boolean> linkedList3 = new LinkedList<Boolean>();
      assertTrue(linkedList3.equals((Object)linkedList1));
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.33141971105748
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Float.sum(897.4079F, 943.60394F);
      Short.compare((short)13, (short) (-1502));
      Short.compare((short)26294, (short)26294);
      Float.sum(0.0F, 897.4079F);
      Double double0 = new Double((short)13);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      linkedList1.removeAll(linkedList0);
      linkedList1.toArray();
      Double.isFinite(0.0);
      LinkedList<Boolean> linkedList2 = new LinkedList<Boolean>();
      linkedList2.toArray();
      linkedList2.removeLastOccurrence("Vj|1,>D7/(Z");
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((-960));
      Double double1 = new Double(1578.750379012);
      LinkedList<Boolean> linkedList3 = new LinkedList<Boolean>();
      assertTrue(linkedList3.equals((Object)linkedList1));
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.7921680368494446
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Short short0 = new Short((short)900);
      Short.compare((short)133, (short)133);
      float float0 = new Float((float) (short) (-1242));
      Float.sum((-693.275F), 0.0F);
      Short.compare((short)8192, (short)8192);
      Float.sum(0.0F, 0.0F);
      Short.compare((short) (-1242), (short)8192);
      Float.sum(1.0F, 1215.9F);
      Double double0 = new Double((-362.922137));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      linkedList0.add(boolean0);
      Boolean boolean1 = Boolean.TRUE;
      Boolean boolean2 = Boolean.FALSE;
      linkedList0.add((Boolean) null);
      Boolean.compare(false, true);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      boolean boolean3 = new Boolean(false);
      linkedList1.add((Boolean) null);
      linkedList1.add(boolean2);
      linkedList1.addLast(boolean2);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      jSONObject0.put("yOb/PrLu", true);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.9851721680389214
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString(",,5'YwR6KdhU'@@$g\"", "null");
      jSONTokener0.syntaxError("null");
      JSONObject jSONObject1 = jSONObject0.put("", (-780.380203352));
      jSONObject0.optInt("null");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = ",,5'YwR6KdhU'@@$g\"";
      stringArray0[2] = "null";
      stringArray0[3] = "";
      stringArray0[4] = ",,5'YwR6KdhU'@@$g\"";
      stringArray0[5] = "null";
      stringArray0[6] = "0@Q[>!av9DR/";
      stringArray0[7] = "null";
      stringArray0[8] = "null";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = new Object();
      jSONObject2.putOpt(",,5'YwR6KdhU'@@$g\"", object0);
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject2, stringArray0);
      jSONObject2.optLong("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject4 = jSONObject1.put("wheel.json.JSONException", (Collection) linkedList0);
      jSONObject4.optInt("QAYi>69", 0);
      jSONObject4.has("isnotifyAll");
      jSONObject0.optJSONObject("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Short short0 = new Short((short)900);
      Short.compare((short)133, (short)133);
      Float.sum((short) (-1242), 0.0F);
      Float.sum((-693.275F), 0.0F);
      Short.compare((short)8192, (short)8192);
      Float.sum(0.0F, 0.0F);
      Short.compare((short) (-1242), (short)8192);
      Float.sum(1.0F, 1215.9F);
      Double double0 = new Double((-362.922137));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.clone();
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = Boolean.FALSE;
      linkedList0.add((Boolean) null);
      Boolean.compare(false, true);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      linkedList1.parallelStream();
      linkedList1.addLast(boolean1);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Float float0 = new Float((double) (short)900);
      Float.max(104.18284F, (-1.0F));
      Float.max(104.18284F, 0.0F);
      Float.isFinite((-1.0F));
      Float.isFinite((-1894.21F));
      Float.min(104.18284F, 0.0F);
      Float.isFinite(1416.3867F);
      Float.isFinite(0.0F);
      Float.max((-248.031F), (-156.0F));
      Float.min((-16.955395F), (-1894.21F));
      Float.isFinite(803.9F);
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      float float1 = new Float((-1.0F));
      Float.min(803.9F, 26.3783F);
      Float.min(26.3783F, (-1894.21F));
      Float.max(0.0F, 104.18284F);
      Float.max(0.0F, (-1087.6882F));
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("1.Y>r)|_xPH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 1.Y>r)|_xPH
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.5186310872822124
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.valueToString(double0, (-4480), (-4480));
      assertNotNull(string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "YJ[C{GOV";
      stringArray0[1] = "java.lang.Long@0000000004.";
      Float.max(104.18284F, (-1.0F));
      Float.max(104.18284F, 0.0F);
      Float.isFinite((-1.0F));
      Float.isFinite((-1894.21F));
      Float.min(104.18284F, 803.9F);
      Float.isFinite(1416.3867F);
      Float.isFinite(0.0F);
      Float.min((-16.955395F), (-1894.21F));
      Float.isFinite(803.9F);
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      Float.min((-2652.403F), 26.3783F);
      Float.min((-2652.403F), (-1894.21F));
      Float.max(0.0F, 104.18284F);
      Float.max(0.0F, (-1087.6882F));
      Double double0 = new Double(104.18284F);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Float float0 = new Float((double) (short)900);
      Float.max(104.18284F, (-1.0F));
      Float.max(104.18284F, 0.0F);
      Float.isFinite((-1.0F));
      Float.isFinite((-1894.21F));
      Float.min(104.18284F, 0.0F);
      Float.isFinite(1416.3867F);
      Float.isFinite(0.0F);
      Float.max((-248.031F), (-156.0F));
      Float.min((-16.955395F), (-1894.21F));
      Float.isFinite(803.9F);
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      Float.min(104.18284F, (-156.0F));
      Float.min((-2652.403F), 26.3783F);
      Float.min((-2652.403F), (-1894.21F));
      Float.max(0.0F, 104.18284F);
      Float.max((-1894.21F), (-1087.6882F));
      JSONTokener jSONTokener0 = new JSONTokener("N~]RvMa\"1{L!0ZRr6!");
      jSONTokener0.skipPast("5a?Y)PcE");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 18 of N~]RvMa\"1{L!0ZRr6!
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "getdescendingIterator";
      stringArray0[1] = "ad";
      stringArray0[2] = "des";
      stringArray0[3] = "Unclosed comment";
      stringArray0[4] = ": ";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String string0 = jSONObject0.toString(1694, 1694);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Integer integer0 = new Integer((-416));
      Integer.toUnsignedLong((-416));
      Float.sum((-1.0F), (-1565.0F));
      int int0 = new Integer((short)8192);
      Float.sum((-4647.5366F), 4294966880L);
      Short.compare((short)2585, (short)135);
      Float.sum((-552.1F), (-1956.0F));
      Double double0 = new Double((short)13);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      linkedList1.toArray();
      Double.isFinite(0.0);
      LinkedList<Boolean> linkedList2 = new LinkedList<Boolean>();
      boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((int) (short)8192);
      Double double1 = new Double((-1.0));
      LinkedList<Boolean> linkedList3 = new LinkedList<Boolean>();
      assertTrue(linkedList3.equals((Object)linkedList1));
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Integer integer0 = new Integer((-416));
      String string0 = "h\\ux#3_?";
      Integer.getInteger(string0);
      Short short0 = new Short((short)49);
      Long long0 = new Long((-1078L));
      String string1 = JSONObject.quote("");
      assertEquals("\"\"", string1);
      
      String string2 = JSONObject.quote(string0);
      assertEquals("\"h\\\\ux#3_?\"", string2);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.7921680368494446
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Short short0 = new Short((short)901);
      Short.compare((short)133, (short)133);
      Float.sum((short) (-1242), (short) (-1242));
      Float.sum((-693.275F), (short)901);
      Short.compare((short)8192, (short)8192);
      Float.sum(1.0F, 1215.9F);
      Double.valueOf((double) 0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.valueOf("is");
      UnaryOperator<Boolean> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.add(boolean0);
      Boolean boolean1 = Boolean.TRUE;
      linkedList0.add(boolean1);
      Boolean boolean2 = Boolean.valueOf(true);
      linkedList0.push(boolean2);
      Boolean.logicalXor(true, true);
      Boolean boolean3 = Boolean.TRUE;
      linkedList0.add((Boolean) null);
      Boolean.logicalXor(false, false);
      Boolean.compare(true, true);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      linkedList1.add((Boolean) null);
      linkedList1.add(boolean1);
      linkedList1.addLast(boolean2);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      jSONObject0.put("is", (Collection) linkedList1);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.2696172122480425
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Short short0 = new Short((short)901);
      Short.compare((short)133, (short)133);
      Float.sum((short) (-1242), (short) (-1242));
      Float.sum((-693.275F), (short)901);
      Short.compare((short)8192, (short)8192);
      Short.compare((short) (-1242), (short)8192);
      Float.sum(1.0F, 1215.9F);
      Double.valueOf((double) (-9434));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.valueOf("is");
      linkedList0.add(boolean0);
      Boolean boolean1 = Boolean.TRUE;
      linkedList0.add(boolean1);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList2 = new LinkedList<Boolean>();
      linkedList1.removeAll(linkedList2);
      linkedList0.toArray();
      Double.isFinite((-693.275F));
      LinkedList<Boolean> linkedList3 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList4 = new LinkedList<Boolean>();
      linkedList4.toArray();
      linkedList1.removeLastOccurrence(linkedList2);
      Short short1 = new Short((short)8192);
      JSONObject jSONObject0 = new JSONObject(short1);
      jSONObject0.toString((int) (short) (-1242));
      Double double0 = new Double(0.0);
      LinkedList<Boolean> linkedList5 = new LinkedList<Boolean>();
      assertFalse(linkedList5.equals((Object)linkedList0));
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.8153756345690437
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("null", 3300);
      assertEquals(3300, int0);
      
      jSONObject0.optLong("~.<4EB[", 0L);
      long long0 = jSONObject0.optLong("true");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Short.compare((short) (-1242), (short) (-1242));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "YJ[C{GOV";
      stringArray0[1] = "java.lang.Long@0000000004.";
      Float float0 = new Float((double) (short)900);
      Float.max(95.85F, (-1.0F));
      Float.max(95.85F, 0.0F);
      Float.isFinite((-1.0F));
      Float.isFinite((-1894.2094F));
      Float.min(95.85F, 803.9F);
      Float.isFinite(0.0F);
      Float.isFinite(95.85F);
      Float.isFinite(1037.0F);
      Float.max((-4099.1F), 95.85F);
      Float float1 = new Float((-1.0F));
      Short short0 = new Short((short)42);
      JSONObject.numberToString(short0);
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Float float0 = new Float((double) (short)900);
      Float.max(104.18284F, (-1.0F));
      Float.max(104.18284F, 0.0F);
      Float.isFinite((-1.0F));
      Float.isFinite((-1894.21F));
      Float.min(104.18284F, 0.0F);
      Float.isFinite(1416.3867F);
      Float.isFinite(0.0F);
      Float.max((-248.031F), (-156.0F));
      Float.min((-16.955395F), (-1894.21F));
      Float.isFinite(803.9F);
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      Float.min((-1.0F), (-156.0F));
      Float.min((-2652.403F), 26.3783F);
      Float.min((-2652.403F), (-1894.21F));
      Float.max(0.0F, 104.18284F);
      Float.max(0.0F, (-1087.6882F));
      JSONObject.numberToString(float0);
      Double double0 = new Double(104.18284F);
      assertEquals(104.1828384399414, (double)double0, 0.01);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Integer integer0 = new Integer(100);
      String[] stringArray0 = new String[9];
      stringArray0[0] = " of ";
      stringArray0[1] = "`P;nKaj6[S1;uB";
      stringArray0[2] = " 9>:|";
      stringArray0[3] = "eyUd&Lho]uc)<?'m,";
      stringArray0[4] = "getlogicalXor";
      stringArray0[5] = "c&";
      stringArray0[6] = " at character ";
      stringArray0[7] = "] is not a Boolean.";
      stringArray0[8] = "?}U4pj";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("h", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.8830986323201322
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Short short0 = new Short((short)900);
      Short.compare((short)133, (short)133);
      Float.sum((short) (-1242), (short)900);
      Float.sum((-693.275F), (short) (-1242));
      Short.compare((short)8192, (short)8192);
      Float.sum((short)133, 0.0F);
      Short.compare((short) (-1242), (short)8192);
      Double double0 = new Double((-362.922137));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = Boolean.FALSE;
      linkedList0.add((Boolean) null);
      Boolean.compare(false, true);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      Boolean boolean2 = Boolean.valueOf(",");
      linkedList1.add(boolean2);
      Comparator<Boolean> comparator0 = (Comparator<Boolean>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      linkedList1.add(boolean1);
      linkedList1.addLast(boolean1);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      double double1 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.0752440338628615
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Short short0 = new Short((short)901);
      Short.compare((short)133, (short)133);
      Float.sum((short) (-1242), (short) (-1242));
      Float.sum((-693.275F), (short)901);
      Short.compare((short)8192, (short)8192);
      Short.compare((short) (-1242), (short)8192);
      Float.sum(1.0F, 1215.9F);
      Double.valueOf((double) (-9434));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.valueOf("is");
      linkedList0.add(boolean0);
      Boolean boolean1 = Boolean.TRUE;
      linkedList0.add(boolean1);
      Boolean boolean2 = Boolean.valueOf(true);
      linkedList0.push(boolean2);
      Boolean boolean3 = Boolean.TRUE;
      linkedList0.add(boolean2);
      Boolean.logicalXor(true, true);
      linkedList0.add((Boolean) null);
      Boolean.logicalXor(true, true);
      Boolean.compare(true, true);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      Boolean.logicalXor(false, false);
      linkedList1.add((Boolean) null);
      linkedList1.add(boolean1);
      linkedList1.addLast(boolean2);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      try { 
        jSONObject0.getJSONObject("6+b@]'n_yB?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6+b@]'n_yB?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.0752440338628615
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Short short0 = new Short((short)901);
      Short.compare((short)133, (short)133);
      Float.sum((short) (-1242), (short) (-1242));
      Float.sum((-693.275F), (short)901);
      Short.compare((short)8192, (short)8192);
      Short.compare((short) (-1242), (short)8192);
      Float.sum(1.0F, 1215.9F);
      Double.valueOf((double) (-9434));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.valueOf("is");
      linkedList0.add(boolean0);
      Boolean boolean1 = new Boolean(true);
      linkedList0.add(boolean1);
      Boolean boolean2 = Boolean.valueOf(true);
      linkedList0.push(boolean2);
      Boolean boolean3 = Boolean.TRUE;
      linkedList0.add(boolean2);
      linkedList0.add((Boolean) null);
      Boolean.logicalXor(false, false);
      Boolean.compare(true, true);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      Boolean.logicalXor(false, false);
      linkedList1.add((Boolean) null);
      linkedList1.add(boolean1);
      linkedList1.addLast(boolean2);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      try { 
        jSONObject0.getString("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "6[p8~Yy;rPd7kZ";
      stringArray0[1] = "TvEas.VBoMo";
      stringArray0[2] = "}Bt\"eocgZli^$Z-*x";
      stringArray0[3] = "*lLTZCc:<JZ";
      stringArray0[4] = ".;a_*";
      stringArray0[5] = "isparseBoolean";
      stringArray0[6] = "6y}IMfHkl";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
