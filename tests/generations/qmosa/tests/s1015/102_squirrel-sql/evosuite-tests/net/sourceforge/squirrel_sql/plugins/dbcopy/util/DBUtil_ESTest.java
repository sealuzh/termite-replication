/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 07:28:45 GMT 2019
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.gargoylesoftware.base.resource.jdbc.CallableStatementWrapper;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.UnaryOperator;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultTreeCellRenderer;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAlias;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAliasColorProperties;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.client.util.ApplicationFileWrappersImpl;
import net.sourceforge.squirrel_sql.client.util.ApplicationFiles;
import net.sourceforge.squirrel_sql.fw.id.IIdentifier;
import net.sourceforge.squirrel_sql.fw.id.IntegerIdentifier;
import net.sourceforge.squirrel_sql.fw.id.UidIdentifier;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.SQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriver;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverProperty;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverPropertyCollection;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.fw.util.FileWrapper;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperFactory;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperFactoryImpl;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.data.time.Quarter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getDatabaseAliasesTreeStructureFile();
      applicationFiles0.getLibraryDirectory();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT_TYPE_DBO;
      ImageIcon imageIcon0 = new ImageIcon();
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDT_TYPE_DBO;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.FOREIGN_KEY;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.createNewDatabaseObjectType("5!47x`.0:w`XasD", (Icon) imageIcon0);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.DATABASE_TYPE_DBO;
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.VIEW;
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.createNewDatabaseObjectType("5!47x`.0:w`XasD", (Icon) imageIcon0);
      DatabaseObjectType.createNewDatabaseObjectType("5!47x`.0:w`XasD");
      DatabaseObjectType.createNewDatabaseObjectType("</span>", (Icon) imageIcon0);
      DatabaseObjectType databaseObjectType7 = DatabaseObjectType.createNewDatabaseObjectType("5!47x`.0:w`XasD", (Icon) imageIcon0);
      DatabaseObjectType.createNewDatabaseObjectType("5!47x`.0:w`XasD");
      DatabaseObjectType.createNewDatabaseObjectType("");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("5!47x`.0:w`XasD", "G>$B<3jw+t}9O", "5!47x`.0:w`XasD", "5!47x`.0:w`XasD", (-1605), "5!47x`.0:w`XasD", (-1605), (-1605), 1760, 1760, "5!47x`.0:w`XasD", "5!47x`.0:w`XasD", 1760, 1760, "\"neq");
      DatabaseObjectType.createNewDatabaseObjectType("G>$B<3jw+t}9O", (Icon) imageIcon0);
      DatabaseObjectType.createNewDatabaseObjectType("</span>", (Icon) imageIcon0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType6);
      DatabaseObjectType databaseObjectType8 = DatabaseObjectType.FUNCTION;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType7);
      DatabaseObjectType databaseObjectType9 = DatabaseObjectType.UDF_TYPE_DBO;
      DatabaseObjectType databaseObjectType10 = DatabaseObjectType.FOREIGN_KEY;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType8);
      DatabaseObjectType.createNewDatabaseObjectType("G>$B<3jw+t}9O", (Icon) imageIcon0);
      DatabaseObjectType databaseObjectType11 = DatabaseObjectType.TABLE_TYPE_DBO;
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(tableColumnInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate((ISQLConnection) null, "|=OY6$w%^=kw6hTyu", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(Integer.MIN_VALUE);
      SQLAlias sQLAlias0 = new SQLAlias(integerIdentifier0);
      sQLAlias0.setName("AND VIEW_NAME =");
      sQLAlias0.setPassword("<[`a]~pXC");
      sQLAlias0.getDriverPropertiesClone();
      dBCopyPlugin0.setPasteMenuEnabled(true);
      SQLDriver sQLDriver0 = new SQLDriver();
      // Undeclared exception!
      try { 
        DBUtil.tableHasPrimaryKey((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getLibraryDirectory();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      applicationFiles1.getLibraryDirectory();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      applicationFiles3.getUserSpecificWikiConfigurationsFile();
      applicationFiles1.getPluginsDirectory();
      applicationFiles6.getPluginsUserSettingsDirectory();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      applicationFiles1.getPluginsUserSettingsDirectory();
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      applicationFiles1.getUserSettingsDirectory();
      applicationFiles0.getLibraryDirectory();
      ApplicationFiles applicationFiles9 = new ApplicationFiles();
      applicationFiles6.getWelcomeFile();
      ApplicationFiles applicationFiles10 = new ApplicationFiles();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      Stack<IDatabaseObjectInfo> stack0 = new Stack<IDatabaseObjectInfo>();
      dBCopyPlugin0.setSourceDatabaseObjects(stack0);
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin0, (ITableInfo) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", ";$~eK", "W");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFiles1.getLibraryDirectory();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      applicationFiles3.getLibraryDirectory();
      applicationFiles3.getLibraryDirectory();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      applicationFiles0.getSquirrelHomeDir();
      applicationFiles5.getUserSpecificWikiConfigurationsFile();
      applicationFiles2.getExecutionLogFile();
      applicationFiles1.getPluginsDirectory();
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      ApplicationFiles applicationFiles9 = new ApplicationFiles();
      applicationFiles2.getUserSettingsDirectory();
      applicationFiles4.getLibraryDirectory();
      ApplicationFiles applicationFiles10 = new ApplicationFiles();
      applicationFiles10.getFAQFile();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SESSION;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("_default", "_default", "_default", "!8E+Fr2u;", 1237, "%T]3]pl 1", 1237, 44, 380, 44, "Missing Q.", "%T]3]pl 1", 1237, (-3272), "E{9O");
      // Undeclared exception!
      try { 
        DBUtil.replaceDistinctDataType(2001, tableColumnInfo0, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      SQLDriver sQLDriver0 = new SQLDriver();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte) (-11);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%}6JP@vK,;_Y*|n9");
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      applicationFiles2.getJDBCDebugLogFile();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      applicationFiles3.getUserSettingsDirectory();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      applicationFiles3.getLicenceFile();
      DBUtil.typesAreEquivalent((-7), 2002);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        dBCopyPlugin0.sessionEnding((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DBUtil.typesAreEquivalent(16, 16);
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      SQLAlias sQLAlias0 = new SQLAlias(uidIdentifier0);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      SQLDriver sQLDriver0 = new SQLDriver();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFiles0.getJDBCDebugLogFile();
      applicationFiles0.getUserSettingsDirectory();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      applicationFiles1.getLicenceFile();
      DBUtil.typesAreEquivalent((-7), 16);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        dBCopyPlugin0.sessionEnding((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getUserSpecificWikiConfigurationsFile();
      applicationFiles0.getPluginsDirectory();
      applicationFiles0.getPluginsUserSettingsDirectory();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      applicationFiles2.getJDBCDebugLogFile();
      applicationFiles2.getUserSettingsDirectory();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      applicationFiles0.getLicenceFile();
      boolean boolean0 = DBUtil.typesAreEquivalent((-7), (-6));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("^L-", "^L-", "^L-", " from ", (-2), "\n", 1111, (-1), (-1), 812, " from ", "d=orF*b]dfA(V+zY", (-2), (-916), "\n");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      ImageIcon imageIcon0 = new ImageIcon();
      imageIcon0.getIconWidth();
      imageIcon0.getImageObserver();
      DatabaseObjectType.createNewDatabaseObjectType("org.apache.log4j.helpers.PatternConverter");
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("\n", (Icon) imageIcon0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBUtil.isBinaryType(tableColumnInfo0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "%jLQIyA#sFd1$z", "%jLQIyA#sFd1$z");
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[9WS{#Y`E8J+}YOY)A");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      fileWrapperFactoryImpl0.createTempFile("_xyW4Zgg,`3mD$", "[9WS{#Y`E8J+}YOY)A");
      dBCopyPlugin0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) null);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[3];
      iDatabaseObjectInfoArray0[1] = (IDatabaseObjectInfo) null;
      iDatabaseObjectInfoArray0[2] = (IDatabaseObjectInfo) null;
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertEquals(3, list0.size());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      String string0 = DBUtil.fixCase((ISession) null, "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(2, 2);
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      applicationFileWrappersImpl0.getQuickStartGuideFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getCellImportExportSelectionsFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getLicenceFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl5 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      boolean boolean1 = DBUtil.typesAreEquivalent(2, 91);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "RB5J", " ) values ( ");
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, " ) values ( ", " ) values ( ");
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.setFileWrapperFactory((FileWrapperFactory) null);
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getUserSQLHistoryFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("AND VIEW_NAME =", "", "QHL2p@rEVU)", "tochar", 2004, "Couldn't find an exact match for destination table ", 2004, (-623), (-623), 2004, "Precisin == scale (", "Encountered unexpected exception while attempting to determine if schemas are used in table definitions", (-201), (-623), " rows ?");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      Object[][] objectArray0 = new Object[9][5];
      Object[] objectArray1 = new Object[18];
      objectArray1[16] = object0;
      objectArray1[1] = object0;
      objectArray1[2] = object0;
      objectArray1[3] = object0;
      objectArray1[4] = object0;
      objectArray1[5] = object0;
      objectArray1[6] = object0;
      objectArray1[7] = object0;
      Object[] objectArray2 = new Object[2];
      objectArray2[0] = object0;
      objectArray2[1] = object0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray2);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque0.peekFirst();
      linkedBlockingDeque1.drainTo((Collection<? super Object>) linkedBlockingDeque0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque2.drainTo((Collection<? super Object>) linkedBlockingDeque1, 0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_CallerRunsPolicy0);
      MockThread mockThread0 = new MockThread();
      mockThread0.setContextClassLoader((ClassLoader) null);
      threadPoolExecutor_CallerRunsPolicy0.rejectedExecution(mockThread0, scheduledThreadPoolExecutor0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      scheduledThreadPoolExecutor0.schedule((Runnable) mockThread0, (-1053L), timeUnit0);
      linkedBlockingDeque0.contains("_xyW4Zgg,`3mD$");
      linkedBlockingDeque1.add("_xyW4Zgg,`3mD$");
      linkedBlockingDeque2.toArray();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getColumnNames((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      Object[][] objectArray0 = new Object[9][5];
      Object[] objectArray1 = new Object[18];
      objectArray1[16] = object0;
      objectArray1[1] = object0;
      objectArray1[2] = object0;
      objectArray1[3] = object0;
      objectArray1[4] = object0;
      objectArray1[5] = object0;
      objectArray1[6] = object0;
      objectArray1[7] = object0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[5];
      objectArray2[1] = object0;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[4];
      Object object1 = new Object();
      objectArray3[0] = object1;
      objectArray3[2] = object0;
      objectArray0[2] = objectArray2;
      Object[] objectArray4 = new Object[2];
      objectArray4[0] = object1;
      objectArray4[1] = object1;
      objectArray0[3] = objectArray4;
      Object object2 = new Object();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "%iybo<)7c 26(", "%iybo<)7c 26(");
      // Undeclared exception!
      try { 
        DBUtil.getColumnName((ISQLConnection) null, (ITableInfo) null, 700);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.117456111453701
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ISession iSession0 = null;
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, (String) null, (String) null, " and catalog ", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[9];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      List<IDatabaseObjectInfo> list1 = DBUtil.convertTableToObjectList(list0);
      List<ITableInfo> list2 = DBUtil.convertObjectToTableList(list1);
      List<IDatabaseObjectInfo> list3 = DBUtil.convertTableToObjectList(list2);
      assertEquals(9, list3.size());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      Object[][] objectArray0 = new Object[9][5];
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = object0;
      objectArray1[1] = object0;
      objectArray1[2] = object0;
      objectArray1[3] = object0;
      objectArray1[4] = object0;
      objectArray1[5] = object0;
      objectArray1[6] = object0;
      objectArray1[7] = object0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[5];
      objectArray2[0] = (Object) null;
      objectArray2[1] = object0;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) null;
      objectArray2[4] = (Object) null;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[4];
      Object object1 = new Object();
      objectArray3[0] = object1;
      objectArray3[1] = (Object) null;
      objectArray3[2] = object0;
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[2];
      objectArray4[0] = object1;
      objectArray4[1] = object1;
      objectArray0[3] = objectArray4;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray4);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1, (-184));
      linkedBlockingDeque0.add(object1);
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      arrayList0.retainAll(linkedBlockingDeque0);
      arrayList0.add((ITableInfo) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getForeignKeySQL(dBCopyPlugin0, (ITableInfo) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "AND VIEW_NAME =");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy";
      stringArray0[1] = "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy";
      stringArray0[2] = "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy";
      stringArray0[3] = "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy";
      stringArray0[4] = "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy";
      stringArray0[5] = "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy";
      stringArray0[1] = "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy";
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "WK>:D3FFyg1f|NU0$vZ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WK>:D3FFyg1f|NU0$vZ");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, ";W)D]dN!<9Ut/LYf>V");
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, "Encountered unexpected exception while attempting to determine if catalogs are used in table definitions", (String) null, "Encountered unexpected exception while attempting to determine if catalogs are used in table definitions", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getLibraryDirectory();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      applicationFiles1.getLibraryDirectory();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      applicationFiles3.getUserSpecificWikiConfigurationsFile();
      applicationFiles1.getPluginsDirectory();
      applicationFiles6.getPluginsUserSettingsDirectory();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      applicationFiles1.getPluginsUserSettingsDirectory();
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      applicationFiles1.getUserSettingsDirectory();
      applicationFiles0.getLibraryDirectory();
      ApplicationFiles applicationFiles9 = new ApplicationFiles();
      applicationFiles6.getWelcomeFile();
      ApplicationFiles applicationFiles10 = new ApplicationFiles();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setPasteToTableName("^DwY)eWDntT,]3|3O");
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin0, (ITableInfo) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", ";$~eK", ",\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFileWrappersImpl2.setApplicationFiles(applicationFiles0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl3.getCellImportExportSelectionsFile();
      applicationFileWrappersImpl2.getUserSQLHistoryFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("WcB", "log4j.debug", "log4j.debug", "ERROR", 4481, "aam#JA4fklO3%", 16, 29, 4481, 116, (String) null, "aam#JA4fklO3%", 2001, 618, "1");
      ApplicationFileWrappersImpl applicationFileWrappersImpl5 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl6 = new ApplicationFileWrappersImpl();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      applicationFileWrappersImpl2.getDatabaseAliasesFile();
      applicationFileWrappersImpl6.setFileWrapperFactory(fileWrapperFactoryImpl0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl7 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getUserSQLHistoryFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl8 = new ApplicationFileWrappersImpl();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      Object[][] objectArray0 = new Object[2][0];
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = object0;
      objectArray1[1] = (Object) "u*[<0";
      objectArray1[2] = (Object) "u*[<0";
      Object object1 = new Object();
      objectArray1[3] = object1;
      objectArray1[4] = object0;
      objectArray1[5] = (Object) "`faGjv";
      objectArray1[6] = (Object) "`faGjv";
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[7];
      objectArray2[0] = (Object) "`faGjv";
      objectArray2[1] = object0;
      objectArray2[2] = (Object) null;
      objectArray2[3] = object1;
      objectArray2[4] = object1;
      objectArray2[5] = (Object) "\n";
      objectArray2[6] = (Object) "\n";
      objectArray0[1] = objectArray2;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      SQLDriver sQLDriver0 = new SQLDriver(uidIdentifier0);
      assertEquals("-6ff87aa0:16e7d61176a:-7e1c", uidIdentifier0.toString());
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("u*[<0", "3", (String) null, "3", 0, "DBUtil.info.bindbloblength", 0, 3871, 3871, 0, "DBUtil.info.bindbloblength", "3", 451, 451, "Wq^%!");
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFiles1.getLibraryDirectory();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      applicationFiles3.getLibraryDirectory();
      applicationFiles3.getLibraryDirectory();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      applicationFiles0.getSquirrelHomeDir();
      applicationFiles5.getUserSpecificWikiConfigurationsFile();
      int int0 = (-1168);
      String string0 = "_l121\"@_Sg5";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("DBUtil.mappingErrorKeyword", "", "Q?!2r =T3fx|", "_l121\"@_Sg5", 151, "DBUtil.mappingErrorKeyword", 151, (-866), (-663), 334, "iCU\"b)mHcdkD%JHk", "OSfv3%Q", (-978), 16, "iCU\"b)mHcdkD%JHk");
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      SQLDriverPropertyCollection sQLDriverPropertyCollection1 = new SQLDriverPropertyCollection();
      // Undeclared exception!
      try { 
        sQLDriverPropertyCollection1.addDriverProperty((SQLDriverProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.SQLDriverPropertyCollection", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFiles1.getLibraryDirectory();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      applicationFiles3.getLibraryDirectory();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      applicationFiles0.getSquirrelHomeDir();
      applicationFiles5.getUserSpecificWikiConfigurationsFile();
      applicationFiles2.getExecutionLogFile();
      applicationFiles1.getPluginsDirectory();
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      ApplicationFiles applicationFiles9 = new ApplicationFiles();
      applicationFiles2.getUserSettingsDirectory();
      applicationFiles4.getLibraryDirectory();
      ApplicationFiles applicationFiles10 = new ApplicationFiles();
      applicationFiles10.getFAQFile();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SESSION;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("A}]o8^^&|ML3fRN", "PCvEO52|JZ;J31yXR", "_default", "%T]3]pl 1", 92, "-4mOl|6-ZbB/l3phi4", 1237, 70, (-2), 70, "!8E+Fr2u;", "n=DyI5Y7mt", 32511, 1237, "-4mOl|6-ZbB/l3phi4");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[0];
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, (String) null, (String) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "5YCVM?R21vn~SN");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, (-1045));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl(" that matched ", "com.jidesoft.plaf.vsnet.VsnetMenuUI$MenuKeyHandler");
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      fileWrapperFactoryImpl0.create("text");
      fileWrapperFactoryImpl0.create("com.jidesoft.plaf.vsnet.VsnetMenuUI$MenuKeyHandler");
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      fileWrapperFactoryImpl1.createTempFile(" that matched ", "[$MHy%");
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList((List<IDatabaseObjectInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "|=OY6$w%^=kw6hTyu", (String) null);
      // Undeclared exception!
      try { 
        DBUtil.getColumnCount((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.replaceOtherDataType((TableColumnInfo) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      Object[][] objectArray0 = new Object[9][5];
      Object[] objectArray1 = new Object[18];
      objectArray1[16] = object0;
      objectArray1[1] = object0;
      objectArray1[2] = object0;
      objectArray1[3] = object0;
      objectArray1[4] = object0;
      objectArray1[5] = object0;
      objectArray1[6] = object0;
      objectArray1[7] = object0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[5];
      objectArray2[1] = object0;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[4];
      Object object1 = new Object();
      objectArray3[0] = object1;
      objectArray3[2] = object0;
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[2];
      objectArray4[0] = object1;
      objectArray4[1] = object1;
      objectArray0[3] = objectArray4;
      Object object2 = new Object();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "iP[ZblE:MM3\"@m[k", "cFGPX*itA=8,|*|");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getPasteToTableInfo((ISQLConnection) null, " gSF\"kw$<5h2", "t{+");
      // Undeclared exception!
      try { 
        DBUtil.getPKColumnString((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-3);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setCopyMenuEnabled(true);
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "Tr4/T2Evx", (String) null);
      String string0 = "esyKpB\\/&C:6";
      DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      int int1 = 301;
      Integer integer0 = new Integer(301);
      CallableStatement callableStatement0 = null;
      CallableStatementWrapper callableStatementWrapper0 = null;
      try {
        callableStatementWrapper0 = new CallableStatementWrapper((CallableStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, "u*[<0", "\n", (-3), "`faGjv", (-3), (-3), (-3), (-1994091956), "d=orF*b]dfA(V+zY", "^L-", (-3), 812, (String) null);
      ImageIcon imageIcon0 = new ImageIcon();
      JScrollPane jScrollPane0 = new JScrollPane();
      imageIcon0.getIconHeight();
      imageIcon0.getImageObserver();
      imageIcon0.getAccessibleContext();
      DatabaseObjectType.createNewDatabaseObjectType("}maXTx");
      imageIcon0.getImageObserver();
      DatabaseObjectType.createNewDatabaseObjectType("}maXTx");
      imageIcon0.getImageLoadStatus();
      DatabaseObjectType.createNewDatabaseObjectType("[", (Icon) imageIcon0);
      DBUtil.isBinaryType(tableColumnInfo0);
      System.setCurrentTimeMillis(2446L);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getUserSettingsDirectory();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFiles0.getLibraryDirectory();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      applicationFiles0.getLibraryDirectory();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      applicationFiles0.getUserSpecificWikiConfigurationsFile();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      applicationFiles0.getSquirrelHomeDir();
      applicationFiles1.getExecutionLogFile();
      applicationFiles4.getPluginsDirectory();
      applicationFiles5.getPluginsUserSettingsDirectory();
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      ApplicationFiles applicationFiles9 = new ApplicationFiles();
      applicationFiles9.getUserSettingsDirectory();
      ApplicationFiles applicationFiles10 = new ApplicationFiles();
      ApplicationFiles applicationFiles11 = new ApplicationFiles();
      applicationFiles11.getLibraryDirectory();
      applicationFiles2.getFAQFile();
      ApplicationFiles applicationFiles12 = new ApplicationFiles();
      ApplicationFiles applicationFiles13 = new ApplicationFiles();
      applicationFiles13.getLicenceFile();
      // Undeclared exception!
      try { 
        DBUtil.getColumnList((TableColumnInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("\"neq", ")$<eO*8!vVUr$dY", ")$<eO*8!vVUr$dY", ")$<eO*8!vVUr$dY", 152, "Zpkra/K?o|['&EjO}7", (-802), (-1214), 110, (-5), "i17Pq=D", "warnJreJdbcMismatch", (-1214), (-14), "p");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[6];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo(". Using 'max'", "8", "</span>", (String) null, (-1214), "(/sg|,~hnO>mZ8[~B#]", (-3353), (-7), 7, 2151, "double($p)", "p", (-3353), (-1214), "h.klWItqI");
      tableColumnInfoArray0[1] = tableColumnInfo1;
      tableColumnInfoArray0[2] = tableColumnInfo0;
      tableColumnInfoArray0[3] = tableColumnInfo0;
      tableColumnInfoArray0[4] = tableColumnInfo0;
      tableColumnInfoArray0[5] = tableColumnInfo0;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals(")$<eO*8!vVUr$dY, null, )$<eO*8!vVUr$dY, )$<eO*8!vVUr$dY, )$<eO*8!vVUr$dY, )$<eO*8!vVUr$dY", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "BH^";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("gBBt", (String) null, "$find(", (String) null, (-2004318069), "gBBt", 16, 151, (-1168), 6, "DBUtil.mappingErrorKeyword", "", 3, 16, "Q?!2r =T3fx|");
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      SQLDriverPropertyCollection sQLDriverPropertyCollection1 = new SQLDriverPropertyCollection();
      // Undeclared exception!
      try { 
        sQLDriverPropertyCollection1.addDriverProperty((SQLDriverProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.SQLDriverPropertyCollection", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getDatabaseAliasesFile();
      fileWrapperFactoryImpl0.create("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", ", ");
      String string0 = "'j))";
      int int0 = 541;
      String string1 = "Unexpected exception while attempting to determine if a table (";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, "Q[.f[&gJ:;#U<la", "com.jidesoft.plaf.vsnet.VsnetMenuUI$MenuKeyHandler", "net.sourceforge.squirrel_sql.fw.dialects.AxionDialectExt", 453, "'j))", 70, 453, 3526, 3526, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "Q[.f[&gJ:;#U<la", 453, 541, "Unexpected exception while attempting to determine if a table (");
      // Undeclared exception!
      try { 
        DBUtil.getSchemaNameFromDbObject((IDatabaseObjectInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = null;
      String string1 = "3viM1\\%\\b";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("\n", "^L-", (String) null, "3viM1%\b", 16, "3viM1%\b", (-1195), (-4189), (-1994091956), (-1994091956), "\n", "^L-", 453, 453, "_xyW4Zgg,`3mD$");
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      SQLDriverPropertyCollection sQLDriverPropertyCollection1 = new SQLDriverPropertyCollection();
      SQLDriverProperty[] sQLDriverPropertyArray0 = new SQLDriverProperty[7];
      SQLDriverProperty sQLDriverProperty0 = new SQLDriverProperty();
      sQLDriverPropertyArray0[0] = sQLDriverProperty0;
      // Undeclared exception!
      try { 
        sQLDriverPropertyCollection0.getDriverProperty(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Trying to find [");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("T{z.PhB.W\"", "}", "}", "org.jfree.data.xy.AbstractXYDataset", (-718), "%odbcin", (-718), (byte)35, 4481, (-1285), "}", "}", 280, (byte)35, " ) v{luesK(U ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals((-718), int0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "p`\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "N8!jqti");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Witi=w!`r/AB?@V'");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byteArray0[0] = (byte)35;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Witi=w!`r/AB?@V'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder(evoSuiteFile0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", " CASCADE", "zZ", (String) null, 1210, "p`\"", 335, (-4572), 1210, (-1285), "p`\"", "zZ", (-718), (-718), "Tf{");
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getMaxColumnLengthSQL((ISession) null, tableColumnInfo0, "p`\"", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "p`\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "N8!jqti");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Witi=w!`r/AB?@V'");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)35;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Witi=w!`r/AB?@V'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder(evoSuiteFile0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", " CASCADE", "zZ", (String) null, 1210, "p`\"", 335, (-4572), 1210, (-1285), "p`\"", "zZ", (-718), (-718), "Tf{");
      FileSystemHandling.createFolder(evoSuiteFile0);
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getMaxColumnLengthSQL((ISession) null, tableColumnInfo0, "p`\"", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFiles1.getLibraryDirectory();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      applicationFiles3.getLibraryDirectory();
      applicationFiles3.getLibraryDirectory();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      applicationFiles0.getSquirrelHomeDir();
      applicationFiles5.getUserSpecificWikiConfigurationsFile();
      applicationFiles2.getExecutionLogFile();
      applicationFiles1.getPluginsDirectory();
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      ApplicationFiles applicationFiles9 = new ApplicationFiles();
      applicationFiles2.getUserSettingsDirectory();
      applicationFiles4.getLibraryDirectory();
      ImageIcon imageIcon0 = new ImageIcon("jFZ'=@O[|&tZ.7kt");
      imageIcon0.getImageObserver();
      DatabaseObjectType.createNewDatabaseObjectType("jFZ'=@O[|&tZ.7kt");
      imageIcon0.getImageLoadStatus();
      DatabaseObjectType.createNewDatabaseObjectType("=!{ m+<V", (Icon) imageIcon0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("[", "SQLAlias.error.blankname", "Ed`S'ZSmI\"bvVHsK", "SQLAlias.error.blankname", 4, "Ed`S'ZSmI\"bvVHsK", 1210, 1210, 16, 128, "cZhf-W>_4K", "=!{ m+<V", 128, 1210, "1.4");
      DBUtil.isBinaryType(tableColumnInfo0);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getDatabaseAliasesTreeStructureFile();
      applicationFiles0.getUserSpecificWikiConfigurationsFile();
      applicationFiles0.getLibraryDirectory();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT_TYPE_DBO;
      ImageIcon imageIcon0 = new ImageIcon();
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDT_TYPE_DBO;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.UDT;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.FOREIGN_KEY;
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.createNewDatabaseObjectType("5!47x`.0:w`XasD", (Icon) imageIcon0);
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.DATABASE_TYPE_DBO;
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.VIEW;
      DatabaseObjectType databaseObjectType7 = DatabaseObjectType.createNewDatabaseObjectType("5!47x`.0:w`XasD", (Icon) imageIcon0);
      DatabaseObjectType.createNewDatabaseObjectType("5!47x`.0:w`XasD");
      DatabaseObjectType.createNewDatabaseObjectType("</span>", (Icon) imageIcon0);
      DatabaseObjectType databaseObjectType8 = DatabaseObjectType.createNewDatabaseObjectType("5!47x`.0:w`XasD", (Icon) imageIcon0);
      DatabaseObjectType.createNewDatabaseObjectType("5!47x`.0:w`XasD");
      DatabaseObjectType.createNewDatabaseObjectType("");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("5!47x`.0:w`XasD", "G>$B<3jw+t}9O", "5!47x`.0:w`XasD", "5!47x`.0:w`XasD", (-1605), "5!47x`.0:w`XasD", (-1605), (-1605), 1760, 1760, "5!47x`.0:w`XasD", "5!47x`.0:w`XasD", 1760, 1760, "\"neq");
      DatabaseObjectType.createNewDatabaseObjectType("G>$B<3jw+t}9O", (Icon) imageIcon0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType7);
      DatabaseObjectType databaseObjectType9 = DatabaseObjectType.FUNCTION;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType8);
      DatabaseObjectType databaseObjectType10 = DatabaseObjectType.UDF_TYPE_DBO;
      DatabaseObjectType databaseObjectType11 = DatabaseObjectType.FOREIGN_KEY;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType4);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType9);
      DatabaseObjectType.createNewDatabaseObjectType("G>$B<3jw+t}9O", (Icon) imageIcon0);
      DatabaseObjectType databaseObjectType12 = DatabaseObjectType.TABLE_TYPE_DBO;
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(tableColumnInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier((-1061));
      SQLAlias sQLAlias0 = new SQLAlias(integerIdentifier0);
      SQLAliasColorProperties sQLAliasColorProperties0 = sQLAlias0.getColorProperties();
      sQLAliasColorProperties0.setOverrideObjectTreeBackgroundColor(false);
      sQLAlias0.setColorProperties(sQLAliasColorProperties0);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = sQLAlias0.getDriverPropertiesClone();
      sQLDriverPropertyCollection0.clear();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      UidIdentifier uidIdentifier1 = new UidIdentifier();
      uidIdentifier1.setString("NORMAL");
      uidIdentifier1.setString("NORMAL");
      SQLDriver sQLDriver0 = new SQLDriver(uidIdentifier1);
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject((IDatabaseObjectInfo) null, schemaInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      objectArray0[7] = object0;
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      linkedBlockingDeque0.drainTo((Collection<? super Object>) priorityQueue0, (-4234));
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque2.add(object0);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultLeafIcon();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.createNewDatabaseObjectType("Lf!MeH4 RbP.>#WZ", icon0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Lf!MeH4 RbP.>#WZ", "Lf!MeH4 RbP.>#WZ", "Lf!MeH4 RbP.>#WZ", "$gRcY", (-1144), "$gRcY", (-1144), 4756, (-4234), (-4234), "D$G/g#al0", "?Oz]}0^Z&62", (-2028178998), (-4234), " >Pay7/aJI>");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBUtil.isBinaryType(tableColumnInfo0);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#6O;)XR5QuN9;");
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFileWrappersImpl1.setApplicationFiles(applicationFiles0);
      applicationFileWrappersImpl1.getCellImportExportSelectionsFile();
      applicationFileWrappersImpl1.getUserSQLHistoryFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("101z>M.FEv", "p<6`U", "aamYJAZklO3%", (String) null, 2001, "101z>M.FEv", 29, 29, 16, 116, "|=OY6$w%^=kw6hTyu", "#6O;)XR5QuN9;", 116, 373, "p<6`U");
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      applicationFileWrappersImpl0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl5 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getUserSQLHistoryFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl6 = new ApplicationFileWrappersImpl();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      assertEquals("-6ff87aa0:16e7d61176a:-7e51", uidIdentifier0.toString());
      
      boolean boolean0 = DBUtil.typesAreEquivalent(1514, (-3));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Properties properties0 = new Properties();
      SQLAlias sQLAlias0 = new SQLAlias((IIdentifier) null);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = sQLAlias0.getDriverPropertiesClone();
      sQLDriverPropertyCollection0.applyTo(properties0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O>");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "O>");
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(4688);
      sQLDriverPropertyCollection0.removeDriverProperty(";YvGP(!gzPdr4^X$");
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      assertEquals("-6ff87aa0:16e7d61176a:-7e84", uidIdentifier0.toString());
      
      boolean boolean0 = DBUtil.typesAreEquivalent((-649), 4688);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(3037, 3037);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.executeQuery((ISession) null, ";YvGP(!gzPdr4^X$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      DBUtil.getLastStatement();
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      DBUtil.getLastStatement();
      // Undeclared exception!
      try { 
        DBUtil.sanityCheckPreferences((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setPasteMenuEnabled(false);
      DBUtil.setLastStatementValues((String) null);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)applicationFileWrappersImpl0.getDatabaseAliasesFile();
      fileWrapperFactoryImpl0.create("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", ", ");
      fileWrapperImpl0.toURL();
      fileWrapperFactoryImpl0.create((FileWrapper) fileWrapperImpl0, "'pcq1bPC('");
      dBCopyPlugin0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      DBUtil.validateColumnNames((ITableInfo) null, dBCopyPlugin0);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      dBCopyPlugin0.getApplication();
      applicationFileWrappersImpl1.getPluginsDirectory();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      FileWrapperImpl fileWrapperImpl1 = new FileWrapperImpl(fileWrapperImpl0);
      FileWrapperImpl fileWrapperImpl2 = new FileWrapperImpl(fileWrapperImpl0, "'pcq1bPC('");
      FileWrapperImpl fileWrapperImpl3 = new FileWrapperImpl(fileWrapperImpl2);
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.setFileWrapperFactory(fileWrapperFactoryImpl1);
      ApplicationFileWrappersImpl applicationFileWrappersImpl5 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl6 = new ApplicationFileWrappersImpl();
      assertFalse(applicationFileWrappersImpl6.equals((Object)applicationFileWrappersImpl1));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[1];
      iDatabaseObjectInfoArray0[0] = (IDatabaseObjectInfo) foreignKeyInfo0;
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo$MockitoMock$127295481 cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque1.drainTo((Collection<? super Object>) linkedBlockingDeque0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque1.drainTo((Collection<? super Object>) linkedBlockingDeque2, 16);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1004, threadPoolExecutor_CallerRunsPolicy0);
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      scheduledThreadPoolExecutor0.schedule((Runnable) mockThread0, (long) 0, timeUnit0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(0, 0);
      linkedBlockingDeque2.contains(defaultTableModel0);
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getLicenceFile();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getSelectQuery(dBCopyPlugin1, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ImageIcon imageIcon0 = new ImageIcon();
      JScrollPane jScrollPane0 = new JScrollPane();
      imageIcon0.setImageObserver(jScrollPane0);
      imageIcon0.getImage();
      imageIcon0.getIconHeight();
      imageIcon0.getAccessibleContext();
      jScrollPane0.getMinimumSize();
      jScrollPane0.getY();
      imageIcon0.setImageObserver(jScrollPane0);
      imageIcon0.getIconHeight();
      imageIcon0.toString();
      imageIcon0.getIconHeight();
      ImageIcon imageIcon1 = new ImageIcon();
      imageIcon0.getImageObserver();
      imageIcon0.getAccessibleContext();
      // Undeclared exception!
      try { 
        DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", ",\n\tPRIMARY KEY ", 87, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 87, 2005, 5, 2005, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 87, 64000, "\n FROM ");
      // Undeclared exception!
      try { 
        DBUtil.getColumnSql(dBCopyPlugin0, tableColumnInfo0, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "clob");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getLibraryDirectory();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      applicationFiles2.getLibraryDirectory();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      applicationFiles4.getUserSpecificWikiConfigurationsFile();
      applicationFiles5.getPluginsDirectory();
      applicationFiles4.getPluginsUserSettingsDirectory();
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      applicationFiles3.getPluginsUserSettingsDirectory();
      ApplicationFiles applicationFiles9 = new ApplicationFiles();
      applicationFiles8.getUserSettingsDirectory();
      applicationFiles5.getLibraryDirectory();
      ApplicationFiles applicationFiles10 = new ApplicationFiles();
      applicationFiles9.getWelcomeFile();
      ApplicationFiles applicationFiles11 = new ApplicationFiles();
      applicationFiles4.getLicenceFile();
      ApplicationFiles applicationFiles12 = new ApplicationFiles();
      // Undeclared exception!
      try { 
        DBUtil.isBinaryType((TableColumnInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, "u*[<0", "\n", (-3), "`faGjv", (-3), (-3), (-3), (-1994091956), "d=orF*b]dfA(V+zY", "^L-", (-3), 812, (String) null);
      ImageIcon imageIcon0 = new ImageIcon();
      JScrollPane jScrollPane0 = new JScrollPane();
      imageIcon0.setImageObserver(jScrollPane0);
      imageIcon0.getIconHeight();
      imageIcon0.getImageObserver();
      imageIcon0.getAccessibleContext();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.createNewDatabaseObjectType("}maXTx");
      imageIcon0.getImageObserver();
      DatabaseObjectType.createNewDatabaseObjectType("}maXTx");
      imageIcon0.getImageLoadStatus();
      DatabaseObjectType.createNewDatabaseObjectType("[", (Icon) imageIcon0);
      DatabaseObjectType.createNewDatabaseObjectType("org.apache.log4j.helpers.PatternConvert:r", (Icon) imageIcon0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBUtil.isBinaryType(tableColumnInfo0);
      System.setCurrentTimeMillis(2446L);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getSourceSession();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "newObjectName", (String) null, "T/:1S:Kw7Xu;(7>vRl", 8, " ", 8, (-846), 957, 8, "G}c", ". Skipping FK constraint", (-846), (-3169), "T/:1S:Kw7Xu;(7>vRl");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getDestSession();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      int int0 = DBUtil.replaceDistinctDataType(0, tableColumnInfo0, (ISession) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getTables((ISession) null, " ) v5lues ( ", "zU-qU&gc9LuYNa", ";YvGP(!gzPdr4^X$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      String string0 = DBUtil.fixCase((ISession) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object object0 = new Object();
      Object[][] objectArray0 = new Object[9][5];
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = object0;
      objectArray1[1] = object0;
      objectArray1[2] = object0;
      objectArray1[3] = object0;
      objectArray1[4] = object0;
      objectArray1[5] = object0;
      objectArray1[6] = object0;
      objectArray1[7] = object0;
      objectArray0[0] = objectArray1;
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      linkedBlockingDeque0.drainTo((Collection<? super Object>) priorityQueue0, (-4234));
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      DBUtil dBUtil0 = new DBUtil();
      linkedBlockingDeque1.add(dBUtil0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque3.add(object0);
      LinkedBlockingDeque<Object> linkedBlockingDeque4 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque4.toArray();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getInsertSQL(dBCopyPlugin0, "null ISQLAlias passed", (ITableInfo) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque1.drainTo((Collection<? super Object>) linkedBlockingDeque0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque1.drainTo((Collection<? super Object>) linkedBlockingDeque2, 16);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1004, threadPoolExecutor_CallerRunsPolicy0);
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      scheduledThreadPoolExecutor0.schedule((Runnable) mockThread0, (long) 0, timeUnit0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(0, 0);
      linkedBlockingDeque2.contains(defaultTableModel0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DBUtil.tableHasForeignKey("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "~", "DBUtil.error.unknowntype", foreignKeyInfo0, dBCopyPlugin0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.isKeyword((ISession) null, "Dq/JC'ktnls FPQ_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.checkKeyword((ISession) null, "1|87PE{F)Bq1f#", "-s,!H  ]ow!fgp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "\n", "b4*i^FA3/ympv#=Gsf");
      int[] intArray0 = Quarter.LAST_MONTH_IN_QUARTER;
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(Integer.MIN_VALUE);
      SQLAlias sQLAlias0 = new SQLAlias((IIdentifier) null);
      sQLAlias0.setName("&{_YEo\"Mo}6");
      sQLAlias0.setPassword("\n");
      sQLAlias0.getDriverPropertiesClone();
      dBCopyPlugin0.setPasteMenuEnabled(true);
      SQLDriver sQLDriver0 = new SQLDriver();
      // Undeclared exception!
      try { 
        DBUtil.tableHasPrimaryKey((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Object object0 = new Object();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      UidIdentifier uidIdentifier1 = new UidIdentifier();
      // Undeclared exception!
      try { 
        DBUtil.convertTableToObjectList((List<ITableInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Stack<ITableInfo> stack0 = new Stack<ITableInfo>();
      List<IDatabaseObjectInfo> list0 = DBUtil.convertTableToObjectList(stack0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque1.drainTo((Collection<? super Object>) linkedBlockingDeque0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque1.drainTo((Collection<? super Object>) linkedBlockingDeque2, 16);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1004, threadPoolExecutor_CallerRunsPolicy0);
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      scheduledThreadPoolExecutor0.schedule((Runnable) mockThread0, (long) 0, timeUnit0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "DuHjQMb", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "{", (-2127031420));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFiles1.getLibraryDirectory();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      applicationFiles3.getLibraryDirectory();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      applicationFiles5.getSquirrelHomeDir();
      applicationFiles2.getExecutionLogFile();
      applicationFiles3.getPluginsDirectory();
      applicationFiles5.getPluginsUserSettingsDirectory();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      applicationFiles6.getUserSettingsDirectory();
      applicationFiles0.getLibraryDirectory();
      applicationFiles6.getFAQFile();
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      ApplicationFiles applicationFiles9 = new ApplicationFiles();
      applicationFiles9.getLicenceFile();
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, "-s,!H  ]ow!fgp", "getViewDefinitonSQL: OyQL 4 and below oesn't support views", "getViewDefinitonSQL: OyQL 4 and below oesn't support views", 4296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy";
      stringArray0[1] = "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy";
      stringArray0[2] = "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy";
      stringArray0[1] = "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy";
      stringArray0[4] = "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy";
      stringArray0[1] = "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy";
      stringArray0[1] = "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy";
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.sameDatabaseType((ISession) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Object object0 = new Object();
      Object[][] objectArray0 = new Object[9][5];
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = object0;
      objectArray1[1] = object0;
      objectArray1[2] = object0;
      objectArray1[3] = object0;
      objectArray1[4] = object0;
      objectArray1[5] = object0;
      objectArray1[6] = object0;
      objectArray1[7] = object0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[5];
      objectArray2[0] = (Object) null;
      objectArray2[1] = object0;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) null;
      objectArray2[4] = (Object) null;
      objectArray0[1] = objectArray2;
      Object object1 = new Object();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("replaceOtherDataType: unexpected exception - ", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "z9(k@{=!W3l&L4A", " AND VIEW_NAME = ", 808, "^;<", (-991), (-991), (-2876), 808, " AND VIEW_NAME = ", "z9(k@{=!W3l&L4A", (-991), 462, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      DBUtil.replaceDistinctDataType(2003, tableColumnInfo0, (ISession) null);
      System.setCurrentTimeMillis((-1398L));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getUserSettingsDirectory();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFiles1.getLibraryDirectory();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      applicationFiles0.getLibraryDirectory();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      applicationFiles3.getSquirrelHomeDir();
      applicationFiles5.getPluginsDirectory();
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      applicationFiles4.getLibraryDirectory();
      ApplicationFiles applicationFiles9 = new ApplicationFiles();
      ApplicationFiles applicationFiles10 = new ApplicationFiles();
      applicationFiles10.getLibraryDirectory();
      ApplicationFiles applicationFiles11 = new ApplicationFiles();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Encountered unexpected exception while attempting to determine if catalogs are used in table definitions", "Encountered unexpected exception while attempting to determine if catalogs are used in table definitions", "Encountered unexpected exception while attempting to determine if catalogs are used in table definitions", "Encountered unexpected exception while attempting to determine if catalogs are used in table definitions", 181, "Encountered unexpected exception while attempting to determine if catalogs are used in table definitions", (-3240), (-2), (-3240), (-2), "Encountered unexpected exception while attempting to determine if catalogs are used in table definitions", "DBUtil.mappingErrorKeyword", 181, (-2580), "Q[.f[&gJ:;#U<la");
      DBUtil.replaceDistinctDataType((-3240), tableColumnInfo0, (ISession) null);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DBUtil.setLastStatement("");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = null;
      String string1 = "log";
      String string2 = "%sqlupper(";
      String string3 = "number($p,$s)";
      dBCopyPlugin0.getApplication();
      dBCopyPlugin0.unload();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      schemaInfo0.getSQLDatabaseMetaData();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("number($p,$s)", "DBUtil.info.bindclobmem", "log", (String) null, 2, " c8AOL'[pZ|$c", 2003, (-619), (-619), 0, "%sqlupper(", "%sqlupper(", 0, 1, "");
      dBCopyPlugin0.setDestDatabaseObject(tableColumnInfo0);
      schemaInfo0.getSQLDatabaseMetaData();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLConnection sQLConnection0 = null;
      try {
        sQLConnection0 = new SQLConnection((Connection) null, sQLDriverPropertyCollection0, sQLDriver0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLConnection == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.SQLConnection", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "p`\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "N8!jqti");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Witi=w!`r/AB?@V'");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)35;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Witi=w!`r/AB?@V'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder(evoSuiteFile0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", " CASCADE", "zZ", (String) null, 1210, "p`\"", 335, (-4572), 1210, (-1285), "p`\"", "zZ", (-718), (-718), "Tf{");
      FileSystemHandling.createFolder(evoSuiteFile0);
      dBCopyPlugin0.getDestSession();
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(1210, int0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.deleteDataInExistingTable((ISession) null, ";YvGP(!gzPdr4^X$", "catalog=", "catalog=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CallableStatement callableStatement0 = null;
      // Undeclared exception!
      try { 
        DBUtil.fixCase((ISession) null, "com.jidesoft.plaf.vsnet.VsnetMenuUI$MenuKeyHandler");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[0];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      UidIdentifier uidIdentifier1 = new UidIdentifier();
      UidIdentifier uidIdentifier2 = new UidIdentifier();
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList((IDatabaseObjectInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = DBUtil.getLastStatementValues();
      assertNull(string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getUserSettingsDirectory();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFiles1.getLibraryDirectory();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      applicationFiles4.getLibraryDirectory();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      applicationFiles7.getSquirrelHomeDir();
      applicationFiles4.getExecutionLogFile();
      applicationFiles7.getPluginsDirectory();
      applicationFiles6.getPluginsUserSettingsDirectory();
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      ApplicationFiles applicationFiles9 = new ApplicationFiles();
      applicationFiles0.getUserSettingsDirectory();
      ApplicationFiles applicationFiles10 = new ApplicationFiles();
      applicationFiles10.getLibraryDirectory();
      applicationFiles0.getFAQFile();
      ApplicationFiles applicationFiles11 = new ApplicationFiles();
      ApplicationFiles applicationFiles12 = new ApplicationFiles();
      applicationFiles4.getLicenceFile();
      // Undeclared exception!
      try { 
        DBUtil.dropTable("getViewDefinitonSQL: OyQL 4 and below oesn't support views", (String) null, "getViewDefinitonSQL: OyQL 4 and below oesn't support views", (ISession) null, false, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ArrayList<IDatabaseObjectInfo> arrayList0 = new ArrayList<IDatabaseObjectInfo>();
      UnaryOperator<IDatabaseObjectInfo> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      List<ITableInfo> list0 = DBUtil.convertObjectToTableList(arrayList0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getLibraryDirectory();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      applicationFiles1.getLibraryDirectory();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      applicationFiles3.getUserSpecificWikiConfigurationsFile();
      applicationFiles1.getPluginsDirectory();
      applicationFiles6.getPluginsUserSettingsDirectory();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      applicationFiles1.getPluginsUserSettingsDirectory();
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      applicationFiles6.getPluginsDirectory();
      ApplicationFiles applicationFiles9 = new ApplicationFiles();
      applicationFiles4.getLibraryDirectory();
      ApplicationFiles applicationFiles10 = new ApplicationFiles();
      ApplicationFiles applicationFiles11 = new ApplicationFiles();
      applicationFiles5.getLibraryDirectory();
      ApplicationFiles applicationFiles12 = new ApplicationFiles();
      // Undeclared exception!
      try { 
        DBUtil.getTableInfo((ISession) null, "RGz0+0QWPP^X1Kg", "RGz0+0QWPP^X1Kg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }
}
