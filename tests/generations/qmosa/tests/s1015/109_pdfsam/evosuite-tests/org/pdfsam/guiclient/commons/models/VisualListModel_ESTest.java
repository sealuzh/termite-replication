/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 08:44:04 GMT 2019
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.pdf.PdfGraphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.awt.image.RescaleOp;
import java.awt.image.renderable.ParameterBlock;
import java.io.ByteArrayInputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.net.URLStreamHandler;
import java.time.Month;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import javax.media.jai.CollectionOp;
import javax.media.jai.OperationRegistry;
import javax.media.jai.operator.FPXDescriptor;
import javax.media.jai.operator.IIPResolutionDescriptor;
import javax.swing.JComboBox;
import javax.swing.JLayeredPane;
import javax.swing.event.ListDataListener;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.316231988574323
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.moveUpIndex(1);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.undeleteElements(intArray0);
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      VisualListModel visualListModel3 = new VisualListModel();
      PipedInputStream pipedInputStream0 = null;
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      OperationRegistry operationRegistry0 = new OperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      RenderingHints renderingHints0 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      CollectionOp collectionOp0 = new CollectionOp(operationRegistry0, "p^w |H=SPi", parameterBlock0, renderingHints0, true);
      // Undeclared exception!
      try { 
        visualListModel0.prependAllElements(collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"p^w |H=SPi\" is registered under mode \"renderableCollection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.addElement((VisualPageListItem) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4PH3<VQZQDPTpn4r");
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4PH3<VQZQDPTpn4r");
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Integer integer0 = IIPResolutionDescriptor.MAX_RESOLUTION;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4PH3<VQZQDPTpn4r");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.retainAll(treeSet0);
      OperationRegistry operationRegistry0 = new OperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock((Vector<Object>) null);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, (Vector) null);
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, defaultTableModel0);
      CollectionOp collectionOp0 = new CollectionOp(operationRegistry0, "6gV", parameterBlock0, renderingHints0);
      // Undeclared exception!
      try { 
        visualListModel0.prependAllElements(collectionOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.renderable.ParameterBlock", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0211196177983384
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      OperationRegistry operationRegistry0 = new OperationRegistry();
      CollectionOp collectionOp0 = new CollectionOp(operationRegistry0, "", (ParameterBlock) null, (RenderingHints) null);
      // Undeclared exception!
      try { 
        visualListModel1.addAllElements((Collection<VisualPageListItem>) collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.addElement((VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.retainAll(arrayList0);
      visualListModel0.prependAllElements(arrayList0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt((byte)0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8207751622034678
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.addElement((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      Hashtable<RenderingHints.Key, Object> hashtable1 = new Hashtable<RenderingHints.Key, Object>();
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      hashtable1.put(sunHints_Key0, arrayList0);
      visualListModel1.addAllElements(0, (Collection<VisualPageListItem>) vector0);
      Integer integer0 = new Integer(0);
      HashMap<RenderingHints.Key, Object> hashMap1 = new HashMap<RenderingHints.Key, Object>();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel1.addElementAt((VisualPageListItem) null, 5000);
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      hashMap1.put(sunHints_Key2, sunHints_Key2);
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap2 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap3 = new HashMap<RenderingHints.Key, Integer>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable1);
      RescaleOp rescaleOp0 = new RescaleOp(0, 0, renderingHints0);
      SunHints.Key sunHints_Key4 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      HashMap<RenderingHints.Key, Object> hashMap4 = new HashMap<RenderingHints.Key, Object>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap5 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap6 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap7 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap8 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, Integer> hashMap9 = new HashMap<RenderingHints.Key, Integer>();
      Hashtable<RenderingHints.Key, Integer> hashtable2 = new Hashtable<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap10 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      RenderingHints renderingHints1 = new RenderingHints(hashMap10);
      assertTrue(renderingHints1.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3604548990578045
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      Boolean boolean0 = new Boolean(true);
      UnaryOperator<VisualPageListItem> unaryOperator0 = UnaryOperator.identity();
      stack0.replaceAll(unaryOperator0);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_DITHERING;
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      Hashtable<RenderingHints.Key, Object> hashtable1 = new Hashtable<RenderingHints.Key, Object>();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      stack0.add((VisualPageListItem) null);
      stack0.stream();
      intArray0[1] = (-2200);
      intArray0[3] = (-2200);
      intArray0[4] = 0;
      intArray0[5] = 0;
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndex(0);
      visualListModel0.addAllElements((-265), (Collection<VisualPageListItem>) stack0);
      visualListModel0.moveDownIndexes(intArray0);
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5912972134265893
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.removeElements(0, 0, true);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.removeElements(0, (-2200), true);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      Boolean boolean0 = new Boolean(true);
      int[] intArray0 = new int[5];
      intArray0[0] = (-2200);
      intArray0[1] = (-2200);
      intArray0[3] = (-2200);
      intArray0[4] = (-2200);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel1.setData((Vector<VisualPageListItem>) stack0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_DITHERING;
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      Hashtable<RenderingHints.Key, Object> hashtable1 = new Hashtable<RenderingHints.Key, Object>();
      Hashtable<RenderingHints.Key, Object> hashtable2 = new Hashtable<RenderingHints.Key, Object>();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedList0);
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      stack0.stream();
      intArray1[1] = (-2200);
      intArray1[3] = (-2200);
      intArray1[4] = 0;
      intArray1[5] = 0;
      visualListModel1.moveUpIndexes(intArray1);
      visualListModel1.moveDownIndex(0);
      visualListModel0.reverseElements(intArray1);
      visualListModel1.addAllElements((-265), (Collection<VisualPageListItem>) stack0);
      visualListModel1.moveDownIndexes(intArray1);
      visualListModel0.addAllElements((-55), (Collection<VisualPageListItem>) linkedList0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2407560846182575
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualPageListItem visualPageListItem0 = null;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[2];
      intArray0[0] = (-491);
      intArray0[1] = (-491);
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7646308653001808
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.addElement((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      Boolean boolean0 = Boolean.FALSE;
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.setData(vector0);
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      Hashtable<RenderingHints.Key, Object> hashtable1 = new Hashtable<RenderingHints.Key, Object>();
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      int int0 = 0;
      // Undeclared exception!
      try { 
        visualListModel1.addAllElements(0, (Collection<VisualPageListItem>) vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.removeElements(0, 3750, true);
      int int0 = 642;
      int[] intArray0 = new int[1];
      intArray0[0] = 642;
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 642
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.437668949141933
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualPageListItemArray0[7] = null;
      visualListModel0.setData(visualPageListItemArray0);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 1928;
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel3.addElement(visualPageListItemArray0[4]);
      VisualListModel visualListModel4 = new VisualListModel();
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1928
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((byte) (-51));
      Integer.getInteger("", integer0);
      Integer.compare(1064, (byte) (-51));
      linkedList0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      Integer integer1 = FPXDescriptor.MAX_RESOLUTION;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stack0.removeAll(linkedHashSet0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      stack0.add((VisualPageListItem) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      stack0.listIterator();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      visualListModel0.prependAllElements(stack0);
      assertEquals(4, stack0.size());
      assertEquals(4, visualListModel0.getSize());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.138261944687921
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      int[] intArray0 = new int[1];
      intArray0[0] = (-486);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.setData(visualPageListItemArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      try { 
        visualListModel0.reverseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -486
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.629303225356324
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      int[] intArray0 = new int[1];
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualListModel0.setData(visualPageListItemArray0);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      int int0 = 1;
      visualListModel0.removeElements(1, 1, false);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.573321598182558
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.removeElements(0, 0, true);
      int[] intArray0 = new int[1];
      intArray0[0] = 642;
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel1.removeElements(1539, 642, true);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      boolean boolean0 = new Boolean(true);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel0.reverseElements(intArray0);
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel1.undeleteElements(intArray0);
      visualListModel2.rotateClockwiseElements(intArray0);
      visualListModel2.rotateClockwiseElements(intArray0);
      visualListModel1.undeleteElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel2.rotateAnticlockwiseElements(intArray0);
      visualListModel2.rotateClockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      assertEquals(1, intArray0.length);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.286742642027288
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[2];
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualPageListItemArray0[7] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.updateElementAt(653, visualPageListItemArray0[5]);
      assertEquals(7, visualListModel0.getSize());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.738065156666371
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.removeElements(0, (-1), false);
      visualListModel2.rotateAnticlockwiseElements(intArray0);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel4 = new VisualListModel();
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-1);
      intArray1[3] = (-1);
      intArray1[4] = (-1);
      intArray1[5] = (-1);
      intArray1[6] = 0;
      visualListModel2.reverseElements(intArray1);
      visualListModel1.rotateAnticlockwiseElements(intArray1);
      visualListModel2.rotateClockwiseElements(intArray1);
      visualListModel1.undeleteElements(intArray0);
      assertEquals(1, intArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.332603408975321
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 2659;
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel1.moveDownIndexes(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel3 = new VisualListModel();
      VisualListModel visualListModel4 = new VisualListModel();
      visualListModel4.rotateClockwiseElements(intArray0);
      visualListModel3.reverseElements(intArray0);
      VisualListModel visualListModel5 = new VisualListModel();
      visualListModel5.getListDataListeners();
      VisualListModel visualListModel6 = new VisualListModel();
      VisualListModel visualListModel7 = new VisualListModel();
      visualListModel6.reverseElements(intArray0);
      VisualListModel visualListModel8 = new VisualListModel();
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2659
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualPageListItem visualPageListItem0 = null;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.moveUpIndex(1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-98);
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        sequenceInputStream0.read(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      intArray0[0] = 1339;
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1339
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[3];
      intArray1[0] = (-515);
      intArray1[1] = 550;
      intArray1[2] = 56;
      visualListModel0.rotateClockwiseElements(intArray1);
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2653188729187956
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      int int0 = 125;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      stack0.listIterator();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.addAllElements(739, (Collection<VisualPageListItem>) stack0);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      // Undeclared exception!
      try { 
        visualListModel0.appendAllElements(stack0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualPageListItem visualPageListItem0 = null;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      VisualPageListItem visualPageListItem1 = null;
      visualListModel0.addElement((VisualPageListItem) null);
      int int0 = (-486);
      boolean boolean0 = true;
      int[] intArray0 = new int[2];
      intArray0[0] = (-486);
      intArray0[1] = (-486);
      try { 
        visualListModel0.removeElements(intArray0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -486
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualPageListItem visualPageListItem0 = null;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[2];
      intArray0[1] = (-491);
      intArray0[1] = (-491);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-490)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2407560846182575
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualPageListItem visualPageListItem0 = null;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      int int0 = (-491);
      int[] intArray0 = new int[2];
      intArray0[1] = (-491);
      intArray0[1] = (-491);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.800249584148876
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.addElement((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      Boolean boolean0 = Boolean.FALSE;
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.setData(vector0);
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      RescaleOp rescaleOp0 = new RescaleOp(1197.7F, 1197.7F, renderingHints0);
      Hashtable<RenderingHints.Key, Object> hashtable1 = new Hashtable<RenderingHints.Key, Object>();
      RescaleOp rescaleOp1 = new RescaleOp(2663.5F, 1768.9F, renderingHints0);
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      RenderingHints renderingHints1 = new RenderingHints(hashtable1);
      RescaleOp rescaleOp2 = new RescaleOp(2435.2214F, 1768.9F, renderingHints0);
      Hashtable<RenderingHints.Key, Object> hashtable2 = new Hashtable<RenderingHints.Key, Object>();
      RenderingHints renderingHints2 = new RenderingHints(sunHints_Key0, renderingHints1);
      RescaleOp rescaleOp3 = new RescaleOp(0.0F, 0.0F, renderingHints2);
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      HashMap<RenderingHints.Key, Object> hashMap1 = new HashMap<RenderingHints.Key, Object>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap2 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap3 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, Integer> hashMap4 = new HashMap<RenderingHints.Key, Integer>();
      Hashtable<RenderingHints.Key, Integer> hashtable3 = new Hashtable<RenderingHints.Key, Integer>();
      RenderingHints renderingHints3 = new RenderingHints(hashMap3);
      visualListModel1.clearData();
      Vector<VisualPageListItem> vector1 = visualListModel0.data;
      visualListModel1.setData(vector1);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9280478396261032
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualListModel0.setData(visualPageListItemArray0);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      int[] intArray0 = new int[1];
      intArray0[0] = (-486);
      visualListModel0.moveUpIndexes(intArray0);
      try { 
        visualListModel0.moveDownIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -485
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.243568410720495
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      int[] intArray0 = new int[2];
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualListModel0.setData(visualPageListItemArray0);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel3 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((byte) (-51));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      Integer.getInteger("", integer1);
      int int0 = new Integer((byte) (-51));
      linkedList0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      Integer integer2 = FPXDescriptor.MAX_RESOLUTION;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      stack0.add((VisualPageListItem) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      stack0.listIterator();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-51);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.elementChanged((VisualPageListItem) null);
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2354856091994484
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[2];
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel1.moveDownIndexes(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.rotateAnticlockwiseElements(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel3.rotateClockwiseElements(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      assertEquals(3, visualListModel0.getSize());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[0];
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel0.moveDownIndexes(intArray1);
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      Hashtable<RenderingHints.Key, Integer> hashtable0 = new Hashtable<RenderingHints.Key, Integer>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap1 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      HashMap<RenderingHints.Key, Object> hashMap2 = new HashMap<RenderingHints.Key, Object>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap3 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap4 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap5 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap6 = new HashMap<RenderingHints.Key, Integer>();
      SunHints.LCDContrastKey sunHints_LCDContrastKey1 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey1 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap7 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      hashMap7.put(pdfGraphics2D_HyperLinkKey1, pdfGraphics2D_HyperLinkKey1);
      visualListModel0.reverseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.2197893425778568
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel3.rotateClockwiseElements(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.reverseElements(intArray0);
      int[] intArray1 = new int[7];
      visualListModel0.moveUpIndexes(intArray0);
      VisualListModel visualListModel4 = new VisualListModel();
      VisualListModel visualListModel5 = new VisualListModel();
      visualListModel5.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel6 = new VisualListModel();
      VisualListModel visualListModel7 = new VisualListModel();
      visualListModel4.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel8 = new VisualListModel();
      visualListModel0.reverseElements(intArray1);
      visualListModel2.rotateAnticlockwiseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8885995049191862
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-370));
      linkedList0.offer(integer0);
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      Integer.getInteger("", integer1);
      Integer.compare(1050, (byte) (-51));
      linkedList0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      stack0.removeAll(linkedHashSet0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stack0.add((VisualPageListItem) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      stack0.listIterator();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[1];
      intArray0[0] = 127;
      try { 
        visualListModel0.moveUpIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 126
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9401690517473154
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((byte) (-51));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      Integer.getInteger("", integer1);
      Integer.compare(1050, (byte) (-51));
      linkedList0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      Integer integer2 = FPXDescriptor.MAX_RESOLUTION;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stack0.removeAll(linkedHashSet0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      stack0.add((VisualPageListItem) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      stack0.listIterator();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.elementChanged((VisualPageListItem) null);
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.085515758348578
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      int[] intArray0 = new int[1];
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[4] = visualPageListItemArray0[1];
      visualListModel0.setData(visualPageListItemArray0);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.341665586303033
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.undeleteElements(intArray0);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel2.getListDataListeners();
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel0.moveDownIndexes(intArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(1024L);
      VisualListModel visualListModel0 = new VisualListModel();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.pdfsam.guiclient.commons.models.VisualListModel";
      stringArray0[1] = "eJ!7.Y<B~ ";
      stringArray0[2] = "(.&9G > ";
      JComboBox<String> jComboBox0 = new JComboBox<String>(stringArray0);
      visualListModel0.removeListDataListener(jComboBox0);
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.384227310699542
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.undeleteElements(intArray0);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel0.moveDownIndexes(intArray0);
      HashMap<RenderingHints.Key, Integer> hashMap0 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, Integer> hashMap1 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap2 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap3 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, Integer> hashMap4 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap5 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap4.replaceAll(biFunction0);
      HashMap<RenderingHints.Key, Integer> hashMap6 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap7 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable0 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable1 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      hashtable1.put(sunHints_Key0, sunHints_Key0);
      HashMap<RenderingHints.Key, Integer> hashMap8 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap9 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap10 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap11 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, Integer> hashMap12 = new HashMap<RenderingHints.Key, Integer>();
      Hashtable<RenderingHints.Key, Integer> hashtable2 = new Hashtable<RenderingHints.Key, Integer>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap6);
      assertTrue(renderingHints0.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(p,pWJ3zDDq%");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer0 = FPXDescriptor.MAX_RESOLUTION;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(1321);
      boolean boolean0 = true;
      visualListModel0.removeElements((-857), (-857), true);
      int int0 = 0;
      VisualPageListItem visualPageListItem0 = null;
      OperationRegistry operationRegistry0 = new OperationRegistry();
      Stack<Object> stack0 = new Stack<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(stack0, stack0);
      HashMap<RenderingHints.Key, String> hashMap0 = new HashMap<RenderingHints.Key, String>(2447, 2447);
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      boolean boolean1 = false;
      CollectionOp collectionOp0 = new CollectionOp(operationRegistry0, "qhi", parameterBlock0, renderingHints0, false);
      // Undeclared exception!
      try { 
        visualListModel0.appendAllElements(collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"qhi\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      Hashtable<RenderingHints.Key, VisualPageListItem> hashtable0 = new Hashtable<RenderingHints.Key, VisualPageListItem>();
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = Boolean.FALSE;
      visualListModel0.setData(vector0);
      Hashtable<RenderingHints.Key, Object> hashtable1 = new Hashtable<RenderingHints.Key, Object>();
      Hashtable<RenderingHints.Key, Object> hashtable2 = new Hashtable<RenderingHints.Key, Object>();
      // Undeclared exception!
      try { 
        visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6593340983935647
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.setSize(761);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      visualListModel0.addElement((VisualPageListItem) null);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E5a~X(tA3");
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G'^:b!bhE$e");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((byte) (-51));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      Integer.min(116, 2201);
      Integer.getInteger("", integer1);
      Integer.compare(1050, (byte) (-51));
      linkedList0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      Integer integer2 = FPXDescriptor.MAX_RESOLUTION;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stack0.removeAll(linkedHashSet0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      stack0.add((VisualPageListItem) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.getSize();
      System.setCurrentTimeMillis(1835L);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-617);
      intArray0[4] = 0;
      intArray0[5] = (-617);
      visualListModel0.removeElements(0, 376, true);
      intArray0[6] = 1;
      visualListModel0.removeElementAt(0, true);
      visualListModel0.getElements();
      visualListModel0.getElements();
      intArray0[7] = 0;
      boolean boolean0 = true;
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(1000, "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) pdfGraphics2D_HyperLinkKey0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate2.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) null);
      predicate3.and(predicate4);
      // Undeclared exception!
      try { 
        visualListModel0.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 0;
      LinkedList<VisualPageListItem> linkedList1 = new LinkedList<VisualPageListItem>();
      VisualListModel visualListModel1 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel1.moveUpIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      visualListModel0.addElement((VisualPageListItem) null);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.rotateClockwiseElements(intArray0);
      int int0 = 50;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      PipedOutputStream pipedOutputStream0 = null;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)56;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      hashMap0.put(sunHints_Key1, sunHints_Key0);
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap1 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap2 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap3 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, String> hashMap4 = new HashMap<RenderingHints.Key, String>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap4);
      assertEquals(0, renderingHints0.size());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex((-336));
      Collection<VisualPageListItem> collection0 = new TreeSet<VisualPageListItem>();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)2;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-3849), (-3824), byteArray0, byteArray0, byteArray0, (-2136));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<Month> stack0 = new Stack<Month>();
      JComboBox<Month> jComboBox0 = new JComboBox<Month>(stack0);
      visualListModel0.addListDataListener(jComboBox0);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.addElement((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      Boolean boolean0 = Boolean.FALSE;
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.setData(vector0);
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      RescaleOp rescaleOp0 = new RescaleOp(1197.7F, 1197.7F, renderingHints0);
      Hashtable<RenderingHints.Key, Object> hashtable1 = new Hashtable<RenderingHints.Key, Object>();
      RescaleOp rescaleOp1 = new RescaleOp(2663.5F, 1792.378F, renderingHints0);
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      RenderingHints renderingHints1 = new RenderingHints(hashtable1);
      RescaleOp rescaleOp2 = new RescaleOp(2435.2214F, 1792.378F, renderingHints0);
      Hashtable<RenderingHints.Key, Object> hashtable2 = new Hashtable<RenderingHints.Key, Object>();
      RenderingHints renderingHints2 = new RenderingHints(sunHints_Key0, renderingHints1);
      RescaleOp rescaleOp3 = new RescaleOp(0.0F, 0.0F, renderingHints2);
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      HashMap<RenderingHints.Key, Object> hashMap1 = new HashMap<RenderingHints.Key, Object>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap2 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap3 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap4 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap5 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, Integer> hashMap6 = new HashMap<RenderingHints.Key, Integer>();
      Hashtable<RenderingHints.Key, Integer> hashtable3 = new Hashtable<RenderingHints.Key, Integer>();
      RenderingHints renderingHints3 = new RenderingHints(hashMap3);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      assertEquals(2, visualPageListItemArray0.length);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.481240517964154
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.subList(0, 0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      Collection<VisualPageListItem> collection0 = null;
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.undeleteElements(intArray0);
      Object object0 = new Object();
      visualListModel0.undeleteElements(intArray0);
      Object object1 = new Object();
      int int0 = 2090;
      int int1 = 853;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(2090, 2090, 853);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 853
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_LCDContrastKey0, sunHints_LCDContrastKey0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      RescaleOp rescaleOp0 = new RescaleOp(2962.0F, 2.0F, renderingHints0);
      RescaleOp rescaleOp1 = new RescaleOp((-1.0F), 2.0F, renderingHints0);
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      Integer integer1 = new Integer(1);
      HashMap<RenderingHints.Key, Object> hashMap1 = new HashMap<RenderingHints.Key, Object>();
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      SunHints.Key sunHints_Key4 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      HashMap<RenderingHints.Key, Object> hashMap2 = new HashMap<RenderingHints.Key, Object>();
      hashMap2.put(sunHints_Key0, sunHints_LCDContrastKey0);
      SunHints.Key sunHints_Key5 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-1943));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-88);
      sequenceInputStream0.mark(2288);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)6;
      Enumeration<FilterInputStream> enumeration1 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.available();
      sequenceInputStream1.read();
      VisualListModel visualListModel1 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel1.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      Integer.getInteger((String) null, 1108);
      Integer integer1 = new Integer(3015);
      HashMap<RenderingHints.Key, Object> hashMap1 = new HashMap<RenderingHints.Key, Object>();
      SunHints.Key sunHints_Key4 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      SunHints.Key sunHints_Key5 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      SunHints.Key sunHints_Key6 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap2 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap3 = new HashMap<RenderingHints.Key, Integer>();
      hashMap3.clear();
      HashMap<RenderingHints.Key, Integer> hashMap4 = new HashMap<RenderingHints.Key, Integer>();
      hashMap3.put(sunHints_Key0, integer0);
      Hashtable<RenderingHints.Key, Integer> hashtable0 = new Hashtable<RenderingHints.Key, Integer>();
      VisualListModel visualListModel0 = new VisualListModel();
      Object object0 = visualListModel0.getElementAt(1488);
      assertNull(object0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9772464136241745
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.subList(1126, (-1423), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1126) > toIndex(-1423)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[3];
      intArray1[0] = (-515);
      intArray1[1] = 550;
      intArray1[2] = 56;
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      System.setCurrentTimeMillis(550);
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.subList(56, (-515), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(56) > toIndex(-515)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0, false);
      HashMap<RenderingHints.Key, InputStream> hashMap0 = new HashMap<RenderingHints.Key, InputStream>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(722);
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      HashMap<RenderingHints.Key, Object> hashMap1 = new HashMap<RenderingHints.Key, Object>();
      SunHints.Key sunHints_Key4 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      SunHints.Key sunHints_Key5 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      SunHints.Key sunHints_Key6 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      Object object0 = new Object();
      HashMap<RenderingHints.Key, Integer> hashMap2 = new HashMap<RenderingHints.Key, Integer>();
      SunHints.Key sunHints_Key7 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      HashMap<RenderingHints.Key, Object> hashMap3 = new HashMap<RenderingHints.Key, Object>();
      HashMap<RenderingHints.Key, Integer> hashMap4 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, Integer> hashMap5 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, Integer> hashMap6 = new HashMap<RenderingHints.Key, Integer>();
      Hashtable<RenderingHints.Key, Integer> hashtable0 = new Hashtable<RenderingHints.Key, Integer>();
      RenderingHints renderingHints1 = new RenderingHints(hashMap3);
      assertTrue(renderingHints1.equals((Object)renderingHints0));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0, true);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1));
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      RenderingHints renderingHints1 = new RenderingHints(hashMap0);
      Hashtable<RenderingHints.Key, Integer> hashtable0 = new Hashtable<RenderingHints.Key, Integer>();
      SunHints.Key sunHints_Key4 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      HashMap<RenderingHints.Key, Object> hashMap1 = new HashMap<RenderingHints.Key, Object>();
      HashMap<RenderingHints.Key, Integer> hashMap2 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, Integer> hashMap3 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap4 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      BiFunction<RenderingHints.Key, Object, Integer> biFunction0 = (BiFunction<RenderingHints.Key, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap3.replaceAll(biFunction0);
      HashMap<RenderingHints.Key, Integer> hashMap5 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap6 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      SunHints.Key sunHints_Key5 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable1 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable2 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      hashtable2.put(sunHints_Key1, sunHints_Key2);
      HashMap<RenderingHints.Key, Integer> hashMap7 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, Integer> hashMap8 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, Integer> hashMap9 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, Integer> hashMap10 = new HashMap<RenderingHints.Key, Integer>();
      Hashtable<RenderingHints.Key, Integer> hashtable3 = new Hashtable<RenderingHints.Key, Integer>();
      RenderingHints renderingHints2 = new RenderingHints(hashtable3);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList((-1), (-1), true);
      assertNull(collection0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(10, 10, true);
      assertNull(collection0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      visualListModel0.removeListDataListener((ListDataListener) null);
      visualListModel0.subList(0, 6133, true);
      VisualListModel visualListModel1 = new VisualListModel();
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(p,pWJ3zDDq%");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer0 = FPXDescriptor.MAX_RESOLUTION;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      System.setCurrentTimeMillis((-29L));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(215, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 215
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`?QY9eM[MeeEl");
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt((-950), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -950
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.appendAllElements(arrayDeque0);
      int int0 = 976;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.505443429095587
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1223;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveDownIndex(0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.getElementAt(0);
      visualListModel0.rotateClockwiseElements(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "olBw");
      FileSystemHandling.shouldAllThrowIOExceptions();
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = new Byte((byte) (-58));
      System.setCurrentTimeMillis((byte) (-58));
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-58);
      intArray0[1] = (int) (byte) (-58);
      visualListModel0.removeElements(intArray0, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(p,pWJ3zDDq%");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer0 = FPXDescriptor.MAX_RESOLUTION;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".=?hAZY?*5|_#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FCDK^p2;Ec8Muv~R=?)");
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getSize();
      System.setCurrentTimeMillis((-1467L));
      System.setCurrentTimeMillis((byte) (-58));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      Object object0 = new Object();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.addAllElements((-267), (Collection<VisualPageListItem>) null);
      assertFalse(visualListModel1.equals((Object)visualListModel0));
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualListModel0.setData(visualPageListItemArray0);
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, hashMap0);
      RescaleOp rescaleOp0 = new RescaleOp(0.95F, 1698.2196F, renderingHints0);
      RenderingHints renderingHints1 = new RenderingHints(sunHints_Key1, sunHints_Key1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      RenderingHints renderingHints2 = new RenderingHints(sunHints_Key2, (Object) null);
      renderingHints2.add(renderingHints1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      renderingHints0.computeIfPresent((Object) null, biFunction0);
      RescaleOp rescaleOp1 = new RescaleOp(3015, 4510, renderingHints0);
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      HashMap<RenderingHints.Key, Object> hashMap1 = new HashMap<RenderingHints.Key, Object>(3015);
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap2 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap3 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap4 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap5 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, Integer> hashMap6 = new HashMap<RenderingHints.Key, Integer>();
      Hashtable<RenderingHints.Key, Integer> hashtable0 = new Hashtable<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap7 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      RenderingHints renderingHints3 = new RenderingHints(hashMap7);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.setData(vector0);
      assertEquals("[]", vector0.toString());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.removeElements(0, 0, true);
      visualListModel0.removeElements(0, 0, false);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements(92, (-1101), true);
      Vector<VisualPageListItem> vector0 = new Stack<VisualPageListItem>();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      float[] floatArray0 = new float[8];
      floatArray0[2] = (float) (-489);
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (-2117.103F);
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey1 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      RenderingHints renderingHints0 = new RenderingHints(pdfGraphics2D_HyperLinkKey0, pdfGraphics2D_HyperLinkKey1);
      RescaleOp rescaleOp0 = new RescaleOp((-2346.2883F), 0.0F, renderingHints0);
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      hashMap0.put(pdfGraphics2D_HyperLinkKey0, pdfGraphics2D_HyperLinkKey1);
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap1 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap2 = new HashMap<RenderingHints.Key, Integer>();
      RenderingHints renderingHints1 = new RenderingHints(hashMap0);
      assertTrue(renderingHints1.equals((Object)renderingHints0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(p,pWJ3zDDq%");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer0 = FPXDescriptor.MAX_RESOLUTION;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      System.setCurrentTimeMillis((-629L));
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      stack0.removeIf(predicate3);
      stack0.containsAll(arrayDeque0);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[0];
      visualListModel0.setData(visualPageListItemArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int[] intArray0 = new int[1];
      Hashtable<RenderingHints.Key, Integer> hashtable0 = new Hashtable<RenderingHints.Key, Integer>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(14);
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap1 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      HashMap<RenderingHints.Key, Object> hashMap2 = new HashMap<RenderingHints.Key, Object>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap3 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap4 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap5 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap6 = new HashMap<RenderingHints.Key, Integer>();
      SunHints.LCDContrastKey sunHints_LCDContrastKey1 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey1 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      hashMap3.put(pdfGraphics2D_HyperLinkKey0, pdfGraphics2D_HyperLinkKey1);
      int[] intArray1 = new int[4];
      intArray1[0] = (-1293);
      intArray1[1] = (-636);
      intArray1[2] = 2811;
      intArray1[3] = (-1293);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.subList((-3654), 0, true);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Integer integer0 = new Integer((-3654));
      Integer integer1 = new Integer(722);
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      Hashtable<RenderingHints.Key, Integer> hashtable0 = new Hashtable<RenderingHints.Key, Integer>();
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable1 = new Hashtable<RenderingHints.Key, RenderingHints.Key>(2888, 722);
      SunHints.Key sunHints_Key4 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap1 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap2 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap3 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap4 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap5 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      HashMap<RenderingHints.Key, Integer> hashMap6 = new HashMap<RenderingHints.Key, Integer>();
      hashMap6.clone();
      HashMap<RenderingHints.Key, Integer> hashMap7 = new HashMap<RenderingHints.Key, Integer>();
      Hashtable<RenderingHints.Key, Integer> hashtable2 = new Hashtable<RenderingHints.Key, Integer>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap6);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      VisualPageListItem visualPageListItem0 = null;
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.subList(1708, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1708) > toIndex(-1)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList((-5175), (-5175));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-86);
      sequenceInputStream0.mark(2288);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)6;
      Enumeration<FilterInputStream> enumeration1 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.available();
      sequenceInputStream1.read();
      sequenceInputStream1.read();
      sequenceInputStream1.available();
      sequenceInputStream1.read();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(10);
      try { 
        pipedInputStream1.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
