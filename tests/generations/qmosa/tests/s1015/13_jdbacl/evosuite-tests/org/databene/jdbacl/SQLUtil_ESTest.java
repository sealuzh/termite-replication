/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 06:44:00 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.TimeUnit;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.services.io.FormatableProperties;
import org.apache.derby.iapi.services.locks.CompatibilitySpace;
import org.apache.derby.iapi.services.locks.LockOwner;
import org.apache.derby.iapi.services.locks.Lockable;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.apache.derby.impl.services.locks.SinglePool;
import org.apache.derby.impl.sql.GenericStorablePreparedStatement;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.CreateIndexNode;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.sql.execute.UpdatableVTIConstantAction;
import org.apache.derby.impl.store.access.btree.BTreeController;
import org.apache.derby.impl.store.access.btree.index.B2I;
import org.apache.derby.impl.store.access.btree.index.B2IUndo;
import org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace;
import org.apache.derby.impl.store.access.heap.Heap;
import org.apache.derby.impl.store.access.heap.HeapController;
import org.apache.derby.impl.store.raw.RawStore;
import org.apache.derby.impl.store.raw.xact.ConcurrentXactFactory;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.EmbeddedGDSImpl;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.h2.engine.SessionRemote;
import org.h2.jdbc.JdbcSQLException;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.store.DataHandler;
import org.h2.tools.SimpleResultSet;
import org.h2.tools.SimpleRowSource;
import org.h2.value.ValueLobDb;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0204142811723194
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 18, "");
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      sessionRemote0.cancelStatement((-3));
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      sessionRemote0.getNextId();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize(dBColumnArray0[4], stringBuilder0);
      SQLUtil.renderColumnTypeWithSize(dBColumnArray0[1]);
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.renderColumn(dBColumnArray0[4]);
      Random.setNextRandom(10);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0473092967465583
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[6] = "gGl\"%o%,sWw;fv";
      TableContainer tableContainer0 = new TableContainer((String) null);
      SQLUtil.typeAndName(tableContainer0);
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("selectcatl");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("container null", (DBSchema) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, defaultDBTable0, "selectcatl");
      dBCheckConstraint0.setDoc((String) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      String string0 = SQLUtil.renderValue(dBCatalog0);
      assertNull(string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[6] = "gGl\"%o%,sWw;fv";
      TableContainer tableContainer0 = new TableContainer((String) null);
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container null", string0);
      
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6023014073112876
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[15];
      stringArray0[2] = "h";
      stringArray0[6] = "h";
      String string0 = SQLUtil.normalize("lna*!7:G3/B:J_73<-m8", true);
      assertEquals("lna * ! 7 : G3 / B : J_73 < - m8", string0);
      
      FormatableProperties formatableProperties0 = new FormatableProperties();
      boolean boolean0 = SQLUtil.isProcedureCall("delete;mym}?");
      Boolean boolean1 = SQLUtil.mutatesStructure("lna * ! 7 : G3 / B : J_73 < - m8");
      assertTrue(boolean1.equals((Object)boolean0));
      
      System.setCurrentTimeMillis(0L);
      ContextService.getContextOrNull("alter session");
      boolean boolean2 = SQLUtil.isQuery("select into");
      assertFalse(boolean2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "i!";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("i!");
      int int0 = 63;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i!");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("i!", defaultDBTable0, 63, "i!");
      defaultDBColumn0.setDefaultValue("i!");
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.removeComments("i! I! DEFAULT i! NULL");
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "zk", "zk");
      dBCheckConstraint0.setDoc("");
      dBCheckConstraint0.setDoc("truncate");
      dBCheckConstraint0.toString();
      dBCheckConstraint0.setName("nkrGH2Rd`");
      dBCheckConstraint0.setDoc("");
      dBCheckConstraint0.setName((String) null);
      dBCheckConstraint0.toString();
      dBCheckConstraint0.setDoc(";.0?C;uDd|_%");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
      assertNull(dBCheckConstraint0.getName());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("DATE");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">p&879l}");
      ValueLobDb.createSmallLob(2993, (byte[]) null, 1L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Zn", dBSchema0);
      Integer integer0 = new Integer(7);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBCatalog dBCatalog1 = new DBCatalog();
      DBSchema dBSchema1 = new DBSchema("Zn", dBCatalog0);
      dBCatalog1.getSchema("Zn");
      DBDataType dBDataType0 = DBDataType.getInstance((-100673640), ">p&879l}");
      Integer integer1 = new Integer(15);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Zn");
      Integer.toUnsignedLong(8);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Zn", defaultDBTable0, dBDataType0, (Integer) 14);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("Zn >P&879L}(14) NULL", string0);
      
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "DATE";
      stringArray0[1] = "DATE";
      stringArray0[2] = ">p&879l}";
      String string1 = SQLUtil.join("inner", ">p&879l}", stringArray0, ">p&879l}", (String) null, stringArray0);
      assertEquals(">p&879l} as null on >p&879l}.DATE = null.DATE and >p&879l}.DATE = null.DATE and >p&879l}.>p&879l} = null.>p&879l}", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7102476273485032
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\u0001V\u0003\uFFFFU\u0005\uFFFF\u0001";
      stringArray0[3] = "\u0001V\u0003\uFFFFU\u0005\uFFFF\u0001";
      String[] stringArray1 = new String[5];
      stringArray1[0] = null;
      stringArray1[1] = "verifyKey.dat";
      stringArray1[2] = "verifyKey.dat";
      stringArray1[3] = "\u0001V\u0003\uFFFFU\u0005\uFFFF\u0001";
      stringArray1[4] = "58oA)";
      SQLUtil.join("verifyKey.dat", (String) null, stringArray1, "\"S7$(FW`^vV=r", "exec", stringArray1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      String[] stringArray0 = null;
      SQLUtil.renderValue(object0);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("java.lang.Object@496de03a", (String[]) null, "java.lang.Object@496de03a", "java.lang.Object@496de03a", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.196664918501384
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("drop table", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop table", dBSchema0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "fX\"YDD9Uo=h{4b";
      stringArray0[1] = "it}a<0[:aOmwE";
      stringArray0[2] = "drop table";
      stringArray0[3] = "drop table";
      stringArray0[4] = "drop table";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "it}a<0[:aOmwE", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT it}a<0[:aOmwE UNIQUE (fX\"YDD9Uo=h{4b, it}a<0[:aOmwE, drop table, drop table, drop table)", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Boolean boolean0 = new Boolean("CLOB");
      SessionRemote sessionRemote0 = new SessionRemote();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = 843;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("z{G!XD7B%$9|N:!6/^`", defaultDBTable0, 1466, "update");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize(dBColumnArray0[1], stringBuilder0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DBColumn[] dBColumnArray1 = new DBColumn[8];
      dBColumnArray1[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray1[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray1[2] = (DBColumn) null;
      dBColumnArray1[3] = (DBColumn) null;
      dBColumnArray1[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray1[5] = (DBColumn) null;
      dBColumnArray1[6] = (DBColumn) null;
      dBColumnArray1[7] = (DBColumn) null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("eo");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object object0 = new Object();
      mockPrintWriter1.write("eo", (-60), (-60));
      Object object1 = new Object();
      Object object2 = new Object();
      String[] stringArray0 = new String[0];
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "^z[j!d^Y9;SuD";
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) "eo";
      objectArray0[3] = (Object) mockPrintWriter1;
      objectArray0[4] = (Object) "^z[j!d^Y9;SuD";
      objectArray0[5] = object2;
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9823746187523796
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("7X-CL`WIMWAh}");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(1867, "'6?JCm;J##y,r");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("7X-CL`WIMWAh}", defaultDBTable0, dBDataType0, (Integer) null);
      defaultDBColumn0.isEquivalent(defaultDBTable0);
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("org.apache.derby.impl.sql.execute.CreateConstraintConstantAction", defaultDBTable0, dBDataType0, integer1);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("positive integer", defaultDBTable0, (DBDataType) null);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String string0 = SQLUtil.renderColumn(dBColumnArray0[1]);
      assertEquals("org.apache.derby.impl.sql.execute.CreateConstraintConstantAction '6?JCM;J##Y,R(0) NULL", string0);
      
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("7X-CL`WIMWAh}, org.apache.derby.impl.sql.execute.CreateConstraintConstantAction, 7X-CL`WIMWAh}, 7X-CL`WIMWAh}, positive integer, 7X-CL`WIMWAh}, 7X-CL`WIMWAh}, 7X-CL`WIMWAh}, 7X-CL`WIMWAh}", string1);
      
      String string2 = SQLUtil.substituteMarkers("", "positive integer", defaultDBColumn1);
      assertEquals("", string2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.314432939095597
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.isQuery("select");
      Boolean boolean1 = SQLUtil.mutatesStructure("select");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("}Fxj=cM@~", (String) null, boolean1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      VersionNumber versionNumber0 = VersionNumber.valueOf("+ytcfl-3,U_z");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("0N-LaPT", "~-'{VT#?K", versionNumber0);
      SQLUtil.ownerDotComponent(defaultDatabase0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-59);
      byteArray0[0] = (byte) (-59);
      SessionRemote sessionRemote0 = new SessionRemote();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 843, "");
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize(dBColumnArray0[1], stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("y5aX6U`x-wd& G(");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "y5aX6U`x-wd& G(";
      stringArray0[1] = "y5aX6U`x-wd& G(";
      stringArray0[2] = "y5aX6U`x-wd& G(";
      stringArray0[3] = "y5aX6U`x-wd& G(";
      stringArray0[4] = "iRvG}/v<wkoXf?0v)f";
      stringArray0[5] = "y5aX6U`x-wd& G(";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("y5aX6U`x-wd& G(", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"y5aX6U`x-wd& G(\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("Zn");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("L1k;sSvd*8g^Q ", defaultDBTable0, (DBDataType) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DataStore dataStore0 = new DataStore("B+}WNm*`BfOO>=$Ykp");
      VirtualFile virtualFile0 = new VirtualFile("B+}WNm*`BfOO>=$Ykp", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, false);
      mockPrintWriter0.print(236.23667);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("org.apache.derby.impl.services.locks.ConcurrentPool");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintWriter1.printf("SELECT * FROM ", (Object[]) stringArray0);
      Integer.divideUnsigned(48, 48);
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      boolean boolean0 = SQLUtil.isDML("insert");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[5];
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "42Y09");
      StringBuilder stringBuilder1 = new StringBuilder(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("call");
      PrintWriter printWriter0 = mockPrintWriter0.printf("42Y09", (Object[]) stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      mockPrintWriter0.print((double) 0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("42Y09");
      printWriter0.print((double) 0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      mockPrintWriter2.format("ei08;", (Object[]) stringArray0);
      mockPrintWriter2.printf("ei08;", (Object[]) stringArray0);
      mockPrintWriter2.print('u');
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      mockPrintWriter2.append('=');
      printWriter0.print((double) 0);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(printWriter0);
      mockPrintWriter2.print(true);
      MockPrintWriter mockPrintWriter4 = new MockPrintWriter("42Y09");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("into", defaultDBTable0, 0, "42Y09");
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("into, into", string0);
      
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      BTreeController bTreeController0 = new BTreeController();
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("into", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.657877495244925
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "()");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("42Y09");
      PrintWriter printWriter0 = mockPrintWriter0.printf(" WHERE ", (Object[]) stringArray0);
      mockPrintWriter0.write(")Z2i:;/6b,8>I$6");
      printWriter0.close();
      SQLUtil.normalize("42Y09", false);
      // Undeclared exception!
      SQLUtil.isDDL("n(<C7&&,;p=gs/*!");
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      DBSchema dBSchema0 = new DBSchema("jONk;\"BZwyo9vfA+P3");
      DataStore dataStore0 = new DataStore("gg)?r qp@f");
      VirtualFile virtualFile0 = new VirtualFile("jONk;\"BZwyo9vfA+P3", dataStore0);
      dataStore0.purge();
      dataStore0.listChildren("<a%/*_uGTDq/");
      VirtualFile virtualFile1 = new VirtualFile("gg)?r qp@f", dataStore0);
      virtualFile1.getOutputStream();
      dataStore0.getEntry("+3:r3NE]|[Adt%;]p(4");
      Boolean boolean1 = new Boolean("alte");
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("<a%/*_uGTDq/");
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      SQLUtil.normalize("_F5c(|6q9&?eq=nN", true);
      LockOwner lockOwner0 = mock(LockOwner.class, new ViolatedAssumptionAnswer());
      LockOwner lockOwner1 = mock(LockOwner.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Cannot convert integer to short.");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "H0|x5Tz^h0";
      stringArray0[1] = "H0|x5Tz^h0";
      stringArray0[2] = "FOREIGN KEY ";
      stringArray0[3] = "RD.f&zLwM";
      stringArray0[4] = "crlate table";
      stringArray0[5] = "Cannot convert integer to short.";
      stringArray0[6] = "(-\"'Xw,Bi!L.@I$? i";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("create materialized view");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("crlate table", false, defaultDBTable0, stringArray0, defaultDBTable1, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "crlate table");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("FOREIGN KEY ");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      VersionNumber versionNumber1 = new VersionNumber(linkedList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("FOREIGN KEY ", "inse", versionNumber0);
      DefaultDatabase defaultDatabase1 = new DefaultDatabase((String) null, "Cannot convert integer to short.", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("op_batch_segments ");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "op_batch_segments ";
      stringArray0[1] = "";
      stringArray0[2] = "DERBY_JDBC_RESULT_SET ";
      SQLUtil.mutatesDataOrStructure("alter session");
      Boolean boolean0 = Boolean.FALSE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[0] = (byte) (-75);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("truncatey%6x4kw5ns~\\uc)", 3);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(8, byteArray0, 0L);
      valueLobDb0.getReader();
      SessionRemote sessionRemote0 = new SessionRemote();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'", defaultDBTable0, 843, "drop index");
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1950865325403197
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "2048";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "2048";
      objectArray0[1] = (Object) "' `s a direct@ry";
      objectArray0[2] = (Object) "2048";
      objectArray0[3] = (Object) "2048";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = object0;
      objectArray1[1] = (Object) "2048";
      Object object2 = new Object();
      objectArray1[2] = object2;
      objectArray1[3] = object1;
      objectArray1[4] = (Object) "' `s a direct@ry";
      objectArray1[5] = (Object) stringArray0[0];
      objectArray1[7] = (Object) "2048";
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intogetfetchsize");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "H0|x5Tz^h0";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Cannot convert integer to short.");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("5B~b,jhZ(y", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "H0|x5Tz^h0");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      dBForeignKeyConstraint0.setName((String) null);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("H0|x5Tz^h0", stringBuilder1.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "drop index";
      stringArray0[2] = null;
      stringArray0[3] = null;
      String string0 = "5BE";
      stringArray0[4] = "5BE";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(stringArray0[0]);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable1, stringArray0);
      dBForeignKeyConstraint0.toString();
      dBForeignKeyConstraint0.setDoc("DROP VIEW IF EXISTS ");
      defaultDBTable1.isIdentical(dBForeignKeyConstraint0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(stringArray0[6], defaultDBTable0, (byte)12, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1495747713671385
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "2048";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "2048";
      objectArray0[1] = (Object) "' `s a direct@ry";
      objectArray0[2] = (Object) "2048";
      objectArray0[3] = (Object) "2048";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = object0;
      objectArray1[1] = (Object) "2048";
      Object object2 = new Object();
      objectArray1[2] = object2;
      objectArray1[3] = object1;
      objectArray1[4] = (Object) "' `s a direct@ry";
      objectArray1[5] = (Object) stringArray0[0];
      objectArray1[6] = object1;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1069812089231275
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "H0|x5Tz^h0";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Hg<");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create table", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "H0|x5Tz^h0");
      VersionNumber versionNumber0 = VersionNumber.valueOf("8Fg_1-t#I,)T");
      versionNumber0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("W{f~K4):!a$%?");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "drop materialized view";
      stringArray0[1] = "2048";
      stringArray0[2] = "alter index(";
      stringArray0[3] = "P'&7n{*cpT#l`oY";
      stringArray0[4] = "0B\u0006le}xx";
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "2048";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "2048";
      objectArray0[1] = (Object) "' `s a direct@ry";
      objectArray0[2] = (Object) "2048";
      objectArray0[3] = (Object) "2048";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = object0;
      objectArray1[1] = (Object) "2048";
      Object object2 = new Object();
      objectArray1[2] = object1;
      objectArray1[3] = object1;
      objectArray1[4] = (Object) "' `s a direct@ry";
      objectArray1[5] = (Object) stringArray0[0];
      objectArray1[6] = object1;
      objectArray1[7] = (Object) "2048";
      Random.setNextRandom((-267));
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("2048", compositeDBObject0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-267), "create tablecatl");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = new Integer((-606));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("' `s a direct@ry", defaultDBTable0, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CREATE TABLECATL(1,-606)", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7464514618901243
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[5];
      StringBuilder stringBuilder0 = new StringBuilder(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("drop mterialized vie");
      mockPrintWriter0.println();
      PrintWriter printWriter0 = mockPrintWriter0.printf("42Y09", (Object[]) stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      mockPrintWriter0.print(0.0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.printf("42Y09", (Object[]) stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance(0, "ei08;");
      DBSchema dBSchema0 = new DBSchema("isNull");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("E~{+T0WX5w-iP[._");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("42Y09", defaultDBTable1, dBDataType0);
      MockFile mockFile0 = new MockFile("execute");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      defaultDBTable1.getUniqueConstraints(true);
      objectArray0[0] = (Object) "isNull";
      objectArray0[1] = (Object) "E~{+T0WX5w-iP[._";
      mockPrintWriter2.print(0);
      objectArray0[2] = (Object) printWriter0;
      mockPrintWriter2.printf("D3DkjMWFI_oI7Ye", objectArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable1, true, nameSpec0, mockPrintWriter2);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "42Y09";
      stringArray1[1] = "E~{+T0WX5w-iP[._";
      stringArray1[2] = "org.apache.derby.impl.store.access.conglomerate.RowPosition";
      stringArray1[3] = "D3DkjMWFI_oI7Ye";
      stringArray1[4] = "execute";
      stringArray1[5] = "E~{+T0WX5w-iP[._";
      stringArray1[6] = "isNull";
      stringArray1[7] = "execute";
      stringArray1[8] = "isNull";
      String[] stringArray2 = new String[3];
      stringArray2[0] = "drop mterialized vie";
      stringArray2[1] = "org.apache.derby.impl.store.access.conglomerate.RowPosition";
      stringArray2[2] = "/-(Yu'K)1n4O";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("/-(Yu'K)1n4O", stringArray1, "$Mw[_^;P9<W)3?{^", "D3DkjMWFI_oI7Ye", stringArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConcurrentXactFactory concurrentXactFactory0 = new ConcurrentXactFactory();
      ConcurrentXactFactory concurrentXactFactory1 = new ConcurrentXactFactory();
      DataDictionaryImpl dataDictionaryImpl1 = new DataDictionaryImpl();
      B2IUndo b2IUndo0 = new B2IUndo();
      Heap heap0 = new Heap();
      int[] intArray0 = new int[3];
      intArray0[0] = (-404032096);
      intArray0[1] = (-404032096);
      intArray0[2] = 1317;
      int[] intArray1 = new int[8];
      intArray1[0] = 1317;
      intArray1[1] = 1317;
      intArray1[2] = 1317;
      intArray1[3] = (-404032096);
      intArray1[4] = (-404032096);
      intArray1[5] = 1317;
      intArray1[6] = 472;
      intArray1[7] = (-404032096);
      OpenConglomerateScratchSpace openConglomerateScratchSpace0 = new OpenConglomerateScratchSpace(intArray0, intArray1);
      SinglePool singlePool0 = new SinglePool();
      LockOwner lockOwner0 = mock(LockOwner.class, new ViolatedAssumptionAnswer());
      CompatibilitySpace compatibilitySpace0 = singlePool0.createCompatibilitySpace(lockOwner0);
      Heap heap1 = new Heap();
      heap1.getId();
      Object object0 = new Object();
      singlePool0.zeroDurationlockObject(compatibilitySpace0, (Lockable) null, dataDictionaryImpl0, (-1533));
      LockOwner lockOwner1 = mock(LockOwner.class, new ViolatedAssumptionAnswer());
      singlePool0.createCompatibilitySpace(lockOwner1);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getContextManager();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+mj5";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "+mj5";
      stringArray1[1] = "+mj5";
      stringArray1[2] = "+mj5";
      stringArray1[3] = "+mj5";
      stringArray1[4] = "+mj5";
      stringArray1[5] = "+mj5";
      stringArray1[6] = "+mj5";
      stringArray1[7] = "+mj5";
      stringArray1[8] = "+mj5";
      String string0 = SQLUtil.leftJoin("+mj5", stringArray0, "+mj5", "+mj5", stringArray1);
      assertEquals("left join +mj5 as +mj5 on +mj5.+mj5 = +mj5.+mj5", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "eo";
      boolean boolean0 = new Boolean("eo");
      String[] stringArray0 = new String[9];
      String string1 = "o.5^P7Fra)+\"f>";
      stringArray0[0] = "o.5^P7Fra)+\"f>";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string2 = " on ";
      stringArray0[1] = " on ";
      stringArray0[2] = "eo";
      stringArray0[3] = "eo";
      stringArray0[4] = "eo";
      stringArray0[5] = "eo";
      SQLUtil.normalize("o.5^P7Fra)+\"f>", false);
      GDSType.getType("call");
      GDSType.getType(" on ");
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl((GDSType) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2477614722893295
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[0] = (byte) (-75);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("truncatey%6x4kw5ns~\\uc)", 3);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SessionRemote sessionRemote0 = new SessionRemote();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'", defaultDBTable0, 843, "drop index");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "drop index", true, "'");
      defaultDBColumn0.setNotNullConstraint(dBNotNullConstraint0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("' DROP INDEX NOT NULL", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "'";
      stringArray0[1] = "'";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ' = ''' AND ' = '''", string1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "2048";
      stringArray0[2] = "2048";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "2048";
      objectArray0[2] = (Object) "2048";
      objectArray0[3] = (Object) "2048";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("V`y*Nsc?V:G", false, "V`y*Nsc?V:G", "DERBY_JDBC_RESULT_SET ");
      dBCheckConstraint0.setName("V`y*Nsc?V:G");
      dBCheckConstraint0.toString();
      dBCheckConstraint0.toString();
      dBCheckConstraint0.setDoc("CONSTRAINT V`y*Nsc?V:GCHECK DERBY_JDBC_RESULT_SET ");
      dBCheckConstraint0.setDoc("y3");
      dBCheckConstraint0.setDoc("V`y*Nsc?V:G");
      dBCheckConstraint0.setName("EV>i)>Xjbt/]$B;BsTx");
      dBCheckConstraint0.setDoc((String) null);
      dBCheckConstraint0.setDoc((String) null);
      dBCheckConstraint0.setDoc((String) null);
      dBCheckConstraint0.toString();
      dBCheckConstraint0.setName("exec");
      dBCheckConstraint0.equals("DERBY_JDBC_RESULT_SET ");
      dBCheckConstraint0.toString();
      dBCheckConstraint0.setName((String) null);
      dBCheckConstraint0.equals("CONSTRAINT execCHECK DERBY_JDBC_RESULT_SET ");
      dBCheckConstraint0.setName("mI7$ n8#4c@?ez^{if");
      dBCheckConstraint0.equals("truncate");
      dBCheckConstraint0.toString();
      dBCheckConstraint0.setName("truncate");
      Random.setNextRandom((-880));
      System.setCurrentTimeMillis((-880));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Ak1#!f;|LDgLZd&\"*X");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "truncate";
      stringArray0[1] = "exec";
      stringArray0[2] = "EV>i)>Xjbt/]$B;BsTx";
      stringArray0[3] = "5*HdbYkB4";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "INbV5*Q6c)", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT INbV5*Q6c) UNIQUE (truncate, exec, EV>i)>Xjbt/]$B;BsTx, 5*HdbYkB4)", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "lna*D7:G3/B:73<-m8";
      SQLUtil.normalize("yDhnm`ibF'S^", false);
      int int0 = (-3);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        constantActionActivation0.materializeResultSetIfPossible((NoPutResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "K*Mli(9/82h#0";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("K*Mli(9/82h#0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: K*Mli(9/82h#0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[20];
      SQLUtil.renderColumnNames(stringArray0);
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String string0 = "i8DvimiH1DZy%L(F6-l";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("&/Y#sF\"YF", defaultDBTable0, (-104337348), "i8DvimiH1DZy%L(F6-l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: i8DvimiH1DZy%L(F6-l
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7091199915606667
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)0;
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob((-60569293), byteArray0, (byte)0);
      valueLobDb0.copyToTemp();
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("D2,A!m58");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer1);
      Integer integer0 = new Integer(15);
      Character.valueOf('<');
      Character character0 = Character.valueOf('<');
      Character.isSurrogate('<');
      String string1 = SQLUtil.renderValue(character0);
      assertEquals("'<'", string1);
      
      String string2 = SQLUtil.substituteMarkers("- 0", ">B`", ">B`");
      assertTrue(string2.equals((Object)string0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.162409200836301
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("y5aX6U`x-wd& G(");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "y5aX6U`x-wd& G(";
      stringArray0[1] = "y5aX6U`x-wd& G(";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[3] = "y5aX6U`x-wd& G(";
      stringArray0[4] = "y5aX6U`x-wd& G(";
      stringArray0[5] = "y5aX6U`x-wd& G(";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("y5aX6U`x-wd& G(", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.columnReferencedBy("y5aX6U`x-wd& G(");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"y5aX6U`x-wd& G(\" FOREIGN KEY (y5aX6U`x-wd& G(, y5aX6U`x-wd& G(, , y5aX6U`x-wd& G(, y5aX6U`x-wd& G(, y5aX6U`x-wd& G() REFERENCES y5aX6U`x-wd& G((y5aX6U`x-wd& G(, y5aX6U`x-wd& G(, , y5aX6U`x-wd& G(, y5aX6U`x-wd& G(, y5aX6U`x-wd& G()", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("yDhnm`ibF'S^", false, "yDhnm`ibF'S^", "DERBY_JDBC_RESULT_SET ");
      dBCheckConstraint0.setDoc("y3");
      dBCheckConstraint0.setDoc((String) null);
      dBCheckConstraint0.setName("DERBY_JDBC_RESULT_SET ");
      dBCheckConstraint0.setDoc((String) null);
      dBCheckConstraint0.toString();
      dBCheckConstraint0.setDoc("y3");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "eo";
      Boolean boolean0 = new Boolean("eo");
      String[] stringArray0 = new String[9];
      String string1 = "o.5^P7Fra)+\"f>";
      stringArray0[0] = "o.5^P7Fra)+\"f>";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[1] = "eo";
      stringArray0[2] = "eo";
      stringArray0[3] = "eo";
      stringArray0[4] = "eo";
      stringArray0[5] = "eo";
      SQLUtil.normalize("o.5^P7Fra)+\"f>", (boolean) boolean0);
      GDSType.getType("call");
      GDSType.getType("o.5^P7Fra)+\"f>");
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl((GDSType) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "H0|x5Tz^h0";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String string1 = "create table";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("H0|x5Tz^h0", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Hg<");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      int int0 = (-1840700267);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-3375), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3375
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = "catl";
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("catl", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.0164927125448684
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec");
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" WHERE ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      dBForeignKeyConstraint0.setDoc("-e|gKA#j]-z^lITnc\"");
      FKChangeRule fKChangeRule0 = FKChangeRule.NO_ACTION;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      dBForeignKeyConstraint0.setDoc((String) null);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.203456186693981
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("eo");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W";
      stringArray0[1] = "eo";
      stringArray0[2] = "eo";
      stringArray0[3] = "\u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)12;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      stringArray0[4] = "eo";
      stringArray0[5] = "\u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W";
      stringArray0[6] = "\u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W";
      stringArray0[7] = "eo";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "eo";
      stringArray1[1] = "\u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W";
      stringArray1[2] = "\u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W";
      stringArray1[3] = "eo";
      stringArray1[5] = "eo";
      stringArray1[6] = "\u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W";
      stringArray1[7] = "\u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("eo", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      String string0 = dBForeignKeyConstraint0.toString();
      assertEquals("CONSTRAINT eo FOREIGN KEY (\u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W, eo, eo, \u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W, eo, \u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W, \u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W, eo) REFERENCES eo(eo, \u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W, \u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W, eo, , eo, \u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W, \u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W)", string0);
      
      dBForeignKeyConstraint0.setDoc("w$veY/}.W.Q}Y2.b@[");
      dBForeignKeyConstraint0.columnReferencedBy("\u0001V\u0003\uFFFF\u0001U\u0005\uFFFF\u0001W");
      FKChangeRule fKChangeRule0 = FKChangeRule.NO_ACTION;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      dBForeignKeyConstraint0.setDoc("\"");
      String string1 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT eo ", string1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[0] = (byte) (-59);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("truncatey%6x4kw5ns~\\uc)", 3);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SessionRemote sessionRemote0 = new SessionRemote();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 843, "drop index");
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      HsqlProperties.delimitedArgPairsToProps("l5So6", "~lr\"s,s!", "<R@pX(", "!.4qQ[uwgKqK");
      defaultDBTable0.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "a^*pnr";
      stringArray0[1] = "n\"5,BQ0uNF_m";
      stringArray0[2] = "n\"5,BQ0uNF_m";
      stringArray0[3] = "n\"5,BQ0uNF_m";
      stringArray0[4] = "n\"5,BQ0uNF_m";
      stringArray0[5] = "n\"5,BQ0uNF_m";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "n\"5,BQ0uNF_m", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("n\"5,BQ0uNF_m", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "n\"5,BQ0uNF_m", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (a^*pnr, n\"5,BQ0uNF_m, n\"5,BQ0uNF_m, n\"5,BQ0uNF_m, n\"5,BQ0uNF_m, n\"5,BQ0uNF_m)", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = 'U';
      charArray0[2] = 'J';
      charArray0[3] = 'k';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      SQLUtil.addOptionalCondition("b4&", stringBuilder1);
      BTreeController bTreeController0 = new BTreeController();
      BTreeController bTreeController1 = new BTreeController();
      bTreeController1.close();
      FromVTI fromVTI0 = new FromVTI();
      FromVTI fromVTI1 = new FromVTI();
      fromVTI0.getContextManager();
      bTreeController0.getRawTran();
      BTreeController bTreeController2 = new BTreeController();
      bTreeController2.getLockingPolicy();
      B2I b2I0 = new B2I();
      BTreeController bTreeController3 = new BTreeController();
      BTreeController bTreeController4 = new BTreeController();
      BTreeController bTreeController5 = new BTreeController();
      try { 
        bTreeController4.newRowLocationTemplate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unimplemented feature.
         //
         verifyException("org.apache.derby.iapi.error.StandardException", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Wd+sMBGzRm";
      SQLUtil.renderColumnNames(stringArray0);
      byte[] byteArray0 = new byte[0];
      ValueLobDb.createSmallLob((byte)0, byteArray0, (byte)0);
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(22, byteArray0, 12);
      ValueLobDb valueLobDb1 = valueLobDb0.copyToTemp();
      valueLobDb1.copyToTemp();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(Wd+sMBGzRm)");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("'", defaultDBTable0, 12, "(Wd+sMBGzRm)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Wd+sMBGzRm\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      SQLUtil.renderColumnNames(stringArray0);
      byte[] byteArray0 = new byte[22];
      byteArray0[3] = (byte)0;
      byteArray0[21] = (byte)0;
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob((byte)0, byteArray0, (byte)0);
      valueLobDb0.getString();
      byte[] byteArray1 = new byte[14];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      valueLobDb0.getInt();
      byteArray0[20] = (byte)0;
      valueLobDb0.getBytes();
      ValueLobDb valueLobDb1 = ValueLobDb.createSmallLob(14, byteArray1, (-1L));
      valueLobDb1.copyToTemp();
      valueLobDb0.getReader();
      valueLobDb1.convertScale(false, 12);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(":ux!O>p&zdD^1", defaultDBTable0, 0, "(, , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.4662665178647387
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HeapController heapController0 = new HeapController();
      SQLUtil.mutatesDataOrStructure("'yb\"A+C%_p*sk");
      DBSchema dBSchema0 = new DBSchema("6r27+\"");
      dBSchema0.getTables(true);
      dBSchema0.getTable("6r27+\"");
      dBSchema0.toString();
      boolean boolean0 = false;
      dBSchema0.getTables(false);
      String string0 = "(8|l7-r1s?I";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("'yb\"A+C%_p*sk", (DBTable) null, (-104337348), "(8|l7-r1s?I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (8|l7-r1s?I
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "execcreate materialized view";
      SQLUtil.isProcedureCall("execcreate materialized view");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("execcreate materialized view");
      DBSequence dBSequence0 = null;
      try {
        dBSequence0 = new DBSequence("execcreate materialized view", dBSchema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBSequence", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.131535668581036
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Boolean.valueOf("");
      SQLUtil.isProcedureCall("");
      DBSchema dBSchema0 = new DBSchema("DATE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Zn", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null);
      defaultDBColumn0.isUnique();
      defaultDBColumn0.getForeignKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, "");
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "i)%.fMJPfH>";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderValue(stringBuilder1);
      SQLUtil.isQuery("StBred Prepared Statmen Name: \n\t");
      SimpleResultSet simpleResultSet0 = new SimpleResultSet((SimpleRowSource) null);
      try { 
        simpleResultSet0.getCharacterStream(0);
        fail("Expecting exception: JdbcSQLException");
      
      } catch(JdbcSQLException e) {
         //
         // Feature not supported: null [50100-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "H0|x5dTz^h0";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Cannot convert integer to short.");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("H0|x5dTz^h0", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "H0|x5dTz^h0");
      stringBuilder0.append(454.0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      VersionNumber.valueOf("H0|x5dTz^h0");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(linkedList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("crlate table", "TyQ~R+", versionNumber0);
      DefaultDatabase defaultDatabase1 = new DefaultDatabase("drop materialized viewk", "alter indexk", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase1.getTable(" NULL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ' NULL'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.1015830955806851
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("DATE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Zn", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("DATE", dBSchema0);
      DataStore dataStore0 = new DataStore("DATE");
      VirtualFile virtualFile0 = new VirtualFile("Wd+sMBGzRm", dataStore0);
      virtualFile0.createNewFile();
      OutputStream outputStream0 = virtualFile0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, false);
      DBDataType dBDataType0 = DBDataType.getInstance((-100673640), "DATE");
      Integer integer0 = new Integer(15);
      DBDataType.jdbcTypeFor("DATE");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getNString(String)");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer.toUnsignedLong(90000);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer1 = new Integer((-2497));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("g2g*'L3F^T,`9", defaultDBTable1, dBDataType0, integer1);
      defaultDBColumn0.setType(dBDataType0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SQLUtil.renderColumn(defaultDBColumn0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.355785150714608
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Tw&Ss_%a$#lQOX2@";
      stringArray0[1] = "";
      stringArray0[2] = "fA4";
      stringArray0[3] = "";
      stringArray0[4] = " on ";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(8, "BIND_TIME");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Rr?35E", defaultDBTable0, dBDataType0);
      defaultDBColumn0.equals(" on ");
      defaultDBColumn0.setNullable(false);
      defaultDBColumn0.getForeignKeyConstraint();
      SQLUtil.mutatesDataOrStructure("select into");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "|J!.m<QUUDI%>[-yf#", false, stringArray0);
      assertNull(dBPrimaryKeyConstraint0.getDoc());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("U 59<+zrbC[-CWN,");
      stringBuilder0.append(stringBuffer0);
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      Character.valueOf('B');
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'B';
      intArray0[1] = 57;
      intArray0[2] = (int) 'B';
      intArray0[3] = (int) 'B';
      intArray0[4] = (int) (byte) (-79);
      intArray0[5] = (int) 'B';
      intArray0[6] = (int) (byte) (-79);
      intArray0[7] = (-79);
      OpenConglomerateScratchSpace openConglomerateScratchSpace0 = new OpenConglomerateScratchSpace(intArray0, (int[]) null);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("getfetc", true, "getfetch", "JwC7");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c.)iIMZ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.derby.iapi.services.cache.ClassSize$1";
      stringArray0[1] = "File";
      stringArray0[2] = "org.apache.derby.iapi.services.cache.ClassSize$1";
      stringArray0[3] = "c.)iIMZ";
      stringArray0[4] = "DATE";
      stringArray0[5] = "#y9p<B.V=DQLA\u0003+";
      stringArray0[6] = "drop materialized view";
      stringArray0[7] = "c.)iIMZ";
      stringArray0[8] = "org.apache.derby.iapi.services.cache.ClassSize$1";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.apache.derby.iapi.services.cache.ClassSize$1", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      dBForeignKeyConstraint0.equals(dBForeignKeyConstraint1);
      dBForeignKeyConstraint0.setName("create unique index");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (org.apache.derby.iapi.services.cache.ClassSize$1, File, org.apache.derby.iapi.services.cache.ClassSize$1, c.)iIMZ, DATE, #y9p<B.V=DQLA\u0003+, drop materialized view, c.)iIMZ, org.apache.derby.iapi.services.cache.ClassSize$1) REFERENCES c.)iIMZ(org.apache.derby.iapi.services.cache.ClassSize$1, File, org.apache.derby.iapi.services.cache.ClassSize$1, c.)iIMZ, DATE, #y9p<B.V=DQLA\u0003+, drop materialized view, c.)iIMZ, org.apache.derby.iapi.services.cache.ClassSize$1)", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.8864288473901638
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("yDhnm`ibF'S^", false, "yDhnm`ibF'S^", "DERBY_JDBC_RESULT_SET ");
      dBCheckConstraint0.setName("yDhnm`ibF'S^");
      dBCheckConstraint0.setName("r32N`");
      dBCheckConstraint0.toString();
      dBCheckConstraint0.setDoc("5*HdbYkB4");
      dBCheckConstraint0.setDoc("y3");
      dBCheckConstraint0.setName("EV>i)>Xjbt/]$B;BsTx");
      dBCheckConstraint0.setDoc((String) null);
      dBCheckConstraint0.setDoc((String) null);
      dBCheckConstraint0.setDoc((String) null);
      dBCheckConstraint0.toString();
      dBCheckConstraint0.setName("exec");
      dBCheckConstraint0.equals("DERBY_JDBC_RESULT_SET ");
      dBCheckConstraint0.toString();
      dBCheckConstraint0.setName((String) null);
      dBCheckConstraint0.equals("CONSTRAINT execCHECK DERBY_JDBC_RESULT_SET ");
      dBCheckConstraint0.setName("mI7$ n8#4c@?ez^{if");
      dBCheckConstraint0.equals("nkrGH2Rd`");
      dBCheckConstraint0.toString();
      dBCheckConstraint0.setName("nkrGH2Rd`");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      dBCheckConstraint0.setDoc("y3");
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT nkrGH2Rd` CHECK DERBY_JDBC_RESULT_SET ", string0);
      
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec1);
      assertEquals("CHECK DERBY_JDBC_RESULT_SET ", string1);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.mutatesDataOrStructure("insert1p_)ph.p;n*o0)jzouv");
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        constantActionActivation0.getMethod("callalter taboeselect into");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getNumSubqueries();
      constantActionActivation0.getMaxRows();
      constantActionActivation0.getParentActivation();
      UpdatableVTIConstantAction updatableVTIConstantAction0 = new UpdatableVTIConstantAction();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[0] = (byte) (-75);
      ValueLobDb.createSmallLob(8, byteArray0, 0L);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      delayQueue0.poll((long) 7, timeUnit0);
      Object object0 = new Object();
      columnDescriptorList0.add(object0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) delayQueue0;
      objectArray0[3] = (Object) (byte) (-75);
      delayQueue0.clear();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      objectArray0[4] = objectArray0[1];
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) timeUnit0;
      objectArray0[7] = (Object) (byte) (-75);
      objectArray0[8] = (Object) columnDescriptorList0;
      columnDescriptorList0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.4006765920171578
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLUtil.mutatesStructure("");
      SQLUtil.isProcedureCall("");
      Boolean boolean0 = new Boolean(false);
      DBSchema dBSchema0 = new DBSchema("DATjE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Zn", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null);
      defaultDBColumn0.getForeignKeyConstraint();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Zn");
      StringBuilder stringBuilder1 = stringBuilder0.insert(1, "");
      stringBuilder1.append((CharSequence) "");
      String[] stringArray0 = new String[3];
      stringArray0[1] = null;
      stringArray0[1] = "Zn";
      stringArray0[2] = "ISH~-Pk9FZn.F+Q7x";
      SQLUtil.join("Zn", "ISH~-Pk9FZn.F+Q7x", stringArray0, "Zn", "DATjE", stringArray0);
      SQLUtil.typeAndName(dBSchema0);
      SQLUtil.renderValue((Object) null);
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("ISH~-Pk9FZn.F+Q7x", defaultDBTable0, (DBDataType) null, integer0, integer1);
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(defaultDBColumn1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) jdbcDataSource0);
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob((-874), byteArray0, (byte)0);
      valueLobDb0.copyToTemp();
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("drop materialized viewalter taboeselect into", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.444902988163467
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      boolean boolean1 = new Boolean("a4yYo");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "SUPERTYPE_NAME";
      stringArray0[1] = "/*";
      stringArray0[2] = "isDesktopSupported";
      stringArray0[3] = null;
      stringArray0[4] = "a4yYo";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[5] = "a4yYo";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE SUPERTYPE_NAME = 'SUPERTYPE_NAME' AND /* = '/*' AND isDesktopSupported = 'isDesktopSupported' AND null = null AND a4yYo = 'a4yYo' AND a4yYo = 'a4yYo'", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("-CZTB#r%H!");
      tableContainer0.getTable("-CZTB#r%H!");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-CZTB#r%H!";
      stringArray0[1] = "-CZTB#r%H!";
      tableContainer0.setDoc("h/[!");
      stringArray0[2] = "-CZTB#r%H!";
      stringArray0[3] = "g6l&'KT h#__.`l,~h";
      stringArray0[4] = "-CZTB#r%H!";
      stringArray0[5] = "-CZTB#r%H!";
      stringArray0[6] = "-CZTB#r%H!";
      stringArray0[7] = "-CZTB#r%H!";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLUtil.normalize(">@6-%fjZj$KB0?", false);
      SinglePool singlePool0 = new SinglePool();
      SinglePool singlePool1 = new SinglePool();
      SinglePool singlePool2 = new SinglePool();
      SinglePool singlePool3 = new SinglePool();
      LockOwner lockOwner0 = mock(LockOwner.class, new ViolatedAssumptionAnswer());
      CompatibilitySpace compatibilitySpace0 = singlePool0.createCompatibilitySpace(lockOwner0);
      assertNotNull(compatibilitySpace0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "drop table";
      SQLUtil.mutatesStructure("drop table");
      RawStore rawStore0 = new RawStore();
      // Undeclared exception!
      try { 
        rawStore0.failover((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.store.raw.RawStore", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      CreateIndexNode createIndexNode0 = new CreateIndexNode();
      Character character0 = new Character('g');
      Character.isIdeographic(0);
      Character.isAlphabetic(1);
      constraintDescriptorList0.add((Object) character0);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("rename", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = null;
      String string1 = "callalter taboeselect into";
      String string2 = "B%~stD#qKoK(Z4";
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("B%~stD#qKoK(Z4", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("kE2$9t*$*", stringBuilder0);
      BTreeController bTreeController0 = new BTreeController();
      bTreeController0.close();
      bTreeController0.getXactMgr();
      RawStore rawStore0 = new RawStore();
      FromVTI fromVTI0 = new FromVTI();
      FromVTI fromVTI1 = new FromVTI();
      fromVTI1.getContextManager();
      bTreeController0.getRawTran();
      // Undeclared exception!
      try { 
        rawStore0.failover("5!AJ:OrhUp%RQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.store.raw.RawStore", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.4340184863848724
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("derby.__rt.", 373);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("Zn");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.services.locks.ConcurrentPool", defaultDBTable0, (DBDataType) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DataStore dataStore0 = new DataStore("Zn");
      VirtualFile virtualFile0 = new VirtualFile("org.apache.derby.impl.services.locks.ConcurrentPool", dataStore0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.derby.impl.services.locks.ConcurrentPool";
      stringArray0[1] = "create table";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(org.apache.derby.impl.services.locks.ConcurrentPool, create table)", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("isVarArgs");
      assertNull(boolean0);
      
      SQLUtil.isQuery("SystablesIdentifier");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, (String) null, (VersionNumber) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean1 = SQLUtil.mutatesStructure("call");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.3190095981344987
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Boolean boolean0 = new Boolean("CLOB");
      SQLUtil.mutatesDataOrStructure("callseEect");
      int[] intArray0 = new int[1];
      intArray0[0] = 2664;
      int[] intArray1 = new int[2];
      intArray1[0] = 1879;
      BTreeController bTreeController0 = new BTreeController();
      BTreeController bTreeController1 = new BTreeController();
      BTreeController bTreeController2 = new BTreeController();
      // Undeclared exception!
      try { 
        bTreeController2.getHeight();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.store.access.btree.ControlRow", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ConcurrentXactFactory concurrentXactFactory0 = new ConcurrentXactFactory();
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-69);
      byteArray0[1] = (byte)46;
      OpenConglomerateScratchSpace openConglomerateScratchSpace0 = new OpenConglomerateScratchSpace((int[]) null, (int[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SinglePool singlePool0 = new SinglePool();
      OpenConglomerateScratchSpace openConglomerateScratchSpace1 = new OpenConglomerateScratchSpace((int[]) null, (int[]) null);
      SinglePool singlePool1 = new SinglePool();
      singlePool0.createCompatibilitySpace((LockOwner) null);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getContextManager();
      Properties properties0 = new Properties();
      boolean boolean0 = SQLUtil.isDML("4]cdOuN,8\"j");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[5];
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "42Y09");
      StringBuilder stringBuilder1 = new StringBuilder(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("call");
      PrintWriter printWriter0 = mockPrintWriter0.printf("42Y09", (Object[]) stringArray0);
      mockPrintWriter0.print((double) 0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("42Y09");
      printWriter0.print((double) 0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      mockPrintWriter2.format("ei08;", (Object[]) stringArray0);
      mockPrintWriter2.printf("ei08;", (Object[]) stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      mockPrintWriter2.append('=');
      printWriter0.print((double) 0);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(printWriter0);
      mockPrintWriter2.print(true);
      MockPrintWriter mockPrintWriter4 = new MockPrintWriter("42Y09");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = " (";
      stringArray0[1] = "X,]Tb";
      stringArray0[2] = "";
      stringArray0[3] = "pc9:j,rC%m/KyH";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[2] = "";
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.removeComments("");
      GDSType.getType("");
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl((GDSType) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.403382060356036
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[0] = (byte) (-75);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("truncatey%6x4kw5ns~\\uc)", 3);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SessionRemote sessionRemote0 = new SessionRemote();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'", defaultDBTable0, 843, "drop index");
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "', ', ', ', ', ', ', '");
      SQLUtil.renderColumnTypeWithSize(dBColumnArray0[1], stringBuilder0);
      assertEquals("', ', ', ', ', ', ', 'DROP INDEX", stringBuilder0.toString());
      
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumn(dBColumnArray0[2]);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "'";
      stringArray0[1] = "'";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBColumnArray0[7]);
      assertEquals("null.'", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(" on ");
      VersionNumber versionNumber0 = VersionNumber.valueOf(" on ");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", versionNumber0);
      String string0 = SQLUtil.ownerDotComponent(defaultDatabase0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "2048";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "2048";
      objectArray0[1] = (Object) "' `s a direct@ry";
      objectArray0[2] = (Object) "2048";
      objectArray0[3] = (Object) "2048";
      Object object0 = new Object();
      objectArray0[4] = object0;
      TableContainer tableContainer0 = new TableContainer("' `s a direct@ry");
      tableContainer0.getTables(true);
      tableContainer0.getSchema();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition(" join ", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = "select";
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "H0|x5Tz^h0";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Cannot convert integer to short.");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("5B~b,jhZ(y", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "H0|x5Tz^h0");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      VersionNumber.valueOf("H0|x5Tz^h0");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(linkedList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("crlate table", "TyQ~R+", versionNumber0);
      DefaultDatabase defaultDatabase1 = new DefaultDatabase("drop materialized viewk", "alter indexk", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase1.getTable(" NULL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ' NULL'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      String[] stringArray1 = new String[8];
      stringArray1[0] = "iQA~";
      stringArray1[1] = "iQA~";
      stringArray1[2] = null;
      stringArray1[3] = null;
      stringArray1[4] = null;
      stringArray1[5] = "iQA~";
      stringArray1[6] = null;
      stringArray1[7] = "iQA~";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, stringArray0, "iQA~", (String) null, stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      byteArray0[2] = (byte)35;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-44);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Wd7ZQD|kC");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, ",");
      DBDataType.getInstance((-100673640), "DATE");
      Integer integer0 = new Integer(6);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Wd7ZQD|kC");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer1 = new Integer(90000);
      Integer.toUnsignedLong(701);
      Integer.compare((-102439159), (-100673640));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DATE");
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "DATE";
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, "YO LiF1,E:w^*", " WHERE ", stringArray0);
      assertEquals("YO LiF1,E:w^* as  WHERE  on null.null =  WHERE .null and null.null =  WHERE .null and null.null =  WHERE .null and null.DATE =  WHERE .DATE", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " WHERE ";
      SQLUtil.renderColumnListWithTableName("exec", stringArray0);
      FileUtil.getDefaultInstance();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        constantActionActivation0.getMethod("exec");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      SinglePool singlePool0 = new SinglePool();
      LockOwner lockOwner0 = mock(LockOwner.class, new ViolatedAssumptionAnswer());
      SinglePool singlePool1 = new SinglePool();
      singlePool1.createCompatibilitySpace(lockOwner0);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      ConstantActionActivation constantActionActivation2 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "2048";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "2048";
      objectArray0[1] = (Object) "' `s a direct@ry";
      objectArray0[2] = (Object) "2048";
      objectArray0[3] = (Object) "2048";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = object0;
      objectArray1[1] = (Object) "2048";
      Object object2 = new Object();
      objectArray1[2] = object2;
      objectArray1[3] = object1;
      objectArray1[4] = (Object) "' `s a direct@ry";
      objectArray1[5] = (Object) stringArray0[0];
      String string0 = SQLUtil.renderValue(" join ");
      assertEquals("' join '", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "execinsert into information_schema.lobs(id, byte_count, table) values(?, ?, ?)";
      stringArray0[1] = "";
      stringArray0[2] = "'}u; #g^<";
      stringArray0[3] = "";
      String string0 = SQLUtil.leftJoin("", stringArray0, "HcFulpeRDh,^$)", "+eSL#FK2&", stringArray0);
      assertEquals("left join HcFulpeRDh,^$) as +eSL#FK2& on .execinsert into information_schema.lobs(id, byte_count, table) values(?, ?, ?) = +eSL#FK2&.execinsert into information_schema.lobs(id, byte_count, table) values(?, ?, ?) and . = +eSL#FK2&. and .'}u; #g^< = +eSL#FK2&.'}u; #g^< and . = +eSL#FK2&.", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "m6y4_f(";
      stringArray0[1] = "m6y4_f(";
      stringArray0[2] = "m6y4_f(";
      stringArray0[3] = "m6y4_f(";
      stringArray0[4] = "m6y4_f(";
      stringArray0[5] = "m6y4_f(";
      stringArray0[6] = "m6y4_f(";
      String string0 = SQLUtil.leftJoin("m6y4_f(", stringArray0, "-.,2v", "OpAk;\"0U#?G$lX}Hl5", stringArray0);
      assertEquals("left join -.,2v as OpAk;\"0U#?G$lX}Hl5 on m6y4_f(.m6y4_f( = OpAk;\"0U#?G$lX}Hl5.m6y4_f( and m6y4_f(.m6y4_f( = OpAk;\"0U#?G$lX}Hl5.m6y4_f( and m6y4_f(.m6y4_f( = OpAk;\"0U#?G$lX}Hl5.m6y4_f( and m6y4_f(.m6y4_f( = OpAk;\"0U#?G$lX}Hl5.m6y4_f( and m6y4_f(.m6y4_f( = OpAk;\"0U#?G$lX}Hl5.m6y4_f( and m6y4_f(.m6y4_f( = OpAk;\"0U#?G$lX}Hl5.m6y4_f( and m6y4_f(.m6y4_f( = OpAk;\"0U#?G$lX}Hl5.m6y4_f(", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuilder0.append(stringBuffer0);
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      Character.valueOf('B');
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'B';
      intArray0[1] = 57;
      intArray0[2] = (int) 'B';
      intArray0[3] = (int) 'B';
      intArray0[4] = (int) (byte) (-79);
      intArray0[5] = (int) 'B';
      intArray0[6] = (int) (byte) (-79);
      intArray0[7] = 2664;
      OpenConglomerateScratchSpace openConglomerateScratchSpace0 = new OpenConglomerateScratchSpace(intArray0, (int[]) null);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("\u0001V\u0003\uFFFFU\u0005\uFFFF\u0001", (String[]) null, "\u0001V\u0003\uFFFFU\u0005\uFFFF\u0001", "\u0001V\u0003\uFFFFU\u0005\uFFFF\u0001", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = "catl";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)34;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      delayQueue0.poll((long) (byte)51, timeUnit0);
      columnDescriptorList0.add((Object) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "vI^3]";
      stringArray0[1] = "n8{^";
      stringArray0[2] = "=%t>TA7,t 6G|une#";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=%t>TA7,t 6G|une#");
      stringArray0[3] = "inner";
      stringArray0[4] = "&amp;";
      stringArray0[5] = "markTempTableAsModifiedInUnitOfWork";
      stringArray0[6] = " ADD ";
      stringArray0[7] = "executecatl";
      stringArray0[8] = "pD'FPso]MU";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[0] = (byte) (-75);
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(8, byteArray0, 0L);
      ValueLobDb valueLobDb1 = valueLobDb0.copyToTemp();
      valueLobDb1.getBytesNoCopy();
      Reader reader0 = valueLobDb1.getReader();
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getTempFileDeleter();
      DataHandler dataHandler0 = sessionRemote0.getDataHandler();
      valueLobDb0.link(dataHandler0, 2);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.parseNumbers();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.8688245196701632
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("yDhnm`ibF'S^", false, "yDhnm`ibF'S^", "DERBY_JDBC_RESULT_SET ");
      dBCheckConstraint0.setDoc("y3");
      dBCheckConstraint0.setDoc((String) null);
      dBCheckConstraint0.toString();
      dBCheckConstraint0.setName("exec");
      dBCheckConstraint0.setDoc("nkrGH2Rd`");
      dBCheckConstraint0.setName("mI7$ n8#4c@?ez^{if");
      dBCheckConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      dBCheckConstraint0.setDoc("y3");
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"mI7$ n8#4c@?ez^{if\" CHECK DERBY_JDBC_RESULT_SET ", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "2048";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "2048";
      objectArray0[1] = (Object) "' `s a direct@ry";
      objectArray0[2] = (Object) "2048";
      objectArray0[3] = (Object) "2048";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = object0;
      objectArray1[1] = (Object) "2048";
      Object object2 = new Object();
      objectArray1[2] = object2;
      objectArray1[3] = object1;
      objectArray1[4] = (Object) "' `s a direct@ry";
      objectArray1[5] = (Object) stringArray0[0];
      objectArray1[6] = object1;
      Random.setNextRandom((-1314));
      DBSchema dBSchema0 = new DBSchema("T&3r8Pw0(F2");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("2048", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "2048", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 2048 PRIMARY KEY (, 2048, , , , , )", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[15];
      stringArray0[2] = "h";
      stringArray0[6] = "h";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "G^XXN";
      stringArray1[1] = ")";
      stringArray1[2] = "setPos too late";
      stringArray1[3] = "Xi!3+8A";
      stringArray1[4] = "ikH?U";
      stringArray1[5] = "renamecatl";
      stringArray1[6] = "setPos too late";
      stringArray1[7] = "G^XXN";
      // Undeclared exception!
      try { 
        SQLUtil.join("lna*!7:G3/B:J_73<-m8", "Xi!3+8A", stringArray0, "renamecatl", "o[o21)6Z7?G,*R/", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XSDAC.S");
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "9dz{d/}=V1Vztcq4";
      objectArray0[2] = (Object) "\u0001V\u0003\uFFFFU\u0005\uFFFF\u0001";
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) "\u0001V\u0003\uFFFFU\u0005\uFFFF\u0001";
      mockPrintWriter0.printf("9dz{d/}=V1Vztcq4", objectArray0);
      mockPrintWriter0.println();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[5];
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "42Y09");
      StringBuilder stringBuilder1 = new StringBuilder(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("drop mterialized vie");
      PrintWriter printWriter0 = mockPrintWriter0.printf("42Y09", (Object[]) stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      mockPrintWriter0.print(0.0);
      mockPrintWriter0.append((CharSequence) "drop mterialized vie", 0, 0);
      printWriter0.print((double) 0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.format("ei08;", (Object[]) stringArray0);
      mockPrintWriter1.printf("ei08;", (Object[]) stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      printWriter0.print(0.0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.print(true);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter("42Y09");
      File file0 = FileUtil.canonicalFile("|!N?_");
      MockFile mockFile0 = new MockFile(file0, "42Y09");
      MockPrintWriter mockPrintWriter4 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter1 = printWriter0.printf(" NULL", (Object[]) stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter1);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)6;
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(200, byteArray0, 0L);
      ValueLobDb valueLobDb1 = valueLobDb0.copyToTemp();
      Reader reader0 = valueLobDb1.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      SQLUtil.mutatesStructure("catl");
      RawStore rawStore0 = new RawStore();
      // Undeclared exception!
      try { 
        rawStore0.failover((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.store.raw.RawStore", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\u0001V\u0003\uFFFFU\u0005\uFFFF\u0001";
      stringArray0[3] = "\u0001V\u0003\uFFFFU\u0005\uFFFF\u0001";
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "2048";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "2048";
      objectArray0[1] = (Object) "' `s a direct@ry";
      objectArray0[2] = (Object) "2048";
      objectArray0[3] = (Object) "2048";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = object0;
      objectArray1[1] = (Object) "2048";
      Object object2 = new Object();
      objectArray1[2] = objectArray1[1];
      objectArray1[3] = object1;
      objectArray1[4] = (Object) "' `s a direct@ry";
      objectArray1[5] = (Object) stringArray0[0];
      objectArray1[6] = object1;
      objectArray1[7] = (Object) "2048";
      Random.setNextRandom((-267));
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("2048", compositeDBObject0);
      tableContainer0.getTable("2048");
      DBDataType dBDataType0 = DBDataType.getInstance((-267), "create tablecatl");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = new Integer((-606));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("' `s a direct@ry", (DBTable) null, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CREATE TABLECATL(1,-606)", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("org.hsqldb.Node");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Boolean boolean0 = Boolean.FALSE;
      boolean boolean1 = SQLUtil.isDDL("select");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "2048";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "2048";
      objectArray0[1] = (Object) "' `s a direct@ry";
      objectArray0[2] = (Object) "2048";
      objectArray0[3] = (Object) "2048";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = object0;
      objectArray1[1] = (Object) "2048";
      Object object2 = new Object();
      SinglePool singlePool0 = new SinglePool();
      LockOwner lockOwner0 = mock(LockOwner.class, new ViolatedAssumptionAnswer());
      singlePool0.createCompatibilitySpace(lockOwner0);
      singlePool0.createCompatibilitySpace((LockOwner) null);
      boolean boolean0 = SQLUtil.isDDL("alter index");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "callseEect";
      Boolean boolean0 = new Boolean("a^*pnrk");
      SQLUtil.mutatesDataOrStructure("drop tablewd7zqd|kc");
      BTreeController bTreeController0 = new BTreeController();
      BTreeController bTreeController1 = new BTreeController();
      try { 
        bTreeController0.newRowLocationTemplate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unimplemented feature.
         //
         verifyException("org.apache.derby.iapi.error.StandardException", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter tabOeselect into");
      GenericStorablePreparedStatement genericStorablePreparedStatement0 = null;
      try {
        genericStorablePreparedStatement0 = new GenericStorablePreparedStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.GenericPreparedStatement", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("R)Pce", "R)Pce", (String[]) null, "R)Pce", "catl", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "deletealtertaboeselect into";
      stringArray0[3] = "ikH?U";
      SQLUtil.join("ikH?U", "#HD,>nV9", stringArray0, stringArray0[4], "deletealtertaboeselect into", stringArray0);
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl((GDSType) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\u0001V\u0003\uFFFFU\u0005\uFFFF\u0001";
      stringArray0[3] = "\u0001V\u0003\uFFFFU\u0005\uFFFF\u0001";
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, "\"S7$(FW`^vV=r", "exec", stringArray0);
      assertEquals("\"S7$(FW`^vV=r as exec on null.\u0001V\u0003\uFFFFU\u0005\uFFFF\u0001 = exec.\u0001V\u0003\uFFFFU\u0005\uFFFF\u0001 and null.null = exec.null and null.null = exec.null and null.\u0001V\u0003\uFFFFU\u0005\uFFFF\u0001 = exec.\u0001V\u0003\uFFFFU\u0005\uFFFF\u0001 and null.null = exec.null and null.null = exec.null and null.null = exec.null", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String[] stringArray1 = new String[8];
      stringArray1[0] = "{z;=s>PC";
      stringArray1[1] = "R6d3FC";
      stringArray1[2] = "e'rdiIgVe2!R3KM!";
      stringArray1[3] = "+mSY:}Sj$7O>G)Qws";
      stringArray1[4] = "58oA)";
      stringArray1[5] = "{z;=s>PC";
      stringArray1[6] = "+mSY:}Sj$7O>G)Qws";
      stringArray1[7] = "+mSY:}Sj$7O>G)Qws";
      String string0 = SQLUtil.join("{z;=s>PC", "58oA)", stringArray0, "{z;=s>PC", "exec", stringArray1);
      assertEquals("{z;=s>PC join {z;=s>PC as exec on 58oA).null = exec.{z;=s>PC and 58oA).null = exec.R6d3FC and 58oA).null = exec.e'rdiIgVe2!R3KM! and 58oA).null = exec.+mSY:}Sj$7O>G)Qws and 58oA).null = exec.58oA) and 58oA).null = exec.{z;=s>PC and 58oA).null = exec.+mSY:}Sj$7O>G)Qws and 58oA).null = exec.+mSY:}Sj$7O>G)Qws", string0);
  }
}
