/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 08:10:05 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sun.msv.datatype.xsd.XSDatatype;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.datatype.DatatypeElement;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QName qName0 = QName.get("0]X${WJ.pH", "=;7T5h<B`y$");
      qName0.getDocumentFactory();
      QName.get("0]X${WJ.pH", "//tmp/tmp/org.dom4j.tree.LazyList$Entry0/tmp/e;)kvI*47v7#tLs0/]HR%hFxK;iszKlZw0Ld^");
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      QName.get("0]X${WJ.pH", "0]X${WJ.pH", "0]X${WJ.pH");
      sAXReader0.setEncoding("//tmp/i;]LYG&w*S/nZ{f!Ce0jxd<$");
      sAXReader0.getErrorHandler();
      sAXReader0.isMergeAdjacentText();
      sAXReader0.getEncoding();
      sAXReader0.getDispatchHandler();
      MockFile mockFile0 = new MockFile("//tmp/i;]LYG&w*S/nZ{f!Ce0jxd<$");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.setEncoding("http://xml.org/sax/features/namespace-prefixes");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-35);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, (byte)45);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(mockFileInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, bufferedInputStream1);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"HTTP://XML.ORG/SAX/FEATURES/NAMESPACE-PREFIXES\". Nested exception: Invalid encoding name \"HTTP://XML.ORG/SAX/FEATURES/NAMESPACE-PREFIXES\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5876966820839855
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      QName qName0 = namespaceStack0.getAttributeQName("b&Fz[rLdjVS", "b&Fz[rLdjVS", "b&Fz[rLdjVS");
      DocumentFactory documentFactory1 = qName0.getDocumentFactory();
      sAXReader1.setDocumentFactory(documentFactory1);
      sAXReader1.setEncoding("//tmp/jxd<$0ZJtF*x3H+");
      sAXReader1.isStripWhitespaceText();
      sAXReader1.getErrorHandler();
      StringReader stringReader0 = new StringReader("cRqj0O.F[Qr(;?4#{j");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.4424796815381313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QName qName0 = new QName("//tmp/Validation not supported for XMLReader: 0");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xPCITdfGSwpYqdKh");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.setStripWhitespaceText(false);
      qName0.equals("=%58I<oR+[A");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
      sAXReader0.createXMLReader();
      try { 
        sAXReader0.read("=%58I<oR+[A");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: =%58I<oR+[A Nested exception: no protocol: =%58I<oR+[A
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setEncoding("//tmp/tmp/tmp/hkc4\"Rd_ c15,U0hkc4\"Rd_ c15,U0/tmp/hk4\"Rd_ c15,U0/tmp/+w+19JA.0+w+19JA.0i;]/LYGcw*SDnZ{f!Ce");
      StringReader stringReader0 = new StringReader("http://xml.org/sax/features/string-interning");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.217119698876163
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setEntityResolver(defaultHandler0);
      StringReader stringReader0 = new StringReader(")hDodxw]P");
      InputSource inputSource0 = new InputSource(stringReader0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 3358;
      sAXReader0.setEncoding("http://xml.org/sax/features/namespace-prefixes");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 3358);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 3358);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0, "DocumentFragment");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"HTTP://XML.ORG/SAX/FEATURES/NAMESPACE-PREFIXES\". Nested exception: Invalid encoding name \"HTTP://XML.ORG/SAX/FEATURES/NAMESPACE-PREFIXES\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[13];
      StackTraceElement stackTraceElement0 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", (-290));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("hk4\"Rd_ c15,U", "i;]LYG&w*S/nZ{f!Ce", "hn0-dx)UCp", (-290));
      stackTraceElementArray0[1] = stackTraceElement0;
      StackTraceElement stackTraceElement2 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "hk4\"Rd_ c15,U", "IyT94:lii1Fo~O", (-290));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", (-138));
      stackTraceElementArray0[3] = stackTraceElement0;
      StackTraceElement stackTraceElement4 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", "hn0-dx)UCp", (-290));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", (-138));
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("//tmp/Ld^0/tmp/hn0-dx)UCp00IyT94:lii1Fo~O", "i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", (-1445));
      StackTraceElement stackTraceElement7 = new StackTraceElement("//tmp/hn0-dx)UCp00substring-before() requires two arguments.", "\"++Je@<'bB.", "S[qm^(?Bt", 0);
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/declaration-handler", stackTraceElement0);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/declaration-handler' cannot be casted to org.xml.sax.ext.DeclHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-49);
      StackTraceElement stackTraceElement0 = new StackTraceElement("<vO", "Y^wj(>p,o'~@^'7;I", "//tmp/5YFht<<0org.dom4j.dom.DOMDocumentFactory", 28);
      StackTraceElement stackTraceElement1 = new StackTraceElement("//tmp/5YFht<<0org.dom4j.dom.DOMDocumentFactory", "Y^wj(>p,o'~@^'7;I", "//tmp/5YFht<<0org.dom4j.dom.DOMDocumentFactory", (byte) (-12));
      StackTraceElement stackTraceElement2 = new StackTraceElement("//tmp/+w+19JA.0.tmp", "", "", (byte)46);
      MockFile.createTempFile("Y^wj(>p,o'~@^'7;I", "<vO");
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setFeature("http://xml.org/sax/features/namespace-prefixes", false);
      try { 
        sAXReader0.setXMLReaderClassName("<vO");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class <vO not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.688514447186191
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      String string0 = "//tmp/a)vcee5f?0/tmp/Adding text to an XML document must not be null0/tmp/org.dom4j.io.SAXModifyException0.tmp";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//tmp/a)vcee5f?0/tmp/Adding text to an XML document must not be null0/tmp/org.dom4j.io.SAXModifyException0.tmp");
      defaultDocumentFactory0.createPattern("false");
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.isIncludeInternalDTDDeclarations();
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.getEncoding();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.uriPrefix = null;
      String string1 = "//tmp/MO~y)z0-_?JjHb&~";
      String string2 = "uv";
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/MO~y)z0-_?JjHb&~", "uv");
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.isMergeAdjacentText();
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream2, bufferedInputStream0);
      sequenceInputStream0.markSupported();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream2, sequenceInputStream0);
      bufferedInputStream1.markSupported();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(bufferedInputStream0, sequenceInputStream2);
      SAXReader sAXReader1 = new SAXReader(false);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3643764676852554
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("+w+19JA.");
      sAXReader_SAXEntityResolver0.resolveEntity("+w+19JA.", "+w+19JA.");
      SAXReader sAXReader0 = new SAXReader(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getQName("\"?A3?v)97tHh|nDrY", "8kY3F~g@CDWDa~hcsl", "http://xml.org/sax/features/string-interning");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      try { 
        sAXReader0.setFeature("http://xml.org/sax/features/string-interning", false);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // False state for feature 'http://xml.org/sax/features/string-interning' is not supported.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(dataInputStream0);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream2, bufferedInputStream0);
      sequenceInputStream0.markSupported();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream2, sequenceInputStream0);
      bufferedInputStream1.markSupported();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, dataInputStream0);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(bufferedInputStream0, sequenceInputStream2);
      sequenceInputStream2.mark(58);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.510302164874845
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
          String string0 = "FiaVX4o";
          pruningDispatchHandler0.getHandler("FiaVX4o");
          sAXReader0.setDefaultHandler((ElementHandler) null);
          sAXReader0.getDispatchHandler();
          FileSystemHandling.shouldAllThrowIOExceptions();
          byte[] byteArray0 = new byte[0];
          SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
          sAXReader0.setEntityResolver(sAXContentHandler0);
          FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
          sAXReader0.getErrorHandler();
          sAXReader0.setErrorHandler((ErrorHandler) null);
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[10];
      StackTraceElement stackTraceElement0 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", (-290));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("hk4\"Rd_ c15,U", "i;]LYG&w*S/nZ{f!Ce", "hn0-dx)UCp0", (-290));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "hk4\"Rd_ c15,U", "IyT94:lii1Fo~O", (-290));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", (-138));
      stackTraceElementArray0[3] = stackTraceElement0;
      StackTraceElement stackTraceElement4 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", "hn0-dx)UCp0", (-290));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", (-138));
      stackTraceElementArray0[8] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("IyT94:lii1Fo~O", "//tmp/i;]LYG&w*S/nZ{f!Ce0", "IyT94:lii1Fo~O", 491);
      StackTraceElement stackTraceElement7 = new StackTraceElement("IyT94:lii1Fo~O", "hn0-dx)UCp0", "IyT94:lii1Fo~O", 491);
      StackTraceElement stackTraceElement8 = new StackTraceElement("//tmp/`e[a!S=0`e[a!S=", "h]x'0EuW1smzv", "2.Q]]iM", (-290));
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setStringInternEnabled(false);
      int int0 = (-31);
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6694351084945749
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.createDefaultEntityResolver("/j2g_v*O%e'qo1'");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("MSG` 4I6P}E@>");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "/j2g_v*O%e'qo1'");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.2407560846182575
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("}ky-i8!&4AQ4");
      sAXReader_SAXEntityResolver0.resolveEntity("U;c=,k<2rD", ": ");
      sAXReader_SAXEntityResolver0.resolveEntity("y2*9@%!s", (String) null);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      SAXParseException sAXParseException0 = new SAXParseException(": ", locatorImpl0);
      SAXParseException sAXParseException1 = new SAXParseException((String) null, "//tmp/+kJ;8Go3;/YC0+kJ;8Go3;/YC", " of document ", 7, (-3005), (Exception) null);
      SAXParseException sAXParseException2 = new SAXParseException("", "la", ": ", 47, 47, sAXParseException0);
      locatorImpl0.getLineNumber();
      SAXParseException sAXParseException3 = new SAXParseException("U;c=,k<2rD", "aDoGK", (String) null, (-1942), 772);
      SAXParseException sAXParseException4 = new SAXParseException("//tmp/+kJ;8Go3;/YC0+kJ;8Go3;/YC", locatorImpl0, sAXParseException0);
      assertFalse(sAXParseException4.equals((Object)sAXParseException3));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setMergeAdjacentText(true);
      sAXReader0.getXMLReader();
      sAXReader0.setXMLReader(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.353110605213824
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          sAXReader0.setEncoding("[ (");
          FileSystemHandling.createFolder((EvoSuiteFile) null);
          XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
          FileSystemHandling.shouldAllThrowIOExceptions();
          ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
          char[] charArray0 = new char[9];
          charArray0[0] = 'u';
          charArray0[1] = '>';
          charArray0[2] = 'G';
          charArray0[3] = 'C';
          charArray0[4] = '6';
          charArray0[5] = '8';
          charArray0[6] = 'M';
          charArray0[7] = '{';
          charArray0[8] = 'M';
          parserAdapter0.characters(charArray0, 22, 1720);
          sAXReader0.setXMLReader(parserAdapter0);
          try { 
            sAXReader0.read("http://xml.org/sax/features/string-interning");
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLReaderAdapter.parse(XMLReaderAdapter.java:249)
             // org.xml.sax.helpers.ParserAdapter.parse(ParserAdapter.java:430)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:314)
             // sun.reflect.GeneratedMethodAccessor186.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLReaderAdapter.parse(XMLReaderAdapter.java:249)
             // org.xml.sax.helpers.ParserAdapter.parse(ParserAdapter.java:430)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:314)
             // sun.reflect.GeneratedMethodAccessor186.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("i;]LYG&w*S/nZ{f!Ce", "http://xml.org/sax/handlers/LexicalHandler");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SAXReader sAXReader0 = new SAXReader(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream1, 1267);
      PipedInputStream pipedInputStream2 = null;
      try {
        pipedInputStream2 = new PipedInputStream(pipedOutputStream0, 3126);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2833517168939514
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/tmp/>G5V,M:R0>G5V,M:R0/tmp/>G5V,M:R0>G5V,M:R");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "//tmp/tmp/>G5V,M:R0>G5V,M:R0/tmp/>G5V,M:R0>G5V,M:R");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //tmp/tmp/>G5V,M:R0>G5V,M:R0/tmp/>G5V,M:R0>G5V,M:R Nested exception: no protocol: //tmp/tmp/>G5V,M:R0>G5V,M:R0/tmp/>G5V,M:R0>G5V,M:R
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", (-290));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("hk4\"Rd_ c15,U", "i;]LYG&w*S/nZ{f!Ce", "hn0-dx)UCp0", (-290));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "hk4\"Rd_ c15,U", "IyTI94:li)i1Fo~O", (-290));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "hk4\"Rd_ c15,U", "9ZoT", (-138));
      stackTraceElementArray0[3] = stackTraceElement0;
      StackTraceElement stackTraceElement4 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", "hn0-dx)UCp0", (-290));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", (-138));
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("<)", "http://xml.org/sax/properties/lexical-handler", "xQ", (-2948));
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "Erro on lne ", "i;]LYG&w*S/nZ{f!Ce", 2147483645);
      stackTraceElementArray0[7] = stackTraceElement7;
      StackTraceElement stackTraceElement8 = new StackTraceElement("", "i;]LYG&w*S/nZ{f!Ce", "<)", 93);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.487562483747964
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
          String string0 = "";
          pruningDispatchHandler0.getHandler("");
          sAXReader0.setDefaultHandler((ElementHandler) null);
          sAXReader0.getDispatchHandler();
          XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
          sAXReader0.setErrorHandler(xMLFilterImpl0);
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.removeHandler("+w+19JA.");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.jaxen.saxpath.base.XPathLexer");
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.isValidating();
      String string0 = " wjZo\"k..(Oam=O";
      try { 
        sAXReader0.setXMLReaderClassName(" wjZo\"k..(Oam=O");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class  wjZo\"k..(Oam=O not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      dataInputStream0.skip(839L);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      sequenceInputStream0.markSupported();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(dataInputStream0, sequenceInputStream0);
      sequenceInputStream0.mark(20);
      SAXReader sAXReader1 = new SAXReader(true);
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertTrue(sAXReader1.isValidating());
      assertFalse(sAXReader1.isStripWhitespaceText());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.353783276629251
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~{xp");
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-40);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      File file0 = MockFile.createTempFile("~{xp", "j");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.5016626659396266
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.endPrefixMapping("`");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      sAXReader0.setXMLReader(xMLReader0);
      sAXReader0.isValidating();
      sAXReader0.setEncoding("){xx21b@||A)");
      SAXReader sAXReader1 = new SAXReader();
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      sAXReader1.getXMLReader();
      StringReader stringReader0 = new StringReader("){xx21b@||A)");
      try { 
        sAXReader0.read((Reader) stringReader0, "`");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document ` : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      sequenceInputStream0.close();
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      InputSource inputSource0 = new InputSource(sequenceInputStream0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = " of document ";
      stringArray0[1] = "WsHfBrN4gy'\"?#+CUzg~";
      stringArray0[2] = "WsHfBrN4gy'\"?#+CUzg~";
      stringArray0[3] = "WsHfBrN4gy'\"?#+CUzg~";
      stringArray0[4] = "WsHfBrN4gy'\"?#+CUzg~";
      stringArray0[5] = "WsHfBrN4gy'\"?#+CUzg~";
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0);
      pruningElementStack0.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[13];
      StackTraceElement stackTraceElement0 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", (-290));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("hk4\"Rd_ c15,U", "i;]LYG&w*S/nZ{f!Ce", "hn0-dx)UCp", (-290));
      stackTraceElementArray0[1] = stackTraceElement0;
      StackTraceElement stackTraceElement2 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "hk4\"Rd_ c15,U", "IyT94:lii1Fo~O", (-290));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", (-138));
      stackTraceElementArray0[3] = stackTraceElement0;
      StackTraceElement stackTraceElement4 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", "hn0-dx)UCp", (-290));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", (-138));
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("IyT94:lii1Fo~O", "i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", (-1445));
      StackTraceElement stackTraceElement7 = new StackTraceElement("//tmp/hn0-dx)UCp00substring-before() requires two arguments.", "i;]LYG&w*S/nZ{f!Ce", "S[qZ^b?Bt", 0);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter((XMLFilter) null);
      try { 
        sAXReader0.setProperty("Jq?^,{]tMxEf'%ZNd0", stackTraceElement0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'Jq?^,{]tMxEf'%ZNd0' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try { 
        sAXReader0.configureReader(parserAdapter0, defaultHandler2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@3dd40154 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2610316958599697
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      xMLFilterImpl0.resolveEntity("t[u{&g4", "CRZm");
      charArray0[1] = '';
      charArray0[2] = 'H';
      charArray0[3] = '';
      charArray0[4] = ' ';
      charArray0[5] = 'D';
      parserAdapter0.characters(charArray0, 1641, 1641);
      xMLFilterImpl0.resolveEntity("", "t[u{&g4");
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Feature: http://xml.org/sax/features/namespace-prefixes Nested exception: Feature: http://xml.org/sax/features/namespace-prefixes
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gr@f,Eb8[9=uR>4");
      SAXReader sAXReader0 = new SAXReader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Ld^0Ld^");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, fileSystemHandling0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.3340105861575124
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
          FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
          FileSystemHandling.createFolder((EvoSuiteFile) null);
          DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
          SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
          FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
          NamespaceStack namespaceStack0 = new NamespaceStack();
          QName qName0 = namespaceStack0.getQName("MW2G[FVfCQh[\"2yvf", "MW2G[FVfCQh[\"2yvf", "MW2G[FVfCQh[\"2yvf");
          XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
          DatatypeElement datatypeElement0 = new DatatypeElement(qName0, (-532), xSDatatype0);
          defaultDocumentFactory0.createDocument();
          datatypeElement0.getNamespacesForURI("");
          Element element0 = datatypeElement0.addText("MW2G[FVfCQh[\"2yvf");
          defaultDocumentFactory0.createAttribute(element0, "MW2G[FVfCQh[\"2yvf", "MW2G[FVfCQh[\"2yvf");
          URL uRL0 = MockURL.getFileExample();
          sAXReader0.getDocumentFactory();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      Object object0 = new Object();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      NamespaceStack namespaceStack1 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("?,X={2LZB?CuTme", "?,X={2LZB?CuTme", "?,X={2LZB?CuTme");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, 92, xSDatatype0);
      XSDatatype xSDatatype1 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement1 = new DatatypeElement(qName0, 92, xSDatatype1);
      datatypeElement0.addText("+f%e?#?b4j");
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Ld^0Ld^");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)46;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile.createTempFile("Ld^", "");
      try { 
        sAXReader0.setFeature("", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[10];
      StackTraceElement stackTraceElement0 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", (-290));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("hk4\"Rd_ c15,U", "i;]LYG&w*S/nZ{f!Ce", "hn0-dx)UCp0", (-290));
      stackTraceElementArray0[0] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "hk4\"Rd_ c15,U", "IyT94:lii1Fo~O", (-290));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", (-138));
      stackTraceElementArray0[3] = stackTraceElement1;
      StackTraceElement stackTraceElement4 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", "hn0-dx)UCp0", (-290));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", (-138));
      stackTraceElementArray0[8] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("IyT94:lii1Fo~O", "namespace", "IyT94:lii1Fo~O", 491);
      StackTraceElement stackTraceElement7 = new StackTraceElement("IyT94:lii1Fo~O", "hn0-dx)UCp0", "IyT94:lii1Fo~O", 491);
      StackTraceElement stackTraceElement8 = new StackTraceElement("//tmp/`e[a!S=0`e[a!S=", "h]x'0EuW1smzv", "2.Q]]iM", (-290));
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((String) null);
      MockFile mockFile0 = new MockFile("Error on line ", "&:7'^BBt9/:q&;");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)13;
      MockException mockException0 = new MockException("R^{lQ`NO/{\u0007:n+");
      Throwable throwable0 = mockException0.fillInStackTrace();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable();
      mockThrowable1.getLocalizedMessage();
      MockThrowable mockThrowable2 = new MockThrowable();
      mockThrowable0.fillInStackTrace();
      MockException mockException1 = new MockException(throwable0);
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("c]/Nv4yIgqB");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.333443371183037
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[10];
          StackTraceElement stackTraceElement0 = new StackTraceElement("i;]/LYGcw*SDnZ{f!Ce", "i;]/LYGcw*SDnZ{f!Ce", "i;]/LYGcw*SDnZ{f!Ce", (-290));
          stackTraceElementArray0[0] = stackTraceElement0;
          StackTraceElement stackTraceElement1 = new StackTraceElement("i;]/LYGcw*SDnZ{f!Ce", "i;]/LYGcw*SDnZ{f!Ce", "hn0-dx)UCp0", (-290));
          stackTraceElementArray0[1] = stackTraceElement1;
          StackTraceElement stackTraceElement2 = new StackTraceElement("i;]/LYGcw*SDnZ{f!Ce", "i;]/LYGcw*SDnZ{f!Ce", "i;]/LYGcw*SDnZ{f!Ce", (-290));
          stackTraceElementArray0[2] = stackTraceElement2;
          StackTraceElement stackTraceElement3 = new StackTraceElement("i;]/LYGcw*SDnZ{f!Ce", "i;]/LYGcw*SDnZ{f!Ce", "i;]/LYGcw*SDnZ{f!Ce", (-138));
          stackTraceElementArray0[3] = stackTraceElement0;
          StackTraceElement stackTraceElement4 = new StackTraceElement("i;]/LYGcw*SDnZ{f!Ce", "i;]/LYGcw*SDnZ{f!Ce", "hn0-dx)UCp0", (-290));
          stackTraceElementArray0[4] = stackTraceElement4;
          StackTraceElement stackTraceElement5 = new StackTraceElement("i;]/LYGcw*SDnZ{f!Ce", "i;]/LYGcw*SDnZ{f!Ce", "i;]/LYGcw*SDnZ{f!Ce", (-138));
          stackTraceElementArray0[5] = stackTraceElement5;
          StackTraceElement stackTraceElement6 = new StackTraceElement("hn0-dx)UCp0", "i;]/LYGcw*SDnZ{f!Ce", "i;]/LYGcw*SDnZ{f!Ce", (-290));
          StackTraceElement stackTraceElement7 = new StackTraceElement("i;]/LYGcw*SDnZ{f!Ce", "//tmp/Ld^0|U2eWj%M*kG", "i;]/LYGcw*SDnZ{f!Ce", (-138));
          StackTraceElement stackTraceElement8 = new StackTraceElement("@Ln", "hn0-dx)UCp0", "i;]/LYGcw*SDnZ{f!Ce", 3762);
          StackTraceElement stackTraceElement9 = new StackTraceElement("hn0-dx)UCp0", "org.jaxen.function.NotFunction", "2*", 3848);
          URL uRL0 = MockURL.getFileExample();
          SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte) (-74);
      byteArray0[8] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFile.createTempFile("63Bfr>u!G", "//tmp/tmp/org.dom4j.io.SAXModifyException0.tmp0/tmp/org.dom4j.io.SAXModifyException0.tmp");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.pop("//tmp/tmp/org.dom4j.io.SAXModifyException0.tmp0/tmp/org.dom4j.io.SAXModifyException0.tmp");
      namespaceStack0.getQName("1Or*CD}vP)xl", "Ld^", "");
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.createContentHandler((XMLReader) null);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7988457068767891
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object object0 = new Object();
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      Object object1 = new Object();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.addHandler((String) null, dispatchHandler0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DispatchHandler dispatchHandler1 = sAXReader0.getDispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler1);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.isIncludeExternalDTDDeclarations();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      SAXParseException sAXParseException0 = new SAXParseException("//tmp/Nj,10Nj,1", locatorImpl1);
      SAXParseException sAXParseException1 = new SAXParseException((String) null, "//tmp/Ld^0.tmp", "QD9", 92, 27, sAXParseException0);
      SAXParseException sAXParseException2 = new SAXParseException("YJ", locatorImpl0, sAXParseException1);
      assertFalse(sAXParseException2.equals((Object)sAXParseException1));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader0.addHandler("//tmp/jxd<$0jxd<$", (ElementHandler) null);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "//tmp/i;]LYG&w*S/nZ{f!Ce0jxd<$");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      try { 
        sAXReader0.setXMLReaderClassName("qmP");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class qmP not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6183972463477247
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.endPrefixMapping("`");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      String string0 = "|G5-w9\\u6Sx{ G00Ax";
      defaultHandler0.unparsedEntityDecl(string0, "\"Ae')=<Kuy%", "\"Ae')=<Kuy%", "//tmp/jxd<$0jxd<$");
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      try { 
        sAXReader0.setProperty("org.jaxen.expr.iter.IterableAxis", xMLFilterImpl1);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'org.jaxen.expr.iter.IterableAxis' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.225155042985273
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl0);
      locator2Impl2.setPublicId("");
      Locator2Impl locator2Impl3 = new Locator2Impl();
      MockException mockException0 = new MockException();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable();
      File file0 = MockFile.createTempFile("//tmp/>G5V,M:R0>G5V,M:R", "Ld^");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.367177423073482
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("j", "j");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read("j");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/j (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/j (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" of document ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("WsHfBrNgy'\"?#+CUzg~", " of document ");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("+w+19JA.");
      sAXReader_SAXEntityResolver0.resolveEntity("+w+19JA.", "");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(true);
      byte[] byteArray0 = new byte[3];
      PipedInputStream pipedInputStream0 = new PipedInputStream(299);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 299);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.configureReader(parserAdapter0, defaultHandler0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setValidation(true);
      XMLReader xMLReader0 = null;
      DefaultHandler defaultHandler0 = new DefaultHandler();
      String string0 = ")j<*";
      defaultHandler0.resolveEntity(")j<*", ")j<*");
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)28;
      Locator2Impl locator2Impl0 = new Locator2Impl();
      SAXParseException sAXParseException0 = new SAXParseException("`U=HI,s#RsG,g-Q}<F", locator2Impl0);
      SAXParseException sAXParseException1 = new SAXParseException("org.dom4j.xpath.XPathPattern", "//tmp/tmp/jxd<$0.tmp0ySjJ{ONMF=y", (String) null, 93, (byte)46, sAXParseException0);
      locator2Impl0.getLineNumber();
      SAXParseException sAXParseException2 = new SAXParseException("http://xml.org/sax/properties/declaration-handler", (String) null, "", (byte)28, 774);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      SAXParseException sAXParseException3 = new SAXParseException("//tmp/E4}'291OX:.J0 : ", locator2Impl0, sAXParseException1);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertNotNull(documentFactory0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      HandlerBase handlerBase0 = new HandlerBase();
      sAXReader0.createDefaultEntityResolver("org.jaxen.expr.PredicateSet");
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl0);
      SAXParseException sAXParseException0 = new SAXParseException("('U", locatorImpl1);
      locatorImpl1.getLineNumber();
      SAXParseException sAXParseException1 = new SAXParseException(" [Text: \"", "", (String) null, 0, 88);
      SAXParseException sAXParseException2 = new SAXParseException("h0lgs", locator2Impl0, sAXParseException0);
      assertFalse(sAXParseException2.equals((Object)sAXParseException1));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.setEncoding("This should never happen. Caught: ");
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("MW2G[FVfCQh[\"2yvf", "MW2G[FVfCQh[\"2yvf", "MW2G[FVfCQh[\"2yvf");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, (-532), xSDatatype0);
      Element element0 = datatypeElement0.addText("MW2G[FVfCQh[\"2yvf");
      defaultDocumentFactory0.createAttribute(element0, "MW2G[FVfCQh[\"2yvf", "MW2G[FVfCQh[\"2yvf");
      MockURL.getFileExample();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "//tmp/Ld^0");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      HandlerBase handlerBase0 = new HandlerBase();
      xMLFilterImpl0.setDTDHandler(handlerBase0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "//tmp/Ld^0");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-45);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      QName qName0 = QName.get("", "_]m>s.J4pZ]4_JUw");
      qName0.getDocumentFactory();
      QName.get("+CrKM\"3l-[5S-", "", "+CrKM\"3l-[5S-");
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.setIgnoreComments(true);
      XMLReader xMLReader0 = null;
      XMLReaderAdapter xMLReaderAdapter0 = null;
      try {
        xMLReaderAdapter0 = new XMLReaderAdapter((XMLReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // XMLReader must not be null
         //
         verifyException("org.xml.sax.helpers.XMLReaderAdapter", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.349742765197841
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Ld^0Ld^");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)46;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      File file0 = MockFile.createTempFile("Ld^", "Ld^");
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setEncoding("//tmp/Ld^0:MH+t]|4>rj+m");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"//TMP/LD^0:MH+T]|4>RJ+M\". Nested exception: Invalid encoding name \"//TMP/LD^0:MH+T]|4>RJ+M\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SAXReader sAXReader0 = new SAXReader(true);
      File file0 = MockFile.createTempFile("jxd<$", "jxd<$");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.3326774197215174
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Ld^0Ld^");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-74);
      sAXReader0.removeHandler((String) null);
      byteArray0[4] = (byte)46;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((String) null, "Not supported yet.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Not supported yet.\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.366590399694106
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", (String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.278600407264681
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader(")hDodxw]P");
      InputSource inputSource0 = new InputSource(stringReader0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setStripWhitespaceText(false);
      try { 
        sAXReader0.setProperty("", "");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[10];
      StackTraceElement stackTraceElement0 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", (-290));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("hk4\"Rd_ c15,U", "i;]LYG&w*S/nZ{f!Ce", "hn0-dx)UCp0", (-290));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "hk4\"Rd_ c15,U", "IyT94:lii1Fo~O", (-290));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", (-138));
      stackTraceElementArray0[3] = stackTraceElement0;
      StackTraceElement stackTraceElement4 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", "hn0-dx)UCp0", (-290));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", (-138));
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("<)", "http://xml.org/sax/properties/lexical-handler", "xQ", (-2948));
      stackTraceElementArray0[6] = stackTraceElement6;
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader(false);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      try { 
        sAXReader0.setXMLReaderClassName("http://xml.org/sax/properties/lexical-handler");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class http://xml.org/sax/properties/lexical-handler not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5280883009539779
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/a)vcee5f?0");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/a)vcee5f?0", "p=hDsf)M5=NFJy");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/tmp/org.dom4j.io.SAXModifyException0.tmp0/tmp/org.dom4j.io.SAXModifyException0.tmp", (String) null);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      SAXParseException sAXParseException0 = new SAXParseException((String) null, locatorImpl0);
      SAXParseException sAXParseException1 = new SAXParseException("http://xml.org/sax/features/use-locator2", locatorImpl0);
      SAXParseException sAXParseException2 = new SAXParseException("http://xml.org/sax/features/string-interning", "?3C/&-&", "//tmp/jFd<$0jFd<$", (-2413), (-2413), sAXParseException1);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      SAXParseException sAXParseException3 = new SAXParseException("//tmp/a)vcee5f?0", "?$T1{", "http://xml.org/sax/features/string-interning", 61, 0);
      SAXParseException sAXParseException4 = new SAXParseException("//tmp/+kJ;8Go3;/YC0+kJ;8Go3;/YC", locator2Impl0);
      SAXParseException sAXParseException5 = new SAXParseException("//tmp/a)vcee5f?0a)vcee5f?", locator2Impl0, sAXParseException4);
      assertFalse(sAXParseException5.equals((Object)sAXParseException2));
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack0.push("/j2g_v*O%e'qo1'", "/j2g_v*O%e'qo1'");
      namespaceStack0.pop(" namespace: \"");
      namespaceStack0.getDefaultNamespace();
      defaultDocumentFactory0.createQName("/j2g_v*O%e'qo1'", (Namespace) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.isValidating();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null, (String) null);
      sAXReader0.isIncludeInternalDTDDeclarations();
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      assertFalse(uRI1.isAbsolute());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("+w+19JA.", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class +w+19JA. not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getDispatchHandler();
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.getHandler("7.w]zo");
      sAXReader0.addHandler((String) null, (ElementHandler) null);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.setDefaultHandler((ElementHandler) null);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.resetHandlers();
      byte byte0 = (byte) (-53);
      byte[] byteArray0 = null;
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("+w+19JA.");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(false);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXReader0.setDefaultHandler(sAXModifyElementHandler0);
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " of document ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("q|$kja@OapB,z&:EQzU");
      MockURL.getFileExample();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[10];
          StackTraceElement stackTraceElement0 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", (-290));
          stackTraceElementArray0[0] = stackTraceElement0;
          StackTraceElement stackTraceElement1 = new StackTraceElement("hk4\"Rd_ c15,U", "i;]LYG&w*S/nZ{f!Ce", "hn0-dx)UCp0", (-290));
          stackTraceElementArray0[1] = stackTraceElement1;
          StackTraceElement stackTraceElement2 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "hk4\"Rd_ c15,U", "IyT94:lii1Fo~O", (-290));
          stackTraceElementArray0[2] = stackTraceElement2;
          StackTraceElement stackTraceElement3 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", (-138));
          stackTraceElementArray0[3] = stackTraceElement0;
          StackTraceElement stackTraceElement4 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", "hn0-dx)UCp0", (-290));
          stackTraceElementArray0[4] = stackTraceElement4;
          StackTraceElement stackTraceElement5 = new StackTraceElement("hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", "hk4\"Rd_ c15,U", (-138));
          stackTraceElementArray0[5] = stackTraceElement5;
          StackTraceElement stackTraceElement6 = new StackTraceElement("//tmp/tmp/tmp/tmp/g/;C0w-1CrBD0Ld^0.tmp0.tmp0org.jaxen.FunctionCallException", "i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", (-1445));
          StackTraceElement stackTraceElement7 = new StackTraceElement("=\"", "hk4\"Rd_ c15,U", "//tmp/tmp/tmp/tmp/g/;C0w-1CrBD0Ld^0.tmp0.tmp0org.jaxen.FunctionCallException", (-1445));
          SAXReader sAXReader0 = new SAXReader(false);
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Object object0 = new Object();
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", (-290));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("hk4\"Rd_ c15,U", "i;]LYG&w*S/nZ{f!Ce", "hn0-dx)UCp0", (-290));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "hk4\"Rd_ c15,U", "IyTI94:li)i1Fo~O", (-290));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "hk4\"Rd_ c15,U", "9ZoT", (-138));
      stackTraceElementArray0[3] = stackTraceElement0;
      StackTraceElement stackTraceElement4 = new StackTraceElement("i;]LYG&w*S/nZ{f!Ce", "i;]LYG&w*S/nZ{f!Ce", "hn0-dx)UCp0", (-290));
      stackTraceElementArray0[4] = stackTraceElement4;
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader0.read("IyTI94:li)i1Fo~O");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unknown protocol: iyti94 Nested exception: unknown protocol: iyti94
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
