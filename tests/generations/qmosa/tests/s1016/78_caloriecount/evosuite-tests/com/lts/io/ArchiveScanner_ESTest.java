/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 10:37:09 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.Vector;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("5cvJB]d", "5cvJB]d");
      Locale locale0 = Locale.CHINA;
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Vector<Locale> vector1 = new Vector<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale locale1 = Locale.CANADA;
      Locale locale2 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale2.getUnicodeLocaleKeys();
      vector0.parallelStream();
      Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0);
      locale1.getDisplayScript(locale2);
      locale2.getUnicodeLocaleKeys();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale3 = Locale.CHINA;
      Locale locale4 = Locale.CANADA_FRENCH;
      Locale locale5 = Locale.JAPAN;
      Locale locale6 = Locale.FRANCE;
      locale6.getDisplayLanguage(locale0);
      locale5.getUnicodeLocaleKeys();
      Locale.setDefault(locale_Category0, locale6);
      Locale locale7 = Locale.KOREA;
      locale0.getDisplayLanguage(locale5);
      Locale locale8 = Locale.ENGLISH;
      locale3.getExtensionKeys();
      locale8.getScript();
      Locale.lookup(vector0, list0);
      Locale locale9 = locale3.stripExtensions();
      locale9.stripExtensions();
      locale0.getDisplayScript(locale9);
      ImprovedFile improvedFile1 = improvedFile0.createTempDir("5cvJB]d", "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      archiveScanner0.scandir(improvedFile1, "\u6CD5\u6587", false);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "\u4E2D\u56FD\u8A9E", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1572809957080965
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      mockFile0.renameTo(improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NoEwl7gcW";
      stringArray0[1] = "";
      stringArray0[2] = "NoEwl7gcW";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      archiveScanner0.filesExcluded = vector0;
      mockFile0.setWritable(false, false);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.includes = stringArray0;
      archiveScanner0.setIncludes(stringArray0);
      MockFile mockFile1 = new MockFile("");
      Vector<List<String>> vector1 = new Vector<List<String>>();
      archiveScanner0.filesIncluded = vector1;
      archiveScanner0.processFile("NoEwl7gcW");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      mockFile1.deleteOnExit();
      ImprovedFile improvedFile1 = new ImprovedFile("NoEwl7gcW");
      archiveScanner0.toFileType(mockFile1);
      archiveScanner0.scandir(mockFile1, "", true);
      try { 
        archiveScanner0.processArchive(improvedFile1, "NoEwl7gcW");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error creating temp directory for NoEwl7gcW
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "NEwl7c";
      MockFile mockFile0 = new MockFile("");
      ImprovedFile improvedFile0 = new ImprovedFile("NEwl7c", "NEwl7c");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NEwl7c";
      stringArray0[1] = "";
      stringArray0[2] = "NEwl7c";
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.includes = stringArray0;
      DirectoryScanner.matchPatternStart("NEwl7c", "");
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(mockFile0, "NEwl7c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("");
      ImprovedFile improvedFile0 = new ImprovedFile("NoEwl7gcW", "NoEwl7gcW");
      mockFile0.renameTo(improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NoEwl7gcW";
      stringArray0[1] = "";
      stringArray0[2] = "NoEwl7gcW";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      archiveScanner0.filesExcluded = vector0;
      mockFile0.setWritable(false, false);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.includes = stringArray0;
      archiveScanner0.setIncludes(stringArray0);
      MockFile mockFile1 = new MockFile("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      mockFile1.deleteOnExit();
      ImprovedFile improvedFile1 = new ImprovedFile("NoEwl7gcW");
      archiveScanner0.toFileType(mockFile1);
      archiveScanner0.scandir(mockFile1, "", true);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile1, "NoEwl7gcW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5749339851963384
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ImprovedFile improvedFile1 = new ImprovedFile("{NoEwl7gcW");
      ImprovedFile improvedFile2 = improvedFile1.createTempDir("{NoEwl7gcW", "{NoEwl7gcW");
      improvedFile0.getAbsolutePath();
      MockFile.createTempFile("tempdir", "", (File) improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile2);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tempdir");
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{NoEwl7gcW";
      improvedFile2.getAbsolutePath();
      stringArray0[1] = "";
      improvedFile1.setExecutable(false, false);
      stringArray0[2] = "{NoEwl7gcW";
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      archiveScanner0.processDirectory(improvedFile0, "narc", false);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ImprovedFile improvedFile0 = new ImprovedFile("NEwl7c", "NEwl7c");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NEwl7c";
      stringArray0[1] = "";
      stringArray0[2] = "NEwl7c";
      archiveScanner0.addDefaultExcludes();
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.includes = stringArray0;
      DirectoryScanner.matchPatternStart("NEwl7c", "");
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(mockFile0, "NEwl7c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", is not one of the child nodes of ");
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-26);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile(", is not one of the child nodes of ");
      FileSystemHandling.setPermissions(evoSuiteFile2, true, true, false);
      byteArray0[6] = (byte) (-26);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      ImprovedFile improvedFile0 = new ImprovedFile("+[-$sC6hpvrJ]@T}VX");
      FileSystemHandling.createFolder(evoSuiteFile1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "+[-$sC6hpvrJ]@T}VX";
      stringArray0[1] = "+[-$sC6hpvrJ]@T}VX";
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesIncluded = vector0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[2] = "+[-$sC6hpvrJ]@T}VX";
      URI uRI0 = MockURI.aHttpURI;
      archiveScanner0.excludes = stringArray0;
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile(", is not one of the child nodes of ");
      FileSystemHandling.createFolder(evoSuiteFile3);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("+[-$sC6hpvrJ]@T}VX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.724298670278112
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "NoEwl7gcW";
      MockFile mockFile0 = new MockFile("");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NoEwl7gcW";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsIncluded = vector0;
      improvedFile0.getCanonicalPath();
      stringArray0[1] = "";
      stringArray0[2] = "NoEwl7gcW";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.includes = stringArray0;
      improvedFile0.getAbsolutePath();
      archiveScanner0.processDirectory(improvedFile0, "NoEwl7gcW", true);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NoE}wl7gcW";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsIncluded = vector0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NoE}wl7gcW");
      improvedFile0.getCanonicalPath();
      stringArray0[1] = "";
      stringArray0[2] = "NoE}wl7gcW";
      archiveScanner0.includes = stringArray0;
      improvedFile0.getAbsolutePath();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockFile0.getCanonicalFile();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(1);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("/home/ubuntu/termite/projects/78_caloriecount");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ImprovedFile improvedFile0 = new ImprovedFile("NEwl7c", "NEwl7c");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NEwl7c";
      stringArray0[1] = "";
      stringArray0[2] = "NEwl7c";
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector0;
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.includes = stringArray0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte) (-15);
      byteArray0[8] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DirectoryScanner.matchPatternStart("NEwl7c", "");
      MockFile mockFile1 = new MockFile("NEwl7c");
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(mockFile1, "NEwl7c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NoEwl7gcW";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsIncluded = vector0;
      improvedFile0.getCanonicalPath();
      stringArray0[1] = "";
      stringArray0[2] = "NoEwl7gcW";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.includes = stringArray0;
      improvedFile0.getAbsolutePath();
      archiveScanner0.processDirectory(improvedFile0, "NoEwl7gcW", false);
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        linkedList0.removeFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2407560846182575
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("NI5n");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.dirsNotIncluded = vector0;
      Integer integer0 = new Integer(2);
      vector0.add(integer0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NI5n";
      stringArray0[1] = "NI5n";
      stringArray0[2] = "NI5n";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.processDirectory(improvedFile0, "Err:r trying to create temp directory in ", true);
      System.setCurrentTimeMillis(1);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) "NI5n");
      Locale locale0 = Locale.ROOT;
      Predicate<Object> predicate1 = Predicate.isEqual((Object) locale0);
      Predicate<Integer> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      Predicate<Object> predicate7 = predicate5.or(predicate3);
      Predicate<Integer> predicate8 = predicate0.and(predicate6);
      predicate1.and(predicate7);
      Predicate.isEqual((Object) predicate0);
      Predicate<Integer> predicate9 = Predicate.isEqual((Object) "NI5n");
      Predicate<Integer> predicate10 = predicate0.and(predicate8);
      Predicate<Integer> predicate11 = predicate10.negate();
      Predicate.isEqual((Object) predicate0);
      predicate9.negate();
      predicate2.and(predicate11);
      predicate2.or(predicate10);
      predicate8.or(predicate3);
      try { 
        archiveScanner0.processDirectory(improvedFile0, "", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/NI5n
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", is not one of the child nodes of ");
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      FileSystemHandling.createFolder(evoSuiteFile1);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-26);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile(", is not one of the child nodes of ");
      FileSystemHandling.setPermissions(evoSuiteFile2, false, false, false);
      byteArray0[6] = (byte) (-26);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      ImprovedFile improvedFile0 = new ImprovedFile("+[-$sC6hpvrJ]@T}VX");
      FileSystemHandling.createFolder(evoSuiteFile1);
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile(", is not one of the child nodes of ");
      FileSystemHandling.appendStringToFile(evoSuiteFile3, ".WAR");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "+[-$sC6hpvrJ]@T}VX";
      EvoSuiteFile evoSuiteFile4 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      stringArray0[1] = "+[-$sC6hpvrJ]@T}VX";
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "+[-$sC6hpvrJ]@T}VX");
      URI uRI0 = MockURI.aHttpURI;
      archiveScanner0.excludes = stringArray0;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile4);
      FileSystemHandling.createFolder(evoSuiteFile2);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "+[-$sC6hpvrJ]@T}VX", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ImprovedFile improvedFile0 = new ImprovedFile("NEwl7c", "NEwl7c");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NEwl7c";
      stringArray0[1] = "";
      stringArray0[2] = "NEwl7c";
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector0;
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.includes = stringArray0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte) (-15);
      byteArray0[8] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NEwl7c");
      MockFile mockFile1 = new MockFile("NEwl7c");
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(mockFile1, "NEwl7c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ImprovedFile improvedFile0 = new ImprovedFile("NEwl7c", "NEwl7c");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      archiveScanner0.excludes = stringArray0;
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsExcluded = vector0;
      stringArray0[0] = "NEwl7c";
      stringArray0[1] = "";
      stringArray0[2] = "NEwl7c";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.includes = stringArray0;
      DirectoryScanner.matchPatternStart("NEwl7c", "");
      MockFile mockFile1 = new MockFile("NEwl7c");
      MockFile.createTempFile(" VKlQR/", "{NoEwl7gcW0{NoEwl7gcW.jar", (File) mockFile0);
      UnaryOperator<InputStream> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      mockFile1.mkdirs();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(mockFile1, "NEwl7c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      mockFile0.renameTo(improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.filesNotIncluded = vector0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NoEwl7gcW";
      stringArray0[1] = "";
      stringArray0[2] = "NoEwl7gcW";
      archiveScanner0.addDefaultExcludes();
      ImprovedFile.rmdir(mockFile0, false);
      archiveScanner0.includes = stringArray0;
      MockFile mockFile1 = new MockFile("");
      mockFile1.setReadable(true, true);
      File file0 = ImprovedFile.createTempFileName("NoEwl7gcW", "NoEwl7gcW", mockFile1);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(file0, "NoEwl7gcW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", is not one of the child nodes of ");
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-26);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile(", is not one of the child nodes of ");
      FileSystemHandling.setPermissions(evoSuiteFile2, false, false, false);
      byteArray0[6] = (byte) (-26);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      ImprovedFile improvedFile0 = new ImprovedFile("+[-$sC6hpvrJ]@T}VX");
      FileSystemHandling.createFolder(evoSuiteFile1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "+[-$sC6hpvrJ]@T}VX";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesNotIncluded = vector0;
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      FileSystemHandling.appendLineToFile(evoSuiteFile3, (String) null);
      stringArray0[1] = "+[-$sC6hpvrJ]@T}VX";
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "+[-$sC6hpvrJ]@T}VX");
      stringArray0[2] = "+[-$sC6hpvrJ]@T}VX";
      URI uRI0 = MockURI.aHttpURI;
      archiveScanner0.excludes = stringArray0;
      FileSystemHandling.appendLineToFile(evoSuiteFile3, ";mYiRUG~M:");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("+[-$sC6hpvrJ]@T}VX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", is not one of the child nodes of ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)7;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "NI5B");
      ImprovedFile improvedFile0 = new ImprovedFile("NI5B");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NI5B";
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "h |n-U1Fz]nO/");
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      FileSystemHandling.appendStringToFile(evoSuiteFile3, "NI5B");
      stringArray0[1] = "NI5B";
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "NI5B");
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsExcluded = vector0;
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "NI5B");
      stringArray0[2] = "NI5B";
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("h |n-U1Fz]nO/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "NI5B");
      ImprovedFile improvedFile0 = new ImprovedFile("NI5B");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NI5B";
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.setPermissions(evoSuiteFile2, false, false, false);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "h |n-U1Fz]nO/");
      stringArray0[1] = "NI5B";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "NI5B");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "NI5B");
      stringArray0[2] = "NI5B";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      archiveScanner0.filesIncluded = vector0;
      vector0.clear();
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("h |n-U1Fz]nO/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("{NoEwl7gcW", "");
      mockFile0.setReadOnly();
      ImprovedFile improvedFile0 = new ImprovedFile("{NoEwl7gcW");
      mockFile0.getAbsolutePath();
      File file0 = improvedFile0.getCanonicalFile();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{NoEwl7gcW";
      improvedFile0.getAbsolutePath();
      stringArray0[1] = "";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      archiveScanner0.haveSlowResults = true;
      vector0.add("tempdir1.jar");
      stringArray0[2] = "{NoEwl7gcW";
      archiveScanner0.includes = stringArray0;
      try { 
        archiveScanner0.processDirectory(file0, "com.lts.application.errors.properties.jar", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/{NoEwl7gcW
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "NI5B");
      ImprovedFile improvedFile0 = new ImprovedFile("NI5B");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NI5B";
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "h |>sU1Fz]nO/");
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector0;
      stringArray0[1] = "NI5B";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "NI5B");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "NI5B");
      stringArray0[2] = "NI5B";
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("h |>sU1Fz]nO/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-26);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile(", is not one of the child nodes of ");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, false);
      byteArray0[6] = (byte) (-26);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ImprovedFile improvedFile0 = new ImprovedFile("+[-$sC6hpvrJ]@T}VX");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "+[-$sC6hpvrJ]@T}VX";
      improvedFile0.delete();
      stringArray0[1] = "+[-$sC6hpvrJ]@T}VX";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[2] = "+[-$sC6hpvrJ]@T}VX";
      URI uRI0 = MockURI.aHttpURI;
      archiveScanner0.excludes = stringArray0;
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile(", is not one of the child nodes of ");
      FileSystemHandling.createFolder(evoSuiteFile2);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      archiveScanner0.dirsIncluded = vector0;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("+[-$sC6hpvrJ]@T}VX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "NI5n";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      ImprovedFile improvedFile0 = new ImprovedFile("");
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file0 = improvedFile0.getCanonicalFile();
      improvedFile0.createTempDir();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NI5n";
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      Vector<SequenceInputStream> vector0 = new Vector<SequenceInputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "h |>sU1Fz]nO/");
      stringArray0[1] = "";
      improvedFile0.basicMakeDirectories(file0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      stringArray0[2] = "NI5n";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "or]bU)9FwOn");
      FileSystemHandling.shouldAllThrowIOExceptions();
      URI uRI0 = MockURI.aHttpURI;
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "NI5n";
      String string1 = "";
      ImprovedFile improvedFile0 = new ImprovedFile("NI5n", "");
      improvedFile0.createTempDir();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector1;
      archiveScanner0.dirsNotIncluded = vector0;
      Integer integer0 = new Integer(2);
      vector0.add(integer0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NI5n";
      stringArray0[1] = "";
      stringArray0[2] = "NI5n";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.processArchive(improvedFile0, "dZ#<|4d<");
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("NigI5n");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setBasedir((File) improvedFile0);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesExcluded = vector0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NigI5n";
      stringArray0[2] = "NigI5n";
      URI uRI0 = MockURI.aHttpURI;
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.includes = stringArray0;
      archiveScanner0.processArchive(improvedFile0, "NigI5n");
      int int0 = ArchiveScanner.FILE;
      archiveScanner0.processFile("NigI5n");
      assertEquals(0, ArchiveScanner.FILE);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", is not one of the child nodes of ");
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      FileSystemHandling.createFolder(evoSuiteFile1);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-26);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile(", is not one of the child nodes of ");
      byteArray0[6] = (byte) (-26);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      ImprovedFile improvedFile0 = new ImprovedFile("+[-$sC6hpvrJ]@T}VX");
      FileSystemHandling.createFolder(evoSuiteFile1);
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile(", is not one of the child nodes of ");
      FileSystemHandling.appendStringToFile(evoSuiteFile3, ".WAR");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "+[-$sC6hpvrJ]@T}VX";
      EvoSuiteFile evoSuiteFile4 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      stringArray0[1] = "+[-$sC6hpvrJ]@T}VX";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsExcluded = vector0;
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "+[-$sC6hpvrJ]@T}VX");
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      URI uRI0 = MockURI.aHttpURI;
      archiveScanner0.excludes = stringArray0;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile4);
      FileSystemHandling.createFolder(evoSuiteFile2);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      archiveScanner0.includes = stringArray0;
      archiveScanner0.processDirectory(improvedFile0, "+[-$sC6hpvrJ]@T}VX", true);
      assertFalse(improvedFile0.isHidden());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.051173630537628
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      MockFile mockFile0 = new MockFile("{NoEwl7gcW", "");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ImprovedFile improvedFile0 = new ImprovedFile("{NoEwl7gcW");
      ImprovedFile improvedFile1 = improvedFile0.createTempDir("{NoEwl7gcW", "{NoEwl7gcW");
      mockFile0.getAbsolutePath();
      MockFile.createTempFile("tempdir", "", (File) mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tempdir");
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{NoEwl7gcW";
      improvedFile1.getAbsolutePath();
      stringArray0[1] = "";
      stringArray0[2] = "{NoEwl7gcW";
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(mockFile0, "narc", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9230105908424855
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      MockFile mockFile0 = new MockFile("{NoEwl7gcW", "");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ImprovedFile improvedFile0 = new ImprovedFile("{NoEwl7gcW");
      ImprovedFile improvedFile1 = improvedFile0.createTempDir("{NoEwl7gcW", "{NoEwl7gcW");
      mockFile0.getAbsolutePath();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte)89;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile.createTempFile("tempdir", "", (File) mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tempdir");
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{NoEwl7gcW";
      improvedFile1.getAbsolutePath();
      stringArray0[1] = "";
      stringArray0[2] = "{NoEwl7gcW";
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "!", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      MockFile mockFile0 = new MockFile("{NoEwl7gcW", "");
      FileSystemHandling.createFolder(evoSuiteFile0);
      mockFile0.setReadOnly();
      ImprovedFile improvedFile0 = new ImprovedFile("{NoEwl7gcW");
      mockFile0.getAbsolutePath();
      improvedFile0.getCanonicalFile();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "8$TSy$7<#IPq@DZ");
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{NoEwl7gcW";
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, true, false);
      improvedFile0.getAbsolutePath();
      stringArray0[1] = "";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      FileSystemHandling.setPermissions(evoSuiteFile1, false, true, true);
      vector0.add("tempdir1.jar");
      stringArray0[2] = "{NoEwl7gcW";
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("53D%KY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2407560846182575
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("NI5n");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.dirsNotIncluded = vector0;
      Integer integer0 = new Integer(2);
      vector0.add(integer0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NI5n";
      stringArray0[1] = "NI5n";
      stringArray0[2] = "NI5n";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.processDirectory(improvedFile0, "Err:r trying to create temp directory in ", true);
      System.setCurrentTimeMillis(1);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) "NI5n");
      Locale locale0 = Locale.US;
      Predicate<Object> predicate1 = Predicate.isEqual((Object) locale0);
      Predicate<Integer> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      Predicate<Object> predicate7 = predicate5.or(predicate3);
      Predicate<Integer> predicate8 = predicate0.and(predicate6);
      predicate1.and(predicate7);
      Predicate.isEqual((Object) predicate0);
      Predicate<Integer> predicate9 = Predicate.isEqual((Object) "NI5n");
      Predicate<Integer> predicate10 = predicate0.and(predicate8);
      Predicate<Integer> predicate11 = predicate10.negate();
      Predicate.isEqual((Object) predicate0);
      Predicate<Integer> predicate12 = predicate9.negate();
      predicate2.and(predicate11);
      predicate12.negate();
      predicate8.or(predicate3);
      try { 
        archiveScanner0.processDirectory(improvedFile0, "", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/NI5n
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8393579695774942
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<String> vector0 = new Vector<String>();
      ArchiveScanner archiveScanner1 = new ArchiveScanner((ImprovedFile) null);
      String string0 = "zs;,0)DQqHuL9#+AN~";
      ImprovedFile improvedFile0 = new ImprovedFile("zs;,0)DQqHuL9#+AN~");
      improvedFile0.basicMakeDirectories((File) null);
      ImprovedFile improvedFile1 = ImprovedFile.createTempImprovedFile("zs;,0)DQqHuL9#+AN~", "zs;,0)DQqHuL9#+AN~", improvedFile0);
      improvedFile1.setExecutable(false);
      improvedFile0.createTempDir("zs;,0)DQqHuL9#+AN~", ".ear.jar");
      // Undeclared exception!
      try { 
        archiveScanner1.scandir(improvedFile0, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.180066384203239
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("NI5n");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.add((Integer) 1);
      archiveScanner0.dirsNotIncluded = vector0;
      vector0.removeAll(archiveScanner0.dirsNotIncluded);
      Integer integer0 = new Integer(2);
      vector0.add(integer0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NI5n";
      stringArray0[1] = "NI5n";
      stringArray0[2] = "NI5n";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.processDirectory(improvedFile0, "Error trying to create temp directory in ", true);
      System.setCurrentTimeMillis(0L);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) "NI5n");
      Locale locale0 = Locale.ROOT;
      Predicate<Object> predicate1 = Predicate.isEqual((Object) locale0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      Predicate<Object> predicate5 = predicate2.and(predicate4);
      Predicate<Object> predicate6 = predicate4.or(predicate2);
      Predicate<Integer> predicate7 = predicate0.and(predicate5);
      Predicate<Integer> predicate8 = Predicate.isEqual((Object) "NI5n");
      predicate0.negate();
      Predicate<Object> predicate9 = Predicate.isEqual((Object) "NI5n");
      Predicate<Object> predicate10 = predicate6.or(predicate9);
      predicate7.or(predicate10);
      predicate8.or(predicate9);
      try { 
        archiveScanner0.processDirectory(improvedFile0, "1dQcrKfR^pdPEP.jar0><JuL:^%e'LI7HB**).jar.jar", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/NI5n
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("NI5n", "i-m_ybf.jar");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      MockFile mockFile0 = new MockFile("r{?_ENI5n", "FAan3FpRj,K<8");
      ImprovedFile improvedFile0 = new ImprovedFile("r{?_ENI5n");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      File file0 = ImprovedFile.createTempFileName("qDn#4@Qx8", "J*9o[9B=", improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(file0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      MockFile mockFile0 = new MockFile("NoEwl7gcW", "");
      mockFile0.toURL();
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0, "NoEwl7gcW");
      ImprovedFile improvedFile1 = new ImprovedFile("a70ecv:Ejc");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(mockFile0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", is not one of the child nodes of /tempdir0");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      MockFile mockFile0 = new MockFile("\"6#<", "B**)");
      mockFile0.toURL();
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0, "ruaM(");
      ImprovedFile improvedFile1 = new ImprovedFile("Vje6[!7%");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      int int0 = archiveScanner0.toFileType(mockFile0);
      //  // Unstable assertion: assertEquals(2, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("Q");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[13];
      stringArray0[0] = "Q";
      stringArray0[8] = "Q";
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      Enumeration<SequenceInputStream> enumeration1 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration1);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream1.read();
      sequenceInputStream2.read();
      sequenceInputStream2.read();
      sequenceInputStream1.markSupported();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream1, (InputStream) null);
      sequenceInputStream2.mark((-1));
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration2);
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(sequenceInputStream2, sequenceInputStream4);
      sequenceInputStream2.close();
      byte[] byteArray0 = new byte[0];
      sequenceInputStream3.read(byteArray0);
      sequenceInputStream0.read();
      Enumeration<SequenceInputStream> enumeration3 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(enumeration3);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(sequenceInputStream2);
      sequenceInputStream2.available();
      sequenceInputStream6.close();
      sequenceInputStream2.skip(1L);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream3);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(sequenceInputStream1);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream7 = new SequenceInputStream(sequenceInputStream2, pushbackInputStream2);
      try { 
        archiveScanner0.scandir(improvedFile0, "b", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/Q
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[13];
      stringArray0[0] = "";
      stringArray0[8] = "";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.includes = stringArray0;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream1.read();
      sequenceInputStream0.read();
      sequenceInputStream0.markSupported();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream0);
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream2);
      sequenceInputStream0.close();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-62);
      sequenceInputStream2.read(byteArray0);
      Enumeration<SequenceInputStream> enumeration3 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration3);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(sequenceInputStream1);
      sequenceInputStream5.skip((byte)45);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream1);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(sequenceInputStream1);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pushbackInputStream0);
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(sequenceInputStream5, bufferedInputStream1);
      sequenceInputStream2.close();
      Enumeration<SequenceInputStream> enumeration4 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream7 = new SequenceInputStream(enumeration4);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[13];
      stringArray0[8] = "";
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      Enumeration<SequenceInputStream> enumeration1 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration1);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream1.read();
      sequenceInputStream2.read();
      sequenceInputStream2.read();
      sequenceInputStream1.markSupported();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream1, (InputStream) null);
      sequenceInputStream2.mark((-1));
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration2);
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(sequenceInputStream2, sequenceInputStream4);
      sequenceInputStream2.close();
      sequenceInputStream0.read();
      Enumeration<SequenceInputStream> enumeration3 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(enumeration3);
      sequenceInputStream6.available();
      SequenceInputStream sequenceInputStream7 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream7);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(sequenceInputStream2);
      sequenceInputStream6.close();
      sequenceInputStream2.available();
      sequenceInputStream6.close();
      sequenceInputStream2.skip(1L);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(sequenceInputStream7);
      SequenceInputStream sequenceInputStream8 = new SequenceInputStream(pushbackInputStream2, sequenceInputStream7);
      sequenceInputStream2.close();
      Enumeration<SequenceInputStream> enumeration4 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream9 = new SequenceInputStream(enumeration4);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[13];
      stringArray0[0] = "";
      stringArray0[1] = "";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.includes = stringArray0;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream0.read();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream0);
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream2);
      sequenceInputStream0.close();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-62);
      sequenceInputStream2.read(byteArray0);
      Enumeration<SequenceInputStream> enumeration3 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration3);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(sequenceInputStream1);
      sequenceInputStream5.skip((byte) (-15));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream1);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(sequenceInputStream1);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pushbackInputStream0);
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(sequenceInputStream5, bufferedInputStream1);
      sequenceInputStream2.close();
      Enumeration<SequenceInputStream> enumeration4 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream7 = new SequenceInputStream(enumeration4);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("5cvQJB]dEe", "5cvQJB]dEe");
      Locale locale0 = Locale.CHINA;
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Vector<Locale> vector1 = new Vector<Locale>();
      Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) vector1);
      Locale locale1 = Locale.PRC;
      Locale locale2 = Locale.CANADA_FRENCH;
      locale1.getDisplayScript(locale2);
      locale2.getUnicodeLocaleKeys();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale3 = Locale.CHINA;
      Locale locale4 = Locale.CANADA_FRENCH;
      Locale locale5 = Locale.CANADA_FRENCH;
      locale1.getDisplayLanguage(locale5);
      locale3.getUnicodeLocaleKeys();
      Locale.setDefault(locale_Category0, locale1);
      Locale locale6 = Locale.CANADA_FRENCH;
      locale1.getDisplayLanguage(locale6);
      Locale locale7 = Locale.ENGLISH;
      locale0.getExtensionKeys();
      locale0.getScript();
      Locale.lookup(vector0, vector1);
      locale0.getDisplayScript((Locale) null);
      Locale locale8 = Locale.CANADA_FRENCH;
      Locale locale9 = Locale.CANADA_FRENCH;
      locale1.getDisplayCountry(locale9);
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category1, locale7);
      Locale locale10 = Locale.CHINA;
      Locale.getISOLanguages();
      Locale locale11 = Locale.CHINA;
      locale10.getDisplayVariant(locale6);
      Locale locale12 = Locale.CANADA_FRENCH;
      locale8.getDisplayScript(locale12);
      Locale locale13 = Locale.CHINA;
      Locale locale14 = Locale.CANADA;
      Locale locale15 = Locale.CANADA_FRENCH;
      locale15.getExtensionKeys();
      locale6.getUnicodeLocaleKeys();
      Vector<String> vector2 = new Vector<String>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFile mockFile0 = new MockFile(", is not one of the child nodes of ", "");
      mockFile0.toURL();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream1);
      sequenceInputStream1.close();
      sequenceInputStream0.markSupported();
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream3);
      bufferedInputStream1.available();
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(bufferedInputStream1);
      bufferedInputStream0.markSupported();
      BufferedInputStream bufferedInputStream4 = new BufferedInputStream(bufferedInputStream3);
      bufferedInputStream4.available();
      BufferedInputStream bufferedInputStream5 = new BufferedInputStream(bufferedInputStream1, 5);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(sequenceInputStream3);
      BufferedInputStream bufferedInputStream6 = new BufferedInputStream(bufferedInputStream0);
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(dataInputStream0, sequenceInputStream1);
      sequenceInputStream1.close();
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(enumeration3);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive(mockFile0, ".jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("NI5n", "NI5n");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Integer integer0 = new Integer(2);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NI5n";
      stringArray0[1] = "NI5n";
      stringArray0[2] = "NI5n";
      archiveScanner0.includes = stringArray0;
      System.setCurrentTimeMillis(0L);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) "NI5n");
      Locale locale0 = Locale.ROOT;
      Predicate<Object> predicate1 = Predicate.isEqual((Object) locale0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      locale0.hasExtensions();
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      Predicate<Object> predicate5 = predicate3.or(predicate4);
      predicate0.and(predicate3);
      Predicate<Integer> predicate6 = Predicate.isEqual((Object) integer0);
      predicate6.negate();
      Predicate<Integer> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate9 = predicate2.or(predicate8);
      predicate2.or(predicate5);
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate10.or(predicate2);
      Predicate<Integer> predicate12 = Predicate.isEqual((Object) null);
      predicate7.negate();
      Predicate<Integer> predicate13 = predicate7.or(predicate12);
      Predicate<Object> predicate14 = Predicate.isEqual((Object) predicate1);
      predicate12.negate();
      predicate5.or(predicate8);
      predicate11.or(predicate4);
      predicate13.or(predicate9);
      predicate12.or(predicate10);
      predicate12.or(predicate14);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.haveSlowResults = false;
      MockFile mockFile0 = new MockFile("{NoEwl7gcW0{NoEwl7gcW.jar", "r{?_ENI5n");
      ArchiveScanner archiveScanner1 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner1.addDefaultExcludes();
      boolean boolean0 = archiveScanner1.isArchive(mockFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("5cvQJB]dEe", "5cvQJB]dEe");
      Locale locale0 = Locale.FRANCE;
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Vector<Locale> vector1 = new Vector<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) vector1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale locale1 = new Locale("5cvQJB]dEe", "5cvQJB]dEe");
      Locale locale2 = Locale.CANADA_FRENCH;
      locale0.getDisplayScript(locale1);
      locale0.getUnicodeLocaleKeys();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale3 = Locale.KOREA;
      Locale locale4 = Locale.CANADA_FRENCH;
      locale1.getDisplayLanguage(locale4);
      locale3.getUnicodeLocaleKeys();
      Locale.setDefault(locale_Category0, locale1);
      Locale locale5 = Locale.CANADA_FRENCH;
      locale1.getDisplayLanguage(locale5);
      Locale locale6 = Locale.GERMAN;
      locale4.getExtensionKeys();
      locale0.getScript();
      Locale.lookup(vector0, list1);
      locale0.getDisplayScript((Locale) null);
      Locale locale7 = Locale.CANADA_FRENCH;
      locale6.getDisplayCountry(locale7);
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category1, locale6);
      Locale locale8 = Locale.CHINA;
      Locale.getISOLanguages();
      Locale locale9 = Locale.CHINA;
      locale8.getDisplayVariant(locale5);
      Locale locale10 = Locale.CANADA_FRENCH;
      locale0.getDisplayScript(locale10);
      Locale locale11 = Locale.CHINA;
      Locale locale12 = Locale.CHINA;
      Locale locale13 = Locale.CANADA_FRENCH;
      locale13.getExtensionKeys();
      locale13.getUnicodeLocaleKeys();
      Vector<String> vector2 = new Vector<String>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }
}
