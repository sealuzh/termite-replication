/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 11:20:11 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.main.FreeMindApplet;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.SystemColor;
import java.awt.dnd.DropTarget;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.DirectColorModel;
import java.awt.image.ImageObserver;
import java.sql.Time;
import java.text.ParsePosition;
import java.time.LocalTime;
import java.util.Date;
import java.util.Locale;
import java.util.Stack;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import javax.swing.AbstractButton;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicEditorPaneUI;
import javax.swing.plaf.basic.BasicPanelUI;
import javax.swing.plaf.basic.BasicRadioButtonUI;
import javax.swing.plaf.metal.MetalSeparatorUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.dom.GenericDocument;
import org.apache.batik.ext.awt.color.ICCColorSpaceExt;
import org.apache.batik.ext.awt.color.NamedProfileCache;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.ImageHandlerJPEGEncoder;
import org.apache.batik.svggen.ImageHandlerPNGEncoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.xalan.processor.ProcessorCharacters;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.dom.DeferredDOMImplementationImpl;
import org.apache.xerces.dom.DeferredDocumentImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xerces.util.SymbolTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.javax.swing.MockDefaultListSelectionModel;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.Session;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.128752027102257
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Font.decode("}I{px\"");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}I{px\"");
      JScrollPane jScrollPane0 = new JScrollPane();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JTableHeader jTableHeader0 = new JTableHeader();
      jDayChooser0.firePropertyChange("4", 0.0, 1032.91690872173);
      jDayChooser0.setDay(40);
      jDayChooser0.setMonth(1141);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-1664));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2026271668515074
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Font font0 = Font.decode("}I{px\"");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      font0.deriveFont(7.1311507F);
      JMenu jMenu0 = new JMenu();
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      JMenu jMenu1 = structuredMenuHolder0.addMenu(jMenu0, "org.apache.xpath.axes.LocPathIterator");
      DirectColorModel directColorModel0 = new DirectColorModel(16, 16, 16, 16, 16);
      JPopupMenu jPopupMenu0 = jMenu1.getPopupMenu();
      jDayChooser0.setComponentPopupMenu(jPopupMenu0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.isDayBordersVisible();
      Locale locale0 = Locale.FRENCH;
      jDayChooser0.setLocale(locale0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.205556586357807
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Windows");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(10013);
      JMenuItem jMenuItem0 = new JMenuItem();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 10013, (-65), (-403), 19, ']', (MenuElement[]) null, menuSelectionManager0);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day");
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jCheckBoxMenuItem0, 160, (-1684L), (-65), 8809, ']', (MenuElement[]) null, menuSelectionManager1);
      MenuKeyEvent menuKeyEvent2 = new MenuKeyEvent(jCheckBoxMenuItem0, 590, (-403), 160, 91, ']', (MenuElement[]) null, menuSelectionManager1);
      KeyEvent.getKeyModifiersText(91);
      jDayChooser0.keyTyped(menuKeyEvent2);
      jDayChooser0.init();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.195454290547241
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getInsets((Insets) null);
      int int0 = JComponent.WHEN_IN_FOCUSED_WINDOW;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.createToolTip();
      jDayChooser0.setMonth(0);
      MapDialog mapDialog0 = new MapDialog();
      mapDialog0.getMindMapController();
      jDayChooser0.isDayBordersVisible();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getDay();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser2.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1772055493004707
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Font font0 = Font.decode("}I{px\"");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      font0.deriveFont(2.54F);
      JMenu jMenu0 = new JMenu("}I{px\"", false);
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      JMenu jMenu1 = structuredMenuHolder0.addMenu(jMenu0, "org.apache.xpath.axes.LocPathIterator");
      jMenu0.getColorModel();
      JPopupMenu jPopupMenu0 = jMenu1.getPopupMenu();
      jDayChooser0.setComponentPopupMenu(jPopupMenu0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      structuredMenuHolder0.addMenuItem(jMenu1, "org.apache.xpath.axes.LocPathIterator");
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.addListeners(16);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.205545172787071
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = JComponent.WHEN_IN_FOCUSED_WINDOW;
      jDayChooser0.createToolTip();
      jDayChooser0.setMonth(0);
      MapDialog mapDialog0 = new MapDialog();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.paint((Graphics) null);
      jDayChooser0.setMaxDayCharacters(0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2055099842350803
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMenu jMenu0 = new JMenu();
      jMenu0.isFocusPainted();
      JPopupMenu jPopupMenu0 = new JPopupMenu("day");
      jDayChooser0.requestFocus(false);
      jDayChooser0.setComponentPopupMenu(jPopupMenu0);
      jDayChooser0.setMonth((-1428));
      JButton jButton0 = new JButton();
      jDayChooser0.setName("VPJ]u1GkjD=j8V");
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 2, "W]ZuG^Bo0hMec", (-4451));
      jDayChooser0.drawWeeks();
      jDayChooser0.getSelectedDay();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.23080938526805
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getFocusTraversalPolicy();
      jDayChooser0.firePropertyChange("Windows", 394L, 394L);
      BasicRadioButtonUI basicRadioButtonUI0 = new BasicRadioButtonUI();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      jCheckBoxMenuItem0.requestFocus(false);
      Dimension dimension0 = basicRadioButtonUI0.getMaximumSize(jCheckBoxMenuItem0);
      jDayChooser0.getSize(dimension0);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.getDay();
      Date date0 = null;
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Windows");
      jDayChooser0.setRequestFocusEnabled(false);
      jDayChooser0.getDecorationBackgroundColor();
      Color color0 = jDayChooser0.getSundayForeground();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        color0.getRGBColorComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1647537927513762
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextSelectionColor();
      jDayChooser0.firePropertyChange("UQBVOT>xVwE1", (short) (-944), (short) (-944));
      jDayChooser0.setSundayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(44);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0540989150393463
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Font.decode("}I{px\"");
      Stack<MockGregorianCalendar> stack0 = new Stack<MockGregorianCalendar>();
      JTree jTree0 = new JTree(stack0);
      Dimension dimension0 = jTree0.getPreferredScrollableViewportSize();
      jDayChooser0.setPreferredSize(dimension0);
      JScrollPane jScrollPane0 = new JScrollPane();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(0);
      jMonthChooser0.scrollRectToVisible(rectangle0);
      jScrollPane0.getViewportBorderBounds();
      jDayChooser0.firePropertyChange("}I{px\"", (-427.8394250113), 1063.337);
      jDayChooser0.setDay((-1752));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1700536362046745
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-1149));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = jDayChooser0.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent(object0, 46, "W]ZuG^Bo0hMec", 46);
      actionEvent0.paramString();
      JButton jButton0 = new JButton();
      ActionEvent actionEvent1 = new ActionEvent("unknown type,cmd=W]ZuG^Bo0hMec,when=0,modifiers=Meta+Ctrl+Alt+Alt Graph", 2506, "W]ZuG^Bo0hMec", 0);
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      actionEvent1.paramString();
      jDayChooser0.setUI(basicPanelUI0);
      jDayChooser0.getClientProperty(actionEvent1);
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.2358503374208434
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getInsets((Insets) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      LocalTime localTime0 = MockLocalTime.of(0, 0);
      Time.valueOf(localTime0);
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMinSelectableDate(date0);
      Locale locale0 = Locale.GERMANY;
      jDayChooser0.setDecorationBordersVisible(true);
      Locale locale1 = Locale.GERMANY;
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2217157976624433
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange("", (byte) (-65), (byte) (-1));
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      float[] floatArray0 = new float[9];
      floatArray0[0] = 76.0F;
      floatArray0[1] = (float) (byte) (-65);
      floatArray0[3] = 5961.292F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 76.0F;
      floatArray0[8] = (-1.0F);
      color0.getRGBComponents(floatArray0);
      jDayChooser0.setMaxDayCharacters((-519));
      jDayChooser0.getClientProperty(jMonthChooser0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.VERTICAL_ORIENTATION;
      // Undeclared exception!
      try { 
        jDayChooser0.putClientProperty((Object) null, gVTAttributedCharacterIterator_TextAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.150964732980717
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JMenu jMenu0 = new JMenu();
      jMenu0.isFocusPainted();
      jMenu0.getPopupMenu();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1867270210280028
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Stack<MockGregorianCalendar> stack0 = new Stack<MockGregorianCalendar>();
      JTree jTree0 = new JTree(stack0);
      Dimension dimension0 = jTree0.getPreferredScrollableViewportSize();
      jDayChooser0.setSize(dimension0);
      jDayChooser0.setPreferredSize(dimension0);
      JScrollPane jScrollPane0 = new JScrollPane();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "day");
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(0);
      jMonthChooser0.scrollRectToVisible(rectangle0);
      jDayChooser0.monthChooser = jMonthChooser0;
      jScrollPane0.getViewportBorderBounds();
      jDayChooser0.firePropertyChange("28", (double) 0, 2164.0);
      jDayChooser0.setMaxDayCharacters((-1225));
      jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.230924426970667
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.add(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove(hierarchyBoundsListener2, hierarchyBoundsListener2);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getInsets((Insets) null);
      jYearChooser0.removeHierarchyBoundsListener(hierarchyBoundsListener2);
      LocalTime localTime0 = MockLocalTime.of(0, 0, 18, 8);
      Time.valueOf(localTime0);
      BasicEditorPaneUI basicEditorPaneUI0 = new BasicEditorPaneUI();
      JYearChooser jYearChooser1 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setMaxDayCharacters(14);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis((-120L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSundayForeground();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(2, 2, false);
      jDayChooser0.getActionForKeyStroke(keyStroke0);
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getFreeMindMapController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getSelectedDay();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.205497927762563
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(8927);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 8927, "&5[I1?i<G}TW*k");
      actionEvent0.setSource("day");
      jDayChooser0.isWeekOfYearVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.133789948455545
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-1149));
      Object object0 = jDayChooser0.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent(object0, 46, "W]ZuG^Bo0hMec");
      actionEvent0.paramString();
      JButton jButton0 = new JButton();
      ActionEvent actionEvent1 = new ActionEvent("unknown type,cmd=W]ZuG^Bo0hMec,when=0,modifiers=", 2506, "W]ZuG^Bo0hMec", 0);
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      jDayChooser0.setUI(basicPanelUI0);
      Object object1 = new Object();
      actionEvent0.setSource(object1);
      jDayChooser0.firePropertyChange("unknown type,cmd=W]ZuG^Bo0hMec,when=0,modifiers=", 2151.9013860902724, 0.0);
      jDayChooser0.setDay(14);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Font font0 = Font.decode("}I{px\"");
      font0.deriveFont(2590.9387F);
      jDayChooser0.setFocusCycleRoot(false);
      jDayChooser0.setFont(font0);
      Color color0 = Color.YELLOW;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.getSelectedDay();
      NamedProfileCache namedProfileCache0 = NamedProfileCache.getDefaultCache();
      String string0 = "uqb1!?0.";
      // Undeclared exception!
      try { 
        namedProfileCache0.request("\n/ItalicAngle ");
        fail("Expecting exception: ThreadDeath");
      
      } catch(ThreadDeath e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1700300170400846
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(8927);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 8927, "&5[I1?i<G}TW*k");
      jDayChooser0.getMinSelectableDate();
      boolean boolean0 = false;
      jDayChooser0.setDecorationBackgroundVisible(false);
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: day
         //
         verifyException("java.util.Locale", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.control;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2719553068132297
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(10013);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1041, (-65), (-403), 19, ']', (MenuElement[]) null, menuSelectionManager0);
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem("day");
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jCheckBoxMenuItem1, 160, (-1684L), (-65), 8809, ']', (MenuElement[]) null, menuSelectionManager1);
      jDayChooser0.isDayBordersVisible();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.keyPressed(menuKeyEvent1);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.205435033889684
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.isOptimizedDrawingEnabled();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getDecorationBackgroundColor();
      boolean boolean1 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean1 == boolean0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.235799669234131
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.isDecorationBordersVisible();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      ImageHandlerPNGEncoder imageHandlerPNGEncoder0 = null;
      try {
        imageHandlerPNGEncoder0 = new ImageHandlerPNGEncoder("bO_rZ>F~m}guXx", "28");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // imageDir does not exist
         //
         verifyException("org.apache.batik.svggen.AbstractImageHandlerEncoder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.332835535797459
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      jYearChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.isDecorationBordersVisible();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "year";
      stringArray0[1] = "month";
      stringArray0[2] = "";
      stringArray0[3] = "month";
      stringArray0[4] = "day";
      stringArray0[5] = "month";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1700989912782065
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Windows");
      JDayChooser jDayChooser0 = new JDayChooser();
      MetalSeparatorUI metalSeparatorUI0 = new MetalSeparatorUI();
      JScrollPane jScrollPane0 = new JScrollPane();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      jDayChooser0.firePropertyChange("Windows", 8.0, (double) 1385);
      jDayChooser0.computeVisibleRect(rectangle0);
      jDayChooser0.setYear(49);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.updateUI();
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      processorCharacters0.getParentElem();
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D((Document) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // domFactory should not be null
         //
         verifyException("org.apache.batik.svggen.SVGGeneratorContext", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.208373428691749
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Font font0 = Font.decode("}I{px\"");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      font0.deriveFont(2.54F);
      JMenu jMenu0 = new JMenu("}I{px\"", false);
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      JMenu jMenu1 = structuredMenuHolder0.addMenu(jMenu0, "org.apache.xpath.axes.LocPathIterator");
      jMenu0.getColorModel();
      JPopupMenu jPopupMenu0 = jMenu1.getPopupMenu();
      jDayChooser0.setComponentPopupMenu(jPopupMenu0);
      KeyEvent keyEvent0 = new KeyEvent(jMenu1, 100, 1L, 2, 2, 'q');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMonth(164);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.0918164583074423
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Stack<MockGregorianCalendar> stack0 = new Stack<MockGregorianCalendar>();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "V");
      JTree jTree0 = new JTree(stack0);
      Dimension dimension0 = jTree0.getPreferredScrollableViewportSize();
      jDayChooser0.setSize(dimension0);
      jDayChooser0.setPreferredSize(dimension0);
      JScrollPane jScrollPane0 = new JScrollPane();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(0);
      jMonthChooser0.scrollRectToVisible(rectangle0);
      jDayChooser0.monthChooser = jMonthChooser0;
      jScrollPane0.getViewportBorderBounds();
      jDayChooser0.firePropertyChange("28", (double) 0, 2164.0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-3));
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2054607286107037
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getMaxSelectableDate();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      SymbolTable symbolTable0 = new SymbolTable();
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = 'k';
      charArray0[2] = 'I';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, (-2142), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2142
         //
         verifyException("org.apache.xerces.util.SymbolTable", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2403768213760413
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getInsets((Insets) null);
      jYearChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      LocalTime localTime0 = MockLocalTime.of(18, 0);
      Time.valueOf(localTime0);
      BasicEditorPaneUI basicEditorPaneUI0 = new BasicEditorPaneUI();
      JYearChooser jYearChooser1 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getDay();
      jDayChooser0.setMonth(14);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1336666818916004
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addComponentListener((ComponentListener) null);
      int int0 = 757;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 757, false, jDayChooser0);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.initDecorations();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "day";
      stringArray0[1] = "center";
      stringArray0[2] = "day";
      stringArray0[3] = "";
      stringArray0[4] = "day";
      // Undeclared exception!
      try { 
        HsqlProperties.argArrayToProps(stringArray0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = null;
      jDayChooser0.setMaxSelectableDate((Date) null);
      MenuElement[] menuElementArray0 = new MenuElement[5];
      boolean boolean0 = false;
      JMenuBar jMenuBar0 = new JMenuBar();
      jMenuBar0.getMenu(0);
      menuElementArray0[1] = (MenuElement) null;
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getFreeMindMapController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1962795130893347
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Stack<MockGregorianCalendar> stack0 = new Stack<MockGregorianCalendar>();
      JTree jTree0 = new JTree(stack0);
      Dimension dimension0 = jDayChooser0.getPreferredSize();
      jDayChooser0.setSize(dimension0);
      jDayChooser0.setPreferredSize(dimension0);
      JScrollPane jScrollPane0 = new JScrollPane();
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      Time time0 = new Time(0L);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      mockSimpleDateFormat0.setLenient(true);
      ParsePosition parsePosition0 = new ParsePosition((-2708));
      Date date1 = jDayChooser0.setMaxSelectableDate(time0);
      jDayChooser0.setSelectableDateRange(date1, date0);
      Locale locale0 = new Locale("day", "day", "day");
      Locale locale1 = Locale.KOREAN;
      locale0.getDisplayScript(locale1);
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(deferredDocumentImpl0, "");
      DOMImplementation dOMImplementation0 = DeferredDOMImplementationImpl.getDOMImplementation();
      DeferredDOMImplementationImpl.getDOMImplementation();
      GenericDocument genericDocument0 = null;
      try {
        genericDocument0 = new GenericDocument(documentTypeImpl0, dOMImplementation0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // The given node (type: 9, name: #document) was not created by the current document.
         //
         verifyException("org.apache.batik.dom.AbstractNode", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.114399273529393
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JMenu jMenu0 = new JMenu("day", true);
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      jDayChooser0.setComponentPopupMenu(jPopupMenu0);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0867714255174215
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JMenu jMenu0 = new JMenu();
      jMenu0.isFocusPainted();
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      jDayChooser0.requestFocus(false);
      jDayChooser0.setComponentPopupMenu(jPopupMenu0);
      ActionEvent actionEvent0 = new ActionEvent(jMenu0, (-288), "Metal");
      actionEvent0.paramString();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "day");
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setDay(27);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      Locale locale0 = jMonthChooser0.getLocale();
      jDayChooser0.setLocale(locale0);
      assertEquals(27, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.205545172787071
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Windows");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(10013);
      JMenuItem jMenuItem0 = new JMenuItem();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      int int0 = (-403);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1041, (-65), (-403), 19, ']', (MenuElement[]) null, menuSelectionManager0);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day");
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jCheckBoxMenuItem0, 160, (-1684L), (-65), 8809, ']', (MenuElement[]) null, menuSelectionManager1);
      MenuKeyEvent menuKeyEvent2 = new MenuKeyEvent(jCheckBoxMenuItem0, 590, (-403), 12, 91, ']', (MenuElement[]) null, menuSelectionManager1);
      KeyEvent.getKeyModifiersText(91);
      jDayChooser0.keyTyped(menuKeyEvent2);
      jDayChooser0.init();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Stack<MockGregorianCalendar> stack0 = new Stack<MockGregorianCalendar>();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      stack0.add(mockGregorianCalendar1);
      JTree jTree0 = new JTree(stack0);
      jTree0.getPreferredScrollableViewportSize();
      JScrollPane jScrollPane0 = new JScrollPane();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JTableHeader jTableHeader0 = new JTableHeader();
      jScrollPane0.getViewportBorderBounds();
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1700536362046745
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-1149));
      Object object0 = jDayChooser0.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent(object0, 46, "W]ZuG^Bo0hMec");
      actionEvent0.paramString();
      JButton jButton0 = new JButton();
      ActionEvent actionEvent1 = new ActionEvent("unknown type,cmd=W]ZuG^Bo0hMec,when=0,modifiers=", 2506, "W]ZuG^Bo0hMec", 0);
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      jDayChooser0.setUI(basicPanelUI0);
      Object object1 = new Object();
      actionEvent0.setSource(object1);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.3011316640791537
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.isValidateRoot();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 11, false);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.firePropertyChange("accessories.plugins.time.JDayChooser$1", (short)384, (short)384);
      jDayChooser0.setEnabled(false);
      GenericDOMImplementation genericDOMImplementation0 = new GenericDOMImplementation();
      // Undeclared exception!
      try { 
        genericDOMImplementation0.createDocumentType("day", "Windows", "");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Doctype not supported
         //
         verifyException("org.apache.batik.dom.GenericDOMImplementation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.0927107656466806
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Stack<MockGregorianCalendar> stack0 = new Stack<MockGregorianCalendar>();
      JTree jTree0 = new JTree(stack0);
      Dimension dimension0 = jTree0.getPreferredScrollableViewportSize();
      jDayChooser0.setSize(dimension0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setPreferredSize(dimension0);
      JScrollPane jScrollPane0 = new JScrollPane();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "jn#Q~c>G)5p}1/>");
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(320);
      jMonthChooser0.scrollRectToVisible(rectangle0);
      jScrollPane0.getViewportBorderBounds();
      jDayChooser1.firePropertyChange("month", (double) 0, 0.0);
      jDayChooser1.setDay(0);
      JButton jButton0 = new JButton();
      jDayChooser1.drawDays();
      assertEquals(1, jDayChooser1.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFocusListeners();
      jDayChooser0.setWeekOfYearVisible(false);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 5961.292F;
      floatArray0[2] = 76.0F;
      floatArray0[3] = (-2165.3667F);
      Color.getColor("day", color0);
      floatArray0[4] = 0.0F;
      color0.getRGBComponents(floatArray0);
      // Undeclared exception!
      try { 
        jDayChooser0.putClientProperty((Object) null, color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.151852355939681
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = (-1);
      jDayChooser0.createImage((-1), (-1));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setWeekOfYearVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getHierarchyListeners();
      jDayChooser0.addFocusListener(jDayChooser1);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      MockDefaultListSelectionModel mockDefaultListSelectionModel0 = new MockDefaultListSelectionModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0, mockDefaultListSelectionModel0);
      jTable0.getTableHeader();
      int int1 = 0;
      int int2 = 14;
      DropTarget dropTarget0 = null;
      try {
        dropTarget0 = new DropTarget();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DropTarget", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1552669390312125
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Stack<MockGregorianCalendar> stack0 = new Stack<MockGregorianCalendar>();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "9");
      JDayChooser jDayChooser1 = new JDayChooser();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setMonth(2714);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser1, 20, "day");
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll();
      actionEvent0.setSource((Object) null);
      assertEquals(14, jDayChooser1.getDay());
      
      String string0 = AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "10");
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser1.setDay(3929);
      jDayChooser1.getSelectedDay();
      assertEquals(28, jDayChooser1.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.2054607286107037
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.isValidateRoot();
      jDayChooser0.hasFocus();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 11, false);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getSelectedDay();
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getInsets((Insets) null);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener3 = AWTEventMulticaster.add(hierarchyBoundsListener2, hierarchyBoundsListener2);
      jYearChooser0.removeHierarchyBoundsListener(hierarchyBoundsListener3);
      LocalTime localTime0 = MockLocalTime.of(0, 18);
      Time.valueOf(localTime0);
      BasicEditorPaneUI basicEditorPaneUI0 = new BasicEditorPaneUI();
      JYearChooser jYearChooser1 = new JYearChooser();
      jDayChooser0.firePropertyChange("", (-1542.273143503161), 1419.2267157066485);
      jDayChooser0.setDay(11);
      assertEquals(11, jDayChooser0.getDay());
  }
}
