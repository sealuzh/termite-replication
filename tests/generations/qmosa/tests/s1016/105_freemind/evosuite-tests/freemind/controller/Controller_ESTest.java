/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 11:55:19 GMT 2019
 */

package freemind.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import freemind.controller.Controller;
import freemind.controller.MapModuleManager;
import freemind.main.FreeMindMain;
import freemind.modes.filemode.FileMode;
import freemind.modes.schememode.SchemeMode;
import freemind.preferences.FreemindPropertyListener;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ComponentEvent;
import java.awt.event.WindowEvent;
import java.util.HashSet;
import java.util.Locale;
import java.util.Vector;
import javax.swing.JColorChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.ListSelectionModel;
import javax.swing.plaf.multi.MultiMenuBarUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.TreeNode;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.css.engine.CSSContext;
import org.apache.batik.css.engine.value.ShorthandManager;
import org.apache.batik.css.engine.value.ValueManager;
import org.apache.batik.css.engine.value.css2.FontShorthandManager;
import org.apache.batik.css.engine.value.svg.MarkerShorthandManager;
import org.apache.batik.css.engine.value.svg.MaskManager;
import org.apache.batik.css.engine.value.svg12.MarginShorthandManager;
import org.apache.batik.css.parser.ExtendedParser;
import org.apache.batik.css.parser.Parser;
import org.apache.batik.dom.AbstractStylableDocument;
import org.apache.batik.dom.svg.SVGOMDocument;
import org.apache.batik.dom.svg12.SVG12DOMImplementation;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.DocumentType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Controller_ESTest extends Controller_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileMode fileMode0 = new FileMode();
      fileMode0.getController();
      Controller.addPropertyChangeListener((FreemindPropertyListener) null);
      JTree jTree0 = new JTree((TreeNode) null);
      MultiMenuBarUI multiMenuBarUI0 = new MultiMenuBarUI();
      Rectangle rectangle0 = jTree0.getRowBounds(598);
      assertNull(rectangle0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        Controller.addPropertyChangeListenerAndPropagate((FreemindPropertyListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ComponentEvent componentEvent0 = null;
      Controller.DisposeOnClose controller_DisposeOnClose0 = new Controller.DisposeOnClose();
      ComponentEvent componentEvent1 = null;
      controller_DisposeOnClose0.componentShown((ComponentEvent) null);
      // Undeclared exception!
      try { 
        controller_DisposeOnClose0.componentHidden((ComponentEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$DisposeOnClose", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Controller.Closer controller_Closer0 = new Controller.Closer();
      // Undeclared exception!
      try { 
        controller_Closer0.windowClosing((WindowEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$Closer", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JSlider jSlider0 = new JSlider();
      MapModuleManager.MapTitleChangeListener mapModuleManager_MapTitleChangeListener0 = mock(MapModuleManager.MapTitleChangeListener.class, new ViolatedAssumptionAnswer());
      JColorChooser jColorChooser0 = Controller.getCommonJColorChooser();
      assertFalse(jColorChooser0.isFocusCycleRoot());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FileMode fileMode0 = new FileMode();
      fileMode0.getController();
      Controller.CloseAction controller_CloseAction0 = null;
      try {
        controller_CloseAction0 = new Controller.CloseAction((Controller) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$CloseAction", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Controller.getPropertyChangeListeners();
      Controller.Closer controller_Closer0 = new Controller.Closer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e4lG\"adH:Dz081l");
      JOptionPane jOptionPane0 = new JOptionPane();
      try { 
        jOptionPane0.createDialog("e4lG\"adH:Dz081l");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Controller.Closer controller_Closer0 = new Controller.Closer();
      Locale locale0 = Locale.ITALY;
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      JTree jTree0 = new JTree((Object[]) null);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SystemColor systemColor0 = SystemColor.infoText;
      SchemeMode schemeMode0 = new SchemeMode();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      SVGOMDocument sVGOMDocument0 = new SVGOMDocument((DocumentType) null, sVG12DOMImplementation0);
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, documentLoader0);
      Parser parser0 = new Parser();
      ValueManager[] valueManagerArray0 = new ValueManager[1];
      MaskManager maskManager0 = new MaskManager();
      valueManagerArray0[0] = (ValueManager) maskManager0;
      ShorthandManager[] shorthandManagerArray0 = new ShorthandManager[9];
      MarkerShorthandManager markerShorthandManager0 = new MarkerShorthandManager();
      shorthandManagerArray0[0] = (ShorthandManager) markerShorthandManager0;
      MarkerShorthandManager markerShorthandManager1 = new MarkerShorthandManager();
      shorthandManagerArray0[1] = (ShorthandManager) markerShorthandManager1;
      FontShorthandManager fontShorthandManager0 = new FontShorthandManager();
      shorthandManagerArray0[2] = (ShorthandManager) fontShorthandManager0;
      MarginShorthandManager marginShorthandManager0 = new MarginShorthandManager();
      shorthandManagerArray0[3] = (ShorthandManager) marginShorthandManager0;
      MarginShorthandManager marginShorthandManager1 = new MarginShorthandManager();
      shorthandManagerArray0[4] = (ShorthandManager) marginShorthandManager1;
      MarginShorthandManager marginShorthandManager2 = new MarginShorthandManager();
      shorthandManagerArray0[5] = (ShorthandManager) marginShorthandManager2;
      MarkerShorthandManager markerShorthandManager2 = new MarkerShorthandManager();
      shorthandManagerArray0[6] = (ShorthandManager) markerShorthandManager2;
      MarginShorthandManager marginShorthandManager3 = new MarginShorthandManager();
      shorthandManagerArray0[7] = (ShorthandManager) marginShorthandManager3;
      MarginShorthandManager marginShorthandManager4 = new MarginShorthandManager();
      shorthandManagerArray0[8] = (ShorthandManager) marginShorthandManager4;
      sVG12DOMImplementation0.createCSSEngine((AbstractStylableDocument) sVGOMDocument0, (CSSContext) bridgeContext0, (ExtendedParser) parser0, valueManagerArray0, shorthandManagerArray0);
      JList<JColorChooser> jList0 = new JList<JColorChooser>((Vector<? extends JColorChooser>) null);
      ListSelectionModel listSelectionModel0 = jList0.getSelectionModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0, listSelectionModel0);
      Color color0 = jTable0.getSelectionForeground();
      try { 
        Controller.showCommonJColorChooserDialog(jTree0, "http://www.w3.org/2000/svg", color0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Controller controller0 = null;
      try {
        controller0 = new Controller((FreeMindMain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }
}
