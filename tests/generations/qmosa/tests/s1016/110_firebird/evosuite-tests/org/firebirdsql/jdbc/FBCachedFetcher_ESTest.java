/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 12:21:53 GMT 2019
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.time.DateTimeException;
import java.time.ZoneOffset;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TimeUnit;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.gds.IscDbHandle;
import org.firebirdsql.gds.XSQLDA;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.AbstractIscTrHandle;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.jni.LocalGDSImpl;
import org.firebirdsql.gds.impl.jni.isc_blob_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_db_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_tr_handle_impl;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.jca.FBConnectionRequestInfo;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.DummyCallableStatementMetaData;
import org.firebirdsql.jdbc.FBCachedBlob;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.firebirdsql.jdbc.field.FBCachedLongVarCharField;
import org.firebirdsql.jdbc.field.FBLongVarCharField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0534513741947142
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte)0;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.removeRows();
      XSQLDA xSQLDA0 = new XSQLDA((byte)0);
      isc_stmt_handle_impl0.setExecutionPlan("org.firebirdsql.gds.XSQLDA");
      isc_stmt_handle_impl0.getRsr_rdb();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl1.setRsr_rdb((isc_db_handle_impl) null);
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl2 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      isc_stmt_handle_impl2.getTransaction();
      isc_stmt_handle_impl1.registerTransaction((AbstractIscTrHandle) null);
      isc_stmt_handle_impl1.removeRows();
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      isc_stmt_handle_impl0.clearRows();
      FBCachedFetcher fBCachedFetcher1 = null;
      try {
        fBCachedFetcher1 = new FBCachedFetcher((GDSHelper) null, 2, 1, isc_stmt_handle_impl0, fBResultSet0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      XSQLDA xSQLDA0 = new XSQLDA(400);
      isc_stmt_handle_impl1.setOutSqlda(xSQLDA0);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((GDSHelper) null, 400, 2415, isc_stmt_handle_impl1, (FBObjectListener.FetcherListener) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.field.FBField", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.95219922208845
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      byte[] byteArray0 = new byte[12];
      byteArray0[2] = (byte) (-20);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-4);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.absolute((byte) (-4));
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.next();
      fBCachedFetcher0.first();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.absolute(1);
      Integer integer0 = new Integer((byte) (-4));
      int int0 = fBCachedFetcher0.getRowNum();
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      FBCachedFetcher fBCachedFetcher2 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher2.previous();
      fBCachedFetcher2.relative((byte) (-20));
      fBCachedFetcher2.relative(1);
      fBCachedFetcher2.last();
      fBCachedFetcher0.absolute(2141);
      Integer integer1 = new Integer((byte) (-20));
      assertFalse(integer1.equals((Object)int0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6890075613066817
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][0];
      byte[] byteArray1 = new byte[5];
      byteArray1[2] = (byte)26;
      linkedList0.add(byteArray0);
      byteArray1[3] = (byte)49;
      byteArray0[0] = byteArray1;
      byteArray1[0] = (byte) (-9);
      byte[] byteArray2 = new byte[12];
      byteArray2[1] = (byte) (-4);
      byteArray2[2] = (byte) (-9);
      byteArray0[2] = byteArray2;
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-4);
      byteArray0[3] = byteArray3;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.next();
      fBCachedFetcher0.close();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.getRowNum();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow((byte[][]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.475855659123725
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][0];
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      byte[] byteArray1 = new byte[5];
      byteArray1[2] = (byte)26;
      linkedList0.add(byteArray0);
      byteArray1[3] = (byte)49;
      byteArray0[0] = byteArray1;
      byteArray1[0] = (byte) (-9);
      byte[] byteArray2 = new byte[12];
      byteArray2[1] = (byte) (-4);
      byteArray2[2] = (byte) (-9);
      byteArray0[2] = byteArray2;
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-4);
      byteArray0[3] = byteArray3;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.next();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.insertRow((byte[][]) null);
      System.setCurrentTimeMillis(127L);
      System.setCurrentTimeMillis((byte)26);
      boolean boolean0 = fBCachedFetcher0.next();
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4618898753506664
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[] byteArray0 = new byte[12];
      byte byte0 = (byte)26;
      byteArray0[3] = (byte)26;
      byte[][] byteArray1 = new byte[10][4];
      linkedList0.add(byteArray1);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      int int0 = (-2715);
      fBCachedFetcher0.setFetchSize((-2715));
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.previous();
      GDSHelper gDSHelper0 = null;
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      String string0 = "";
      // Undeclared exception!
      try { 
        ZoneOffset.ofHours(1054);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value 1054 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.097878170750067
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][0];
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1780));
      Integer.getInteger("JD?`oZf[&UwYuU'n1", 100);
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      Integer integer1 = new Integer((byte)49);
      linkedBlockingQueue0.add(integer1);
      Integer.getInteger("JD?`oZf[&UwYuU'n1");
      Integer.compareUnsigned((-1), 2626);
      Integer integer2 = new Integer(2626);
      linkedBlockingQueue0.add(integer2);
      Integer integer3 = new Integer(2626);
      Integer integer4 = new Integer(2626);
      linkedBlockingQueue0.add(integer0);
      Integer.sum((-2062), 478);
      Integer integer5 = new Integer(478);
      Integer integer6 = new Integer(3518);
      linkedBlockingQueue0.add(integer6);
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.last();
      System.setCurrentTimeMillis(478);
      boolean boolean0 = fBCachedFetcher0.absolute(1);
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBResultSet0.getRow());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5999759551760455
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][0];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-9);
      byteArray1[2] = (byte)26;
      byteArray1[3] = (byte)49;
      byteArray1[4] = (byte)16;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[2];
      byteArray1[0] = (byte) (-9);
      byteArray2[1] = (byte) (-9);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[12];
      byteArray3[1] = (byte) (-9);
      linkedList0.addLast(byteArray0);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte) (-9);
      byteArray0[3] = byteArray4;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.first();
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher1.previous();
      fBCachedFetcher1.absolute((byte)16);
      fBCachedFetcher1.isEmpty();
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher1.isEmpty();
      fBCachedFetcher1.previous();
      System.setCurrentTimeMillis((byte)49);
      System.setCurrentTimeMillis((byte) (-9));
      fBCachedFetcher0.next();
      System.setCurrentTimeMillis((byte) (-9));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3577550659117574
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][0];
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      byte[] byteArray1 = new byte[18];
      byteArray1[1] = (byte) (-4);
      byteArray0[2] = byteArray1;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-4);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      char[] charArray0 = new char[0];
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.501064736832538
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][0];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-9);
      byteArray1[1] = (byte) (-4);
      byteArray1[2] = (byte)26;
      byteArray1[3] = (byte)49;
      byteArray1[4] = (byte)16;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-9);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[12];
      byteArray3[1] = (byte) (-4);
      byteArray3[2] = (byte) (-9);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte) (-4);
      byteArray0[3] = byteArray4;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.setFetchSize((byte)49);
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.next();
      fBCachedFetcher0.insertRow(byteArray0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.995295628324261
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer integer0 = new Integer((byte)49);
      Integer integer1 = new Integer((byte)49);
      Integer integer2 = new Integer((byte)49);
      Integer.min((byte)49, 73);
      Integer integer3 = new Integer((byte)49);
      Integer.min((-3470), (byte)49);
      Integer integer4 = new Integer(2629);
      Integer integer5 = new Integer(2629);
      Integer integer6 = Integer.getInteger("", integer4);
      Integer.getInteger("");
      Integer.sum((-3470), (-2));
      Integer.compare(100, 100);
      Integer.compare(73, (-3470));
      Integer.compareUnsigned((-3472), 2629);
      Integer.min((byte)49, 0);
      Integer integer7 = new Integer((byte)49);
      linkedList0.removeLastOccurrence(integer6);
      Integer integer8 = new Integer(49);
      Integer integer9 = new Integer(2629);
      byte[][] byteArray0 = new byte[5][1];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)49;
      byteArray1[1] = (byte)49;
      byteArray1[2] = (byte)49;
      byteArray1[3] = (byte)49;
      byteArray1[4] = (byte)49;
      byteArray1[5] = (byte)49;
      byteArray1[6] = (byte)49;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)49;
      byteArray3[1] = (byte)49;
      byteArray3[2] = (byte)49;
      byteArray3[3] = (byte)49;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte)49;
      byteArray4[1] = (byte)100;
      byteArray4[2] = (byte)49;
      byteArray4[3] = (byte)49;
      byteArray4[4] = (byte)49;
      byteArray4[5] = (byte)49;
      byteArray4[6] = (byte)95;
      byteArray4[7] = (byte)49;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[7];
      byteArray5[0] = (byte)49;
      byteArray5[1] = (byte)49;
      byteArray5[2] = (byte)100;
      byteArray5[3] = (byte)95;
      byteArray5[4] = (byte)49;
      byteArray5[5] = (byte)95;
      byteArray5[6] = (byte)95;
      byteArray0[4] = byteArray5;
      linkedList0.add(byteArray0);
      Integer.getInteger("UN");
      Integer integer10 = new Integer((int) integer8);
      Integer integer11 = new Integer((-1769));
      Integer.remainderUnsigned((-2188), (-1769));
      Integer integer12 = new Integer((-2188));
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.relative(100);
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6964696698774833
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][0];
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-9);
      byteArray1[2] = (byte)26;
      byteArray1[4] = (byte)16;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[2];
      byteArray1[0] = (byte) (-9);
      byteArray2[1] = (byte) (-4);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[12];
      byteArray3[1] = (byte) (-4);
      byteArray3[2] = (byte) (-9);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte) (-4);
      byteArray0[3] = byteArray4;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.next();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.updateRow(byteArray0);
      fBCachedFetcher0.getRowNum();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer integer0 = new Integer((byte)43);
      Integer integer1 = new Integer((byte)43);
      Integer integer2 = new Integer((byte)43);
      Integer.min((byte)43, 73);
      Integer integer3 = new Integer((byte)43);
      Integer.min((-3478), (byte)43);
      Integer integer4 = new Integer(2629);
      Integer integer5 = new Integer(2629);
      Integer integer6 = Integer.getInteger("", integer4);
      Integer.divideUnsigned(479, 2629);
      Integer integer7 = new Integer((-3478));
      Integer integer8 = new Integer((-3478));
      Integer integer9 = new Integer((-3478));
      Integer.compare((-1608), 2629);
      Integer integer10 = new Integer(100);
      byte[][] byteArray0 = new byte[6][2];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)43;
      byteArray1[1] = (byte)43;
      byteArray1[2] = (byte)43;
      byteArray1[3] = (byte)43;
      byteArray1[4] = (byte)30;
      byteArray1[5] = (byte)43;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)30;
      byteArray3[1] = (byte)30;
      byteArray3[2] = (byte)43;
      byteArray3[3] = (byte)30;
      byteArray3[4] = (byte)43;
      byteArray3[5] = (byte)43;
      byteArray3[6] = (byte)43;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte)43;
      byteArray4[1] = (byte)30;
      byteArray4[2] = (byte)30;
      byteArray4[3] = (byte)43;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[0];
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[1];
      byteArray6[0] = (byte)64;
      byteArray0[5] = byteArray6;
      linkedList0.add(byteArray0);
      Integer.compareUnsigned((int) integer6, 2629);
      Integer.divideUnsigned((-3478), 2629);
      Integer integer11 = new Integer((byte)43);
      Integer integer12 = Integer.getInteger("", integer6);
      Integer integer13 = new Integer(2629);
      Integer integer14 = new Integer(73);
      Integer integer15 = new Integer((int) integer12);
      Integer integer16 = new Integer(100);
      Integer.remainderUnsigned((-2188), (-3478));
      Integer integer17 = new Integer((-2188));
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.isEmpty();
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2162443181522673
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[] byteArray0 = new byte[12];
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)26;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)14;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger0.isProbablePrime((byte)26);
      BigInteger bigInteger3 = BigInteger.ONE;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigInteger0.multiply(bigInteger3);
      BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
      MathContext mathContext0 = MathContext.DECIMAL128;
      bigDecimal0.divideAndRemainder(bigDecimal2, mathContext0);
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      bigDecimal0.plus(mathContext0);
      bigDecimal2.setScale((int) (byte)14, roundingMode0);
      MathContext mathContext1 = MathContext.UNLIMITED;
      mathContext1.getPrecision();
      bigDecimal0.add(bigDecimal2, mathContext1);
      bigInteger3.remainder(bigInteger0);
      BigDecimal bigDecimal3 = new BigDecimal((int) (byte)26);
      BigDecimal bigDecimal4 = BigDecimal.ONE;
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.isAfterLast();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.70258873457775
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][0];
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-9);
      byteArray1[2] = (byte)26;
      byteArray1[4] = (byte)16;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[2];
      byteArray1[0] = (byte) (-9);
      byteArray2[1] = (byte) (-4);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[12];
      byteArray3[1] = (byte) (-4);
      byteArray3[2] = (byte) (-9);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte) (-4);
      byteArray0[3] = byteArray4;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.next();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.updateRow(byteArray0);
      fBCachedFetcher0.getRowNum();
      System.setCurrentTimeMillis(0L);
      int int0 = fBCachedFetcher0.getRowNum();
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[9][2];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-44);
      byteArray1[1] = (byte) (-2);
      byteArray1[2] = (byte) (-2);
      byteArray1[3] = (byte)99;
      byteArray1[4] = (byte) (-4);
      byteArray1[5] = (byte)44;
      byteArray1[6] = (byte)101;
      byteArray1[7] = (byte) (-1);
      byteArray1[8] = (byte)27;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-2);
      byteArray2[1] = (byte) (-44);
      byteArray2[2] = (byte) (-2);
      byteArray2[3] = (byte) (-2);
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte) (-44);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte) (-44);
      byteArray3[1] = (byte)99;
      byteArray3[2] = (byte) (-122);
      byteArray3[3] = (byte)101;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[0];
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[5];
      byteArray5[0] = (byte) (-4);
      byteArray5[1] = (byte) (-2);
      byteArray5[2] = (byte) (-44);
      byteArray5[3] = (byte)27;
      byteArray5[4] = (byte) (-1);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[4];
      byteArray6[0] = (byte)35;
      byteArray6[1] = (byte) (-4);
      byteArray6[2] = (byte) (-44);
      byteArray6[3] = (byte)44;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[0];
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[2];
      byteArray8[0] = (byte) (-4);
      byteArray8[1] = (byte)99;
      byteArray0[7] = byteArray8;
      byte[] byteArray9 = new byte[2];
      byteArray9[0] = (byte)27;
      byteArray9[1] = (byte)101;
      byteArray0[8] = byteArray9;
      linkedList0.add(byteArray0);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0141266108053313
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][0];
      Integer integer0 = new Integer((-1834));
      Integer integer1 = new Integer((-1834));
      Integer integer2 = new Integer((-1834));
      Integer.max(2791, (-1834));
      Integer.sum((-1068), (-1068));
      Integer integer3 = new Integer((-813));
      Integer.max((-1068), (-1766));
      Integer.toUnsignedString(2791);
      Integer.getInteger(")(\"d`56!uw54vkMO;", (-2136));
      Integer integer4 = new Integer((-1958));
      Integer.remainderUnsigned(2791, 14);
      Integer.getInteger("bN*L~j,\"DtvBGCImv", 39);
      Integer integer5 = new Integer((-4861));
      linkedList0.addFirst(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.updateRow(byteArray0);
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection0).getConnectionRequestInfo();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      XSQLDA xSQLDA0 = new XSQLDA(400);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][5];
      byteArray0[0] = null;
      byteArray0[1] = null;
      byteArray0[2] = null;
      byteArray0[3] = null;
      byteArray0[4] = null;
      byteArray0[5] = null;
      byteArray0[6] = null;
      byteArray0[7] = null;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative(400);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.280191375787985
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[0][7];
      byte[][] byteArrayArray0 = null;
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.getRowNum();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7842068034002128
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[5][0];
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1780));
      Integer.getInteger("J)DV`oZf+[&UwYuu'n1", 100);
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      Integer integer1 = new Integer((byte)49);
      Integer.getInteger("J)DV`oZf+[&UwYuu'n1", integer0);
      Integer.compareUnsigned((byte)49, (-1780));
      linkedBlockingQueue0.add(integer1);
      linkedBlockingQueue0.add(integer1);
      Integer.compareUnsigned((-1), 2005);
      Integer integer2 = new Integer(2626);
      Integer integer3 = new Integer(2626);
      linkedBlockingQueue0.add(integer0);
      Integer.sum((-2062), 3518);
      Integer integer4 = new Integer(478);
      Integer integer5 = new Integer(3518);
      Integer.min((-699), (-1));
      Integer.min((-1), 1);
      linkedBlockingQueue0.add(integer5);
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      System.setCurrentTimeMillis((-146L));
      boolean boolean0 = fBCachedFetcher0.next();
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[20][3];
      linkedList0.addFirst(byteArray0);
      linkedList0.add(byteArray0);
      byte[][] byteArray1 = new byte[1][5];
      linkedList0.spliterator();
      byte[] byteArray2 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray2);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) byteArrayInputStream0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = predicate0.or(predicate2);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      predicate0.and(predicate4);
      predicate5.negate();
      predicate5.test((Object) null);
      linkedList0.removeIf(predicate5);
      byteArray1[0] = byteArray2;
      Integer integer0 = new Integer((-150));
      Integer integer1 = new Integer((-150));
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute(59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[0][6];
      linkedList0.add(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[3] = (byte)7;
      byte[][] byteArray2 = new byte[0][4];
      linkedList0.add(byteArray2);
      byteArray1[4] = (byte)16;
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-4);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1437065979373684
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[20][3];
      linkedList0.addFirst(byteArray0);
      linkedList0.add(byteArray0);
      byte[][] byteArray1 = new byte[1][5];
      linkedList0.spliterator();
      byte[] byteArray2 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray2);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) byteArrayInputStream0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = predicate0.or(predicate2);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      predicate0.and(predicate4);
      predicate5.negate();
      predicate5.test((Object) null);
      linkedList0.removeIf(predicate5);
      byteArray1[0] = byteArray2;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList2.add(byteArray1);
      Integer integer0 = new Integer(400);
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      linkedBlockingQueue0.add(integer0);
      linkedList2.containsAll(linkedBlockingQueue0);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList3.addFirst(byteArray1);
      linkedList3.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer integer0 = new Integer((byte)43);
      Integer integer1 = new Integer((byte)43);
      Integer integer2 = new Integer((byte)43);
      Integer.min((byte)43, (byte)43);
      Integer integer3 = new Integer((byte)43);
      Integer.min((byte)43, (byte)43);
      Integer integer4 = new Integer(2629);
      Integer integer5 = new Integer(2629);
      Integer integer6 = Integer.getInteger("PKTABLE_SCHEM", integer4);
      Integer.max(43, 43);
      Integer integer7 = new Integer(479);
      Integer.getInteger("PKTABLE_SCHEM", integer7);
      Integer.min((byte)43, (byte)43);
      Integer integer8 = new Integer(43);
      Integer integer9 = new Integer(43);
      Integer.compare(43, 2629);
      Integer integer10 = new Integer(479);
      Integer.compare((byte)43, 43);
      Integer.compareUnsigned((int) integer6, 2629);
      Integer integer11 = new Integer((byte)43);
      Integer.max(1176, 2629);
      Integer integer12 = Integer.getInteger((String) null, integer6);
      Integer integer13 = new Integer(2629);
      Integer integer14 = new Integer((byte)43);
      Integer integer15 = new Integer((int) integer12);
      Integer integer16 = new Integer(43);
      Integer integer17 = new Integer(0);
      Integer integer18 = new Integer((-2188));
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer integer0 = new Integer((byte)43);
      Integer integer1 = new Integer((byte)43);
      Integer integer2 = new Integer((byte)43);
      Integer.min((byte)43, (byte)43);
      Integer integer3 = new Integer((byte)43);
      Integer integer4 = new Integer(2629);
      Integer integer5 = new Integer(2629);
      Integer integer6 = Integer.getInteger("PKTABLE_SCHEM", integer4);
      Integer.max(3263, 43);
      Integer integer7 = new Integer(479);
      Integer.getInteger("PKTABLE_SCHEM", integer7);
      Integer.min((byte)43, (byte)43);
      Integer integer8 = new Integer(43);
      Integer integer9 = new Integer(43);
      Integer.compare(43, 2629);
      Integer integer10 = new Integer(479);
      Integer.compare((byte)43, 43);
      Integer.compareUnsigned((int) integer6, 2629);
      Integer integer11 = new Integer((byte)43);
      Integer.max(1176, 2629);
      Integer integer12 = Integer.getInteger((String) null, integer6);
      Integer integer13 = new Integer(2629);
      Integer integer14 = new Integer((byte)43);
      Integer integer15 = new Integer((int) integer12);
      Integer integer16 = new Integer(43);
      Integer integer17 = new Integer(0);
      Integer integer18 = new Integer((-2188));
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer integer0 = new Integer((byte)43);
      Integer integer1 = new Integer((byte)43);
      Integer integer2 = new Integer((byte)43);
      Integer.min((byte)43, (byte)43);
      Integer integer3 = new Integer((byte)43);
      Integer.min((byte)43, (byte)43);
      Integer integer4 = new Integer(2629);
      Integer integer5 = new Integer(2629);
      Integer integer6 = Integer.getInteger("PKTABLE_SCHEM", integer4);
      Integer.max(3263, 43);
      Integer integer7 = new Integer(479);
      Integer integer8 = new Integer(43);
      Integer.min((byte)43, (byte)43);
      Integer integer9 = new Integer(43);
      Integer integer10 = new Integer(43);
      Integer.compare(43, 2629);
      Integer integer11 = new Integer(479);
      Integer.compare((byte)43, 43);
      Integer.compareUnsigned((int) integer6, 2629);
      Integer integer12 = new Integer((byte)43);
      Integer.max(1176, 2629);
      Integer integer13 = Integer.getInteger((String) null, integer11);
      Integer integer14 = new Integer(2629);
      Integer integer15 = new Integer((byte)43);
      Integer integer16 = new Integer((int) integer13);
      Integer integer17 = new Integer(3263);
      Integer.remainderUnsigned((-2188), 43);
      Integer integer18 = new Integer((-2188));
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3168084546157512
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][0];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)31;
      byteArray1[1] = (byte) (-4);
      byteArray1[2] = (byte)26;
      byteArray1[3] = (byte)49;
      byteArray1[4] = (byte)16;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)31;
      byteArray2[1] = (byte) (-4);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[12];
      byteArray3[1] = (byte) (-4);
      byteArray3[2] = (byte)31;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte) (-4);
      byteArray0[3] = byteArray4;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.isFirst();
      int int0 = fBCachedFetcher0.getRowNum();
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.87581752666317
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[20][3];
      linkedList0.addFirst(byteArray0);
      linkedList0.add(byteArray0);
      byte[][] byteArray1 = new byte[1][5];
      linkedList0.spliterator();
      byte[] byteArray2 = new byte[0];
      InputStream inputStream0 = FBCachedBlob.STREAM_NULL_VALUE;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      predicate0.or(predicate3);
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      predicate4.test((Object) null);
      linkedList0.removeIf(predicate4);
      byteArray1[0] = byteArray2;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Integer integer0 = new Integer(171);
      Integer integer1 = new Integer(2443);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute((-1549));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7754337976947767
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[20][3];
      linkedList0.addFirst(byteArray0);
      linkedList0.add(byteArray0);
      byte[][] byteArray1 = new byte[1][5];
      linkedList0.spliterator();
      byte[] byteArray2 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray2);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) byteArrayInputStream0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = predicate0.or(predicate2);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      predicate0.and(predicate4);
      predicate5.negate();
      predicate5.test((Object) null);
      linkedList0.removeIf(predicate5);
      byteArray1[0] = byteArray2;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      byte[][] byteArray0 = new byte[3][4];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-88);
      byteArray1[1] = (byte)51;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)62;
      byteArray1[4] = (byte)49;
      byteArray1[5] = (byte)1;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)49;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)62;
      byteArray2[3] = (byte)49;
      byteArray2[4] = (byte)62;
      byteArray2[5] = (byte)62;
      byteArray2[6] = (byte)51;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[0];
      byteArray0[2] = byteArray3;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer integer0 = new Integer((byte)49);
      Integer integer1 = new Integer((byte)49);
      Integer integer2 = new Integer((byte)49);
      Integer.min((byte)49, 91);
      Integer integer3 = new Integer((byte)49);
      Integer.min((byte)49, (byte)49);
      Integer integer4 = Integer.valueOf(49);
      Integer integer5 = new Integer(91);
      Integer integer6 = Integer.getInteger("g", integer4);
      Integer.sum(91, (-5));
      Integer.compare((byte)49, (byte)49);
      Integer.compare(91, 49);
      Integer.compare(49, 0);
      Integer.compareUnsigned(86, 49);
      Integer.min((byte)49, 0);
      Integer integer7 = new Integer(3);
      Integer.getInteger("g", integer7);
      Integer.sum(91, 86);
      Integer integer8 = new Integer((byte)49);
      linkedList0.removeLastOccurrence(integer6);
      Integer integer9 = new Integer(49);
      Integer integer10 = new Integer(49);
      Integer integer11 = new Integer(1);
      Integer integer12 = new Integer((int) integer9);
      Integer integer13 = new Integer(49);
      Integer.remainderUnsigned((-2188), (-5));
      Integer integer14 = new Integer((-2188));
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, int0);
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][0];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-9);
      byteArray1[2] = (byte) (-9);
      byteArray1[3] = (byte)49;
      byteArray1[4] = (byte) (-4);
      byteArray0[0] = byteArray1;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.isBeforeFirst();
      LocalGDSImpl localGDSImpl0 = null;
      try {
        localGDSImpl0 = new LocalGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-9);
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.isBeforeFirst();
      LocalGDSImpl localGDSImpl0 = null;
      try {
        localGDSImpl0 = new LocalGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9253539308675658
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      SynchronousQueue<Object> synchronousQueue0 = new SynchronousQueue<Object>();
      Integer integer0 = new Integer(480);
      synchronousQueue0.contains(integer0);
      linkedList0.retainAll(synchronousQueue0);
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[9];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[5] = fBLongVarCharFieldArray0[4];
      fBLongVarCharFieldArray0[6] = fBLongVarCharFieldArray0[5];
      fBLongVarCharFieldArray0[7] = fBLongVarCharFieldArray0[6];
      fBLongVarCharFieldArray0[8] = fBLongVarCharFieldArray0[7];
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-53);
      byteArray1[1] = (byte) (-118);
      byteArray1[2] = (byte) (-4);
      byteArray1[3] = (byte) (-95);
      byteArray1[4] = (byte) (-99);
      byteArray0[0] = byteArray1;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9253539308675658
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      SynchronousQueue<Object> synchronousQueue0 = new SynchronousQueue<Object>();
      Integer integer0 = new Integer(480);
      synchronousQueue0.contains(integer0);
      linkedList0.retainAll(synchronousQueue0);
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[9];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[5] = fBLongVarCharFieldArray0[4];
      fBLongVarCharFieldArray0[6] = fBLongVarCharFieldArray0[5];
      fBLongVarCharFieldArray0[3] = fBLongVarCharFieldArray0[6];
      fBLongVarCharFieldArray0[8] = fBLongVarCharFieldArray0[7];
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-53);
      byteArray1[1] = (byte) (-118);
      byteArray1[2] = (byte) (-4);
      byteArray1[3] = (byte) (-95);
      byteArray1[4] = (byte) (-99);
      byteArray0[0] = byteArray1;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isFirst();
      fBCachedFetcher0.getRowNum();
      byte[][] byteArray0 = new byte[16][0];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-9);
      byteArray1[1] = (byte) (-4);
      byteArray1[2] = (byte)26;
      byteArray1[3] = (byte)49;
      byteArray1[4] = (byte)16;
      byteArray0[0] = byteArray1;
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.deepCopy();
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      isc_tr_handle_impl0.getDbHandle();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBuffer0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      DummyCallableStatementMetaData dummyCallableStatementMetaData0 = new DummyCallableStatementMetaData();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer integer0 = new Integer((-1834));
      Integer integer1 = new Integer((-1834));
      Integer integer2 = new Integer((-1834));
      Integer.max((-1834), (-1834));
      Integer integer3 = new Integer((-1834));
      Integer integer4 = new Integer((-1834));
      Integer.getInteger("X<)", integer3);
      Integer integer5 = new Integer((-1834));
      Integer integer6 = new Integer((-1834));
      Integer.remainderUnsigned((-1834), (-1466));
      Integer.max((-1089), (-27));
      Integer integer7 = new Integer((-1834));
      Integer.getInteger("P]1Hx<bQbc{'V&$A]", integer7);
      Integer.compareUnsigned((-1700), (-1834));
      Integer integer8 = new Integer((-27));
      Integer.toUnsignedLong((-1373));
      Integer[] integerArray0 = new Integer[13];
      Integer.toUnsignedLong((-1834));
      Integer.divideUnsigned((-1700), (-1834));
      integerArray0[0] = integer1;
      linkedList0.toArray(integerArray0);
      Integer.divideUnsigned((-1700), (-27));
      Integer.getInteger(")(\"d`56!uw54vkMO;", (int) integer5);
      Integer integer9 = new Integer((-27));
      Integer integer10 = new Integer((int) integer5);
      linkedList0.removeLastOccurrence(")(\"d`56!uw54vkMO;");
      Integer integer11 = new Integer(1);
      Integer integer12 = new Integer((-4861));
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.relative(0);
      assertFalse(boolean0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.7101622658977815
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][0];
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      byte[] byteArray1 = new byte[5];
      byteArray1[2] = (byte)26;
      linkedList0.add(byteArray0);
      byteArray1[3] = (byte)49;
      byteArray0[0] = byteArray1;
      byteArray1[0] = (byte) (-9);
      byte[] byteArray2 = new byte[12];
      byteArray2[1] = (byte) (-4);
      byteArray2[2] = (byte) (-9);
      byteArray0[2] = byteArray2;
      linkedList0.add(byteArray0);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-4);
      byteArray0[3] = byteArray3;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.next();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.insertRow(fBResultSet0.row);
      fBCachedFetcher0.afterLast();
      System.setCurrentTimeMillis(127L);
      System.setCurrentTimeMillis((byte)26);
      fBCachedFetcher0.next();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      predicate3.negate();
      predicate1.or(predicate2);
      Predicate<Object> predicate5 = predicate4.or(predicate0);
      Predicate<Object> predicate6 = predicate0.or(predicate5);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate3);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      predicate3.and(predicate5);
      Predicate<Object> predicate8 = predicate6.negate();
      predicate8.test(predicate7);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray1 = new byte[9][5];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      byteArray1[3] = byteArray0;
      byteArray1[4] = byteArray0;
      byteArray1[5] = byteArray0;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-44);
      byteArray2[1] = (byte)29;
      byteArray2[2] = (byte)115;
      byteArray1[6] = byteArray2;
      byteArray1[7] = byteArray0;
      byteArray1[8] = byteArray0;
      linkedList0.add(byteArray1);
      linkedList0.removeIf(predicate6);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      try { 
        fBCachedFetcher0.absolute((-2));
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.last();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      // Undeclared exception!
      try { 
        javaGDSImpl0.createEventHandle((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.EventHandleImp", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][0];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-9);
      byteArray1[1] = (byte) (-4);
      byteArray1[3] = (byte)4;
      byteArray1[3] = (byte)49;
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      delayQueue0.poll((long) (byte)49, timeUnit0);
      linkedList0.removeLastOccurrence((Object) null);
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      Integer integer0 = new Integer((byte)0);
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      linkedBlockingQueue0.poll(0L, timeUnit1);
      Integer.sum((-2012), (byte) (-9));
      linkedBlockingQueue0.add(integer0);
      linkedBlockingQueue0.add(integer0);
      linkedList0.containsAll(linkedBlockingQueue0);
      linkedList0.addFirst(byteArray0);
      linkedList0.add(byteArray0);
      byteArray1[4] = (byte)16;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-9);
      byteArray2[1] = (byte) (-4);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[22];
      byteArray3[1] = (byte)16;
      byteArray3[2] = (byte) (-9);
      byteArray0[2] = byteArray3;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate4.or(predicate0);
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate4);
      Predicate<Object> predicate9 = predicate6.and(predicate8);
      Predicate<Object> predicate10 = predicate0.and(predicate1);
      predicate5.test(predicate8);
      Predicate<Object> predicate11 = predicate7.or(predicate10);
      predicate2.or(predicate9);
      Predicate<Object> predicate12 = predicate10.negate();
      Object object1 = new Object();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Predicate.isEqual((Object) sequenceInputStream0);
      predicate9.and(predicate2);
      predicate3.negate();
      Predicate<Object> predicate13 = predicate5.or(predicate4);
      Predicate<Object> predicate14 = predicate1.or(predicate13);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      predicate9.negate();
      delayQueue0.peek();
      Predicate<Object> predicate15 = predicate11.or(predicate0);
      predicate15.and(predicate1);
      Predicate<Object> predicate16 = predicate12.and(predicate14);
      predicate16.or(predicate9);
      predicate8.negate();
      Object object2 = new Object();
      predicate2.test(object2);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.removeIf(predicate13);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(boolean0);
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.1123229474816387
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1780));
      Integer.getInteger("JD`Zf[&UwYuU'n1", 100);
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      Integer integer1 = new Integer((byte)49);
      linkedBlockingQueue0.add(integer1);
      Integer integer2 = new Integer(2612);
      Integer integer3 = new Integer(2612);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      delayQueue0.poll(0L, timeUnit0);
      Integer integer4 = Integer.getInteger("vz", integer2);
      linkedList0.removeLastOccurrence(integer4);
      LinkedBlockingQueue<Integer> linkedBlockingQueue1 = new LinkedBlockingQueue<Integer>();
      Integer integer5 = new Integer(565);
      Integer.sum((-2339), (-2339));
      Integer integer6 = new Integer(180);
      linkedBlockingQueue0.add(integer0);
      Integer integer7 = Integer.getInteger("x'.", (-2012));
      linkedBlockingQueue1.add(integer7);
      PriorityBlockingQueue<Integer> priorityBlockingQueue0 = new PriorityBlockingQueue<Integer>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.beforeFirst();
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate4.or(predicate0);
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate4);
      Predicate<Object> predicate9 = predicate6.and(predicate8);
      Predicate<Object> predicate10 = predicate0.and(predicate1);
      predicate5.test(predicate8);
      Predicate<Object> predicate11 = predicate7.or(predicate10);
      predicate2.or(predicate9);
      Predicate<Object> predicate12 = predicate10.negate();
      Object object1 = new Object();
      predicate9.and(predicate2);
      predicate3.negate();
      Predicate<Object> predicate13 = predicate5.or(predicate4);
      Predicate<Object> predicate14 = predicate1.or(predicate13);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      predicate9.negate();
      delayQueue0.peek();
      Predicate<Object> predicate15 = predicate11.or(predicate0);
      predicate15.and(predicate1);
      Predicate<Object> predicate16 = predicate12.and(predicate14);
      predicate16.or(predicate9);
      predicate8.negate();
      Object object2 = new Object();
      predicate2.test(object2);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.removeIf(predicate13);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate3.or(predicate0);
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate3);
      Predicate<Object> predicate8 = predicate5.and(predicate7);
      Predicate<Object> predicate9 = predicate0.and(predicate1);
      Predicate<Object> predicate10 = predicate6.or(predicate9);
      predicate2.or(predicate8);
      Predicate<Object> predicate11 = predicate9.negate();
      Object object1 = new Object();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Predicate.isEqual((Object) sequenceInputStream0);
      Predicate<Object> predicate12 = predicate8.and(predicate2);
      predicate10.negate();
      Predicate<Object> predicate13 = predicate4.or(predicate3);
      Predicate<Object> predicate14 = predicate1.or(predicate13);
      Predicate<Object> predicate15 = predicate10.or(predicate0);
      predicate15.and(predicate1);
      Predicate<Object> predicate16 = predicate11.and(predicate14);
      predicate16.or(predicate8);
      predicate12.test((Object) null);
      Object object2 = new Object();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.removeIf(predicate4);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[][] byteArray0 = new byte[4][0];
      byte[] byteArray1 = new byte[16];
      byteArray1[0] = (byte) (-9);
      byteArray1[1] = (byte) (-9);
      byteArray1[2] = (byte)26;
      byteArray1[3] = (byte)93;
      byteArray1[4] = (byte)33;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-9);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[12];
      byteArray3[1] = (byte) (-4);
      byteArray3[2] = (byte) (-9);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte) (-4);
      byteArray0[3] = byteArray4;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((List<byte[][]>) null, (FBObjectListener.FetcherListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate4.or(predicate0);
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate4);
      Predicate<Object> predicate9 = predicate6.and(predicate8);
      Predicate<Object> predicate10 = predicate0.and(predicate1);
      predicate5.test(predicate8);
      predicate7.or(predicate10);
      predicate2.or(predicate9);
      Predicate<Object> predicate11 = predicate10.negate();
      Object object1 = new Object();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Predicate.isEqual((Object) sequenceInputStream0);
      predicate9.and(predicate2);
      predicate3.negate();
      Predicate<Object> predicate12 = predicate5.or(predicate4);
      Predicate<Object> predicate13 = predicate1.or(predicate12);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      predicate9.negate();
      delayQueue0.peek();
      predicate10.and(predicate1);
      Predicate<Object> predicate14 = predicate11.and(predicate13);
      predicate14.or(predicate9);
      predicate8.negate();
      Object object2 = new Object();
      predicate2.test(object2);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.removeIf(predicate12);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(boolean0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.9487205928347628
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SynchronousQueue<Object> synchronousQueue0 = new SynchronousQueue<Object>();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      FBCachedLongVarCharField[] fBCachedLongVarCharFieldArray0 = new FBCachedLongVarCharField[9];
      FBCachedLongVarCharField fBCachedLongVarCharField0 = mock(FBCachedLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBCachedLongVarCharFieldArray0[0] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[1] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[2] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[3] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[4] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[5] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[6] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[7] = fBCachedLongVarCharField0;
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[8][0];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-90);
      byteArray1[1] = (byte) (-52);
      byteArray1[2] = (byte) (-42);
      byteArray1[3] = (byte) (-95);
      byteArray1[4] = (byte)42;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-90);
      byteArray2[1] = (byte) (-42);
      byteArray2[2] = (byte) (-52);
      byteArray2[3] = (byte) (-52);
      byteArray2[4] = (byte)42;
      byteArray2[5] = (byte) (-95);
      byteArray2[7] = (byte) (-95);
      byteArray2[8] = (byte) (-1);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-52);
      byteArray3[1] = (byte) (-42);
      byteArray3[2] = (byte) (-42);
      byteArray3[3] = (byte) (-95);
      byteArray3[4] = (byte)42;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)29;
      byteArray4[1] = (byte)42;
      byteArray4[2] = (byte) (-42);
      byteArray4[3] = (byte) (-95);
      byteArray4[4] = (byte) (-1);
      byteArray4[5] = (byte) (-95);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[7];
      byteArray5[0] = (byte) (-42);
      byteArray5[1] = (byte)29;
      byteArray5[2] = (byte) (-1);
      byteArray5[3] = (byte) (-1);
      byteArray5[4] = (byte) (-44);
      byteArray5[5] = (byte) (-112);
      byteArray5[6] = (byte)42;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[9];
      byteArray6[0] = (byte) (-44);
      byteArray6[1] = (byte) (-42);
      byteArray6[2] = (byte) (-95);
      byteArray6[3] = (byte) (-95);
      byteArray6[4] = (byte) (-112);
      byteArray6[5] = (byte) (-52);
      byteArray6[6] = (byte) (-112);
      byteArray6[7] = (byte)29;
      byteArray6[8] = (byte)42;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[0];
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[5];
      byteArray8[0] = (byte) (-90);
      byteArray8[1] = (byte) (-90);
      byteArray8[2] = (byte) (-43);
      byteArray8[3] = (byte) (-95);
      byteArray8[4] = (byte) (-42);
      byteArray0[7] = byteArray8;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate3.or(predicate0);
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate3);
      Predicate<Object> predicate8 = predicate5.and(predicate7);
      Predicate<Object> predicate9 = predicate0.and(predicate1);
      Predicate<Object> predicate10 = predicate6.or(predicate9);
      predicate2.or(predicate8);
      Predicate<Object> predicate11 = predicate9.negate();
      Object object1 = new Object();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Predicate.isEqual((Object) sequenceInputStream0);
      predicate8.and(predicate2);
      predicate10.negate();
      Predicate<Object> predicate12 = predicate4.or(predicate3);
      Predicate<Object> predicate13 = predicate1.or(predicate12);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      Predicate<Object> predicate14 = predicate10.or(predicate0);
      predicate14.and(predicate1);
      Predicate<Object> predicate15 = predicate11.and(predicate13);
      predicate15.or(predicate8);
      predicate7.negate();
      Object object2 = new Object();
      predicate2.test(object2);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.removeIf(predicate12);
      byte[][] byteArray1 = new byte[2][8];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      linkedList0.add(byteArray1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tP![No&&`\"\"");
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.getRsr_rdb();
      isc_stmt_handle_impl0.setRsr_rdb((isc_db_handle_impl) null);
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl1.setUpdateCount(84);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      isc_stmt_handle_impl1.setSingletonResult(false);
      isc_stmt_handle_impl1.setAllRowsFetched(false);
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tP![No&&`\"\"");
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl3.setAllRowsFetched(true);
      isc_stmt_handle_impl3.removeRows();
      isc_stmt_handle_impl0.setExecutionPlan((String) null);
      isc_stmt_handle_impl isc_stmt_handle_impl4 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl4.clearRows();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.last();
      System.setCurrentTimeMillis((-704L));
  }
}
