/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 11:49:39 GMT 2019
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jcvi.jillion.assembly.consed.phd.ArtificialPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdWholeReadItem;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.assembly.consed.phd.PhdBuilder;
import org.jcvi.jillion.assembly.consed.phd.PhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.PhdWholeReadItem;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannel;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannelGroup;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhdBuilder_ESTest extends PhdBuilder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      DefaultPhd defaultPhd0 = new DefaultPhd("\"NS|*CE", nucleotideSequence0, qualitySequence0, (PositionSequence) null, (Map<String, String>) null);
      int int0 = (-54);
      Integer integer0 = new Integer((-54));
      defaultPhd0.equals(integer0);
      defaultPhd0.toString();
      defaultPhd0.toString();
      defaultPhd0.getWholeReadItems();
      defaultPhd0.equals("\"NS|*CE");
      defaultPhd0.getWholeReadItems();
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(defaultPhd0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("]Qa?1fK#^#Y4", nucleotideSequence0, qualitySequence0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-85);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)49;
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence1).getLength();
      ArtificialPhd.createNewbler454Phd("]Qa?1fK#^#Y4", nucleotideSequence1, (QualitySequence) null);
      byteArray0[5] = (byte)49;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)49;
      shortArray0[1] = (short) (byte)65;
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        phdBuilder0.wholeReadItems((List<PhdWholeReadItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("NotAdenine", nucleotideSequence0, qualitySequence0);
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence1).getLength();
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = ArtificialPhd.createNewbler454Phd("NotAdenine", nucleotideSequence1, qualitySequence1, (Map<String, String>) null);
      NucleotideSequence nucleotideSequence2 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence2).getLength();
      ArtificialPhd.createNewbler454Phd("NotAdenine", nucleotideSequence2, (QualitySequence) null);
      artificialPhd0.getComments();
      // Undeclared exception!
      try { 
        phdBuilder0.comments((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("i-8y_*}Y6S&xD5*D\u0007", nucleotideSequence0, qualitySequence0);
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)504;
      shortArray0[2] = (short)75;
      shortArray0[3] = (short)513;
      shortArray0[4] = (short)504;
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      // Undeclared exception!
      try { 
        phdBuilder0.readTags((List<PhdReadTag>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      Map<String, String> map2 = ZoneId.SHORT_IDS;
      System.setCurrentTimeMillis((byte)82);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("OV", nucleotideSequence0, qualitySequence0);
      Map<String, String> map3 = ZoneId.SHORT_IDS;
      PhdBuilder phdBuilder1 = phdBuilder0.comments(map3);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("i-8y_*}Y6S&xD5*D\u0007", nucleotideSequence0, qualitySequence0);
      phdBuilder0.peaks((PositionSequence) null);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)504;
      shortArray0[1] = (short)504;
      shortArray0[2] = (short)75;
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("positions can not be null", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks();
      byte[] byteArray0 = new byte[0];
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)19;
      shortArray0[1] = (short)2184;
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      System.setCurrentTimeMillis((short)2184);
      Object object0 = new Object();
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel1.equals(defaultChannel0);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      Object object1 = new Object();
      Object object2 = new Object();
      Integer integer0 = new Integer((-99));
      defaultChannel1.equals(integer0);
      DefaultChannel defaultChannel3 = new DefaultChannel(byteArray0, shortArray0);
      Object object3 = new Object();
      defaultChannel2.equals(defaultChannel0);
      defaultChannel3.equals(object0);
      DefaultChannel defaultChannel4 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel5 = new DefaultChannel(byteArray0, shortArray0);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      defaultChannel5.equals(defaultChannel1);
      defaultChannel2.equals("positions can not be null");
      Object object7 = new Object();
      DefaultChannel defaultChannel6 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel7 = new DefaultChannel(byteArray0, shortArray0);
      short[] shortArray1 = new short[0];
      DefaultChannel defaultChannel8 = new DefaultChannel(byteArray0, shortArray1);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel2, defaultChannel6, defaultChannel7, defaultChannel6);
      Phd phd0 = phdBuilder1.build();
      assertEquals("positions can not be null", phd0.getId());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("i-8y_*}Y6S&xD5*D\u0007", nucleotideSequence0, qualitySequence0);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)504;
      shortArray0[1] = (short)504;
      shortArray0[2] = (short)75;
      shortArray0[3] = (short)504;
      shortArray0[4] = (short)504;
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Phd phd0 = phdBuilder0.build();
      assertEquals("i-8y_*}Y6S&xD5*D\u0007", phd0.getId());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      LinkedList<PhdReadTag> linkedList0 = new LinkedList<PhdReadTag>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2720L), 0L);
      MockDate mockDate0 = new MockDate((-1067), (-1067), (-1067), 1931, 1233);
      DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag("", (String) null, range0, mockDate0, (String) null, "");
      linkedList0.add((PhdReadTag) defaultPhdReadTag0);
      Range range1 = Range.ofLength(0L);
      range1.split(1931);
      range1.toString();
      MockDate mockDate1 = new MockDate(1650, 1830, 15, 59, 15);
      mockDate1.before(mockDate0);
      MockDate.UTC((-1067), 1931, (-2480), 1061, 1707, (-1768));
      MockDate mockDate2 = new MockDate(1061, 1061, 1061, 333, 333);
      mockDate2.toInstant();
      mockDate2.after(mockDate1);
      PhdBuilder phdBuilder1 = phdBuilder0.readTags(linkedList0);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("i-8y_*}Y6S&xD5*D\u0007", nucleotideSequence0, qualitySequence0);
      phdBuilder0.fakePeaks(2538, 2538);
      byte[] byteArray0 = null;
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)1907;
      short short0 = (short)75;
      shortArray0[2] = (short)75;
      shortArray0[3] = (short)513;
      shortArray0[4] = (short)1907;
      DefaultChannel defaultChannel0 = null;
      try {
        defaultChannel0 = new DefaultChannel((byte[]) null, shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableByteArray", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      System.setCurrentTimeMillis(4294967295L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      System.setCurrentTimeMillis(4294967295L);
      System.setCurrentTimeMillis(65535L);
      PhdBuilder phdBuilder0 = new PhdBuilder("uQX~8xu@IsA~+!CRG#", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks((-246), (-1168));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      String string0 = "i-8y_*}Y6S&xD5*D\\7";
      PhdBuilder phdBuilder0 = new PhdBuilder("i-8y_*}Y6S&xD5*D\u0007", nucleotideSequence0, qualitySequence0);
      phdBuilder0.copy();
      byte[] byteArray0 = null;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)504;
      shortArray0[1] = (short)504;
      shortArray0[2] = (short)75;
      shortArray0[3] = (short)513;
      shortArray0[4] = (short)504;
      DefaultChannel defaultChannel0 = null;
      try {
        defaultChannel0 = new DefaultChannel((byte[]) null, shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableByteArray", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      long long0 = 4294967295L;
      System.setCurrentTimeMillis(4294967295L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((String) null, nucleotideSequence0, qualitySequence1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("(d+)s*-s*(d+)", nucleotideSequence0, qualitySequence0);
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(list1);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      PhdBuilder phdBuilder1 = phdBuilder0.wholeReadItems(linkedList0);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList1 = new LinkedList<PhdReadTag>();
      int int0 = 2434;
      ArtificialPhd artificialPhd0 = new ArtificialPhd("", nucleotideSequence0, qualitySequence0, (Map<String, String>) null, linkedList0, linkedList1, 886, 2434);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis((-4L));
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList1 = new LinkedList<PhdReadTag>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) linkedList3);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) list1, locale_FilteringMode0);
      locale0.getUnicodeLocaleKeys();
      locale0.getDisplayScript();
      DefaultPhd defaultPhd0 = new DefaultPhd("/!h}9c;wo/_i_1.", nucleotideSequence0, qualitySequence0, (PositionSequence) null);
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(886, (-1197));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // peak spacing must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)65;
      Map<String, String> map2 = ZoneId.SHORT_IDS;
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Phd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // phd to copy can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList1);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      LinkedList<PhdReadTag> linkedList2 = new LinkedList<PhdReadTag>();
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("", nucleotideSequence0, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualities can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = 21L;
      System.setCurrentTimeMillis(21L);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("W", (NucleotideSequence) null, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sequence can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }
}
