/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 08:30:31 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.675449585015175
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(1L);
      Range range1 = Range.of((-2147484953L));
      Range range2 = Range.ofLength(1L);
      Range.Builder range_Builder2 = range_Builder1.contractBegin((-2147484953L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range3 = Range.of(1815L);
      range3.intersects(range2);
      Range range4 = Range.of((-2147484953L), 1L);
      boolean boolean0 = range1.equals(range_Builder1);
      //  // Unstable assertion: assertNotSame(range1, range4);
      
      Range range5 = Range.ofLength(32767L);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
      
      range_Builder2.contractEnd(185L);
      boolean boolean1 = range2.equals(range0);
      //  // Unstable assertion: assertFalse(boolean1);
      
      Object object0 = new Object();
      boolean boolean2 = range3.equals(range_Builder0);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      
      Long long0 = new Long(671L);
      Long.compareUnsigned(1890L, 2649L);
      Range range6 = Range.of(0L);
      //  // Unstable assertion: assertSame(range6, range2);
      //  // Unstable assertion: assertTrue(range6.isEmpty());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.6188913077591374
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.getLength();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 2147483647L);
      Object object0 = new Object();
      Range range2 = Range.of(1L, 2147483647L);
      linkedList0.add(range2);
      range2.complementFrom(linkedList0);
      range1.getLength();
      Range.Comparators.values();
      range2.spliterator();
      Range.CoordinateSystem.values();
      Range.of(2581L, 2147483646L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("3sL+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.3sL+
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2287929738255676
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.getLength();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 2147483647L);
      Object object0 = new Object();
      Range range2 = Range.of(1L, 2147483647L);
      range1.spliterator();
      Range range3 = Range.ofLength(2147483647L);
      range0.getBegin();
      range3.equals(range2);
      long long0 = (-1738L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1738L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2549800091601
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Long long0 = new Long(2147483647L);
      range0.equals("WXS^^DSj8*-\"");
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (long) long0, 2147483647L);
      range1.complement(range0);
      Object object0 = new Object();
      range1.complement(range0);
      Range range2 = range1.intersection(range0);
      Long long1 = new Long(2147483647L);
      range2.equals(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("WXS^^DSj8*-\"", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse WXS^^DSj8*-\" into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.8801833538293695
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854773787L);
      range1.endsBefore(range1);
      range1.complement(range0);
      Range range2 = Range.of(4294967295L, 9223372036854775807L);
      Long long0 = new Long(9223372036854773787L);
      Long.toUnsignedString(9223372036854775807L);
      range0.equals(long0);
      Object object0 = new Object();
      range2.equals(object0);
      Range.of(4294967295L);
      Long long1 = new Long((-1319L));
      range2.equals(long1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = Range.of(range_CoordinateSystem0, (-2619L), 4294967295L);
      range3.intersection(range1);
      Long long2 = new Long(9223372036854773787L);
      long long3 = (-835L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-835L), 9223372036854773787L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.530319932329077
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(1694L, 4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      range0.complement(range0);
      range1.equals((Object) null);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      linkedList0.add(range1);
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1694L, 1694L);
      range0.complement(range2);
      Object object0 = new Object();
      Range.of(1694L, 32767L);
      Range range3 = Range.of(32767L);
      range3.toString();
      range3.complement(range2);
      range3.intersection(range0);
      Long long0 = new Long((-811L));
      Object object1 = new Object();
      range1.equals(object1);
      // Undeclared exception!
      try { 
        Range.ofLength((-811L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.395370591029701
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 2L);
      Range range1 = Range.ofLength(4294967295L);
      range0.complement(range1);
      Object object0 = new Object();
      Range range2 = Range.ofLength(4294967295L);
      range2.intersection(range1);
      range2.equals((Object) null);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("end of file after only %d bytes read (expected %d)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.end of file after only %d bytes read (expected %d)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.886516717781607
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854773787L);
      range1.endsBefore(range1);
      List<Range> list0 = range1.complement(range0);
      Range range2 = Range.of(4294967295L, 9223372036854775807L);
      Long long0 = new Long(9223372036854773787L);
      Long.toUnsignedString(9223372036854775807L);
      range0.equals(long0);
      Object object0 = new Object();
      range2.equals(object0);
      Range range3 = Range.of(4294967295L);
      range3.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, (-1420L), (-1347L));
      range1.complement(range4);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-679L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4320626444038203
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 398L, 32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(range_CoordinateSystem0, 398L, 4294967295L);
      Range.ofLength(4294967295L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(1620L);
      Range.of(9223372036854775807L);
      Range range2 = Range.of(5743L);
      range0.intersection(range2);
      range1.equals(range1);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("cOL<F.[BE8YoJe<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.cOL<F.[BE8YoJe<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3950259343959672
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of((-103L));
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.copy();
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.of((-103L));
      Long long1 = new Long(0L);
      Range range2 = Range.ofLength(0L);
      range2.equals(range1);
      long long2 = (-2619L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long3 = 391L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 391L, (-2619L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.488332064506295
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.getLength();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 2147483647L);
      range1.complement(range0);
      Object object0 = new Object();
      long long1 = 2021L;
      range1.split(long1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.7394248246207296
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(1L);
      Range range1 = Range.of((-2147484953L));
      Range range2 = Range.of(range_CoordinateSystem0, (-2147484953L), (-2147484953L));
      Range.ofLength(1037L);
      Range.Builder range_Builder2 = range_Builder1.contractBegin((-2147484953L));
      range_Builder1.shift(1L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range_Builder2.contractBegin((-1362L));
      Range range3 = Range.of(1815L);
      Range.of((-2147484953L), 1L);
      Range.ofLength(32767L);
      range_Builder2.contractEnd(185L);
      range2.equals(range0);
      Object object0 = new Object();
      range3.equals(range_Builder0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("cOL<F.[BE8YoJe<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.cOL<F.[BE8YoJe<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2312235893191006
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.ofLength(9223372036854773762L);
      Long long0 = new Long(9223372036854775807L);
      Range.CoordinateSystem.values();
      Range range1 = Range.of(9223372036854773762L, 9223372036854775807L);
      range1.complement(range0);
      Object object0 = new Object();
      Range range2 = Range.ofLength(9223372036854775807L);
      range2.intersection(range0);
      range0.equals((Object) null);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.424649507640218
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 2147483647L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(1, list0.size());
      
      Object object0 = new Object();
      Range range2 = Range.of(1L, 2147483647L);
      range1.spliterator();
      Range range3 = range1.intersection(range2);
      long long1 = range0.getBegin();
      assertEquals(2147483647L, long1);
      
      boolean boolean0 = range3.equals(range2);
      assertFalse(range2.equals((Object)range1));
      assertSame(range3, range1);
      assertFalse(boolean0);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.ofLength(2147483647L);
      assertNotSame(range4, range3);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.550463287476032
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder2.build();
      Range range1 = Range.of(range_CoordinateSystem0, (-1307L), 2147483647L);
      Long long0 = new Long(2147483647L);
      range1.equals(long0);
      range1.startsBefore(range0);
      Range range2 = Range.of((-1307L));
      range2.equals(range_Builder2);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.of(2147483647L);
      Range.ofLength(312L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2248126040400766
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 398L, 32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.containsAll(linkedList1);
      Long long0 = new Long(68L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 32767L, 32767L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(2147483647L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.593098105612368
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854773787L);
      range1.endsBefore(range1);
      range1.complement(range0);
      Range range2 = Range.of(4294967295L, 9223372036854775807L);
      Long long0 = new Long(9223372036854773787L);
      Long.toUnsignedString(9223372036854775807L);
      range0.equals(long0);
      Object object0 = new Object();
      range2.equals(object0);
      Range.of(4294967295L);
      Long long1 = new Long((-1347L));
      range2.equals(long1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        Range.of((-1452L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.749127396407899
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.ofLength(2022L);
      Range range1 = Range.ofLength(2022L);
      range1.getBegin();
      range0.intersects(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-811L));
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 255L, 2022L);
      range2.isSubRangeOf(range1);
      Range range4 = Range.ofLength(877L);
      range4.spliterator();
      range1.intersection(range2);
      range1.startsBefore(range3);
      Range.CoordinateSystem.values();
      Range range5 = Range.ofLength(1247L);
      range5.endsBefore(range2);
      Range.of((-2147483648L));
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, (-529L), 877L);
      // Undeclared exception!
      try { 
        Range.ofLength((-529L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.474803664603167
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.copy();
      Range range1 = range_Builder0.build();
      range_Builder0.expandEnd(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.ofLength(0L);
      range1.split(2021L);
      Range.of((-3799L), (-128L));
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("zV>-DN]mwv]qK2-'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.zV>-DN]mwv]qK2-'
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.7730909886642054
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long0 = 1L;
      Range range0 = Range.of(1L);
      Range range1 = Range.of((-2147484953L));
      Range range2 = range0.intersection(range1);
      range_Builder1.contractBegin((-2147484953L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.of(1815L);
      Range.of((-2147484953L), 1L);
      range1.equals(range_Builder1);
      range2.equals((Object) null);
      Range.ofLength(9L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.6991304454136547
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.ofLength(4139L);
      Spliterator<Long> spliterator0 = range0.spliterator();
      range0.endsBefore(range0);
      range0.complement(range0);
      range0.equals(spliterator0);
      Range range1 = Range.of(4139L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 4139L, 4139L);
      range0.spliterator();
      Range range3 = Range.ofLength(9223372036854774556L);
      Object object0 = new Object();
      range1.equals(range3);
      range2.equals(range1);
      Range.of(4139L);
      Range.CoordinateSystem.values();
      Object object1 = new Object();
      long long0 = new Long(9223372036854774556L);
      String string0 = ".Zg,$vC,|,Rg`{MFzk";
      // Undeclared exception!
      try { 
        Range.parseRange(".Zg,$vC,|,Rg`{MFzk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse .Zg,$vC,|,Rg`{MFzk into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.5856911044314073
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854773787L);
      range1.endsBefore(range1);
      range1.complement(range0);
      Range range2 = Range.of(4294967295L, 9223372036854775807L);
      range2.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem0);
      range1.endsBefore(range2);
      range2.spliterator();
      Range.ofLength(4294967296L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 4294967295L, 9223372036854775807L);
      Object object0 = new Object();
      Range range3 = Range.of(9223372036854775807L);
      Long long0 = new Long((-1366L));
      range3.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 4294967296L, (-1366L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.24450171297894
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.ofLength(9223372036854775807L);
      Range range0 = Range.ofLength(9223372036854773787L);
      Long long1 = new Long(9223372036854775807L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = 9223372036854775807L;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range1.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3827529248158763
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.of(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 9223372036854775807L;
      Range range1 = Range.of(range_CoordinateSystem1, 9223372036854775807L, 9223372036854775807L);
      range0.isSubRangeOf(range1);
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.parseRange("[ 32768 .. 32768 ]/RB", range_CoordinateSystem2);
      range1.intersection(range2);
      range1.asRange();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("length must be >= 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.length must be >= 0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.6234149654718926
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(1L);
      Range range1 = Range.of((-2147484953L));
      range0.intersection(range1);
      range_Builder1.contractBegin((-2147484953L));
      long long0 = (-2147484952L);
      Range range2 = Range.of((-2147484952L), (-1L));
      range0.complement(range2);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.of(1317L, (-749L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.440245110742744
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      long long0 = new Long(2147483647L);
      boolean boolean0 = range0.equals("WXS^^DSj8*-\"");
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range1.complement(range0);
      Object object0 = new Object();
      Range range2 = Range.of(2147483647L, 2147483647L);
      List<Range> list0 = range2.complement(range0);
      assertTrue(list0.isEmpty());
      
      Range range3 = range1.intersection(range2);
      Long long1 = new Long(2147483647L);
      boolean boolean1 = range3.equals(range2);
      assertTrue(boolean1 == boolean0);
      
      Range range4 = Range.ofLength(2147483647L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.9308389750985424
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854773787L);
      range1.endsBefore(range1);
      range1.complement(range0);
      Range range2 = Range.of(4294967295L, 9223372036854775807L);
      Long long0 = new Long(9223372036854773787L);
      Long.toUnsignedString(9223372036854775807L);
      range0.equals(long0);
      Object object0 = new Object();
      range2.equals(object0);
      Range.of(4294967295L);
      Long long1 = new Long((-1347L));
      range2.equals(long1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = Range.of(range_CoordinateSystem0, (-2619L), 4294967295L);
      range3.intersection(range1);
      Long long2 = new Long(9223372036854773787L);
      Range.of((-2618L));
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-2618L), 9223372036851963768L);
      Range range4 = Range.of((-529L));
      range4.isSubRangeOf(range3);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036851963768L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.698410250432322
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(4108L, 4108L);
      Spliterator<Long> spliterator0 = range0.spliterator();
      range0.complement(range0);
      range0.equals(spliterator0);
      Range range1 = Range.of(4108L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 316L, 316L);
      range2.endsBefore(range1);
      range0.spliterator();
      Range range3 = Range.ofLength(9223372036854774556L);
      long long0 = (-1951L);
      Range.of((-1951L));
      Object object0 = new Object();
      range1.equals(range3);
      range2.equals(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem.values();
      Object object1 = new Object();
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(4108L, 316L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.4720010982222576
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(9223372036854773787L, 9223372036854773787L);
      Long long0 = new Long(9223372036854773787L);
      range0.equals("yEx|+:XK^-");
      Range range1 = Range.of(9223372036854773787L);
      range0.intersects(range1);
      range1.spliterator();
      Range.ofLength(9223372036854773787L);
      Object object0 = new Object();
      range1.isEmpty();
      range1.equals(long0);
      Range range2 = Range.ofLength(343L);
      Object object1 = new Object();
      range1.complement(range0);
      range2.startsBefore(range0);
      // Undeclared exception!
      try { 
        range1.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2236415716100577
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854773787L);
      Long long0 = new Long(9223372036854775807L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1L, 9223372036854775807L);
      range2.complement(range0);
      range2.complement(range0);
      Object object0 = new Object();
      Range range3 = Range.ofLength(9223372036854775807L);
      Range range4 = range3.intersection(range1);
      range4.equals(long0);
      range3.equals(range2);
      Range.CoordinateSystem.values();
      String string0 = "cOL<F.[BE8YoJe<";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("cOL<F.[BE8YoJe<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.cOL<F.[BE8YoJe<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2471607303971637
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854773787L);
      Long long0 = new Long(9223372036854775807L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1L, 9223372036854775807L);
      range2.complement(range0);
      range2.complement(range0);
      Object object0 = new Object();
      Range range3 = Range.ofLength(9223372036854775807L);
      Range range4 = range3.intersection(range1);
      range4.equals(long0);
      Range range5 = Range.ofLength(9223372036854775807L);
      Range range6 = range5.intersection(range1);
      Long long1 = new Long((-1L));
      range6.equals(range5);
      // Undeclared exception!
      try { 
        Range.ofLength((-40L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.622808206472249
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      long long0 = range0.getLength();
      //  // Unstable assertion: assertEquals(1L, long0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      //  // Unstable assertion: assertNotSame(range1, range0);
      
      Long long1 = new Long(1L);
      Range range2 = Range.of(1L, 2147483647L);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      Object object0 = new Object();
      Range.of((-1L), 1428L);
      Object object1 = new Object();
      Range range3 = Range.ofLength(1L);
      Range range4 = Range.of((-1032L));
      Range range5 = Range.of(65535L, 65535L);
      Range.Comparators.values();
      Range range6 = range4.intersection(range5);
      //  // Unstable assertion: assertTrue(range6.equals((Object)range3));
      //  // Unstable assertion: assertNotSame(range6, range3);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.5283246694958237
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of((-1307L));
      Range range1 = Range.ofLength(65L);
      range1.intersects(range0);
      range0.isSubRangeOf(range1);
      Range range2 = Range.ofLength(3528L);
      Long long0 = new Long(9223372036854773787L);
      range1.spliterator();
      Range range3 = Range.ofLength(3528L);
      Object object0 = new Object();
      range1.equals(range2);
      Range range4 = Range.ofLength(3528L);
      range0.equals(range4);
      Range.of(3259L);
      Range.CoordinateSystem.values();
      Object object1 = new Object();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-478L), 3528L);
      range3.intersection(range4);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("}/:17&1\"#DQ]VB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.}/:17&1\"#DQ]VB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.7312719914355412
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(1L);
      Range range1 = Range.of((-2147484953L));
      Range.of(range_CoordinateSystem0, (-2147484953L), (-2147484953L));
      Range range2 = Range.ofLength(1037L);
      Range.Builder range_Builder2 = range_Builder1.contractBegin((-2147484953L));
      range_Builder1.shift(1L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.Builder range_Builder3 = range_Builder2.contractBegin((-1362L));
      Range.of(1815L);
      Range range3 = Range.of((-2147484953L), 1L);
      assertNotSame(range3, range1);
      
      range_Builder3.contractEnd((-1362L));
      range2.equals(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range2.equals(object2);
      Long long0 = new Long(1037L);
      Long.compareUnsigned(1745L, 774L);
      Object object3 = new Object();
      boolean boolean0 = range2.equals(object0);
      assertFalse(boolean0);
      
      Range range4 = Range.of(68L);
      Range range5 = range2.intersection(range4);
      assertFalse(range5.isEmpty());
      assertSame(range5, range4);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.5417097894268186
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range range1 = Range.of((-128L), (-128L));
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range1.equals(range0);
      Range range3 = Range.of(0L);
      range3.startsBefore(range1);
      range1.spliterator();
      Range range4 = Range.ofLength(0L);
      Object object0 = new Object();
      Long long0 = new Long((-128L));
      range4.equals(long0);
      range2.equals(range4);
      // Undeclared exception!
      try { 
        Range.ofLength((-1878L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.6390393356039596
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(32767L);
      Range range1 = Range.of((-128L), 68L);
      range1.complement(range0);
      Long long0 = new Long((-1895L));
      Long.toUnsignedString(68L);
      Object object0 = new Object();
      Range.of(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-4544L), (-128L));
      Range range3 = Range.of((-939L));
      range2.complement(range3);
      Object object1 = new Object();
      Range.ofLength(2147483647L);
      Range range4 = Range.of(range_CoordinateSystem0, (-4544L), 2123L);
      range0.intersection(range4);
      Range.of((-4544L), (-1666L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("BO@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.BO@
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.483289100867658
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(3213518L);
      Long long0 = new Long(65535L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.removeAll(linkedList0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "m%hdhxz,vlJV|j:{za");
      predicate0.negate();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "m%hdhxz,vlJV|j:{za");
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.and(predicate1);
      linkedList0.removeIf(predicate0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList1.add(range0);
      range0.complementFrom(linkedList0);
      range0.getLength();
      Range.Comparators.values();
      range0.spliterator();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.complementFrom(linkedList0);
      Range range1 = Range.of(range_CoordinateSystem0, 32767L, 3213518L);
      range0.intersection(range1);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("ka#.kr,&V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.ka#.kr,&V
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.5531480226161243
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 398L, 32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Range range1 = Range.of(range_CoordinateSystem0, (-2177L), 32767L);
      range1.complement(range0);
      Object object0 = new Object();
      Range.ofLength(398L);
      // Undeclared exception!
      try { 
        Range.parseRange("X{_yW,G./YG@2H5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse X{_yW,G./YG@2H5 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.4762240570949103
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = 32767L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = (-1377L);
      Range range1 = Range.of(range_CoordinateSystem0, (-1377L), 4120L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      range1.getLength();
      range1.intersects(range0);
      Range.ofLength(32767L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775411L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8966379195843395
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.ofLength(9223372036854773787L);
      Long long0 = new Long(9223372036854775807L);
      Range.CoordinateSystem.values();
      Collection<Range> collection0 = null;
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7886260379670387
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      Long long1 = new Long(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.618044200919684
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Long long0 = new Long(397L);
      Range range0 = Range.of((-6583L));
      range0.intersects(range0);
      List<Range> list0 = range0.complement(range0);
      long long1 = 32370L;
      Range range1 = Range.of(32370L, 32370L);
      range1.equals(range_Builder0);
      range1.startsBefore(range0);
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      Object object1 = new Object();
      range0.complementFrom(list0);
      Range.CoordinateSystem.values();
      range1.equals((Object) null);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2325L, (-6583L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.16936783015811
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = (-1307L);
      long long1 = 68L;
      Range range0 = Range.of(68L, 68L);
      Long long2 = new Long((-1307L));
      long long3 = (-9223372032559808512L);
      Long.toUnsignedString((-9223372032559808512L));
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long4 = new Long((-1L));
      Long.toUnsignedString((-1307L));
      Object object1 = new Object();
      range0.equals("");
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2351294716114505
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.ofLength(9223372036854773787L);
      Long long0 = new Long(9223372036854775807L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 9223372036854775807L);
      range1.complement(range0);
      Object object0 = new Object();
      Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, 8740L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.7404935167360143
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(2022L);
      Range range1 = Range.ofLength(2022L);
      range1.getBegin();
      range0.intersects(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-811L));
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(2022L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range2.getEnd(range_CoordinateSystem2);
      assertEquals(0L, long1);
      
      Range range3 = Range.of(range_CoordinateSystem1, 255L, 2022L);
      boolean boolean0 = range2.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range range4 = Range.ofLength(877L);
      range4.spliterator();
      Range range5 = range1.intersection(range2);
      assertTrue(range5.isEmpty());
      
      range1.startsBefore(range3);
      Range.CoordinateSystem.values();
      Range.ofLength(1247L);
      Range range6 = Range.of((-2147483648L));
      assertFalse(range6.isEmpty());
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range range7 = Range.of(range_CoordinateSystem3, (-529L), 877L);
      assertFalse(range7.isEmpty());
      
      Range range8 = Range.of((-1L));
      assertSame(range8, range2);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 2690L;
      long long1 = 9223372036854774556L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854774556L, (-32768L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32769 would make range [9223372036854774555 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.513915589060744
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(68L, 68L);
      Long long0 = new Long(68L);
      Long.toUnsignedString((-9223372032559808537L));
      Object object0 = new Object();
      Range range1 = Range.of((-2171L));
      Long long1 = new Long(0L);
      Object object1 = new Object();
      Range.CoordinateSystem.values();
      Object object2 = new Object();
      range1.intersection(range0);
      Range range2 = Range.of((-9223372032559808537L), (-9223372032559808537L));
      range2.equals(object1);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("9223372041149743079");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.9223372041149743079
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.4973276659130086
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(68L, 68L);
      Long long0 = new Long((-1307L));
      Long.toUnsignedString((-9223372032559808512L));
      Object object0 = new Object();
      Range range1 = Range.of((-2171L));
      Long long1 = new Long(0L);
      Range range2 = Range.ofLength(9223372036800448122L);
      Range.Builder range_Builder0 = new Range.Builder(185L);
      range_Builder0.contractEnd(185L);
      boolean boolean0 = range2.equals((Object) null);
      Object object1 = new Object();
      range1.equals((Object) null);
      Long long2 = new Long((-965L));
      Long.compareUnsigned(671L, 9223372036800448122L);
      Long long3 = new Long(9223372036800382588L);
      boolean boolean1 = range0.equals(long3);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.7379896126898835
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-1307L));
      Range range1 = Range.ofLength(65L);
      range1.intersects(range0);
      range0.isSubRangeOf(range1);
      Range range2 = Range.ofLength(3528L);
      Long long0 = new Long(9223372036854773787L);
      Range.CoordinateSystem.values();
      Range range3 = Range.of(range_CoordinateSystem0, 1252L, 9223372036854775807L);
      range3.complement(range2);
      Object object0 = new Object();
      Range range4 = Range.ofLength(855L);
      range4.getEnd();
      Range.ofLength(854L);
      range0.intersection(range3);
      range3.equals(range0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("/\"Gf3dzL_v|wlP~'>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators./\"Gf3dzL_v|wlP~'>
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.219049361968651
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = 32767L;
      Range range0 = Range.of(32767L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(32767L);
      range0.endsBefore(range1);
      range0.spliterator();
      Range range2 = Range.ofLength(2147483647L);
      range2.equals(range_Builder0);
      long long1 = (-2085L);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-2085L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.1910832025476887
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(2730727L);
      Long long0 = new Long(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "m%hdhxz,vlJV|j:{za");
      Predicate<Object> predicate1 = predicate0.negate();
      Long long1 = new Long(9223372036854743042L);
      predicate1.test(long1);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.and(predicate0);
      linkedList0.forEach(consumer0);
      range0.complementFrom(linkedList0);
      range0.getLength();
      Range.Comparators.values();
      range0.spliterator();
      Range range1 = Range.ofLength(0L);
      range1.getEnd();
      Range range2 = Range.ofLength(2730727L);
      range2.intersection(range0);
      Long long2 = new Long(9223372036854775807L);
      range2.equals(long2);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("m%hdhxz,vlJV|j:{za");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.m%hdhxz,vlJV|j:{za
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.302130091510701
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = (-1307L);
      Range range0 = Range.of((-1307L));
      Range range1 = Range.ofLength(65L);
      range1.intersects(range0);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = (-2147483648L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-2147483648L), 9223372036854773787L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.811248163546732
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(1L);
      Range range1 = Range.of((-2147484953L));
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder2 = range_Builder1.contractBegin((-2147484953L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range3 = Range.of(1815L);
      Range.of((-2147484953L), 1L);
      range1.equals(range_Builder1);
      Range range4 = Range.ofLength(32767L);
      assertFalse(range4.isEmpty());
      
      range_Builder2.contractEnd(185L);
      boolean boolean0 = range2.equals(range0);
      assertTrue(range2.isEmpty());
      
      Object object0 = new Object();
      boolean boolean1 = range3.equals(range_Builder0);
      assertTrue(boolean1 == boolean0);
      
      Long long0 = new Long(671L);
      Long.compareUnsigned(1890L, 2645L);
      range0.equals(range_Builder2);
      Range range5 = range3.asRange();
      assertFalse(range5.equals((Object)range0));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.777730876335105
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of((-3407L), 65535L);
      Long long0 = new Long(65535L);
      range0.equals("WXS^^DSj8*-\"");
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-1950L);
      Range range1 = Range.of(range_CoordinateSystem0, (-3407L), (-1950L));
      Range range2 = Range.ofLength(255L);
      Long.compareUnsigned(65535L, 255L);
      range2.complement(range1);
      Object object0 = new Object();
      Range range3 = Range.of((-3407L), 4294967295L);
      range3.complement(range0);
      Range range4 = Range.of(255L);
      range4.intersection(range1);
      Long long2 = new Long((-1950L));
      range1.equals(long0);
      // Undeclared exception!
      try { 
        Range.ofLength((-3407L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.581749601401232
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2147483648L), 3310L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      range_Builder1.expandEnd(4294967295L);
      Range.of(9223372036854743041L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder2.build();
      Range.of(32767L, 4294967295L);
      Long long0 = new Long((-1317L));
      Range range2 = Range.ofLength(268L);
      range1.endsBefore(range2);
      Range.of((-2147483648L), (-2301L));
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.246802689847489
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of((-1307L));
      Range range0 = Range.of(range_CoordinateSystem0, (-1307L), (-1307L));
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.ofLength((-1307L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.7202674786240606
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(32767L);
      Range range1 = Range.of((-128L), 68L);
      range1.complement(range0);
      Long long0 = new Long((-1895L));
      Long.toUnsignedString(68L);
      Object object0 = new Object();
      Range.of(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-4544L), (-128L));
      Range range3 = Range.of((-939L));
      range2.complement(range3);
      Object object1 = new Object();
      Range.ofLength(2147483647L);
      Range range4 = Range.of(range_CoordinateSystem0, (-4544L), 2123L);
      range0.intersection(range4);
      Range range5 = Range.of(range_CoordinateSystem0, 2123L, 3419532L);
      range5.equals("68");
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("68");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.68
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.6484383345463107
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-128L);
      range_Builder0.shift((-128L));
      range_Builder0.build();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.062463874143123
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Long long0 = new Long(2147483647L);
      range0.equals("WXS^^DSj8*-\"");
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      Long long1 = new Long(2147483647L);
      Object object0 = new Object();
      long long2 = (-128L);
      Range.Builder range_Builder0 = new Range.Builder((-1507L), (-128L));
      range_Builder0.contractEnd((-128L));
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.9060854067790225
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Long long0 = new Long(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) long0, 2147483647L);
      range0.intersection(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1645L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.6194104551349797
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range range1 = range_Builder3.build();
      Range range2 = Range.of((-1307L), 2147483647L);
      Long long0 = new Long(1428L);
      Range range3 = range0.intersection(range2);
      Range range4 = Range.ofLength(2147483647L);
      range3.endsBefore(range4);
      Range range5 = Range.of((-32768L), (-1452L));
      range5.equals(range0);
      range2.startsBefore(range0);
      Range range6 = Range.of((-32768L), 2147483647L);
      Object object0 = new Object();
      range1.isEmpty();
      range5.isSubRangeOf(range6);
      range0.isSubRangeOf(range1);
      Range.of((-1307L));
      Range range7 = Range.of(1428L, 3842L);
      assertFalse(range7.equals((Object)range6));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.9853090733261873
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 398L, 9223372036854775411L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854775412L, long0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.250548692130538
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.of((-1307L), (-1307L));
      Range.of(range_CoordinateSystem0, 1535L, 2147483647L);
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals((-1307L), long0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.3399350825332186
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Long long0 = new Long(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.stream();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range1 = Range.of(2147483647L, 2147483647L);
      linkedList0.removeAll(linkedList1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Long long1 = new Long(2147483647L);
      Range range3 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range3.intersection(range1);
      range2.equals(range3);
      range0.complement(range1);
      Object object0 = new Object();
      Range range4 = Range.ofLength(2147483647L);
      range4.intersection(range1);
      range2.equals(long1);
      Range.CoordinateSystem.values();
      Range.Comparators range_Comparators0 = Range.Comparators.ARRIVAL;
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.4270830200628324
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-1307L));
      Range.ofLength(2147483647L);
      range0.equals(range1);
      long long0 = 65535L;
      Range.ofLength(65535L);
      long long1 = 65534L;
      // Undeclared exception!
      try { 
        Range.of(65534L, (-886L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.463913162205236
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.expandEnd(2147483647L);
      Range.of((-1307L));
      Range.of(2147483647L, 2147483647L);
      Range.ofLength(65535L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = range_Builder3.copy();
      Range.Comparators.values();
      Range.Builder range_Builder5 = range_Builder4.contractEnd(65520L);
      assertNotSame(range_Builder3, range_Builder5);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.5447766008378365
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder2.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-1307L), 2147483647L);
      assertFalse(range2.isEmpty());
      
      List<Range> list0 = range1.split(2147483647L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      Range.CoordinateSystem.values();
      range1.equals(list0);
      assertFalse(list0.contains(range1));
      assertEquals(2, list0.size());
      
      range0.startsBefore(range1);
      range_CoordinateSystem1.toString();
      Range range3 = Range.of(32767L, 2147483647L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.410460785992096
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      long long0 = 9223372036854773787L;
      Range range1 = Range.ofLength(9223372036854773787L);
      Long long1 = new Long(9223372036854775807L);
      Range.CoordinateSystem.values();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.add(range1);
      List<Range> list0 = range0.complementFrom(linkedList0);
      range1.getLength();
      Range.Comparators.values();
      range1.spliterator();
      Range.CoordinateSystem.values();
      range1.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-353L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -354 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.288563624102828
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.of(9223372036854775807L);
      Range range0 = Range.ofLength(9223372036854773787L);
      Long long0 = new Long(9223372036854775807L);
      Long.toUnsignedString(9223372036854775807L);
      Object object0 = new Object();
      Range range1 = Range.of((-412L));
      Long long1 = new Long(1012L);
      Object object1 = new Object();
      range1.equals(long0);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(long1);
      Long long2 = new Long((-1018L));
      Long.compareUnsigned((-1895L), 250L);
      Object object4 = new Object();
      // Undeclared exception!
      try { 
        Range.of(1012L, 250L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.547568686511181
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L), (-128L));
      Range range1 = Range.of((-128L), (-128L));
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(1196L);
      Range.of((-384L));
      range1.intersection(range3);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-9223372036854775742L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.of(1815L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854773786L, (-2147484953L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147484953 would make range [9223372036854773786 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.5314442861531186
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(2730727L);
      Long long0 = new Long(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.removeAll(linkedList1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "m%hdhxz,vlJV|j:{za");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.and(predicate0);
      range0.isSubRangeOf(range0);
      linkedList1.forEach(consumer0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList1);
      range0.getLength();
      Range.Comparators.values();
      range0.spliterator();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.complementFrom(linkedList1);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 32767L);
      range0.intersection(range1);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("ka#.kr,&V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.ka#.kr,&V
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.332006314257274
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854773787L);
      Long long0 = new Long(9223372036854775807L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 9223372036854775807L;
      Range range2 = Range.of(range_CoordinateSystem0, 1L, 9223372036854775807L);
      range2.complement(range0);
      range0.startsBefore(range1);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.6944392725198285
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(1L);
      Range range1 = Range.of((-2147484953L));
      range0.intersection(range1);
      range_Builder1.contractBegin((-2147484953L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.of(1815L);
      Range.of((-2147484953L), 1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-2147484953L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.3995549389598776
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-2454L));
      range1.complement(range0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.5094042916177983
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(2730727L);
      Long long0 = new Long(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.removeAll(linkedList1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Long long1 = new Long(9223372036854743042L);
      predicate1.test(long1);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      linkedList0.removeIf(predicate3);
      linkedList1.forEach(consumer0);
      range0.isEmpty();
      range0.complementFrom(linkedList1);
      range0.getLength();
      Range.Comparators.values();
      range0.spliterator();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.complementFrom(linkedList1);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 32767L);
      range0.intersection(range1);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("ka#.kr,&V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.ka#.kr,&V
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.6855823227311886
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.ofLength(2022L);
      Range range1 = Range.of(2022L, 2022L);
      range1.getBegin();
      range0.intersects(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-811L));
      Range.of(2022L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2022L, 2022L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 255L, 2022L);
      range2.isSubRangeOf(range1);
      Range range4 = Range.ofLength(877L);
      range4.spliterator();
      range1.intersection(range2);
      range1.startsBefore(range3);
      Range.CoordinateSystem.values();
      Range.ofLength(1247L);
      long long0 = (-2147483648L);
      Range.of((-2147483648L));
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.6388462402026893
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(1L);
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.intersection(range1);
      Range.of((-2147484953L));
      Range.of(range_CoordinateSystem0, (-2147484953L), (-2147484953L));
      Range.ofLength(1037L);
      Range.of(100L);
      Long long0 = new Long(222L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Object object1 = new Object();
      Range range2 = Range.of(range_CoordinateSystem1, 1L, 4294967295L);
      Range range3 = Range.of(1037L);
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.348794555941643
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of(127L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.0402429255970764
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.ofLength(2022L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 255L, 2022L);
      Range.of(255L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-783L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.413728520415479
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(3899L);
      range_Builder0.copy();
      range_Builder0.build();
      range_Builder0.expandEnd(414L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.ofLength(414L);
      range0.split(2021L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 782L, 414L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.9761388013384353
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.0876030473124376
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      range1.complement(range0);
      range1.intersects(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.0472770782777556
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(2730727L);
      Long long0 = new Long(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.removeAll(linkedList1);
      linkedList0.add(range0);
      range0.complementFrom(linkedList1);
      range0.getLength();
      Range.Comparators.values();
      range0.spliterator();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.267246881926398
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = (-1317L);
      long long1 = 2147483647L;
      Range.of((-1317L), 2147483647L);
      Long long2 = new Long(1428L);
      Range.ofLength(2147483647L);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.434478262019049
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(32767L);
      Range range0 = Range.of((-128L), 68L);
      Long long0 = new Long((-1895L));
      Long.toUnsignedString(68L);
      Object object0 = new Object();
      Range range1 = Range.of(32767L);
      Long long1 = new Long((-1347L));
      Object object1 = new Object();
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-1507L));
      range_Builder1.contractEnd((-1018L));
      range0.equals(range_Builder1);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      Long long2 = new Long(32767L);
      Long.compareUnsigned(671L, 32767L);
      Object object4 = new Object();
      range1.equals(object4);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        range1.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.5382726097656576
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(2730727L);
      Long long0 = new Long(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range0.endsBefore(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "m%hdhxz,vlJV|j:{za");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      linkedList0.removeIf(predicate3);
      linkedList1.forEach(consumer0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList1);
      long long1 = new Long(2730727L);
      Range.Comparators.values();
      range0.spliterator();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.complementFrom(linkedList1);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 32767L);
      range0.intersection(range1);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("ka#.kr,&V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.ka#.kr,&V
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.383678118809411
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-3407L), 65535L);
      Long long0 = new Long(65535L);
      range0.equals("WXS^^DSj8*-\"");
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      Range range1 = Range.of((-3407L));
      Object object0 = new Object();
      Long long1 = new Long(0L);
      range0.equals(long1);
      Long long2 = new Long(0L);
      range0.equals(long2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem.values();
      Object object1 = new Object();
      range1.intersection(range0);
      Range.of((-3407L), 4108L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("%ee!R9]]/w\"47");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.%ee!R9]]/w\"47
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.572381248142761
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.ofLength(2022L);
      Range range1 = Range.ofLength(2022L);
      Long long0 = new Long(2022L);
      range0.intersects(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift((long) long0);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (long) long0, (long) long0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 255L, 2022L);
      range2.isSubRangeOf(range1);
      Range range4 = Range.ofLength(877L);
      range4.spliterator();
      range1.intersection(range2);
      range1.startsBefore(range3);
      Range.CoordinateSystem.values();
      Range.ofLength(1221L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, (-811L), 127L);
      Object object0 = new Object();
      range4.isSubRangeOf(range1);
      Range range5 = Range.ofLength(4294967295L);
      range5.spliterator();
      range4.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.ofLength((-1245L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.656424986102207
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(861L);
      Range range0 = range_Builder1.build();
      range_Builder0.expandEnd(3587L);
      Range range1 = Range.of((-172L), (-172L));
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.endsBefore(range1);
      range1.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-32768L), 2163L);
      Object object0 = new Object();
      Range range2 = Range.of((-1L));
      range2.spliterator();
      boolean boolean1 = range2.startsBefore(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(range2.isEmpty());
      
      Range.CoordinateSystem.values();
      range0.isSubRangeOf(range1);
      assertFalse(range0.isEmpty());
      
      Range range3 = Range.of(861L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.2773363635869
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.of(68L, 68L);
      Long long0 = new Long((-1307L));
      Long.toUnsignedString((-9223372032559808512L));
      Object object0 = new Object();
      Long long1 = new Long(0L);
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of((-1307L));
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.5612714805123873
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 398L, 32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(range_CoordinateSystem0, 398L, 4294967295L);
      Range range2 = Range.ofLength(4294967295L);
      range0.complement(range2);
      Object object0 = new Object();
      Range range3 = Range.ofLength(1620L);
      Range range4 = Range.of(5743L);
      range1.intersection(range4);
      range3.equals((Object) null);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("cOL<F.[BE8YoJe<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.cOL<F.[BE8YoJe<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.408498836992725
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(2730727L);
      Long long0 = new Long(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.removeAll(linkedList1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "m%hdhxz,vlJV|j:{za");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      linkedList0.removeIf(predicate3);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range1.complement(range0);
      Object object0 = new Object();
      Range range2 = Range.ofLength(3380L);
      Range range3 = Range.ofLength(2730727L);
      Range range4 = range3.intersection(range2);
      range4.equals(predicate1);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.5983942265251065
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder2.build();
      List<Range> list0 = range1.split(2147483647L);
      //  // Unstable assertion: assertEquals(2, list0.size());
      
      Range.CoordinateSystem.values();
      List<Range> list1 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list1.contains(range1));
      //  // Unstable assertion: assertEquals(2, list1.size());
      
      boolean boolean0 = range0.startsBefore(range1);
      boolean boolean1 = range1.isSubRangeOf(range0);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.752979635137287
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-1307L));
      Range range1 = Range.ofLength(65L);
      range1.intersects(range0);
      range0.isSubRangeOf(range1);
      Range range2 = Range.ofLength(3528L);
      Long long0 = new Long(9223372036854773787L);
      Range.CoordinateSystem.values();
      Range range3 = Range.of(range_CoordinateSystem0, 1231L, 9223372036854775807L);
      List<Range> list0 = range3.complement(range2);
      Object object0 = new Object();
      Range.CoordinateSystem.values();
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-1L), (-1344L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.1478507409106244
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 398L, 398L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.containsAll(linkedList1);
      Range.of(0L, 0L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 1018L, 32767L);
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 2147483647L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.4067969652494594
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(68L, 68L);
      range0.getEnd();
      Long long0 = new Long((-1307L));
      Long.toUnsignedString((-9223372032559808512L));
      Object object0 = new Object();
      Range range1 = Range.of((-2171L));
      range1.intersection(range0);
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.7040165932621427
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Long long0 = new Long(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.removeAll(linkedList1);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      range0.getLength();
      Range.Comparators.values();
      Range range1 = Range.of(61L, 2147483647L);
      Range range2 = Range.of((-834L), 130L);
      Object object0 = new Object();
      Range.of(153L);
      range1.isSubRangeOf(range2);
      Range range3 = Range.of(153L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.438984809058962
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      long long0 = (-23L);
      Range range1 = Range.of((-128L), (-128L));
      Range range2 = range1.intersection(range0);
      range0.endsBefore(range2);
      range0.complement(range2);
      Range range3 = Range.of((-128L), (-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Long long1 = new Long(1L);
      Long.toUnsignedString(1368L);
      Object object0 = new Object();
      range2.equals(object0);
      range1.startsBefore(range2);
      range3.iterator();
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 4436L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.0146300137242736
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(858L);
      range0.spliterator();
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem.values();
      Long long0 = new Long(858L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(9223372036854775807L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.4872233307640372
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(68L, 68L);
      Long long0 = new Long((-1307L));
      Range.Builder range_Builder0 = new Range.Builder(3606L, 3606L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      long long1 = (-32698L);
      long long2 = (-2109L);
      Range.of((-32698L), (-2109L));
      Long long3 = new Long((-9223372032559808512L));
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-32698L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.175014765940686
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.of((-2554L));
      Range.of((-2147483648L), (-2554L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.7078300497242607
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854773787L);
      range1.endsBefore(range1);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      Range range2 = Range.of(4294967295L, 9223372036854775807L);
      Long long0 = new Long(9223372036854773787L);
      Long.toUnsignedString(9223372036854775807L);
      boolean boolean0 = range0.equals(long0);
      boolean boolean1 = range1.startsBefore(range2);
      assertFalse(boolean1 == boolean0);
      
      Range range3 = Range.of(2139L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean2 = range1.isEmpty();
      range0.isSubRangeOf(range2);
      boolean boolean3 = range2.isSubRangeOf(range1);
      assertTrue(boolean3 == boolean2);
      
      Range range4 = Range.of((-2680L));
      assertFalse(range4.isEmpty());
      
      range4.intersection(range3);
      String string0 = range3.toString();
      assertEquals("[ 2139 .. 9223372036854775807 ]/0B", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.513060744263012
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(1L);
      Range range1 = Range.of((-2147484953L));
      range0.intersection(range1);
      range_Builder1.contractBegin((-2147484953L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long((-1307L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range range2 = Range.of(range_CoordinateSystem0, (-32768L), (-1L));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.3252648963708533
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372032559808537L), 32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.containsAll(linkedList1);
      Long long0 = new Long(255L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 644L, 32767L);
      Range range1 = Range.of(2147483647L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.5713497539339683
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.ofLength(2147483647L);
      Range range1 = Range.of(range_CoordinateSystem0, (-1307L), 2147483647L);
      range1.getLength();
      Range.Comparators.values();
      range0.spliterator();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 255L, 255L);
      range2.intersection(range1);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("ka#.kr,&V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.ka#.kr,&V
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.3208293029756586
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of(68L, 68L);
      Long long0 = new Long((-1307L));
      Long.toUnsignedString((-9223372032559808512L));
      Range range1 = Range.of((-2161L));
      assertFalse(range1.isEmpty());
      
      Long long1 = new Long((-9223372032559808512L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1L, 127L);
      Range range3 = range2.intersection(range0);
      assertSame(range3, range0);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.3372213429326836
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.of(68L, 68L);
      Long long0 = new Long((-1307L));
      Long.toUnsignedString((-9223372032559808512L));
      Object object0 = new Object();
      Range.of((-2171L));
      Long long1 = new Long(0L);
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 1L, 127L);
      Range range1 = Range.of((-32768L));
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.9190235060608334
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Long long0 = new Long((-1895L));
      Long.toUnsignedString(68L);
      Object object0 = new Object();
      Long long1 = new Long((-1347L));
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of((-1027L));
      long long2 = range0.getLength();
      assertEquals(1L, long2);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.564367432789057
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(2730727L);
      Long long0 = new Long(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.removeAll(linkedList1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      String string0 = "m%hdhxz,vlJV|j:{za";
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "m%hdhxz,vlJV|j:{za");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      Long long1 = new Long(9223372036854743042L);
      predicate1.test(long1);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      predicate3.or(predicate1);
      linkedList0.removeIf(predicate3);
      linkedList1.forEach(consumer0);
      linkedList0.add(range0);
      range0.getLength();
      Range.Comparators.values();
      range0.spliterator();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.complementFrom(linkedList1);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 32767L);
      Range range2 = range0.intersection(range1);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range2.forEach(consumer1);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.525650697100311
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Long long0 = new Long(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.stream();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range1 = Range.of(2147483647L, 2147483647L);
      linkedList0.removeAll(linkedList1);
      linkedList0.add(range0);
      assertTrue(linkedList0.contains(range0));
      
      range0.complementFrom(linkedList0);
      range0.getLength();
      Range.Comparators.values();
      range0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem.values();
      Range.of(4294967295L, 4294967295L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.8492350266891995
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(1221L);
      Range range1 = Range.ofLength(3959L);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.5311943349424375
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range range1 = Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range2 = range_Builder0.build();
      assertTrue(range2.isEmpty());
      
      range_Builder0.expandEnd(414L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range3 = Range.ofLength(414L);
      Range.of(2021L, 4294967295L);
      boolean boolean0 = range0.intersects(range3);
      assertFalse(boolean0);
      
      range1.isSubRangeOf(range0);
      boolean boolean1 = range3.startsBefore(range1);
      assertFalse(range3.isEmpty());
      
      boolean boolean2 = range0.isSubRangeOf(range1);
      assertFalse(boolean2 == boolean1);
      assertSame(range1, range0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.1045204658906624
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder2.build();
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.1798199884524974
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2116L), 1L);
      Range range1 = Range.of(4294967295L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.6500073110510054
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      long long0 = 0L;
      Range range1 = Range.of((-128L), (-128L));
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range2 = range_Builder0.build();
      range_Builder0.expandEnd(414L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range3 = Range.of((-2782L), 414L);
      range2.complement(range3);
      range_Builder0.build();
      Range.ofLength(0L);
      range1.endsBefore(range2);
      range1.spliterator();
      Range range4 = Range.of((-128L), (-128L));
      Object object0 = new Object();
      range2.isEmpty();
      range4.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.3397505691317666
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of(68L, 68L);
      Long long0 = new Long((-1307L));
      Long.toUnsignedString((-9223372032559808512L));
      Object object0 = new Object();
      Range.of(2644334L);
      Long long1 = new Long(0L);
      Object object1 = new Object();
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1L, 127L);
      Range range1 = Range.of((-902L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.1775684364247834
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getEnd();
      Range.Builder range_Builder0 = new Range.Builder(0L, 1L);
      range_Builder0.shift((-297L));
      range_Builder0.contractEnd(0L);
      range_Builder0.contractEnd((-959L));
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.expandEnd((-1L));
      Range range1 = Range.of(1702L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.8152049266199466
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.ofLength(2023L);
      long long0 = (-1053L);
      // Undeclared exception!
      try { 
        range0.split((-1053L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.1693678301581105
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Long long0 = new Long(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.removeAll(linkedList1);
      linkedList0.add(range0);
      range0.split(2147483647L);
      range0.getLength();
      Range.Comparators.values();
      range0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 32767L, (-1101L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.1028108080271117
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.copy();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.containsAll(linkedList0);
      // Undeclared exception!
      try { 
        Range.of(0L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.5172234612560707
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(32767L);
      Range.of((-128L), 68L);
      Long long0 = new Long((-1895L));
      Long.toUnsignedString(68L);
      Object object0 = new Object();
      Range range0 = Range.of(32767L);
      Long long1 = new Long((-1347L));
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1895L), (-157L));
      Object object2 = new Object();
      Range.of(32767L, 2147483647L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.9877714524221313
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-1404L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.ofLength((-2212L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.272604695731434
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.copy();
      range_Builder0.build();
      range_Builder0.expandEnd(414L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.ofLength(414L);
      Range range1 = Range.of(2021L, 4294967295L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.014635675651483
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandEnd((-1307L));
      range_Builder0.contractBegin((-1307L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder2.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("\"b%Jmg*i*i\"LSG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.\"b%Jmg*i*i\"LSG
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.2804463647322626
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      long long0 = 0L;
      Range range1 = Range.of((-128L), (-128L));
      Range range2 = range1.intersection(range0);
      range0.endsBefore(range2);
      range0.complement(range2);
      long long1 = 4294967295L;
      Range.of((-128L), (-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.419670661204948
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range range1 = range_Builder2.build();
      range1.complement(range0);
      range0.intersects(range1);
      range0.endsBefore(range0);
      range1.startsBefore(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.2798544456151792
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(2690L);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 127L;
      long long1 = 2470L;
      Range range1 = Range.of(range_CoordinateSystem1, 127L, 2470L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.r
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.741313119289258
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(861L);
      Range range0 = range_Builder1.build();
      range_Builder0.expandEnd(3587L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = Range.of((-172L), (-172L));
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      range0.endsBefore(range1);
      assertFalse(range0.isEmpty());
      
      range1.spliterator();
      Range range2 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-32768L), 2163L);
      Object object0 = new Object();
      Range range3 = Range.of((-1L));
      boolean boolean0 = range3.startsBefore(range1);
      Range.CoordinateSystem.values();
      boolean boolean1 = range2.isSubRangeOf(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.3560441989452388
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, 1L, 255L);
      Range.of((-2171L));
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 2557L, (-32769L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.4764738187002164
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(range_CoordinateSystem0, (-1307L), 0L);
      range1.isEmpty();
      range0.isSubRangeOf(range1);
      Range range2 = Range.of((-286L), 4294967295L);
      range1.endsBefore(range0);
      range2.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      range0.endsBefore(range2);
      range0.spliterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-1196L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.2760701300004973
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.of(9223372036854775807L);
      Long long0 = new Long((-255L));
      Long.toUnsignedString(9223372036854775807L);
      Object object0 = new Object();
      Range range0 = Range.of((-255L));
      Long long1 = new Long(9223372036854773787L);
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Object object2 = new Object();
      Range range1 = Range.of(range_CoordinateSystem0, (-2139L), 4107L);
      assertNotSame(range1, range0);
      
      Range range2 = Range.of(2273L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-1404L));
      range_Builder0.expandBegin((-55L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("=RK", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse =RK into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(32767L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.0140772805713656
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 398L, 32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.containsAll(linkedList1);
      // Undeclared exception!
      try { 
        Range.of(398L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.166416424822993
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder((-128L), (-128L));
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(range_CoordinateSystem0, 1535L, 1535L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.9482560524834778
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854773787L);
      Long long0 = new Long(9223372036854775807L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      range0.endsBefore(range1);
      range0.spliterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-2517L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.5410144719509327
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of((-1307L));
      Range range1 = Range.ofLength(65L);
      range1.isEmpty();
      range0.isSubRangeOf(range1);
      long long0 = 9223372036854773787L;
      Range range2 = Range.of((-534L), 3528L);
      range2.endsBefore(range1);
      range2.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range2.getBegin(range_CoordinateSystem0);
      range2.endsBefore(range1);
      range1.spliterator();
      Range.ofLength(215L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 32767L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.3613496225638433
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.of(68L, 68L);
      Long long0 = new Long((-1307L));
      Long.toUnsignedString((-9223372032559808512L));
      Object object0 = new Object();
      Range.of((-2171L));
      Object object1 = new Object();
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1L, 127L);
      Range range0 = Range.of(3899L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.9347481931568455
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-81L), 2147483647L);
      long long0 = new Long(2147483647L);
      assertEquals(2147483647L, long0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.2382478183441252
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder2.build();
      Range range1 = Range.of(range_CoordinateSystem0, 1535L, 2147483647L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 2730727L;
      Range range0 = Range.ofLength(2730727L);
      long long1 = 0L;
      Long long2 = new Long(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range_Builder0.expandBegin((-5136L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.1209529939096874
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.of(68L, 68L);
      Long.toUnsignedString((-2637L));
      Object object0 = new Object();
      Range.of(126L);
      Long long0 = new Long(2147483647L);
      Object object1 = new Object();
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2432L, 126L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.249006789420284
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.of(68L, 68L);
      Long long0 = new Long((-1307L));
      Long.toUnsignedString((-9223372032559808512L));
      Object object0 = new Object();
      Long long1 = new Long(0L);
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of((-1307L));
      Range range1 = Range.of((-32768L));
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.886165178199426
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      assertTrue(range0.isEmpty());
  }
}
