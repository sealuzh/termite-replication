/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 09:39:07 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.8466122126267304
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(4294967303L);
      Range range1 = Range.ofLength(4294967303L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals("0oo");
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range_Builder0.build();
      range_Builder0.contractEnd(32767L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd(32767L);
      Range range3 = range_Builder0.build();
      Range range4 = Range.of(4294967295L);
      assertFalse(range4.isEmpty());
      
      boolean boolean1 = range2.equals(range1);
      assertFalse(boolean1 == boolean0);
      
      Range range5 = range1.intersection(range2);
      assertFalse(range5.isEmpty());
      
      Long long0 = new Long(255L);
      boolean boolean2 = range3.equals(long0);
      assertSame(range1, range5);
      assertFalse(boolean2 == boolean1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.643569966633872
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1733L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      
      Range range2 = range0.intersection(range1);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.7025061042987977
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      range_Builder2.copy();
      range_Builder1.expandEnd(1753L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder2.build();
      range_Builder0.contractEnd(2150L);
      range_Builder1.expandEnd(403L);
      Range range2 = range_Builder2.build();
      Range.of((-2147483648L));
      range1.equals(range_CoordinateSystem0);
      Range range3 = range2.intersection(range0);
      assertFalse(range3.isEmpty());
      
      range2.equals((Object) null);
      assertSame(range2, range3);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.985090324633344
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1753L, 1753L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder2.build();
      Range.Builder range_Builder3 = range_Builder0.copy();
      Range.Builder range_Builder4 = range_Builder2.expandEnd(4294967295L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder2);
      Range range1 = range_Builder4.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder3);
      range_Builder2.expandBegin(1793L);
      Range range2 = Range.ofLength(1753L);
      range1.equals((Object) null);
      Range range3 = range2.intersection(range1);
      assertTrue(range3.isEmpty());
      
      Range range4 = Range.of(4294967295L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=4.079137171956887
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = 815L;
      Range range0 = Range.ofLength(815L);
      String string0 = range0.toString();
      long long1 = 1L;
      List<Range> list0 = range0.split(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2406L, 2406L);
      range0.split(815L);
      Range range2 = Range.parseRange("[ 0 .. 814 ]/0B");
      Range range3 = range0.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Range range4 = range3.intersection(range2);
      range4.complement(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.complementFrom(list0);
      range1.getEnd(range_CoordinateSystem1);
      Range range5 = Range.parseRange(string0);
      long long2 = 1654L;
      List<Range> list1 = range4.split(long2);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range6 = Range.parseRange(string0, range_CoordinateSystem2);
      range6.getEnd();
      range6.getBegin();
      Range.Comparators.values();
      range4.isSubRangeOf(range3);
      range2.complementFrom(list0);
      range5.complementFrom(list1);
      Range.of(long2, long1);
      long long3 = (-233L);
      Range.of(long3, long0);
      long long4 = (-2049L);
      Range.of(long4, long1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.845599672034723
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = 32767L;
      Range range0 = Range.of(32767L, 32767L);
      long long1 = 74L;
      Range range1 = Range.ofLength(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      long long2 = 9986L;
      range0.isEmpty();
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      Range.of(9986L);
      range1.isSubRangeOf(range1);
      long long3 = (-103L);
      // Undeclared exception!
      try { 
        Range.of(9986L, (-103L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3272878519146096
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.build();
      Range range2 = Range.of(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range2);
      Range.Builder range_Builder2 = range_Builder0.shift(1368L);
      Range.Builder range_Builder3 = new Range.Builder(range1);
      range_Builder2.build();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.9108148492165222
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = (-193L);
      Range range0 = Range.of((-193L), (-193L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Long long1 = new Long((-193L));
      range0.iterator();
      long long2 = (-429L);
      long long3 = 65543L;
      Range range1 = Range.of((-9223372036854775808L));
      Long long4 = new Long(65543L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      range1.complementFrom(list1);
      Long long5 = new Long((-429L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 65543L, (long) long1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.818676623704202
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775785L);
      Object object0 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Long long0 = new Long(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.of(9223372036854775785L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775785L, 9223372036854775732L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.773428577609852
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775785L);
      Range.Builder range_Builder1 = new Range.Builder(range1);
      range1.equals(range0);
      Range range2 = range_Builder1.build();
      range2.toString();
      Range range3 = range0.intersection(range1);
      range1.complement(range0);
      Object object0 = new Object();
      range2.equals((Object) null);
      range0.intersection(range3);
      range2.toString();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 4294967294 .. 9223372036854775784 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 4294967294 .. 9223372036854775784 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.8314305796919523
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 127L);
      Range range1 = Range.ofLength(127L);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.77327820609414
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775785L);
      Range.Builder range_Builder1 = new Range.Builder(range1);
      range1.equals(range0);
      Range range2 = range_Builder1.build();
      range0.intersection(range1);
      List<Range> list0 = range1.complement(range0);
      assertEquals(2, list0.size());
      
      Object object0 = new Object();
      range2.equals(object0);
      boolean boolean0 = range2.equals(range1);
      assertSame(range2, range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.640397045689548
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = 9223372036854775733L;
      Range range0 = Range.of(9223372036854775733L, 9223372036854775733L);
      range0.spliterator();
      Range range1 = Range.of(9223372036854775733L, 9223372036854775733L);
      Range range2 = Range.of(9223372036854775733L);
      range2.complement(range0);
      range2.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775733L, 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.810079547896912
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.of(9223372036854775733L, 9223372036854775733L);
      Range range0 = Range.of(9223372036854775733L, 9223372036854775733L);
      Range range1 = Range.ofLength(9223372036854775733L);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      Range range2 = Range.of(9223372036854775733L, 9223372036854775733L);
      Range range3 = Range.of(9223372036854775733L);
      Object object1 = new Object();
      Range range4 = Range.ofLength(829L);
      range0.equals((Object) null);
      Range range5 = range2.intersection(range4);
      assertTrue(range5.isEmpty());
      assertSame(range2, range3);
      assertFalse(range4.isEmpty());
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.5792089376813347
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift(4294967295L);
      range_Builder0.copy();
      range_Builder0.shift(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range1 = range0.intersection(range0);
      // Undeclared exception!
      try { 
        range1.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5314039307111553
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.iterator();
      Range range1 = Range.of((-429L));
      long long0 = (-2595L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -429 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.839325713305562
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = 127L;
      Range range0 = Range.ofLength(127L);
      long long1 = 2292L;
      Range range1 = Range.of(2292L);
      range1.isEmpty();
      range0.intersects(range1);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      range1.complementFrom(list1);
      range1.complementFrom(list1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.7734799333953877
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-128L));
      range_Builder1.shift(9223372036854774277L);
      range_Builder0.expandBegin(1752L);
      range_Builder1.contractBegin((-32768L));
      Range.Builder range_Builder2 = new Range.Builder((-128L), (-128L));
      range_Builder2.expandBegin((-128L));
      Range range1 = Range.of((-128L));
      Range.Builder range_Builder3 = new Range.Builder(range1);
      range_Builder2.expandEnd(1793L);
      Range range2 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range2.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -128 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.743019512510229
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1753L, 1753L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder2.build();
      Range.Builder range_Builder3 = range_Builder0.copy();
      Range range1 = Range.of(1535L);
      range1.equals((Object) null);
      Range range2 = range_Builder3.build();
      Range range3 = range2.intersection(range0);
      Range range4 = Range.ofLength(1535L);
      Range range5 = Range.of(1535L);
      range4.complement(range5);
      Object object0 = new Object();
      range1.equals(range3);
      range1.equals(range_Builder0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.7726444784616167
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1753L, 1753L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder2.build();
      Range.Builder range_Builder4 = range_Builder0.copy();
      Range range1 = Range.of(1535L);
      range_Builder4.build();
      range_Builder2.shift(1535L);
      Range range2 = range_Builder4.build();
      range0.complement(range2);
      Range.Builder range_Builder5 = new Range.Builder(range2);
      Range range3 = range_Builder4.build();
      Range.of(1535L);
      Range range4 = range0.intersection(range2);
      List<Range> list0 = range3.complement(range4);
      assertEquals(0, list0.size());
      
      boolean boolean0 = range2.equals(range1);
      assertFalse(boolean0);
      
      Range.Comparators.values();
      Range range5 = range_Builder1.build();
      assertSame(range5, range4);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.616150125223836
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.of(1313L);
      Range range0 = Range.ofLength(23L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range1);
      Range.Builder range_Builder2 = range_Builder0.shift(23L);
      Range.Builder range_Builder3 = new Range.Builder(range1);
      Range range2 = range_Builder2.build();
      Range range3 = range0.intersection(range2);
      List<Range> list0 = range0.complement(range3);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertFalse(list0.contains(range3));
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.4466097454928177
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.of(4294967303L, 4294967303L);
      Range range0 = Range.ofLength(4294967303L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-316L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.746524870618966
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-472L), 32767L);
      Range range1 = Range.of(603L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      List<Range> list0 = range1.complementFrom(linkedList0);
      range1.complementFrom(list0);
      range0.equals("org.jcvi.jillion.core.io.IOUtil");
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.io.IOUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.io.IOUtil
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=4.060728994412197
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1111L);
      range_Builder0.shift(1111L);
      range_Builder0.build();
      Range range0 = Range.of((-2015L), 2147483647L);
      Range range1 = Range.of(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range1.equals((Object) null);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of((-2015L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range3.getEnd(range_CoordinateSystem0);
      assertEquals(2147483648L, long0);
      
      List<Range> list0 = range2.complement(range3);
      assertSame(range2, range1);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.960891370818509
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      range0.equals("r*+^R2l8.:@");
      Range range1 = Range.of((-1019L), (-1019L));
      Range range2 = range1.intersection(range0);
      Range range3 = range0.intersection(range1);
      range1.complement(range2);
      Object object0 = new Object();
      range3.equals(range2);
      Long long0 = new Long((-4251L));
      Long long1 = new Long(4341L);
      range2.equals(long1);
      Range range4 = Range.of(633L);
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.5790370687960014
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.of(4294967295L);
      Range range0 = Range.ofLength(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range1);
      range_Builder0.shift(4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range range2 = range_Builder0.build();
      range2.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1601L, (-196L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.5362783263743567
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1535L, 1535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder2.build();
      range_Builder0.copy();
      Range.Builder range_Builder3 = range_Builder2.expandEnd(4294967295L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      range_Builder3.shift(4294967295L);
      range_Builder3.build();
      range_Builder3.contractEnd(1535L);
      range_Builder2.expandEnd(4294967295L);
      Range.of(1535L, 1535L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range$EmptyIntRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range$EmptyIntRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=4.03753918861833
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(32767L, 32767L);
      Range range1 = Range.of(65535L);
      range1.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range2 = Range.ofLength(65535L);
      range2.isEmpty();
      range0.intersects(range1);
      List<Range> list0 = range2.complement(range0);
      List<Range> list1 = range2.complementFrom(list0);
      Range range3 = Range.ofLength(3613L);
      range3.complementFrom(list1);
      long long0 = 2155L;
      Range range4 = Range.of(9986L);
      range0.isSubRangeOf(range4);
      // Undeclared exception!
      try { 
        Range.of(3613L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.778443373601558
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775785L);
      Object object0 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Long long0 = new Long(4294967295L);
      boolean boolean0 = range1.equals("DbLL<rJchLX6[Ca`");
      assertFalse(boolean0);
      
      range1.intersection(range0);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.633140141433129
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = (-32755L);
      long long1 = 2290L;
      Range.of((-32755L), 2403L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1754L, 2290L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Long long2 = new Long(2290L);
      range0.equals(long2);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854774273L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775054 would make range [1753 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=4.015307379175357
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(1795L);
      range0.getLength();
      range1.getLength();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Range range2 = range1.intersection(range0);
      long long0 = 9223372036854774073L;
      Range range3 = Range.of(9223372036854774073L);
      List<Range> list0 = range3.complement(range0);
      range3.complementFrom(list0);
      Object object0 = new Object();
      range1.intersection(range0);
      range2.asRange();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("y:88f=f[;p4>$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.y:88f=f[;p4>$
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.4712336294552264
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(4294967303L);
      Range range1 = Range.ofLength(4294967303L);
      Object object0 = new Object();
      range0.equals("0oo");
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(object1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Object object3 = new Object();
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertNotSame(range2, range0);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range0));
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.249309518090034
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(13L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      range0.equals((Object) null);
      Range range1 = range0.intersection(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.468035024304028
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(23L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(421L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Object object0 = new Object();
      Long long0 = new Long(2036L);
      Range range2 = Range.ofLength(2036L);
      range1.equals(range2);
      assertFalse(range1.isEmpty());
      
      Range range3 = range0.intersection(range2);
      Range range4 = range0.intersection(range3);
      assertFalse(range4.isEmpty());
      assertSame(range4, range0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.972844730105429
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(23L);
      Range range1 = Range.of(23L);
      range0.intersects(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      
      Range range2 = Range.ofLength(421L);
      Range range3 = Range.of((-9223372036854775808L));
      Object object0 = new Object();
      range3.equals(object0);
      Object object1 = new Object();
      Range range4 = Range.of(23L);
      range2.equals(range4);
      Range range5 = range2.intersection(range1);
      Object object2 = new Object();
      range0.equals(object2);
      //  // Unstable assertion: assertSame(range0, range5);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.580765507713066
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Object object0 = new Object();
      range0.equals(">D_$kK");
      Object object1 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.574447152982619
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.shift((-128L));
      range_Builder0.shift(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range1);
      Range range2 = range1.intersection(range0);
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.isEmpty());
      
      range1.intersection(range2);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
      
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.8848814599654227
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1753L, 1753L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder2.build();
      Range.Builder range_Builder3 = range_Builder2.expandEnd(4294967295L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range range1 = range_Builder3.build();
      range_Builder3.contractEnd(1535L);
      Range.Builder range_Builder5 = new Range.Builder();
      range_Builder2.expandEnd((-2444L));
      range0.equals("k{B}Te,2Px4i{P.:Ts");
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of((-1884L));
      range3.equals((Object) null);
      Range range4 = range0.intersection(range2);
      assertFalse(range4.isEmpty());
      assertSame(range4, range0);
      assertFalse(range4.equals((Object)range1));
      
      boolean boolean0 = range3.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2433546687129593
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.ofLength(1787L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.8701968257164943
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1753L, 1753L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder2.build();
      range_Builder0.copy();
      Range.Builder range_Builder3 = range_Builder2.expandEnd(4294967295L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      range_Builder0.contractBegin((-32768L));
      Range range1 = range_Builder3.build();
      range_Builder3.contractEnd(1535L);
      range_Builder2.expandEnd(4294967295L);
      range_Builder3.build();
      Range range2 = Range.of(298L);
      range1.equals(range_Builder2);
      assertFalse(range1.isEmpty());
      
      Range range3 = range2.intersection(range0);
      assertFalse(range0.isEmpty());
      assertTrue(range3.isEmpty());
      
      boolean boolean0 = range2.equals(range_Builder4);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.7101908555359278
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(4294967295L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775785L);
      Long long0 = new Long(1L);
      Range range2 = Range.of(9223372036854775807L, 9223372036854775807L);
      assertFalse(range2.equals((Object)range1));
      
      Range range3 = Range.of(1L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.797321618988343
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1535L, 1535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder2.build();
      Range.Builder range_Builder4 = range_Builder0.copy();
      Range range1 = Range.of(1535L);
      Range range2 = range_Builder4.build();
      range0.complement(range2);
      Range.Builder range_Builder5 = new Range.Builder(range2);
      Range range3 = range_Builder4.build();
      Range.of(1535L);
      Range range4 = range0.intersection(range2);
      List<Range> list0 = range3.complement(range4);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      boolean boolean0 = range2.equals(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range.Comparators.values();
      Range range5 = range_Builder1.build();
      //  // Unstable assertion: assertSame(range5, range4);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.9562689789778545
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range range1 = Range.of((-128L), (-128L));
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(1705L);
      Long long0 = new Long((-128L));
      List<Range> list0 = range2.complement(range2);
      range2.complementFrom(list0);
      range2.complementFrom(list0);
      List<Range> list1 = range2.complementFrom(list0);
      assertEquals(0, list1.size());
      
      Range range4 = range0.intersection(range1);
      List<Range> list2 = range0.complement(range3);
      assertEquals(1, list2.size());
      
      range4.equals(range2);
      assertSame(range4, range0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.918479920857252
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(23L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 421L, 421L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(711L);
      Range.Builder range_Builder3 = range_Builder2.copy();
      Range range2 = Range.of(255L);
      Range range3 = range_Builder3.build();
      range2.complement(range1);
      Range.Builder range_Builder4 = new Range.Builder(range3);
      Range range4 = range_Builder3.build();
      Range.of(23L);
      Range range5 = range0.intersection(range4);
      List<Range> list0 = range5.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range5));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Range range6 = Range.ofLength(23L);
      range1.equals(range6);
      Range.Comparators.values();
      range_Builder2.build();
      range3.getLength();
      boolean boolean0 = range0.isSubRangeOf(range2);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertSame(range0, range5);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.9512412531070833
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Object object0 = new Object();
      range0.equals(object0);
      range0.complement(range0);
      Object object1 = new Object();
      range0.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      range0.forEach(consumer0);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Long long0 = new Long((-318L));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=4.119833339468405
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 127L);
      Range range2 = Range.ofLength(127L);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer1);
      List<Range> list0 = range1.split(127L);
      List<Range> list1 = range2.complementFrom(list0);
      //  // Unstable assertion: assertEquals(2, list1.size());
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.7741080614098035
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift(4294967295L);
      range_Builder0.copy();
      range_Builder0.shift(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range1 = Range.of(4294967295L);
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range2.complement(range0);
      assertEquals(0, list0.size());
      
      boolean boolean0 = range2.equals(range1);
      assertSame(range2, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=4.012168972310521
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(4294967295L);
      range0.endsBefore(range1);
      Range range2 = Range.of(4294967295L);
      range1.equals("org.jcvi.jillion.core.io.IOUtil");
      List<Range> list0 = range2.complement(range1);
      Range.Builder range_Builder1 = new Range.Builder(4294967295L, 4294967295L);
      range_Builder0.expandBegin(640L);
      range0.complement(range1);
      range2.complementFrom(list0);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder2 = new Range.Builder();
      range1.equals(range1);
      Range range3 = Range.of(640L);
      assertFalse(range3.equals((Object)range0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.960540441816249
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of((-193L), (-193L));
      Range range1 = Range.of((-32768L));
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-1198L));
      range_Builder0.shift(2290L);
      Range range2 = Range.of((-32768L), 1805L);
      Object object0 = new Object();
      range2.equals(range0);
      Range.Builder range_Builder1 = new Range.Builder(2290L);
      Range range3 = range_Builder1.build();
      boolean boolean0 = range2.isSubRangeOf(range0);
      assertFalse(boolean0);
      assertFalse(range2.equals((Object)range1));
      
      Range range4 = range3.intersection(range1);
      assertNotSame(range1, range2);
      assertFalse(range3.isEmpty());
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.92461726954202
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-193L), 4140L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.shift(9223372032559808510L);
      range_Builder0.shift(4140L);
      Range range1 = range_Builder0.build();
      Range range2 = Range.of(2314L, 2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range2);
      range_Builder1.expandEnd(4294967295L);
      Range range3 = range1.intersection(range2);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.of((-193L));
      range4.equals(range0);
      range4.intersection(range1);
      assertSame(range1, range3);
      
      range4.equals(range_Builder1);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3120147589866185
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = 5790L;
      Range.of(5790L);
      Range range0 = Range.ofLength(5790L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.7813679667140216
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(32767L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range2 = range_Builder0.build();
      Range range3 = Range.of(122L, 32767L);
      Range.Builder range_Builder2 = new Range.Builder(range3);
      range_Builder0.shift(284L);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range.Builder range_Builder4 = new Range.Builder(32767L);
      range_Builder4.build();
      Range range4 = range1.intersection(range0);
      assertTrue(range4.isEmpty());
      
      List<Range> list0 = range0.complement(range2);
      assertFalse(list0.contains(range1));
      
      boolean boolean0 = range2.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.8299861724187325
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Object object0 = new Object();
      range0.equals(object0);
      range0.complement(range0);
      Object object1 = new Object();
      range0.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.equals((Object) null);
      Object object2 = new Object();
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = 4294967295L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775785L, (-1685L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1686 would make range [9223372036854775785 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.3536274010794567
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3082L), (-3082L));
      Object object1 = new Object();
      Long long0 = new Long(140L);
      Long.compareUnsigned(0L, 140L);
      range0.equals(object0);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      Object object4 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.935252076835808
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.expandBegin(4294967296L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder0.shift(4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range range2 = range_Builder2.build();
      Range.ofLength(2215L);
      // Undeclared exception!
      range2.split(2215L);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=4.051098696215743
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.ofLength(1795L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      long long1 = range1.getLength();
      assertEquals(1795L, long1);
      
      long long2 = range0.getLength();
      assertTrue(long2 == long0);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Range range2 = Range.of(0L, 2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.expandEnd((-128L));
      Range range3 = range1.intersection(range2);
      assertSame(range3, range1);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.of(1795L);
      range0.equals((Object) null);
      Range range5 = Range.ofLength(1198L);
      Range range6 = range0.intersection(range5);
      range6.equals(range4);
      assertFalse(range4.isEmpty());
      assertNotSame(range5, range3);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.552387124683076
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of(1766L, 4294967295L);
      Range.of(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      long long0 = (-1381L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1381L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.5120859053758453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(1766L, 4294967295L);
      Range.of(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long.compareUnsigned(1608L, 140L);
      Object object2 = new Object();
      range0.equals((Object) null);
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.917133360027443
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(1766L, 4294967295L);
      Range range1 = Range.ofLength(1766L);
      range0.intersects(range1);
      range0.intersection(range1);
      Range.of(9223372036854775807L);
      Long long0 = new Long((-2894L));
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      range0.complementFrom(list0);
      Long long1 = new Long(65543L);
      // Undeclared exception!
      try { 
        Range.ofLength((-3141L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3791183732498955
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(140L);
      Range range0 = Range.of(1403L);
      Long.getLong("0B");
      range0.equals((Object) null);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range1 = Range.ofLength(140L);
      Object object5 = new Object();
      Range range2 = Range.ofLength(140L);
      range0.equals(range2);
      Range range3 = range2.intersection(range1);
      assertSame(range3, range1);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.6413077191590553
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of((-32768L), 2290L);
      Object object0 = new Object();
      range0.equals(range0);
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.ofLength(255L);
      assertFalse(range1.isEmpty());
      
      Object object4 = new Object();
      boolean boolean0 = range0.equals(object2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.5804353167722014
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 9223372036854775785L;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775785L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.6368853251967277
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775785L);
      Object object0 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = 1805L;
      long long1 = (-2830L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775785L, (-2830L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2830 would make range [9223372036854775785 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.355631365764884
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(32768L);
      Range range1 = Range.ofLength(4294965530L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean1 = range1.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      
      Object object3 = new Object();
      Range range2 = range1.intersection(range0);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.3580718455239014
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1753L, 1753L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.3273065486508333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(140L);
      Long.compareUnsigned(1608L, 140L);
      Object object2 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.of(9223372036854775784L);
      Object object3 = new Object();
      range0.equals(object3);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.737887538749636
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(4108L, 4108L);
      Range range1 = Range.of(4108L, 4294967295L);
      Object object0 = new Object();
      range0.isSubRangeOf(range1);
      range0.complement(range1);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.of(65535L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=4.003118216921165
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(1795L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      long long1 = range1.getLength();
      assertEquals(1795L, long1);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer2);
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer3);
      range0.forEach(consumer1);
      Long long2 = new Long(255L);
      Range.of((-1L), 4713L);
      range1.intersection(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.8983482924510393
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.of((-128L), (-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), 2491L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range range1 = Range.of(range_CoordinateSystem0, 2491L, 4529L);
      range_Builder0.build();
      Range range2 = range0.intersection(range1);
      Range.of(range_CoordinateSystem0, (-128L), 4529L);
      range2.spliterator();
      // Undeclared exception!
      try { 
        Range.of(2491L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.2569803887253284
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.ofLength(4294967295L);
      Object object0 = new Object();
      range0.equals("0oo");
      range0.getBegin();
      Object object1 = new Object();
      Long long0 = new Long((-1L));
      Object object2 = new Object();
      range0.equals(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-2769L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.248190181983977
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.of(1529L);
      Range.ofLength(65535L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.497697495067037
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(1795L);
      long long0 = new Long(1795L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-441L));
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.0808360831049293
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.of(9223372036854771700L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("0B", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.641860195690319
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1733L, 1733L);
      Range.Builder range_Builder1 = new Range.Builder(4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(1733L);
      range_Builder0.shift((-1L));
      Range range0 = range_Builder2.build();
      Range.Builder range_Builder3 = range_Builder2.expandEnd(4294967295L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range range1 = range_Builder3.build();
      range_Builder2.expandEnd(4294967295L);
      Range range2 = range_Builder4.build();
      Range.of(298L);
      Range range3 = range0.intersection(range2);
      assertSame(range3, range0);
      
      boolean boolean0 = range1.intersects(range2);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=4.0608427293874
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.isSubRangeOf(range0);
      Range range1 = Range.ofLength(4294967295L);
      range1.intersects(range0);
      List<Range> list0 = range0.complement(range1);
      range0.complement(range1);
      range1.complementFrom(list0);
      range0.intersection(range1);
      Range range2 = Range.of((-1922L));
      range1.complement(range2);
      range2.isSubRangeOf(range0);
      Range range3 = Range.of(1037L, 1037L);
      range3.startsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 532L, (-1922L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.7178380673102036
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.ofLength(4294967295L);
      Object object0 = new Object();
      range0.equals("0oo");
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.ofLength(4294967295L);
      Object object4 = new Object();
      Range.of(1521L, 4294967295L);
      Range range2 = range1.intersection(range0);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.457663386901383
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.of((-193L), (-193L));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.9400012524285564
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(23L);
      Range range1 = Range.of(23L);
      range0.intersects(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(23L, 23L);
      Range range3 = Range.of(1694L);
      range3.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(1694L, 9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854775807L);
      range_Builder1.expandBegin(255L);
      Range range4 = Range.of(255L, 4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(range4);
      Range.Builder range_Builder3 = new Range.Builder(871L);
      range_Builder0.expandEnd((-1000L));
      Range.of(871L);
      range4.intersection(range3);
      range3.intersection(range2);
      // Undeclared exception!
      try { 
        Range.of(1765L, (-3647L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.835407598665707
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-488L), (-488L));
      Range range1 = Range.of(603L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      List<Range> list0 = range1.complementFrom(linkedList0);
      range1.complementFrom(list0);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.io.IOUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.io.IOUtil
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.7356571447689957
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.of(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder((-1405L), 4294967295L);
      range_Builder0.shift((-1405L));
      Range.of((-1694L), 2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(2432L);
      range_Builder0.expandEnd((-3194L));
      Range range0 = Range.of((-1405L));
      Range range1 = Range.of((-1245L), 342L);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.8008239750504558
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.of(1773L, 4294967262L);
      Range.Builder range_Builder0 = new Range.Builder(1773L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(4294967262L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range0 = Range.of(1355L);
      Range range1 = Range.of(1355L, 2147483647L);
      assertFalse(range1.equals((Object)range0));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-92L), 4294967262L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.492893510811553
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of((-193L), (-193L));
      long long0 = 1677L;
      Object object0 = new Object();
      range0.equals("0oo");
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-193L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.3580569436321572
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(32768L);
      Range range1 = Range.ofLength(4294965530L);
      Object object0 = new Object();
      range1.equals(range0);
      Object object1 = new Object();
      long long0 = range1.getBegin();
      assertEquals(0L, long0);
      
      Object object2 = new Object();
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      
      Object object3 = new Object();
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.4864979773741553
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Object object0 = new Object();
      range0.getBegin();
      range0.equals(">D_$kK");
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long(0L);
      Object object3 = new Object();
      range0.equals(object3);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.354100214318228
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L), (-128L));
      long long1 = 1287L;
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.89246779958895
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range range1 = Range.of((-128L), (-128L));
      range0.intersects(range1);
      Range range2 = range0.intersection(range1);
      Range.of(1705L);
      Long long0 = new Long((-128L));
      List<Range> list0 = range2.complement(range2);
      range2.complementFrom(list0);
      range2.complementFrom(list0);
      Long long1 = new Long(65543L);
      Range range3 = Range.of(9223372036854775807L);
      range3.asRange();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=4.1666147171704635
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(32767L, 32767L);
      Range range1 = Range.of(65555L);
      range1.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.isEmpty();
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      Range range2 = Range.of(9986L);
      range1.isSubRangeOf(range1);
      Range.parseRange("[ 32767 .. 32767 ]/0B");
      Range.Comparators.values();
      range0.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 9986L, 32767L);
      range3.startsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, (-3353L), 74L);
      Range.of((-103L), 74L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.928826034965099
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = 7L;
      Range range0 = Range.ofLength(7L);
      Range range1 = Range.of(7L);
      range0.isSubRangeOf(range1);
      List<Range> list0 = range1.split(7L);
      range0.complementFrom(list0);
      Range range2 = Range.of(7L);
      range1.complement(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.of(7L, 7L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      String string0 = "Range coordinates %d, %d are not valid %s coordinates";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Range coordinates %d, %d are not valid %s coordinates");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Range coordinates %d, %d are not valid %s coordinates
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.8799963049349255
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.of(4294967295L);
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.ofLength(4294967295L);
      range0.isEmpty();
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.parseRange("[ 4294967295 .. 4294967296 ]/SB", range_CoordinateSystem1);
      range1.complement(range2);
      List<Range> list0 = range0.complement(range2);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      range0.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.of(255L, (-103L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.7582591562325756
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1753L, 1753L);
      Range.Builder range_Builder1 = new Range.Builder(4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(1753L);
      range_Builder2.build();
      Range.Builder range_Builder3 = range_Builder2.expandEnd(4294967295L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      range_Builder4.build();
      range_Builder3.build();
      Range.Builder range_Builder5 = new Range.Builder(1479L);
      long long0 = 4497L;
      range_Builder4.expandEnd(4497L);
      Range.of((-1L));
      long long1 = 1719L;
      // Undeclared exception!
      try { 
        Range.of(1479L, (-58L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.522262973942854
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = 9223372036854775733L;
      Range.of(9223372036854775733L, 9223372036854775733L);
      Range range0 = Range.of(9223372036854775733L, 9223372036854775733L);
      Range range1 = Range.of(9223372036854775733L);
      range1.split(9223372036854775733L);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775733L, 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.6013141265764466
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = (-128L);
      Range.of((-128L), (-128L));
      long long1 = (-1L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-128L));
      Range.of(4294967294L, 4294967294L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_Builder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.2960208100883572
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(1795L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.ofLength(1795L);
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range0.equals(object5);
      assertFalse(boolean0);
      
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.686779855777484
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-429L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2595L), (-193L));
      List<Range> list0 = range1.complement(range0);
      assertEquals(2, list0.size());
      
      Range range2 = range0.intersection(range1);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.6889954761383947
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L), (-128L));
      range0.endsBefore(range0);
      range0.intersects(range0);
      range0.intersection(range0);
      range0.isEmpty();
      long long1 = 2296L;
      Range.of(2296L, 65543L);
      Range.of(1705L);
      Long long2 = new Long(2296L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(65543L, 2296L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.710805242447242
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(4294967295L);
      range0.isEmpty();
      range1.complement(range0);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, (-32768L), (-3272L));
      range_Builder3.shift((-50L));
      Range.Builder range_Builder4 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-3272L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.6722093079230937
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 9223372036854775733L;
      Range range0 = Range.of(9223372036854775733L, 9223372036854775733L);
      Range.of(9223372036854775733L, 9223372036854775733L);
      Range range1 = Range.of(9223372036854775733L);
      range1.complement(range0);
      Range.of(9223372036854775733L, 9223372036854775733L);
      Range range2 = Range.ofLength(9223372036854775733L);
      range1.endsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775733L, 394L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.6499975981463133
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1753L, 1753L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder2.build();
      assertFalse(range0.isEmpty());
      
      range_Builder0.copy();
      Range.Builder range_Builder3 = range_Builder2.expandEnd(4294967295L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range range1 = range_Builder3.build();
      assertFalse(range1.isEmpty());
      
      range_Builder3.contractEnd(1535L);
      range_Builder2.expandEnd(4294967295L);
      Range range2 = Range.ofLength(5356L);
      assertFalse(range2.isEmpty());
      
      Range.ofLength(4294967295L);
      Range range3 = Range.ofLength(4294967295L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.569338418135477
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.ofLength(1535L);
      List<Range> list0 = range0.split(1535L);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      
      Range range1 = Range.of(65535L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.08332035538405
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(4294965530L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.6147917123362823
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-2681L), 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 255L, 4294967295L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-2681L), long0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem2);
      assertEquals(256L, long1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.4610796334557716
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.of(32767L, 32767L);
      Range.of(65535L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1198L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.5267953721217777
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.of((-193L), (-193L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 785L, 4294967295L);
      Long long0 = new Long(785L);
      Range range0 = Range.of(range_CoordinateSystem0, 785L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.749616572010765
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      range0.spliterator();
      Range range1 = range0.intersection(range0);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      range0.startsBefore(range0);
      Range range2 = Range.of(727L);
      assertFalse(range2.isEmpty());
      
      boolean boolean1 = range0.startsBefore(range0);
      long long0 = new Long(727L);
      boolean boolean2 = range1.intersects(range0);
      assertFalse(boolean2 == boolean1);
      assertSame(range1, range0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=4.01251713658839
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder2.build();
      range_Builder0.copy();
      Range.Builder range_Builder3 = range_Builder2.expandEnd(4294967320L);
      range_Builder3.build();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      range_Builder3.build();
      range_Builder3.contractEnd(1535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-438L), 4294967320L);
      Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, 111L, 255L);
      Range.CoordinateSystem.values();
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(2080L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.599300229831456
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-1198L));
      range_Builder0.shift(2290L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(4294967295L);
      range_Builder1.shift(1316L);
      Range.of((-2103L), 1805L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(1805L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range.of((-32768L));
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 2290L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.9458636023156344
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of((-193L));
      Range range1 = Range.of((-32768L));
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-1198L));
      Range.Builder range_Builder1 = range_Builder0.shift(2290L);
      Range.Builder range_Builder2 = range_Builder0.expandBegin(4294967295L);
      Range range2 = Range.of((-2103L), 1805L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder(1805L);
      range_Builder1.expandEnd((-2103L));
      Range range3 = Range.of((-32768L));
      Range.of((-2103L), 1719L);
      range2.intersection(range3);
      Range range4 = Range.of(9223372036854775807L, 9223372036854775807L);
      assertFalse(range4.equals((Object)range0));
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.1786334995603744
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(1785L);
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.6192215687189644
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals("0oo");
      assertFalse(boolean0);
      
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range.of(1521L, 4294967295L);
      Range range2 = range0.intersection(range0);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.9280613634910804
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      range0.getEnd();
      Object object0 = new Object();
      range0.equals(object0);
      range0.complement(range0);
      Object object1 = new Object();
      range0.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Long long0 = new Long((-318L));
      // Undeclared exception!
      try { 
        Range.of((-1L), (-318L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.7118881910556474
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range range1 = Range.of((-128L), (-128L));
      range1.endsBefore(range0);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range1);
      
      Long long0 = new Long((-128L));
      List<Range> list0 = range2.complement(range2);
      range2.complement(range2);
      range2.complementFrom(list0);
      range2.complementFrom(list0);
      Long long1 = new Long(65543L);
      List<Range> list1 = range0.complement(range2);
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.6420499230360233
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1391L, 1391L);
      Range range1 = Range.of(1391L);
      range0.intersection(range1);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-1404L));
      range_Builder0.expandBegin((-55L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.437082204107301
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.of(4294967303L, 4294967303L);
      Range range0 = Range.ofLength(4294967303L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.5450556374081756
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of(1766L, 1766L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      Object object2 = new Object();
      Long long0 = new Long(255L);
      range0.equals(object1);
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean1 = range0.isSubRangeOf(range0);
      assertFalse(boolean1 == boolean0);
      
      Range range1 = range0.intersection(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.931599691668276
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1753L, 1753L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(1753L, 1753L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 2147483647L;
      Range range1 = Range.of(range_CoordinateSystem1, 1753L, 2147483647L);
      range0.intersects(range1);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range range2 = Range.of(1535L);
      range2.iterator();
      range0.isSubRangeOf(range1);
      long long1 = (-103L);
      long long2 = 4384L;
      long long3 = 140L;
      long long4 = (-2580L);
      // Undeclared exception!
      try { 
        Range.of(140L, (-2580L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.3272954596351867
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.of(4294967295L, 4294967295L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = new Long(4294967295L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-32767L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.9525681270802617
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(1795L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(255L);
      Range.of((-1L), 4713L);
      Range range1 = Range.ofLength(1795L);
      Range range2 = Range.of((-4440L));
      List<Range> list0 = range0.complement(range2);
      assertSame(range0, range1);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      
      long long1 = range2.getLength();
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.7505286028550393
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-4496L));
      Range range1 = Range.of((-4496L), (-4496L));
      range0.complement(range1);
      long long0 = 2290L;
      // Undeclared exception!
      try { 
        Range.of((-1L), (-4496L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.7745632521334196
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long((-1L));
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.of(1752L, 1752L);
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
      
      Range range3 = Range.of((-2804L), 1752L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.4616889925356613
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of(1719L, 1719L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1719L, 1719L);
      Range range1 = Range.of(32767L, 32767L);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.99974364510348
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Object object0 = new Object();
      range0.equals(object0);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      Object object1 = new Object();
      range0.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      range0.forEach(consumer0);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Long long0 = new Long((-318L));
      Range range1 = Range.of((-318L), (-318L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=4.024284206673812
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of(1766L, 4294967295L);
      Range range1 = Range.of(4294967295L);
      range0.intersects(range1);
      Range range2 = range0.intersection(range1);
      Range.of(1766L);
      Long long0 = new Long(4294967295L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.equals((Object)list0));
      
      List<Range> list2 = range0.complementFrom(list0);
      assertSame(range1, range2);
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(range0));
      assertEquals(0, list2.size());
      
      Long long1 = new Long(65543L);
      Object object0 = new Object();
      Range range3 = Range.of((-2894L));
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.832823587304883
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = 1535L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 1753L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1753L, 1753L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder2.build();
      Range.Builder range_Builder4 = range_Builder0.copy();
      Range.of(1535L);
      Range range1 = range_Builder4.build();
      range_Builder4.contractEnd((-1501L));
      range0.complement(range1);
      Range.Builder range_Builder5 = new Range.Builder(range1);
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(1535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.625282490246362
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1753L, 1753L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder2.build();
      range_Builder0.copy();
      Range.Builder range_Builder3 = range_Builder2.expandEnd(4294967295L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range range1 = range_Builder3.build();
      range_Builder3.contractEnd(1535L);
      range_Builder2.expandEnd(4294967295L);
      Range.CoordinateSystem.values();
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.921478107778417
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(4294967295L, 4294967295L);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(range0.isEmpty());
      
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      range_Builder0.expandEnd(3081L);
      Range range2 = range1.intersection(range0);
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertFalse(boolean1 == boolean0);
      
      Range range3 = Range.of((-1L), (-1L));
      range1.startsBefore(range2);
      range2.intersects(range3);
      assertFalse(range3.isEmpty());
      
      range0.startsBefore(range1);
      range2.intersection(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.7732744073938256
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(1795L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(247L);
      Range range1 = Range.of((-1L), 4713L);
      long long1 = range1.getEnd();
      assertEquals(4713L, long1);
      
      Range range2 = Range.ofLength(580L);
      assertNotSame(range2, range0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.5645868562425225
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getEnd();
      Range.Builder range_Builder0 = new Range.Builder(0L, 1L);
      range_Builder0.contractEnd((-1L));
      range_Builder0.shift((-297L));
      range_Builder0.contractEnd(0L);
      range_Builder0.contractEnd((-959L));
      range_Builder0.expandEnd(2147483647L);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.607598250831222
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(91L, 91L);
      range0.getLength();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Long long0 = new Long(32767L);
      Range range1 = Range.ofLength(32767L);
      Range.ofLength(91L);
      // Undeclared exception!
      try { 
        range1.split((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.50588055925989
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.of((-128L), (-128L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-128L));
      range_Builder1.shift(9223372036854774277L);
      long long0 = 1752L;
      range_Builder0.expandBegin(1752L);
      range_Builder1.shift((-128L));
      long long1 = (-42L);
      // Undeclared exception!
      try { 
        Range.of((-42L), (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.353627401079457
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 2290L;
      Range.of((-1L));
      long long1 = 2550L;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(2550L, 83L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.38374799962013
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1753L, 1753L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      range_Builder2.expandEnd(4294967295L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder2.expandEnd(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-2008L), (-2008L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.1545541588516164
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = null;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.5256695998812666
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of(9223372036854775733L, 9223372036854775733L);
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 580L;
      Range.Builder range_Builder1 = range_Builder0.expandBegin(580L);
      range_Builder1.shift(4294967295L);
      range_Builder0.expandBegin(4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      long long1 = 4294967295L;
      range_Builder2.shift(4294967295L);
      // Undeclared exception!
      try { 
        Range.of(388L, (-1638L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.854238064860373
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = 32767L;
      Range range0 = Range.of(32767L, 32767L);
      long long1 = 74L;
      Range range1 = Range.of(65555L);
      range1.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      long long2 = 9986L;
      range0.isEmpty();
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      Range.of(9986L);
      range1.isSubRangeOf(range1);
      long long3 = (-103L);
      // Undeclared exception!
      try { 
        Range.of(9986L, (-103L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.397308377748123
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(91L);
      long long0 = range0.getLength();
      assertEquals(91L, long0);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.180624539878941
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(1785L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1786L, long0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.9364619313177465
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      range0.spliterator();
      Range range1 = Range.of(11L);
      Range range2 = range1.intersection(range0);
      boolean boolean0 = range2.isSubRangeOf(range0);
      range0.startsBefore(range0);
      Range range3 = Range.of(727L);
      assertFalse(range3.isEmpty());
      
      range0.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(12L, long0);
      
      boolean boolean1 = range2.intersects(range1);
      assertTrue(range2.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.509579508673768
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1753L, 1753L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder2.build();
      range0.spliterator();
      range_Builder0.copy();
      range_Builder2.expandEnd(4294967295L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("Range coordinates %d, %d are not valid %s coordinates");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Range coordinates %d, %d are not valid %s coordinates into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.655387989320054
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.of(9223372036854775733L, 9223372036854775733L);
      range0.spliterator();
      Range.of(9223372036854775733L, 9223372036854775733L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.shift(2147483647L);
      long long0 = 1752L;
      range_Builder2.expandBegin((-2755L));
      long long1 = (-65735L);
      range_Builder1.shift((-65735L));
      range_Builder2.expandEnd((-65735L));
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775808L), 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.6404380423553526
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-1198L));
      range_Builder0.shift(2290L);
      range_Builder0.contractBegin((-1198L));
      Range.Builder range_Builder1 = range_Builder0.expandBegin(4294967295L);
      Range.of((-2103L), 1805L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(1805L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range.of((-32768L));
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 2290L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.4218489031054173
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(140L);
      Long.compareUnsigned(1608L, 140L);
      Object object2 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.of(9223372036854775784L);
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        Range.of(140L, (-2936L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.3584884981309253
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1753L, 1753L);
      Range range0 = Range.of((-2595L), (-2595L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.9274751724928483
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range range1 = Range.of(2853L);
      range1.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      Range range2 = Range.ofLength(74L);
      range1.isEmpty();
      range0.intersects(range2);
      Range range3 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      List<Range> list0 = range3.complement(range2);
      range0.complementFrom(list0);
      range1.complementFrom(list0);
      Range.of(65535L);
      range0.isSubRangeOf(range1);
      Range.of(9986L, 9986L);
      range2.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range4 = Range.of(range_CoordinateSystem2, 2853L, 9986L);
      range4.toString();
      // Undeclared exception!
      try { 
        range1.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.6360361394251606
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 0L;
      Range.Builder range_Builder1 = new Range.Builder((-1211L), 0L);
      range_Builder0.shift((-1211L));
      range_Builder1.expandBegin((-32768L));
      Range.of((-32768L), 4294967295L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.6719037357150004
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long long0 = 9223372036854775733L;
      Range range0 = Range.of(9223372036854775733L, 9223372036854775733L);
      range0.spliterator();
      Range range1 = Range.of(9223372036854775733L, 9223372036854775733L);
      Range range2 = Range.of(9223372036854775733L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      range2.complement(range0);
      range2.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("PF]z!Q.(7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.PF]z!Q.(7
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.6325453261674214
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32772L), (-1198L));
      range_Builder0.shift(2290L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(4294967295L);
      range_Builder1.shift(1316L);
      Range.of((-2103L), 1805L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(1805L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range.of((-32772L));
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 2290L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.643596980233929
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775805L), 0L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(980L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.8550964054089625
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long long0 = 2290L;
      long long1 = 4294967295L;
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-1198L));
      Range.Builder range_Builder1 = range_Builder0.shift(2290L);
      Range.Builder range_Builder2 = range_Builder0.expandBegin(4294967295L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder(1805L);
      range_Builder1.expandEnd((-2103L));
      // Undeclared exception!
      try { 
        Range.of(1805L, (-1198L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.624280718062446
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1753L, 1753L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder2.build();
      range_Builder0.copy();
      Range.Builder range_Builder3 = range_Builder2.expandEnd(4294967295L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range range1 = range_Builder3.build();
      range_Builder3.contractEnd(1535L);
      range_Builder2.expandEnd(4294967295L);
      Range range2 = Range.of(1753L);
      assertFalse(range2.equals((Object)range1));
      assertSame(range2, range0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.304165500475959
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(255L);
      Range.of(255L, 4713L);
      Range range0 = Range.of(255L, 4713L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.8577542127179325
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-1198L));
      range_Builder0.shift(4294967295L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      // Undeclared exception!
      try { 
        Range.ofLength((-2103L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.30273127777412
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1599L), (-702L));
      assertFalse(range0.isEmpty());
  }
}
