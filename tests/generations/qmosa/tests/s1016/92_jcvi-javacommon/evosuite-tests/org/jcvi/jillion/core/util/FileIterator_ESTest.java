/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 12:05:45 GMT 2019
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcvi.jillion.core.util.FileIterator;
import org.jcvi.jillion.core.util.MultipleFileFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileIterator_ESTest extends FileIterator_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.4989526477238293
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      Integer[] integerArray0 = new Integer[55];
      int int0 = (-1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) int0;
      Integer integer2 = new Integer((-1));
      integerArray0[3] = integer1;
      Integer integer3 = new Integer(int0);
      integerArray0[48] = integer3;
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      Integer integer4 = new Integer(int0);
      Integer integer5 = new Integer(int0);
      Integer integer6 = new Integer(int0);
      Integer integer7 = new Integer(int0);
      Integer integer8 = new Integer((-608));
      Integer integer9 = new Integer(1576);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.getNextFile();
      Iterator<File> iterator0 = fileIterator0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4968783175596116
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.add((FileFilter) multipleFileFilter1);
      mockFile0.setReadable(false, false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(fileFilterArray0[0]);
      multipleFileFilter0.accept(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.fileFilter(multipleFileFilter1);
      fileIterator_FileIteratorBuilder3.fileFilter(fileFilterArray0[2]);
      mockFile0.getAbsolutePath();
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator_FileIteratorBuilder3.fileFilter(fileFilterArray0[2]);
      mockFile0.getAbsolutePath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      File file0 = null;
      // Undeclared exception!
      try { 
        fileIterator0.setUpInitialState((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator$RecursiveFileIterator", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3935968366122915
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList1);
      linkedList3.add((FileFilter) multipleFileFilter0);
      linkedList3.offer((FileFilter) null);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList8 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList9 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList9);
      LinkedList<FileFilter> linkedList10 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList11 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList12 = new LinkedList<FileFilter>(linkedList5);
      LinkedList<FileFilter> linkedList13 = new LinkedList<FileFilter>(linkedList12);
      LinkedList<FileFilter> linkedList14 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList15 = new LinkedList<FileFilter>();
      linkedList11.sort((Comparator<? super FileFilter>) null);
      LinkedList<FileFilter> linkedList16 = new LinkedList<FileFilter>();
      File file0 = null;
      multipleFileFilter1.accept((File) null);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      multipleFileFilter1.accept((File) null);
      mockFile0.getAbsolutePath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      // Undeclared exception!
      try { 
        fileIterator0.updateFileIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.6378055059765755
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(fileFilterArray0);
      multipleFileFilter1.accept(mockFile0);
      linkedList0.add((FileFilter) multipleFileFilter1);
      mockFile0.setReadable(false, false);
      linkedList0.push(fileFilterArray0[3]);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonRecursiveFileIterator", ")qY!qo:U7", (File) mockFile0);
      multipleFileFilter0.accept(file0);
      fileIterator_FileIteratorBuilder1.fileFilter(fileFilterArray0[1]);
      mockFile0.getAbsolutePath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.next();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      fileIterator0.iterator();
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      File file1 = fileIterator1.getNextFile();
      assertTrue(file1.isFile());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.749026255140454
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.add((FileFilter) multipleFileFilter1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockFile0.setReadable(false, false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      multipleFileFilter0.accept(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      mockFile0.getAbsolutePath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      mockFile0.setReadOnly();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      fileIterator0.forEach(consumer0);
      fileIterator0.iterator();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/");
      File file0 = fileIterator0.next();
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.5395775139603343
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ClS,;L&.");
      File file0 = MockFile.createTempFile("ClS,;L&.", "ClS,;L&.", (File) mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      mockFile0.setReadOnly();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      fileIterator0.setUpInitialState(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      file0.setWritable(false);
      FileFilter[] fileFilterArray0 = new FileFilter[0];
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(fileFilterArray0);
      fileIterator_FileIteratorBuilder2.fileFilter(multipleFileFilter0);
      fileIterator0.updateFileIterator(file0);
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      file0.toURL();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(false);
      fileIterator0.getNextFile();
      fileIterator0.next();
      fileIterator0.setUpInitialState(file0);
      fileIterator0.spliterator();
      fileIterator_FileIteratorBuilder1.build();
      try { 
        MockURI.URI("ClS,;L&.", "", "ClS,;L&.");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 3: ClS,;L&.:#ClS,;L&.
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.226176955166917
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ClS,;L&.");
      File file0 = MockFile.createTempFile("ClS,;L&.", "ClS,;L&.", (File) mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      fileIterator0.setUpInitialState(file0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator0.updateFileIterator(file0);
      fileIterator0.setUpInitialState(mockFile0);
      file0.toURL();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      fileIterator0.getNextFile();
      fileIterator0.next();
      fileIterator0.setUpInitialState(file0);
      fileIterator_FileIteratorBuilder0.build();
      URI uRI0 = MockURI.URI((String) null, "", "ClS,;L&.");
      FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.612730615734696
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>(linkedList2);
      FileFilter[] fileFilterArray0 = new FileFilter[9];
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[5] = (FileFilter) multipleFileFilter5;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[6] = (FileFilter) multipleFileFilter6;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList2);
      fileFilterArray0[7] = (FileFilter) multipleFileFilter7;
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[8] = (FileFilter) multipleFileFilter8;
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.getAbsolutePath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.22215863611849
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter0;
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(fileFilterArray0);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.add((FileFilter) multipleFileFilter2);
      mockFile0.setReadable(true, false);
      multipleFileFilter0.accept(mockFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(false);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      multipleFileFilter4.accept(mockFile0);
      mockFile0.getAbsolutePath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeDirectories(false);
      assertSame(fileIterator_FileIteratorBuilder3, fileIterator_FileIteratorBuilder2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3407029845303415
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      File file0 = fileIterator0.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder1));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.6132699526584724
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>(linkedList2);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList8 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList8);
      LinkedList<FileFilter> linkedList9 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList10 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList11 = new LinkedList<FileFilter>(linkedList2);
      LinkedList<FileFilter> linkedList12 = new LinkedList<FileFilter>(linkedList2);
      LinkedList<FileFilter> linkedList13 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList14 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList15 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList16 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList17 = new LinkedList<FileFilter>();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(mockFile0);
      fileIterator0.iterator();
      fileIterator_FileIteratorBuilder0.build();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.653215036520638
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.mkdir();
      MockFile mockFile1 = new MockFile("&^wn~/");
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      fileIterator0.getNextFile();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.hasNext();
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.5468464329238216
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.add((FileFilter) multipleFileFilter1);
      mockFile0.setReadable(true, true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      mockFile0.getAbsolutePath();
      fileIterator_FileIteratorBuilder2.build();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder3.equals((Object)fileIterator_FileIteratorBuilder1));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.5694993552494307
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>(linkedList3);
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList8 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList9 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList10 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList9);
      LinkedList<FileFilter> linkedList11 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList12 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList13 = new LinkedList<FileFilter>(linkedList10);
      LinkedList<FileFilter> linkedList14 = new LinkedList<FileFilter>(linkedList13);
      LinkedList<FileFilter> linkedList15 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList16 = new LinkedList<FileFilter>();
      linkedList12.sort((Comparator<? super FileFilter>) null);
      LinkedList<FileFilter> linkedList17 = new LinkedList<FileFilter>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<FileFilter> linkedList18 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList19 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList20 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList21 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList22 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList23 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList24 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList25 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList25);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.getNextFile();
      fileIterator0.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder1));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      Integer[] integerArray0 = new Integer[55];
      int int0 = 21;
      Integer integer0 = new Integer(21);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = (Integer) int0;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = (Integer) int0;
      Integer integer3 = new Integer(21);
      integerArray0[3] = (Integer) int0;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = (Integer) int0;
      Integer integer6 = new Integer(int0);
      Integer integer7 = new Integer(int0);
      Integer integer8 = new Integer(int0);
      Integer integer9 = new Integer(int0);
      Integer integer10 = new Integer(int0);
      Integer integer11 = new Integer(int0);
      Integer integer12 = new Integer(0);
      Integer integer13 = new Integer(0);
      Integer integer14 = new Integer(21);
      Integer integer15 = new Integer(int0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5707157748523417
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>(linkedList3);
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList8 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList9 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList10 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList9);
      LinkedList<FileFilter> linkedList11 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList12 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList13 = new LinkedList<FileFilter>(linkedList10);
      LinkedList<FileFilter> linkedList14 = new LinkedList<FileFilter>(linkedList3);
      LinkedList<FileFilter> linkedList15 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList16 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList17 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList18 = new LinkedList<FileFilter>();
      linkedList17.sort((Comparator<? super FileFilter>) null);
      LinkedList<FileFilter> linkedList19 = new LinkedList<FileFilter>();
      multipleFileFilter0.accept(mockFile0);
      linkedList9.clear();
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      multipleFileFilter0.accept((File) null);
      mockFile0.getAbsolutePath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2140666558065463
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      Integer[] integerArray0 = new Integer[55];
      int int0 = 21;
      Integer integer0 = new Integer(21);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = (Integer) int0;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = (Integer) int0;
      Integer integer3 = new Integer(21);
      integerArray0[3] = (Integer) int0;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = (Integer) int0;
      Integer integer6 = new Integer(int0);
      Integer integer7 = new Integer(int0);
      Integer integer8 = new Integer(int0);
      Integer integer9 = new Integer(int0);
      Integer integer10 = new Integer(int0);
      Integer integer11 = new Integer(int0);
      Integer integer12 = new Integer(int0);
      Integer integer13 = new Integer(1120);
      Integer integer14 = new Integer(21);
      Integer integer15 = new Integer((-5));
      Integer integer16 = new Integer(int0);
      Integer integer17 = new Integer(int0);
      Integer integer18 = new Integer(int0);
      Integer integer19 = new Integer(1120);
      Integer integer20 = new Integer(0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.274362714574081
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>(linkedList6);
      LinkedList<FileFilter> linkedList8 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList9 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList10 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList6);
      LinkedList<FileFilter> linkedList11 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList12 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList13 = new LinkedList<FileFilter>(linkedList9);
      LinkedList<FileFilter> linkedList14 = new LinkedList<FileFilter>(linkedList6);
      LinkedList<FileFilter> linkedList15 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList16 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList17 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList18 = new LinkedList<FileFilter>();
      linkedList13.sort((Comparator<? super FileFilter>) null);
      LinkedList<FileFilter> linkedList19 = new LinkedList<FileFilter>();
      multipleFileFilter0.accept(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      multipleFileFilter0.accept(mockFile0);
      mockFile0.getAbsolutePath();
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3895530195104047
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile.createTempFile("org.jcvi.jillion.core.util.FIFOQueue", ":Nh^", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      Integer[] integerArray0 = new Integer[55];
      int int0 = (-1);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = (Integer) int0;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = (Integer) int0;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = (Integer) int0;
      Integer integer4 = new Integer(int0);
      integerArray0[5] = integer4;
      Integer integer5 = new Integer(int0);
      Integer integer6 = new Integer((-1));
      Integer integer7 = new Integer(int0);
      Integer integer8 = new Integer((-2546));
      Integer integer9 = new Integer(int0);
      Integer integer10 = new Integer((-163));
      Integer integer11 = new Integer(int0);
      Integer integer12 = new Integer(201);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.498823498815138
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.add((FileFilter) multipleFileFilter1);
      FileFilter[] fileFilterArray1 = new FileFilter[9];
      fileFilterArray1[0] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      fileFilterArray1[1] = (FileFilter) multipleFileFilter2;
      fileFilterArray1[2] = (FileFilter) multipleFileFilter0;
      fileFilterArray1[3] = (FileFilter) multipleFileFilter2;
      fileFilterArray1[4] = (FileFilter) multipleFileFilter1;
      fileFilterArray1[5] = (FileFilter) multipleFileFilter1;
      fileFilterArray1[6] = (FileFilter) multipleFileFilter0;
      fileFilterArray1[7] = (FileFilter) multipleFileFilter1;
      fileFilterArray1[8] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray1);
      linkedList0.add((FileFilter) multipleFileFilter3);
      mockFile0.setReadable(true, true);
      multipleFileFilter2.accept(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      multipleFileFilter4.accept(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder1));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.456117947165377
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.jcvi.jillion.core.util.iter.IteratorUtil", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeDirectories(false);
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      fileIterator_FileIteratorBuilder3.includeDirectories(false);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder3.includeHiddenFiles(true);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder3.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3895530195104047
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile.createTempFile("org.jcvi.jillion.core.util.FIFOQueue", ":Nh^", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      Integer[] integerArray0 = new Integer[55];
      int int0 = (-1);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = (Integer) int0;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = (Integer) int0;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = (Integer) int0;
      integerArray0[4] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[5] = integer4;
      Integer integer5 = new Integer(int0);
      Integer integer6 = new Integer((-1));
      Integer integer7 = new Integer(int0);
      Integer integer8 = new Integer((-2546));
      Integer integer9 = new Integer(1413);
      Integer integer10 = new Integer((-163));
      Integer integer11 = new Integer(int0);
      Integer integer12 = new Integer(201);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.432757197408911
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      Integer[] integerArray0 = new Integer[55];
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      int int0 = 21;
      Integer integer0 = new Integer(21);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = (Integer) int0;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = (Integer) int0;
      Integer integer3 = new Integer(21);
      integerArray0[3] = (Integer) int0;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = (Integer) int0;
      Integer integer6 = new Integer(int0);
      Integer integer7 = new Integer(int0);
      Integer integer8 = new Integer(int0);
      Integer integer9 = new Integer(int0);
      Integer integer10 = new Integer(int0);
      Integer integer11 = new Integer(int0);
      Integer integer12 = new Integer(int0);
      Integer integer13 = new Integer(int0);
      Integer integer14 = new Integer(int0);
      Integer integer15 = new Integer(int0);
      Integer integer16 = new Integer((-1327));
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.153328074133045
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.5223568415641084
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = new FileFilter[2];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile1 = new MockFile("", "");
      File file0 = MockFile.createTempFile("org.jcvi.jillion.internal.core.util.AbstractFOQueue", "org.jcvi.jillion.internal.core.util.AbstractFOQueue");
      fileIterator0.setUpInitialState(file0);
      MockFile mockFile2 = new MockFile("org.jcvi.jillion.internal.core.util.AbstractFOQueue", "");
      File file1 = fileIterator0.getNextFile();
      assertNull(file1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("2$", "2$");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = new FileFilter[4];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter2);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter6;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(fileFilterArray0);
      multipleFileFilter0.accept(mockFile0);
      linkedList2.add((FileFilter) multipleFileFilter10);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      linkedList3.add((FileFilter) multipleFileFilter0);
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(linkedList3);
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(linkedList3);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter13 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter14 = new MultipleFileFilter(fileFilterArray0);
      linkedList3.add((FileFilter) multipleFileFilter13);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter15 = new MultipleFileFilter(fileFilterArray0);
      linkedList5.add(fileFilterArray0[0]);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter16 = new MultipleFileFilter(linkedList3);
      multipleFileFilter16.accept(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.221861282565115
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.next();
      fileIterator0.setUpInitialState(mockFile0);
      MockFile mockFile1 = new MockFile("org.jcvi.jillion.core.util.FileIterator$DepthFirstFileIterator", "");
      File file0 = fileIterator0.getNextFile();
      assertEquals(0L, file0.getUsableSpace());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.2466528111363853
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      File file0 = fileIterator0.next();
      fileIterator0.hasNext();
      fileIterator0.next();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileIterator_FileIteratorBuilder1.fileFilter(multipleFileFilter0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      fileIterator1.getNextFile();
      FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      File file1 = fileIterator1.next();
      assertNotSame(mockFile0, file1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.61353228320303
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>(linkedList3);
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList8 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList9 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList9);
      LinkedList<FileFilter> linkedList10 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList11 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList12 = new LinkedList<FileFilter>(linkedList3);
      LinkedList<FileFilter> linkedList13 = new LinkedList<FileFilter>(linkedList3);
      LinkedList<FileFilter> linkedList14 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList15 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList16 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList17 = new LinkedList<FileFilter>();
      linkedList16.sort((Comparator<? super FileFilter>) null);
      LinkedList<FileFilter> linkedList18 = new LinkedList<FileFilter>();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      fileIterator0.iterator();
      fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder1.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.4097711478502646
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = new FileFilter[4];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter2);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter6;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(fileFilterArray0);
      linkedList2.add((FileFilter) multipleFileFilter10);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(linkedList3);
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(linkedList3);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter13 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter14 = new MultipleFileFilter(fileFilterArray0);
      linkedList3.add((FileFilter) multipleFileFilter13);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter15 = new MultipleFileFilter(fileFilterArray0);
      linkedList5.add(fileFilterArray0[0]);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter16 = new MultipleFileFilter(linkedList3);
      multipleFileFilter16.accept(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.5972987238292515
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      linkedList3.clone();
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>(linkedList3);
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList8 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList9 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList10 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList9);
      LinkedList<FileFilter> linkedList11 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList12 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList13 = new LinkedList<FileFilter>(linkedList10);
      LinkedList<FileFilter> linkedList14 = new LinkedList<FileFilter>(linkedList3);
      LinkedList<FileFilter> linkedList15 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList16 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList17 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList18 = new LinkedList<FileFilter>();
      linkedList17.sort((Comparator<? super FileFilter>) null);
      LinkedList<FileFilter> linkedList19 = new LinkedList<FileFilter>();
      multipleFileFilter0.accept(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      multipleFileFilter0.accept((File) null);
      mockFile0.getAbsolutePath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.6377292648049564
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.add((FileFilter) multipleFileFilter1);
      mockFile0.setReadable(false, false);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      multipleFileFilter0.accept(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      mockFile0.getAbsolutePath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      fileIterator0.iterator();
      fileIterator0.next();
      fileIterator0.hasNext();
      File file0 = fileIterator0.next();
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      File file1 = fileIterator0.next();
      assertFalse(file1.equals((Object)file0));
  }
}
