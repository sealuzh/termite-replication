/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 11:35:22 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sun.msv.datatype.xsd.XSDatatype;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.dom4j.Attribute;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.datatype.DatatypeElement;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.FlyweightAttribute;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.AttributeListImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QName qName0 = QName.get("//tp/|n}nAU.04U<");
      QName.get("//tp/|n}nAU.04U<", (Namespace) null, "//tp/|n}nAU.04U<");
      qName0.getQualifiedName();
      QName qName1 = new QName("//tp/|n}nAU.04U<");
      QName qName2 = new QName("//tp/|n}nAU.04U<");
      FlyweightAttribute flyweightAttribute0 = new FlyweightAttribute(qName0);
      QName.get("[Q\"r@9zE,s*$5?", (Namespace) null);
      QName.get("//tp/|n}nAU.04U<", (Namespace) null);
      qName2.getQualifiedName();
      QName qName3 = new QName("fxtmp/4 U<0K)D3HUVHT");
      Object object0 = new Object();
      qName2.equals(qName1);
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName qName4 = new QName("fxtmp/4 U<0K)D3HUVHT", namespace0, "fxtmp/4 U<0K)D3HUVHT");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName.get("//tp/|n}nAU.04U<", (Namespace) null, "fxtmp/4 U<0K)D3HUVHT");
      namespace0.clone();
      namespaceStack0.getAttributeQName("//tp/|n}nAU.04U<", "Iao4t@nah+", " oz docu/jment ");
      namespace0.getName();
      qName3.getQualifiedName();
      URI uRI0 = MockURI.aFTPURI;
      MockURI.toURL(uRI0);
      SAXReader sAXReader0 = new SAXReader(true);
      qName1.equals(flyweightAttribute0);
      SAXReader sAXReader1 = new SAXReader(false);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      try { 
        sAXReader1.setFeature("http://xml.org/sax/features/use-locator2", false);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // Feature 'http://xml.org/sax/features/use-locator2' is read only.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.487562483747964
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("'");
      sAXReader_SAXEntityResolver0.resolveEntity("4U<", "");
      MockFile.createTempFile("4U<", "'");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = new QName("org.dom4j.tree.DefaultAttribute");
      namespaceStack0.getAttributeQName("4U<", "org.dom4j.tree.DefaultAttribute", "org.dom4j.tree.DefaultAttribute");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)1;
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.setEncoding("[(DefaultTruthExpr): ");
      sAXReader0.setStringInternEnabled(true);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      try { 
        sAXReader0.read((Reader) null, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"[(DEFAULTTRUTHEXPR): \". Nested exception: Invalid encoding name \"[(DEFAULTTRUTHEXPR): \".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "//tp/|n}nAU.04U<";
      QName qName0 = QName.get("//tp/|n}nAU.04U<");
      QName.get("//tp/|n}nAU.04U<", "//tp/|n}nAU.04U<", (String) null);
      QName.get("//tp/|n}nAU.04U<", (Namespace) null, "//tp/|n}nAU.04U<");
      QName.get("\"q*XoLbp!NVG", (Namespace) null, "\"q*XoLbp!NVG");
      QName.get("\"q*XoLbp!NVG", (Namespace) null, "\"q*XoLbp!NVG");
      QName qName1 = new QName("//tp/|n}nAU.04U<");
      FlyweightAttribute flyweightAttribute0 = new FlyweightAttribute(qName0);
      String string1 = "[Q\"r@9zE,s*$5?";
      QName.get("[Q\"r@9zE,s*$5?", (Namespace) null);
      QName.get("//tp/|n}nAU.04U<", (Namespace) null);
      QName qName2 = new QName("plk8=,:u-*N'Ue_(:");
      Object object0 = new Object();
      qName1.equals(object0);
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, defaultDocumentFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = "4U<";
      sAXReader0.setEncoding("4U<");
      String string1 = "";
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"4U<\". Nested exception: Invalid encoding name \"4U<\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.392762460308578
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createXMLReader();
      sAXReader0.setEncoding("qH@,@OkUXd@Ekq");
      String string0 = "!3w^LNJxA&";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!3w^LNJxA&");
      StringReader stringReader0 = new StringReader("qH@,@OkUXd@Ekq");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "::comment()");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "::comment()");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "::comment()");
      MockFile.createTempFile("::comment()", "GgMfIwXci/:QmFZ5");
      MockFile.createTempFile("PEic%FazQUF/#?Q|", "UMA");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("PEic%FazQUF/#?Q|");
      sAXReader_SAXEntityResolver0.resolveEntity("0jDJqDf#", "::comment()");
      StringReader stringReader0 = new StringReader("-j?|}~XR{B");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3542560898680223
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = ";Wmr5o&\"a";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";Wmr5o&\"a");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-92);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";Wmr5o&\"a");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";Wmr5o&\"a");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader0.setEncoding(";Wmr5o&\"a");
      File file0 = MockFile.createTempFile(";Wmr5o&\"a", "GgMfIwXci/:QmFZ5");
      file0.mkdir();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.createContentHandler(parserAdapter0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \";WMR5O&\"A\". Nested exception: Invalid encoding name \";WMR5O&\"A\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte byte0 = (byte)39;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte)47);
      byteArrayInputStream0.close();
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.read();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      String string0 = "//tmp/http:/www.w3.org/XML/1998/namespace0http:/www.w3.org/XML/1998/namespace";
      StringReader stringReader0 = new StringReader("//tmp/http:/www.w3.org/XML/1998/namespace0http:/www.w3.org/XML/1998/namespace");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6883569797160485
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.resetHandlers();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sAXReader0.getDispatchHandler();
      xMLFilterImpl0.endDocument();
      Namespace namespace0 = new Namespace(" SYSTEM", "b_S&YOG^atyQdhv,k7");
      sAXReader0.setXMLReader(xMLFilterImpl0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, (InputStream) null);
      sAXReader0.getXMLReader();
      MockFile.createTempFile(" SYSTEM", " SYSTEM");
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "b_S&YOG^atyQdhv,k7");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.5228691315958027
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.resetHandlers();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      xMLFilterImpl0.endDocument();
      Namespace namespace0 = new Namespace(" SYSTEM", "b_S&YOG^atyQdhv,k7");
      sAXReader0.removeHandler("NOTATION_NODE");
      sAXReader0.setXMLReader(xMLFilterImpl0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("MS*7X)?mqAo1,x\"");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/plk8=,:u-*N'Ue_(:0", "C^knP>5Ao9x[h");
      StringReader stringReader0 = new StringReader("C^knP>5Ao9x[h");
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = 'k';
      charArray0[2] = 'R';
      charArray0[3] = '1';
      charArray0[4] = ']';
      stringReader0.read(charArray0);
      SAXReader sAXReader1 = new SAXReader(false);
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/-'GVKy-0http:/xml.org/sax/properties/lexical-handler");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(boolean0);
      
      sAXReader0.createXMLReader();
      sAXReader0.setIgnoreComments(true);
      sAXReader0.isIgnoreComments();
      sAXReader0.isStripWhitespaceText();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("J\"");
      sAXReader_SAXEntityResolver0.resolveEntity("J\"", "7");
      sAXReader0.createContentHandler(xMLFilterImpl0);
      assertTrue(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createXPathFilter("http://xml.org/sax/features/validation");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory1, false);
      sAXReader1.setFeature("http://xml.org/sax/features/validation", false);
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isValidating());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.420295386033961
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setEncoding("Z{.%x%joD!fWt@H;3");
      String string0 = ";Wmr5o&\"a";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";Wmr5o&\"a");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)23;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";Wmr5o&\"a");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.466313298576017
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.resetHandlers();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Namespace namespace0 = new Namespace((String) null, (String) null);
      xMLFilterImpl0.endDocument();
      Namespace namespace1 = new Namespace(" SYSTEM", "b_S&YOG^atyQdhv,k7");
      sAXReader0.setXMLReader(xMLFilterImpl0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3025);
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4668805135504925
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.resetHandlers();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Namespace namespace0 = new Namespace((String) null, (String) null);
      xMLFilterImpl0.endDocument();
      Namespace namespace1 = new Namespace(" SYSTEM", "b_S&YOG^atyQdhv,k7");
      sAXReader0.setXMLReader(xMLFilterImpl0);
      QName qName0 = QName.get("", namespace1);
      BeanElement beanElement0 = new BeanElement(qName0, " SYSTEM");
      beanElement0.createCopy(qName0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createAttribute((Element) beanElement0, qName0, "7ug\"9',^6D2(8WT");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Q9V%");
      SAXReader sAXReader1 = new SAXReader(true);
      InputSource inputSource0 = new InputSource((InputStream) null);
      InputSource inputSource1 = new InputSource((InputStream) null);
      // Undeclared exception!
      try { 
        sAXReader0.read(inputSource1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.4197281710594853
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.resetHandlers();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Namespace namespace0 = new Namespace((String) null, (String) null);
      xMLFilterImpl0.endDocument();
      Namespace namespace1 = new Namespace("Sv'2FOB%#$5o8(j9s8", "b_S&YOG^atyQdhv,k7");
      sAXReader0.setXMLReader(xMLFilterImpl0);
      // Undeclared exception!
      try { 
        sAXReader0.read("W9Mu^D* ,DkDn");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2430184461253537
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = "K)D3HBVHT";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("K)D3HBVHT");
      sAXReader_SAXEntityResolver0.resolveEntity("K)D3HBVHT", "K)D3HBVHT");
      String string1 = "";
      sAXReader_SAXEntityResolver0.resolveEntity("4U<", "");
      File file0 = MockFile.createTempFile("4U<", "K)D3HBVHT");
      MockFile mockFile0 = new MockFile(file0, "");
      file0.toURL();
      SAXReader sAXReader1 = new SAXReader(true);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      InputSource inputSource0 = new InputSource(sequenceInputStream0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("");
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "C`>w$4GJ/^");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"\". Nested exception: Invalid encoding name \"\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.418994471909286
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)55;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sAXReader0.setValidation(false);
      sAXReader0.setStringInternEnabled(false);
      InputSource inputSource0 = new InputSource("8Bolr^#fQ");
      inputSource0.getSystemId();
      StringReader stringReader0 = new StringReader("\" could not be added to the branch \"");
      inputSource0.setCharacterStream(stringReader0);
      inputSource0.setPublicId("8Bolr^#fQ");
      sAXReader0.getDispatchHandler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\" could not be added to the branch \"");
      inputSource0.setPublicId("MLsa},7");
      sAXReader0.isStringInternEnabled();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document 8Bolr^#fQ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3326774197215174
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!+EIZ9u*U{;>gXAcZ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("!+EIZ9u*U{;>gXAcZ", "");
      String string0 = "}8NA}";
      String string1 = "//tmp/org.jaxen.saxpath.XPathSyntaxExceptio]0org.jaxen.saxpath.XPathSyntaxExceptio]";
      File file0 = MockFile.createTempFile("!_qY", "//tmp/org.jaxen.saxpath.XPathSyntaxExceptio]0org.jaxen.saxpath.XPathSyntaxExceptio]");
      MockFile mockFile0 = new MockFile(file0, "/");
      mockFile0.setReadOnly();
      mockFile0.toURL();
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.resetHandlers();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.notationDecl("OxObPXgVN7?tT", (String) null, "//tmp/Cannot add another element to this Document as it already has a root element of: 0Cannot add another element to this Document as it already has a root element of: ");
      xMLReaderAdapter0.setDocumentHandler(handlerBase0);
      String string0 = "lOc+g< ^>:";
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.resolveEntity("~).|^ji<(0<R", "~).|^ji<(0<R");
      String string1 = null;
      sAXReader0.getXMLFilter();
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      AttributeListImpl attributeListImpl1 = new AttributeListImpl(attributeListImpl0);
      defaultHandler2_0.notationDecl("~).|^ji<(0<R", "~).|^ji<(0<R", (String) null);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.338123915578089
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      QName qName0 = QName.get("//tmp/|c}nAU.04U<");
      QName.get("//tmp/|c}nAU.04U<", (Namespace) null, "//tmp/|c}nAU.04U<");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, 1956, xSDatatype0);
      QName qName1 = new QName("//tmp/|c}nAU.04U<");
      QName qName2 = new QName("plk8=,:u-*N'Ue_(:");
      qName2.equals(qName1);
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName qName3 = QName.get("//tmp/tmp/u(e}5h0,QG*DhQ40FL0lOc+g< ^>:", namespace0, "//tmp/tmp/u(e}5h0,QG*DhQ40FL0lOc+g< ^>:");
      Element element0 = datatypeElement0.addAttribute(qName3, "//tmp/|c}nAU.04U<");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName.get("//tmp/|c}nAU.04U<", (Namespace) null, "plk8=,:u-*N'Ue_(:");
      namespaceStack0.getAttributeQName("//tmp/|c}nAU.04U<", "k*kj", "k*kj");
      namespace0.getName();
      defaultDocumentFactory0.createAttribute(element0, qName2, "/comment()");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createAttribute((Element) datatypeElement0, "x-)|z5^DdhOj", "k*kj");
      DefaultDocumentFactory.getInstance();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("plk8=,:u-*N'Ue_(:");
      sAXReader_SAXEntityResolver0.resolveEntity("plk8=,:u-*N'Ue_(:", "/comment()");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      try { 
        sAXReader0.read("/comment()");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /comment() (No such file or directory) Nested exception: /comment() (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = QName.get("");
      QName.get("", (Namespace) null, "");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, 1956, xSDatatype0);
      datatypeElement0.getNamespacePrefix();
      QName.get("", (Namespace) null, "[(DefaultAbsoluteLocationPath): ");
      QName qName1 = new QName("");
      QName.get("", "<[M", "[(DefaultAbsoluteLocationPath): ");
      QName qName2 = new QName("plk8\"O=/:u-*N'Ue_(l");
      qName2.equals(qName1);
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName.get("", "7hVo0V7<e&tl`");
      datatypeElement0.elementTextTrim(qName1);
      datatypeElement0.attributeCount();
      QName qName3 = QName.get("//tmp/tmp/u(e}(h0,QG*DhQ40FL0lOc+g< ^>:", namespace0, "//tmp/tmp/u(e}(h0,QG*DhQ40FL0lOc+g< ^>:");
      qName3.getQualifiedName();
      datatypeElement0.addAttribute(qName3, "");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getAttributeQName("", "//tmp/tmp/u(e}(h0,QG*DhQ40FL0lOc+g< ^>:", "");
      namespaceStack0.getAttributeQName("", "//tmp/tmp/u(e}(h0,QG*DhQ40FL0lOc+g< ^>:", "//tmp/tmp/u(e}(h0,QG*DhQ40FL0lOc+g< ^>:");
      namespace0.getName();
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName1, 1956);
      URI uRI0 = MockURI.aFTPURI;
      MockURI.toURL(uRI0);
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      xMLFilterImpl0.setDTDHandler(defaultHandler0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      int int0 = (-3266);
      SAXReader sAXReader0 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      xMLFilterImpl1.endDocument();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      sAXReader0.setXMLReader(xMLFilterImpl1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.installXMLFilter(parserAdapter0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ParserAdapter parserAdapter1 = null;
      try {
        parserAdapter1 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.resetHandlers();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      xMLFilterImpl0.endDocument();
      Namespace namespace0 = new Namespace(" SYSTEM", "b_S&YOG^atyQdhv,k7");
      sAXReader0.setXMLReader(xMLFilterImpl0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, (InputStream) null);
      sAXReader0.getXMLReader();
      File file0 = MockFile.createTempFile(" SYSTEM", " SYSTEM");
      assertEquals(0L, file0.getUsableSpace());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      QName qName0 = QName.get("//tp/|n}nAU.04U<");
      QName.get("//tp/|n}nAU.04U<", (Namespace) null, "//tp/|n}nAU.04U<");
      qName0.getQualifiedName();
      QName qName1 = new QName("//tp/|n}nAU.04U<");
      QName qName2 = QName.get("//tp/|n}nAU.04U<", (Namespace) null);
      FlyweightAttribute flyweightAttribute0 = new FlyweightAttribute(qName0);
      QName.get("[Q\"r@9zE,s*$5?", (Namespace) null);
      QName.get("//tp/|n}nAU.04U<", (Namespace) null);
      qName2.getQualifiedName();
      QName qName3 = new QName("fxtmp/4 U<0K)D3HUVHT");
      Locale locale0 = Locale.FRENCH;
      Object object0 = new Object();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.getPublicId();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locator2Impl2.getSystemId();
      Object object1 = new Object();
      locator2Impl2.setPublicId("//tmp/m]*X;p1m]*X;p");
      SAXReader sAXReader0 = new SAXReader(false);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      String string0 = "http://xml.org/sax/features/namespace-prefixes";
      String string1 = "z";
      MockFile mockFile0 = new MockFile("z");
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/lexical-handler", dispatchHandler0);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/lexical-handler' cannot be casted to org.xml.sax.ext.LexicalHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createXPathFilter("EfE1>Qmx");
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory2, false);
      try { 
        sAXReader0.setFeature("EfE1>Qmx", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'EfE1>Qmx' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6152804042395514
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader sAXReader1 = new SAXReader(false);
      String string0 = "K)D3HBVHT";
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@7b8feb96 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL("K)D3HBVHT", "K)D3HBVHT", (-1), "Yg\"0n8*EE3C", uRLStreamHandler0);
      StringReader stringReader0 = new StringReader("Yg\"0n8*EE3C");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = 'g';
      charArray0[2] = '6';
      parserAdapter0.ignorableWhitespace(charArray0, (-2276), 52);
      sAXReader0.createDefaultEntityResolver("8=[(");
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5350813079469847
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = "K)D3HBVHT";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("K)D3HBVHT");
      sAXReader_SAXEntityResolver0.resolveEntity("K)D3HBVHT", "K)D3HBVHT");
      sAXReader_SAXEntityResolver0.resolveEntity("4U<", "");
      MockFile.createTempFile("4U<", "K)D3HBVHT");
      String string1 = "org.dom4j.tree.DefaultAttribute";
      QName qName0 = new QName("//tmp/tmp/tmp/Cannot add another element to this Document as it already has a root element of: 0Cannot add another element to this Document as it already has a root element of: 0http:/xml.org/sax/features/use-locator20org.jaxen.expr.iter.IterableAncestorAxis");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      namespaceStack0.getAttributeQName("4U<", "org.dom4j.tree.DefaultAttribute", " of document ");
      byte byte0 = (byte) (-7);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Namespace namespace0 = Namespace.get("");
      namespace0.getName();
      qName0.getQualifiedName();
      URI uRI0 = MockURI.aFTPURI;
      MockURI.toURL(uRI0);
      SAXReader sAXReader1 = new SAXReader(false);
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      String string0 = "!+EIZ9u*U{;>gXAcZ";
      MockFile mockFile0 = new MockFile("!+EIZ9u*U{;>gXAcZ", "!+EIZ9u*U{;>gXAcZ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(true);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      DispatchHandler dispatchHandler1 = new DispatchHandler();
      dispatchHandler0.addHandler("", dispatchHandler1);
      sAXReader0.setDefaultHandler(dispatchHandler0);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      FileSystemHandling.shouldAllThrowIOExceptions();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      xMLFilterImpl0.skippedEntity("pHt\"7>id-=IA#oP");
      locatorImpl1.setPublicId("gZA$qG^~0,*70iW");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(1);
      locatorImpl1.setPublicId(" [Comment: \"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[3] = (Object) locatorImpl1;
      mockPrintWriter0.printf(locale0, "pHt\"7>id-=IA#oP", objectArray0);
      Object[] objectArray1 = new Object[6];
      objectArray1[1] = (Object) defaultHandler2_0;
      mockPrintWriter0.print('H');
      Object object1 = new Object();
      locator2Impl0.setPublicId((String) null);
      objectArray1[4] = (Object) stringWriter0;
      objectArray1[5] = (Object) locator2Impl0;
      mockPrintWriter0.printf(locale0, "gZA$qG^~0,*70iW", objectArray1);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.319202941822584
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("K)D3HBVHT", "K)D3HBVHT");
      String string0 = "4U<";
      String string1 = "";
      sAXReader_SAXEntityResolver0.resolveEntity("4U<", "");
      File file0 = MockFile.createTempFile("4U<", "K)D3HBVHT");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.setMergeAdjacentText(true);
      StringReader stringReader0 = new StringReader("'I|MwTjR54%");
      stringReader0.close();
      try { 
        stringReader0.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.2995793963713953
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      sAXReader0.getXMLFilter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":I]KZy*(o");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      sAXReader1.installXMLFilter(xMLFilterImpl0);
      sAXReader0.isIgnoreComments();
      StringReader stringReader0 = new StringReader("Validation not supported for XMLReader: ");
      stringReader0.markSupported();
      try { 
        sAXReader1.read((Reader) stringReader0, "Validation not supported for XMLReader: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "http://xml.org/sax/features/use-locator2");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "//tmp/&Co0&Co");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("lsHc<\r");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/&Co0&Co");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("lsHc<\r", "http://xml.org/sax/features/string-interning");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      sAXReader_SAXEntityResolver0.uriPrefix = "//tmp/tmp/u(e}(h0,QG*DhQ40FL0,QG*DhQ40FL";
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("lsHc<\r", "rwb<~&");
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)55;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "|qzOI]]t}");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.338123915578089
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      QName qName0 = QName.get("//tmp/|c}nAU.04U<");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, 1956, xSDatatype0);
      QName qName1 = new QName("//tmp/|c}nAU.04U<");
      XSDatatype xSDatatype1 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement1 = new DatatypeElement(qName0, 1956, xSDatatype1);
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack0.pop("//tmp/|c}nAU.04U<");
      QName.get("http://xml.org/sax/features/namespaces", (Namespace) null);
      QName qName2 = new QName("//tmp/|c}nAU.04U<");
      Element element0 = datatypeElement0.addAttribute(qName0, "//tmp/|c}nAU.04U<");
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack1.pop("http://xml.org/sax/features/namespaces");
      namespaceStack1.getAttributeQName("//tmp/|c}nAU.04U<", "//tmp/|c}nAU.04U<", "parent");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DOMNamespace dOMNamespace0 = new DOMNamespace("//tmp/|c}nAU.04U<", "parent");
      QName qName3 = new QName("parent", dOMNamespace0);
      defaultDocumentFactory1.createAttribute(element0, "?QtB\"/yc^@=$@?U0u4h", "http://xml.org/sax/features/namespace-prefixes");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/|c}nAU.04U<");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.datatype.DatatypeElement", "mKEL};y1WJq,IMrJ79");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      try { 
        sAXReader0.read("//tmp/tmp/u(e}(h0,QG*DhQ40FL0lOc+g<^4>");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //tmp/tmp/u(e}(h0,QG*DhQ40FL0lOc+g<^4> Nested exception: no protocol: //tmp/tmp/u(e}(h0,QG*DhQ40FL0lOc+g<^4>
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertSame(documentFactory0, defaultDocumentFactory0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      QName qName0 = QName.get("//tmp/|c}nAU.04U<");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, 1956, xSDatatype0);
      QName qName1 = new QName("//tmp/|c}nAU.04U<");
      BeanElement beanElement0 = new BeanElement("//tmp/|c}nAU.04U<", "");
      List<Attribute> list0 = beanElement0.attributes();
      datatypeElement0.setAttributes(list0);
      datatypeElement0.addAttribute(qName0, "");
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory1);
      namespaceStack0.getAttributeQName("//tmp/Cannot add another element to this Document as it already has a root element of: 0Cannot add another element to this Document as it already has a root element of: ", "//tmp/|c}nAU.04U<", "");
      defaultDocumentFactory1.createAttribute((Element) datatypeElement0, qName1, " rhs: ");
      NonLazyElement nonLazyElement0 = new NonLazyElement((QName) null, 1956);
      defaultDocumentFactory1.createCDATA("//tmp/Cannot add another element to this Document as it already has a root element of: 0Cannot add another element to this Document as it already has a root element of: ");
      DefaultDocumentFactory.getInstance();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/#.GK_Hk0#.GK_Hk", "//tmp/tmp/u(e}(h0,QG*DhQ40FL0lOc+g<^4>");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      QName qName0 = QName.get("//tmp/|c}nAU.04U<");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, 1956, xSDatatype0);
      QName qName1 = new QName("//tmp/|c}nAU.04U<");
      XSDatatype xSDatatype1 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement1 = new DatatypeElement(qName0, 1956, xSDatatype1);
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack0.pop("//tmp/|c}nAU.04U<");
      QName.get("http://xml.org/sax/features/namespaces", (Namespace) null);
      QName qName2 = new QName("//tmp/|c}nAU.04U<");
      Element element0 = datatypeElement0.addAttribute(qName0, "//tmp/|c}nAU.04U<");
      defaultDocumentFactory0.createElement(qName2);
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack1.pop("http://xml.org/sax/features/namespaces");
      namespaceStack1.getAttributeQName("//tmp/|c}nAU.04U<", "//tmp/|c}nAU.04U<", "parent");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DOMNamespace dOMNamespace0 = new DOMNamespace("//tmp/|c}nAU.04U<", "parent");
      QName qName3 = new QName("parent", dOMNamespace0);
      defaultDocumentFactory1.createAttribute(element0, "?QtB\"/yc^@=$@?U0u4h", "http://xml.org/sax/features/namespace-prefixes");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/|c}nAU.04U<");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.datatype.DatatypeElement", "mKEL};y1WJq,IMrJ79");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.createContentHandler(xMLFilterImpl1);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.addHandler((String) null, dispatchHandler0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      
      SAXReader sAXReader1 = new SAXReader(false);
      sAXReader1.getErrorHandler();
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isValidating());
      assertTrue(sAXReader1.isStringInternEnabled());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getEntityResolver();
      xMLFilterImpl0.setEntityResolver((EntityResolver) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      ElementStack elementStack0 = new ElementStack();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "C3 'M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      QName qName0 = QName.get("//tp/|n}nAU.04U<");
      QName.get("//tp/|n}nAU.04U<", (Namespace) null, "//tp/|n}nAU.04U<");
      qName0.getQualifiedName();
      QName qName1 = new QName("//tp/|n}nAU.04U<");
      QName qName2 = new QName("//tp/|n}nAU.04U<");
      FlyweightAttribute flyweightAttribute0 = new FlyweightAttribute(qName0);
      String string0 = "[Q\"r@9zE,s*$5?";
      QName.get("[Q\"r@9zE,s*$5?", (Namespace) null);
      QName.get("//tp/|n}nAU.04U<", (Namespace) null);
      qName2.getQualifiedName();
      QName qName3 = new QName("fxtmp/4 U<0K)D3HUVHT");
      Object object0 = new Object();
      qName2.equals(object0);
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName qName4 = new QName("fxtmp/4 U<0K)D3HUVHT");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName.get("//tp/|n}nAU.04U<", (Namespace) null, "fxtmp/4 U<0K)D3HUVHT");
      namespace0.clone();
      namespaceStack0.getAttributeQName("//tp/|n}nAU.04U<", "LV'8vT[XueH#;bwHY", " oz docu/jment ");
      QName.get("fxtmp/4 U<0K)D3HUVHT", namespace0);
      namespace0.getName();
      qName3.getQualifiedName();
      URI uRI0 = MockURI.aFTPURI;
      MockURI.toURL(uRI0);
      SAXReader sAXReader0 = new SAXReader(false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "fxtmp/4 U<0K)D3HUVHT");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      QName.get("//tp/|n}nAU.04U<");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      MockFile.createTempFile("file://", (String) null);
      String string0 = "9x:0;";
      File file0 = MockFile.createTempFile("file://", "9x:0;");
      String string1 = "/";
      MockFile mockFile0 = new MockFile(file0, "9x:0;");
      mockFile0.mkdirs();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.3122935330266907
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      File file0 = MockFile.createTempFile("K)D3HBVHT", "K)D3HBVHT");
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      locatorImpl1.setPublicId("gZA$qG^~0,*70iW");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(1);
      locatorImpl1.setPublicId(" [Comment: \"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[0] = (Object) locatorImpl1;
      mockPrintWriter0.printf(locale0, "pHt\"7>id-=IA#oP", objectArray0);
      Object[] objectArray1 = new Object[6];
      objectArray1[1] = (Object) defaultHandler2_0;
      locator2Impl0.getPublicId();
      mockPrintWriter0.print('H');
      objectArray1[2] = (Object) "K)D3HBVHT";
      Object object1 = new Object();
      locator2Impl0.setPublicId((String) null);
      objectArray1[4] = (Object) stringWriter0;
      objectArray1[3] = (Object) locator2Impl0;
      mockPrintWriter0.printf(locale0, "gZA$qG^~0,*70iW", objectArray1);
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Simulated IOException Nested exception: Simulated IOException
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      MockFile mockFile0 = new MockFile("http://xml.org/sax/features/namespace-prefixes");
      sAXReader0.getDispatchHandler();
      sAXReader0.setProperty("http://xml.org/sax/properties/lexical-handler", (Object) null);
      MockFile mockFile1 = new MockFile(mockFile0, "http://xml.org/sax/features/namespace-prefixes");
      MockFile.createTempFile("http://xml.org/sax/properties/lexical-handler", "]Imi[iDS", (File) mockFile0);
      try { 
        sAXReader0.read((File) mockFile1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = QName.get("");
      QName.get("", (Namespace) null, "");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, 1956, xSDatatype0);
      datatypeElement0.getNamespacePrefix();
      QName.get("", (Namespace) null, "[(DefaultAbsoluteLocationPath): ");
      QName qName1 = new QName("");
      QName.get("", "<[M", "[(DefaultAbsoluteLocationPath): ");
      QName qName2 = new QName("plk8\"O=/:u-*N'Ue_(l");
      qName2.equals(qName1);
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName.get("", "7hVo0V7<e&tl`");
      datatypeElement0.elementTextTrim(qName1);
      datatypeElement0.attributeCount();
      QName qName3 = QName.get("//tmp/tmp/u(e}(h0,QG*DhQ40FL0lOc+g< ^>:", namespace0, "//tmp/tmp/u(e}(h0,QG*DhQ40FL0lOc+g< ^>:");
      qName3.getQualifiedName();
      datatypeElement0.addAttribute(qName3, "");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getAttributeQName("", "//tmp/tmp/u(e}(h0,QG*DhQ40FL0lOc+g< ^>:", "");
      namespaceStack0.getAttributeQName("", "//tmp/tmp/u(e}(h0,QG*DhQ40FL0lOc+g< ^>:", "//tmp/tmp/u(e}(h0,QG*DhQ40FL0lOc+g< ^>:");
      namespace0.getName();
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName1, 1956);
      URI uRI0 = MockURI.aFTPURI;
      MockURI.toURL(uRI0);
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      try { 
        sAXReader0.setProperty("0P) 'D'j.", "0P) 'D'j.");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '0P) 'D'j.' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertNotNull(xMLReader0);
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5402095130751898
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("!+EIZ9u*U{;>gXAcZ", "");
      sAXReader_SAXEntityResolver0.resolveEntity("", "!+EIZ9u*U{;>gXAcZ");
      sAXReader_SAXEntityResolver0.resolveEntity("!+EIZ9u*U{;>gXAcZ", "");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      QName qName0 = QName.get("//tmp/|c}nAU.04U<");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, 1950, xSDatatype0);
      defaultDocumentFactory1.createAttribute((Element) datatypeElement0, qName0, "//tmp/|c}nAU.04U<");
      datatypeElement0.attributeValue("//tmp/|c}nAU.04U<");
      QName qName1 = new QName("//tmp/|c}nAU.04U<");
      UserDataElement userDataElement0 = new UserDataElement("//tmp/|c}nAU.04U<");
      userDataElement0.attributeValue(qName1);
      datatypeElement0.elementIterator(qName1);
      datatypeElement0.add((Element) userDataElement0);
      Element element0 = datatypeElement0.addAttribute(qName0, "r%@CWD4O(in|@fZUVKW");
      defaultDocumentFactory0.createAttribute(element0, qName0, "r%@CWD4O(in|@fZUVKW");
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName0, 1950);
      DOMNamespace dOMNamespace0 = new DOMNamespace("CX8`Xc`}'ce`9K9", "//tmp/|c}nAU.04U<");
      BeanElement beanElement0 = new BeanElement(qName1);
      beanElement0.getDocument();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      beanElement0.forEach(consumer0);
      Element element1 = beanElement0.createCopy(qName0);
      element1.elementIterator((String) null);
      defaultDocumentFactory1.createAttribute(element1, "r%@CWD4O(in|@fZUVKW", (String) null);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      documentFactory0.createDocument("");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter(parserAdapter0);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter1);
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = (-722);
      pipedInputStream0.mark((-722));
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      int int1 = 58;
      pipedInputStream0.markSupported();
      pipedInputStream0.mark(58);
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.366590399694106
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      QName qName0 = QName.get("//tmp/|c}nAU.04U<");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, 1956, xSDatatype0);
      QName qName1 = new QName("//tmp/|c}nAU.04U<");
      XSDatatype xSDatatype1 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement1 = new DatatypeElement(qName0, 1956, xSDatatype1);
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack0.pop("//tmp/|c}nAU.04U<");
      QName.get("http://xml.org/sax/features/namespaces", (Namespace) null);
      QName qName2 = new QName("//tmp/|c}nAU.04U<");
      datatypeElement0.addAttribute(qName0, "//tmp/|c}nAU.04U<");
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack1.pop("http://xml.org/sax/features/namespaces");
      namespaceStack1.getAttributeQName("//tmp/|c}nAU.04U<", "//tmp/|c}nAU.04U<", "parent");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DOMNamespace dOMNamespace0 = new DOMNamespace("//tmp/|c}nAU.04U<", "parent");
      QName qName3 = new QName("parent", dOMNamespace0);
      BeanElement beanElement0 = new BeanElement(qName3);
      QName.get("//tmp/|c}nAU.04U<", (Namespace) dOMNamespace0);
      Element element0 = beanElement0.createCopy(qName3);
      ((DefaultElement) element0).nodeIterator();
      defaultDocumentFactory2.createAttribute(element0, qName1, "//tmp/Cannot add another element to this Document as it already has a root element of: 0Cannot add another element to this Document as it already has a root element of: ");
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/Cannot add another element to this Document as it already has a root element of: 0Cannot add another element to this Document as it already has a root element of: ");
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      InputSource inputSource0 = new InputSource((InputStream) null);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3348713644341115
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "d458J7/PmooF;U\\)0";
      EntityResolver entityResolver0 = sAXReader0.createDefaultEntityResolver("d458J7/PmooF;U)0");
      sAXReader0.setEntityResolver(entityResolver0);
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.createXMLReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputSource inputSource0 = new InputSource("\"A4Y-.V1,=Oxp");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: \"A4Y-.V1,=Oxp Nested exception: no protocol: \"A4Y-.V1,=Oxp
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      StringReader stringReader0 = new StringReader("org.dom4j.tree.QNameCache");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setEntityResolver(defaultHandler0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      try { 
        MockURL.URL("isEqual", "org.dom4j.tree.QNameCache", (-1026), "jur{,*", uRLStreamHandler0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-1026
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.238281776565859
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = 'u';
      charArray0[2] = 'N';
      xMLReaderAdapter0.ignorableWhitespace(charArray0, (-469), (-469));
      xMLReaderAdapter0.characters(charArray0, 1969, (-2572));
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter(parserAdapter0);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter1);
      SAXReader sAXReader0 = new SAXReader(parserAdapter1);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      StringReader stringReader0 = new StringReader("^p|noW;6");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.3886459900319466
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "org.jaxen.saxpath.XPathSyntaxExceptio]";
          SAXReader sAXReader0 = new SAXReader(false);
          MockURL.getFtpExample();
          sAXReader0.getXMLFilter();
          sAXReader0.setXMLFilter((XMLFilter) null);
          URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
          URL uRL0 = MockURL.getHttpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor338.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor338.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("K)D3HBVHT");
      sAXReader_SAXEntityResolver0.resolveEntity("4U<", "");
      sAXReader0.getDispatchHandler();
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.3823452227303257
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      sAXReader0.resetHandlers();
      xMLFilterImpl0.notationDecl("//tmp/tmp/&Co0&Co0/tmp/&Co0&Co", "//tmp/tmp/&Co0&Co0/tmp/&Co0&Co", "`33DDr*5Oy`");
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      sAXReader0.setStripWhitespaceText(false);
      sAXReader0.resetHandlers();
      sAXReader0.isStringInternEnabled();
      sAXReader0.isMergeAdjacentText();
      sAXReader0.getErrorHandler();
      sAXReader0.getDispatchHandler();
      ElementStack elementStack0 = null;
      try {
        elementStack0 = new ElementStack((-3259));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.ElementStack", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setStringInternEnabled(true);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("//tmp/-'GVKy-0http:/xml.org/sax/properties/lexical-handler", "//tmp/-'GVKy-0http:/xml.org/sax/properties/lexical-handler");
      QName qName0 = QName.get("//tmp/4U<0/tmp/1mE^SJ:B2:2_kB_0/tmp/http:/www.w3.org/XML/1998/namespace0http:/www.w3.org/XML/1998/namespace", (Namespace) dOMNamespace0, "\"");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertNotNull(documentFactory0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      QName qName0 = QName.get("//tmp/|c}nAU.04U<");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, 1950, xSDatatype0);
      defaultDocumentFactory1.createAttribute((Element) datatypeElement0, qName0, "//tmp/|c}nAU.04U<");
      datatypeElement0.attributeValue("//tmp/|c}nAU.04U<");
      QName qName1 = new QName("//tmp/|c}nAU.04U<");
      UserDataElement userDataElement0 = new UserDataElement("//tmp/|c}nAU.04U<");
      userDataElement0.attributeValue(qName1);
      datatypeElement0.elementIterator(qName1);
      datatypeElement0.add((Element) userDataElement0);
      Element element0 = datatypeElement0.addAttribute(qName0, "r%@CWD4O(in|@fZUVKW");
      defaultDocumentFactory0.createAttribute(element0, qName0, "r%@CWD4O(in|@fZUVKW");
      NonLazyElement nonLazyElement0 = new NonLazyElement("r%@CWD4O(in|@fZUVKW");
      BeanElement beanElement0 = new BeanElement(qName1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      beanElement0.getName();
      beanElement0.forEach(consumer0);
      datatypeElement0.isTextOnly();
      Element element1 = beanElement0.createCopy(qName0);
      element1.elementIterator((String) null);
      defaultDocumentFactory1.createAttribute(element1, "r%@CWD4O(in|@fZUVKW", (String) null);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      try { 
        sAXReader0.read((Reader) null, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.239095456210609
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      try { 
        sAXReader0.read(",.V");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@510d6157 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@510d6157 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      File file0 = MockFile.createTempFile("K)D3HBVHT", "K)D3HBVHT");
      File file1 = MockFile.createTempFile("9x:0;", "K)D3HBVHT");
      file1.mkdirs();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      locatorImpl1.setPublicId("gZA$qG^~0,*70iW");
      SAXParseException sAXParseException0 = new SAXParseException("K)D3HBVHT", locator2Impl0);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "gZA$qG^~0,*70iW");
      locatorImpl1.setPublicId(" [Comment: \"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) locatorImpl1;
      mockPrintWriter0.printf(locale0, "9x:0;", objectArray0);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) file0;
      objectArray1[1] = (Object) defaultHandler2_0;
      mockPrintWriter0.print('H');
      objectArray1[2] = (Object) "K)D3HBVHT";
      Object object1 = new Object();
      objectArray1[3] = object1;
      locator2Impl0.setPublicId((String) null);
      objectArray1[4] = (Object) stringWriter0;
      objectArray1[5] = (Object) locator2Impl0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "gZA$qG^~0,*70iW", objectArray1);
      sAXParseException0.printStackTrace(printWriter0);
      xMLFilterImpl0.warning(sAXParseException0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.3812353033811244
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("K)D3HBVHT", "K)D3HBVHT");
      String string0 = "4U<";
      String string1 = "";
      sAXReader_SAXEntityResolver0.resolveEntity("4U<", "");
      File file0 = MockFile.createTempFile("4U<", "K)D3HBVHT");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      QName qName0 = QName.get("//tmp/|c}nAU.04U<");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, 1950, xSDatatype0);
      defaultDocumentFactory1.createAttribute((Element) datatypeElement0, qName0, "//tmp/|c}nAU.04U<");
      datatypeElement0.attributeValue("//tmp/|c}nAU.04U<");
      QName qName1 = new QName("//tmp/|c}nAU.04U<");
      UserDataElement userDataElement0 = new UserDataElement("//tmp/|c}nAU.04U<");
      userDataElement0.attributeValue(qName1);
      datatypeElement0.elementIterator(qName1);
      datatypeElement0.add((Element) userDataElement0);
      Element element0 = datatypeElement0.addAttribute(qName0, "r%@CWD4O(in|@fZUVKW");
      defaultDocumentFactory0.createAttribute(element0, qName0, "r%@CWD4O(in|@fZUVKW");
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName0, 1950);
      DOMNamespace dOMNamespace0 = new DOMNamespace("CX8`Xc`}'ce`9K9", "//tmp/|c}nAU.04U<");
      BeanElement beanElement0 = new BeanElement(qName1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      beanElement0.getName();
      beanElement0.forEach(consumer0);
      Element element1 = beanElement0.createCopy(qName0);
      element1.elementIterator((String) null);
      defaultDocumentFactory1.createAttribute(element1, "r%@CWD4O(in|@fZUVKW", (String) null);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      documentFactory0.createDocument("");
      try { 
        sAXReader0.read((Reader) null, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.4217192113780523
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.isIncludeInternalDTDDeclarations();
      sAXReader0.isIncludeInternalDTDDeclarations();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("ELEMENT_NODE");
      sAXReader_SAXEntityResolver0.uriPrefix = "//tmp/!_qY0/tmp/org.jaxen.saxpath.XPathSyntaxExceptio]0org.jaxen.saxpath.XPathSyntaxExceptio]";
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("I1_1U 5+o|", (String) null);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      MockFile.createTempFile("K)D3HBVHT", "K)D3HBVHT");
      MockFile.createTempFile("pHt\"7>id-=IA#oP", "K)D3HBVHT");
      FileSystemHandling.shouldAllThrowIOExceptions();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      locatorImpl1.setPublicId("gZA$qG^~0,*70iW");
      SAXParseException sAXParseException0 = new SAXParseException("K)D3HBVHT", locator2Impl0);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(1);
      locatorImpl1.setPublicId(" [Comment: \"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.FRENCH;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) defaultHandler2_0;
      objectArray0[2] = (Object) "K)D3HBVHT";
      Object object1 = new Object();
      objectArray0[3] = object1;
      locator2Impl0.setPublicId((String) null);
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) locator2Impl0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "gZA$qG^~0,*70iW", objectArray0);
      sAXParseException0.printStackTrace(printWriter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.read("gZA$qG^~0,*70iW");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: gZA$qG^~0,*70iW Nested exception: no protocol: gZA$qG^~0,*70iW
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setIgnoreComments(false);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.setIgnoreComments(false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.isValidating();
      String string0 = "20y/h,rN";
      try { 
        sAXReader0.setXMLReaderClassName("20y/h,rN");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class 20y/h,rN not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIgnoreComments(true);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.setIgnoreComments(true);
      sAXReader0.isValidating();
      String string0 = "20y/h,rN";
      try { 
        sAXReader0.setXMLReaderClassName("20y/h,rN");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class 20y/h,rN not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.4440977644767417
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      ElementStack elementStack0 = new ElementStack(193);
      elementStack0.getDispatchHandler();
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      sAXReader0.setDispatchHandler(dispatchHandler0);
      StringReader stringReader0 = new StringReader("//tmp/APqkU0x2m0.tmp");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5350813079469847
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setStripWhitespaceText(false);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL("K)D3HBVHT", "K)D3HBVHT", (-1), "Yg\"0n8*EE3C", uRLStreamHandler0);
      StringReader stringReader0 = new StringReader("Yg\"0n8*EE3C");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Yg\"0n8*EE3C");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "q@Q");
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("Given node cannot be a child of an entity reference", "org.dom4j.io.SAXReader");
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "http://xml.org/sax/features/string-interning");
      sAXReader_SAXEntityResolver0.resolveEntity("+?wG", "UPh=;4#uiF");
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      PipedInputStream pipedInputStream0 = new PipedInputStream(980);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.configureReader(xMLFilterImpl0, (DefaultHandler) null);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      char[] charArray0 = new char[7];
      xMLReaderAdapter0.characters(charArray0, 34, 1969);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("K)D3HBVHT");
      InputSource inputSource0 = new InputSource();
      String string0 = "";
      sAXReader_SAXEntityResolver0.resolveEntity("4U<", "");
      String string1 = "http://xml.org/sax/features/namespaces";
      sAXReader0.installXMLFilter((XMLReader) null);
      try { 
        MockURL.URL("quot");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: quot
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/S*[h$;Kh>90GgMfIwXci/:QmFZ5");
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter(parserAdapter0);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter1);
      SAXReader sAXReader0 = new SAXReader(parserAdapter1);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try { 
        sAXReader0.read("^p|noW;6");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: ^p|noW;6 Nested exception: no protocol: ^p|noW;6
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.5280883009539779
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setEncoding("//tmp/t<379j(04U<");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("K)D3HBVHT");
      sAXReader_SAXEntityResolver0.resolveEntity("K)D3HBVHT", "K)D3HBVHT");
      sAXReader_SAXEntityResolver0.resolveEntity("4U<", "");
      MockFile.createTempFile("4U<", "K)D3HBVHT");
      char[] charArray0 = new char[20];
      charArray0[0] = 'J';
      charArray0[8] = 'P';
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.removeHandler("http://xml.org/sax/features/namespaces");
      sAXReader0.removeHandler("v7w");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.removeHandler("http://xml.org/sax/features/namespaces");
      sAXReader0.removeHandler("v7w");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5350813079469847
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("K)D3HBVHT");
      sAXReader_SAXEntityResolver0.resolveEntity("K)D3HBVHT", "K)D3HBVHT");
      sAXReader_SAXEntityResolver0.resolveEntity("4U<", "");
      MockFile.createTempFile("4U<", "K)D3HBVHT");
      DefaultDocument defaultDocument0 = new DefaultDocument("K)D3HBVHT");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("@f=**O|5E({");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("JaM(~d{wgj", "9bx/LJ4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"9bx/LJ4\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          QName qName0 = QName.get("//tp/|n}nAU.04U<");
          QName.get("//tp/|n}nAU.04U<", (Namespace) null, "//tp/|n}nAU.04U<");
          String string0 = "\"q*XoLbp!NVG";
          qName0.getQualifiedName();
          QName.get("\"q*XoLbp!NVG", (Namespace) null, "\"q*XoLbp!NVG");
          QName qName1 = new QName("//tp/|n}nAU.04U<");
          FlyweightAttribute flyweightAttribute0 = new FlyweightAttribute(qName0);
          String string1 = "[Q\"r@9zE,s*$5?";
          QName.get("[Q\"r@9zE,s*$5?", (Namespace) null);
          QName.get("//tp/|n}nAU.04U<", (Namespace) null);
          qName1.getQualifiedName();
          QName qName2 = new QName("plk8=,:u-*N'Ue_(:");
          Object object0 = new Object();
          qName1.equals(object0);
          Namespace namespace0 = Namespace.NO_NAMESPACE;
          QName.get("plk8=,:u-*N'Ue_(:", "//tp/|n}nAU.04U<", "LV'8vT[XueH#;bwHY");
          NamespaceStack namespaceStack0 = new NamespaceStack();
          namespaceStack0.getAttributeQName("plk8=,:u-*N'Ue_(:", "LV'8vT[XueH#;bwHY", "\"q*XoLbp!NVG");
          namespace0.clone();
          namespaceStack0.getAttributeQName("//tp/|n}nAU.04U<", "LV'8vT[XueH#;bwHY", " oz docu/jment ");
          namespace0.getName();
          qName2.getQualifiedName();
          URI uRI0 = MockURI.aFTPURI;
          URL uRL0 = MockURI.toURL(uRI0);
          SAXReader sAXReader0 = new SAXReader(false);
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor338.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor338.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      QName qName0 = QName.get("//tmp/|c}nAU.04U<");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, 1950, xSDatatype0);
      defaultDocumentFactory1.createAttribute((Element) datatypeElement0, qName0, "//tmp/|c}nAU.04U<");
      datatypeElement0.attributeValue("//tmp/|c}nAU.04U<");
      QName qName1 = new QName("//tmp/|c}nAU.04U<");
      UserDataElement userDataElement0 = new UserDataElement("//tmp/|c}nAU.04U<");
      userDataElement0.attributeValue(qName1);
      datatypeElement0.elementIterator(qName1);
      datatypeElement0.add((Element) userDataElement0);
      Element element0 = datatypeElement0.addAttribute(qName0, "r%@CWD4O(in|@fZUVKW");
      defaultDocumentFactory0.createAttribute(element0, qName0, "r%@CWD4O(in|@fZUVKW");
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName0, 1950);
      DOMNamespace dOMNamespace0 = new DOMNamespace("CX8`Xc`}'ce`9K9", "//tmp/|c}nAU.04U<");
      BeanElement beanElement0 = new BeanElement(qName1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      beanElement0.forEach(consumer0);
      beanElement0.createCopy(qName0);
      beanElement0.elementIterator(" to a Pattern");
      defaultDocumentFactory1.createAttribute((Element) userDataElement0, (String) null, "f99)bstDwqu69PMk}>@");
      DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      defaultDocumentFactory0.createDocument("f99)bstDwqu69PMk}>@");
      StringReader stringReader0 = new StringReader("//tmp/plk8=,:u-*N'Ue_(:0");
      try { 
        sAXReader0.read((Reader) stringReader0, "text()");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/text() : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      File file0 = MockFile.createTempFile("K)D3HBVHT", "K)D3HBVHT");
      MockFile.createTempFile("pHt\"7>id-=IA#oP", "K)D3HBVHT");
      FileSystemHandling.shouldAllThrowIOExceptions();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      locatorImpl1.setPublicId("gZA$qG^~0,*70iW");
      SAXParseException sAXParseException0 = new SAXParseException("K)D3HBVHT", locator2Impl0);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(1);
      locatorImpl1.setPublicId(" [Comment: \"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) locatorImpl1;
      mockPrintWriter0.printf(locale0, "pHt\"7>id-=IA#oP", objectArray0);
      Object[] objectArray1 = new Object[6];
      objectArray1[1] = (Object) defaultHandler2_0;
      objectArray1[2] = (Object) "K)D3HBVHT";
      Object object1 = new Object();
      objectArray1[3] = object1;
      locator2Impl0.setPublicId((String) null);
      objectArray1[4] = (Object) stringWriter0;
      objectArray1[5] = (Object) locator2Impl0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "gZA$qG^~0,*70iW", objectArray1);
      sAXParseException0.printStackTrace(printWriter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader(" [Comment: \"");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  [Comment: \" not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      QName qName0 = QName.get("//tp/|n}nAU.04U<");
      QName.get("//tp/|n}nAU.04U<", (Namespace) null, "//tp/|n}nAU.04U<");
      String string0 = "\"q*XoLbp!NVG";
      qName0.getQualifiedName();
      QName.get("\"q*XoLbp!NVG", (Namespace) null, "\"q*XoLbp!NVG");
      QName qName1 = new QName("//tp/|n}nAU.04U<");
      FlyweightAttribute flyweightAttribute0 = new FlyweightAttribute(qName0);
      String string1 = "[Q\"r@9zE,s*$5?";
      QName.get("[Q\"r@9zE,s*$5?", (Namespace) null);
      QName qName2 = new QName("plk8=,:u-*N'Ue_(:");
      Object object0 = new Object();
      qName1.equals(object0);
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName.get("plk8=,:u-*N'Ue_(:", "//tp/|n}nAU.04U<", "LV'8vT[XueH#;bwHY");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getAttributeQName("plk8=,:u-*N'Ue_(:", "LV'8vT[XueH#;bwHY", "\"q*XoLbp!NVG");
      Namespace.get("[Q\"r@9zE,s*$5?");
      namespaceStack0.getAttributeQName("//tp/|n}nAU.04U<", "LV'8vT[XueH#;bwHY", " oz docu/jment ");
      namespace0.getName();
      qName2.getQualifiedName();
      URI uRI0 = MockURI.aFTPURI;
      MockURI.toURL(uRI0);
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("\"q*XoLbp!NVG", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class \"q*XoLbp!NVG not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }
}
