/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 09:35:33 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.Socket;
import java.net.SocketAddress;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.xmlreader.DefaultDataMode;
import org.quickserver.util.xmlreader.QSAdminServerConfig;
import org.quickserver.util.xmlreader.QuickServerConfig;
import org.quickserver.util.xmlreader.ServerHooks;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.193764486816496
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(false);
      theClient0.setTimeout(0);
      theClient0.getCommunicationLogging();
      theClient0.getTrusted();
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient1.getSocketChannel();
      theClient0.toString();
      theClient0.setTrusted(false);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(0);
      blockingClientHandler0.setSocket((Socket) null);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#0-ID:39>", blockingClientHandler0.getName());
      
      QuickServer quickServer0 = new QuickServer((String) null);
      quickServer0.setMaxConnection(0);
      QuickServer.getVersionNo();
      theClient1.setServer(quickServer0);
      theClient0.getClientEvent();
      theClient1.setTimeoutMsg("");
      theClient1.getClientAuthenticationHandler();
      theClient0.getClientExtendedEventHandler();
      theClient1.getServer();
      System.setCurrentTimeMillis(3252L);
      theClient1.getClientBinaryHandler();
      //  // Unstable assertion: assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.192898685950695
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(false);
      theClient0.setTimeout(0);
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getCommunicationLogging();
      theClient0.getCommunicationLogging();
      theClient0.getAuthenticator();
      theClient0.getSocketChannel();
      theClient0.toString();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#0-ID:20>", blockingClientHandler0.getName());
      
      QuickServer quickServer0 = new QuickServer("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      quickServer0.makeServerSocket();
      QuickServer.getVersionNo();
      theClient0.setServer(quickServer0);
      theClient0.getClientEvent();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      //  // Unstable assertion: assertEquals(0, theClient0.getTimeout());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.434635057597813
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("<W<ZTrNI1F8u)DO");
      theClient0.setTimeoutMsg("<W<ZTrNI1F8u)DO");
      theClient0.setCommunicationLogging(false);
      theClient0.setMaxAuthTry(1479);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setCommunicationLogging(true);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getServer();
      theClient0.toString();
      theClient0.getClientWriteHandler();
      theClient0.getClientEventHandler();
      theClient0.setMaxAuthTry(1479);
      theClient0.getClientData();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientEvent();
      theClient0.setTimeoutMsg("<W<ZTrNI1F8u)DO");
      theClient0.toString();
      theClient0.getAuthenticator();
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      assertEquals(1479, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5347185161547943
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("");
      theClient0.setTimeoutMsg("");
      theClient0.getSocket();
      theClient0.setSocket((Socket) null);
      theClient0.setMaxAuthTry(0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setCommunicationLogging(true);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      QuickServer quickServer0 = new QuickServer("");
      theClient0.setMaxAuthTry(4266);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientEventHandler();
      theClient0.setMaxAuthTry(4266);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getClientObjectHandler();
      assertEquals(4266, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.setOOBInline(true);
      mockSocket0.bind((SocketAddress) null);
      theClient0.setSocket(mockSocket0);
      theClient0.getSocket();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.435964402895254
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientBinaryHandler();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.toString();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientEventHandler();
      theClient0.setMaxAuthTry(1);
      theClient0.setMaxAuthTry(2858);
      ClientData clientData0 = theClient0.getClientData();
      TheClient theClient1 = new TheClient();
      theClient1.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientCommandHandler();
      theClient1.getClientEventHandler();
      theClient1.setMaxAuthTry(1);
      theClient0.getClientData();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient1.getClientCommandHandler();
      theClient1.setClientCommandHandler((ClientCommandHandler) null);
      theClient1.getClientData();
      TheClient theClient2 = new TheClient();
      theClient2.setClientData(clientData0);
      theClient1.setClientEventHandler((ClientEventHandler) null);
      assertEquals(1, theClient1.getMaxAuthTry());
      
      theClient2.getClientObjectHandler();
      theClient2.setClientObjectHandler((ClientObjectHandler) null);
      theClient2.getServer();
      assertTrue(theClient2.getCommunicationLogging());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setCommunicationLogging(true);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.getClientEvent();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.581238531789687
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("", 0);
      ServerHooks serverHooks0 = new ServerHooks();
      serverHooks0.add((Object) quickServer0);
      quickServer0.setClientCommandHandler("");
      serverHooks0.add((Object) quickServer0);
      quickServer0.run();
      serverHooks0.add((Object) quickServer0);
      serverHooks0.remove((Object) null);
      serverHooks0.trimToSize();
      quickServer0.setServerHooks(serverHooks0);
      theClient0.setServer(quickServer0);
      theClient0.getClientData();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.getClientAuthenticationHandler();
      System.setCurrentTimeMillis(500L);
      theClient0.getClientData();
      theClient0.getClientWriteHandler();
      System.setCurrentTimeMillis(0L);
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.048820325203473
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.setSocket(mockSocket0);
      QuickServer quickServer0 = new QuickServer("");
      QSAdminServerConfig qSAdminServerConfig0 = new QSAdminServerConfig();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t<client-extended-event-handler>";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      QuickServer.main(stringArray0);
      quickServer0.setBasicConfig(qSAdminServerConfig0);
      DefaultDataMode defaultDataMode0 = qSAdminServerConfig0.getDefaultDataMode();
      quickServer0.setDefaultDataMode(defaultDataMode0);
      quickServer0.setRawCommunicationLogging(true);
      theClient0.setServer(quickServer0);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientData();
      SocketChannel.open();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getAuthenticator();
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4866413644630816
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setCommunicationLogging(true);
      theClient0.setMaxAuthTry((-215));
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setCommunicationLogging(true);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setMaxConnectionMsg("");
      theClient0.getServer();
      theClient0.setMaxAuthTry(4280);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getClientEventHandler();
      theClient1.getClientData();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient1.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientData();
      theClient1.setClientData((ClientData) null);
      theClient1.getMaxAuthTryMsg();
      theClient1.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.getTrusted();
      theClient0.getMaxConnectionMsg();
      assertEquals(4280, theClient0.getMaxAuthTry());
      
      theClient1.getClientCommandHandler();
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientCommandHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.5808383717256613
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(239);
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getCommunicationLogging();
      theClient0.getAuthenticator();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getSocketChannel();
      theClient0.setMaxAuthTry(239);
      Data data0 = new Data();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientData();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getTrusted();
      theClient0.getMaxAuthTry();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      System.setCurrentTimeMillis(239);
      theClient0.getClientWriteHandler();
      assertEquals(239, theClient0.getTimeout());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3815998280716038
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(179);
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientCommandHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getServer();
      theClient0.setServer((QuickServer) null);
      TheClient theClient1 = new TheClient();
      theClient0.setMaxAuthTry(101);
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      TheClient theClient2 = new TheClient();
      TheClient theClient3 = new TheClient();
      theClient0.setServer((QuickServer) null);
      theClient3.getClientWriteHandler();
      theClient0.getClientEventHandler();
      theClient3.setMaxAuthTry(0);
      theClient2.getClientObjectHandler();
      theClient3.setClientObjectHandler((ClientObjectHandler) null);
      theClient2.getClientData();
      theClient2.setClientWriteHandler((ClientWriteHandler) null);
      CommandHandler commandHandler1 = new CommandHandler();
      theClient2.setClientCommandHandler(commandHandler1);
      theClient3.setTimeoutMsg("");
      theClient3.getTimeoutMsg();
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      theClient1.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      assertEquals(101, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.setTcpNoDelay(false);
      theClient0.setSocket(mockSocket0);
      MockSocket mockSocket1 = new MockSocket();
      theClient0.getSocket();
      theClient0.toString();
      MockSocket mockSocket2 = new MockSocket();
      assertFalse(mockSocket2.equals((Object)mockSocket1));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.5347185161547943
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(false);
      theClient0.setTimeout(239);
      theClient0.getClientEventHandler();
      theClient0.getCommunicationLogging();
      theClient0.getTrusted();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getSocketChannel();
      theClient0.getMaxAuthTryMsg();
      theClient0.setMaxAuthTry((-3712));
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Data data0 = new Data();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      Data data1 = new Data();
      theClient0.getMaxAuthTryMsg();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getCommunicationLogging();
      theClient0.getMaxAuthTry();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientWriteHandler();
      assertEquals(239, theClient0.getTimeout());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("n;oLTq#u45|K");
      QuickServerConfig quickServerConfig0 = quickServer0.getConfig();
      quickServer0.setConfig(quickServerConfig0);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.435348070075531
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(239);
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getCommunicationLogging();
      theClient0.getClientEventHandler();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.getClientCommandHandler();
      defaultClientEventHandler0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getCommunicationLogging();
      theClient0.getTrusted();
      theClient0.getSocketChannel();
      theClient0.toString();
      theClient0.setTrusted(true);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(239);
      BlockingClientHandler blockingClientHandler1 = new BlockingClientHandler(239);
      blockingClientHandler1.setSecure(false);
      blockingClientHandler0.getClientData();
      theClient0.getTimeout();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientData();
      theClient0.getAuthenticator();
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      System.setCurrentTimeMillis(0L);
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      theClient0.getAuthenticator();
      theClient0.getClientExtendedEventHandler();
      assertEquals(239, theClient0.getTimeout());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.5360478614522353
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setCommunicationLogging(false);
      theClient0.getCommunicationLogging();
      theClient0.getAuthenticator();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getSocketChannel();
      theClient0.toString();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientEventHandler();
      TheClient theClient1 = new TheClient();
      theClient0.getClientData();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      assertFalse(theClient0.getCommunicationLogging());
      
      TheClient theClient2 = new TheClient();
      theClient2.getClientCommandHandler();
      TheClient theClient3 = new TheClient();
      theClient2.setClientCommandHandler((ClientCommandHandler) null);
      TheClient theClient4 = new TheClient();
      theClient4.getClientData();
      theClient3.setClientData((ClientData) null);
      TheClient theClient5 = new TheClient();
      theClient2.setTimeoutMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient5.setTimeoutMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient3.setClientEventHandler((ClientEventHandler) null);
      theClient2.getClientObjectHandler();
      theClient2.setClientObjectHandler((ClientObjectHandler) null);
      theClient3.getClientExtendedEventHandler();
      assertTrue(theClient3.getCommunicationLogging());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.125543816101745
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(false);
      theClient0.setTimeout(0);
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getTrusted();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setTrusted(true);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientEventHandler((ClientEventHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.getClientObjectHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      boolean boolean0 = theClient0.getTrusted();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("E%!LpvA*O(Po`F0Jx");
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout((-788));
      theClient0.getClientEventHandler();
      theClient0.getTrusted();
      theClient0.getAuthenticator();
      theClient0.toString();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(0);
      blockingClientHandler0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getTimeout();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.toString();
      assertEquals((-788), theClient0.getTimeout());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.380167676263512
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("/default-data-mode/data-type-out");
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getServer();
      theClient0.getClientData();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.getClientData();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient1.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientObjectHandler();
      theClient1.getClientExtendedEventHandler();
      theClient0.getServer();
      theClient1.getClientObjectHandler();
      theClient1.getClientObjectHandler();
      assertTrue(theClient1.getCommunicationLogging());
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.toString();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      ClientEventHandler clientEventHandler0 = theClient0.getClientEventHandler();
      theClient0.getClientData();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) theClient0;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[4] = object0;
      // Undeclared exception!
      try { 
        clientEventHandler0.closingConnection(nonBlockingClientHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      TheClient theClient0 = new TheClient();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient0.setTimeoutMsg("no socket");
      theClient0.getTimeoutMsg();
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",R8");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      TheClient theClient0 = new TheClient();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient0.getTimeoutMsg();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D(P4");
      System.setCurrentTimeMillis(1406L);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getTimeout();
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, int0);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      QuickServer quickServer0 = new QuickServer();
      quickServer0.startService();
      theClient0.setServer(quickServer0);
      theClient0.getMaxAuthTry();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      System.setCurrentTimeMillis(0L);
      QuickServer quickServer1 = new QuickServer();
      theClient0.getSocket();
      System.setCurrentTimeMillis(0L);
      theClient0.getSocketChannel();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
  }
}
