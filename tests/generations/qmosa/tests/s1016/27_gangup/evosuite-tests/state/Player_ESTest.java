/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 10:34:35 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player();
      player0.head = null;
      player0.setDead((-2255L), true);
      player0.setX((-789.49F));
      player0.getX();
      int int0 = player0.type();
      assertEquals((-2255L), player0.getTimeOfDeath());
      assertEquals(5, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player((-2344), "0.0.0.0", (-1716));
      player0.setMoney((-1716));
      player0.setMoney((-2344));
      player0.id = (-1716);
      player0.getMoney();
      System.setCurrentTimeMillis((-1716));
      Player player1 = new Player((-1716));
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertEquals((-2344.0F), player0.getMoney(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(4919);
      player0.setY((-3158.5F));
      Player player1 = new Player((-1094), "<{JD9Z; ?{nGdo.", (String) null, (-1094));
      player0.add(player1);
      player0.setJoinOK(player0, false);
      assertEquals((-3158.5F), player0.getY(), 0.01F);
      
      Player player2 = new Player((short)4919, "v(1j-J", "v(1j-J", (-9758), 0);
      int int0 = player2.getStrength();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.786456060735981
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Party party0 = new Party();
      Party party1 = new Party();
      Object object0 = new Object();
      Locale locale0 = Locale.ROOT;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      LinkedList<String> linkedList2 = new LinkedList<String>(linkedList1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList2);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      locale0.clone();
      locale0.clone();
      Player player0 = new Player(2392);
      player0.setY((-1476.6012F));
      Player player1 = new Player();
      player0.isJoinOK(player1, true);
      player0.getY();
      player0.getZ();
      Player player2 = new Player((-4155), ".*[.]class$", "gui.MduleBrowseDialog$ModuleFilter", (-4155), 2392);
      player2.getX();
      float float0 = Player.MOVE_DISTANCE;
      float float1 = Player.MOVE_DISTANCE;
      player0.isJoinOK(player1, true);
      player0.getX();
      boolean boolean0 = player1.isJoinOK(player0, true);
      assertEquals((-1476.6012F), player0.getY(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Party party0 = new Party();
      Player player0 = new Player();
      Player player1 = null;
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Party party0 = new Party();
      Object object0 = new Object();
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      linkedList1.add("/yimwe*9y~sX+");
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1, locale_FilteringMode0);
      locale0.clone();
      Locale locale1 = Locale.KOREA;
      locale1.clone();
      Player player0 = new Player(233, "Player", 233);
      player0.setY(233);
      Player player1 = new Player();
      player0.isJoinOK(player1, false);
      player0.getY();
      player1.getZ();
      player1.getX();
      float float0 = Player.MOVE_DISTANCE;
      player0.isBoss();
      float float1 = player0.getX();
      assertEquals(233.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, float1, 0.01F);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player();
      player0.setJoinOK(player0, false);
      Locale locale0 = Locale.CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      linkedList1.add("u@.BdQ");
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList1.add("vd#])qiRqqO<U<2M;`");
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      locale0.getDisplayCountry(locale1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list0, locale_FilteringMode2);
      Locale locale2 = Locale.CHINESE;
      Locale.forLanguageTag("n(O");
      locale2.getScript();
      Locale locale3 = Locale.TRADITIONAL_CHINESE;
      Locale.setDefault(locale0);
      locale2.clone();
      Player player1 = new Player();
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(1, player1.getStrength());
      assertEquals(0, player1.getPictureId());
      assertTrue(player1.isConnected());
      assertEquals("0.0.0.0", player1.getIP());
      assertFalse(player1.isDead());
      assertEquals("Player-1", player1.getName());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n(O");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player(57, "Yaqmj{k{pot", "state.Player$JoinInfo", (-3840), (-170));
      int int0 = player0.getStrength();
      assertEquals("Yaqmj{k{pot", player0.getIP());
      assertEquals((-3840), player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals((-170), int0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player();
      player0.setJoinOK(player0, false);
      Locale locale0 = Locale.CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      linkedList1.add("u@.BdQ");
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList1.add("vd#])qiRqqO<U<2M;`");
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      locale0.getDisplayCountry(locale1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list0, locale_FilteringMode2);
      Locale locale2 = Locale.CHINESE;
      Locale locale3 = Locale.ENGLISH;
      locale2.getScript();
      Locale locale4 = Locale.TRADITIONAL_CHINESE;
      Locale.setDefault(locale0);
      locale2.clone();
      Player player1 = new Player();
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals("0.0.0.0", player1.getIP());
      assertTrue(player1.isConnected());
      assertEquals(1, player1.getStrength());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertTrue(boolean0);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertFalse(player1.isDead());
      assertEquals(0, player1.getPictureId());
      assertEquals("Player-1", player1.getName());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(1028, "jDy sc", "jDy sc", 3230);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      Player player1 = new Player(457, (String) null, (short)4919);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2344);
      bufferedInputStream0.markSupported();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 2344);
      bufferedInputStream0.available();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player1.unpack(dataInputStream0);
      Player player2 = new Player();
      String string0 = player2.getIP();
      assertEquals(0, player2.getPictureId());
      assertEquals("0.0.0.0", string0);
      assertEquals("Player-1", player2.getName());
      
      bufferedInputStream0.markSupported();
      dataInputStream0.skip((byte) (-29));
      player0.getName();
      boolean boolean0 = player1.unpack(dataInputStream0);
      assertFalse(boolean0);
      
      float float0 = player0.getX();
      assertEquals(10.0F, float0, 0.01F);
      
      player1.toString();
      assertEquals(1, player1.getStrength());
      assertFalse(player1.isDead());
      assertEquals(4919, player1.getPictureId());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertTrue(player1.isConnected());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player();
      player0.setZ(4919);
      player0.isBoss();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) player0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[4] = (Object) player0;
      objectArray0[5] = (Object) "gui.MduleBrowseDialog$ModuleFilter";
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray1 = new Object[8];
      objectArray1[2] = (Object) ".*[.]class$";
      objectArray1[2] = (Object) ".*[.]class$";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      linkedList1.add(" ");
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode1);
      locale0.clone();
      objectArray1[3] = (Object) player0;
      objectArray1[4] = object0;
      locale0.clone();
      objectArray1[5] = (Object) locale0;
      player0.setY(4919);
      Player player1 = new Player();
      player1.getY();
      player0.getZ();
      player1.getX();
      float float0 = Player.MOVE_DISTANCE;
      player0.isBoss();
      float float1 = player0.getX();
      assertEquals(4919.0F, player0.getZ(), 0.01F);
      assertEquals(10.0F, float1, 0.01F);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Party party0 = new Party();
      Party party1 = new Party();
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode1);
      locale0.clone();
      locale0.clone();
      Player player0 = new Player(2581, "", 3907);
      player0.setY(0.2F);
      Player player1 = new Player();
      Player player2 = new Player(24672, "", (String) null, 3907);
      player2.isJoinOK(player1, true);
      player1.getY();
      player2.getZ();
      Player player3 = new Player((-27335), "", (String) null, 24672, (short)4919);
      player3.getX();
      float float0 = Player.MOVE_DISTANCE;
      float float1 = Player.MOVE_DISTANCE;
      Player player4 = new Player();
      player4.isJoinOK(player0, true);
      player2.getX();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-27335), 703);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        player2.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y5bu&_!,[H9un");
      Player player0 = new Player(2377, "y5bu&_!,[H9un", (-378));
      player0.setZ((-4044.343F));
      float float0 = player0.getZ();
      assertEquals((-4044.343F), float0, 0.01F);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(1, "l", (String) null, 1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)1);
      bufferedInputStream0.markSupported();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)1);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      player0.unpack(dataInputStream0);
      String string0 = player0.getIP();
      assertNotNull(string0);
      
      player0.getName();
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertFalse(boolean0);
      
      float float0 = player0.getX();
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, float0, 0.01F);
      assertEquals(1, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player(2531, (String) null, (String) null, (-1061));
      player0.getIP();
      assertEquals((-1061), player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.360700201085304
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Party party0 = new Party();
      Player player0 = new Player(4919, "module.ModuleBrowserDialog$ModuleFilter", "UK QgRB", 4919, 3907);
      player0.add(party0);
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player(1730, ".*b]hclns $", "", (-828), 4);
      player0.getName();
      assertEquals(".*b]hclns $", player0.getIP());
      assertEquals(4, player0.getStrength());
      assertEquals((-828), player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player((-137));
      player0.setMoney((-137));
      player0.setX(1.0F);
      player0.getX();
      System.setCurrentTimeMillis((short)4919);
      byte[] byteArray0 = player0.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      int int0 = player0.type();
      assertEquals(119, player0.getId());
      assertEquals(5, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Party party0 = new Party();
      System.setCurrentTimeMillis(15000L);
      System.setCurrentTimeMillis(28160);
      Player player0 = new Player(28160, "", 28160);
      byte[] byteArray0 = player0.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 5);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      MockFile mockFile0 = new MockFile("ZRvU22", "ZRvU22");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      Player player0 = new Player();
      Player player1 = new Player();
      // Undeclared exception!
      try { 
        player1.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9713931362744876
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player(440);
      Player player1 = new Player();
      player0.add(player1);
      player0.setY(440);
      player0.setX(0.2F);
      player1.setDead((-270L));
      player1.remove(player0);
      player0.setConnected(false);
      player0.setX(440);
      player0.setDead();
      player0.setDead((-459L));
      player0.getTimeOfDeath();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-8);
      player1.unpack(byteArray0);
      int int0 = player1.type();
      assertEquals((-270L), player1.getTimeOfDeath());
      assertEquals(5, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.560923023161317
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player(185, "M\r>h$", "0.0.0.0", (-912));
      player0.setConnected(false);
      Player player1 = new Player((-1498), "VF[GqK)D3HB", 0);
      player1.pack();
      player0.isJoinOK(player1, false);
      MockFile mockFile0 = new MockFile("0.0.0.0", "VF[GqK)D3HB");
      player0.isConnected();
      assertFalse(player0.isConnected());
      
      mockFile0.setReadable(false, true);
      Player player2 = new Player((-302));
      player2.pack();
      assertTrue(player2.isConnected());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player(1028, "jDyU sc", "", 3230);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (short)4919);
      bufferedInputStream0.markSupported();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 128);
      bufferedInputStream0.available();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.readUnsignedByte();
      player0.unpack(dataInputStream0);
      player0.getIP();
      bufferedInputStream0.markSupported();
      dataInputStream0.skip((-427L));
      assertEquals(1, byteArrayInputStream0.available());
      
      player0.getName();
      player0.unpack(dataInputStream0);
      player0.getX();
      player0.toString();
      float float0 = player0.getY();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ZRvU22");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("ZRvU22", "ZRvU22");
      int int0 = Packable.ACTION;
      Player player0 = new Player();
      Player player1 = new Player();
      MockFile mockFile1 = new MockFile("ZRvU22");
      Player player2 = new Player((byte)96, "q*f3PY&", "", 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[4] = (Object) player0;
      objectArray0[7] = (Object) mockFile0;
      PrintStream printStream0 = mockPrintStream0.format("9rXe|e$H-n~jgB[Z", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      player2.pack(dataOutputStream0);
      assertEquals("q*f3PY&", player2.getIP());
      assertEquals(2, player2.getPictureId());
      
      player0.pack();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertEquals("Player-1", player0.toString());
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player((-2357), "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", "", (-255));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player((-1528), "\"P/pXD;Q", "\"P/pXD;Q", (-1528));
      Party party0 = new Party();
      party0.add(player0);
      party0.id = 2381;
      player0.remove(party0);
      player0.reset(false);
      byte[] byteArray0 = new byte[3];
      player0.setConnected(false);
      player0.setDead(1L);
      long long0 = player0.getTimeOfDeath();
      assertTrue(player0.isDead());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player(4919, "module.ModuleBrowserDialog$ModuleFlter", "module.ModuleBrowserDialog$ModuleFlter", 4919);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 4919);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(4919, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertFalse(boolean0);
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player();
      player0.setJoinOK(player0, false);
      Locale locale0 = Locale.CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      linkedList1.add("u@.BdQ");
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList1.add("^H*~m");
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      locale0.getDisplayCountry(locale1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list0, locale_FilteringMode2);
      Locale locale2 = Locale.CHINESE;
      Locale.forLanguageTag("^H*~m");
      locale2.getScript();
      Locale locale3 = Locale.TRADITIONAL_CHINESE;
      Locale.setDefault(locale0);
      locale3.clone();
      Player player1 = new Player(1926, "", "", 4258, 3598);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(3598, player1.getStrength());
      assertEquals(4258, player1.getPictureId());
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 1932);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      boolean boolean1 = player0.unpack(dataInputStream0);
      assertTrue(boolean1 == boolean0);
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertEquals(0, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("Player-1", player0.getName());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(player0.isDead());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.241028319059176
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(185, "M\r>h$", "0.0.0.0", (-912));
      player0.setConnected(false);
      Player player1 = new Player((-1495), "VF[GqK)D3HB", 0);
      player0.isJoinOK(player1, false);
      MockFile mockFile0 = new MockFile("0.0.0.0", "VF[GqK)D3HB");
      player1.gangStrength();
      player1.isDead();
      player0.getIP();
      Player player2 = new Player();
      player2.getName();
      player2.getStrength();
      Party party0 = player0.boss;
      Player player3 = new Player((short)4919, "VF[GqK)D3HB", "M\r>h$", 1, 1);
      player1.reset(false);
      player0.setConnected(false);
      player2.getZ();
      assertTrue(player2.isConnected());
      
      player0.setMoney(0.0F);
      int int0 = player0.getPictureId();
      assertFalse(player0.isConnected());
      assertEquals((-912), int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player(0, "", "jDy sc", 1028);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1028);
      bufferedInputStream0.markSupported();
      bufferedInputStream0.skip((-1L));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 529);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      String string0 = player0.getIP();
      assertEquals("", string0);
      
      player0.getName();
      player0.toString();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1028, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.100479061876036
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player(2, "", "FT", 0);
      player0.gangStrength();
      player0.setZ(2);
      player0.prev = null;
      player0.getX();
      player0.setDead((-512L));
      player0.setConnected(true);
      Party party0 = player0.next;
      player0.add((Party) null);
      player0.getIP();
      player0.isConnected();
      player0.toString();
      player0.isDead();
      player0.setDead((long) 0);
      player0.setY((-10.053585F));
      assertEquals(2.0F, player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ZRvU22");
      Player player0 = new Player(3907, (String) null, "", 2919, (-32640));
      Party party0 = player0.prev;
      player0.boss = null;
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1724318111562746
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player();
      player0.setZ(0.0F);
      Party party0 = new Party(635);
      player0.gangStrength();
      player0.next = party0;
      player0.getStrength();
      Player player1 = new Player(635, ".*[.]class$", "module.ModuleBrowserDialog$ModuleFilter", 4);
      player0.getSubparty();
      player1.boss = (Party) player0;
      player1.gangStrength();
      player1.id = 2243;
      party0.next = (Party) player0;
      party0.next.id = 1;
      party0.next = (Party) player1;
      player0.isJoinOK(player1, false);
      player0.getIP();
      player1.getName();
      player0.getStrength();
      Player player2 = (Player)player1.boss;
      Player player3 = (Player)player1.boss;
      party0.next = (Party) player3;
      party0.prev = (Party) player2;
      player0.reset(false);
      player0.setConnected(false);
      player0.getZ();
      player0.setMoney((-842.95F));
      int int0 = player0.getPictureId();
      assertFalse(player0.isConnected());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "c<%Qr5wSn'd4t%2");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-30);
      byteArray0[8] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player(3600);
      Player player1 = new Player((short)4919, "I;ov8n", 3600);
      player0.head = (Party) player1;
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX(0.0F);
      float float0 = player0.getX();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list0, locale_FilteringMode2);
      Locale locale1 = Locale.CHINESE;
      Locale.forLanguageTag("E");
      Player player0 = new Player(4919, "Player.unpack(): *** WARNING *** data is not of proper type!", 4);
      System.setCurrentTimeMillis(4919L);
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.053778405293998
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player(4919);
      player0.setJoinOK(player0, false);
      player0.getMoney();
      player0.setZ(4919);
      player0.setDead();
      MockPrintStream mockPrintStream0 = new MockPrintStream("gui.ModuleBrowserDialog$ModuleFilter");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) player0;
      objectArray0[1] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) player0;
      objectArray0[5] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      dataOutputStream0.writeInt(0);
      printStream0.print((-1.0));
      dataOutputStream0.writeBoolean(false);
      player0.pack(dataOutputStream0);
      player0.setY(989.47F);
      player0.isJoinOK(player0, true);
      player0.getY();
      player0.getMoney();
      player0.getZ();
      player0.getMoney();
      player0.getX();
      player0.getMoney();
      player0.getMoney();
      float float0 = player0.getX();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Player player0 = new Player((-1), "`y", "", 5);
      boolean boolean0 = player0.isConnected();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(boolean0);
      assertEquals(5, player0.getPictureId());
      assertEquals("`y", player0.getIP());
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player(0, "Player.unpack(): *** WARNING *** data is not of proper type!", "", 3598, 0);
      player0.gangStrength();
      player0.pack();
      player0.setY(3598);
      player0.getMoney();
      System.setCurrentTimeMillis(0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Party party0 = new Party();
      Party party1 = new Party();
      Party party2 = new Party();
      Player player0 = new Player(4310, (String) null, 4310);
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Party party0 = new Party();
      Party party1 = new Party();
      Party party2 = new Party();
      Party party3 = new Party();
      Player player0 = new Player(0, "module.ModuleBrowserDialog$ModuleFilter", 269);
      Player player1 = new Player(0, "module.ModuleBrowserDialog$ModuleFilter", "module.ModuleBrowserDialog$ModuleFilter", (-3397), (-3038));
      player0.add(party3);
      player0.setJoinOK(player1, false);
      System.setCurrentTimeMillis(269);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player();
      player0.setJoinOK(player0, true);
      player0.isBoss();
      Object object0 = new Object();
      Locale locale0 = Locale.CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        linkedList2.addAll((int) (short)4919, (Collection<? extends Locale.LanguageRange>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4919, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Player player0 = new Player((-1498), "VF[GqK)D3HB", 0);
      MockFile mockFile0 = new MockFile("0.0.0.0", "VF[GqK)D3HB");
      player0.toString();
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.755739480438498
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player(4, "7=e{R!z9+W'", 4);
      player0.pack();
      player0.getX();
      player0.id = (-1424);
      player0.setDead((long) 4, true);
      Player player1 = new Player(4, "", (-1108));
      player0.prev = (Party) player1;
      player1.add(player0);
      player0.setZ(0.0F);
      player0.setX(0.2F);
      player0.gangStrength();
      player0.getMoney();
      player1.gangStrength();
      player0.pack();
      assertEquals(4L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player(163, (String) null, "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", 163, (-1));
      int int0 = player0.gangStrength();
      assertEquals(163, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("u@.BdQ");
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((String) null);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) list0, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.GERMAN;
      locale0.getDisplayLanguage();
      locale0.getDisplayCountry(locale1);
      LinkedList<String> linkedList5 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList4, (Collection<String>) linkedList5, locale_FilteringMode0);
      Locale locale2 = Locale.CHINESE;
      Locale.forLanguageTag("Player");
      locale0.getScript();
      Locale locale3 = Locale.TRADITIONAL_CHINESE;
      Locale.setDefault(locale2);
      locale0.clone();
      Player player0 = new Player((-1027), "^H*~m", "~.", (-1027));
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Party party0 = new Party();
      Player player0 = new Player(4919, "Hyc)kw2vWqLxF .ml_", (-7414));
      float float0 = player0.getMoney();
      assertEquals((-7414), player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player(4919, "8]YvPJc8IDtG%{bhFXw", "gui.ModuleBrowserDialog$ModuleFilter", 4919, 4919);
      int int0 = player0.getStrength();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(4919, player0.getPictureId());
      assertFalse(player0.isDead());
      assertTrue(player0.isConnected());
      assertEquals("8]YvPJc8IDtG%{bhFXw", player0.getIP());
      assertEquals(4919, int0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ZRvU22");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      MockFile mockFile0 = new MockFile("ZRvU22", "ZRvU22");
      Player player0 = new Player(4919, "1tRau", "ZRvU22", 1221, (-170));
      player0.setY(1.0F);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.023907271562916
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player(3564, "'-Ok?-<tZ##7{^K7&", 3564);
      player0.gangStrength();
      player0.setZ(1.0F);
      player0.getPictureId();
      player0.gangStrength();
      player0.toString();
      player0.getStrength();
      byte[] byteArray0 = new byte[4];
      player0.unpack(byteArray0);
      player0.setConnected(true);
      player0.getY();
      System.setCurrentTimeMillis((short)4919);
      player0.getZ();
      player0.getZ();
      float float0 = player0.getX();
      assertEquals(1.0F, player0.getZ(), 0.01F);
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ZRvt22");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Player player0 = new Player((-623));
      int int0 = player0.getStrength();
      assertEquals(0, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(1, int0);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-623", player0.toString());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ZRvU22");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      MockFile mockFile0 = new MockFile("ZRvU22", "ZRvU22");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.read(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2787);
      bufferedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Player player0 = new Player();
      Player player1 = new Player();
      byteArrayInputStream1.markSupported();
      player1.setDead(2368L);
      assertEquals(2368L, player1.getTimeOfDeath());
      
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      Player player2 = new Player((byte)110, "q*f3PY&", "", 3);
      player2.add(player0);
      assertEquals(10.0F, player2.getX(), 0.01F);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Party party0 = new Party();
      Player player0 = new Player(14592, "8]YvPJc8IDtG%{bhFXw", "", (-170), 4919);
      player0.setDead((-775L), false);
      System.setCurrentTimeMillis(4919);
      System.setCurrentTimeMillis(14592);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Player player0 = new Player((byte) (-81));
      Party party0 = new Party();
      party0.id = 5;
      player0.boss = party0;
      party0.prev = (Party) player0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      player0.getTimeOfDeath();
      System.setCurrentTimeMillis(2013L);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Party party0 = new Party();
      Party party1 = new Party();
      Party party2 = new Party();
      Party party3 = new Party();
      Player player0 = new Player(269, "W,]f>x}KMM", 1095);
      player0.pack();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1095, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Party party0 = new Party();
      Party party1 = new Party();
      Party party2 = new Party();
      Party party3 = new Party();
      Player player0 = new Player(2759, "Playe", "Playe", (-1), (-1));
      player0.pack();
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals((-1), player0.getPictureId());
      assertEquals((-1), player0.getStrength());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Player player0 = new Player(1028, "jDy sc", "", 3206);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)10);
      bufferedInputStream0.markSupported();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, (byte)10);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      player0.unpack(dataInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(byteArrayInputStream0, 2771);
      dataInputStream0.readBoolean();
      DataInputStream dataInputStream1 = new DataInputStream(bufferedInputStream0);
      player0.unpack(dataInputStream0);
      System.setCurrentTimeMillis((-823L));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.681095545078155
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Player player0 = new Player(4919);
      player0.setConnected(true);
      Player player1 = new Player((short)4919, "GxzpZSAfOnl3P$\"5", "gv2>0c8*+u&?56\"!Ry)", 4919);
      player0.getMoney();
      player0.setY((short)4919);
      player0.isJoinOK(player1, true);
      Player player2 = new Player(266, "", "", (short)4919);
      player2.getSubparty();
      player0.getMoney();
      player1.getZ();
      player0.getMoney();
      float float0 = player0.getX();
      assertEquals(4919.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Player player0 = new Player(1028, "jDy sc", "", 3206);
      player0.reset(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
}
