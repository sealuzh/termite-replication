/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 10:56:57 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.estimate.BayesNetEstimator;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.ChebyshevDistance;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.EuclideanDistance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.MiddleOutConstructor;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.unsupervised.attribute.Remove;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = null;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      double double0 = (-1250.153461);
      jRip_NumericAntd0.value = (-1250.153461);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.563413311326071
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.clone();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList1.toArray();
      linkedList1.removeAll(linkedList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      linkedList1.add((Locale.LanguageRange) null);
      linkedList0.offer((Locale.LanguageRange) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ArrayList<String> arrayList3 = new ArrayList<String>(arrayList0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.toArray();
      linkedList2.spliterator();
      linkedList2.add("-E");
      linkedList0.add((Locale.LanguageRange) null);
      arrayList1.add((Locale.LanguageRange) null);
      linkedList0.add((Locale.LanguageRange) null);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      arrayList3.parallelStream();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.getEstimator();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      arrayList0.spliterator();
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getCheckErrorRate());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-E";
      stringArray0[1] = "t";
      stringArray0[2] = "t";
      stringArray0[3] = "-E";
      stringArray0[4] = "t";
      jRip0.setOptions(stringArray0);
      jRip0.usePruningTipText();
      jRip0.getOptions();
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.132999251994992
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("-E", arrayList0, 67);
      Attribute attribute0 = new Attribute("@data");
      attribute0.value(2273);
      JRip jRip0 = new JRip();
      arrayList0.add(attribute0);
      attribute0.addStringValue(attribute0, (-888));
      jRip0.setUsePruning(false);
      jRip0.optimizationsTipText();
      try { 
        jRip0.rulesetForOneClass((-675.0544114428), instances0, (-1), 2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("o", arrayList0, 122);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.m_theInstances = instances0;
      DenseInstance denseInstance0 = new DenseInstance(4);
      decisionTable0.m_theInstances.add((Instance) denseInstance0);
      decisionTable0.m_theInstances = instances0;
      Instances instances1 = decisionTable0.m_theInstances;
      decisionTable0.m_theInstances.getRevision();
      MockPrintStream mockPrintStream0 = new MockPrintStream(".arff");
      MockPrintStream mockPrintStream1 = new MockPrintStream(".arff");
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".arff";
      stringArray0[1] = "-F";
      stringArray0[2] = "@data";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "";
      stringArray0[5] = "@data";
      stringArray0[6] = "";
      stringArray0[7] = "[hT~# B>)}EAdiQ";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@data\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-8);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      DecisionTable decisionTable0 = new DecisionTable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray1 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, (byte)0);
      Attribute attribute0 = new Attribute("@data", instances0);
      arrayList0.trimToSize();
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 2;
      doubleArray0[5] = (double) 0;
      FileSystemHandling.createFolder(evoSuiteFile1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1537.1581136456052, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "Strings: ");
      Attribute.main((String[]) null);
      SystemInUtil.addInputLine("Whether debug information is output to the console.");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, ".arff");
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 473, 515.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.toArray();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ArrayList<String> arrayList3 = new ArrayList<String>(arrayList0);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      arrayList4.add((Locale.LanguageRange) null);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("t");
      linkedList1.add("-E");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList4, (Collection<String>) arrayList0, locale_FilteringMode0);
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("S6.G*{^*XNnk", 1073741824);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = (double) 3;
      jRip_NumericAntd0.toString();
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("S6.G*{^*XNnk >= NaN", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("o>", arrayList0, 122);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.m_theInstances = instances0;
      DenseInstance denseInstance0 = new DenseInstance(4);
      decisionTable0.m_theInstances.add((Instance) denseInstance0);
      decisionTable0.m_theInstances = instances0;
      Instances instances1 = decisionTable0.m_dtInstances;
      decisionTable0.m_theInstances.getRevision();
      MockPrintStream mockPrintStream0 = new MockPrintStream(".arff");
      MockPrintStream mockPrintStream1 = new MockPrintStream(".arff");
      char[] charArray0 = new char[8];
      charArray0[1] = '\"';
      charArray0[2] = 'V';
      charArray0[3] = 'c';
      charArray0[4] = '(';
      charArray0[5] = '(';
      mockPrintStream1.print(charArray0);
      mockPrintStream0.print(false);
      byte[] byteArray0 = new byte[0];
      mockPrintStream1.write(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      Attribute attribute0 = new Attribute("@data", "LS", 2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 3.0, 3);
      boolean boolean0 = jRip_NumericAntd0.covers(denseInstance0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4323779438509274
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("vi(VX>", arrayList0, 3896);
      Attribute attribute0 = new Attribute("1995");
      DenseInstance denseInstance0 = new DenseInstance(70);
      JRip jRip0 = new JRip();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      jRip0.setUsePruning(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip0.setDebug(true);
      try { 
        jRip0.rulesetForOneClass((-9.696651286031036), instances0, (-2089.101471), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[5] = "F";
      stringArray0[1] = "";
      stringArray0[2] = "u7+#AR@";
      stringArray0[3] = "[uQ'z";
      stringArray0[4] = "h-4|@`/`d3>Q";
      stringArray0[5] = "Should never happen: revDLin optmz. stage NaN or infinite!";
      stringArray0[2] = "";
      stringArray0[7] = "EO!.MMIP.-;OJ$)U,P";
      jRip0.setUsePruning(false);
      stringArray0[8] = "Fast Algorithms for Nearest Neighbour Search";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.getUsePruning();
      JRip jRip1 = new JRip();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("Should never happen: revDLin optmz. stage NaN or infinite!", "EO!.MMIP.-;OJ$)U,P", 82);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'O'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0337478959599906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("EKT#", arrayList0, 105);
      Instances instances1 = new Instances(".bsi", arrayList0, 67);
      Attribute attribute0 = new Attribute("");
      attribute0.value((-2190));
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Object object0 = new Object();
      instances1.lastIndexOf(object0);
      attribute0.addStringValue((Attribute) null, (-15));
      jRip0.setUsePruning(false);
      jRip0.optimizationsTipText();
      try { 
        jRip0.rulesetForOneClass(4.5, instances1, 0, (-15));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("EgT#", arrayList0, 122);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.m_theInstances = instances0;
      DenseInstance denseInstance0 = new DenseInstance(4);
      decisionTable0.m_theInstances.add((Instance) denseInstance0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(".arff");
      mockPrintStream0.checkError();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      mockPrintStream0.print(false);
      mockPrintStream0.println('F');
      mockPrintStream1.print(".bsi");
      mockPrintStream1.println((float) 1);
      mockPrintStream1.println("Q.~JM]HP&pc{18!IT`T");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.println((long) 122);
      mockPrintStream1.write(byteArray0);
      mockPrintStream0.write(byteArray0, (-100), (-1999));
      mockPrintStream0.print(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Attribute attribute0 = new Attribute("@data", "LS", 2);
      instances0.add((Instance) denseInstance0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      arrayList0.iterator();
      jRip_NominalAntd0.splitData(instances0, (-1922.39), 64.0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      
      double double0 = jRip_NominalAntd0.value;
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Remove remove0 = new Remove();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      JRip jRip0 = new JRip();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 122;
      doubleArray0[1] = (double) 78;
      doubleArray0[3] = (double) 78;
      doubleArray0[3] = (double) 78;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      doubleArray0[5] = (-2609.25);
      Attribute attribute0 = new Attribute("", 122);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getCover();
      doubleArray0[6] = (-1064.1978);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(78, doubleArray0);
      jRip_RipperRule0.covers(binarySparseInstance1);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7576378583071737
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("EKT#", arrayList0, 122);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.m_theInstances = instances0;
      DenseInstance denseInstance0 = new DenseInstance(4);
      decisionTable0.m_theInstances.add((Instance) denseInstance0);
      Instances instances1 = decisionTable0.m_dtInstances;
      MockPrintStream mockPrintStream0 = new MockPrintStream(".arff");
      Consumer<Instance> consumer0 = (Consumer<Instance>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      decisionTable0.m_theInstances.forEach(consumer0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      decisionTable0.m_theInstances.enumerateAttributes();
      mockPrintStream0.print(true);
      mockPrintStream1.print(".bsi");
      byte[] byteArray0 = new byte[1];
      mockPrintStream1.write(byteArray0);
      mockPrintStream0.write(byteArray0, (-100), (-1999));
      mockPrintStream0.print(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      Attribute attribute0 = new Attribute("@data", "LS", 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, (-1922.39), 64.0);
      double double0 = jRip_NominalAntd0.value;
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = jRip_NominalAntd0.covers(denseInstance0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("=", arrayList0, (-2487));
      Attribute attribute1 = attribute0.copy("=");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = 2377.47001;
      int[] intArray0 = new int[9];
      AbstractClassifier.makeCopies(jRip0, 1449);
      intArray0[0] = 3;
      attribute0.equals(arrayList0);
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[5] = 2;
      attribute0.setStringValue("@end");
      intArray0[6] = 0;
      attribute0.toString();
      intArray0[7] = 0;
      Attribute attribute2 = new Attribute("", arrayList0);
      attribute2.copy();
      Attribute.typeToString(attribute2);
      intArray0[8] = 0;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0, intArray0, 2);
      jRip_NominalAntd0.covers(sparseInstance0);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("E");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      jRip0.toString();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ")\n");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-1352.2730149372));
      Instances instances0 = null;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Remove remove0 = new Remove();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 122;
      doubleArray0[1] = (double) 78;
      doubleArray0[2] = (-2609.25);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(":V\u0000&Lq.)O<uGw;", arrayList1, (-3745));
      attribute0.setStringValue("Whether reduced-error pruning is used instead of C.4.5 pruning.");
      attribute0.toString();
      int[] intArray0 = new int[5];
      intArray0[0] = 122;
      intArray0[1] = 498;
      intArray0[2] = 1;
      intArray0[3] = 78;
      intArray0[4] = 122;
      SparseInstance sparseInstance0 = new SparseInstance(122.0, doubleArray0, intArray0, 122);
      Attribute attribute1 = new Attribute("integer", 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      boolean boolean1 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertTrue(boolean1 == boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("=", arrayList0, (-2487));
      Attribute attribute1 = attribute0.copy("=");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      AbstractClassifier.makeCopies(jRip0, 357);
      attribute0.equals("=");
      attribute1.setStringValue("8VZI");
      attribute1.toString();
      Attribute attribute2 = new Attribute("]w$}7(X9v^6%H7", arrayList0);
      attribute1.copy();
      jRip_NominalAntd0.value = (double) 3;
      Attribute.typeToString(attribute2);
      int[] intArray0 = new int[1];
      intArray0[0] = (-2487);
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0, intArray0, 9);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("o>", arrayList0, 122);
      JRip jRip0 = new JRip();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(2718.3432934);
      jRip_RipperRule0.grow(instances0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      try { 
        inputMappedClassifier1.getModelHeader((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "bU!u5k t6`Lb PL;'X[");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "bU!u5k t6`Lb PL;'X[");
      Attribute attribute0 = new Attribute("", "", 1477);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "");
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "]>*ZFeEcd1B&");
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Sorted classes:");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(";xE!%I", arrayList1, 1);
      jRip_NumericAntd0.splitData(instances0, (-3656.381614697), (-1703.04068));
      jRip_NumericAntd0.splitData(instances0, 4.0, (-9.696651286031036));
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) arrayList0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("7.z:I2", list0, 3);
      arrayList0.addAll(0, (Collection<? extends String>) list0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "date");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "numeric");
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("7.z:I2 <= NaN", string0);
      
      jRip_NumericAntd0.getAttr();
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.132999251994992
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "=5g";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      AbstractClassifier.makeCopy(jRip0);
      stringArray0[5] = "B<:`@jiPK7";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      assertFalse(jRip0.getDebug());
      
      jRip0.setDebug(true);
      jRip0.getRevision();
      jRip0.checkErrorRateTipText();
      jRip0.usePruningTipText();
      jRip0.getOptions();
      boolean boolean0 = jRip0.getDebug();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      Attribute attribute0 = new Attribute("");
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Eleventh Conference on Uncertainty in Artificial Intelligence";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 123.129468;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)93, doubleArray0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.covers(binarySparseInstance0);
      StringReader stringReader0 = new StringReader("Eleventh Conference on Uncertainty in Artificial Intelligence");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      BufferedReader bufferedReader2 = new BufferedReader(stringReader0);
      bufferedReader1.lines();
      BufferedReader bufferedReader3 = new BufferedReader(bufferedReader1, 3);
      Random.setNextRandom(2);
      BufferedReader bufferedReader4 = null;
      try {
        bufferedReader4 = new BufferedReader(bufferedReader3, (-48));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getCheckErrorRate();
      assertFalse(jRip0.getCheckErrorRate());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 122);
      JRip jRip1 = new JRip();
      JRip jRip2 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      Attribute attribute0 = new Attribute("@relation", protectedProperties2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      CoverTree coverTree0 = new CoverTree();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      inputMappedClassifier1.getModelHeader(instances0);
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      jRip1.getCapabilities();
      jRip1.getCapabilities();
      jRip1.checkErrorRateTipText();
      assertTrue(jRip1.getCheckErrorRate());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("o>", arrayList0, 122);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DenseInstance denseInstance0 = new DenseInstance(916);
      try { 
        jRip0.rulesetForOneClass(6.283185307179586, instances0, 1.0, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("EgT#", arrayList0, 122);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.m_theInstances = instances0;
      DenseInstance denseInstance0 = new DenseInstance(4);
      decisionTable0.m_theInstances.add((Instance) denseInstance0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(".arff");
      mockPrintStream0.checkError();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      mockPrintStream0.print(false);
      mockPrintStream0.println('F');
      mockPrintStream1.print(".bsi");
      mockPrintStream1.println((float) 1);
      mockPrintStream1.println("Q.~JM]HP&pc{18!IT`T");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.println((long) 122);
      mockPrintStream1.write(byteArray0);
      mockPrintStream0.write(byteArray0, (-100), (-1999));
      mockPrintStream0.print(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      decisionTable0.setUpEvaluator();
      Attribute attribute0 = new Attribute("@data", "LS", 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      arrayList0.iterator();
      jRip_NominalAntd0.splitData(instances0, 78, (-1999));
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      double double0 = jRip_NominalAntd0.value;
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      BayesNet bayesNet0 = new BayesNet();
      Environment environment0 = new Environment();
      CoverTree coverTree0 = new CoverTree();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      BayesNetEstimator bayesNetEstimator1 = bayesNet2.getEstimator();
      bayesNetEstimator1.setOptions((String[]) null);
      bayesNetEstimator1.setOptions((String[]) null);
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      bayesNet2.getEstimator();
      bayesNetEstimator1.setOptions((String[]) null);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, (-1595.7069035581), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("=", "=");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      jRip0.getDebug();
      JRip jRip1 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      decisionTable0.toString();
      JRip jRip2 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute1 = new Attribute("@relation", list0, 1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fyv-:j#9}M6A)vdg<S");
      Attribute.typeToString((-2035));
      locale0.getExtension('t');
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute1);
      jRip_NumericAntd0.accuRate = 0.0;
      jRip_NumericAntd0.toString();
      jRip1.usePruningTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      jRip2.getSeed();
      // Undeclared exception!
      try { 
        jRip1.getMeasure("@end");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @end not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "bU!u5k t6`Lb PL;'X[");
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "");
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "");
      FileSystemHandling.createFolder(evoSuiteFile1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "bU!u5k t6`Lb PL;'X[");
      Attribute attribute0 = new Attribute("", "", 1477);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "");
      FileSystemHandling.appendDataToFile(evoSuiteFile2, byteArray0);
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "]>*ZFeEcd1B&");
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Sorted classes:");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(";xE!%I", arrayList1, 1);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("EKT#", arrayList0, 122);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(3340.90532);
      jRip_RipperRule0.prune(instances0, true);
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      inputMappedClassifier0.getModelHeader(instances0);
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      BallTree ballTree0 = new BallTree();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor1 = new MiddleOutConstructor();
      try { 
        middleOutConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("EKT#", arrayList0, 122);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DenseInstance denseInstance0 = new DenseInstance(2);
      instances0.add((Instance) denseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("o>", arrayList0, 122);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip1 = new JRip();
      // Undeclared exception!
      try { 
        jRip1.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "-E");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("`YuA{");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, true);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/7[w)ZSJM0|PB[=#UpA3");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "/7[w)ZSJM0|PB[=#UpA3");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "/7[w)ZSJM0|PB[=#UpA3");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "-E");
      Attribute attribute0 = new Attribute(";xEI", 1477);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "/7[w)ZSJM0|PB[=#UpA3");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "]>*ZFeEcd1B&");
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Sorted classes:");
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(3, jRip1.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(2, jRip1.getOptimizations());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertTrue(jRip1.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals("8118", string0);
      assertEquals(1L, jRip1.getSeed());
      assertFalse(jRip1.getDebug());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances0 = decisionTable0.m_dtInstances;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("", arrayList0, 69);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      JRip jRip0 = new JRip();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances2 = decisionTable1.m_dtInstances;
      JRip jRip1 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute(".bsi", protectedProperties1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAccu();
      assertEquals(3, jRip1.getFolds());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
      assertEquals(2, jRip1.getOptimizations());
      assertTrue(jRip1.getCheckErrorRate());
      assertFalse(jRip1.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.180066384203239
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      StringReader stringReader0 = new StringReader("115-123");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      stringReader0.mark(3);
      bufferedReader0.mark(3);
      int int0 = (-87);
      // Undeclared exception!
      try { 
        bufferedReader0.mark((-87));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.881766240540306
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      Attribute attribute0 = new Attribute("Iz", "");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "integer";
      stringArray0[2] = "@end";
      stringArray0[3] = "6'R252M0B/";
      stringArray0[4] = "@attribute";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      Utils.SMALL = (-364.47574);
      String string1 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string1);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAttrValue();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      String string2 = jRip_NominalAntd0.toString();
      assertEquals("Iz = ", string2);
      
      doubleArray0[1] = 0.0;
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd2 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd2.getAttrValue(), 0.01);
      
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("EgT#", arrayList0, 122);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.m_theInstances = instances0;
      DenseInstance denseInstance0 = new DenseInstance(4);
      decisionTable0.m_theInstances.add((Instance) denseInstance0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(".arff");
      mockPrintStream0.checkError();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      mockPrintStream0.print(false);
      mockPrintStream0.println('F');
      mockPrintStream1.print(".bsi");
      mockPrintStream1.println((float) 1);
      mockPrintStream1.println("Q.~JM]HP&pc{18!IT`T");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.println((long) 122);
      mockPrintStream1.write(byteArray0);
      mockPrintStream0.write(byteArray0, (-100), (-100));
      mockPrintStream0.print(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      decisionTable0.setUpEvaluator();
      Attribute attribute0 = new Attribute("@data", "LS", 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      arrayList0.iterator();
      jRip_NominalAntd0.splitData(instances0, (-1922.39), 64.0);
      double double0 = jRip_NominalAntd0.value;
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = jRip_NominalAntd0.toString();
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("@data = ", string0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = (-2313.894185662041);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("Nq9Md*p@j-$iCvAt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Nq9Md*p@j-$iCvAt not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "F";
      stringArray0[1] = "";
      stringArray0[2] = "u7+#AR@";
      stringArray0[3] = "[uQ'z";
      stringArray0[4] = "h-4|@`/`d3>Q";
      stringArray0[5] = "Should never happen: revDLin optmz. stage NaN or infinite!";
      stringArray0[6] = "";
      stringArray0[7] = "EO!.MMIP.-;OJ$)U,P";
      stringArray0[8] = "Fast Algorithms for Nearest Neighbour Search";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      boolean boolean0 = jRip0.getUsePruning();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(boolean0);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.clone();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList1.toArray();
      linkedList1.removeAll(linkedList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      linkedList1.add((Locale.LanguageRange) null);
      linkedList0.offer((Locale.LanguageRange) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ArrayList<String> arrayList3 = new ArrayList<String>(arrayList0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.toArray();
      linkedList2.spliterator();
      linkedList2.add("-E");
      linkedList0.add((Locale.LanguageRange) null);
      arrayList1.add((Locale.LanguageRange) null);
      linkedList0.add((Locale.LanguageRange) null);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("t");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      linkedList3.add("-E");
      unaryOperator0.apply("-E");
      unaryOperator0.apply("-E");
      arrayList0.replaceAll(unaryOperator0);
      linkedList3.add("-E");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.remove((Object) "-E");
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(1L, jRip0.getSeed());
      
      DecisionTable decisionTable0 = new DecisionTable();
      jRip0.setSeed((-1L));
      DenseInstance denseInstance0 = new DenseInstance(2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1L), jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList2.toArray();
      linkedList2.removeAll(linkedList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      linkedList2.add((Locale.LanguageRange) null);
      linkedList0.offer((Locale.LanguageRange) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ArrayList<String> arrayList3 = new ArrayList<String>(arrayList0);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.toArray();
      linkedList3.spliterator();
      linkedList3.add("-E");
      linkedList0.add((Locale.LanguageRange) null);
      arrayList1.add((Locale.LanguageRange) null);
      linkedList0.add((Locale.LanguageRange) null);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.add("t");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      linkedList4.add("-E");
      unaryOperator0.apply((String) null);
      unaryOperator0.apply((String) null);
      arrayList0.replaceAll(unaryOperator0);
      linkedList4.add("-E");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList5.remove((Object) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList0, locale_FilteringMode0);
      JRip jRip0 = new JRip();
      String string0 = jRip0.seedTipText();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals("The seed used for randomizing the data.", string0);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("iD3x6* qCs");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Object object0 = jRip_NominalAntd0.copy();
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)protectedProperties0.getOrDefault("vfjI}", object0);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      
      Attribute attribute1 = new Attribute("weka.classifiers.CostMatrix", protectedProperties0);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("EKT#", arrayList0, 122);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      assertFalse(jRip1.getDebug());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(3, jRip1.getFolds());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getCheckErrorRate());
      assertTrue(jRip1.getUsePruning());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.140016795854641
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("EgT#", arrayList0, 122);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.m_theInstances = instances0;
      DenseInstance denseInstance0 = new DenseInstance(4);
      decisionTable0.m_theInstances.add((Instance) denseInstance0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(".arff");
      mockPrintStream0.checkError();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      mockPrintStream1.println(78);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      mockPrintStream0.print(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      mockPrintStream0.println('F');
      mockPrintStream1.print(".bsi");
      mockPrintStream1.println((float) 1);
      mockPrintStream1.println("Q.~JM]HP&pc{18!IT`T");
      mockPrintStream0.println((long) 122);
      mockPrintStream0.print(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      decisionTable0.setUpEvaluator();
      Attribute attribute0 = new Attribute("@data", "LS", 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      arrayList0.iterator();
      jRip_NominalAntd0.splitData(instances0, (-1922.39), 64.0);
      jRip0.listOptions();
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "}-E";
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      int int0 = 2076;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(13.107751946170255, (int[]) null, 2076);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getCheckErrorRate();
      StringReader stringReader0 = null;
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      byte[] byteArray0 = new byte[1];
      JRip jRip0 = new JRip();
      assertEquals(2, jRip0.getOptimizations());
      
      jRip0.setOptimizations(1);
      assertEquals(1, jRip0.getOptimizations());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setMinNo((-605.38846230341));
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      BayesNet bayesNet0 = new BayesNet();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      CoverTree coverTree0 = new CoverTree();
      BayesNet bayesNet1 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      ChebyshevDistance chebyshevDistance1 = new ChebyshevDistance();
      assertFalse(chebyshevDistance1.getInvertSelection());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute((String) null, 0);
      Attribute attribute1 = attribute0.copy((String) null);
      jRip0.setCheckErrorRate(true);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      double double0 = jRip_NumericAntd0.getAccuRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("oFKY5Jl", linkedList0, 11);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "-E";
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      int int0 = 2076;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(13.107751946170255, (int[]) null, 2076);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      jRip_RipperRule0.covers(binarySparseInstance0);
      StringReader stringReader0 = null;
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Z-");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("`YuA{");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "bU!u5k t6`Lb PL;'X[");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Z-");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Z-");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Z-");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "Z-");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "Z-");
      Attribute attribute0 = new Attribute("Z-", "Z-", 1477);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "Z-");
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "]>*ZFeEcd1B&");
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Sorted classes:");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(";xEI", arrayList2, 1);
      jRip_NumericAntd0.splitData(instances0, 0.5, 2);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      String string0 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.7853437136837007
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      Attribute attribute0 = new Attribute("Iz", "");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "integer";
      stringArray0[2] = "@end";
      stringArray0[3] = "6'R252M0RR";
      stringArray0[4] = "@attribute";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      Utils.SMALL = (-364.47574);
      String string1 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string1);
      
      String string2 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string2);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAttrValue();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd2 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd2.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("[", arrayList0, 122);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DenseInstance denseInstance0 = new DenseInstance(916);
      try { 
        jRip0.rulesetForOneClass(6.283185307179586, instances0, 1.0, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass(1.0E-12, (Instances) null, 1.0E-12, (-45.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "4 Kkf G";
      stringArray0[1] = "Cc>ZwMm";
      JRip.main(stringArray0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      CoverTree coverTree0 = new CoverTree();
      BayesNet bayesNet0 = new BayesNet();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      try { 
        inputMappedClassifier2.getModelHeader((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double double0 = (-1064.1978);
      double double1 = (-4366.63677705313);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1357.3772;
      doubleArray0[1] = 1357.3772;
      doubleArray0[2] = 1357.3772;
      doubleArray0[3] = (-1064.1978);
      doubleArray0[4] = 1357.3772;
      doubleArray0[5] = (-1064.1978);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1357.3772, doubleArray0);
      double double2 = (-4210.35);
      int[] intArray0 = new int[2];
      intArray0[0] = 78;
      intArray0[1] = 78;
      int int0 = (-75);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-4210.35), intArray0, (-75));
      jRip_RipperRule0.covers(binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      Attribute attribute0 = new Attribute("measureKNN", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals("8118", string0);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("EgT#", arrayList0, 122);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.m_theInstances = instances0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(".arff");
      mockPrintStream0.checkError();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      mockPrintStream0.print(false);
      mockPrintStream0.println('F');
      mockPrintStream1.print(".bsi");
      mockPrintStream1.println((float) 1);
      mockPrintStream1.println("Q.~JM]HP&pc{18!IT`T");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.println((long) 122);
      mockPrintStream1.write(byteArray0);
      mockPrintStream0.write(byteArray0, (-100), (-1999));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      decisionTable0.setUpEvaluator();
      Attribute attribute0 = new Attribute("@data", "LS", 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      arrayList0.iterator();
      jRip_NominalAntd0.splitData(instances0, (-1922.39), 64.0);
      double double0 = jRip_NominalAntd0.value;
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.4904032277870636
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("EKT#", arrayList0, 105);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DenseInstance denseInstance0 = new DenseInstance(4);
      instances0.add((Instance) denseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip0.listOptions();
      jRip_RipperRule0.size();
      jRip_RipperRule0.setConsequent(5);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      CoverTree coverTree0 = new CoverTree();
      BayesNet bayesNet0 = new BayesNet();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      try { 
        inputMappedClassifier2.getModelHeader((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.5992809219098505
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      Enumeration enumeration0 = new WordTokenizer();
      Attribute attribute0 = new Attribute("", "", 434);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getMaxInfoGain();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.getRevision();
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      jRip_RipperRule0.size();
      jRip0.getRevision();
      jRip0.getSeed();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      attribute0.enumerateValues();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Utils.log2 = (-2313.894185662041);
      JRip jRip0 = new JRip();
      int int0 = jRip0.getFolds();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(3, int0);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("$");
      jRip_RipperRule0.toString(attribute0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      StringReader stringReader0 = new StringReader(" => $=");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      bufferedReader1.skip(168L);
      BufferedReader bufferedReader2 = new BufferedReader(stringReader0);
      bufferedReader1.ready();
      char[] charArray0 = new char[1];
      bufferedReader0.read(charArray0);
      BufferedReader bufferedReader3 = null;
      try {
        bufferedReader3 = new BufferedReader(bufferedReader2, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      int[] intArray0 = new int[6];
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      JRip jRip0 = new JRip();
      int int0 = jRip0.getOptimizations();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, int0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JRip jRip0 = new JRip();
      long long0 = jRip0.getSeed();
      assertEquals(1L, long0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = 2057.1;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 1L;
      SparseInstance sparseInstance0 = new SparseInstance(1L, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(boolean0);
      assertTrue(jRip0.getUsePruning());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.toArray();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ArrayList<String> arrayList3 = new ArrayList<String>(arrayList0);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      arrayList4.add((Locale.LanguageRange) null);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("t");
      linkedList1.add("-E");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList4, (Collection<String>) arrayList0, locale_FilteringMode0);
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("S6.G*{^*XNnk", 1073741824);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals("S6.G*{^*XNnk <= NaN", string0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("EKT#", arrayList0, 105);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Remove remove0 = new Remove();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      JRip jRip0 = new JRip();
      jRip0.setFolds(122);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 122;
      doubleArray0[1] = (double) 78;
      doubleArray0[2] = (-2609.25);
      doubleArray0[3] = (double) 78;
      doubleArray0[4] = (double) 78;
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      CoverTree coverTree0 = new CoverTree();
      ChebyshevDistance chebyshevDistance1 = new ChebyshevDistance((Instances) null);
      coverTree0.setDistanceFunction(euclideanDistance0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      assertEquals("The maximum number of attributes to include in transformed attribute names.", principalComponents0.maximumAttributeNamesTipText());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList2.toArray();
      linkedList2.removeAll(linkedList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      linkedList2.add((Locale.LanguageRange) null);
      linkedList0.offer((Locale.LanguageRange) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ArrayList<String> arrayList3 = new ArrayList<String>(arrayList0);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.toArray();
      linkedList3.spliterator();
      linkedList3.add("-E");
      linkedList0.add((Locale.LanguageRange) null);
      arrayList1.add((Locale.LanguageRange) null);
      linkedList0.add((Locale.LanguageRange) null);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.add("t");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      linkedList4.add("-E");
      unaryOperator0.apply((String) null);
      unaryOperator0.apply((String) null);
      arrayList0.replaceAll(unaryOperator0);
      linkedList4.add("-E");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList5.remove((Object) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList0, locale_FilteringMode0);
      JRip jRip0 = new JRip();
      String string0 = jRip0.foldsTipText();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Tubns on the output of debugging iXformation.", arrayList0, 115);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.m_theInstances = instances0;
      DenseInstance denseInstance0 = new DenseInstance(4);
      decisionTable0.m_theInstances.add((Instance) denseInstance0);
      decisionTable0.m_theInstances = instances0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(".arff");
      mockPrintStream0.flush();
      MockPrintStream mockPrintStream1 = new MockPrintStream("@relation");
      char[] charArray0 = new char[7];
      mockPrintStream1.println((long) 1);
      charArray0[1] = '1';
      mockPrintStream0.checkError();
      Locale locale0 = Locale.JAPAN;
      MockPrintStream mockPrintStream2 = new MockPrintStream(".arff");
      mockPrintStream0.write((-22));
      decisionTable0.m_theInstances.compactify();
      charArray0[5] = '(';
      mockPrintStream1.print(charArray0);
      mockPrintStream1.println(2);
      mockPrintStream0.print(true);
      byte[] byteArray0 = new byte[0];
      mockPrintStream1.write(byteArray0);
      arrayList0.iterator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      Attribute attribute0 = new Attribute("@data", "LS", 2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 3.0, 3);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      CoverTree coverTree0 = new CoverTree();
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      BayesNet bayesNet0 = new BayesNet();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      try { 
        inputMappedClassifier2.getModelHeader((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.3469992135645263
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      StringReader stringReader0 = new StringReader("115-123");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      int int0 = (-87);
      stringReader0.ready();
      char[] charArray0 = new char[7];
      jRip0.setOptions(stringArray0);
      charArray0[0] = '-';
      charArray0[1] = 't';
      charArray0[2] = 'u';
      charArray0[3] = 'K';
      charArray0[4] = 'A';
      charArray0[5] = ';';
      charArray0[6] = '<';
      stringReader0.read(charArray0);
      // Undeclared exception!
      try { 
        bufferedReader0.mark((-87));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DenseInstance denseInstance0 = new DenseInstance(2);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1);
      Properties properties1 = new Properties();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.clone();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList1.toArray();
      linkedList1.removeAll(linkedList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      linkedList1.add((Locale.LanguageRange) null);
      linkedList1.offer((Locale.LanguageRange) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      ArrayList<String> arrayList3 = new ArrayList<String>(arrayList0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.toArray();
      linkedList2.spliterator();
      linkedList2.add("-E");
      linkedList0.add((Locale.LanguageRange) null);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      arrayList4.add((Locale.LanguageRange) null);
      linkedList0.add((Locale.LanguageRange) null);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("t");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList4.sort(comparator0);
      linkedList3.add("-E");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.remove((Object) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList4, (Collection<String>) arrayList0, locale_FilteringMode0);
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.clone();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList1.removeAll(linkedList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      linkedList1.offer((Locale.LanguageRange) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      ArrayList<String> arrayList3 = new ArrayList<String>(arrayList0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.spliterator();
      linkedList2.add("-E");
      linkedList0.add((Locale.LanguageRange) null);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      arrayList4.add((Locale.LanguageRange) null);
      linkedList0.add((Locale.LanguageRange) null);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("-E");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "-E";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "-E";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      String string0 = "-E";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "-E");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      JRip jRip0 = new JRip();
      jRip0.globalInfo();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ")\n");
      MockFile mockFile0 = new MockFile("E");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ")\n");
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, false);
      mockPrintStream1.print(878.2121);
      mockPrintStream1.println();
      mockPrintStream1.append((CharSequence) "E");
      MockPrintStream mockPrintStream2 = new MockPrintStream(pipedOutputStream0, true);
      mockPrintStream2.println(false);
      mockPrintStream2.println('\u0089');
      mockPrintStream2.println();
      MockPrintStream mockPrintStream3 = null;
      try {
        mockPrintStream3 = new MockPrintStream(mockPrintStream0, true, "\nReplace: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         // Replace: 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "-E");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("`YuA{");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/7[w)ZSJM0|PB[=#UpA3");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "-E");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "/7[w)ZSJM0|PB[=#UpA3");
      FileSystemHandling.createFolder(evoSuiteFile0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "-E");
      Attribute attribute0 = new Attribute("", arrayList0, 1467);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "/7[w)ZSJM0|PB[=#UpA3");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "]>*ZFeEcd1B&");
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "-E");
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      attribute0.equals((Object) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(" <= NaN", string0);
      
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }
}
