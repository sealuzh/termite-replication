/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 11:13:52 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setUseEqualFrequency(true);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4530882574804775
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      Filter[] filterArray0 = new Filter[5];
      filterArray0[0] = (Filter) multiFilter2;
      filterArray0[1] = (Filter) multiFilter2;
      filterArray0[0] = (Filter) multiFilter1;
      filterArray0[3] = (Filter) multiFilter2;
      Filter.makeCopy(multiFilter0);
      filterArray0[3] = (Filter) multiFilter0;
      multiFilter2.setFilters(filterArray0);
      MultiFilter multiFilter3 = new MultiFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Invalid class index: ", arrayList0, 1161);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute(":oDYR?", 1161);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      arrayList0.add(attribute0);
      discretize0.getBinRangesString(0);
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.05295510539863
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      function0.andThen((Function<? super String, ?>) unaryOperator0);
      function0.apply("'");
      unaryOperator0.andThen((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator0.apply("");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", "", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      Object object1 = new Object();
      arrayList0.listIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("integer", arrayList0, 0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<SparseInstance> unaryOperator2 = UnaryOperator.identity();
      Function<SparseInstance, Attribute> function1 = (Function<SparseInstance, Attribute>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<SparseInstance, Attribute> function2 = unaryOperator2.andThen((Function<? super SparseInstance, ? extends Attribute>) function1);
      unaryOperator1.compose((Function<? super SparseInstance, ?>) function2);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function4 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, SparseInstance> function5 = (Function<Object, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, SparseInstance> function6 = unaryOperator2.compose((Function<? super Object, ? extends SparseInstance>) function5);
      function4.andThen((Function<? super Integer, ? extends SparseInstance>) function6);
      unaryOperator0.andThen((Function<? super String, ? extends Integer>) function4);
      instances0.compactify();
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      System.setCurrentTimeMillis(2);
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.502573613182601
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("JZ");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("YWk");
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("YWk");
      linkedList0.add(locale_LanguageRange1);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      hashMap0.remove((Object) "JZ", (Object) linkedList0);
      hashMap0.put("9Bk`", arrayList0);
      Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("YWk", protectedProperties0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      attribute0.copy("/Td|4w");
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>();
      arrayList4.add(attribute0);
      Instances instances0 = new Instances("9Bk`", arrayList4, 2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      instances0.compactify();
      arrayList4.add(attribute0);
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9873967753544077
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("JZ");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("YWk");
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("YWk");
      linkedList0.add(locale_LanguageRange1);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      hashMap0.put("9Bk`", arrayList0);
      Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("YWk", protectedProperties0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      attribute0.copy("/Td|4w");
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>();
      arrayList4.add(attribute0);
      Instances instances0 = new Instances("9Bk`", arrayList4, 2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.setOutputFormat();
      System.setCurrentTimeMillis((-3362L));
      Discretize discretize1 = new Discretize();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      discretize0.input(sparseInstance0);
      discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1006686313475593
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("YWk");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("YWk", protectedProperties0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      attribute0.indexOfValue("Class index is negative (not set)!");
      Instances instances0 = new Instances("<", arrayList1, 4);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.getBinRangesString(0);
      discretize0.setOutputFormat();
      discretize0.setUseEqualFrequency(true);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      System.setCurrentTimeMillis(1874L);
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(80);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 80
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.446685616919928
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      function0.andThen((Function<? super String, ?>) unaryOperator0);
      function0.apply("'");
      unaryOperator0.andThen((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator0.apply("");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", "", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      Object object1 = new Object();
      arrayList0.listIterator();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("integer", arrayList0, 0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<SparseInstance> unaryOperator2 = UnaryOperator.identity();
      Function<SparseInstance, Attribute> function1 = (Function<SparseInstance, Attribute>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<SparseInstance, Attribute> function2 = unaryOperator2.andThen((Function<? super SparseInstance, ? extends Attribute>) function1);
      unaryOperator1.compose((Function<? super SparseInstance, ?>) function2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function4 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator0.andThen((Function<? super String, ? extends Integer>) function4);
      instances0.compactify();
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.getCutPoints(70);
      boolean boolean0 = discretize0.getFindNumBins();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0886652618184494
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("YWk");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      hashMap0.put("9Bk`", arrayList0);
      Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("YWk", protectedProperties0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Attribute attribute1 = attribute0.copy("/Td|4w");
      arrayList1.listIterator();
      arrayList1.add(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      attribute0.indexOfValue("Class index is negative (not set)!");
      Instances instances0 = new Instances("<", arrayList1, 4);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.add(attribute1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.getBinRangesString(0);
      discretize0.setOutputFormat();
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      discretize0.input(binarySparseInstance0);
      discretize0.calculateCutPoints();
      assertFalse(discretize0.isNewBatch());
      
      discretize0.batchFinished();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1244777495981886
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("YWk");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("YWk", protectedProperties0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      attribute0.indexOfValue("Class index is negative (not set)!");
      Instances instances0 = new Instances("<", arrayList1, 4);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.getBinRangesString(0);
      discretize0.setOutputFormat();
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      discretize0.input(binarySparseInstance0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.428715181307695
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      function0.andThen((Function<? super String, ?>) unaryOperator0);
      function0.apply("'");
      unaryOperator0.andThen((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator0.apply("");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", "", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      Object object1 = new Object();
      arrayList0.listIterator();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      arrayList0.add(attribute0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("integer", arrayList0, 0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<SparseInstance> unaryOperator2 = UnaryOperator.identity();
      Function<SparseInstance, Attribute> function1 = (Function<SparseInstance, Attribute>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<SparseInstance, Attribute> function2 = unaryOperator2.andThen((Function<? super SparseInstance, ? extends Attribute>) function1);
      unaryOperator1.compose((Function<? super SparseInstance, ?>) function2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function4 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, SparseInstance> function5 = (Function<Object, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, SparseInstance> function6 = unaryOperator2.compose((Function<? super Object, ? extends SparseInstance>) function5);
      function4.andThen((Function<? super Integer, ? extends SparseInstance>) function6);
      unaryOperator0.andThen((Function<? super String, ? extends Integer>) function4);
      instances0.compactify();
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.096279154503785
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("_", arrayList0, 1161);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Instances instances2 = new Instances(instances0, 1161);
      Instances instances3 = new Instances(instances0);
      instances0.enumerateInstances();
      Instances instances4 = Instances.mergeInstances(instances3, instances3);
      Instances.mergeInstances(instances1, instances4);
      Instances instances5 = new Instances(".bsi", arrayList0, 1161);
      Instances.mergeInstances(instances4, instances3);
      Instances instances6 = new Instances(":Huo/iJ[hH", arrayList0, 1486);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(".arff", arrayList2, (-816));
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.setInputFormat(instances3);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<kG~CZ9pF");
      discretize0.calculateCutPoints();
      discretize0.setOutputFormat();
      boolean boolean1 = discretize0.batchFinished();
      assertTrue(boolean1 == boolean0);
      
      System.setCurrentTimeMillis(0);
      SparseInstance sparseInstance0 = new SparseInstance(4);
      discretize0.input(sparseInstance0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1192102096184713
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      function0.andThen((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.andThen((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator0.apply("");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", "", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      arrayList0.listIterator();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances0 = new Instances("integer", arrayList0, 0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<SparseInstance> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, SparseInstance> function3 = (Function<Object, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, SparseInstance> function4 = unaryOperator2.compose((Function<? super Object, ? extends SparseInstance>) function3);
      function2.andThen((Function<? super Integer, ? extends SparseInstance>) function4);
      unaryOperator0.andThen((Function<? super String, ? extends Integer>) function2);
      instances0.compactify();
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("");
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[19];
      doubleArray0[2] = 106.398557128;
      doubleArray0[5] = 2.0;
      doubleArray0[6] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[1] = (-1840700322);
      intArray0[2] = 2;
      intArray0[4] = (-1840700322);
      SparseInstance sparseInstance0 = new SparseInstance(5.55555, doubleArray0, intArray0, 2);
      boolean boolean0 = discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3027959221916783
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      function0.apply("'B");
      unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      unaryOperator0.apply("");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("lzR#-O]v", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute1 = new Attribute("", 2972);
      arrayList0.listIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("I.!", arrayList0, 29);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      UnaryOperator.identity();
      discretize0.calculateCutPoints();
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.370640645235503
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("_", arrayList0, 1161);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Instances instances2 = new Instances(instances0, 1161);
      Instances instances3 = new Instances(instances0);
      instances0.enumerateInstances();
      Instances instances4 = Instances.mergeInstances(instances3, instances3);
      Instances instances5 = Instances.mergeInstances(instances1, instances4);
      Instances instances6 = new Instances(instances5, 1161);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("@relation");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances3);
      arrayList0.add(attribute0);
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances2);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("_", arrayList0, 1161);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Instances instances2 = new Instances(instances0, 1161);
      Instances instances3 = new Instances(instances0);
      Instances instances4 = Instances.mergeInstances(instances3, instances3);
      Instances.mergeInstances(instances1, instances4);
      Instances instances5 = new Instances(".bsi", arrayList0, 1161);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances6 = new Instances(instances4, 1161);
      Attribute attribute0 = new Attribute(".arff", instances6, 10);
      Instances instances7 = new Instances(".arff", arrayList1, 2);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances3);
      SparseInstance sparseInstance0 = new SparseInstance(10);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.702519224253994
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      Filter[] filterArray0 = new Filter[5];
      filterArray0[0] = (Filter) multiFilter2;
      filterArray0[0] = (Filter) multiFilter2;
      filterArray0[3] = (Filter) multiFilter2;
      filterArray0[3] = (Filter) multiFilter0;
      multiFilter2.setFilters(filterArray0);
      MultiFilter multiFilter3 = new MultiFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Invalid class index: ", arrayList0, 1161);
      Attribute attribute0 = new Attribute(":oDYR?", 1161);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.getBinRangesString(0);
      discretize0.setOutputFormat();
      discretize0.isNewBatch();
      discretize0.calculateCutPoints();
      discretize0.calculateCutPointsByEqualFrequencyBinning(1);
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.492172955032197
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("_", arrayList0, 1161);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Instances instances2 = new Instances(instances0, 1161);
      Instances instances3 = new Instances(instances0);
      instances0.enumerateInstances();
      Instances instances4 = Instances.mergeInstances(instances3, instances3);
      Instances instances5 = Instances.mergeInstances(instances1, instances4);
      Instances instances6 = new Instances(instances5, 1161);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("@relation");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances3);
      instances0.addAll((Collection<? extends Instance>) instances2);
      discretize0.calculateCutPoints();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1966;
      doubleArray0[1] = 5.70001;
      doubleArray0[2] = (double) 1;
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1966;
      intArray0[3] = 2;
      intArray0[4] = 1161;
      intArray0[5] = 1966;
      intArray0[6] = 0;
      SparseInstance sparseInstance0 = new SparseInstance(1.7976931348623157E308, doubleArray0, intArray0, 86);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9849577255839876
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      function0.andThen((Function<? super String, ?>) unaryOperator0);
      function0.apply("'");
      unaryOperator0.andThen((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator0.apply("");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", "", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      Object object1 = new Object();
      arrayList0.listIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("integer", arrayList0, 0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<SparseInstance> unaryOperator2 = UnaryOperator.identity();
      Function<SparseInstance, Attribute> function1 = (Function<SparseInstance, Attribute>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, SparseInstance> function4 = (Function<Object, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, SparseInstance> function5 = unaryOperator2.compose((Function<? super Object, ? extends SparseInstance>) function4);
      function3.andThen((Function<? super Integer, ? extends SparseInstance>) function5);
      unaryOperator0.andThen((Function<? super String, ? extends Integer>) function3);
      instances0.compactify();
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      System.setCurrentTimeMillis(2);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-7492.298);
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance((-7492.298), doubleArray0);
      discretize0.convertInstance(sparseInstance0);
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.002314005102718
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("YWk");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      hashMap0.put("9Bk`", arrayList0);
      Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("YWk", protectedProperties0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      attribute0.copy("/Td|4w");
      arrayList2.listIterator();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      arrayList3.add(attribute0);
      Instances instances0 = new Instances("9Bk`", arrayList3, 2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.setOutputFormat();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      Discretize discretize1 = new Discretize("Ea {p'@3sN36HJ");
      discretize0.convertInstance(denseInstance0);
      Random.setNextRandom((-1073741824));
      // Undeclared exception!
      try { 
        discretize1.findNumBins(68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0598844361989093
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      function0.andThen((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.andThen((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator0.apply("");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", "", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      Object object1 = new Object();
      arrayList0.listIterator();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("integer", arrayList0, 0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<SparseInstance> unaryOperator2 = UnaryOperator.identity();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, SparseInstance> function3 = (Function<Object, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, SparseInstance> function4 = unaryOperator2.compose((Function<? super Object, ? extends SparseInstance>) function3);
      function2.andThen((Function<? super Integer, ? extends SparseInstance>) function4);
      unaryOperator0.andThen((Function<? super String, ? extends Integer>) function2);
      instances0.compactify();
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      System.setCurrentTimeMillis(2);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 106.398557128;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 2.0;
      doubleArray0[6] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-1840700267);
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 0;
      SparseInstance sparseInstance0 = new SparseInstance(5.55555, doubleArray0, intArray0, 1966);
      discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9907057935249495
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("_", arrayList0, 1161);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Instances instances2 = new Instances(instances0, 1161);
      Instances instances3 = new Instances(instances0);
      instances2.enumerateInstances();
      Instances instances4 = Instances.mergeInstances(instances3, instances3);
      Instances.mergeInstances(instances1, instances4);
      Instances instances5 = new Instances(".bsi", arrayList0, 1161);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("2H.sl 3AQF,s%k", arrayList2, 1161);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances3);
      discretize0.calculateCutPoints();
      discretize0.setOutputFormat();
      discretize0.batchFinished();
      discretize0.setOutputFormat();
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2049870752));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2049870752
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.09318480306973
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("_", arrayList0, 1161);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Instances instances2 = new Instances(instances0, 1161);
      Instances instances3 = new Instances(instances0);
      instances2.enumerateInstances();
      Instances instances4 = Instances.mergeInstances(instances3, instances3);
      Instances.mergeInstances(instances1, instances4);
      Instances instances5 = new Instances(".bsi", arrayList0, 1161);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("2H.sl 3AQF,s%k", arrayList2, 1161);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.setInputFormat(instances3);
      assertFalse(boolean0);
      
      instances0.addAll((Collection<? extends Instance>) instances2);
      discretize0.calculateCutPoints();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "?ub/\"<uM*k(AyJP7";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@data";
      stringArray0[4] = ".bsi";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.428715181307695
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      MockRandom mockRandom0 = new MockRandom(0L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Sorted array with NaN (doubles): ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.ints();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("D", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute1 = attribute0.copy("r_<0m6/+5,`B");
      arrayList0.listIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      protectedProperties0.propertyNames();
      arrayList0.add(attribute0);
      int int0 = 15;
      Instances instances0 = new Instances("`/n4o", arrayList0, 15);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.findNumBins(0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2697284193451357
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8);
      byte[] byteArray0 = new byte[8];
      mockRandom0.doubles();
      mockRandom0.nextGaussian();
      byteArray0[2] = (byte)70;
      mockRandom0.nextBytes(byteArray0);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.ints();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("x}6W%FUA2ft` ", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      attribute0.copy("/Td|4w");
      arrayList0.listIterator();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("*", arrayList0, 1016);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9378135424538416
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      function0.apply("'B");
      unaryOperator0.apply("");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("", protectedProperties2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute1 = attribute0.copy((String) null);
      arrayList0.listIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(attribute0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "43R");
      Instances instances0 = new Instances("s:ol;JGl73u_9hpi>", arrayList0, 46);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "real");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute1);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.948983719687279
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("_", arrayList0, 1161);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Instances instances2 = new Instances(instances0, 1161);
      Instances instances3 = new Instances(instances0);
      Instances instances4 = Instances.mergeInstances(instances3, instances3);
      Instances.mergeInstances(instances1, instances4);
      Instances instances5 = new Instances(".bsi", arrayList0, 1161);
      instances3.enumerateAttributes();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      instances4.enumerateAttributes();
      Instances instances6 = new Instances(instances4, 1161);
      Attribute attribute0 = new Attribute(".arff", instances6, 5);
      Instances instances7 = new Instances(".arff", arrayList1, 2);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.setInputFormat(instances3);
      SparseInstance sparseInstance0 = new SparseInstance(5);
      boolean boolean1 = discretize0.batchFinished();
      assertFalse(discretize0.getFindNumBins());
      assertTrue(boolean1 == boolean0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.isNewBatch());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      discretize0.getMakeBinary();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("\" + this.getClass().getName() + \"/", 3593.35358755778);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=3593.35358755778
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 6.7;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1505.9246407522248;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 1505.9246407522248;
      doubleArray2[1] = 1505.9246407522248;
      doubleArray2[2] = 6.7;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1505.9246407522248;
      doubleArray2[5] = (-1189.61736714442);
      doubleArray2[6] = (-6.78214234);
      doubleArray2[8] = 6.7;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 1505.9246407522248;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-6.78214234);
      doubleArray3[4] = (-6.78214234);
      doubleArray3[5] = 1505.9246407522248;
      doubleArray3[6] = 609.87992767711;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 1505.9246407522248;
      doubleArray4[1] = 609.87992767711;
      doubleArray4[2] = (-1189.61736714442);
      doubleArray4[3] = (-6.78214234);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[16];
      doubleArray5[0] = (-1189.61736714442);
      doubleArray5[1] = (-1189.61736714442);
      doubleArray5[2] = 6.7;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 1505.9246407522248;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 609.87992767711;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 1505.9246407522248;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = (-1189.61736714442);
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = (-6.78214234);
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 609.87992767711;
      doubleArray7[7] = 0.0;
      doubleArray7[8] = 688.9097909416369;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      unaryOperator0.apply("");
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(true);
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8254144627895013
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "first-last";
      stringArray0[1] = "first-last";
      stringArray0[2] = "first-last";
      stringArray0[3] = "first-last";
      stringArray0[4] = "first-last";
      stringArray0[5] = "J;J/mG5RmO/WT";
      stringArray0[6] = "first-last";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      stringArray0[7] = "first-last";
      stringArray0[8] = "first-last";
      Filter.runFilter(discretize0, stringArray0);
      SystemInUtil.addInputLine("first-last");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, false);
      discretize0.m_MakeBinary = true;
      discretize0.m_IgnoreClass = true;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute.typeToString(460);
      SystemInUtil.addInputLine("da]te");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(70);
      DenseInstance denseInstance0 = new DenseInstance(2479);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 70;
      doubleArray0[1] = (double) 2479;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(70, doubleArray0);
      Discretize discretize0 = new Discretize("unknown(460)");
      int[] intArray0 = new int[9];
      intArray0[0] = 70;
      intArray0[1] = 460;
      intArray0[2] = 70;
      intArray0[3] = 70;
      Filter.makeCopies(discretize0, 70);
      Discretize discretize1 = new Discretize("unknown(460)");
      discretize1.findNumBinsTipText();
      discretize0.setDesiredWeightOfInstancesPerInterval(3.0);
      discretize0.listOptions();
      discretize0.useBinNumbersTipText();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.attributeIndicesTipText();
      assertEquals(3.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      String string0 = discretize1.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      int int0 = 10;
      discretize0.m_ClassIndex = 10;
      discretize0.setInvertSelection(true);
      discretize0.getInvertSelection();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "   * Returns only the classnames andwhat filter it is based on.\n";
      stringArray0[1] = "\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)";
      stringArray0[5] = "\"position\" is string";
      stringArray0[3] = "'";
      stringArray0[4] = "|LJ0,fygE+=_,4";
      stringArray0[5] = "m^.mr/8W";
      try { 
        Filter.batchFilterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // null
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // -i <filename>
         // \tThe file containing first input instances.
         // -o <filename>
         // \tThe file first output instances will be written to.
         // -r <filename>
         // \tThe file containing second input instances.
         // -s <filename>
         // \tThe file second output instances will be written to.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9837319643993405
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      Filter[] filterArray0 = new Filter[5];
      filterArray0[0] = (Filter) multiFilter2;
      filterArray0[1] = (Filter) multiFilter2;
      filterArray0[0] = (Filter) multiFilter1;
      filterArray0[3] = (Filter) multiFilter2;
      filterArray0[3] = (Filter) multiFilter0;
      multiFilter2.setFilters(filterArray0);
      MultiFilter multiFilter3 = new MultiFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Invalid class index: ", arrayList0, 1161);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute(":oDYR?", 1161);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.getBinRangesString(0);
      discretize0.setOutputFormat();
      discretize0.isNewBatch();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(2152);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2152
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize("y");
      discretize0.m_MakeBinary = false;
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$Revision: 8964 $");
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hCTKK8VJ.Mqm#-9pA");
      discretize0.getDesiredWeightOfInstancesPerInterval();
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      discretize0.attributeIndicesTipText();
      assertEquals(0.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Random.setNextRandom(90);
      Discretize discretize0 = new Discretize("- ");
      discretize0.getAttributeIndices();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "- ";
      stringArray0[1] = "-";
      stringArray0[2] = "- ";
      stringArray0[3] = "-";
      stringArray0[4] = "w2.g$t o";
      stringArray0[5] = "-";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.nextDouble();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      mockRandom0.nextBytes(byteArray0);
      MultiFilter multiFilter0 = new MultiFilter();
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = true;
      discretize0.getOptions();
      Random.setNextRandom(44);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter[] filterArray0 = new Filter[20];
      filterArray0[0] = (Filter) multiFilter0;
      filterArray0[1] = (Filter) multiFilter0;
      AllFilter allFilter0 = new AllFilter();
      filterArray0[2] = (Filter) allFilter0;
      filterArray0[3] = (Filter) multiFilter0;
      filterArray0[4] = (Filter) multiFilter0;
      filterArray0[5] = (Filter) multiFilter0;
      allFilter0.toString();
      filterArray0[6] = (Filter) multiFilter0;
      filterArray0[7] = (Filter) multiFilter0;
      filterArray0[8] = (Filter) multiFilter0;
      multiFilter0.setFilters(filterArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 1162;
      doubleArray0[2] = (double) 1162;
      SparseInstance sparseInstance0 = new SparseInstance((-3146.4), doubleArray0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9103281932812037
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "PackageRepository.props";
      stringArray0[1] = "M?F3/=eCJ[0D";
      stringArray0[2] = "E+.Rknki.";
      stringArray0[3] = "O:<:";
      stringArray0[4] = "KNUPZb_";
      stringArray0[5] = "Q5#";
      stringArray0[6] = "23mfUzYCDE,";
      stringArray0[7] = "%l(pN.F~pThn";
      Discretize.main(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.551643266517218
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Consumer<Locale.LanguageRange> consumer0 = (Consumer<Locale.LanguageRange>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      arrayList1.iterator();
      Object object0 = new Object();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Discretize discretize0 = new Discretize("-Y");
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      
      Discretize discretize1 = new Discretize();
      discretize1.m_IgnoreClass = true;
      String[] stringArray0 = discretize1.getOptions();
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(7, stringArray0.length);
      assertEquals(10, discretize1.getBins());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[11];
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = object0;
      objectArray0[4] = object1;
      objectArray0[5] = object1;
      AllFilter allFilter0 = new AllFilter();
      System.setCurrentTimeMillis((-582L));
      long long0 = (-2945L);
      Discretize discretize0 = new Discretize();
      discretize0.m_DefaultCols = "px.+R";
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("_", arrayList0, 1161);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Instances instances2 = new Instances(instances0, 1161);
      Instances instances3 = new Instances("_", arrayList0, 1161);
      Instances instances4 = new Instances(instances3);
      Instances instances5 = Instances.mergeInstances(instances4, instances4);
      Instances.mergeInstances(instances1, instances5);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1161;
      DenseInstance denseInstance0 = new DenseInstance(0.703308223055705, doubleArray0);
      Discretize discretize0 = new Discretize();
      System.setCurrentTimeMillis(1161);
      try { 
        discretize0.setInputFormat(instances3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[11];
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = object0;
      objectArray0[4] = object1;
      objectArray0[5] = object1;
      AllFilter allFilter0 = new AllFilter();
      System.setCurrentTimeMillis((-582L));
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      discretize0.getOptions();
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      SystemInUtil.addInputLine("first-last");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, false);
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      AllFilter allFilter1 = new AllFilter();
      Filter[] filterArray0 = new Filter[6];
      filterArray0[0] = (Filter) multiFilter2;
      filterArray0[1] = (Filter) allFilter0;
      filterArray0[2] = (Filter) multiFilter1;
      filterArray0[3] = (Filter) multiFilter0;
      filterArray0[4] = (Filter) allFilter0;
      multiFilter2.isStreamableFilter();
      multiFilter2.setFilters(filterArray0);
      multiFilter2.toString();
      allFilter0.toString();
      Discretize discretize0 = new Discretize("rWu4xWO");
      Filter filter0 = Filter.makeCopy(filterArray0[1]);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "* Returns the capablities of this filter.";
      stringArray0[1] = "rWu4xWO";
      stringArray0[2] = "rWu4xWO";
      stringArray0[3] = "rWu4xWO";
      stringArray0[4] = "rWu4xWO";
      Filter.runFilter(filter0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)3;
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      Filter[] filterArray0 = new Filter[8];
      filterArray0[0] = (Filter) allFilter0;
      filterArray0[1] = (Filter) allFilter0;
      filterArray0[2] = (Filter) multiFilter0;
      filterArray0[3] = (Filter) multiFilter0;
      filterArray0[4] = (Filter) multiFilter0;
      filterArray0[5] = (Filter) allFilter0;
      filterArray0[6] = (Filter) multiFilter0;
      filterArray0[7] = (Filter) multiFilter0;
      multiFilter0.setFilters(filterArray0);
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(4, stringArray0.length);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6151104036339126
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[11];
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = object0;
      objectArray0[4] = object1;
      objectArray0[5] = object1;
      AllFilter allFilter0 = new AllFilter();
      System.setCurrentTimeMillis((-624L));
      System.setCurrentTimeMillis((-624L));
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      discretize0.getOptions();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      MockRandom mockRandom0 = new MockRandom(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.7828802543858893
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)3;
      Attribute.typeToString((int) (byte)0);
      SystemInUtil.addInputLine("-inLf");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(125);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 70;
      doubleArray0[0] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (byte)3;
      doubleArray0[5] = (double) 125;
      doubleArray0[6] = (double) (byte)3;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0.0, doubleArray0);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "numeric";
      stringArray0[1] = "numeric";
      stringArray0[2] = "numeric";
      stringArray0[3] = "numeric";
      stringArray0[4] = "numeric";
      stringArray0[5] = "-B";
      stringArray0[6] = "#qq";
      stringArray0[7] = "numeric";
      stringArray0[8] = "numeric";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      function0.apply("'$");
      unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      unaryOperator0.apply("");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      MultiFilter multiFilter0 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      multiFilter0.isStreamableFilter();
      Filter[] filterArray0 = new Filter[5];
      Filter filter0 = Filter.makeCopy(multiFilter0);
      filterArray0[0] = filter0;
      filterArray0[1] = (Filter) allFilter0;
      filterArray0[2] = (Filter) allFilter0;
      filterArray0[3] = (Filter) multiFilter0;
      filterArray0[4] = (Filter) multiFilter0;
      multiFilter0.setFilters(filterArray0);
      multiFilter0.toString();
      AllFilter allFilter1 = new AllFilter();
      allFilter1.toString();
      Discretize discretize0 = new Discretize("-M");
      Filter filter1 = Filter.makeCopy(filterArray0[3]);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-M";
      stringArray0[1] = "'$";
      stringArray0[2] = "'$";
      Filter.runFilter(filter1, stringArray0);
      Filter.runFilter(filterArray0[2], stringArray0);
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("YWk");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      hashMap0.put("VjB1k`", arrayList0);
      Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      Object object0 = new Object();
      locale_LanguageRange0.equals(object0);
      locale_LanguageRange0.getWeight();
      linkedList0.add(locale_LanguageRange0);
      Consumer<Locale.LanguageRange> consumer0 = (Consumer<Locale.LanguageRange>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      arrayList0.iterator();
      Object object1 = new Object();
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("YWk");
      linkedList0.removeLastOccurrence(locale_LanguageRange1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) arrayList1, locale_FilteringMode0);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("s>");
      String string0 = discretize0.getRevision();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("8964", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)58;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(3588L);
      Discretize discretize0 = new Discretize("(k6eff/0iY4&d5\n<*");
      String string0 = discretize0.makeBinaryTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Make resulting attributes binary.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Discretize discretize0 = new Discretize("first-last");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "~\"T`<'`J1%y4ZgK";
      stringArray0[2] = "first-last";
      stringArray0[3] = "~\"T`<'`J1%y4ZgK";
      stringArray0[4] = "-R";
      stringArray0[5] = "~\"T`<'`J1%y4ZgK";
      stringArray0[6] = "~\"T`<'`J1%y4ZgK";
      stringArray0[7] = "~\"T`<'`J1%y4ZgK";
      stringArray0[8] = "\nHelp requested\n";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("YWk");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      Object object0 = new Object();
      locale_LanguageRange0.equals(object0);
      locale_LanguageRange0.getWeight();
      linkedList0.add(locale_LanguageRange0);
      Consumer<Locale.LanguageRange> consumer0 = (Consumer<Locale.LanguageRange>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      arrayList0.iterator();
      linkedList0.clear();
      Object object1 = new Object();
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("YWk");
      linkedList0.removeLastOccurrence(locale_LanguageRange1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags(list0, (Collection<String>) arrayList1, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "YWk";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.useEqualFrequencyTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.710283334414665
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = new Discretize("M?F3/=eCJ[0D");
      discretize0.setInvertSelection(true);
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Discretize discretize0 = new Discretize();
      discretize0.getBins();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      Integer integer0 = new Integer((-2028178998));
      protectedProperties1.clone();
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = "K9h\"Er[Ea]-%uw{uwgJ";
      Object object2 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("K9h\"Er[Ea]-%uw{uwgJ", "K9h\"Er[Ea]-%uw{uwgJ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // K9h\"Er[Ea]-%uw{uwgJ
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.6838592285916105
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("YWk");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      hashMap0.put("9Bk`", arrayList0);
      Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("YWk", protectedProperties0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      attribute0.copy("/Td|4w");
      Instances instances0 = new Instances("string", arrayList2, 0);
      arrayList2.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.setInvertSelection(true);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Attribute> function0 = (Function<Object, Attribute>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Attribute> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Attribute>) function0);
      Function<Object, Attribute> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Attribute>) function1);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Attribute> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Attribute>) function2);
      unaryOperator1.andThen((Function<? super String, ? extends Attribute>) function3);
      discretize0.calculateCutPoints();
      Discretize discretize1 = new Discretize("\u0000");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add("_E|f+%Wf${Wu8I");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("YWk");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      hashMap0.put("VjB1k`", arrayList0);
      hashMap0.put("VjB1k`", arrayList0);
      Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      Object object0 = new Object();
      locale_LanguageRange0.equals(object0);
      locale_LanguageRange0.getWeight();
      linkedList0.add(locale_LanguageRange0);
      Consumer<Locale.LanguageRange> consumer0 = (Consumer<Locale.LanguageRange>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      arrayList0.iterator();
      linkedList0.clear();
      Object object1 = new Object();
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("YWk");
      SystemInUtil.addInputLine("");
      linkedList0.removeLastOccurrence(locale_LanguageRange1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Discretize discretize0 = new Discretize("");
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      Discretize discretize0 = new Discretize("@end");
      attribute0.value(105);
      String[] stringArray0 = new String[8];
      discretize0.setBins(3678);
      attribute0.indexOfValue("ohW]z;w#cdbk;$v");
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      // Undeclared exception!
      try { 
        protectedProperties0.putAll(properties0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ProtectedProperties cannot be modified!
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setUseEqualFrequency(false);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-100);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("date");
      attribute0.value(105);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "integer";
      stringArray0[1] = "@end";
      stringArray0[2] = "real";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "ee";
      stringArray1[1] = "relational";
      stringArray1[2] = "numeric";
      discretize0.setFindNumBins(false);
      stringArray1[3] = "@attribute";
      stringArray1[4] = "date";
      stringArray1[5] = "string";
      stringArray1[6] = "";
      Filter.runFilter(discretize0, stringArray1);
      System.setCurrentTimeMillis((-624L));
      System.setCurrentTimeMillis((-1258L));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = "";
      int[] intArray0 = new int[5];
      intArray0[0] = 66;
      intArray0[1] = 37;
      intArray0[2] = 1288;
      intArray0[3] = 45;
      intArray0[4] = 111;
      discretize0.setAttributeIndicesArray(intArray0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      String string0 = "YWk";
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      Object object0 = new Object();
      Consumer<Locale.LanguageRange> consumer0 = (Consumer<Locale.LanguageRange>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("YWk");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags(list0, (Collection<String>) arrayList0, locale_FilteringMode0);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      AllFilter allFilter1 = new AllFilter();
      Filter[] filterArray0 = new Filter[5];
      filterArray0[0] = (Filter) multiFilter2;
      filterArray0[1] = (Filter) allFilter0;
      filterArray0[2] = (Filter) multiFilter1;
      filterArray0[3] = (Filter) multiFilter0;
      filterArray0[4] = (Filter) allFilter0;
      multiFilter2.isStreamableFilter();
      multiFilter2.setFilters(filterArray0);
      multiFilter2.toString();
      allFilter0.toString();
      Discretize discretize0 = new Discretize("rWu4xWO");
      Filter filter0 = Filter.makeCopy(filterArray0[1]);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "* Returns the capabilities of this filter.";
      stringArray0[1] = "rWu4xWO";
      stringArray0[2] = "rWu4xWO";
      stringArray0[3] = "rWu4xWO";
      stringArray0[4] = "rWu4xWO";
      discretize0.m_IgnoreClass = true;
      Filter.runFilter(filter0, stringArray0);
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("YWk");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      Object object0 = new Object();
      locale_LanguageRange0.equals(object0);
      locale_LanguageRange0.getWeight();
      linkedList0.add(locale_LanguageRange0);
      Consumer<Locale.LanguageRange> consumer0 = (Consumer<Locale.LanguageRange>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      arrayList0.iterator();
      linkedList0.clear();
      Object object1 = new Object();
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("YWk");
      linkedList0.removeLastOccurrence(locale_LanguageRange1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) arrayList1, locale_FilteringMode0);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      Random.setNextRandom(82);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "first-lat";
      stringArray0[2] = "first-lat";
      stringArray0[3] = "first-lat";
      stringArray0[5] = "J;J/mG5RmO/WT";
      stringArray0[6] = "first-lat";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Discretize discretize0 = new Discretize("J;J/mG5RmO/WT");
      discretize0.setAttributeIndices("first-lat");
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("z");
      discretize0.getInvertSelection();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(false);
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      System.setCurrentTimeMillis(2447L);
      Discretize discretize0 = new Discretize();
      discretize0.binsTipText();
      String string0 = discretize0.binsTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.isStreamableFilter();
      Filter[] filterArray0 = new Filter[7];
      filterArray0[0] = (Filter) multiFilter0;
      filterArray0[0] = (Filter) multiFilter0;
      filterArray0[2] = (Filter) multiFilter0;
      filterArray0[3] = (Filter) multiFilter0;
      filterArray0[4] = (Filter) multiFilter0;
      filterArray0[5] = (Filter) multiFilter0;
      filterArray0[6] = (Filter) multiFilter0;
      multiFilter0.setFilters(filterArray0);
      multiFilter0.toString();
      AllFilter allFilter0 = new AllFilter();
      Filter.makeCopies(filterArray0[2], 63);
      allFilter0.toString();
      Filter.makeCopy(filterArray0[0]);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1161);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("YWk");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      Object object0 = new Object();
      locale_LanguageRange0.equals(object0);
      linkedList0.add(locale_LanguageRange0);
      Consumer<Locale.LanguageRange> consumer0 = (Consumer<Locale.LanguageRange>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      arrayList0.iterator();
      linkedList0.clear();
      Object object1 = new Object();
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("YWk");
      linkedList0.removeLastOccurrence(locale_LanguageRange1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags(list0, (Collection<String>) arrayList1, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "YWk";
      discretize0.getUseEqualFrequency();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("YWk", (Map<String, List<String>>) hashMap0);
      Object object0 = new Object();
      Consumer<Locale.LanguageRange> consumer0 = (Consumer<Locale.LanguageRange>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("YWk");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags(list0, (Collection<String>) arrayList0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "YWk";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.useEqualFrequencyTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCapabilities();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.replaceAll(unaryOperator0);
      arrayList0.clone();
      MultiFilter multiFilter0 = new MultiFilter();
      Filter[] filterArray0 = new Filter[6];
      filterArray0[0] = (Filter) multiFilter0;
      filterArray0[1] = (Filter) multiFilter0;
      filterArray0[2] = (Filter) multiFilter0;
      filterArray0[3] = (Filter) multiFilter0;
      Filter filter0 = Filter.makeCopy(filterArray0[0]);
      filterArray0[4] = filter0;
      filterArray0[5] = (Filter) multiFilter0;
      multiFilter0.setFilters(filterArray0);
      Filter.runFilter(filterArray0[1], (String[]) null);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getAttributeIndices();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("first-last", string0);
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getMakeBinary();
      discretize0.getFindNumBins();
      discretize0.getAttributeIndices();
      StringReader stringReader0 = new StringReader("");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // premature end of file, read Token[EOF], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      byte[] byteArray0 = new byte[8];
      mockRandom0.doubles();
      mockRandom0.nextGaussian();
      byteArray0[2] = (byte)3;
      mockRandom0.nextBytes(byteArray0);
      MockRandom mockRandom1 = new MockRandom(1568L);
      MockRandom mockRandom2 = new MockRandom((byte)3);
      mockRandom1.ints();
      MockRandom mockRandom3 = new MockRandom();
      mockRandom1.nextBoolean();
      mockRandom2.doubles((double) (byte)0, 1797.0);
      MockRandom mockRandom4 = new MockRandom();
      mockRandom0.nextBytes(byteArray0);
      MockRandom mockRandom5 = new MockRandom();
      MockRandom mockRandom6 = new MockRandom();
      mockRandom6.nextBytes(byteArray0);
      MockRandom mockRandom7 = new MockRandom();
      MockRandom mockRandom8 = new MockRandom(1568L);
      mockRandom4.nextBoolean();
      MockRandom mockRandom9 = new MockRandom((byte)0);
      mockRandom4.doubles();
      mockRandom4.doubles();
      mockRandom2.doubles(3021L);
      mockRandom4.nextDouble();
      MockRandom mockRandom10 = new MockRandom((byte)0);
      mockRandom10.ints(1, 114);
      mockRandom10.nextGaussian();
      MockRandom mockRandom11 = new MockRandom(1L);
      System.setCurrentTimeMillis(1);
      Discretize discretize0 = new Discretize("unknown(1525)");
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)3;
      mockRandom0.nextBytes(byteArray0);
      MockRandom mockRandom1 = new MockRandom(1568L);
      MockRandom mockRandom2 = new MockRandom((byte)3);
      MockRandom mockRandom3 = new MockRandom();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockRandom mockRandom4 = new MockRandom();
      mockRandom3.ints((long) 1, (int) (byte)3, 2171);
      mockRandom4.nextGaussian();
      MockRandom mockRandom5 = new MockRandom();
      MockRandom mockRandom6 = new MockRandom();
      mockRandom5.nextGaussian();
      mockRandom2.nextBytes(byteArray0);
      mockRandom2.ints();
      MockRandom mockRandom7 = new MockRandom();
      mockRandom7.nextGaussian();
      mockRandom2.ints(2497L);
      MockRandom mockRandom8 = new MockRandom((byte)0);
      mockRandom8.ints(1, 44);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1568L;
      doubleArray0[1] = 0.2;
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Filter[] filterArray0 = new Filter[24];
      filterArray0[1] = (Filter) allFilter0;
      filterArray0[1] = (Filter) allFilter0;
      MultiFilter multiFilter1 = new MultiFilter();
      filterArray0[2] = (Filter) multiFilter1;
      filterArray0[3] = (Filter) allFilter0;
      multiFilter0.setDebug(false);
      Filter.makeCopy(filterArray0[0]);
      filterArray0[4] = (Filter) null;
      Discretize discretize0 = new Discretize("jsko9g%{L.8");
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1669.0;
      doubleArray0[1] = 1015.2047106981418;
      doubleArray0[2] = 1669.0;
      doubleArray0[3] = 1669.0;
      doubleArray0[4] = 1669.0;
      doubleArray0[5] = 1015.2047106981418;
      DenseInstance denseInstance0 = new DenseInstance(1669.0, doubleArray0);
      Discretize discretize1 = new Discretize();
      boolean boolean0 = discretize1.getFindNumBins();
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getMakeBinary());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("");
      unaryOperator0.apply("QB>~");
      Discretize discretize0 = new Discretize("JWR%wM/");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(6, stringArray0.length);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom(1);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)3;
      mockRandom0.nextBytes(byteArray0);
      MockRandom mockRandom1 = new MockRandom(1568L);
      MockRandom mockRandom2 = new MockRandom((byte)3);
      MockRandom mockRandom3 = new MockRandom();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockRandom mockRandom4 = new MockRandom();
      mockRandom3.ints((long) 1, (int) (byte)3, 2171);
      mockRandom4.nextGaussian();
      MockRandom mockRandom5 = new MockRandom();
      MockRandom mockRandom6 = new MockRandom();
      mockRandom5.nextGaussian();
      mockRandom2.nextBytes(byteArray0);
      mockRandom2.ints();
      MockRandom mockRandom7 = new MockRandom();
      mockRandom7.nextGaussian();
      mockRandom2.ints(2497L);
      MockRandom mockRandom8 = new MockRandom((byte)0);
      mockRandom8.ints(1, 44);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1568L;
      doubleArray0[1] = 0.2;
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      AllFilter allFilter1 = new AllFilter();
      multiFilter2.isStreamableFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      Filter[] filterArray0 = new Filter[8];
      filterArray0[0] = (Filter) multiFilter1;
      filterArray0[1] = (Filter) multiFilter0;
      MultiFilter multiFilter4 = new MultiFilter();
      filterArray0[2] = (Filter) multiFilter4;
      filterArray0[3] = (Filter) allFilter0;
      filterArray0[4] = (Filter) allFilter0;
      filterArray0[5] = (Filter) allFilter1;
      MultiFilter multiFilter5 = new MultiFilter();
      filterArray0[6] = (Filter) multiFilter5;
      filterArray0[7] = (Filter) allFilter1;
      multiFilter1.setFilters(filterArray0);
      MultiFilter multiFilter6 = new MultiFilter();
      multiFilter2.toString();
      AllFilter allFilter2 = new AllFilter();
      allFilter0.toString();
      Discretize discretize0 = new Discretize("-B <num>");
      Filter.makeCopy(multiFilter2);
      MultiFilter multiFilter7 = new MultiFilter();
      String[] stringArray0 = new String[17];
      stringArray0[0] = "weka.filters.MultiFilter";
      stringArray0[1] = "* Returns the capablities of this filter.";
      stringArray0[2] = "weka.filters.MultiFilter";
      Filter.runFilter(multiFilter5, stringArray0);
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("");
      unaryOperator0.apply("QB>~");
      Discretize discretize0 = new Discretize("");
      String string0 = discretize0.globalInfo();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)26;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiFilter multiFilter2 = new MultiFilter();
      AllFilter allFilter1 = new AllFilter();
      Filter[] filterArray0 = new Filter[5];
      filterArray0[0] = (Filter) multiFilter2;
      filterArray0[1] = (Filter) allFilter0;
      filterArray0[2] = (Filter) multiFilter1;
      filterArray0[3] = (Filter) multiFilter1;
      filterArray0[4] = (Filter) allFilter0;
      multiFilter2.setFilters(filterArray0);
      Discretize discretize0 = new Discretize("IrWu4xWO&");
      Filter filter0 = Filter.makeCopy(filterArray0[1]);
      String[] stringArray0 = new String[5];
      Filter.runFilter(filter0, stringArray0);
      stringArray0[0] = "* Returns the capabilities of this filter.";
      stringArray0[1] = "IrWu4xWO&";
      stringArray0[2] = "IrWu4xWO&";
      stringArray0[3] = "IrWu4xWO&";
      stringArray0[4] = "IrWu4xWO&";
      Filter.runFilter(filter0, stringArray0);
      discretize0.setOptions((String[]) null);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      AllFilter allFilter1 = new AllFilter();
      multiFilter2.isStreamableFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      Filter[] filterArray0 = new Filter[8];
      filterArray0[3] = (Filter) multiFilter1;
      filterArray0[1] = (Filter) multiFilter0;
      filterArray0[2] = (Filter) multiFilter2;
      filterArray0[3] = (Filter) allFilter0;
      filterArray0[4] = (Filter) allFilter0;
      filterArray0[5] = (Filter) allFilter1;
      MultiFilter multiFilter4 = new MultiFilter();
      filterArray0[6] = (Filter) multiFilter4;
      multiFilter1.setFilters(filterArray0);
      MultiFilter multiFilter5 = new MultiFilter();
      multiFilter1.toString();
      AllFilter allFilter2 = new AllFilter();
      allFilter2.toString();
      Discretize discretize0 = new Discretize("QS)?S}N v");
      MultiFilter multiFilter6 = new MultiFilter();
      Filter.makeCopy(multiFilter6);
      MultiFilter multiFilter7 = new MultiFilter();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-B <num>";
      stringArray0[1] = "weka.filters.AllFilter";
      stringArray0[2] = "weka.filters.AllFilter";
      stringArray0[3] = "weka.filters.AllFilter";
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
