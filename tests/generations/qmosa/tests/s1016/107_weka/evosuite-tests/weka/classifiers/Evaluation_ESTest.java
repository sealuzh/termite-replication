/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 10:25:37 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.Random;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.GainRatioAttributeEval;
import weka.attributeSelection.OneRAttributeEval;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.ReliefFAttributeEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.KStar;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.meta.Vote;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.LMT;
import weka.clusterers.Cobweb;
import weka.clusterers.FilteredClusterer;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.OptionHandlerJavadoc;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.converters.AbstractFileLoader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.Loader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.Filter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8725336946728461
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      additiveRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setHandler(additiveRegression0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation1.m_SumSqrPredicted;
      instances1.remove((Object) testInstances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2525.6325813523035;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (-2944.9742196);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(297.642, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(210);
      instances1.add((Instance) binarySparseInstance0);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, binarySparseInstance1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.816992408889048
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 0;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) gaussianProcesses0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.144683644513411
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.unclassified();
      evaluation0.KBRelativeInformation();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.areaUnderPRC((-1461032992));
      Stack<String> stack0 = new Stack<String>();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Environment environment0 = new Environment();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      environment0.addVariableSystemWide(".bsi", "D'F~-3S9z");
      AbstractFileLoader.FILE_EXTENSION_COMPRESSED = "      }\n";
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.setUser((String) null);
      databaseLoader1.setEnvironment(environment0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      evaluation0.falseNegativeRate(17);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.precision(470);
      evaluation0.pctCorrect();
      evaluation0.toSummaryString("      }\n", true);
      evaluation0.setDiscardPredictions(true);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3197367252258787
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setSeed(19);
      evaluation0.KBRelativeInformation();
      costSensitiveClassifier0.toString();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.weightedMatthewsCorrelation();
      testInstances0.setHandler(costSensitiveClassifier0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Cobweb cobweb0 = new Cobweb();
      instances0.remove((Object) cobweb0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0744690805212636
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Integer integer0 = new Integer(0);
      evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      evaluation0.areaUnderPRC((-1));
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      evaluation0.updateMargins(doubleArray0, 1, 100.0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SMO sMO0 = new SMO();
      sMO0.setNumFolds(84);
      Evaluation evaluation1 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        ConverterUtils.DataSource.read((Loader) cSVLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.311397480402477
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.areaUnderPRC((-1));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.falseNegativeRate(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.weightedTrueNegativeRate();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.m_MinTarget = (-917.97);
      evaluation1.toMatrixString("@data");
      evaluation0.weightedFalsePositiveRate();
      evaluation2.SFSchemeEntropy();
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation3.trueNegativeRate(1921);
      Evaluation evaluation4 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.matthewsCorrelationCoefficient(0);
      evaluation1.falsePositiveRate(0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation3.evaluateModelOnce((Classifier) gaussianProcesses0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6616426540503713
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Instances instances2 = testInstances0.generate();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Instances instances3 = new Instances(instances2);
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation0.m_PriorEstimator = univariateKernelEstimator0;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SMO sMO0 = new SMO();
      sMO0.setNumFolds((-1));
      Evaluation evaluation1 = new Evaluation(instances3);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation1.equals(instances3);
      evaluation0.KBInformation();
      evaluation0.m_ClassNames = testInstances0.DEFAULT_WORDS;
      evaluation1.priorEntropy();
      evaluation0.SFPriorEntropy();
      evaluation0.relativeAbsoluteError();
      evaluation0.rootMeanPriorSquaredError();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.6142447088527385
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = reliefFAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.k_MarginResolution = (-160001121);
      evaluation0.weightedMatthewsCorrelation();
      ZeroR zeroR0 = new ZeroR();
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      Capabilities capabilities1 = jRip1.getCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      LMT lMT0 = new LMT();
      Capabilities capabilities2 = lMT0.getCapabilities();
      capabilities2.enable(capabilities_Capability0);
      evaluation0.weightedTrueNegativeRate();
      capabilities1.enableAll();
      instances0.getRandomNumberGenerator(864L);
      evaluation0.toClassDetailsString("weka/core/Capabilities.props");
      evaluation0.weightedFalsePositiveRate();
      evaluation0.unweightedMacroFmeasure();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5992809219098505
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      Stacking stacking0 = new Stacking();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities0 = multiScheme0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(stacking0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.areaUnderPRC((-1));
      Vector<String> vector0 = new Vector<String>();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Environment environment0 = new Environment();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader0.setEnvironment(environment0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.SFEntropyGain();
      evaluation0.falseNegativeRate(1);
      evaluation0.weightedTrueNegativeRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModel((Classifier) stacking0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.933902593275017
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      CostMatrix costMatrix0 = null;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.falseNegativeRate(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.m_NumClasses = 103;
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.04249715119698
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      Environment environment0 = new Environment();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setEnvironment(environment0);
      testInstances0.setClassType(17);
      Environment.getSystemWide();
      databaseLoader0.setEnvironment(environment0);
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      SMO sMO0 = new SMO();
      sMO0.setNumFolds((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation1.equals(regressionByDiscretization0);
      evaluation0.KBInformation();
      evaluation1.priorEntropy();
      evaluation1.SFPriorEntropy();
      evaluation0.relativeAbsoluteError();
      evaluation0.correct();
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1628291794274346
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = reliefFAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      ZeroR zeroR0 = new ZeroR();
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip1.getCapabilities();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.falseNegativeRate(978);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.weightedTrueNegativeRate();
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation3.toMatrixString("_W;u1~ZT1sXM1)+Umh$");
      evaluation1.weightedFalsePositiveRate();
      evaluation1.SFSchemeEntropy();
      Evaluation evaluation4 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation5 = new Evaluation(instances0);
      evaluation5.trueNegativeRate(0);
      Evaluation evaluation6 = new Evaluation(instances0, (CostMatrix) null);
      evaluation4.matthewsCorrelationCoefficient(0);
      double double0 = evaluation1.falsePositiveRate((-2397));
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.6341060126942617
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      LMT lMT0 = new LMT();
      LMT lMT1 = new LMT();
      Capabilities capabilities0 = lMT1.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      capabilities0.enable(capabilities_Capability0);
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      evaluation0.weightedTrueNegativeRate();
      capabilities0.enableAll();
      instances0.getRandomNumberGenerator(430L);
      String string0 = evaluation0.toClassDetailsString("@relation");
      assertEquals("@relation\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedFalsePositiveRate();
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.setDiscardPredictions(false);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 707.495339705;
      doubleArray0[1] = 707.495339705;
      doubleArray0[2] = 707.495339705;
      doubleArray0[3] = 707.495339705;
      doubleArray0[4] = 707.495339705;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(707.495339705, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(10);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      binarySparseInstance2.toString();
      binarySparseInstance0.setValueSparse(10, 596.73557);
      binarySparseInstance0.setValue(10, 1686.697064);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.relationalValue((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.284667027795241
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 0;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      CostMatrix costMatrix0 = null;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.falseNegativeRate(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.weightedTrueNegativeRate();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.toMatrixString("@data");
      evaluation0.weightedFalsePositiveRate();
      evaluation0.SFSchemeEntropy();
      try { 
        evaluation2.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.getRevision();
      Instances instances1 = new Instances(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1019.40332822);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (-1019.40332822);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.693147181;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (-1534.1480456638144);
      SparseInstance sparseInstance0 = new SparseInstance((-1019.40332822), doubleArray0);
      instances1.add((Instance) sparseInstance0);
      testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "setNumExecutionSlots");
      cfsSubsetEval0.getCapabilities();
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.nextInt();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances1, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.255017187254417
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.falseNegativeRate(82);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation2.toMatrixString("_W;u1~ZT1sXM1)+Umh$");
      assertEquals("_W;u1~ZT1sXM1)+Umh$\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double1 = evaluation2.weightedFalsePositiveRate();
      evaluation0.SFSchemeEntropy();
      Evaluation evaluation4 = new Evaluation(instances0, (CostMatrix) null);
      double double2 = evaluation1.trueNegativeRate((-2));
      assertEquals(0.0, double2, 0.01);
      
      Evaluation evaluation5 = new Evaluation(instances0, (CostMatrix) null);
      double double3 = evaluation4.matthewsCorrelationCoefficient((byte) (-27));
      assertNotEquals(double3, double1, 0.01);
      
      evaluation0.falsePositiveRate(27);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.614275347797288
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Filter filter0 = filteredClassifier0.getFilter();
      Capabilities capabilities0 = filter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      ZeroR zeroR0 = new ZeroR();
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip1.getCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Stacking stacking0 = new Stacking();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      capabilities0.enable(capabilities_Capability0);
      stacking0.getMetaClassifier();
      evaluation0.weightedTrueNegativeRate();
      capabilities0.enableAll();
      instances0.getRandomNumberGenerator((-1L));
      evaluation0.toClassDetailsString("-distribution\n");
      evaluation0.weightedFalsePositiveRate();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.weightedFalsePositiveRate();
      // Undeclared exception!
      try { 
        evaluation0.recall(866);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 866
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(additiveRegression0);
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9799151714181009
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Z:LtL";
      stringArray0[1] = "6 <KLIA>g6b##mI";
      stringArray0[2] = "2SCs(-hEO)|kHJDI";
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9631359816034557
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 22.0;
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      capabilities0.getOtherCapabilities();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.addNumericTrainClass((-429.8), 22.0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 0, 2268.533);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.6341239676273798
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      ZeroR zeroR0 = new ZeroR();
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      evaluation0.weightedTrueNegativeRate();
      String string0 = evaluation0.toClassDetailsString("enumerateMeasures");
      assertEquals("enumerateMeasures\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedFalsePositiveRate();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.unweightedMacroFmeasure();
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.getHeader();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setDeleteEmptyBins(false);
      evaluation0.getHeader();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, (Instance) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.913562077408078
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Filter filter0 = filteredClassifier0.getFilter();
      Capabilities capabilities0 = filter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setSeed(2255);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      costSensitiveClassifier0.toString();
      evaluation0.weightedMatthewsCorrelation();
      testInstances0.setHandler(costSensitiveClassifier0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      int int0 = (-1461032992);
      evaluation0.areaUnderPRC(0);
      Vector<String> vector0 = new Vector<String>();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Environment environment0 = new Environment();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.setEnvironment(environment0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation1.updateNumericScores(doubleArray0, doubleArray0, 4.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3749463860814393
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.weightedAreaUnderPRC();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.areaUnderPRC((-1));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.falseNegativeRate(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double1 = evaluation0.weightedTrueNegativeRate();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation1.toMatrixString("@data");
      assertEquals("@data\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      evaluation0.weightedFalsePositiveRate();
      double double2 = evaluation2.SFSchemeEntropy();
      assertEquals(0.0, double2, 0.01);
      
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation3.trueNegativeRate(1921);
      Evaluation evaluation4 = new Evaluation(instances0, (CostMatrix) null);
      double double3 = evaluation3.weightedTruePositiveRate();
      assertEquals(Double.NaN, evaluation3.unweightedMicroFmeasure(), 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.30673587737044
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(additiveRegression0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      evaluation0.setPriors(instances1);
      Environment environment0 = Environment.getSystemWide();
      environment0.addVariable("@data", "11");
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader0.setEnvironment(environment0);
      Stacking stacking0 = new Stacking();
      stacking0.setNumExecutionSlots(1860);
      stacking0.getMetaClassifier();
      MockRandom mockRandom0 = new MockRandom(66);
      evaluation0.SFMeanEntropyGain();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DenseInstance denseInstance0 = new DenseInstance(2392);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, denseInstance0, 66);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.057900517471227
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.m_ClassPriorsSum;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation");
      evaluation0.weightedAreaUnderROC();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.weightedPrecision();
      ZeroR zeroR0 = new ZeroR();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles(0L);
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation2.crossValidateModel(".cost", instances0, 1, testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .cost
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1304778859169557
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(additiveRegression0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.areaUnderPRC((-1047));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "C1uyHIG-tuKA;<6u8G");
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.344612770248948
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.areaUnderPRC((-1));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      double double1 = evaluation0.SFEntropyGain();
      assertNotEquals(double1, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.falseNegativeRate(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double2 = evaluation0.weightedTrueNegativeRate();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation1.toMatrixString("@data");
      assertEquals("@data\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double3 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double3, double2, 0.01);
      
      evaluation0.SFSchemeEntropy();
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation3.trueNegativeRate(1921);
      Evaluation evaluation4 = new Evaluation(instances0, (CostMatrix) null);
      evaluation4.weightedFalseNegativeRate();
      double double4 = evaluation2.incorrect();
      assertEquals(double4, double1, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.765976792018692
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Filter filter0 = filteredClassifier0.getFilter();
      Capabilities capabilities0 = filter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j09Sq9@n0\"6O");
      Instance instance0 = null;
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(classifier0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1346486902863697
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(additiveRegression0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      evaluation0.setPriors(instances1);
      Environment environment0 = Environment.getSystemWide();
      String string0 = "11";
      environment0.addVariable("@data", "11");
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader0.setEnvironment(environment0);
      int int0 = (-2170);
      int[] intArray0 = new int[9];
      intArray0[0] = 66;
      evaluation0.meanPriorAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation0.weightedPrecision();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2070608094723485
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.areaUnderPRC((-1));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, " ");
      evaluation0.weightedAreaUnderROC();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Object[][] objectArray0 = new Object[1][7];
      objectArray0[0] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      costMatrix0.m_matrix = objectArray0;
      evaluation0.meanPriorAbsoluteError();
      evaluation0.weightedPrecision();
      evaluation0.unweightedMicroFmeasure();
      costSensitiveClassifier0.setCostMatrix(costMatrix0);
      evaluation0.rootMeanSquaredError();
      ArrayDeque<Bagging> arrayDeque0 = new ArrayDeque<Bagging>();
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, 104, (Random) mockRandom0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2869291869004313
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.areaUnderPRC((-1));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.falseNegativeRate(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.weightedTrueNegativeRate();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.m_MinTarget = (-917.97);
      evaluation1.toMatrixString("@data");
      evaluation0.weightedFalsePositiveRate();
      evaluation2.SFSchemeEntropy();
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation3.trueNegativeRate(1921);
      Evaluation evaluation4 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation0.matthewsCorrelationCoefficient(0);
      assertEquals(0.0, double1, 0.01);
      
      evaluation1.falsePositiveRate(0);
      String string0 = evaluation2.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      evaluation0.SFEntropyGain();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.083377674332238
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.areaUnderPRC((-1));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, " ");
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(double1, double0, 0.01);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.meanPriorAbsoluteError();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "J");
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.totalCost();
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5765536505658533
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1680186714978857
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      optionHandlerJavadoc0.setOptions(testInstances0.DEFAULT_WORDS);
      instances0.remove((Object) optionHandlerJavadoc0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (-929.4);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-929.4);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-929.4), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1002);
      evaluation1.falsePositiveRate((-2));
      evaluation1.areaUnderPRC(116);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      double double0 = evaluation1.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.weightedPrecision();
      double double2 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.numTrueNegatives(1);
      double double3 = evaluation1.relativeAbsoluteError();
      assertEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.605177508522958
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[3];
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.m_MaxTarget;
      Vector<String> vector0 = new Vector<String>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      vector0.spliterator();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(10);
      evaluation0.KBMeanInformation();
      BinarySparseInstance binarySparseInstance2 = null;
      try {
        binarySparseInstance2 = new BinarySparseInstance((byte) (-27));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.132277899259854
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedMatthewsCorrelation();
      Instances instances2 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "distributionForInstance");
      evaluation0.weightedAreaUnderROC();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-1913.5891222);
      evaluation1.meanPriorAbsoluteError();
      double double0 = evaluation1.weightedPrecision();
      double double1 = evaluation1.unweightedMicroFmeasure();
      assertEquals(double1, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances2, (CostMatrix) null);
      evaluation2.numTrueNegatives(2);
      evaluation2.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation2.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.73414835638091
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      double[] doubleArray0 = new double[3];
      evaluation0.m_SumKBInfo = 22.0;
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      capabilities0.getOtherCapabilities();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.addNumericTrainClass((-429.8), 22.0);
      evaluation0.updateMargins(doubleArray0, 0, 2268.533);
      evaluation0.useNoPriors();
      evaluation1.SFMeanPriorEntropy();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.weightedFalseNegativeRate();
      ZeroR zeroR0 = new ZeroR();
      evaluation2.weightedPrecision();
      MockRandom mockRandom0 = new MockRandom();
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.660107925676629
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.getRevision();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedMatthewsCorrelation();
      Instances instances2 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.getCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.nextInt();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) stacking0, instances2, 108, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.2754760366911837
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setSeed(19);
      double double2 = evaluation0.KBRelativeInformation();
      costSensitiveClassifier0.toString();
      evaluation0.weightedMatthewsCorrelation();
      testInstances0.setHandler(costSensitiveClassifier0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.areaUnderPRC((-1461032992));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      double double3 = evaluation0.SFEntropyGain();
      double double4 = evaluation0.falseNegativeRate((-1417));
      assertEquals(0.0, double4, 0.01);
      
      evaluation0.weightedTrueNegativeRate();
      evaluation0.toMatrixString("M<Y\u0002ez~'m`2Z4B,v");
      double double5 = evaluation0.weightedFalsePositiveRate();
      double double6 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double6, 0.01);
      
      double double7 = evaluation0.trueNegativeRate(453);
      assertEquals(double7, double3, 0.01);
      
      double double8 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double8, double2, 0.01);
      
      double double9 = evaluation0.pctUnclassified();
      assertEquals(double9, double5, 0.01);
      assertEquals(Double.NaN, double9, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.4726835561974303
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.areaUnderPRC((-1));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.m_SumSchemeEntropy;
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.weightedTrueNegativeRate();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.toMatrixString("@data");
      evaluation0.weightedFalsePositiveRate();
      evaluation0.SFSchemeEntropy();
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation3.trueNegativeRate(1921);
      Evaluation evaluation4 = new Evaluation(instances0, (CostMatrix) null);
      evaluation4.weightedFalseNegativeRate();
      evaluation2.incorrect();
      evaluation1.weightedRecall();
      JSONLoader jSONLoader0 = new JSONLoader();
      try { 
        jSONLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSONLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "p=3BhNc<";
      votedPerceptron0.globalInfo();
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      try { 
        Evaluation.evaluateModel((Classifier) votedPerceptron0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2989145889562828
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.coverageOfTestCasesByPredictedRegions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setSeed(19);
      evaluation0.KBRelativeInformation();
      costSensitiveClassifier0.toString();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.weightedMatthewsCorrelation();
      testInstances0.setHandler(costSensitiveClassifier0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.areaUnderPRC((-1461032992));
      Vector<String> vector0 = new Vector<String>();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Environment environment0 = new Environment();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.setEnvironment(environment0);
      testInstances0.setClassType(2);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      evaluation0.falseNegativeRate(17);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.precision(501);
      evaluation0.weightedFMeasure();
      evaluation0.pctCorrect();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(1);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.2393113243150746
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.m_ClassPriorsSum;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation");
      evaluation0.weightedAreaUnderROC();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.weightedPrecision();
      Stacking stacking0 = new Stacking();
      ZeroR zeroR0 = new ZeroR();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedTrueNegativeRate();
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.7385511116281283
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(additiveRegression0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      evaluation0.setPriors(instances1);
      Environment environment0 = Environment.getSystemWide();
      environment0.addVariable("@data", "11");
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader0.setEnvironment(environment0);
      int[] intArray0 = new int[9];
      intArray0[0] = 66;
      intArray0[1] = 99;
      intArray0[2] = (-2170);
      intArray0[3] = (-2179);
      String string0 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      double[] doubleArray0 = evaluation0.makeDistribution(15);
      assertArrayEquals(new double[] {15.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      MultiScheme multiScheme0 = new MultiScheme();
      String string1 = Evaluation.getGlobalInfo(additiveRegression0);
      assertEquals("\nSynopsis for weka.classifiers.meta.AdditiveRegression:\n\n Meta classifier that enhances the performance of a regression base classifier. Each iteration fits a model to the residuals left by the classifier on the previous iteration. Prediction is accomplished by adding the predictions of each classifier. Reducing the shrinkage (learning rate) parameter helps prevent overfitting and has a smoothing effect but increases the learning time.\n\nFor more information see:\n\nJ.H. Friedman (1999). Stochastic Gradient Boosting.", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8564909139241834
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      Utils.SMALL = 0.0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[3];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Stacking stacking0 = new Stacking();
      ZeroR zeroR0 = (ZeroR)stacking0.getMetaClassifier();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      zeroR0.setOptions(testInstances0.DEFAULT_WORDS);
      evaluation0.getDiscardPredictions();
      DenseInstance denseInstance0 = new DenseInstance((-2.0), doubleArray0);
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Stacking stacking1 = new Stacking();
      ZeroR zeroR1 = (ZeroR)stacking0.getMetaClassifier();
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.nextInt();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-27);
      objectArray0[1] = (Object) stacking0;
      objectArray0[2] = (Object) zeroR1;
      instances0.resample(mockRandom0);
      Object object0 = new Object();
      objectArray0[3] = object0;
      try { 
        evaluation0.crossValidateModel((Classifier) stacking1, instances0, 45, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.271038285819512
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.pctIncorrect();
      evaluation0.m_Correct = (-981.656561411);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.getClassPriors();
      evaluation0.kappa();
      evaluation0.incorrect();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      Stacking stacking0 = new Stacking();
      Stacking stacking1 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".xrff.gz";
      stringArray0[1] = ".xrff.gz";
      stringArray0[2] = ".xrff.gz";
      stringArray0[3] = ".xrff";
      stringArray0[4] = ".xrff.gz";
      stringArray0[5] = ".xrff";
      stringArray0[6] = "\ton the training data.\n";
      stringArray0[7] = ".xrff";
      stringArray0[8] = ".xrff";
      try { 
        Evaluation.evaluateModel(classifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.793301325273766
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      Instances instances2 = testInstances0.generate();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      capabilities0.getOtherCapabilities();
      Instances instances3 = new Instances(instances2);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-2), (-429.8));
      MockRandom mockRandom0 = new MockRandom(0);
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      MockRandom mockRandom1 = new MockRandom((-218L));
      mockRandom0.nextInt();
      MockRandom mockRandom2 = new MockRandom((-306L));
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      
      double double2 = evaluation2.numFalseNegatives(0);
      assertNotEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.1251545599412416
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      sGD0.setDontNormalize(false);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextInt();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-91);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockRandom mockRandom1 = new MockRandom(720L);
      MockRandom mockRandom2 = new MockRandom();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      mockRandom2.nextInt();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.numFalseNegatives(106);
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.2189789085327742
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Filter filter0 = filteredClassifier0.getFilter();
      Capabilities capabilities0 = filter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(filteredClassifier0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.getRevision();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      Evaluation evaluation2 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      evaluation2.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom((-1));
      Stacking stacking1 = new Stacking();
      stacking1.getMetaClassifier();
      MockRandom mockRandom1 = new MockRandom((-1L));
      mockRandom0.nextInt();
      MockRandom mockRandom2 = new MockRandom((byte) (-29));
      Evaluation evaluation3 = new Evaluation(instances1);
      assertEquals(0.0, evaluation3.SFPriorEntropy(), 0.01);
      
      evaluation3.useNoPriors();
      double double0 = evaluation3.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.627751080880568
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      assertEquals(22.0, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-25);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      capabilities0.getOtherCapabilities();
      Instances instances1 = new Instances(instances0);
      evaluation0.addNumericTrainClass((-429.8), 22.0);
      evaluation0.updateMargins(doubleArray0, 0, 2268.533);
      evaluation0.useNoPriors();
      double double1 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01);
      
      org.evosuite.runtime.Random.setNextRandom((byte) (-25));
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation1.weightedFalseNegativeRate();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation1.KBInformation();
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.0029325035640073
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Filter filter0 = filteredClassifier0.getFilter();
      Capabilities capabilities0 = filter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(filteredClassifier0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1793.4);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 64.0;
      doubleArray0[4] = (-1793.4);
      MockRandom mockRandom0 = new MockRandom(0L);
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      MockRandom mockRandom1 = new MockRandom((-1));
      mockRandom0.nextInt();
      MockRandom mockRandom2 = new MockRandom((byte) (-29));
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.getHeader();
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(additiveRegression0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation0.weightedMatthewsCorrelation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.1099578127327736
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(additiveRegression0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      evaluation0.setPriors(instances1);
      Environment environment0 = Environment.getSystemWide();
      environment0.addVariable("@data", "11");
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader0.setEnvironment(environment0);
      Environment environment1 = Environment.getSystemWide();
      databaseLoader0.setEnvironment(environment1);
      TestInstances.forCapabilities(capabilities0);
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SMO sMO0 = new SMO();
      SMO sMO1 = new SMO();
      sMO1.setNumFolds(1);
      DecisionTable decisionTable0 = new DecisionTable();
      evaluation0.equals(decisionTable0);
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      Utils.SMALL = 0.0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Classifier classifier0 = stacking0.getMetaClassifier();
      ZeroR zeroR0 = new ZeroR();
      double double1 = 1.2000000029802322;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 0.693147181;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/DatabaseUtils.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      doubleArray0[6] = 0.0;
      AbstractClassifier.makeCopies(classifier0, 2);
      doubleArray0[7] = (-2666.839382425697);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.8564909139241832
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1);
      instances0.remove((Object) testInstances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      int int0 = 116;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(210);
      instances0.add((Instance) binarySparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getFilter();
      filteredClassifier0.getCapabilities();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      DatabaseLoader databaseLoader2 = new DatabaseLoader();
      Stacking stacking1 = new Stacking();
      stacking1.getMetaClassifier();
      ZeroR zeroR0 = new ZeroR();
      double[] doubleArray0 = new double[0];
      Evaluation.wekaStaticWrapper(zeroR0, "W`x-lK|Q<.hK})/46");
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      assertEquals("Determines how/if the data will be transformed.", gaussianProcesses0.filterTypeTipText());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Filter filter0 = filteredClassifier0.getFilter();
      Capabilities capabilities0 = filter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (-2666.839382425697);
      doubleArray0[2] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance(0, doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) null, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.019135735981565
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(additiveRegression0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getRevision();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      capabilities0.disableAllClassDependencies();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9101");
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      MockRandom mockRandom1 = new MockRandom();
      try { 
        evaluation0.crossValidateModel(classifier0, instances0, (-4), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.0154228200068856
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      Utils.SMALL = 0.0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[4];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Stacking stacking0 = new Stacking();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      DenseInstance denseInstance0 = new DenseInstance((-2.0), doubleArray0);
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Stacking stacking1 = new Stacking();
      MockRandom mockRandom0 = new MockRandom(2473L);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      evaluation0.kappa();
      try { 
        evaluation0.evaluateModelOnce((double) (byte) (-27), (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -27
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.0033583467168707
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = Double.NaN;
      instances1.remove((Object) testInstances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(116);
      evaluation0.falsePositiveRate(10);
      Stacking stacking0 = new Stacking();
      MockRandom mockRandom0 = new MockRandom(364L);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance1);
      evaluation0.kappa();
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.19814492559653
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      capabilities0.getOtherCapabilities();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.addNumericTrainClass((-429.8), 22.0);
      evaluation0.useNoPriors();
      evaluation1.SFMeanPriorEntropy();
      int[] intArray0 = new int[0];
      Instance instance0 = BallNode.calcCentroidPivot(65, (-2), intArray0, instances0);
      try { 
        evaluation0.updatePriors(instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.025429348010766
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.areaUnderPRC((-1875));
      Vector<String> vector0 = new Vector<String>();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Environment environment0 = new Environment();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader0.setEnvironment(environment0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 176.11045684611756);
      evaluation0.toMatrixString();
      evaluation0.numTruePositives((byte) (-27));
      evaluation0.precision(1);
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.7334069867633466
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-1);
      instances1.remove((Object) testInstances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(116);
      evaluation0.falsePositiveRate(10);
      Stacking stacking0 = new Stacking();
      Stacking stacking1 = new Stacking();
      stacking1.getMetaClassifier();
      MockRandom mockRandom0 = new MockRandom(364L);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance1);
      // Undeclared exception!
      try { 
        evaluation0.precision(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.353216469193083
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(additiveRegression0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getRevision();
      capabilities0.disableAllClassDependencies();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getDataSet();
      evaluation1.setPriors(instances0);
      Environment environment0 = Environment.getSystemWide();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DatabaseLoader databaseLoader2 = new DatabaseLoader();
      databaseLoader2.setEnvironment(environment0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      evaluation0.falseNegativeRate(109);
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.231723918892296
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Environment environment0 = new Environment();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setEnvironment(environment0);
      testInstances0.setClassType(17);
      Environment.getSystemWide();
      databaseLoader0.setEnvironment(environment0);
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SMO sMO0 = new SMO();
      sMO0.setNumFolds((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.equals(regressionByDiscretization0);
      evaluation0.priorEntropy();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.SFPriorEntropy();
      System.setCurrentTimeMillis((-1573L));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.708613009636281
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Filter filter0 = filteredClassifier0.getFilter();
      Capabilities capabilities0 = filter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(filteredClassifier0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.getRevision();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      Environment environment0 = new Environment();
      environment0.addVariableSystemWide("setNumFolds", "setNumFolds");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.setEnvironment(environment0);
      testInstances0.setClassType(79);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      evaluation0.falseNegativeRate((byte)18);
      double double0 = evaluation1.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toClassDetailsString((String) null);
      assertEquals("null\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\n                 0        0        0          0       0          0     ?         ?         class3\n                 0        0        0          0       0          0     ?         ?         class4\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation1.numInstances();
      evaluation0.avgCost();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.3332239188180623
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.areaUnderPRC((-1));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.falseNegativeRate(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.weightedTrueNegativeRate();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.m_MinTarget = (-917.97);
      evaluation1.toMatrixString("@data");
      evaluation0.weightedFalsePositiveRate();
      evaluation2.SFSchemeEntropy();
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation3.trueNegativeRate(1921);
      Evaluation evaluation4 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.matthewsCorrelationCoefficient(0);
      evaluation1.falsePositiveRate(0);
      // Undeclared exception!
      try { 
        evaluation2.fMeasure(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.3267211674906476
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = Double.NaN;
      instances1.remove((Object) testInstances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.setUser((String) null);
      Environment environment0 = Environment.getSystemWide();
      databaseLoader0.setEnvironment(environment0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      evaluation0.falseNegativeRate(2);
      double double0 = evaluation0.weightedTrueNegativeRate();
      evaluation0.weightedFMeasure();
      double double1 = evaluation0.pctCorrect();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.toSummaryString("za{mmO4@8SYg%", false);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.067094546561575
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(additiveRegression0);
      SGD sGD0 = new SGD();
      sGD0.setDontNormalize(true);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MockRandom mockRandom0 = new MockRandom(2);
      mockRandom0.nextInt();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte) (-89);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockRandom mockRandom1 = new MockRandom(0L);
      MockRandom mockRandom2 = new MockRandom();
      mockRandom1.nextInt();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.128715673993615
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.m_ClassPriorsSum;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation");
      evaluation0.weightedAreaUnderROC();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.weightedPrecision();
      Stacking stacking0 = new Stacking();
      ZeroR zeroR0 = new ZeroR();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_NumClasses = 7;
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'h';
      evaluation0.getRevision();
      charArray0[2] = '\\';
      charArray0[3] = 'V';
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID(3062, charArray0, (-418));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.8109710120534392
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      votedPerceptron0.globalInfo();
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.CostSensitiveClassifier:
         // 
         // -M
         // \tMinimize expected misclassification cost. Default is to
         // \treweight training instances according to costs per class
         // -C <cost file name>
         // \tFile name of a cost matrix to use. If this is not supplied,
         // \ta cost matrix will be loaded on demand. The name of the
         // \ton-demand file is the relation name of the training data
         // \tplus \".cost\", and the path to the on-demand file is
         // \tspecified with the -N option.
         // -N <directory>
         // \tName of a directory to search for cost files when loading
         // \tcosts on demand (default current directory).
         // -cost-matrix <matrix>
         // \tThe cost matrix in Matlab single line format.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.155351589094884
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrixSource();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBRelativeInformation();
      costSensitiveClassifier0.toString();
      evaluation1.weightedMatthewsCorrelation();
      testInstances0.setHandler(costSensitiveClassifier0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.areaUnderPRC(361);
      Vector<String> vector0 = new Vector<String>();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Environment environment0 = new Environment();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader0.setEnvironment(environment0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, 1);
      evaluation1.totalCost();
      evaluation1.toMatrixString();
      evaluation0.numTruePositives(3478);
      evaluation1.precision(1);
      assertEquals(Double.POSITIVE_INFINITY, evaluation1.rootMeanPriorSquaredError(), 0.01);
      
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.2211232167052954
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Filter filter0 = filteredClassifier0.getFilter();
      Capabilities capabilities0 = filter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1793.4);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 64.0;
      doubleArray0[4] = (-1793.4);
      MockRandom mockRandom0 = new MockRandom(0L);
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      MockRandom mockRandom1 = new MockRandom((-1));
      mockRandom0.nextInt();
      MockRandom mockRandom2 = new MockRandom((byte) (-29));
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation1.kappa();
      assertEquals(1.0, double2, 0.01);
      
      double double3 = evaluation1.priorEntropy();
      assertEquals(1.9899343783255765, double3, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.8931628971929255
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      int int0 = 0;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.areaUnderPRC(467);
      evaluation0.toCumulativeMarginDistributionString();
      Vector<String> vector0 = new Vector<String>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(467);
      evaluation0.falsePositiveRate(5081);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1336.6018606053, doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance2.attribute((-2014));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.7810491830347654
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      Environment environment0 = new Environment();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      databaseLoader0.setEnvironment(environment0);
      testInstances0.setClassType(99);
      Environment environment1 = Environment.getSystemWide();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.setEnvironment(environment1);
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      SMO sMO0 = new SMO();
      sMO0.setNumFolds((-1));
      Evaluation evaluation1 = new Evaluation(instances1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      testInstances0.setNumRelationalNumeric(1);
      boolean boolean0 = evaluation0.equals(evaluation1);
      assertTrue(boolean0);
      
      evaluation1.KBInformation();
      double double1 = evaluation1.priorEntropy();
      assertEquals(0.9940302114769565, double1, 0.01);
      
      evaluation1.SFPriorEntropy();
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.9315240508117304
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[3];
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double1 = evaluation0.m_MaxTarget;
      Vector<String> vector0 = new Vector<String>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Environment environment0 = Environment.getSystemWide();
      databaseLoader0.setEnvironment(environment0);
      testInstances0.setClassType(10);
      Environment.getSystemWide();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader0.setEnvironment(environment0);
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      SMO sMO0 = new SMO();
      sMO0.setNumFolds(68);
      Evaluation evaluation1 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      testInstances0.setNumRelationalNumeric(13);
      evaluation0.equals(databaseLoader0);
      evaluation0.KBInformation();
      double double2 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double2, 0.01);
      
      evaluation1.SFPriorEntropy();
      double double3 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Filter filter0 = filteredClassifier0.getFilter();
      Capabilities capabilities0 = filter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (-2666.839382425697);
      doubleArray0[2] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance(0, doubleArray0);
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      SMO sMO0 = new SMO();
      sMO0.setNumFolds(2);
      Evaluation evaluation1 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      testInstances0.setNumRelationalNumeric(1);
      evaluation1.equals((Object) null);
      try { 
        CostMatrix.parseMatlab(".arff");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      KStar kStar0 = new KStar();
      String string0 = Evaluation.makeOptionString(kStar0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "p=3BhNc<";
      stringArray0[1] = "p=3BhNc<";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      try { 
        Evaluation.evaluateModel((Classifier) votedPerceptron0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.VotedPerceptron:
         // 
         // -I <int>
         // \tThe number of iterations to be performed.
         // \t(default 1)
         // -E <double>
         // \tThe exponent for the polynomial kernel.
         // \t(default 1)
         // -S <int>
         // \tThe seed for the random number generation.
         // \t(default 1)
         // -M <int>
         // \tThe maximum number of alterations allowed.
         // \t(default 10000)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.519502743849223
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      String string0 = "Mve>VuTv\"=[";
      databaseLoader0.setSource("Mve>VuTv\"=[", " ", "costMatrixTipText");
      databaseLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation1.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.11723968099341
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Filter filter0 = filteredClassifier0.getFilter();
      Capabilities capabilities0 = filter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      ZeroR zeroR0 = new ZeroR();
      JRip jRip0 = new JRip();
      evaluation0.weightedAreaUnderROC();
      Stacking stacking0 = new Stacking();
      instances0.getRevision();
      stacking0.getMetaClassifier();
      MockRandom mockRandom0 = new MockRandom();
      FilteredClassifier filteredClassifier1 = new FilteredClassifier();
      filteredClassifier0.toString();
      evaluation0.toSummaryString("+^P(L lJ", true);
      evaluation0.toSummaryString(false);
      evaluation0.makeDistribution(1.0);
      evaluation0.relativeAbsoluteError();
      MultiScheme multiScheme0 = new MultiScheme();
      Vote vote0 = new Vote();
      try { 
        Evaluation.evaluateModel("+^P(L lJ", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name +^P(L lJ.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.8372942967296564
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      Environment environment0 = new Environment();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setEnvironment(environment0);
      testInstances0.setClassType(99);
      Environment environment1 = Environment.getSystemWide();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.setEnvironment(environment1);
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      SMO sMO0 = new SMO();
      sMO0.setNumFolds((-1));
      Evaluation evaluation1 = new Evaluation(instances1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      boolean boolean0 = evaluation0.equals(evaluation1);
      assertTrue(boolean0);
      
      evaluation1.KBInformation();
      double double0 = evaluation1.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      
      double double1 = evaluation1.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      evaluation1.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.9428040692464186
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      instances1.remove((Object) instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.125, doubleArray0);
      instances1.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(821);
      double double0 = evaluation0.m_SumSqrClass;
      Stacking stacking0 = new Stacking();
      Stacking stacking1 = new Stacking();
      Stacking stacking2 = new Stacking();
      stacking2.getMetaClassifier();
      MockRandom mockRandom0 = new MockRandom(684L);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance1);
      evaluation0.kappa();
      try { 
        evaluation0.evaluateModelOnce(0.125, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.0736556314531835
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Filter filter0 = filteredClassifier0.getFilter();
      Capabilities capabilities0 = filter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(filteredClassifier0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation1.avgCost();
      double double1 = evaluation0.numTruePositives(2);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, " ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Filter filter0 = filteredClassifier0.getFilter();
      filter0.getCapabilities();
      CostMatrix costMatrix0 = new CostMatrix(93);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "Quote parse error.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.744020356817314
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-29);
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      MockRandom mockRandom0 = new MockRandom(657L);
      mockRandom0.nextInt();
      MockRandom mockRandom1 = new MockRandom(1L);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.SFMeanEntropyGain();
      double double2 = evaluation1.avgCost();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Filter filter0 = filteredClassifier0.getFilter();
      Capabilities capabilities0 = filter0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setHandler(filteredClassifier0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Stacking stacking1 = new Stacking();
      stacking1.getMetaClassifier();
      MockRandom mockRandom0 = new MockRandom(1406L);
      filteredClassifier0.listOptions();
      mockRandom0.nextInt();
      MockRandom mockRandom1 = new MockRandom(136L);
      try { 
        evaluation0.crossValidateModel((Classifier) filteredClassifier0, instances0, (-2), (Random) mockRandom1, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Filter filter0 = filteredClassifier0.getFilter();
      Capabilities capabilities0 = filter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      testInstances0.generate();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j09Sq9@n0\"6O");
      Instance instance0 = null;
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, (Instance) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.3162657043705326
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(13);
      BallNode ballNode0 = new BallNode((-2), (-2), (-1), sparseInstance0, 623.4300873);
      Instance instance0 = BallNode.calcPivot(ballNode0, ballNode0, instances0);
      instances0.add(instance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      assertEquals("The level of Gaussian Noise (added to the diagonal of the Covariance Matrix), after the target has been normalized/standardized/left unchanged).", gaussianProcesses0.noiseTipText());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Utils.SMALL = (double) (-1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Stacking stacking0 = new Stacking();
      ZeroR zeroR0 = (ZeroR)stacking0.getMetaClassifier();
      stacking0.getMetaClassifier();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      stacking0.getMetaClassifier();
      zeroR0.setOptions(testInstances0.DEFAULT_WORDS);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      DenseInstance denseInstance0 = new DenseInstance(0.0, (double[]) null);
      JRip jRip0 = new JRip();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Stacking stacking1 = new Stacking();
      stacking0.getMetaClassifier();
      MockRandom mockRandom0 = new MockRandom(10);
      mockRandom0.nextInt();
      Instances instances1 = instances0.resample(mockRandom0);
      Object object0 = new Object();
      try { 
        evaluation0.crossValidateModel((Classifier) zeroR0, instances1, 498, (Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.6813455773899344
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.KBRelativeInformation();
      evaluation0.weightedMatthewsCorrelation();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.areaUnderPRC((-1461032992));
      Vector<String> vector0 = new Vector<String>();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, (-1461032992), 2268.533);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.695600427808076
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 0;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Instances instances2 = testInstances0.generate();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      capabilities0.getOtherCapabilities();
      Instances instances3 = new Instances(instances2);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-429.8);
      evaluation0.updateMargins(doubleArray0, 0, 2268.533);
      NaiveBayesMultinomialText[] naiveBayesMultinomialTextArray0 = new NaiveBayesMultinomialText[4];
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialTextArray0[0] = naiveBayesMultinomialText0;
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialTextArray0[1] = naiveBayesMultinomialText1;
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialTextArray0[2] = naiveBayesMultinomialText2;
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialTextArray0[3] = naiveBayesMultinomialText3;
      // Undeclared exception!
      try { 
        instances2.toArray(naiveBayesMultinomialTextArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getFilter();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Filter filter0 = filteredClusterer0.getFilter();
      Capabilities capabilities0 = filter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.1543300068035065
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setSeed(19);
      costSensitiveClassifier0.getCostMatrixSource();
      double double2 = evaluation0.KBRelativeInformation();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.toSummaryString();
      double double3 = evaluation0.weightedMatthewsCorrelation();
      testInstances0.setHandler(costSensitiveClassifier0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.areaUnderPRC((-1461032992));
      Vector<String> vector0 = new Vector<String>();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Environment environment0 = new Environment();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.setEnvironment(environment0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-45.0);
      doubleArray0[2] = (-45.0);
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GaussianProcesses gaussianProcesses2 = new GaussianProcesses();
      SMO sMO0 = new SMO();
      sMO0.setNumFolds(2);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      evaluation0.equals(multilayerPerceptron0);
      evaluation0.KBInformation();
      evaluation0.priorEntropy();
      evaluation0.setNumericPriorsFromBuffer();
      double double4 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double4, 0.01);
      
      double double5 = evaluation0.SFMeanPriorEntropy();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.1642740084242096
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      Utils.SMALL = 0.0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      stacking0.getMetaClassifier();
      ZeroR zeroR0 = new ZeroR();
      zeroR0.setOptions(testInstances0.DEFAULT_WORDS);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.toString();
      evaluation0.toSummaryString("@relation", false);
      evaluation0.toSummaryString(true);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-552.6));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -552
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.2117750600853388
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double2 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NaN, double2, 0.01);
      
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.areaUnderPRC((-1461032992));
      Stack<String> stack0 = new Stack<String>();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Environment environment0 = new Environment();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      AbstractFileLoader.FILE_EXTENSION_COMPRESSED = "      }\n";
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.setUser((String) null);
      databaseLoader1.setEnvironment(environment0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double3 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.falseNegativeRate(17);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double5, double1, 0.01);
      
      textDirectoryLoader0.getDirectory();
      evaluation0.precision(501);
      double double6 = evaluation0.weightedFMeasure();
      double double7 = evaluation0.pctCorrect();
      assertEquals(double7, double6, 0.01);
      
      evaluation0.toSummaryString("      }\n", true);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.507402013706516
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      OneRAttributeEval oneRAttributeEval0 = new OneRAttributeEval();
      Capabilities capabilities0 = oneRAttributeEval0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(oneRAttributeEval0);
      testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toClassDetailsString();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      Stacking stacking0 = new Stacking();
      Stacking stacking1 = new Stacking();
      stacking1.setNumExecutionSlots(2294);
      stacking1.getMetaClassifier();
      MockRandom mockRandom0 = new MockRandom((-1));
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[7] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      binarySparseInstance1.toString();
      binarySparseInstance3.setValueSparse(122, 1.1000000014901161);
      binarySparseInstance1.setValue(0, 0.0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      // Undeclared exception!
      try { 
        binarySparseInstance5.equalHeadersMsg(binarySparseInstance3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Filter filter0 = filteredClassifier0.getFilter();
      Capabilities capabilities0 = filter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(filteredClassifier0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      evaluation0.setPriors(instances1);
      Environment environment0 = Environment.getSystemWide();
      databaseLoader0.setEnvironment(environment0);
      assertEquals("Encode data as sparse instances.", databaseLoader0.sparseDataTipText());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "w";
      int int0 = 22;
      try { 
        Evaluation.handleCostOption("w", 22);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      testInstances0.getData();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      testInstances0.getRelationalClassFormat();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "igauss");
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
