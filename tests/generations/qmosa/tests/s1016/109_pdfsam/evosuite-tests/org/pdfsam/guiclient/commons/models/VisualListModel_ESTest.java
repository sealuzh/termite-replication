/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 10:17:13 GMT 2019
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Scrollbar;
import java.awt.dnd.DropTarget;
import java.awt.event.MouseListener;
import java.awt.geom.AffineTransform;
import java.awt.image.renderable.ParameterBlock;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SyncFailedException;
import java.text.Format;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import javax.media.jai.CollectionOp;
import javax.media.jai.LookupTableJAI;
import javax.media.jai.NullCRIF;
import javax.media.jai.OperationRegistry;
import javax.media.jai.PlanarImage;
import javax.media.jai.SnapshotImage;
import javax.media.jai.operator.FPXDescriptor;
import javax.media.jai.operator.IIPResolutionDescriptor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.JApplet;
import javax.swing.JComboBox;
import javax.swing.JEditorPane;
import javax.swing.JLayeredPane;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.KeyStroke;
import javax.swing.border.SoftBevelBorder;
import javax.swing.event.ListDataListener;
import javax.swing.plaf.basic.BasicCheckBoxUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      double[][] doubleArray0 = new double[13][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.push((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[2];
      visualListModel0.removeElements(intArray0, true);
      Boolean boolean0 = new Boolean(true);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      vector0.iterator();
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      int int0 = 1;
      visualListModel0.moveUpIndex(1);
      visualListModel0.addElementAt((VisualPageListItem) null, 1);
      int int1 = 37;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int[] intArray0 = new int[1];
      intArray0[0] = 23;
      try { 
        visualListModel0.moveUpIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 22
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      UnaryOperator.identity();
      UnaryOperator<MockFileInputStream> unaryOperator0 = UnaryOperator.identity();
      Function<Object, MockFileInputStream> function0 = (Function<Object, MockFileInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, MockFileInputStream> function1 = unaryOperator0.compose((Function<? super Object, ? extends MockFileInputStream>) function0);
      Function<Object, Object> function2 = Function.identity();
      function2.compose((Function<? super KeyStroke, ?>) function1);
      visualListModel0.addElement((VisualPageListItem) null);
      function2.compose((Function<? super DefaultTableModel, ?>) function1);
      visualListModel0.data = null;
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      function2.andThen((Function<? super Object, ? extends Integer>) function3);
      function1.compose((Function<? super Integer, ?>) function2);
      Function<Object, Object> function4 = function1.andThen((Function<? super MockFileInputStream, ?>) function2);
      Function.identity();
      function1.compose((Function<? super Format.Field, ?>) function4);
      function1.compose((Function<? super Integer, ?>) function1);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super MockFileInputStream, ? extends Integer>) function5);
      unaryOperator0.compose((Function<? super JSpinner.DateEditor, ? extends MockFileInputStream>) function1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Boolean boolean0 = new Boolean("(czJ8yJL,");
      visualListModel0.getSize();
      // Undeclared exception!
      try { 
        visualListModel0.clearData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6036051515160747
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      UnaryOperator<MockFileInputStream> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<MockFileInputStream> unaryOperator1 = UnaryOperator.identity();
      Function<Object, MockFileInputStream> function0 = (Function<Object, MockFileInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, MockFileInputStream> function1 = unaryOperator1.compose((Function<? super Object, ? extends MockFileInputStream>) function0);
      Function<Object, MockFileInputStream> function2 = unaryOperator0.compose((Function<? super Object, ? extends MockFileInputStream>) function1);
      Function<Object, Object> function3 = Function.identity();
      function3.compose((Function<? super KeyStroke, ?>) function1);
      visualListModel0.addElement((VisualPageListItem) null);
      function3.compose((Function<? super DefaultTableModel, ?>) function1);
      Function.identity();
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, MockFileInputStream> function5 = function1.andThen((Function<? super MockFileInputStream, ? extends MockFileInputStream>) unaryOperator1);
      function2.compose((Function<? super RenderingHints.Key, ?>) function5);
      Function<Object, Integer> function6 = function3.andThen((Function<? super Object, ? extends Integer>) function4);
      function1.compose((Function<? super Integer, ?>) function3);
      function2.andThen((Function<? super MockFileInputStream, ?>) function1);
      Function.identity();
      Function<Object, MockFileInputStream> function7 = unaryOperator0.compose((Function<? super Object, ? extends MockFileInputStream>) function1);
      function7.compose((Function<? super Format.Field, ?>) function6);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.compose((Function<? super Integer, ?>) function8);
      function1.andThen((Function<? super MockFileInputStream, ? extends Integer>) function6);
      Function<Object, MockFileInputStream> function9 = unaryOperator1.compose((Function<? super Object, ? extends MockFileInputStream>) function7);
      unaryOperator1.compose((Function<? super JSpinner.DateEditor, ? extends MockFileInputStream>) function9);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Boolean boolean0 = new Boolean("Unknown periodicity type.");
      visualListModel0.removeElements(0, 0, false);
      Integer.getInteger("_Z~LyE-`Tmdi{LT(oo6k", (-1));
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      vector0.iterator();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
      int[] intArray0 = new int[2];
      visualListModel0.reverseElements(intArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      visualListModel0.moveUpIndexes(intArray0);
      MockDate mockDate0 = new MockDate();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("", vetoableChangeListener0);
      JSpinner jSpinner0 = new JSpinner();
      jSpinner0.resetKeyboardActions();
      JSpinner.DateEditor jSpinner_DateEditor0 = null;
      try {
        jSpinner_DateEditor0 = new JSpinner.DateEditor(jSpinner0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // model not a SpinnerDateModel
         //
         verifyException("javax.swing.JSpinner$DateEditor", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.addElement((VisualPageListItem) null);
      boolean boolean0 = false;
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.addElement((VisualPageListItem) null);
      boolean boolean0 = false;
      int[] intArray0 = new int[1];
      intArray0[0] = (-245);
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -245
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      UnaryOperator<MockFileInputStream> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<MockFileInputStream> unaryOperator1 = UnaryOperator.identity();
      Function<Object, MockFileInputStream> function0 = (Function<Object, MockFileInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, MockFileInputStream> function1 = unaryOperator1.compose((Function<? super Object, ? extends MockFileInputStream>) function0);
      Function<Object, MockFileInputStream> function2 = unaryOperator0.compose((Function<? super Object, ? extends MockFileInputStream>) function1);
      Function<Object, Object> function3 = Function.identity();
      function3.compose((Function<? super KeyStroke, ?>) function1);
      function3.compose((Function<? super DefaultTableModel, ?>) function1);
      Function.identity();
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, MockFileInputStream> function5 = function1.andThen((Function<? super MockFileInputStream, ? extends MockFileInputStream>) unaryOperator1);
      function2.compose((Function<? super RenderingHints.Key, ?>) function5);
      Function<Object, Integer> function6 = function3.andThen((Function<? super Object, ? extends Integer>) function4);
      function1.compose((Function<? super Integer, ?>) function3);
      function2.andThen((Function<? super MockFileInputStream, ?>) function1);
      Function.identity();
      Function<Object, MockFileInputStream> function7 = unaryOperator0.compose((Function<? super Object, ? extends MockFileInputStream>) function1);
      function7.compose((Function<? super Format.Field, ?>) function6);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.compose((Function<? super DefaultTableModel, ?>) function7);
      function1.compose((Function<? super Integer, ?>) function8);
      function1.andThen((Function<? super MockFileInputStream, ? extends Integer>) function6);
      Function<Object, MockFileInputStream> function9 = unaryOperator1.compose((Function<? super Object, ? extends MockFileInputStream>) function7);
      unaryOperator1.compose((Function<? super JSpinner.DateEditor, ? extends MockFileInputStream>) function9);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Boolean boolean0 = new Boolean("Unknown periodicity type.");
      visualListModel0.removeElements(0, 0, false);
      visualListModel0.getSize();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.clearData();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel1.setData(vector0);
      assertEquals(1, visualListModel0.getSize());
      assertEquals(1, visualListModel1.getSize());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(3043L);
      System.setCurrentTimeMillis(3043L);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[0] = (-216);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      intArray0[1] = 0;
      OperationRegistry operationRegistry0 = OperationRegistry.getThreadSafeOperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      visualListModel0.getElementAt(2036);
      RenderingHints renderingHints0 = new RenderingHints(sunHints_LCDContrastKey0, 0);
      CollectionOp collectionOp0 = new CollectionOp(operationRegistry0, "", parameterBlock0, renderingHints0, false);
      // Undeclared exception!
      try { 
        visualListModel0.appendAllElements(collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = (-1479L);
      System.setCurrentTimeMillis((-1479L));
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      visualListModel0.data = null;
      int int0 = 0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xmohNoL0^hW;1SlL");
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndex(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.115418922713837
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.getListDataListeners();
      int[] intArray1 = new int[2];
      intArray1[0] = 4;
      intArray1[1] = 12;
      visualListModel1.rotateAnticlockwiseElements(intArray1);
      int int0 = 0;
      int[] intArray2 = new int[1];
      intArray2[0] = 12;
      visualListModel1.rotateClockwiseElements(intArray2);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.reverseElements(intArray2);
      System.setCurrentTimeMillis(12);
      try { 
        visualListModel0.rotateClockwiseElements(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 12
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.MODAL_LAYER;
      integerArray0[2] = integer2;
      Integer integer3 = JLayeredPane.DEFAULT_LAYER;
      integerArray0[3] = integer3;
      Integer integer4 = JLayeredPane.MODAL_LAYER;
      integerArray0[4] = integerArray0[0];
      Integer integer5 = JLayeredPane.DEFAULT_LAYER;
      integerArray0[5] = integer5;
      Integer integer6 = IIPResolutionDescriptor.MAX_RESOLUTION;
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[5]);
      Integer.compareUnsigned((int) integerArray0[1], (-4043));
      Integer integer8 = JLayeredPane.MODAL_LAYER;
      visualListModel0.data = null;
      Integer.getInteger("sp|{*#%(A?jp", 313);
      Integer.toUnsignedString(18);
      Integer.compareUnsigned((-1), (int) integerArray0[2]);
      integerArray0[6] = integer8;
      DefaultComboBoxModel<Integer> defaultComboBoxModel0 = new DefaultComboBoxModel<Integer>(integerArray0);
      visualListModel0.getElements();
      System.setCurrentTimeMillis((long) integerArray0[3]);
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2653188729187956
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stack0.push((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[1];
      visualListModel0.removeElements(intArray0, true);
      Boolean boolean0 = new Boolean(true);
      JComboBox<JSpinner.DateEditor> jComboBox0 = new JComboBox<JSpinner.DateEditor>();
      String string0 = "";
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      stack0.addAll((Collection<? extends VisualPageListItem>) vector0);
      // Undeclared exception!
      try { 
        visualListModel0.appendAllElements(stack0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlanarImage planarImage0 = null;
      VisualListModel visualListModel0 = new VisualListModel();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      CollectionOp collectionOp0 = new CollectionOp("org.pdfsam.guiclient.commons.models.VisualListModel", parameterBlock0, (RenderingHints) null);
      // Undeclared exception!
      try { 
        visualListModel0.prependAllElements(collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"org.pdfsam.guiclient.commons.models.VisualListModel\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3056511711831456
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      intArray0[4] = 22;
      visualListModel0.moveDownIndexes(intArray0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.removeAllElements();
      int[] intArray1 = new int[9];
      stack0.add((VisualPageListItem) null);
      intArray1[1] = 9999;
      stack0.trimToSize();
      stack0.add((VisualPageListItem) null);
      intArray1[6] = 9999;
      visualListModel0.rotateClockwiseElements(intArray1);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      stack0.stream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray2 = new int[20];
      visualListModel0.reverseElements(intArray1);
      intArray2[1] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray2);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      int[] intArray3 = new int[2];
      Vector<JSpinner.DateEditor> vector0 = new Vector<JSpinner.DateEditor>();
      NullCRIF.getSourcelessImage();
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.moveDownIndexes(intArray3);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Vector<JSpinner.DateEditor> vector1 = new Vector<JSpinner.DateEditor>();
      JComboBox<JSpinner.DateEditor> jComboBox0 = new JComboBox<JSpinner.DateEditor>(vector0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.505443429095587
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      visualListModel0.moveDownIndexes(intArray0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      stack0.removeAllElements();
      int[] intArray1 = new int[9];
      stack0.add((VisualPageListItem) null);
      intArray1[1] = 9999;
      stack0.trimToSize();
      stack0.add((VisualPageListItem) null);
      intArray1[6] = 9999;
      visualListModel0.rotateClockwiseElements(intArray1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      stack0.stream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int[] intArray2 = new int[20];
      visualListModel0.reverseElements(intArray1);
      intArray2[1] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray2);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      int[] intArray3 = new int[2];
      Stack<JSpinner.DateEditor> stack2 = new Stack<JSpinner.DateEditor>();
      NullCRIF.getSourcelessImage();
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.moveDownIndexes(intArray3);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      UnaryOperator.identity();
      JComboBox<JSpinner.DateEditor> jComboBox0 = new JComboBox<JSpinner.DateEditor>(stack2);
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6432937573580657
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      vector0.iterator();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy(":'LW/a&9Dh3TF", (VetoableChangeListener) null);
      JComboBox<JSpinner.DateEditor> jComboBox0 = new JComboBox<JSpinner.DateEditor>();
      jComboBox0.removeVetoableChangeListener((VetoableChangeListener) null);
      visualListModel0.moveUpIndexes(intArray0);
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DateEditor jSpinner_DateEditor0 = null;
      try {
        jSpinner_DateEditor0 = new JSpinner.DateEditor(jSpinner0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // model not a SpinnerDateModel
         //
         verifyException("javax.swing.JSpinner$DateEditor", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt(1615, (VisualPageListItem) null);
      double[][] doubleArray0 = new double[13][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      LookupTableJAI lookupTableJAI0 = new LookupTableJAI(doubleArray0, 1615);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.push((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1615;
      intArray0[1] = 1615;
      try { 
        visualListModel0.removeElements(intArray0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1616
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      vector0.iterator();
      // Undeclared exception!
      try { 
        visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.439281443799053
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      visualListModel0.moveDownIndexes(intArray0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      int[] intArray1 = new int[9];
      stack0.add((VisualPageListItem) null);
      int int0 = 9999;
      intArray1[1] = 9999;
      stack0.trimToSize();
      stack0.add((VisualPageListItem) null);
      intArray1[6] = 9999;
      visualListModel0.rotateClockwiseElements(intArray1);
      boolean boolean0 = new Boolean(true);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      stack0.stream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int[] intArray2 = new int[20];
      visualListModel0.reverseElements(intArray1);
      intArray2[1] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray2);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      int[] intArray3 = new int[2];
      Stack<JSpinner.DateEditor> stack2 = new Stack<JSpinner.DateEditor>();
      NullCRIF.getSourcelessImage();
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stack0.add((VisualPageListItem) null);
      stack0.push((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[1];
      visualListModel0.removeElements(intArray0, true);
      Boolean boolean0 = new Boolean(true);
      JComboBox<JSpinner.DateEditor> jComboBox0 = new JComboBox<JSpinner.DateEditor>();
      JSpinner.DateEditor[] jSpinner_DateEditorArray0 = new JSpinner.DateEditor[5];
      JSpinner jSpinner0 = new JSpinner();
      visualListModel0.elementChanged((VisualPageListItem) null);
      JSpinner.DateEditor jSpinner_DateEditor0 = null;
      try {
        jSpinner_DateEditor0 = new JSpinner.DateEditor(jSpinner0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // model not a SpinnerDateModel
         //
         verifyException("javax.swing.JSpinner$DateEditor", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      intArray0[0] = 3455;
      try { 
        visualListModel0.removeElements(intArray0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3456
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.addElement((VisualPageListItem) null);
      boolean boolean0 = true;
      int[] intArray0 = new int[1];
      visualListModel0.removeElements(intArray0, true);
      Boolean boolean1 = Boolean.FALSE;
      JComboBox<JSpinner.DateEditor> jComboBox0 = new JComboBox<JSpinner.DateEditor>();
      VetoableChangeListener vetoableChangeListener0 = null;
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("_", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy3 = new VetoableChangeListenerProxy("", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy4 = new VetoableChangeListenerProxy("", vetoableChangeListenerProxy3);
      String string0 = "";
      VetoableChangeListenerProxy vetoableChangeListenerProxy5 = new VetoableChangeListenerProxy("", vetoableChangeListenerProxy4);
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.285149829679032
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      visualListModel0.moveDownIndexes(intArray0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      int[] intArray1 = new int[7];
      stack0.add((VisualPageListItem) null);
      intArray1[1] = 9966;
      stack0.trimToSize();
      UnaryOperator<VisualPageListItem> unaryOperator0 = UnaryOperator.identity();
      stack0.replaceAll(unaryOperator0);
      stack0.add((VisualPageListItem) null);
      intArray1[6] = 9966;
      visualListModel0.rotateClockwiseElements(intArray1);
      stack0.listIterator();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      stack0.stream();
      visualListModel0.reverseElements(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.442377419031251
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(90);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.removeAllElements();
      int[] intArray0 = new int[9];
      intArray0[0] = 90;
      stack0.add((VisualPageListItem) null);
      intArray0[1] = 9999;
      intArray0[2] = 9999;
      intArray0[3] = 90;
      intArray0[4] = 90;
      intArray0[5] = 90;
      intArray0[6] = 9999;
      intArray0[8] = 90;
      visualListModel0.rotateClockwiseElements(intArray0);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      stack0.stream();
      stack0.add((VisualPageListItem) null);
      int[] intArray1 = new int[20];
      visualListModel0.reverseElements(intArray0);
      intArray1[1] = 90;
      intArray1[4] = 90;
      intArray1[3] = 90;
      intArray1[7] = 90;
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      int[] intArray2 = new int[2];
      intArray2[0] = 4;
      intArray2[1] = 1676;
      try { 
        visualListModel0.undeleteElements(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 4
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      Integer integer1 = FPXDescriptor.MAX_RESOLUTION;
      Integer[] integerArray0 = new Integer[6];
      Integer.min((byte)28, 102);
      Integer integer2 = FPXDescriptor.MAX_RESOLUTION;
      integerArray0[0] = integer2;
      Integer.compare((-1375), (int) integerArray0[0]);
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer1;
      DefaultComboBoxModel<Integer> defaultComboBoxModel0 = new DefaultComboBoxModel<Integer>(integerArray0);
      defaultComboBoxModel0.getIndexOf("z.D1S2");
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(defaultComboBoxModel0);
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Vector<Object> vector0 = parameterBlock0.getParameters();
      vector0.add((Object) integerArray0[4]);
      JComboBox<Object> jComboBox1 = new JComboBox<Object>(vector0);
      Integer integer3 = IIPResolutionDescriptor.MAX_RESOLUTION;
      Integer.getInteger("z.D1S2", integer3);
      Integer.remainderUnsigned((int) integerArray0[5], (int) integerArray0[3]);
      visualListModel0.addListDataListener((ListDataListener) null);
      Integer.toUnsignedLong((int) integerArray0[5]);
      // Undeclared exception!
      try { 
        visualListModel0.moveUpIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0011929089785596
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Stack stack1 = new Stack<Integer>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.getSize();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[23];
      visualPageListItemArray0[0] = null;
      stack0.add(visualPageListItemArray0[0]);
      visualPageListItemArray0[17] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[7] = null;
      visualListModel0.addAllElements(1, (Collection<VisualPageListItem>) stack0);
      visualPageListItemArray0[18] = null;
      visualListModel0.setData(visualPageListItemArray0);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      vector0.addElement((VisualPageListItem) null);
      vector0.iterator();
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      visualListModel0.moveUpIndex(1);
      visualListModel0.addElementAt((VisualPageListItem) null, 1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      visualListModel0.removeElementAt(1, true);
      try { 
        pipedOutputStream1.write(37);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8564909139241834
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.iterator();
      vector0.add((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      int[] intArray1 = new int[1];
      intArray1[0] = (-2256);
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2256
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6753760674923666
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      vector0.add((VisualPageListItem) null);
      vector0.iterator();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      JComboBox<JSpinner.DateEditor> jComboBox0 = new JComboBox<JSpinner.DateEditor>();
      jComboBox0.removeVetoableChangeListener((VetoableChangeListener) null);
      visualListModel0.moveUpIndexes(intArray0);
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DateEditor jSpinner_DateEditor0 = null;
      try {
        jSpinner_DateEditor0 = new JSpinner.DateEditor(jSpinner0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // model not a SpinnerDateModel
         //
         verifyException("javax.swing.JSpinner$DateEditor", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      integerArray0[0] = integer0;
      Integer.toUnsignedLong(35);
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.MODAL_LAYER;
      integerArray0[2] = integer2;
      Integer integer3 = JLayeredPane.DEFAULT_LAYER;
      Integer.sum(1, 2);
      integerArray0[3] = integer3;
      Integer integer4 = JLayeredPane.MODAL_LAYER;
      integerArray0[4] = integerArray0[0];
      integerArray0[5] = integerArray0[0];
      Integer integer5 = IIPResolutionDescriptor.MAX_RESOLUTION;
      integerArray0[6] = integer5;
      Integer integer6 = new Integer((int) integerArray0[5]);
      Integer.compareUnsigned((int) integerArray0[1], (-4043));
      Integer integer7 = JLayeredPane.MODAL_LAYER;
      Integer.getInteger("sp|{*#%(A?jp", 313);
      Integer.toUnsignedString(18);
      Integer.compareUnsigned((-1), (int) integerArray0[2]);
      integerArray0[6] = integer7;
      DefaultComboBoxModel<Integer> defaultComboBoxModel0 = new DefaultComboBoxModel<Integer>(integerArray0);
      visualListModel0.getElements();
      System.setCurrentTimeMillis((long) integerArray0[3]);
      visualListModel0.getElementAt(0);
      System.setCurrentTimeMillis((long) integerArray0[2]);
      List<VisualPageListItem> list0 = visualListModel0.getValidElements();
      assertNull(list0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.076104579100767
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[7];
      int int0 = 240;
      intArray0[1] = 240;
      intArray0[2] = 828;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, 3);
      visualListModel0.getListDataListeners();
      visualListModel0.moveDownIndex(1);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.moveUpIndex(1);
      visualListModel0.addElementAt((VisualPageListItem) null, 1);
      int int0 = 37;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      try { 
        pipedOutputStream1.write(37);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7962284387340903
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      vector0.iterator();
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      MockDate mockDate0 = new MockDate();
      String string0 = "";
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("", vetoableChangeListener0);
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DateEditor jSpinner_DateEditor0 = null;
      try {
        jSpinner_DateEditor0 = new JSpinner.DateEditor(jSpinner0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // model not a SpinnerDateModel
         //
         verifyException("javax.swing.JSpinner$DateEditor", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7154779193508705
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[20];
      intArray0[0] = 979;
      intArray0[1] = (-4641);
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.clearData();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel1.addElementAt((VisualPageListItem) null, (-4641));
      visualListModel1.getListDataListeners();
      visualListModel1.removeElements(1, (-1680), true);
      visualListModel0.moveDownIndex(0);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      visualListModel0.setData((Vector<VisualPageListItem>) stack1);
      visualListModel1.addAllElements((Collection<VisualPageListItem>) stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.equals((Object)stack1));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      stack0.remove((Object) sunHints_Key0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      visualListModel0.rotateClockwiseElements(intArray0);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      stack0.stream();
      stack0.add((VisualPageListItem) null);
      try { 
        visualListModel0.reverseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      UnaryOperator<VisualPageListItem> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply((VisualPageListItem) null);
      Consumer<VisualPageListItem> consumer0 = (Consumer<VisualPageListItem>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Function<VisualPageListItem, Locale.Category> function0 = (Function<VisualPageListItem, Locale.Category>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super VisualPageListItem, ?>) function0);
      stack0.forEach(consumer0);
      stack0.replaceAll(unaryOperator0);
      boolean boolean0 = stack0.add((VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualListModel0.setData(visualPageListItemArray0);
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.502347453863389
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[9];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy(":'LW/a&9Dh3TF", (VetoableChangeListener) null);
      JComboBox<JSpinner.DateEditor> jComboBox0 = new JComboBox<JSpinner.DateEditor>();
      jComboBox0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      visualListModel0.getElements();
      visualListModel0.moveUpIndexes(intArray0);
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DateEditor jSpinner_DateEditor0 = null;
      try {
        jSpinner_DateEditor0 = new JSpinner.DateEditor(jSpinner0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // model not a SpinnerDateModel
         //
         verifyException("javax.swing.JSpinner$DateEditor", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      int[] intArray0 = new int[7];
      intArray0[0] = 18;
      intArray0[1] = 18;
      intArray0[2] = 18;
      intArray0[3] = 18;
      intArray0[4] = 18;
      intArray0[5] = 18;
      intArray0[6] = 18;
      visualListModel0.reverseElements(intArray0);
      int[] intArray1 = new int[3];
      intArray1[0] = 18;
      intArray1[1] = 18;
      intArray1[2] = 18;
      visualListModel0.rotateClockwiseElements(intArray1);
      System.setCurrentTimeMillis(0L);
      PipedInputStream pipedInputStream0 = new PipedInputStream(18);
      pipedInputStream0.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream(18);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream1);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      vector0.iterator();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UnaryOperator.identity();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      UnaryOperator<MockFileInputStream> unaryOperator0 = UnaryOperator.identity();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Function<Object, MockFileInputStream> function0 = (Function<Object, MockFileInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, MockFileInputStream> function1 = unaryOperator0.compose((Function<? super Object, ? extends MockFileInputStream>) function0);
      Function<Object, RenderingHints.Key> function2 = (Function<Object, RenderingHints.Key>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, MockFileInputStream> function3 = function1.compose((Function<? super Object, ?>) function2);
      Function.identity();
      function1.apply(function3);
      function3.compose((Function<? super Integer, ?>) function1);
      UnaryOperator<VisualPageListItem> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super VisualPageListItem, ?>) function1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Vector<VisualPageListItem> vector1 = visualListModel0.data;
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.prependAllElements(vector1);
      assertEquals("[null, null]", vector1.toString());
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex((-1788));
      VisualPageListItem visualPageListItem0 = null;
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        visualListModel0.getListeners((Class) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addAllElements((-1642), (Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements(10, 2, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Integer[] integerArray0 = new Integer[17];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.MODAL_LAYER;
      integerArray0[2] = integerArray0[1];
      Integer integer3 = JLayeredPane.MODAL_LAYER;
      integerArray0[3] = integer3;
      Integer integer4 = JLayeredPane.MODAL_LAYER;
      Integer.toUnsignedString((int) integerArray0[0]);
      integerArray0[4] = integerArray0[3];
      Integer integer5 = JLayeredPane.MODAL_LAYER;
      integerArray0[5] = integer2;
      Integer integer6 = JLayeredPane.DRAG_LAYER;
      integerArray0[6] = integerArray0[4];
      Integer integer7 = new Integer((int) integerArray0[3]);
      Integer integer8 = new Integer((int) integerArray0[1]);
      Integer.min((int) integerArray0[0], (int) integerArray0[1]);
      Integer.toUnsignedLong((int) integerArray0[4]);
      Integer.remainderUnsigned((int) integerArray0[4], (int) integerArray0[4]);
      Integer integer9 = JLayeredPane.DRAG_LAYER;
      Integer.getInteger((String) null, integer8);
      Integer.max((int) integerArray0[6], (int) integerArray0[6]);
      Integer.sum((int) integerArray0[3], (int) integerArray0[4]);
      Integer.toUnsignedString((int) integerArray0[5]);
      Integer integer10 = new Integer((int) integerArray0[5]);
      Integer.compareUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.compareUnsigned((int) integerArray0[1], 400);
      Integer.compare((-1), 928);
      Integer integer11 = JLayeredPane.MODAL_LAYER;
      integerArray0[7] = integer4;
      Integer.getInteger("200", integer8);
      UnaryOperator.identity();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.873029116491111
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy((String) null, (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("('>p.u~+ `{.UR{J|", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy3 = new VetoableChangeListenerProxy("", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy4 = new VetoableChangeListenerProxy("('>p.u~+ `{.UR{J|", vetoableChangeListenerProxy1);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.getSize();
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      UnaryOperator.identity();
      UnaryOperator<VisualPageListItem> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<MockFileInputStream> unaryOperator1 = UnaryOperator.identity();
      Function<Object, MockFileInputStream> function0 = (Function<Object, MockFileInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<InputStream, MockFileInputStream> function1 = (Function<InputStream, MockFileInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<MockFileInputStream, InputStream> function2 = unaryOperator1.andThen((Function<? super MockFileInputStream, ? extends InputStream>) function1);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function3).apply(any());
      UnaryOperator.identity();
      Function<Object, MockFileInputStream> function4 = unaryOperator1.compose((Function<? super Object, ? extends MockFileInputStream>) function0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-43);
      Function<Object, Format.Field> function5 = (Function<Object, Format.Field>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.compose((Function<? super JSpinner.DateEditor, ?>) function5);
      byteArray0[1] = (byte) (-65);
      KeyStroke.getKeyStroke((int) (byte) (-43), (int) (byte) (-65));
      function4.apply(function2);
      Function<Object, MockFileInputStream> function6 = function4.compose((Function<? super Object, ?>) function3);
      Function.identity();
      Function<InputStream, Integer> function7 = (Function<InputStream, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.andThen((Function<? super MockFileInputStream, ? extends Integer>) function7);
      function6.apply((Object) null);
      unaryOperator0.andThen((Function<? super VisualPageListItem, ?>) function6);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UnaryOperator.identity();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      UnaryOperator.identity();
      UnaryOperator<MockFileInputStream> unaryOperator0 = UnaryOperator.identity();
      Function<Object, MockFileInputStream> function0 = (Function<Object, MockFileInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, MockFileInputStream> function1 = unaryOperator0.compose((Function<? super Object, ? extends MockFileInputStream>) function0);
      Function<Object, MockFileInputStream> function2 = unaryOperator0.compose((Function<? super Object, ? extends MockFileInputStream>) function1);
      Function<Object, Object> function3 = Function.identity();
      function3.compose((Function<? super KeyStroke, ?>) function2);
      visualListModel0.addElement((VisualPageListItem) null);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super DefaultTableModel, ?>) function3);
      Function.identity();
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function5 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Integer, MockFileInputStream> function6 = function1.compose((Function<? super Integer, ?>) function3);
      Function<Object, MockFileInputStream> function7 = unaryOperator0.compose((Function<? super Object, ? extends MockFileInputStream>) function2);
      Function<Object, Object> function8 = function7.andThen((Function<? super MockFileInputStream, ?>) function3);
      Function.identity();
      function8.andThen((Function<? super Object, ? extends Integer>) function5);
      unaryOperator1.andThen((Function<? super Object, ?>) function1);
      Function.identity();
      function1.compose((Function<? super Format.Field, ?>) function8);
      function2.compose((Function<? super Integer, ?>) function6);
      function7.andThen((Function<? super MockFileInputStream, ? extends Integer>) function5);
      unaryOperator0.compose((Function<? super JSpinner.DateEditor, ? extends MockFileInputStream>) function1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      visualListModel0.getSize();
      visualListModel0.clearData();
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      stack0.add((VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[0];
      visualListModel0.setData(visualPageListItemArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      pipedInputStream0.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream(1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream1);
      pipedInputStream1.markSupported();
      pipedInputStream0.markSupported();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      try { 
        pipedOutputStream1.write(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Comparator<VisualPageListItem> comparator0 = (Comparator<VisualPageListItem>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>(comparator0);
      visualListModel0.addAllElements((-494), (Collection<VisualPageListItem>) treeSet0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Integer integer1 = FPXDescriptor.MAX_RESOLUTION;
      Integer integer2 = JLayeredPane.MODAL_LAYER;
      Integer.getInteger("");
      Integer integer3 = JLayeredPane.POPUP_LAYER;
      Integer.getInteger("", integer1);
      int int0 = 1838;
      Integer integer4 = new Integer(1838);
      Integer.getInteger("", integer4);
      Color color0 = Color.MAGENTA;
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(1838, color0, color0);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultIcon();
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("", vetoableChangeListenerProxy0);
      String string0 = "";
      VetoableChangeListenerProxy vetoableChangeListenerProxy3 = new VetoableChangeListenerProxy("}Jq", vetoableChangeListenerProxy0);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Integer[] integerArray0 = new Integer[17];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.MODAL_LAYER;
      integerArray0[2] = integer2;
      Integer integer3 = JLayeredPane.MODAL_LAYER;
      integerArray0[3] = integerArray0[0];
      Integer integer4 = JLayeredPane.PALETTE_LAYER;
      Integer.toUnsignedString((int) integerArray0[0]);
      integerArray0[4] = integerArray0[0];
      Integer integer5 = JLayeredPane.MODAL_LAYER;
      integerArray0[5] = integer2;
      Integer integer6 = IIPResolutionDescriptor.MAX_RESOLUTION;
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[3]);
      Integer integer8 = new Integer((int) integerArray0[1]);
      Integer.min((-1436), (int) integerArray0[1]);
      Integer.toUnsignedLong((int) integerArray0[4]);
      Integer.remainderUnsigned((int) integerArray0[4], (int) integerArray0[4]);
      Integer integer9 = JLayeredPane.DRAG_LAYER;
      Integer.getInteger((String) null, integer8);
      Integer.max((int) integerArray0[6], (-2157));
      Integer.sum((-1152), (int) integerArray0[4]);
      Integer.toUnsignedString((int) integerArray0[5]);
      Integer integer10 = new Integer((int) integerArray0[5]);
      Integer.compareUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer integer11 = JLayeredPane.MODAL_LAYER;
      integerArray0[7] = integer11;
      Integer.getInteger("200", integer8);
      Integer.getInteger("_B~LyE-`Tdi{LT(oo6k", (int) integerArray0[2]);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(23, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 23
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.04776041683849
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      UnaryOperator.identity();
      UnaryOperator<MockFileInputStream> unaryOperator0 = UnaryOperator.identity();
      Function<Object, MockFileInputStream> function0 = (Function<Object, MockFileInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, MockFileInputStream> function1 = unaryOperator0.compose((Function<? super Object, ? extends MockFileInputStream>) function0);
      Function<Object, Object> function2 = Function.identity();
      function2.compose((Function<? super KeyStroke, ?>) function1);
      visualListModel0.addElement((VisualPageListItem) null);
      function2.compose((Function<? super DefaultTableModel, ?>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      function2.andThen((Function<? super Object, ? extends Integer>) function3);
      function1.compose((Function<? super Integer, ?>) function2);
      Function<Object, Object> function4 = function1.andThen((Function<? super MockFileInputStream, ?>) function2);
      Function.identity();
      function1.compose((Function<? super Format.Field, ?>) function4);
      function1.compose((Function<? super Integer, ?>) function1);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super MockFileInputStream, ? extends Integer>) function5);
      unaryOperator0.compose((Function<? super JSpinner.DateEditor, ? extends MockFileInputStream>) function1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Boolean boolean0 = new Boolean("(czJ8yJL,");
      visualListModel0.removeElements(0, 0, true);
      visualListModel0.getSize();
      visualListModel0.clearData();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.setData(vector0);
      assertTrue(vector0.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      intArray0[0] = 1;
      intArray0[1] = 0;
      visualListModel0.removeElements(52, 0, true);
      intArray0[2] = 1017;
      intArray0[3] = 90;
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      AffineTransform.getRotateInstance((-1393.08), 0.0);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = null;
      try {
        hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>((-1), 1017);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.removeElements(intArray0, false);
      JPanel jPanel0 = new JPanel();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(93);
      JMenu jMenu0 = new JMenu();
      JMenuBar jMenuBar0 = new JMenuBar();
      // Undeclared exception!
      try { 
        jMenuBar0.getHelpMenu();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // getHelpMenu() not yet implemented.
         //
         verifyException("javax.swing.JMenuBar", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Integer[] integerArray0 = new Integer[17];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.MODAL_LAYER;
      integerArray0[2] = integerArray0[1];
      Integer integer3 = JLayeredPane.MODAL_LAYER;
      integerArray0[3] = integer1;
      Integer integer4 = IIPResolutionDescriptor.MAX_RESOLUTION;
      Integer.toUnsignedString((int) integerArray0[0]);
      integerArray0[4] = integerArray0[0];
      Integer integer5 = JLayeredPane.MODAL_LAYER;
      integerArray0[5] = integer2;
      Integer integer6 = IIPResolutionDescriptor.MAX_RESOLUTION;
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[3]);
      Integer integer8 = new Integer((int) integerArray0[1]);
      Integer.min((int) integerArray0[0], (int) integerArray0[1]);
      Integer.toUnsignedLong((int) integerArray0[4]);
      Integer.remainderUnsigned((int) integerArray0[4], (int) integerArray0[4]);
      Integer integer9 = JLayeredPane.DRAG_LAYER;
      Integer.getInteger((String) null, integer8);
      Integer.max((int) integerArray0[6], (-2157));
      Integer.sum((int) integerArray0[3], (int) integerArray0[4]);
      Integer.toUnsignedString((int) integerArray0[5]);
      Integer integer10 = new Integer((int) integerArray0[5]);
      Integer.compareUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.compareUnsigned(147, 800);
      Integer integer11 = JLayeredPane.MODAL_LAYER;
      integerArray0[7] = integer11;
      Integer.getInteger("200", integer8);
      Integer.getInteger("_B~LyE-`Tdi{LT(oo6k", (int) integerArray0[2]);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(23, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 23
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Integer[] integerArray0 = new Integer[17];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.MODAL_LAYER;
      integerArray0[2] = integer2;
      Integer integer3 = JLayeredPane.PALETTE_LAYER;
      integerArray0[3] = integer3;
      Integer integer4 = JLayeredPane.MODAL_LAYER;
      Integer.toUnsignedString((int) integerArray0[0]);
      integerArray0[4] = integerArray0[0];
      Integer integer5 = JLayeredPane.MODAL_LAYER;
      integerArray0[5] = integerArray0[3];
      Integer integer6 = IIPResolutionDescriptor.MAX_RESOLUTION;
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[3]);
      Integer integer8 = new Integer((int) integerArray0[1]);
      Integer.toUnsignedLong((int) integerArray0[4]);
      Integer.remainderUnsigned(6, (int) integerArray0[4]);
      Integer.getInteger("] is not a subclass of org.apache.log4j.Level");
      Integer.getInteger("", integer8);
      Integer.max((int) integerArray0[6], (-2157));
      Integer.sum((-1152), (int) integerArray0[4]);
      Integer.toUnsignedString((int) integerArray0[5]);
      Integer integer9 = new Integer((int) integerArray0[5]);
      Integer.compareUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer integer10 = JLayeredPane.MODAL_LAYER;
      integerArray0[7] = integer10;
      Integer.getInteger("Category ", (int) integerArray0[2]);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(23, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 23
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(35);
      JScrollPane jScrollPane0 = new JScrollPane();
      jScrollPane0.getHorizontalScrollBar();
      Color color0 = null;
      JEditorPane jEditorPane0 = new JEditorPane();
      jEditorPane0.getMargin();
      jEditorPane0.getMargin();
      int int0 = 2589;
      SoftBevelBorder softBevelBorder1 = new SoftBevelBorder(2589);
      Color color1 = null;
      try {
        color1 = new Color((-1386.571F), 30.0F, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Red Green Blue
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements((-184), (-184), false);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      intArray0[0] = 1;
      intArray0[1] = 0;
      visualListModel0.removeElements(52, 0, true);
      intArray0[2] = 1017;
      intArray0[3] = 53;
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      AffineTransform.getRotateInstance((-1393.08), 0.0);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = null;
      try {
        hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>((-69), 1017);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -69
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.4013116669812944
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.getListDataListeners();
      int[] intArray1 = new int[2];
      int int0 = 4;
      intArray1[0] = 4;
      int int1 = 12;
      intArray1[1] = 12;
      visualListModel1.rotateAnticlockwiseElements(intArray1);
      int int2 = 0;
      int[] intArray2 = new int[1];
      intArray2[0] = 12;
      visualListModel1.rotateClockwiseElements(intArray2);
      visualListModel1.updateElementAt(4, (VisualPageListItem) null);
      VisualListModel visualListModel2 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel2.subList(12, (-2060));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(12) > toIndex(-2060)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.2761809225159486
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      visualListModel0.reverseElements(intArray0);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0);
      visualListModel0.addAllElements(0, collection0);
      int[] intArray1 = new int[0];
      visualListModel0.rotateClockwiseElements(intArray1);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 0;
      visualListModel0.moveUpIndex(4625);
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(integerArray0);
      int int1 = 10;
      DropTarget dropTarget0 = null;
      try {
        dropTarget0 = new DropTarget();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DropTarget", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = new int[1];
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(35);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JScrollPane jScrollPane0 = new JScrollPane();
      jScrollPane0.getHorizontalScrollBar();
      JEditorPane jEditorPane0 = new JEditorPane();
      jEditorPane0.getMargin();
      jEditorPane0.getMargin();
      SoftBevelBorder softBevelBorder1 = new SoftBevelBorder(2589);
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.subList(1, (-1), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1) > toIndex(-1)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Integer[] integerArray0 = new Integer[17];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.MODAL_LAYER;
      integerArray0[2] = integerArray0[1];
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) integerArray0[1];
      intArray0[1] = (int) integerArray0[1];
      visualListModel0.reverseElements(intArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      visualListModel0.moveUpIndexes(intArray0);
      MockDate mockDate0 = new MockDate();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("", vetoableChangeListenerProxy0);
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DateEditor jSpinner_DateEditor0 = null;
      try {
        jSpinner_DateEditor0 = new JSpinner.DateEditor(jSpinner0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // model not a SpinnerDateModel
         //
         verifyException("javax.swing.JSpinner$DateEditor", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(1);
      Color color0 = null;
      try {
        color0 = new Color(1615.3F, 0.0F, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Red
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@=|es@%Z@!");
      System.setCurrentTimeMillis((-1L));
      VisualListModel visualListModel0 = new VisualListModel();
      Object object0 = visualListModel0.getElementAt(4);
      assertNull(object0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, MockFileInputStream> function0 = (Function<Object, MockFileInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      int int0 = 22;
      int int1 = 2174;
      Icon icon0 = null;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) fileDescriptor0;
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      boolean boolean0 = false;
      visualListModel0.removeElements(intArray0, false);
      JPanel jPanel0 = new JPanel();
      int int0 = 93;
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(93);
      JMenu jMenu0 = new JMenu();
      JMenuBar jMenuBar0 = new JMenuBar();
      // Undeclared exception!
      try { 
        jMenuBar0.getHelpMenu();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // getHelpMenu() not yet implemented.
         //
         verifyException("javax.swing.JMenuBar", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.0011929089785596
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.clone();
      stack0.add((VisualPageListItem) null);
      visualListModel0.getSize();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[23];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[17] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[7] = null;
      visualListModel0.addAllElements(1, (Collection<VisualPageListItem>) stack0);
      visualPageListItemArray0[18] = null;
      visualListModel0.setData(visualPageListItemArray0);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.6851287363978404
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      vector0.iterator();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UnaryOperator.identity();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      UnaryOperator<MockFileInputStream> unaryOperator0 = UnaryOperator.identity();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) vector0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Function<Object, MockFileInputStream> function0 = (Function<Object, MockFileInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, MockFileInputStream> function1 = unaryOperator0.compose((Function<? super Object, ? extends MockFileInputStream>) function0);
      UnaryOperator.identity();
      Function<Object, RenderingHints.Key> function2 = (Function<Object, RenderingHints.Key>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, MockFileInputStream> function3 = function1.compose((Function<? super Object, ?>) function2);
      Function.identity();
      function1.apply(function3);
      function3.compose((Function<? super Integer, ?>) function1);
      UnaryOperator<VisualPageListItem> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super VisualPageListItem, ?>) function1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Vector<VisualPageListItem> vector1 = visualListModel0.data;
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.prependAllElements(vector1);
      assertEquals(4, visualListModel0.getSize());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.MODAL_LAYER;
      integerArray0[2] = integer2;
      Integer integer3 = JLayeredPane.DEFAULT_LAYER;
      integerArray0[3] = integer3;
      Integer integer4 = JLayeredPane.MODAL_LAYER;
      integerArray0[4] = integerArray0[0];
      Integer integer5 = JLayeredPane.DEFAULT_LAYER;
      integerArray0[5] = integer5;
      Integer integer6 = IIPResolutionDescriptor.MAX_RESOLUTION;
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[5]);
      Integer.compareUnsigned((int) integerArray0[1], (-4043));
      Integer integer8 = JLayeredPane.MODAL_LAYER;
      integerArray0[7] = integer8;
      System.setCurrentTimeMillis(60000L);
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.addAllElements(4, (Collection<VisualPageListItem>) arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 0;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0, false);
      JPanel jPanel0 = new JPanel(false);
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      JComboBox<Locale.Category> jComboBox0 = new JComboBox<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      vector0.add(locale_Category0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      vector0.add(locale_Category1);
      JComboBox<Locale.Category> jComboBox1 = new JComboBox<Locale.Category>(vector0);
      JPanel jPanel1 = new JPanel();
      JPanel jPanel2 = new JPanel();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Vector<Integer> vector1 = new Vector<Integer>(0, 0);
      JComboBox<Integer> jComboBox2 = new JComboBox<Integer>(vector1);
      jComboBox2.getGraphics();
      jPanel1.update((Graphics) null);
      AWTEventMulticaster.add((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      Scrollbar scrollbar0 = null;
      try {
        scrollbar0 = new Scrollbar(5121);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Integer[] integerArray0 = new Integer[17];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.MODAL_LAYER;
      integerArray0[2] = integerArray0[1];
      Integer integer3 = JLayeredPane.MODAL_LAYER;
      integerArray0[3] = integer3;
      Integer integer4 = JLayeredPane.MODAL_LAYER;
      Integer.toUnsignedString((int) integerArray0[0]);
      integerArray0[4] = integerArray0[3];
      Integer integer5 = JLayeredPane.MODAL_LAYER;
      integerArray0[5] = integer2;
      Integer integer6 = JLayeredPane.DRAG_LAYER;
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[3]);
      Integer integer8 = new Integer((int) integerArray0[1]);
      Integer.min((int) integerArray0[0], (int) integerArray0[1]);
      Integer.toUnsignedLong((int) integerArray0[4]);
      Integer.remainderUnsigned((int) integerArray0[4], (int) integerArray0[4]);
      Integer integer9 = JLayeredPane.DRAG_LAYER;
      Integer.getInteger((String) null, integer8);
      Integer.max((int) integerArray0[6], (int) integerArray0[6]);
      Integer.sum((int) integerArray0[3], (int) integerArray0[4]);
      Integer.toUnsignedString((int) integerArray0[5]);
      Integer integer10 = new Integer((int) integerArray0[5]);
      Integer.compareUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.compareUnsigned((int) integerArray0[1], 400);
      Integer.compare((-1), 928);
      Integer integer11 = JLayeredPane.MODAL_LAYER;
      integerArray0[7] = integer4;
      Integer.getInteger("200", integer8);
      UnaryOperator.identity();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.prependAllElements(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ParameterBlock parameterBlock0 = new ParameterBlock((Vector<Object>) null);
      Object[][] objectArray0 = new Object[2][0];
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) "K!nK|_@&PX4/Rd=-R$";
      objectArray1[1] = (Object) null;
      objectArray1[2] = (Object) parameterBlock0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) "K!nK|_@&PX4/Rd=-R$";
      objectArray2[1] = (Object) null;
      objectArray2[2] = (Object) visualListModel0;
      objectArray2[3] = (Object) visualListModel0;
      objectArray2[4] = (Object) null;
      objectArray2[5] = (Object) null;
      objectArray2[6] = (Object) null;
      objectArray2[7] = (Object) null;
      objectArray0[1] = objectArray2;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      RenderingHints renderingHints0 = new RenderingHints((RenderingHints.Key) null, defaultTableModel0);
      CollectionOp collectionOp0 = new CollectionOp("K!nK|_@&PX4/Rd=-R$", parameterBlock0, renderingHints0);
      // Undeclared exception!
      try { 
        visualListModel0.prependAllElements(collectionOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.renderable.ParameterBlock", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = (-1585);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList((-1585), (-1585), true);
      JPanel jPanel0 = new JPanel(false);
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      JComboBox<Locale.Category> jComboBox0 = new JComboBox<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      vector0.add(locale_Category0);
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      vector0.add(locale_Category1);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      vector0.add(locale_Category2);
      JComboBox<Locale.Category> jComboBox1 = new JComboBox<Locale.Category>(vector0);
      JPanel jPanel1 = new JPanel();
      JPanel jPanel2 = new JPanel();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.add((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      int int1 = 2737;
      Scrollbar scrollbar0 = null;
      try {
        scrollbar0 = new Scrollbar(2737);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndex((-308));
      visualListModel0.moveUpIndex(282);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Integer integer1 = Integer.getInteger("0tc");
      Integer integer2 = JLayeredPane.POPUP_LAYER;
      Integer integer3 = FPXDescriptor.MAX_RESOLUTION;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = null;
      Integer integer4 = JLayeredPane.POPUP_LAYER;
      Integer[] integerArray1 = new Integer[7];
      Integer.min((-308), 1185);
      integerArray1[1] = null;
      Integer.getInteger("].", integer1);
      integerArray1[2] = integer0;
      integerArray1[3] = integer4;
      integerArray1[4] = integer3;
      try { 
        Integer.parseUnsignedInt("", (-2441));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.appendAllElements(vector0);
      SnapshotImage snapshotImage0 = null;
      try {
        snapshotImage0 = new SnapshotImage((PlanarImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.media.jai.ImageLayout", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      int int0 = 93;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        visualListModel0.subList(93, (-1), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(93) > toIndex(-1)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-357);
      Color color0 = Color.black;
      Color color1 = Color.GRAY;
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      Color color2 = Color.green;
      visualListModel0.subList((-357), (-1));
      float[] floatArray0 = new float[1];
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        Color.RGBtoHSB((-357), 15, 15, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(6, 6, true);
      boolean boolean0 = false;
      JPanel jPanel0 = new JPanel(false);
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      JComboBox<Locale.Category> jComboBox0 = new JComboBox<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      vector0.add(locale_Category0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = new Point(6, 6);
      point0.clone();
      JComboBox<Locale.Category> jComboBox1 = new JComboBox<Locale.Category>(vector0);
      gridBagLayout0.location(6, 6);
      JPanel jPanel1 = new JPanel();
      JPanel jPanel2 = new JPanel();
      jPanel1.setMinimumSize((Dimension) null);
      jPanel1.setLocation(0, 6);
      jPanel2.remove((Component) jPanel1);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.undeleteElements(intArray0);
      JMenu jMenu0 = new JMenu();
      JMenuBar jMenuBar0 = new JMenuBar();
      // Undeclared exception!
      try { 
        jMenuBar0.getHelpMenu();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // getHelpMenu() not yet implemented.
         //
         verifyException("javax.swing.JMenuBar", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int int0 = 0;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0, true);
      JPanel jPanel0 = new JPanel(false);
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      JComboBox<Locale.Category> jComboBox0 = new JComboBox<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      vector0.add(locale_Category0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      vector0.add(locale_Category1);
      JComboBox<Locale.Category> jComboBox1 = new JComboBox<Locale.Category>(vector0);
      JPanel jPanel1 = new JPanel();
      JPanel jPanel2 = new JPanel();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.add((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      Scrollbar scrollbar0 = null;
      try {
        scrollbar0 = new Scrollbar(5121);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
