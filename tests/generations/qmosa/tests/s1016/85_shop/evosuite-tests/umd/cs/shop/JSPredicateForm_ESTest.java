/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 12:22:53 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0068967152315558
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "(M J";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(M J");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.insertElementAt("nor", 0);
      SystemInUtil.addInputLine("nor");
      Function.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, String> function1 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Integer integer0 = new Integer((-4070));
      Function.identity();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.2992507293959255
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(FUobVt.4)^So");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      predicate1.negate();
      predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate1.and(predicate0);
      predicate4.negate();
      Predicate<Object> predicate5 = predicate3.or(predicate2);
      Predicate<String> predicate6 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate7 = predicate1.or(predicate4);
      predicate6.negate();
      predicate0.negate();
      Predicate<Object> predicate8 = predicate4.and(predicate2);
      predicate0.negate();
      Predicate<Object> predicate9 = predicate4.and(predicate0);
      Predicate<Object> predicate10 = predicate1.and(predicate0);
      Predicate<Object> predicate11 = predicate10.negate();
      predicate11.test(predicate0);
      predicate10.negate();
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate12 = predicate11.and(predicate8);
      Predicate<Object> predicate13 = predicate2.or(predicate5);
      Predicate<Object> predicate14 = predicate13.negate();
      Predicate<Object> predicate15 = predicate7.negate();
      predicate9.test(predicate1);
      Predicate<Object> predicate16 = predicate4.or(predicate7);
      predicate15.test(predicate3);
      predicate14.test(predicate16);
      predicate12.test(predicate2);
      predicate16.or(predicate4);
      JSTerm jSTerm0 = new JSTerm();
      jSPredicateForm0.insertElementAt(jSTerm0, 1);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8223722295837637
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine((String) null);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.insertElementAt("noP", 0);
      SystemInUtil.addInputLine("noP");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("noP");
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(0L);
      SystemInUtil.addInputLine("noP");
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2514L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.clonePF();
      SystemInUtil.addInputLine((String) null);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0238736061572697
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      SystemInUtil.addInputLine((String) null);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.insertElementAt("noP", 0);
      SystemInUtil.addInputLine("noP");
      System.setCurrentTimeMillis(0);
      String string0 = "";
      SystemInUtil.addInputLine((String) null);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(32);
      SystemInUtil.addInputLine("");
      jSTerm0.standarizerPredicateForm();
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis((-1L));
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.insertElementAt("cl ", 0);
      SystemInUtil.addInputLine("cl ");
      SystemInUtil.addInputLine("cl ");
      SystemInUtil.addInputLine("cl ");
      SystemInUtil.addInputLine("Operator name expected");
      SystemInUtil.addInputLine("cl ");
      SystemInUtil.addInputLine("cl ");
      SystemInUtil.addInputLine("cl ");
      SystemInUtil.addInputLine("vKx%T'1L(`#XT+5)");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(47);
      jSTerm0.insertElementAt("nor", 0);
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Object> function2 = unaryOperator0.compose((Function<? super Object, ?>) function1);
      Function<Object, JSPredicateForm> function3 = (Function<Object, JSPredicateForm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function3);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.andThen((Function<? super Object, ?>) function4);
      unaryOperator0.compose((Function<? super Object, ?>) function1);
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Integer, String> function6 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function7 = function5.andThen((Function<? super Integer, ? extends String>) function6);
      function7.andThen((Function<? super String, ?>) unaryOperator0);
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      function7.compose((Function<? super Object, ?>) function8);
      Function<Integer, String> function9 = function7.compose((Function<? super Integer, ?>) function1);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      function8.compose((Function<? super String, ?>) function2);
      Integer integer0 = new Integer((-4070));
      Integer integer1 = new Integer((-4070));
      function8.andThen((Function<? super Integer, ? extends Integer>) function5);
      function1.andThen((Function<? super Integer, ? extends String>) function9);
      Function<Object, String> function10 = function8.andThen((Function<? super Integer, ? extends String>) function7);
      Function.identity();
      function5.compose((Function<? super Object, ?>) function10);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(47);
      jSTerm0.insertElementAt("nor", 0);
      SystemInUtil.addInputLine("nor");
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Object> function2 = unaryOperator0.compose((Function<? super Object, ?>) function1);
      Function<Object, JSPredicateForm> function3 = (Function<Object, JSPredicateForm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function3);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.andThen((Function<? super Object, ?>) function4);
      unaryOperator0.compose((Function<? super Object, ?>) function1);
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Integer, String> function6 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function7 = function5.andThen((Function<? super Integer, ? extends String>) function6);
      function7.andThen((Function<? super String, ?>) unaryOperator0);
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      function7.compose((Function<? super Object, ?>) function8);
      Function<Integer, String> function9 = function7.compose((Function<? super Integer, ?>) function1);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      function8.compose((Function<? super String, ?>) function2);
      Integer integer0 = new Integer((-4070));
      function1.andThen((Function<? super Integer, ?>) function8);
      Integer integer1 = new Integer((-4070));
      function8.andThen((Function<? super Integer, ? extends Integer>) function5);
      function1.andThen((Function<? super Integer, ? extends String>) function9);
      function8.andThen((Function<? super Integer, ? extends String>) function7);
      Function.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(47);
      JSJshopVars.astherisk = 0;
      jSTerm0.insertElementAt("not", 0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Object> function2 = unaryOperator1.compose((Function<? super Object, ?>) function1);
      Function<Object, String> function3 = function1.compose((Function<? super Object, ?>) function2);
      function1.apply((Object) null);
      function1.andThen((Function<? super String, ?>) unaryOperator0);
      Function<String, String> function4 = function1.compose((Function<? super String, ?>) unaryOperator0);
      Function.identity();
      Function<Object, Object> function5 = unaryOperator1.compose((Function<? super Object, ?>) function1);
      Function<Integer, String> function6 = function3.compose((Function<? super Integer, ?>) unaryOperator1);
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Integer> function8 = Function.identity();
      Function<Object, Integer> function9 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function7);
      function6.andThen((Function<? super String, ?>) function4);
      function5.apply(function9);
      Function<Object, Object> function10 = function5.andThen((Function<? super Object, ?>) function3);
      function9.andThen((Function<? super Integer, ? extends String>) function1);
      function1.andThen((Function<? super String, ?>) function2);
      Function<Object, Integer> function11 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function9);
      Function.identity();
      function3.compose((Function<? super Object, ?>) unaryOperator1);
      function3.compose((Function<? super Integer, ?>) unaryOperator1);
      function3.compose((Function<? super Integer, ?>) function1);
      Object object0 = new Object();
      function3.apply(function10);
      Function<Object, Integer> function12 = function11.andThen((Function<? super Integer, ? extends Integer>) function8);
      function11.andThen((Function<? super Integer, ? extends String>) function6);
      function12.compose((Function<? super Object, ?>) function5);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.astherisk = 0;
      jSTerm0.insertElementAt("not", 0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Object> function2 = unaryOperator1.compose((Function<? super Object, ?>) function1);
      Function<Object, String> function3 = function1.compose((Function<? super Object, ?>) function2);
      function1.apply((Object) null);
      function1.andThen((Function<? super String, ?>) unaryOperator0);
      Function<String, String> function4 = function1.compose((Function<? super String, ?>) unaryOperator0);
      Function<Integer, Integer> function5 = Function.identity();
      Function<Object, Object> function6 = unaryOperator1.compose((Function<? super Object, ?>) function1);
      Function<Integer, String> function7 = function3.compose((Function<? super Integer, ?>) unaryOperator1);
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Function<Object, Integer> function9 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function8);
      function7.andThen((Function<? super String, ?>) function4);
      function6.apply(function9);
      Function<Object, Object> function10 = function6.andThen((Function<? super Object, ?>) function3);
      Function<Object, String> function11 = function9.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, Object> function12 = function3.andThen((Function<? super String, ?>) unaryOperator1);
      Function<Object, Integer> function13 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function9);
      function3.compose((Function<? super Object, ?>) function12);
      Function<Integer, String> function14 = function1.compose((Function<? super Integer, ?>) function5);
      function11.compose((Function<? super Integer, ?>) function10);
      Object object0 = new Object();
      function9.andThen((Function<? super Integer, ? extends Integer>) function5);
      function13.andThen((Function<? super Integer, ? extends String>) function14);
      function9.compose((Function<? super Object, ?>) function12);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      SystemInUtil.addInputLine("not");
      SystemInUtil.addInputLine("#i{Ab0j4");
      jSTerm0.insertElementAt("not", 0);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("zj6bf");
      SystemInUtil.addInputLine("zj6bf");
      SystemInUtil.addInputLine("#i{Ab0j4");
      jSTerm0.add((Object) null);
      SystemInUtil.addInputLine("g$9,4|h");
      SystemInUtil.addInputLine(": Er>or reading control parameters: ");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("],R.+?lE O");
      SystemInUtil.addInputLine("Line ");
      SystemInUtil.addInputLine("],R.+?lE O");
      SystemInUtil.addInputLine("Pg$94h");
      SystemInUtil.addInputLine("Line ");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("not");
      SystemInUtil.addInputLine("+b$tA&%HbW2ro1`D<");
      jSTerm0.insertElementAt("not", 0);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("Xih");
      SystemInUtil.addInputLine("zj6bf");
      SystemInUtil.addInputLine("zj6bf");
      SystemInUtil.addInputLine("+b$tA&%HbW2ro1`D<");
      SystemInUtil.addInputLine("g$9,4|h");
      SystemInUtil.addInputLine(": Er>or reading control parameters: ");
      SystemInUtil.addInputLine("zj6bf");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("],R.+?lE O");
      SystemInUtil.addInputLine("Line ");
      SystemInUtil.addInputLine("Line ");
      SystemInUtil.addInputLine("Pg$94h");
      SystemInUtil.addInputLine("Line ");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("not", 0);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply((String) null);
      unaryOperator1.apply("not");
      unaryOperator1.apply("not");
      unaryOperator1.apply((String) null);
      unaryOperator0.apply((String) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(43);
      SystemInUtil.addInputLine("not");
      jSTerm0.insertElementAt("not", 0);
      SystemInUtil.addInputLine("not");
      SystemInUtil.addInputLine("KQQP}");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("not");
      SystemInUtil.addInputLine("not");
      SystemInUtil.addInputLine("call");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("~qh*_c\"OPtT%tg1k");
      SystemInUtil.addInputLine("sg");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("not");
      SystemInUtil.addInputLine("gi{+b0$4");
      SystemInUtil.addInputLine("boz");
      jSTerm0.insertElementAt("not", 0);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("zj6bf");
      SystemInUtil.addInputLine("zj6bf");
      SystemInUtil.addInputLine("gi{+b0$4");
      SystemInUtil.addInputLine("g$9,4|h");
      SystemInUtil.addInputLine(": Er>or reading control parameters: ");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("W{a6iA9J#(sY");
      SystemInUtil.addInputLine("gi{+b0$4");
      SystemInUtil.addInputLine("6]hm");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(43);
      jSTerm0.insertElementAt("not", 0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply((String) null);
      UnaryOperator.identity();
      unaryOperator0.apply((String) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.apply((String) null);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.apply((String) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.359532507255062
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(43);
      JSJshopVars.astherisk = 43;
      SystemInUtil.addInputLine("iwk?#}O@k4v/u[95*");
      jSTerm0.trimToSize();
      jSTerm0.insertElementAt("iwk?#}O@k4v/u[95*", 43);
      jSTerm0.add((Object) "iwk?#}O@k4v/u[95*");
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      StringReader stringReader0 = new StringReader("8N/qsfEq");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.insertElementAt(jSTerm1, 43);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add((Object) "iwk?#}O@k4v/u[95*");
      jSTerm2.parallelStream();
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      JSJshopVars.plus = 43;
      stringReader0.close();
      jSPredicateForm0.print();
      jSPredicateForm0.toStr();
      jSTerm2.clonePF();
      JSJshopVars.lessT = 43;
      JSJshopVars.greaterT = (-1306);
      jSTerm1.clonePF();
      jSTerm1.standardizerTerm();
      JSJshopVars.semicolon = (-1615226146);
      jSTerm1.print();
      jSTerm2.print();
      jSTerm1.clonePF();
      jSTerm1.clonePF();
      jSTerm1.clonePF();
      jSTerm2.applySubstitutionPF((JSSubstitution) null);
      // Undeclared exception!
      try { 
        jSTerm2.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.63576027292953
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      SystemInUtil.addInputLine((String) null);
      jSTerm0.add((Object) jSTerm1);
      streamTokenizer0.ordinaryChars((-4177984), (-4177984));
      jSTerm0.insertElementAt("noP", 0);
      SystemInUtil.addInputLine("zj6");
      SystemInUtil.addInputLine("noP");
      SystemInUtil.addInputLine("zj6");
      SystemInUtil.addInputLine("zj6");
      SystemInUtil.addInputLine("zj6");
      SystemInUtil.addInputLine("qxpc+mhoed");
      SystemInUtil.addInputLine(":5a6!$('HE/xI@1PB");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      boolean boolean1 = jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean1 == boolean0);
      
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      assertEquals("[noP, [Unexpected]]", jSPredicateForm1.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&(J6f!k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = (-3);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.whitespaceChars(423, 32);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.quoteChar((-3));
      streamTokenizer1.ordinaryChars((-3), 1048);
      streamTokenizer1.ordinaryChar(1048);
      streamTokenizer1.pushBack();
      streamTokenizer1.ttype = (-3);
      streamTokenizer1.whitespaceChars(1048, (-3));
      streamTokenizer1.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer2.ordinaryChars((-3), 2201);
      stringReader0.read();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("nor", 0);
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("hh&im@an^5`;:t-voy");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("hh&im@an^5`;:t-voy");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine("g!1<L/I/");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("~qh*_c\"OPtT%tg1k");
      SystemInUtil.addInputLine("yv+/!U9");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine(";S~ANHvNS7>6CyY/c");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("hh&im@an^5`;:t-voy");
      jSSubstitution0.add((Object) "nor");
      jSSubstitution0.assignFailure();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("nor", 0);
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("hh&im@an^5`;:t-voy");
      SystemInUtil.addInputLine("nor");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      SystemInUtil.addInputLine("hh&im@an^5`;:t-voy");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("");
      jSTerm0.add((Object) "nor");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("~qh*_c\"OPtT%tg1k");
      SystemInUtil.addInputLine("yv+/!U9");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine(";S~ANHvNS7>6CyY/c");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0VP/(u,Nn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.apply("Q]N(?\"(R0XC,H#j)");
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.apply(" . ");
      unaryOperator4.compose((Function<? super String, ? extends String>) unaryOperator2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "Q]N(?\"(R0XC,H#j)");
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("nor", 0);
      SystemInUtil.addInputLine("nor");
      Function<Integer, Integer> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(function1).apply(any());
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Object> function3 = unaryOperator0.compose((Function<? super Object, ?>) function2);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Object> function5 = unaryOperator0.compose((Function<? super Object, ?>) function2);
      Function<Integer, String> function6 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function6).apply(anyInt());
      function3.compose((Function<? super Object, ?>) function5);
      Function<Object, String> function7 = function2.andThen((Function<? super Integer, ? extends String>) function6);
      Function<Object, Object> function8 = function7.andThen((Function<? super String, ?>) unaryOperator0);
      function8.apply(function0);
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      function4.apply(function7);
      Function.identity();
      Function<Object, Integer> function10 = function9.andThen((Function<? super Integer, ? extends Integer>) function4);
      function7.compose((Function<? super String, ?>) function9);
      function7.compose((Function<? super Object, ?>) function9);
      Function<Integer, String> function11 = function7.compose((Function<? super Integer, ?>) function2);
      function11.compose((Function<? super Integer, ? extends Integer>) function10);
      function7.compose((Function<? super Object, ?>) function8);
      function3.apply(function0);
      function9.compose((Function<? super String, ?>) function3);
      jSTerm0.firstElement();
      jSTerm0.add((Object) "nor");
      Integer integer0 = new Integer((-4070));
      function2.andThen((Function<? super Integer, ? extends String>) function11);
      Function<Object, String> function12 = function9.andThen((Function<? super Integer, ? extends String>) function7);
      function12.apply("nor");
      function12.compose((Function<? super Object, ?>) function2);
      Function.identity();
      function2.compose((Function<? super Object, ?>) function12);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(47);
      jSTerm0.insertElementAt("nor", 0);
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("hh&im@an^5`;:t-voy");
      SystemInUtil.addInputLine("nor");
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Object> function2 = unaryOperator0.compose((Function<? super Object, ?>) function1);
      Function<Object, JSPredicateForm> function3 = (Function<Object, JSPredicateForm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function3);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.andThen((Function<? super Object, ?>) function4);
      unaryOperator0.compose((Function<? super Object, ?>) function1);
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Integer, String> function6 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function7 = function5.andThen((Function<? super Integer, ? extends String>) function6);
      function7.andThen((Function<? super String, ?>) unaryOperator0);
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      Function<Object, String> function9 = function7.compose((Function<? super Object, ?>) function8);
      Function<Integer, String> function10 = function7.compose((Function<? super Integer, ?>) function1);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      function8.compose((Function<? super String, ?>) function2);
      Integer integer0 = new Integer((-4070));
      Integer integer1 = new Integer((-4070));
      function8.andThen((Function<? super Integer, ? extends Integer>) function5);
      jSTerm1.add(0, (Object) function9);
      function1.andThen((Function<? super Integer, ? extends String>) function10);
      Function<Object, String> function11 = function8.andThen((Function<? super Integer, ? extends String>) function7);
      Function.identity();
      function5.compose((Function<? super Object, ?>) function11);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3876941746339284
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(FUobVt.4)^So");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "(FUobVt.4)^So");
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      predicate4.and(predicate1);
      Predicate<Object> predicate5 = predicate4.and(predicate0);
      predicate4.and(predicate3);
      Predicate<Object> predicate6 = predicate4.or(predicate0);
      Predicate<Object> predicate7 = predicate0.or(predicate4);
      predicate7.negate();
      Predicate<Object> predicate8 = predicate7.or(predicate5);
      Predicate<Object> predicate9 = predicate4.and(predicate0);
      Predicate<Object> predicate10 = predicate9.negate();
      predicate10.test(predicate8);
      predicate0.or(predicate9);
      predicate4.negate();
      predicate9.or(predicate10);
      Predicate.isEqual((Object) predicate5);
      predicate7.test(predicate0);
      predicate0.or(predicate7);
      predicate6.test(predicate9);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSPredicateForm0.equals(jSPredicateForm0);
      StringReader stringReader0 = new StringReader("(FUobVt.4)^So");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm(streamTokenizer0);
      boolean boolean0 = jSPredicateForm0.equals(jSPredicateForm1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "(MGjJ";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(MGjJ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2992507293959255
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(FUobVt.4)^So");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate0.negate();
      predicate0.and(predicate0);
      predicate0.or(predicate2);
      Predicate<Object> predicate3 = predicate0.and(predicate0);
      predicate3.negate();
      Predicate<Object> predicate4 = predicate1.or(predicate0);
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate0);
      predicate0.or(predicate3);
      predicate5.negate();
      predicate0.negate();
      predicate3.and(predicate0);
      predicate3.test(predicate4);
      predicate0.negate();
      predicate3.and(predicate0);
      Predicate<Object> predicate6 = predicate0.and(predicate0);
      Predicate<Object> predicate7 = predicate6.negate();
      predicate7.test(predicate0);
      predicate6.negate();
      predicate5.and(predicate3);
      predicate7.and(predicate0);
      predicate6.or(predicate7);
      predicate1.negate();
      predicate7.negate();
      predicate3.test(predicate0);
      predicate3.or(predicate1);
      predicate0.test(predicate6);
      predicate0.test(predicate0);
      predicate0.test(predicate5);
      predicate0.or(predicate0);
      jSPredicateForm0.insertElementAt(predicate0, 1);
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$45/190921390 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expec_ed (");
      stringReader0.read();
      stringReader0.ready();
      char[] charArray0 = new char[3];
      stringReader0.reset();
      stringReader0.ready();
      stringReader0.ready();
      stringReader0.read(charArray0);
      stringReader0.reset();
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader(" Expec_ed (");
      stringReader0.read();
      StringReader stringReader2 = new StringReader("#7Xi~gP;0\bs*hG<xh");
      stringReader1.ready();
      StringReader stringReader3 = new StringReader("^/Y");
      stringReader3.markSupported();
      stringReader2.reset();
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      charBuffer0.order();
      charBuffer0.codePoints();
      StringReader stringReader4 = new StringReader("^/Y");
      stringReader4.read(charBuffer0);
      stringReader2.markSupported();
      stringReader0.reset();
      stringReader0.markSupported();
      stringReader3.read(charArray0);
      stringReader2.mark(3);
      StringReader stringReader5 = new StringReader("^/Y");
      stringReader5.markSupported();
      StringReader stringReader6 = new StringReader(" Expec_ed (");
      StringReader stringReader7 = new StringReader("#7Xi~gP;0\bs*hG<xh");
      stringReader7.mark(1841);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0VP/(u,Nn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ?>) unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator6 = UnaryOperator.identity();
      unaryOperator6.apply("0VP/(u,Nn");
      unaryOperator5.apply(" NZs(Cxo+q");
      unaryOperator5.compose((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator3.compose((Function<? super String, ? extends String>) unaryOperator4);
      boolean boolean0 = jSTerm1.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.astherisk = 0;
      jSTerm0.insertElementAt("not", 0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      function1.apply((Object) null);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Object> function2 = unaryOperator1.compose((Function<? super Object, ?>) function1);
      Integer integer0 = new Integer((-1464309622));
      function2.apply(integer0);
      unaryOperator1.compose((Function<? super Integer, ?>) function2);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function3).apply(any());
      Function<Object, Integer> function4 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, String> function5 = function4.andThen((Function<? super Integer, ? extends String>) function1);
      function5.compose((Function<? super Integer, ?>) function4);
      Function.identity();
      function2.apply((Object) null);
      function4.andThen((Function<? super Integer, ? extends String>) function5);
      function4.apply(function2);
      function4.compose((Function<? super Object, ?>) function2);
      Function<Object, Integer> function6 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      Function.identity();
      function6.compose((Function<? super Object, ?>) function4);
      jSTerm0.add((Object) function4);
      Function.identity();
      Function<Object, Integer> function7 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function8 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function7);
      function8.compose((Function<? super Object, ?>) function2);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<String, Integer> function9 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function7);
      unaryOperator2.andThen((Function<? super String, ? extends Integer>) function9);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$53/187940357 cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(43);
      jSTerm0.insertElementAt("ot", 0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator3);
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis((-1196L));
      System.setCurrentTimeMillis(1L);
      long long0 = (-34L);
      System.setCurrentTimeMillis((-34L));
      System.setCurrentTimeMillis(2898L);
      System.setCurrentTimeMillis(2898L);
      System.setCurrentTimeMillis(2898L);
      System.setCurrentTimeMillis(17L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(17L);
      System.setCurrentTimeMillis(357L);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) consumer1);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.util.function.Consumer$MockitoMock$567244989 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(1|[v{.fA9n7x)gOs");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.add((Object) consumer0);
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.util.function.Consumer$MockitoMock$567244989 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1064801542156266
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(FUobVt.4)^So");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      predicate1.negate();
      predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate1.and(predicate0);
      predicate4.negate();
      predicate3.or(predicate2);
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate0);
      predicate1.or(predicate4);
      predicate5.negate();
      predicate0.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate2);
      predicate0.negate();
      predicate6.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate0);
      predicate5.test("(FUobVt.4)^So");
      Predicate<Object> predicate8 = predicate7.negate();
      predicate8.test(predicate0);
      predicate7.negate();
      Predicate.isEqual((Object) predicate0);
      predicate8.and(predicate1);
      predicate7.or(predicate8);
      predicate3.negate();
      predicate8.negate();
      predicate4.test(predicate0);
      predicate4.or(predicate3);
      predicate1.test(predicate7);
      predicate1.test(predicate0);
      predicate0.test(predicate5);
      predicate1.or(predicate0);
      jSPredicateForm0.insertElementAt(predicate1, 1);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$50/1985633870 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(45);
      jSTerm0.insertElementAt("the", 0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ?>) function0);
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, Object> function2 = unaryOperator0.compose((Function<? super Object, ?>) function1);
      Integer integer0 = new Integer(2750);
      Object object0 = new Object();
      Integer integer1 = new Integer(42);
      function2.apply(integer1);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, Object> function3 = unaryOperator1.andThen((Function<? super Integer, ?>) unaryOperator0);
      Function<Integer, Object> function4 = unaryOperator0.compose((Function<? super Integer, ?>) function3);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function5).apply(any());
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      function6.apply(integer1);
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function9).apply(any());
      Function<Object, String> function10 = function8.andThen((Function<? super Integer, ? extends String>) function9);
      Function<Integer, String> function11 = function10.compose((Function<? super Integer, ?>) function4);
      function11.andThen((Function<? super String, ?>) function6);
      Function<Object, String> function12 = function8.andThen((Function<? super Integer, ? extends String>) function11);
      function12.apply(function7);
      Function<Object, Integer> function13 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function14 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, Integer> function15 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function14);
      function15.andThen((Function<? super Integer, ? extends String>) function11);
      Function<Object, Integer> function16 = function13.compose((Function<? super Object, ?>) unaryOperator0);
      unaryOperator1.andThen((Function<? super Integer, ?>) function16);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ? extends Integer>) function15);
      unaryOperator2.compose((Function<? super String, ? extends String>) function12);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1064801542156266
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(FUobV.4)^So");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.quoteChar(32);
      streamTokenizer0.ordinaryChars(32, 32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-4), 32);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-2469));
      streamTokenizer1.quoteChar(33);
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.resetSyntax();
      streamTokenizer2.ordinaryChars((-602), 33);
      streamTokenizer1.ordinaryChars((-1), (-1));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(9, stringBuffer0.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(FUobV.4)^So");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.quoteChar(32);
      streamTokenizer0.ordinaryChars(32, 32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-4), 32);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.sval = null;
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer1.quoteChar(32);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.wordChars((-4), 32);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.ordinaryChars(32, (-1086997552));
      stringReader0.close();
      streamTokenizer1.ordinaryChars((-1), 1904);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      int int0 = 58;
      jSPredicateForm0.setSize(58);
      JSJshopVars.colon = 58;
      JSJshopVars.rightBrac = (-2368);
      jSPredicateForm0.insertElementAt("<j[2*#s]4kC42", 0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1064801542156266
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(FUobVt.4)^So");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate1.negate();
      predicate2.and(predicate3);
      Predicate<Object> predicate6 = predicate1.and(predicate0);
      Predicate<Object> predicate7 = predicate6.negate();
      predicate0.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate6);
      predicate0.negate();
      predicate0.negate();
      Predicate<Object> predicate9 = predicate6.and(predicate0);
      Predicate<Object> predicate10 = predicate2.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      predicate7.negate();
      predicate11.test(predicate0);
      Predicate<Object> predicate12 = predicate11.and(predicate3);
      predicate9.negate();
      predicate11.negate();
      predicate9.test(predicate8);
      predicate6.test(predicate0);
      predicate0.and(predicate5);
      Predicate<Object> predicate13 = predicate6.or(predicate4);
      predicate3.test(predicate10);
      predicate3.test(predicate12);
      Predicate.isEqual((Object) "(FUobVt.4)^So");
      predicate3.negate();
      predicate9.negate();
      predicate7.and(predicate13);
      jSPredicateForm0.insertElementAt(predicate2, 1);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$52/1716307921 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("nor", 0);
      SystemInUtil.addInputLine("nor");
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator2.apply("4*Bk{b]D$txmL(\"");
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.apply("A)M)Xxvjf ZAkTu!d9");
      unaryOperator3.compose((Function<? super String, ? extends String>) unaryOperator4);
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expected (");
      stringReader0.read();
      stringReader0.ready();
      CharBuffer charBuffer0 = CharBuffer.allocate(32);
      stringReader0.read(charBuffer0);
      char[] charArray0 = new char[3];
      stringReader0.mark(2922);
      stringReader0.reset();
      stringReader0.ready();
      stringReader0.ready();
      stringReader0.read(charArray0);
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      stringReader0.reset();
      charArray0[2] = 'o';
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader("Predicateform.print(): 0 elements");
      stringReader1.read();
      StringReader stringReader2 = new StringReader(" Expected (");
      stringReader1.ready();
      stringReader1.markSupported();
      stringReader2.reset();
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      charBuffer1.codePoints();
      stringReader1.read(charBuffer1);
      stringReader2.markSupported();
      stringReader2.mark(1);
      stringReader1.reset();
      stringReader2.read(charArray0);
      stringReader1.mark(80);
      stringReader2.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("nor", 0);
      SystemInUtil.addInputLine("nor");
      Function<Integer, Integer> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(function1).apply(any());
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Object> function3 = unaryOperator0.compose((Function<? super Object, ?>) function2);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Object> function5 = unaryOperator0.compose((Function<? super Object, ?>) function2);
      Function<Integer, String> function6 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function6).apply(anyInt());
      function3.compose((Function<? super Object, ?>) function5);
      Function<Object, String> function7 = function2.andThen((Function<? super Integer, ? extends String>) function6);
      Function<Object, Object> function8 = function7.andThen((Function<? super String, ?>) unaryOperator0);
      function8.apply(function0);
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function.identity();
      Function<Object, Integer> function10 = function9.andThen((Function<? super Integer, ? extends Integer>) function4);
      Function<Object, String> function11 = function7.compose((Function<? super Object, ?>) function9);
      Function<Integer, String> function12 = function7.compose((Function<? super Integer, ?>) function2);
      function12.compose((Function<? super Integer, ? extends Integer>) function10);
      Function<Object, String> function13 = function7.compose((Function<? super Object, ?>) function8);
      function3.apply(function0);
      function9.compose((Function<? super String, ?>) function3);
      Integer integer0 = new Integer((-4070));
      Function<Object, String> function14 = function9.andThen((Function<? super Integer, ? extends String>) function7);
      function7.compose((Function<? super Integer, ?>) function4);
      function14.apply(jSTerm0);
      function7.apply((Object) null);
      function9.andThen((Function<? super Integer, ? extends String>) function11);
      function4.compose((Function<? super Object, ?>) function10);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) function13);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("nor", 0);
      SystemInUtil.addInputLine("nor");
      Function<Integer, Integer> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(function1).apply(any());
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Object> function3 = unaryOperator0.compose((Function<? super Object, ?>) function2);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Object> function5 = unaryOperator0.compose((Function<? super Object, ?>) function2);
      Function<Integer, String> function6 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function6).apply(anyInt());
      function3.compose((Function<? super Object, ?>) function5);
      Function<Object, String> function7 = function2.andThen((Function<? super Integer, ? extends String>) function6);
      Function<Object, Object> function8 = function7.andThen((Function<? super String, ?>) unaryOperator0);
      function8.apply(function0);
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      function4.apply(function7);
      Function.identity();
      Function<Object, Integer> function10 = function9.andThen((Function<? super Integer, ? extends Integer>) function4);
      function7.compose((Function<? super String, ?>) function9);
      function7.compose((Function<? super Object, ?>) function9);
      Function<Integer, String> function11 = function7.compose((Function<? super Integer, ?>) function2);
      function11.compose((Function<? super Integer, ? extends Integer>) function10);
      function7.compose((Function<? super Object, ?>) function8);
      function3.apply(function0);
      function9.compose((Function<? super String, ?>) function3);
      Integer integer0 = new Integer((-4070));
      function2.andThen((Function<? super Integer, ? extends String>) function11);
      Function<Object, String> function12 = function9.andThen((Function<? super Integer, ? extends String>) function7);
      function12.apply("nor");
      function12.compose((Function<? super Object, ?>) function2);
      Function.identity();
      function2.compose((Function<? super Object, ?>) function12);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1064801542156266
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(FUobV.4)^eo");
      jSPredicateForm0.toStr();
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(4879L);
      System.setCurrentTimeMillis(1563L);
      System.setCurrentTimeMillis(4879L);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.234679199787727
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(FUobV.4)^So");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.quoteChar(32);
      streamTokenizer0.ordinaryChars(32, 32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-4), 32);
      StringReader stringReader1 = new StringReader("(FUobV.4)^So");
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer0.sval = null;
      streamTokenizer1.ordinaryChar(32);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.ordinaryChars((-871), (-4));
      streamTokenizer1.whitespaceChars(24, 58);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(24, 32);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer3.ordinaryChars((-4), 24);
      stringReader0.read();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm(streamTokenizer3);
      System.setCurrentTimeMillis(40);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("nor", 0);
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("X`TMKD,G");
      SystemInUtil.addInputLine("N%m=M[<WB<{o!");
      SystemInUtil.addInputLine("N%m=M[<WB<{o!");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("hF<XFYhf1X");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("nor");
      jSTerm0.add((Object) null);
      SystemInUtil.addInputLine("{}o %@#/2Q7u4/?O?pK");
      SystemInUtil.addInputLine("- ");
      SystemInUtil.addInputLine("Line ");
      SystemInUtil.addInputLine("Line ");
      SystemInUtil.addInputLine("@Z");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6573186405438316
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(43);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(43);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(fuobv.4)^eo");
      stringReader0.mark(0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.JSPredicateFormInit(streamTokenizer0);
      assertFalse(jSTerm0.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6868359830561608
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&(J6f!k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(1048);
      streamTokenizer0.ttype = 9;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.ttype = 0;
      streamTokenizer0.whitespaceChars(423, 32);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.quoteChar(0);
      streamTokenizer1.ordinaryChars(2513, 1048);
      streamTokenizer1.ordinaryChar(0);
      streamTokenizer1.pushBack();
      streamTokenizer1.sval = null;
      streamTokenizer1.ttype = 2513;
      streamTokenizer1.whitespaceChars(1048, 2513);
      streamTokenizer1.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-2), 41);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer2.ordinaryChars(2513, 2201);
      stringReader0.read();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      predicate4.and(predicate1);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate0);
      predicate4.and(predicate3);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate0.or(predicate4);
      predicate4.and(predicate7);
      predicate8.negate();
      Predicate<Object> predicate9 = predicate8.or(predicate6);
      predicate8.and(predicate6);
      predicate9.and(predicate1);
      predicate3.or(predicate7);
      Predicate<Object> predicate10 = predicate4.and(predicate0);
      predicate9.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      predicate11.test(predicate9);
      predicate11.test(predicate8);
      Predicate<Object> predicate12 = predicate5.negate();
      predicate11.and(predicate9);
      predicate10.negate();
      predicate12.or(predicate3);
      predicate4.negate();
      predicate10.or(predicate11);
      predicate7.test(predicate2);
      Predicate.isEqual((Object) predicate6);
      predicate8.test(predicate0);
      predicate7.test(predicate4);
      predicate12.negate();
      predicate7.test(predicate10);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("nor", 0);
      SystemInUtil.addInputLine("nor");
      Function<Integer, Integer> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(function1).apply(any());
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Object> function3 = unaryOperator0.compose((Function<? super Object, ?>) function2);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Object> function5 = unaryOperator0.compose((Function<? super Object, ?>) function2);
      Function<Integer, String> function6 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function6).apply(anyInt());
      function3.compose((Function<? super Object, ?>) function5);
      Function<Object, String> function7 = function2.andThen((Function<? super Integer, ? extends String>) function6);
      Function<Object, Object> function8 = function7.andThen((Function<? super String, ?>) unaryOperator0);
      function8.apply(function0);
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      function4.apply(function7);
      Function.identity();
      Function<Object, Integer> function10 = function9.andThen((Function<? super Integer, ? extends Integer>) function4);
      function7.compose((Function<? super String, ?>) function9);
      function7.compose((Function<? super Object, ?>) function9);
      Function<Integer, String> function11 = function7.compose((Function<? super Integer, ?>) function2);
      function11.compose((Function<? super Integer, ? extends Integer>) function10);
      function7.compose((Function<? super Object, ?>) function8);
      function3.apply(function0);
      function9.compose((Function<? super String, ?>) function3);
      Integer integer0 = new Integer((-4070));
      function2.andThen((Function<? super Integer, ? extends String>) function11);
      Function<Object, String> function12 = function9.andThen((Function<? super Integer, ? extends String>) function7);
      function12.apply("nor");
      function12.compose((Function<? super Object, ?>) function2);
      Function.identity();
      function2.compose((Function<? super Object, ?>) function12);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(43);
      StringReader stringReader0 = new StringReader("<j[2*#s]4kc42");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("not");
      stringReader1.reset();
      StringReader stringReader2 = new StringReader("not");
      StringReader stringReader3 = new StringReader("<j[2*#s]4kc42");
      stringReader2.ready();
      StringReader stringReader4 = new StringReader("<j[2*#s]4kc42");
      StringReader stringReader5 = new StringReader("G^N0jWKVU2X2v:YT");
      stringReader2.ready();
      stringReader2.markSupported();
      StringReader stringReader6 = new StringReader("FUo!V.4");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("nor", 0);
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("call");
      SystemInUtil.addInputLine("enU-$&a4P`kH[rc|p");
      SystemInUtil.addInputLine("call");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("H");
      SystemInUtil.addInputLine("y_In@?c");
      SystemInUtil.addInputLine("enU-$&a4P`kH[rc|p");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("y_In@?c");
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      assertEquals(10, jSPredicateForm0.capacity());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0VP/(u,Nn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.apply("Q]N(?\"(R0XC,H#j)");
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.apply(" . ");
      unaryOperator4.compose((Function<? super String, ? extends String>) unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("nor", 0);
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("hh&im@an^5`;:t-voy");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("hh&im@an^5`;:t-voy");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("~qh*_c\"OPtT%tg1k");
      SystemInUtil.addInputLine("yv+/!U9");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine(";S~ANHvNS7>6CyY/c");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("hh&im@an^5`;:t-voy");
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("nor", 0);
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("hh&im@an^5`;:t-voy");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("hh&im@an^5`;:t-voy");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("~qh*_c\"OPtT%tg1k");
      SystemInUtil.addInputLine("yv+/!U9");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine(";S~ANHvNS7>6CyY/c");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("");
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(47);
      JSJshopVars.astherisk = 0;
      jSTerm0.insertElementAt("not", 0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Object> function2 = unaryOperator1.compose((Function<? super Object, ?>) function1);
      Function<Object, String> function3 = function1.compose((Function<? super Object, ?>) function2);
      function1.apply((Object) null);
      function1.andThen((Function<? super String, ?>) unaryOperator0);
      function1.compose((Function<? super String, ?>) unaryOperator0);
      Function.identity();
      Function<Object, Object> function4 = unaryOperator1.compose((Function<? super Object, ?>) function1);
      function3.compose((Function<? super Integer, ?>) unaryOperator1);
      unaryOperator1.compose((Function<? super Integer, ?>) function4);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function5).apply(any());
      Function.identity();
      Function<Object, Integer> function6 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      function4.apply(function6);
      function4.andThen((Function<? super Object, ?>) function3);
      Function<Object, String> function7 = function6.andThen((Function<? super Integer, ? extends String>) function1);
      Function<Object, Object> function8 = function7.andThen((Function<? super String, ?>) unaryOperator1);
      Function<Object, Integer> function9 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function6);
      Function.identity();
      function7.compose((Function<? super Object, ?>) function9);
      Function<Integer, String> function10 = function7.compose((Function<? super Integer, ?>) function6);
      function7.apply(function10);
      function1.apply((Object) null);
      function6.andThen((Function<? super Integer, ? extends String>) function7);
      function6.compose((Function<? super Object, ?>) function4);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) function8);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(FUobV.4)^So");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChars(32, 32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), 32);
      streamTokenizer1.sval = null;
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.sval = null;
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer1.quoteChar(32);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.sval = "(FUobV.4)^So";
      streamTokenizer1.wordChars((-4), 32);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChars((-4), (-1086997552));
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(FUobV.4)^So");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChars(32, 32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-4), 32);
      streamTokenizer1.sval = null;
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.sval = null;
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer1.quoteChar(32);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.sval = "(FUobV.4)^So";
      streamTokenizer1.wordChars((-4), 32);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChars((-4), (-1086997552));
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.2346791997877273
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(FUobVt.4)^So");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = predicate0.or(predicate1);
      Predicate<Object> predicate5 = predicate1.negate();
      predicate2.and(predicate3);
      Predicate<Object> predicate6 = predicate1.and(predicate0);
      Predicate<Object> predicate7 = predicate6.negate();
      predicate4.or(predicate2);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate8 = predicate1.or(predicate6);
      predicate0.negate();
      predicate0.negate();
      Predicate<Object> predicate9 = predicate6.and(predicate0);
      Predicate<Object> predicate10 = predicate1.and(predicate0);
      Predicate<Object> predicate11 = predicate10.negate();
      predicate7.negate();
      predicate11.test(predicate0);
      predicate11.and(predicate3);
      predicate9.negate();
      predicate11.negate();
      predicate9.test(predicate8);
      predicate6.test(predicate0);
      predicate0.and(predicate5);
      assertEquals("[FUobVt.4]", jSPredicateForm0.toString());
      
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(43);
      jSTerm0.trimToSize();
      jSTerm0.insertElementAt("<j[2*#s]4kC42", 0);
      StringReader stringReader0 = new StringReader("G,$ ");
      stringReader0.read();
      char[] charArray0 = new char[3];
      stringReader0.mark(2922);
      charArray0[0] = 'W';
      charArray0[1] = 'o';
      charArray0[2] = '1';
      stringReader0.read(charArray0);
      stringReader0.skip((-2697L));
      StringReader stringReader1 = new StringReader("8N/qsfEq");
      stringReader1.read();
      stringReader1.mark(457);
      StringReader stringReader2 = new StringReader("G,$ ");
      stringReader1.markSupported();
      StringReader stringReader3 = new StringReader("8N/qsfEq");
      StringReader stringReader4 = new StringReader("KF2k=[y2e1T*.");
      stringReader3.skip((-1236L));
      stringReader3.read();
      StringReader stringReader5 = new StringReader("KF2k=[y2e1T*.");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expec_ed (");
      stringReader0.read();
      stringReader0.ready();
      char[] charArray0 = new char[3];
      stringReader0.reset();
      stringReader0.ready();
      stringReader0.ready();
      stringReader0.read(charArray0);
      stringReader0.reset();
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader(" Expec_ed (");
      stringReader0.read();
      StringReader stringReader2 = new StringReader("#7Xi~gP;0\bs*hG<xh");
      StringReader stringReader3 = new StringReader("not");
      stringReader3.markSupported();
      stringReader2.reset();
      stringReader0.reset();
      StringReader stringReader4 = new StringReader("not");
      stringReader2.markSupported();
      stringReader0.reset();
      stringReader0.markSupported();
      stringReader3.read(charArray0);
      stringReader2.mark(3);
      StringReader stringReader5 = new StringReader("not");
      stringReader5.markSupported();
      StringReader stringReader6 = new StringReader(" Expec_ed (");
      StringReader stringReader7 = new StringReader("#7Xi~gP;0\bs*hG<xh");
      stringReader7.markSupported();
      stringReader7.mark(1841);
      stringReader7.markSupported();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(0, stringBuffer0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expec_ed (");
      stringReader0.read();
      stringReader0.ready();
      char[] charArray0 = new char[3];
      stringReader0.reset();
      stringReader0.ready();
      stringReader0.ready();
      stringReader0.read(charArray0);
      stringReader0.reset();
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader(" Expec_ed (");
      stringReader0.read();
      StringReader stringReader2 = new StringReader("/1ff-Vfe)4_>3/Ak~E");
      stringReader1.ready();
      StringReader stringReader3 = new StringReader("^/Y");
      stringReader3.markSupported();
      stringReader2.reset();
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      charBuffer0.codePoints();
      StringReader stringReader4 = new StringReader(">=");
      stringReader4.read(charBuffer0);
      stringReader2.markSupported();
      stringReader0.reset();
      stringReader3.read(charArray0);
      stringReader2.mark(3);
      StringReader stringReader5 = new StringReader("^/Y");
      stringReader5.markSupported();
      StringReader stringReader6 = new StringReader(">=");
      stringReader0.markSupported();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      assertTrue(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.1064801542156266
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(FUobV.4)^eo");
      JSJshopVars.verticalL = 199;
      JSJshopVars.flagLevel = (-1831);
      JSJshopVars.exclamation = (-2021304383);
      JSJshopVars.coma = 0;
      JSJshopVars.astherisk = 0;
      JSJshopVars.astherisk = (-186);
      jSPredicateForm0.print();
      assertEquals("[FUobV.4]", jSPredicateForm0.toString());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(FUobV.4)^So");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.quoteChar(32);
      streamTokenizer0.ordinaryChars(32, 32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-4), 32);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.nextToken();
      streamTokenizer1.parseNumbers();
      streamTokenizer1.whitespaceChars(40, 40);
      streamTokenizer0.sval = null;
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer1.quoteChar(32);
      streamTokenizer1.ttype = 40;
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.wordChars(40, 32);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.ordinaryChars(32, (-1086997552));
      streamTokenizer1.ordinaryChars((-1), 1904);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("expected '('");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
