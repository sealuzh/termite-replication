/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 08:11:48 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.trimToSize();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm1);
      jSSubstitution0.add(objectArray0[1]);
      Object[] objectArray3 = jSSubstitution0.toArray(objectArray1);
      Integer integer0 = new Integer(96);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.addAll((Collection) jSSubstitution0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(anyInt() , anyInt());
      jSSubstitution0.sort(comparator1);
      Object[] objectArray4 = jSSubstitution0.toArray(objectArray3);
      jSSubstitution0.toArray(objectArray4);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopars";
      jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) jSTerm0;
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.trimToSize();
      jSSubstitution0.add(objectArray0[0]);
      jSSubstitution0.toArray(objectArray0);
      Integer integer0 = new Integer(96);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.addAll((Collection) jSSubstitution0);
      jSSubstitution0.toArray(objectArray1);
      jSSubstitution0.add((Object) "umd.cs.shop.JSJshopars");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.toArray(objectArray0);
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "umd.cs.shop.JSJshopars");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.trimToSize();
      Object object0 = jSTerm0.clone();
      jSSubstitution0.add(object0);
      jSSubstitution0.toArray(objectArray0);
      jSSubstitution0.toArray(objectArray1);
      Integer integer0 = new Integer(58);
      jSTerm0.addAll((Collection) jSSubstitution0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      jSSubstitution0.sort(comparator1);
      Object[] objectArray2 = jSSubstitution0.toArray(objectArray0);
      Object object1 = new Object();
      jSSubstitution0.add((Object) "umd.cs.shop.JSJshopars");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.toArray(objectArray2);
      StringReader stringReader0 = new StringReader("Expecting constant symbol as term");
      StringReader stringReader1 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.add(objectArray0[1]);
      jSSubstitution0.toArray(objectArray1);
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader(")");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      assertFalse(jSTerm2.isFunction());
      assertEquals("[nil]", jSTerm2.toString());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8018924006588724
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopVars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Object[] objectArray2 = new Object[8];
      jSTerm0.makeEval(true);
      objectArray2[0] = (Object) jSTerm0;
      objectArray2[1] = (Object) jSSubstitution0;
      objectArray2[3] = (Object) jSSubstitution0;
      objectArray2[4] = (Object) jSSubstitution0;
      jSSubstitution0.add((Object) "umd.cs.shop.JSJshopVars");
      objectArray1[0] = (Object) "&xD^h,3";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(any() , any());
      jSSubstitution0.add(objectArray2[1]);
      jSSubstitution0.sort(comparator1);
      jSSubstitution0.toArray(objectArray1);
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.toArray(objectArray1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.toArray(objectArray2);
      jSSubstitution0.toArray(objectArray0);
      jSTerm0.print();
      StringReader stringReader0 = new StringReader("28.0");
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopars", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.trimToSize();
      jSSubstitution0.add(objectArray0[1]);
      Object[] objectArray3 = jSSubstitution0.toArray(objectArray1);
      Integer integer0 = new Integer(96);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.addAll((Collection) jSSubstitution0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyInt() , anyInt());
      jSSubstitution0.sort(comparator1);
      Object[] objectArray4 = jSSubstitution0.toArray(objectArray3);
      jSSubstitution0.add(objectArray0[1]);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) null);
      jSSubstitution1.toArray(objectArray4);
      StringReader stringReader0 = new StringReader("28.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("28.0");
      jSTerm0.toStr();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0735428464085233
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.trimToSize();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm1);
      jSSubstitution0.add(objectArray0[1]);
      Object[] objectArray3 = jSSubstitution0.toArray(objectArray1);
      Integer integer0 = new Integer(96);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.addAll((Collection) jSSubstitution0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(anyInt() , anyInt());
      jSSubstitution0.sort(comparator1);
      Object[] objectArray4 = jSSubstitution0.toArray(objectArray3);
      Object[] objectArray5 = jSSubstitution0.toArray(objectArray4);
      jSSubstitution0.toArray(objectArray5);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm2 = new JSTerm();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm2.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0793872341927924
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt(objectArray0[0], 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add(objectArray0[0]);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.trimToSize();
      jSSubstitution0.add(objectArray0[0]);
      jSSubstitution0.toArray(objectArray1);
      Integer integer0 = new Integer(482);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.addAll((Collection) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.toArray(objectArray0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm2.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopars", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.trimToSize();
      jSSubstitution0.add(objectArray0[1]);
      Object[] objectArray3 = jSSubstitution0.toArray(objectArray1);
      Integer integer0 = new Integer(96);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.addAll((Collection) jSSubstitution0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyInt() , anyInt());
      jSSubstitution0.sort(comparator1);
      jSSubstitution0.toArray(objectArray3);
      jSSubstitution0.add(objectArray0[1]);
      jSSubstitution0.toArray(objectArray2);
      Object[] objectArray4 = jSTerm0.toArray();
      jSSubstitution0.toArray(objectArray4);
      jSTerm0.print();
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.equalT = (-931);
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.trimToSize();
      jSSubstitution0.add(objectArray0[1]);
      jSSubstitution0.toArray(objectArray1);
      Object[] objectArray3 = new Object[0];
      Object[] objectArray4 = jSSubstitution0.toArray(objectArray3);
      Integer integer0 = new Integer(96);
      jSTerm0.addAll((Collection) jSSubstitution0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyString() , anyString());
      jSSubstitution0.sort(comparator1);
      jSSubstitution0.toArray(objectArray0);
      Object object0 = new Object();
      jSSubstitution0.add((Object) integer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.toArray(objectArray4);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0317671113505356
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.trimToSize();
      jSSubstitution0.add(objectArray0[1]);
      Object[] objectArray3 = jSSubstitution0.toArray(objectArray1);
      Integer integer0 = new Integer(96);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.addAll((Collection) jSSubstitution0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyInt() , anyInt());
      jSSubstitution0.sort(comparator1);
      jSSubstitution0.toArray(objectArray3);
      jSSubstitution0.add(objectArray0[1]);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      String string0 = "%AYYw}%O\\udcH_vm";
      StringReader stringReader0 = new StringReader(string0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clear();
      jSTerm0.addAll((Collection) jSSubstitution0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "ud.cs.shop.JSJshopVars";
      objectArray0[2] = (Object) "ud.cs.shop.JSJshopVars";
      objectArray0[3] = (Object) "ud.cs.shop.JSJshopVars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt("ud.cs.shop.JSJshopVars", 0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.remove((Object) "&xD^h,3");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      objectArray2[1] = (Object) jSSubstitution1;
      objectArray2[4] = (Object) "&xD^h,3";
      jSSubstitution2.iterator();
      objectArray2[4] = (Object) jSSubstitution2;
      objectArray2[5] = (Object) "&xD^h,3";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator1);
      jSSubstitution2.trimToSize();
      jSSubstitution2.toArray(objectArray1);
      jSSubstitution1.add((Object) "ucV>ghWZ3&G6j{");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      jSTerm0.toArray();
      JSJshopVars.flagLevel = 0;
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopVars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      String string0 = "&xD^h,3";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add(objectArray0[2]);
      Object[] objectArray2 = new Object[8];
      objectArray2[1] = (Object) jSSubstitution0;
      objectArray2[4] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray2[3] = (Object) jSSubstitution0;
      jSSubstitution0.add((Object) "&xD^h,3");
      objectArray1[0] = (Object) "&xD^h,3";
      jSSubstitution0.trimToSize();
      jSSubstitution0.toArray(objectArray1);
      jSTerm0.add(0, (Object) "umd.cs.shop.JSJshopVars");
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2326944771870667
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis(2649L);
      System.setCurrentTimeMillis(2649L);
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.lessT = 32;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      jSTerm1.removeIf(predicate2);
      JSJshopVars.whiteSpace = 46;
      jSTerm1.isEval();
      predicate1.negate();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm3.toStr();
      jSTerm2.add((Object) predicate2);
      jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      jSTerm0.makeEval(true);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.trimToSize();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm1);
      jSSubstitution0.add(objectArray0[1]);
      Object[] objectArray3 = jSSubstitution0.toArray(objectArray1);
      Integer integer0 = new Integer(96);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.addAll((Collection) jSSubstitution0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(anyInt() , anyInt());
      jSSubstitution0.sort(comparator1);
      Object[] objectArray4 = jSSubstitution0.toArray(objectArray3);
      Object[] objectArray5 = jSSubstitution0.toArray(objectArray4);
      jSSubstitution0.toArray(objectArray5);
      jSSubstitution0.toArray(objectArray1);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopars");
      StringReader stringReader1 = new StringReader("umd.cs.shop.JSJshopars");
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopVars";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object[] objectArray1 = new Object[8];
      objectArray1[1] = (Object) jSSubstitution0;
      objectArray1[4] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray1[3] = (Object) jSSubstitution0;
      objectArray1[4] = (Object) jSSubstitution0;
      objectArray1[5] = (Object) "&cD^h,3";
      jSSubstitution1.trimToSize();
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[14];
      JSJshopVars.astherisk = (-1903);
      objectArray0[0] = (Object) jSTerm0;
      JSJshopVars.percent = 63;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.remove(objectArray0[3]);
      jSSubstitution0.trimToSize();
      jSSubstitution0.add(objectArray0[1]);
      Object[] objectArray3 = jSSubstitution0.toArray(objectArray1);
      Integer integer0 = new Integer(96);
      jSTerm0.addAll((Collection) jSSubstitution0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyInt() , anyInt());
      jSSubstitution0.sort(comparator1);
      jSSubstitution0.toArray(objectArray3);
      jSSubstitution0.add(objectArray0[1]);
      jSSubstitution0.toArray(objectArray2);
      Object[] objectArray4 = jSTerm0.toArray();
      jSSubstitution0.toArray(objectArray4);
      System.setCurrentTimeMillis((-3976L));
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.449571489788331
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      jSTerm0.insertElementAt("JSTerm", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      char[] charArray0 = new char[21];
      charArray0[0] = '0';
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.isEval();
      jSSubstitution0.trimToSize();
      jSTerm0.set(0, jSTerm2);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '0';
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[2] = (Object) jSTerm2;
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) jSTerm2;
      Object[] objectArray1 = jSSubstitution0.toArray(objectArray0);
      Object object0 = new Object();
      jSSubstitution0.toArray(objectArray1);
      StringReader stringReader0 = new StringReader("tcD}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.print();
      jSTerm0.call();
      streamTokenizer0.sval = "JSTerm";
      jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.equalT = (-931);
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.add(objectArray0[1]);
      jSSubstitution0.toArray(objectArray1);
      Object[] objectArray3 = new Object[0];
      Object[] objectArray4 = jSSubstitution0.toArray(objectArray3);
      Integer integer0 = new Integer(96);
      jSTerm0.addAll((Collection) jSSubstitution0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyString() , anyString());
      jSSubstitution0.sort(comparator1);
      jSSubstitution0.toArray(objectArray0);
      Object object0 = new Object();
      jSSubstitution0.add((Object) integer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.toArray(objectArray4);
      StringReader stringReader0 = new StringReader("V.MM%C@W");
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.540305825226517
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(64, 64);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2821740957339176
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(37, 64);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      stringReader0.skip(64);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) "@.C*y");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      jSTerm3.matches((JSPredicateForm) jSTerm2, jSSubstitution1);
      jSTerm1.standardizerTerm();
      jSTerm2.toStr();
      jSTerm0.cloneT();
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" (5%3-ec5#R;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("-\"sd<ijCp6HG%cDCQL");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.090031339560648
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      jSTerm1.matches((JSPredicateForm) jSTerm2, jSSubstitution0);
      jSTerm0.equals(jSTerm3);
      jSTerm3.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '\\';
      charArray0[2] = 'd';
      stringReader0.read(charArray0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm4.removeAllElements();
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      jSTerm2.equals(jSTerm4);
      // Undeclared exception!
      try { 
        jSTerm4.matches(jSTerm5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.171546030553765
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.capacity();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution2.fail());
      
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.ensureCapacity(10);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm2.matches((JSPredicateForm) jSTerm0, jSSubstitution3);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      System.setCurrentTimeMillis((-1L));
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm3.applySubstitutionT(jSSubstitution8);
      assertNotSame(jSTerm3, jSTerm2);
      assertTrue(jSTerm3.isFunction());
      
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution6);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.015571510717175
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      jSTerm0.equals(jSTerm0);
      jSTerm0.insertElementAt("umr.cs.shop.SJshopVars", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.matches(jSTerm0, (JSSubstitution) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      jSTerm0.equals(jSTerm0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      jSTerm0.listIterator();
      jSTerm1.add((Object) null);
      jSTerm0.matches((JSPredicateForm) jSTerm0);
      charArray0[2] = 'd';
      jSTerm1.capacity();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(37, 64);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.parseNumbers();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = null;
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add((Object) streamTokenizer0);
      System.setCurrentTimeMillis(233L);
      jSTerm0.firstElement();
      jSTerm0.lastElement();
      jSTerm0.isGround();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = null;
      objectArray0[1] = (Object) "%%%";
      objectArray0[2] = (Object) jSTerm0;
      stringReader0.ready();
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSTerm0;
      jSSubstitution1.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.325742934096395
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopVars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.lastElement();
      jSSubstitution0.add((Object) "umd.cs.shop.JSJshopVars");
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      objectArray2[1] = (Object) jSSubstitution0;
      objectArray2[4] = (Object) "&xD^h,3";
      objectArray2[3] = (Object) jSSubstitution0;
      objectArray2[4] = (Object) jSSubstitution0;
      Object[] objectArray3 = new Object[0];
      jSTerm0.toArray(objectArray3);
      objectArray2[5] = (Object) "&xD^h,3";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator1);
      Object[] objectArray4 = jSSubstitution1.toArray(objectArray1);
      Object[] objectArray5 = jSSubstitution1.toArray(objectArray4);
      jSSubstitution0.toArray(objectArray5);
      jSTerm0.print();
      StringReader stringReader0 = new StringReader("?5M:_-*kz)[!E=,IxV");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals("[., [?5M:-*kz], [nil]]", jSTerm2.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      Object object0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1086531367191856
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("JSTerm", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      char[] charArray0 = new char[21];
      charArray0[0] = '0';
      jSTerm0.capacity();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.removeAll(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.ensureCapacity(2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution7);
      jSTerm0.cloneT();
      System.setCurrentTimeMillis((-1L));
      jSTerm1.equals(jSTerm1);
      jSTerm1.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis((-1802L));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9721037385162659
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "umd.cs.shop.JSJshopVars";
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm1.makeFunction();
      jSTerm0.insertElementAt(jSTerm1, 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.equals(jSTerm3);
      Reader reader0 = null;
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.30815063507286
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm2.isVariable());
      
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      assertNotNull(jSSubstitution0);
      
      jSTerm1.matches((JSPredicateForm) jSTerm2, jSSubstitution0);
      jSTerm0.equals(jSTerm3);
      jSTerm3.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '\\';
      charArray0[2] = 'd';
      stringReader0.read(charArray0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSTerm jSTerm5 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm5.print();
      JSTerm jSTerm6 = jSTerm5.cloneT();
      assertTrue(jSTerm6.isFunction());
      assertNotSame(jSTerm6, jSTerm5);
      
      boolean boolean0 = jSTerm2.equals(jSTerm4);
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm5);
      
      jSTerm4.isConstant();
      assertFalse(jSTerm4.isEval());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.equalT = (-931);
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.add(objectArray0[1]);
      jSSubstitution0.toArray(objectArray1);
      Object[] objectArray3 = new Object[0];
      Object[] objectArray4 = jSSubstitution0.toArray(objectArray3);
      Integer integer0 = new Integer(96);
      jSTerm0.addAll((Collection) jSSubstitution0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyString() , anyString());
      jSSubstitution0.sort(comparator1);
      jSSubstitution0.toArray(objectArray0);
      Object object0 = new Object();
      jSSubstitution0.add((Object) integer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.toArray(objectArray4);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.minus = (-810);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("?");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1935496040981333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'gnie7?c`$qAt.");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(stringReader0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'C';
      charArray0[2] = 'F';
      charArray0[3] = '_';
      charArray0[4] = 'I';
      jSTerm0.stream();
      charArray0[5] = ':';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      StringReader stringReader1 = new StringReader("-\"sd<ijCp6HG%cDCQL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "%%%";
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8139764379032464
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(61, 61);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.dot = (-1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      jSTerm0.equals(jSTerm0);
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      jSTerm0.addAll((Collection) jSSubstitution3);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.equals(jSTerm0);
      StringReader stringReader1 = new StringReader(", ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm3.matches(jSTerm2);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2006631885058168
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(37, 64);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSTerm0.clone();
      stringReader0.skip(64);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) "@.C*y");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm2.matches((JSPredicateForm) jSTerm1, jSSubstitution1);
      jSTerm2.cloneT();
      jSTerm0.standardizerTerm();
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.508662537838346
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      jSTerm1.matches((JSPredicateForm) jSTerm2, jSSubstitution0);
      JSJshopVars.interrogation = 2;
      jSTerm0.equals(jSTerm3);
      jSTerm3.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[3];
      jSTerm2.makeVariable();
      charArray0[0] = '0';
      charArray0[1] = '\\';
      charArray0[2] = 'd';
      stringReader0.read(charArray0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm5 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm5.cloneT();
      jSTerm2.call();
      assertTrue(jSTerm2.isVariable());
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.067188784530552
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      jSTerm0.ensureCapacity(39);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.trimToSize();
      jSTerm0.isFunction();
      jSTerm1.isFunction();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.equals(jSTerm1);
      assertEquals(39, jSTerm0.capacity());
      
      StringReader stringReader0 = new StringReader("28TiMO6~IVtX");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer1);
      jSTerm3.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution1 = jSTerm4.matches(jSTerm3, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.274350322260625
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("JSTerm", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm1);
      jSSubstitution1.sort((Comparator) null);
      jSSubstitution1.trimToSize();
      jSSubstitution0.add((Object) "JSTerm");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "JSTerm";
      objectArray0[1] = (Object) "JSTerm";
      jSSubstitution2.toArray(objectArray0);
      Integer integer0 = new Integer(0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.addAll((Collection) jSTerm1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.toArray(objectArray0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals(jSTerm2);
      StringReader stringReader0 = new StringReader("7C)QUVz}o<<5/s1/i&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm4.matches(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8288411561741995
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.insertElementAt(jSTerm1, 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = null;
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm2, (JSSubstitution) null);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm2, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.1997255968203184
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVarf", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSJshopVars.VarCounter = 0;
      JSJshopVars.minus = (-810);
      jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches((JSPredicateForm) jSTerm2, jSSubstitution0);
      jSTerm3.equals(jSTerm0);
      char[] charArray0 = new char[3];
      charArray0[2] = 'd';
      StringReader stringReader0 = new StringReader("?");
      jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm2.removeAllElements();
      jSTerm0.cloneT();
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.equals(jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.7968158110159926
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(58, 58);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.dot = (-1);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      jSTerm2.equals(jSTerm0);
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm2, jSSubstitution1);
      jSTerm0.addAll((Collection) jSSubstitution3);
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.equals(jSTerm2);
      StringReader stringReader1 = new StringReader(", ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm4.matches(jSTerm3);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.260383442732212
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopVars";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.capacity();
      StringReader stringReader0 = new StringReader("4'a*x7s");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.ensureCapacity(10);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm0.matches((JSPredicateForm) jSTerm2, jSSubstitution2);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      System.setCurrentTimeMillis(0);
      jSTerm3.equals(jSTerm2);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm3.applySubstitutionT(jSSubstitution8);
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.154783153373369
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopVars";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object[] objectArray1 = new Object[8];
      objectArray1[1] = (Object) jSSubstitution0;
      objectArray1[4] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray1[3] = (Object) jSSubstitution0;
      objectArray1[4] = (Object) jSSubstitution0;
      objectArray1[5] = (Object) "&c<yh,3";
      jSSubstitution1.trimToSize();
      jSSubstitution1.toArray(objectArray0);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      jSTerm0.call();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.matches(jSTerm1);
      jSTerm1.call();
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8540543601748039
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopVars";
      JSJshopVars.rightBrac = (-240);
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopVars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      objectArray2[1] = (Object) jSSubstitution0;
      objectArray2[4] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray2[3] = (Object) jSSubstitution0;
      objectArray2[4] = (Object) jSSubstitution0;
      objectArray2[5] = (Object) "&cD^h,3";
      jSSubstitution1.trimToSize();
      jSSubstitution1.toArray(objectArray1);
      jSSubstitution1.toArray(objectArray0);
      JSJshopVars.flagLevel = 0;
      jSTerm0.print();
      jSTerm1.addAll((Collection) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      assertEquals("[[umd.cs.shop.JSJshopVars]]", jSSubstitution0.toString());
      assertFalse(jSTerm0.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.4205719259467042
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = 'e';
      charArray0[3] = '|';
      charArray0[4] = '3';
      charArray0[5] = '3';
      charArray0[6] = '3';
      charArray0[7] = '3';
      charArray0[8] = '3';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.add((Object) null);
      StringReader stringReader1 = new StringReader("QU<rZq3T;ldo");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.346587260948299
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("JSTerm", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      char[] charArray0 = new char[21];
      charArray0[0] = '0';
      jSTerm0.capacity();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.removeAll(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution2);
      assertFalse(jSSubstitution2.fail());
      assertTrue(jSTerm2.isFunction());
      
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.ensureCapacity(2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution7);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      JSTerm jSTerm4 = new JSTerm();
      boolean boolean0 = jSTerm1.equals(jSTerm4);
      JSSubstitution jSSubstitution8 = jSTerm3.matches(jSTerm1);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSSubstitution8.fail());
      
      JSTerm jSTerm5 = jSTerm1.call();
      assertNotSame(jSTerm1, jSTerm2);
      assertTrue(jSTerm5.isFunction());
      assertNotSame(jSTerm5, jSTerm1);
      assertEquals(10, jSTerm5.capacity());
      
      boolean boolean1 = jSTerm4.equals(jSTerm3);
      assertTrue(jSTerm3.isFunction());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "@.C*y";
      StringReader stringReader0 = new StringReader("@.C*y");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.174218708249946
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("JSTerm", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      char[] charArray0 = new char[21];
      charArray0[0] = '0';
      charArray0[2] = 'd';
      jSTerm0.capacity();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.removeAll(jSSubstitution2);
      Spliterator spliterator0 = jSTerm0.spliterator();
      jSSubstitution2.add((Object) spliterator0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.ensureCapacity(2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm0.makeVariable();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution7);
      jSTerm0.cloneT();
      jSTerm0.standardizerTerm();
      System.setCurrentTimeMillis((-1L));
      boolean boolean0 = jSTerm3.equals(jSTerm2);
      assertTrue(jSTerm0.isVariable());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.1795119472741935
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      jSTerm1.matches((JSPredicateForm) jSTerm2, jSSubstitution0);
      JSJshopVars.interrogation = 2;
      jSTerm0.equals(jSTerm3);
      jSTerm3.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[3];
      jSTerm2.makeVariable();
      charArray0[0] = '0';
      jSTerm2.clear();
      charArray0[1] = '\\';
      charArray0[2] = 'd';
      stringReader0.read(charArray0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.9002560512685369
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopars";
      jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopars", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) jSTerm0;
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.trimToSize();
      jSSubstitution0.add(objectArray0[1]);
      jSSubstitution0.add((Object) "umd.cs.shop.JSJshopars");
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(anyInt() , anyInt());
      jSSubstitution0.sort(comparator1);
      jSSubstitution0.toArray(objectArray1);
      StringReader stringReader0 = new StringReader("7.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Object object0 = jSTerm1.clone();
      jSSubstitution0.add(object0);
      jSSubstitution0.toArray(objectArray0);
      StringReader stringReader1 = new StringReader("7.0");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = new StringReader("7.0");
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertFalse(jSTerm1.isEval());
      assertEquals("7.0 ", stringBuffer0.toString());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopVars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      objectArray2[4] = (Object) "&xD^h,3";
      objectArray1[0] = (Object) "&xD^h,3";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StringReader stringReader1 = new StringReader("umd.cs.shop.JSJshopVars");
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("(umd.cs.shop.JSJshopVars )", stringBuffer0.toString());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.4287691203187398
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopVars";
      jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      jSTerm0.clone();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.toArray(objectArray0);
      StringReader stringReader0 = new StringReader("i? y0h.Pc0OfN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution3.fail());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.quoteChar(0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1988493129136213
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(37, 64);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add((Object) streamTokenizer0);
      System.setCurrentTimeMillis(233L);
      jSTerm0.firstElement();
      // Undeclared exception!
      try { 
        jSTerm0.set(19, (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 19
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9466722012149666
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("JSTerm", 0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm2, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.equals(jSTerm0);
      jSTerm2.equals(jSTerm1);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm2.addAll((Collection) jSSubstitution1);
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm1.equals(jSTerm3);
      StringReader stringReader0 = new StringReader("28.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm5.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[14];
      JSJshopVars.astherisk = (-1903);
      objectArray0[0] = (Object) jSTerm0;
      JSJshopVars.percent = 63;
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.trimToSize();
      jSSubstitution0.add(objectArray0[1]);
      Object[] objectArray3 = jSSubstitution0.toArray(objectArray1);
      Integer integer0 = new Integer(96);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.addAll((Collection) jSSubstitution0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyInt() , anyInt());
      jSSubstitution0.sort(comparator1);
      jSSubstitution0.toArray(objectArray3);
      jSSubstitution0.add(objectArray0[1]);
      jSSubstitution0.toArray(objectArray2);
      Object[] objectArray4 = jSTerm0.toArray();
      jSSubstitution0.toArray(objectArray4);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[14];
      JSJshopVars.astherisk = (-1903);
      objectArray0[0] = (Object) jSTerm0;
      JSJshopVars.percent = 63;
      objectArray0[1] = (Object) "%%%";
      objectArray0[2] = (Object) "%%%";
      objectArray0[3] = (Object) "%%%";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) jSTerm0;
      Integer integer0 = new Integer(96);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(37, 64);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add((Object) streamTokenizer0);
      System.setCurrentTimeMillis(233L);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0888999753452235
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = "'gnie7?c`$qAt.";
      StringReader stringReader0 = new StringReader(";7#BLm_{N%|41");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader1 = new StringReader(",vr");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string1 = "";
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader1 = new StringReader("-\"sd<ijCp~HG%cJCQL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      jSTerm0.standardizerTerm();
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      boolean boolean0 = true;
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.whitespaceChars((-2385), 123);
      streamTokenizer0.ordinaryChar(126);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      unaryOperator0.apply(jSSubstitution0);
      Function<JSSubstitution, String> function0 = (Function<JSSubstitution, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super JSSubstitution, ?>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 37;
      streamTokenizer0.whitespaceChars(37, 64);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'gnie7?c`$qAt.");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "'gnie7?c`$qAt.");
      StringReader stringReader1 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = new StringReader("SE\":Bk");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function<Object, Object> function0 = Function.identity();
      unaryOperator0.andThen((Function<? super JSSubstitution, ?>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      int int0 = 0;
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.8805945173035012
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      int int0 = 0;
      jSTerm0.equals(jSTerm0);
      jSTerm0.insertElementAt("umr.cs.shop.SJshopVars", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      jSTerm1.isFunction();
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      jSTerm1.add((Object) null);
      jSTerm0.matches((JSPredicateForm) jSTerm0);
      charArray0[2] = 'd';
      jSTerm1.capacity();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(4606);
      streamTokenizer0.quoteChar(124);
      streamTokenizer0.sval = "%%%";
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.022456924203762
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("JSTerm", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      char[] charArray0 = new char[21];
      charArray0[0] = '0';
      charArray0[2] = 'd';
      jSTerm0.capacity();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.removeAll(jSSubstitution2);
      Spliterator spliterator0 = jSTerm0.spliterator();
      jSSubstitution2.add((Object) spliterator0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.ensureCapacity(2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution7);
      jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      boolean boolean0 = jSTerm2.isFunction();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7986522062521288
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm0.removeAllElements();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate0.or(predicate2);
      predicate2.and(predicate3);
      predicate3.negate();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.4205719259467042
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.trimToSize();
      jSSubstitution0.add(objectArray0[1]);
      Object[] objectArray3 = jSSubstitution0.toArray(objectArray1);
      Integer integer0 = new Integer(96);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.addAll((Collection) jSSubstitution0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyInt() , anyInt());
      jSSubstitution0.sort(comparator1);
      jSSubstitution0.toArray(objectArray3);
      jSSubstitution0.add(objectArray0[1]);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.toArray(objectArray3);
      StringReader stringReader0 = new StringReader("Yh=mz*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm2.isConstant());
      assertNotSame(jSTerm2, jSTerm1);
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.2700181519104905
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSJshopVars.equalT = 1478;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("p3p4b)0DxH {");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.parseList(streamTokenizer0);
      streamTokenizer0.whitespaceChars(60, (-720));
      StringReader stringReader1 = new StringReader("%%%");
      stringReader1.mark(2);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.quoteChar((-1));
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      stringReader1.read(charArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rb");
      stringReader0.markSupported();
      stringReader0.markSupported();
      stringReader0.markSupported();
      stringReader0.reset();
      System.setCurrentTimeMillis((-3375L));
      System.setCurrentTimeMillis(39L);
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'gnie7?c`$qAt.");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader1 = new StringReader("-\"sd<ijCp6HG%cDCQL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = "";
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1269287948006759
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("h8B1LF");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'gnie7?c`$qAt.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
