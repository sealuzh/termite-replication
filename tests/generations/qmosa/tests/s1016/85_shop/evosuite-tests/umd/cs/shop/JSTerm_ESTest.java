/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 09:59:37 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.680759263938475
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm3, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm3.matches((JSTerm) null, jSSubstitution2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.606483544522957
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("n8;qnbdLK%)k>P");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.spliterator();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.VarCounter = 41;
      jSTerm2.clonePF();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      stringReader0.ready();
      jSTerm1.call();
      JSJshopVars.backquote = (-1461);
      stringReader0.close();
      streamTokenizer0.lowerCaseMode(false);
      try { 
        stringReader0.skip((-2217L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.624945863276291
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("JSOTerw", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      char[] charArray0 = new char[21];
      charArray0[0] = '0';
      charArray0[2] = 'd';
      jSTerm0.capacity();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.removeAll(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.clear();
      jSTerm0.ensureCapacity(2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSJshopVars.exclamation = 10;
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution7);
      jSTerm0.cloneT();
      System.setCurrentTimeMillis('d');
      jSTerm2.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      String string0 = null;
      jSTerm0.insertElementAt((Object) null, 0);
      jSTerm0.insertElementAt((Object) null, 0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6210811289767744
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("5JSOT'rw", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      char[] charArray0 = new char[21];
      charArray0[2] = 'd';
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.listIterator(0);
      jSSubstitution1.insertElementAt(jSSubstitution4, 0);
      jSSubstitution1.addElement(jSSubstitution4);
      Integer integer0 = new Integer('d');
      charArray0[12] = 'd';
      JSJshopVars.rightBrac = 0;
      JSJshopVars.interrogation = (-2);
      JSJshopVars.interrogation = 0;
      jSTerm0.set(0, jSSubstitution1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSJshopVars.minus = 2;
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSTerm0.cloneT();
      JSJshopVars.backquote = (int) 'd';
      // Undeclared exception!
      try { 
        jSTerm2.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "))36_cC'f*x{F";
      objectArray0[1] = (Object) "))36_cC'f*x{F";
      objectArray0[3] = (Object) "))36_cC'f*x{F";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt("))36_cC'f*x{F", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual(objectArray0[1]);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.and(predicate0);
      Predicate<String> predicate3 = predicate2.or(predicate0);
      predicate2.negate();
      Predicate.isEqual(objectArray0[3]);
      Predicate.isEqual((Object) predicate3);
      jSSubstitution0.removeIf(predicate3);
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[7];
      objectArray2[3] = (Object) jSTerm0;
      objectArray2[1] = (Object) jSSubstitution0;
      objectArray2[4] = (Object) "&xD^h,3";
      objectArray2[3] = (Object) jSSubstitution0;
      jSTerm0.add(objectArray2[0]);
      objectArray2[4] = (Object) jSSubstitution0;
      jSSubstitution0.add((Object) "))36_cC'f*x{F");
      jSSubstitution0.add(objectArray2[3]);
      objectArray1[0] = (Object) "&xD^h,3";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(any() , any());
      jSSubstitution0.sort(comparator1);
      StringReader stringReader0 = new StringReader("r6f^p6+?$");
      StringReader stringReader1 = new StringReader("#;k");
      StringReader stringReader2 = new StringReader("K/U];<F]D)X(");
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7423467832362118
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "))36_cC'f*x{F";
      objectArray0[1] = (Object) "))36_cC'f*x{F";
      objectArray0[3] = (Object) "))36_cC'f*x{F";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt("))36_cC'f*x{F", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual(objectArray0[1]);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.and(predicate0);
      Predicate<String> predicate3 = predicate2.or(predicate0);
      predicate2.negate();
      Predicate.isEqual(objectArray0[3]);
      Predicate.isEqual((Object) predicate3);
      jSSubstitution0.removeIf(predicate3);
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[7];
      objectArray2[0] = (Object) jSTerm0;
      objectArray2[1] = (Object) jSSubstitution0;
      objectArray2[4] = (Object) "&xD^h,3";
      objectArray2[3] = (Object) jSSubstitution0;
      jSTerm0.add(objectArray2[0]);
      objectArray2[4] = (Object) jSSubstitution0;
      jSSubstitution0.add((Object) "))36_cC'f*x{F");
      jSSubstitution0.add(objectArray2[3]);
      objectArray1[0] = (Object) "&xD^h,3";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(any() , any());
      jSSubstitution0.sort(comparator1);
      StringReader stringReader0 = new StringReader("r6f^p6+?$");
      StringReader stringReader1 = new StringReader("#;k");
      StringReader stringReader2 = new StringReader("K/U];<F]D)X(");
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5441310817026408
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("%%%", 0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "%OqX{[0b^ {emka.b");
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm1);
      jSSubstitution0.add(object0);
      Integer integer1 = new Integer(0);
      unaryOperator0.apply(integer1);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.get(0);
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator0);
      jSSubstitution1.removeElement(object0);
      jSSubstitution1.add(0, (Object) unaryOperator0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) "%OqX{[0b^ {emka.b";
      jSSubstitution1.toArray(objectArray0);
      Integer integer2 = new Integer(74);
      jSSubstitution0.add((Object) integer2);
      jSSubstitution1.add((Object) null);
      StringReader stringReader0 = new StringReader("%OqX{[0b^ {emka.b");
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.750568168175101
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("5JSOT'rw", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      char[] charArray0 = new char[21];
      charArray0[2] = 'd';
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.listIterator(0);
      jSSubstitution1.insertElementAt(jSSubstitution4, 0);
      jSSubstitution1.addElement(jSSubstitution4);
      Integer integer0 = new Integer('d');
      JSJshopVars.greaterT = (int) 'd';
      JSJshopVars.interrogation = 0;
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSJshopVars.minus = 2;
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSTerm0.cloneT();
      JSJshopVars.backquote = (int) 'd';
      jSTerm2.equals(jSTerm1);
      StringReader stringReader0 = new StringReader(") ");
      System.setCurrentTimeMillis(0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.parseList(streamTokenizer0);
      assertEquals("[5JSOT'rw]", jSTerm0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0011929089785596
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.hop.JSJshopVar";
      objectArray0[2] = (Object) "umd.cs.hop.JSJshopVar";
      jSTerm0.toArray(objectArray0);
      objectArray0[3] = (Object) "umd.cs.hop.JSJshopVar";
      jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt("umd.cs.hop.JSJshopVar", 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray1 = new Object[8];
      objectArray0[3] = (Object) jSTerm0;
      objectArray1[4] = (Object) "&xD^h,3";
      jSTerm0.listIterator(0);
      objectArray1[5] = (Object) "&xD^h,3";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.print();
      StringReader stringReader0 = new StringReader("] ");
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5850272444622417
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JJshopVars";
      objectArray0[2] = (Object) "umd.cs.shop.JJshopVars";
      JSJshopVars.rightBrac = (-240);
      objectArray0[3] = (Object) "umd.cs.shop.JJshopVars";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt("umd.cs.shop.JJshopVars", 0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      objectArray2[1] = (Object) jSSubstitution0;
      objectArray2[4] = (Object) "umd.cs.shop.JJshopVars";
      objectArray1[0] = (Object) jSSubstitution0;
      objectArray2[4] = (Object) jSSubstitution0;
      objectArray2[5] = (Object) "&cD^h,3";
      jSSubstitution1.trimToSize();
      jSSubstitution1.toArray(objectArray1);
      jSSubstitution1.toArray(objectArray0);
      JSJshopVars.flagLevel = 0;
      jSTerm0.print();
      jSTerm1.addAll((Collection) jSSubstitution0);
      jSTerm1.call();
      JSJshopVars.coma = (-162);
      JSJshopVars.VarCounter = (-240);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.print();
      StringReader stringReader0 = new StringReader("&cD^h,3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "))36_cC'f*x{F";
      objectArray0[3] = (Object) "))36_cC'f*x{F";
      jSTerm0.insertElementAt("))36_cC'f*x{F", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      Object[] objectArray1 = new Object[7];
      objectArray1[1] = (Object) jSSubstitution0;
      objectArray1[4] = (Object) "&xD^h,3";
      objectArray1[3] = (Object) jSSubstitution0;
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      objectArray1[4] = (Object) jSSubstitution0;
      jSSubstitution0.add(objectArray0[3]);
      jSSubstitution0.add((Object) null);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator1).compare(any() , any());
      jSSubstitution0.sort(comparator1);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1693712248079184
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%R2EkZ1g?yjc{z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.toStr();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm0.forEach((Consumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      jSTerm0.insertElementAt("jhJ)H/j. qb9DIU=1}", 0);
      jSTerm0.add(0, (Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      String string0 = null;
      jSTerm0.insertElementAt((Object) null, 0);
      jSTerm0.add(0, (Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSJshopVars.astherisk = 2663;
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.apostrophe = 43;
      JSJshopVars.percent = 42;
      jSTerm1.removeAllElements();
      int int0 = (-2957);
      // Undeclared exception!
      try { 
        jSTerm1.remove((-2957));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2957
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("Jr", 0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate1.and(predicate0);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      Predicate<Object> predicate7 = predicate4.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate6.and(predicate7);
      predicate8.and(predicate9);
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate<String> predicate11 = predicate2.and(predicate5);
      predicate6.or(predicate8);
      Predicate<String> predicate12 = predicate1.or(predicate0);
      predicate8.negate();
      predicate8.negate();
      predicate8.negate();
      predicate10.negate();
      Predicate<String> predicate13 = predicate1.negate();
      Predicate<Object> predicate14 = predicate5.negate();
      Predicate<Object> predicate15 = predicate14.or(predicate8);
      predicate15.or(predicate10);
      Predicate<String> predicate16 = predicate1.and(predicate14);
      predicate13.negate();
      predicate16.negate();
      predicate1.and(predicate14);
      predicate0.or(predicate2);
      Predicate<String> predicate17 = predicate12.or(predicate13);
      predicate17.negate();
      predicate1.negate();
      jSTerm0.toString();
      Predicate.isEqual((Object) predicate11);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9423251129767367
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      jSTerm0.insertElementAt("JSTerm", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      char[] charArray0 = new char[21];
      charArray0[0] = '0';
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.isEval();
      jSSubstitution0.trimToSize();
      jSTerm0.set(0, jSTerm2);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '0';
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[2] = (Object) jSTerm2;
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) jSTerm2;
      Object[] objectArray1 = jSSubstitution0.toArray(objectArray0);
      Object object0 = new Object();
      jSSubstitution0.toArray(objectArray1);
      StringReader stringReader0 = new StringReader("tcD}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.print();
      jSTerm0.call();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "))36_cC'f*x{F";
      objectArray0[2] = (Object) "))36_cC'f*x{F";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      objectArray0[3] = (Object) "))36_cC'f*x{F";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.add(objectArray0[3]);
      Object[] objectArray2 = new Object[7];
      objectArray2[0] = (Object) jSTerm0;
      objectArray2[1] = (Object) jSSubstitution0;
      objectArray2[4] = (Object) "&xD^h,3";
      objectArray2[3] = (Object) jSSubstitution0;
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      objectArray2[4] = (Object) jSSubstitution0;
      jSSubstitution0.add((Object) "))36_cC'f*x{F");
      objectArray1[0] = (Object) "&xD^h,3";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator1).compare(any() , any());
      Object object1 = new Object();
      jSSubstitution0.add(object1);
      jSSubstitution0.sort(comparator1);
      jSSubstitution0.add(0, objectArray2[3]);
      jSSubstitution0.add(objectArray0[1]);
      jSSubstitution0.add((Object) comparator0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0018442867649786
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(64, 64);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.777412190972013
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(37, 64);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      stringReader0.skip(64);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) "@.C*y");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      jSTerm3.matches((JSPredicateForm) jSTerm2, jSSubstitution1);
      jSTerm1.standardizerTerm();
      jSTerm2.toStr();
      jSTerm0.cloneT();
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" (5%3-ec5#R;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.634716954962062
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(61, 61);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2, jSSubstitution0);
      jSTerm0.print();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm0, jSSubstitution2);
      jSTerm2.removeAll(jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution0.ensureCapacity((-1));
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.58487670038539
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      jSTerm1.matches((JSPredicateForm) jSTerm2, jSSubstitution0);
      jSTerm0.equals(jSTerm3);
      jSTerm3.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '\\';
      charArray0[2] = 'd';
      stringReader0.read(charArray0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm4.removeAllElements();
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      jSTerm2.equals(jSTerm4);
      // Undeclared exception!
      try { 
        jSTerm4.matches(jSTerm5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.507096934445989
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      jSTerm0.equals(jSTerm0);
      jSTerm0.insertElementAt("umr.cs.shop.SJshopVars", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.matches(jSTerm0, (JSSubstitution) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      jSTerm0.equals(jSTerm0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      jSTerm0.listIterator();
      jSTerm1.add((Object) null);
      jSTerm0.matches((JSPredicateForm) jSTerm0);
      charArray0[2] = 'd';
      jSTerm1.capacity();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6602162707648
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'gnie7?c`$qAt.");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(stringReader0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'C';
      charArray0[2] = 'F';
      charArray0[3] = '_';
      charArray0[4] = 'I';
      jSTerm0.stream();
      charArray0[5] = ':';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      StringReader stringReader1 = new StringReader("-\"sd<ijCp6HG%cDCQL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BB`hmv|)-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      Object object0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5878861544337055
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "";
      int int0 = 0;
      jSTerm0.insertElementAt("", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.exclamation = 0;
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm0.addAll(0, (Collection) jSTerm2);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.removeAll(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.ensureCapacity(0);
      jSTerm0.listIterator();
      jSSubstitution3.add((Object) "");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7437023624368062
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSJshopVars.equalT = 1478;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("p3p4b)0DxH {");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.parseList(streamTokenizer0);
      streamTokenizer0.whitespaceChars(60, (-720));
      StringReader stringReader1 = new StringReader("%%%");
      stringReader1.mark(2);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.quoteChar((-1));
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      stringReader1.read(charArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.791800403874512
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      jSTerm1.matches((JSPredicateForm) jSTerm2, jSSubstitution0);
      jSTerm0.equals(jSTerm3);
      jSTerm3.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '\\';
      charArray0[2] = 'd';
      stringReader0.read(charArray0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSTerm jSTerm5 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm5.print();
      JSJshopVars.percent = 40;
      JSTerm jSTerm6 = jSTerm5.cloneT();
      assertNotSame(jSTerm6, jSTerm5);
      assertTrue(jSTerm5.isFunction());
      assertTrue(jSTerm6.isFunction());
      
      jSTerm2.equals(jSTerm4);
      assertFalse(jSTerm2.isEval());
      
      jSTerm4.isConstant();
      jSTerm4.print();
      assertFalse(jSTerm4.isEval());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.206552161926179
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-1556));
      streamTokenizer0.commentChar((-1556));
      streamTokenizer0.ordinaryChars(34, (-1556));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.quoteChar(38);
      stringReader0.ready();
      System.setCurrentTimeMillis((-4));
      streamTokenizer0.ordinaryChar(864);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer2.parseNumbers();
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.0353829013663782
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.equals(jSTerm0);
      jSTerm0.equals(jSTerm0);
      jSTerm0.listIterator();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.matches(jSTerm0);
      jSTerm0.call();
      jSTerm0.standardizerTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm2.isGround();
      System.setCurrentTimeMillis((-1));
      jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.0043147117513893
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm2.isVariable());
      
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      jSTerm1.matches((JSPredicateForm) jSTerm2, jSSubstitution0);
      JSJshopVars.interrogation = 2;
      jSTerm0.equals(jSTerm3);
      jSTerm3.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[3];
      jSTerm2.makeVariable();
      charArray0[0] = '0';
      charArray0[1] = '\\';
      charArray0[2] = 'd';
      stringReader0.read(charArray0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm5 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm5.cloneT();
      jSTerm2.call();
      assertFalse(jSTerm2.isFunction());
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.556984702897899
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      jSTerm0.ensureCapacity(39);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.trimToSize();
      jSTerm0.isFunction();
      jSTerm1.isFunction();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.equals(jSTerm1);
      assertEquals(39, jSTerm0.capacity());
      
      StringReader stringReader0 = new StringReader("28TiMO6~IVtX");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer1);
      jSTerm3.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution1 = jSTerm4.matches(jSTerm3, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      StringReader stringReader0 = new StringReader("b^(QkO1e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isVariable());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.621553942215545
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("5JSOT'rw", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      char[] charArray0 = new char[21];
      charArray0[2] = 'd';
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.listIterator(0);
      jSSubstitution1.insertElementAt(jSSubstitution4, 0);
      jSSubstitution1.addElement(jSSubstitution4);
      Integer integer0 = new Integer('d');
      JSJshopVars.greaterT = (int) 'd';
      JSJshopVars.interrogation = (-2);
      JSJshopVars.interrogation = 0;
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSJshopVars.minus = 2;
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution10);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSTerm0.cloneT();
      JSJshopVars.backquote = (int) 'd';
      jSTerm2.equals(jSTerm1);
      StringReader stringReader0 = new StringReader(") ");
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.4614654406439254
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "";
      int int0 = 0;
      jSTerm0.insertElementAt("", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.remove((Object) "");
      jSTerm1.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.exclamation = 0;
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.removeAll(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.ensureCapacity(0);
      jSTerm1.applySubstitutionT(jSSubstitution2);
      jSSubstitution3.add((Object) "");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.6930589301536516
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVarf", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSJshopVars.VarCounter = 0;
      JSJshopVars.minus = (-810);
      jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches((JSPredicateForm) jSTerm2, jSSubstitution0);
      jSTerm3.equals(jSTerm0);
      char[] charArray0 = new char[3];
      charArray0[2] = 'd';
      StringReader stringReader0 = new StringReader("?");
      jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm2.removeAllElements();
      jSTerm0.cloneT();
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.equals(jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.1506719848487332
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5692782530638354
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSTerm jSTerm1 = jSTerm0.call();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) ".";
      jSTerm0.ensureCapacity(91);
      streamTokenizer0.ordinaryChars(91, (-2598));
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) streamTokenizer0;
      objectArray0[4] = (Object) streamTokenizer0;
      stringReader0.skip((-2));
      objectArray0[5] = (Object) jSTerm0;
      objectArray0[6] = (Object) ".";
      objectArray0[7] = (Object) ".";
      objectArray0[8] = (Object) streamTokenizer0;
      jSTerm0.toArray(objectArray0);
      System.setCurrentTimeMillis((-2));
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.2563640070887918
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0q>Yl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "))36_cC'f*x{F";
      objectArray0[2] = (Object) "))36_cC'f*x{F";
      objectArray0[3] = (Object) "))36_cC'f*x{F";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt("))36_cC'f*x{F", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual(objectArray0[1]);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.and(predicate0);
      Predicate<String> predicate3 = predicate2.or(predicate0);
      predicate3.test("<");
      Predicate.isEqual((Object) predicate3);
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[7];
      objectArray2[0] = (Object) jSTerm0;
      objectArray2[1] = (Object) jSSubstitution0;
      objectArray2[4] = (Object) "&xD^h,3";
      objectArray2[3] = (Object) jSSubstitution0;
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      objectArray2[4] = (Object) jSSubstitution0;
      jSSubstitution0.add((Object) "))36_cC'f*x{F");
      jSSubstitution0.add(objectArray2[3]);
      objectArray1[0] = (Object) "&xD^h,3";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(any() , any());
      jSSubstitution0.sort(comparator1);
      jSSubstitution0.toArray(objectArray1);
      jSSubstitution0.add(objectArray0[1]);
      StringReader stringReader0 = new StringReader("28.0");
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2864570843009098
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      jSTerm0.insertElementAt("%%%", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "%OqX{[0b^ {emka.b");
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      JSTerm jSTerm2 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm2);
      jSSubstitution0.add(object0);
      Integer integer1 = new Integer(0);
      unaryOperator0.apply(integer1);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.get(0);
      jSSubstitution1.add((Object) "%%%");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      int int1 = 2;
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.75308803764449
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      jSTerm2.isEmpty();
      jSTerm2.listIterator();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm3);
      jSTerm2.equals(jSTerm0);
      jSTerm3.listIterator();
      JSTerm jSTerm4 = jSTerm3.cloneT();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm1.equals(jSTerm4);
      jSTerm1.makeVariable();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm2.matches(jSTerm0);
      JSTerm jSTerm7 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm7.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.2636223671027014
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt(".", 0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.and(predicate1);
      predicate0.test(".");
      Predicate<String> predicate3 = predicate1.and(predicate0);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      predicate5.negate();
      predicate2.and(predicate5);
      Predicate<String> predicate8 = predicate2.and(predicate1);
      Predicate<Object> predicate9 = predicate5.or(predicate6);
      Predicate<String> predicate10 = predicate8.or(predicate1);
      predicate5.negate();
      predicate9.or(predicate6);
      Predicate<Object> predicate11 = predicate7.negate();
      Predicate<String> predicate12 = predicate10.negate();
      predicate7.negate();
      predicate9.negate();
      Predicate<String> predicate13 = predicate12.negate();
      Predicate<String> predicate14 = predicate2.negate();
      predicate9.or(predicate4);
      predicate11.or(predicate7);
      predicate14.and(predicate9);
      predicate8.negate();
      Predicate<String> predicate15 = predicate0.negate();
      predicate12.and(predicate15);
      Predicate<String> predicate16 = predicate10.or(predicate5);
      predicate13.or(predicate16);
      Predicate<String> predicate17 = predicate15.negate();
      predicate17.negate();
      Predicate.isEqual((Object) predicate14);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "@.C*y";
      StringReader stringReader0 = new StringReader("@.C*y");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" (5%3-echg#R;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) (-4);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = 'g';
      charArray0[2] = ':';
      charArray0[3] = '.';
      charArray0[4] = 'U';
      charArray0[5] = 'P';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6687242027554405
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("JSTerm", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      char[] charArray0 = new char[21];
      charArray0[0] = '0';
      charArray0[2] = 'd';
      jSTerm0.capacity();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.removeAll(jSSubstitution2);
      Spliterator spliterator0 = jSTerm0.spliterator();
      jSSubstitution2.add((Object) spliterator0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.ensureCapacity(2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm0.makeVariable();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution7);
      jSTerm0.cloneT();
      jSTerm0.standardizerTerm();
      System.setCurrentTimeMillis((-1L));
      boolean boolean0 = jSTerm3.equals(jSTerm2);
      assertTrue(jSTerm0.isVariable());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" (*%3-echgdR;");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.quoteChar((-3261));
      streamTokenizer0.sval = "notequal";
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.wordChars((-3261), 413);
      streamTokenizer0.quoteChar(38);
      stringReader0.ready();
      System.setCurrentTimeMillis((-4));
      streamTokenizer0.ordinaryChar(435);
      stringReader0.read();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis(790L);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("%%% ", stringBuffer0.toString());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt(".", 0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.and(predicate1);
      predicate0.test(".");
      Predicate<String> predicate3 = predicate1.and(predicate0);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      predicate6.negate();
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate6.negate();
      predicate2.and(predicate5);
      predicate5.negate();
      Predicate<Object> predicate9 = predicate6.or(predicate7);
      Predicate<String> predicate10 = predicate1.or(predicate0);
      Predicate<Object> predicate11 = predicate9.negate();
      predicate7.negate();
      Predicate<String> predicate12 = predicate1.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate<String> predicate13 = predicate1.negate();
      Predicate<String> predicate14 = predicate1.and(predicate11);
      Predicate<Object> predicate15 = predicate5.negate();
      Predicate<Object> predicate16 = predicate15.or(predicate7);
      predicate16.or(predicate8);
      Predicate<String> predicate17 = predicate14.and(predicate15);
      predicate13.negate();
      Predicate<String> predicate18 = predicate17.negate();
      predicate12.and(predicate15);
      Predicate<String> predicate19 = predicate0.or(predicate2);
      Predicate<String> predicate20 = predicate10.or(predicate13);
      predicate20.negate();
      predicate18.negate();
      predicate19.negate();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("(. )", stringBuffer0.toString());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.0446324302033596
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis((-1));
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.043599584544132
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSTerm) null, jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.75308803764449
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      jSTerm2.isEmpty();
      jSTerm2.listIterator();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm3);
      jSTerm2.equals(jSTerm0);
      jSTerm3.listIterator();
      JSTerm jSTerm4 = jSTerm3.cloneT();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm1.equals(jSTerm4);
      JSJshopVars.whiteSpace = 46;
      jSTerm1.makeVariable();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm2.matches(jSTerm0);
      JSTerm jSTerm7 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm7.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.1552486438876346
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "ud.cs.shop.JJshopVars";
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) "ud.cs.shop.JJshopVars";
      objectArray0[6] = (Object) jSTerm0;
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt("ud.cs.shop.JJshopVars", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.remove((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator0);
      jSSubstitution2.trimToSize();
      jSSubstitution0.toArray(objectArray1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution3);
      jSSubstitution3.add((Object) null);
      jSTerm0.applySubstitutionPF(jSSubstitution3);
      jSTerm0.addAll((Collection) jSSubstitution3);
      jSSubstitution3.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt(".", 0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.and(predicate1);
      predicate0.test(".");
      Predicate<String> predicate3 = predicate1.and(predicate0);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      predicate6.negate();
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<String> predicate9 = predicate2.and(predicate5);
      predicate5.negate();
      Predicate<Object> predicate10 = predicate6.or(predicate7);
      Predicate<String> predicate11 = predicate1.or(predicate0);
      Predicate<Object> predicate12 = predicate10.negate();
      predicate7.negate();
      Predicate<String> predicate13 = predicate1.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate<String> predicate14 = predicate1.negate();
      Predicate<String> predicate15 = predicate1.and(predicate12);
      Predicate<Object> predicate16 = predicate5.negate();
      Predicate<Object> predicate17 = predicate16.or(predicate7);
      predicate17.or(predicate8);
      Predicate<String> predicate18 = predicate15.and(predicate16);
      predicate14.negate();
      predicate18.negate();
      predicate13.and(predicate16);
      predicate0.or(predicate2);
      Predicate<String> predicate19 = predicate11.or(predicate14);
      predicate19.negate();
      predicate1.negate();
      Predicate.isEqual((Object) predicate9);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(61, 61);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader1 = new StringReader("-\"sd<ijCp~HG%cJCQL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader1.ready();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.367420033319239
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.verticalL = (-2891);
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "))36_cC'f*x{F";
      objectArray0[3] = (Object) "))36_cC'f*x{F";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt("))36_cC'f*x{F", 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jSTerm0;
      jSTerm0.isVariable();
      objectArray1[0] = (Object) "&xD^h,3";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("'[_p }E7p`  :");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.059354619737041
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.lessT = 117;
      JSJshopVars.interrogation = 2;
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution0.fail());
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function<Object, Object> function0 = Function.identity();
      unaryOperator0.andThen((Function<? super JSSubstitution, ?>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[2] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopVars";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) jSTerm0;
      objectArray1[1] = (Object) jSSubstitution0;
      objectArray1[4] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray1[3] = (Object) jSSubstitution0;
      objectArray1[4] = (Object) jSSubstitution0;
      objectArray1[5] = (Object) "umd.cs.shop.JSJshopVars";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator1);
      jSSubstitution0.add((Object) "28.0");
      jSSubstitution0.toArray(objectArray0);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("h8B1LF");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" (5%3-echg#R;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.nval = 0.0;
      stringReader0.close();
      streamTokenizer0.ttype = (-206);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.536062315080832
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("5JSOT'rw", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.leftBrac = (-3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.slash = 988;
      char[] charArray0 = new char[21];
      charArray0[2] = 'd';
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.listIterator(0);
      jSSubstitution1.insertElementAt(jSSubstitution4, 0);
      jSSubstitution1.addElement(jSSubstitution4);
      Integer integer0 = new Integer('d');
      charArray0[18] = 'd';
      JSJshopVars.rightBrac = 0;
      JSJshopVars.lessT = 0;
      JSJshopVars.interrogation = 0;
      JSJshopVars.interrogation = 0;
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSJshopVars.minus = 2;
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSTerm0.cloneT();
      JSJshopVars.backquote = (int) 'd';
      jSTerm1.isFunction();
      System.setCurrentTimeMillis(100);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.5142602028922867
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("JSTerm", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      char[] charArray0 = new char[21];
      charArray0[0] = '0';
      charArray0[2] = 'd';
      jSTerm0.capacity();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      boolean boolean0 = jSTerm0.removeAll(jSSubstitution2);
      Spliterator spliterator0 = jSTerm0.spliterator();
      jSSubstitution2.add((Object) spliterator0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.ensureCapacity(2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution7);
      jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      boolean boolean1 = jSTerm2.isFunction();
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" (*%3-echgdR;");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.quoteChar((-3261));
      streamTokenizer0.sval = " (*%3-echgdR;";
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.commentChar((-3261));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      stringReader0.read();
      streamTokenizer0.quoteChar(38);
      streamTokenizer0.commentChar(38);
      streamTokenizer0.quoteChar(38);
      stringReader0.ready();
      stringReader0.ready();
      System.setCurrentTimeMillis((-4));
      streamTokenizer0.ordinaryChar(435);
      streamTokenizer0.eolIsSignificant(true);
      stringReader0.skip(32);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.quoteChar(435);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      jSTerm0.spliterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.8821103874851657
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nil");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standardizerTerm();
      System.setCurrentTimeMillis(683L);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.8911601612408218
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "))36_cC'f*x{F";
      objectArray0[2] = (Object) "))36_cC'f*x{F";
      objectArray0[3] = (Object) "))36_cC'f*x{F";
      jSTerm0.toArray(objectArray0);
      jSTerm0.insertElementAt("))36_cC'f*x{F", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) jSTerm0;
      objectArray1[1] = (Object) jSSubstitution0;
      Integer integer0 = new Integer((-4));
      jSSubstitution0.add((Object) integer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("m #?9-o#'g~}9dR>)F");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution3);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      unaryOperator0.apply("->");
      jSSubstitution1.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSSubstitution5.removeElementAt(43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 43 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[21];
      charArray0[0] = '0';
      charArray0[2] = 'd';
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      System.setCurrentTimeMillis('d');
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".eNaZd8e6qhs7|-&");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" (*%3-echgdR;");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.quoteChar((-3261));
      streamTokenizer0.sval = " (*%3-echgdR;";
      stringReader0.ready();
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.quoteChar(38);
      stringReader0.ready();
      System.setCurrentTimeMillis((-4));
      streamTokenizer0.ordinaryChar(435);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" (*%3-echgdR;");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.quoteChar((-3261));
      streamTokenizer0.sval = " (*%3-echgdR;";
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.commentChar((-3261));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      stringReader0.read();
      streamTokenizer0.nextToken();
      streamTokenizer0.quoteChar(38);
      streamTokenizer0.quoteChar(40);
      streamTokenizer0.commentChar(38);
      stringReader0.ready();
      stringReader0.ready();
      System.setCurrentTimeMillis(40);
      streamTokenizer0.ordinaryChar(435);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(40);
      streamTokenizer0.quoteChar(435);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "))36_cC'f*x{F";
      objectArray0[2] = (Object) "))36_cC'f*x{F";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      objectArray0[3] = (Object) "))36_cC'f*x{F";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray2 = new Object[7];
      objectArray2[0] = (Object) jSTerm0;
      objectArray2[4] = (Object) "&xD^h,3";
      objectArray1[0] = (Object) "&xD^h,3";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
