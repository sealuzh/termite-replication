/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 09:37:30 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1741481696346043
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Float float0 = new Float(0.0);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      Float float1 = new Float(1.0F);
      Float float2 = new Float((-2158.0204506));
      Float.min(1.0F, (-92.0F));
      linkedList2.add(float2);
      Float float3 = new Float((-60.54087750941));
      linkedList2.add(float1);
      Float float4 = new Float(0.0F);
      Float float5 = new Float(0.0F);
      linkedList2.add(float2);
      linkedList1.clear();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cl";
      stringArray0[1] = "SVb#'S,'uJHA;iB";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString(linkedList0, 3757, 2);
      JSONObject jSONObject1 = jSONObject0.put("cl", (Collection) linkedList1);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4574653869995418
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.accumulate("Otru", boolean0);
      Boolean boolean1 = new Boolean(true);
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean.logicalAnd(false, false);
      boolean boolean2 = jSONObject1.getBoolean("Otru");
      assertFalse(boolean2);
      
      jSONObject1.optJSONObject("get");
      assertTrue(boolean0.equals((Object)boolean2));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.954508765964409
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer((-763));
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Integer.divideUnsigned((-763), (-763));
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      jSONObject1.optInt(")WCs^hz3LZDj");
      JSONObject.valueToString(jSONObject1, (-763), 1);
      Object object0 = new Object();
      jSONObject0.optDouble("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}", (-385.505626577));
      StringWriter stringWriter0 = new StringWriter(8192);
      jSONObject1.optLong("_n>J]H(p:&SE(");
      jSONObject0.optInt(")WCs^hz3LZDj", 8192);
      jSONObject0.append("1i", stringArray0[0]);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.toString(0, 0);
      Float float0 = new Float((double) 408);
      try { 
        jSONObject0.getString("/l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/l\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.725974916470209
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-868.453));
      linkedList0.add(double0);
      linkedList0.parallelStream();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Byte byte0 = new Byte((byte) (-99));
      linkedList0.add(double0);
      jSONObject0.optInt("");
      String string0 = jSONObject0.toString((-71));
      Short short0 = new Short((short)61);
      String string1 = JSONObject.valueToString(short0, (-71), 19);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.101712037718795
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      stringWriter0.write("iscompareTo");
      charArray0[0] = '<';
      charArray0[1] = '_';
      charArray0[2] = '}';
      charArray0[3] = 'O';
      charArray0[4] = '[';
      stringWriter0.append('<');
      charArray0[5] = 'F';
      stringWriter0.write(charArray0);
      stringWriter0.flush();
      StringWriter stringWriter1 = new StringWriter();
      Short.compare((short) (-1), (short) (-2177));
      Float float0 = new Float(Double.NaN);
      Float.min(1880.62F, 0.0F);
      Float.sum((short) (-1), 0.0F);
      Float float1 = new Float((double) 1880.62F);
      Float.min((short) (-1), 0.0F);
      JSONObject.doubleToString((-1575.768448434268));
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString((int) (short) (-2177), 2176);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6045533012640627
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONArray@0000000002", "wheel.json.JSONArray@0000000002");
      int int0 = 64;
      String string0 = "U'[epm#@`";
      jSONObject1.put("U'[epm#@`", false);
      JSONObject.valueToString(jSONObject1, 64, 64);
      jSONObject0.optString("wheel.json.JSONArray@0000000002");
      JSONObject.quote("{\n                                                                                                                                \"java.lang.String@0000000004\": [\"java.lang.String@0000000004\"],\n                                                                                                                                \"java.lang.String@0000000005\": java.lang.Boolean@0000000006\n                                                                }");
      String string1 = "E|";
      jSONArray0.put(1L);
      try { 
        jSONObject0.getString("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3871888877953718
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Short short0 = new Short((short) (-1106));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"<J47L0A6/-";
      JSONObject jSONObject0 = new JSONObject("c=KWWGN|d", stringArray0);
      try { 
        jSONObject0.getString("&CDsq</?wnB)Oz_DJ,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&CDsq<\\/?wnB)Oz_DJ,\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3746517268956926
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("true", "true");
      Integer integer0 = new Integer(59);
      jSONObject0.optDouble("getmax");
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      jSONObject1.optInt("isparseUnsig~edLong");
      boolean boolean0 = jSONObject1.has("true");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7753174993833643
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = (-763);
      Integer integer0 = new Integer((-763));
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Integer.divideUnsigned((-763), (-763));
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      JSONObject.valueToString(jSONObject1, (-763), 1);
      Object object0 = new Object();
      int int1 = 8192;
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "_n>J]H(p:&SE(";
      jSONObject1.optLong("_n>J]H(p:&SE(");
      Integer integer1 = new Integer(8192);
      jSONObject0.append("_n>J]H(p:&SE(", stringArray0[0]);
      JSONObject jSONObject2 = new JSONObject();
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 8192, 1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.830893784528525
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("x", "x");
      jSONObject0.optLong("x");
      jSONObject0.put("0", 88);
      Integer integer0 = new Integer((-1717986916));
      jSONObject0.optDouble("!-QG S^Yn=l");
      jSONObject1.optInt("", (int) integer0);
      JSONObject jSONObject2 = jSONObject0.append("", "x");
      JSONObject.quote("IcC-fM~Y;t.qdw@g");
      jSONObject0.optDouble("\"IcC-fM~Y;t.qdw@g\"");
      JSONObject.doubleToString((-1717986916));
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject3 = jSONObject2.put("x", (Collection) linkedList0);
      assertSame(jSONObject3, jSONObject0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4168875535901937
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte byte1 = new Byte((byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Byte.toUnsignedInt((byte)39);
      Byte.toUnsignedLong((byte)51);
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", true);
      jSONObject1.put("(]c#.4w", (Map) null);
      Byte.toUnsignedInt((byte) (-34));
      Byte.toUnsignedLong((byte) (-34));
      JSONObject jSONObject2 = jSONObject0.put("%iw3L'ND^t5", true);
      Byte.toUnsignedInt((byte)0);
      jSONObject0.optJSONObject("(]c#.4w");
      jSONObject2.put("(]c#.4w", (int) (byte)0);
      jSONObject2.getInt("(]c#.4w");
      Object object0 = JSONObject.NULL;
      jSONObject2.get("(]c#.4w");
      try { 
        jSONObject0.getInt("Y1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Y1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.998587878542509
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Boolean.valueOf(false);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = new Boolean(false);
      Boolean boolean1 = Boolean.FALSE;
      Integer integer0 = new Integer((-3929));
      Integer integer1 = Integer.valueOf(3);
      Integer.min((-3929), 3);
      Integer.min(3, (-2304));
      String[] stringArray0 = JSONObject.getNames((Object) integer1);
      Byte byte0 = new Byte((byte)46);
      Byte byte1 = new Byte((byte)46);
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) null, 101, 101);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.975966289802542
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("true", "true");
      JSONObject jSONObject2 = jSONObject1.accumulate("ishashCode", jSONObject0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      jSONObject3.optBoolean("true", true);
      jSONObject3.optLong("ishashCode");
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean0 = new Boolean(true);
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      jSONObject2.optDouble("x>zBw");
      HashMap<String, JSONArray> hashMap3 = new HashMap<String, JSONArray>();
      jSONObject2.optInt(",");
      jSONObject3.put("x>zBw", (-10384350));
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ",");
      // Undeclared exception!
      jSONObject0.write(stringWriter1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0272088384449165
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = ")WCs^hz3LZDj";
      Integer integer0 = new Integer((-763));
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Integer.divideUnsigned((-763), (-763));
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 448L);
      jSONObject0.toString((-763), (-763));
      jSONObject1.toString(1, 1);
      jSONObject0.optDouble(")WCs^hz3LZDj", (-385.505626577));
      jSONObject1.optLong("_n>J]H(p:&SE(");
      jSONObject0.optInt(")WCs^hz3LZDj", 8192);
      String string1 = "to";
      jSONObject0.append("to", stringArray0[0]);
      JSONObject.quote("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}");
      jSONObject1.optDouble("to");
      jSONObject1.getString("to");
      try { 
        jSONObject0.getLong(stringArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.64559099960692
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Integer integer0 = new Integer((-763));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("j", integer0);
      boolean boolean0 = true;
      jSONObject0.optBoolean("j", true);
      jSONObject1.optLong("j");
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      jSONObject2.append("j", "j");
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean1 = new Boolean(true);
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      hashMap2.clone();
      Integer.getInteger("] not found.");
      Boolean.valueOf(true);
      jSONObject0.optDouble("gettoString");
      try { 
        jSONObject0.getLong("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.671193286591189
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("true", "true");
      Boolean boolean0 = new Boolean("true");
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Boolean.logicalXor(true, true);
      jSONObject1.isNull("true");
      jSONObject0.get("true");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(1.0F);
      Float float1 = new Float(Double.NaN);
      linkedList0.add(float0);
      Float float2 = new Float(0.0);
      linkedList0.add(float2);
      Float float3 = new Float(1.0F);
      Float float4 = new Float(1.0F);
      Float float5 = new Float((double) 0.0F);
      linkedList0.add(float5);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      linkedList1.clear();
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject2.put((String) null, 438);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.688946123179314
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Short.valueOf((short)2069);
      Short.toUnsignedLong((short)135);
      Short.toUnsignedInt((short)2069);
      Short.compare((short) (-3877), (short)47);
      Short.compare((short)26, (short)26);
      Short.compare((short)2069, (short)26);
      Double double0 = new Double((-3924));
      Double.min(15.24019856092846, Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.88517929823261
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      jSONObject0.optBoolean("", false);
      jSONObject0.optLong("");
      jSONObject1.keys();
      Short short0 = new Short((short)1400);
      Short short1 = new Short((short)1400);
      Long long0 = new Long((long) short1);
      Long.getLong(",", long0);
      Boolean boolean0 = new Boolean("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put((Object) ",");
      Boolean boolean1 = new Boolean(",");
      JSONObject jSONObject2 = jSONObject0.append("] is not a Boolean.", linkedList0);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject2.toString(37, 37);
      Float float0 = new Float((-48.4789));
      jSONArray1.optBoolean(44);
      Float.max(3558.698F, 44);
      jSONObject2.putOpt("e,FUH6", jSONArray1);
      jSONObject0.put("true", (double) 44);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.822237996699604
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "true";
      JSONObject jSONObject1 = jSONObject0.accumulate("true", "true");
      Boolean.valueOf("true");
      jSONObject0.optLong("true");
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      jSONObject1.isNull("true");
      jSONObject0.get("true");
      JSONObject jSONObject2 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.optBoolean("true");
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject1.optDouble("true", (double) 0L);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-490));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.384415616105067
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ";5O:7wGL?p9{BY,~tm%";
      stringArray0[1] = ";5O:7wGL?p9{BY,~tm%";
      stringArray0[2] = "^Yv2e";
      stringArray0[3] = "di";
      stringArray0[1] = "] is not a Boolean.";
      stringArray0[6] = ",\n";
      stringArray0[6] = " (vBtAn?Y(1Z7%wO";
      String string0 = "^ tJ%";
      stringArray0[8] = "PfdG";
      JSONObject jSONObject0 = new JSONObject(object1, stringArray0);
      jSONObject0.optLong((String) null, 0L);
      try { 
        jSONObject0.getLong(stringArray0[5]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Integer, Boolean> hashMap3 = new HashMap<Integer, Boolean>();
      HashMap<Short, Integer> hashMap4 = new HashMap<Short, Integer>();
      Float float0 = new Float(603.2884F);
      Float float1 = new Float(2190.43F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float1);
      Short short0 = new Short((short)1799);
      Short.compare((short) (-29662), (short)48);
      Short.toUnsignedLong((short) (-29662));
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Short.toUnsignedLong((short)1086);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "cl";
      stringArray0[1] = "SVb#'S,'uJHA;iB";
      stringArray0[2] = "cl";
      stringArray0[3] = "SVb#'S,'uJHA;iB";
      stringArray0[4] = "SVb#'S,'uJHA;iB";
      JSONObject jSONObject0 = new JSONObject(hashMap1, stringArray0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray0, jSONArray1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Short short0 = new Short((short) (-1106));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"<J47L0A6/-";
      Float float0 = new Float((double) (short) (-1106));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float1 = new Float(0.0F);
      Float float2 = new Float((-2158.0204506));
      Float float3 = new Float(0.0);
      linkedList0.add(float3);
      Float float4 = new Float((-2158.0204506));
      Float float5 = new Float((double) (short) (-1106));
      linkedList0.add(float5);
      Float float6 = new Float(1.0F);
      Float float7 = new Float((float) (short) (-1106));
      linkedList0.add((Float) null);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      linkedList1.clear();
      JSONObject jSONObject0 = new JSONObject(float2, stringArray0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5291031206830783
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      jSONObject0.optLong("");
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Long long0 = new Long(0L);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      jSONObject1.put("", (Map) hashMap0);
      hashMap0.compute(long0, biFunction0);
      Long long1 = new Long(2238L);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("");
      hashMap0.put(long1, "");
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Long long2 = new Long(0L);
      Boolean boolean0 = new Boolean(false);
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      hashMap2.clone();
      Integer.getInteger("gettoString");
      Boolean.valueOf(false);
      Boolean boolean1 = Boolean.valueOf(true);
      hashMap2.put((Integer) null, boolean1);
      try { 
        jSONObject2.getInt("h`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"h`\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.close();
      stringWriter0.close();
      StringWriter stringWriter1 = new StringWriter();
      JSONObject.getNames((Object) stringWriter0);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0385717841074533
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ";5O:7wGL?p9{BY,~tm%";
      stringArray0[1] = ";5O:7wGL?p9{BY,~tm%";
      stringArray0[2] = "^Yv2e";
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble(";5O:7wGL?p9{BY,~tm%");
      jSONObject0.optInt((String) null, 4);
      HashMap<String, JSONArray> hashMap1 = new HashMap<String, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("TI<AmU]'Bmu/sQs", (Map) null);
      JSONObject.valueToString((Object) null, 13, 13);
      jSONObject1.optDouble("val", (double) 4);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.546570996870805
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.close();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.toString();
      stringWriter0.flush();
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000004\":\"java.lang.StringBuffer@0000000005\",\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      int int0 = 49;
      // Undeclared exception!
      jSONObject0.toString(49, 8192);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8959554937651677
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer((-367));
      hashMap0.put(integer0, boolean0);
      Integer integer1 = new Integer(123);
      hashMap0.put(integer1, boolean0);
      Integer integer2 = new Integer(782);
      Boolean boolean1 = Boolean.FALSE;
      Integer integer3 = new Integer(3);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("] is not a JSONObject.", "PS?u|qU|");
      Integer integer4 = Integer.valueOf((-1097));
      hashMap0.put(integer4, boolean1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "PS?u|qU|";
      stringArray0[1] = "PS?u|qU|";
      BiConsumer<Integer, Object> biConsumer0 = (BiConsumer<Integer, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "PS?u|qU|";
      stringArray0[4] = "PS?u|qU|";
      jSONObject0.put("=cB/Ry6`6j;Qth`\"B", (-1899));
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.201684025007616
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wi_UWm", (-1566L));
      jSONObject1.optInt("wi_UWm");
      String string0 = "|wic_[Tg5 4tjd@A6C";
      try { 
        jSONObject0.getJSONObject("|wic_[Tg5 4tjd@A6C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|wic_[Tg5 4tjd@A6C\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3840566013429125
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Short.toUnsignedInt((short)1);
      Short.compare((short)1156, (short)71);
      Short.toUnsignedLong((short)115);
      Short.compare((short)71, (short)32);
      Short.compare((short)158, (short)3837);
      Short.compare((short) (-2177), (short)158);
      Float float0 = new Float((double) (short)1);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("[", (long) (short) (-2177));
      JSONArray jSONArray0 = new JSONArray();
      double double0 = new Long(1);
      jSONObject0.getInt("[");
      jSONObject0.put("[", (long) (short)71);
      JSONObject jSONObject2 = jSONObject1.put("isnotifyAll", (double) (-2335));
      jSONObject2.optInt("AZGX\"\"js.1zK:I43x(");
      jSONObject1.optJSONArray("isnotifyAll");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.626770989774699
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("x", "x");
      jSONObject0.optLong("x");
      jSONObject1.optBoolean("x", false);
      jSONObject1.optLong("x");
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      long long0 = 2238L;
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean0 = new Boolean(false);
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      hashMap2.clone();
      Boolean.valueOf(true);
      String string0 = "FhxB";
      Double double0 = new Double((-1.0));
      jSONObject0.accumulate("xhCc&21$", double0);
      jSONObject1.optDouble("xhCc&21$");
      try { 
        jSONObject0.getLong("A-75aF3o Oe801G!9:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A-75aF3o Oe801G!9:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Short.valueOf((short)2069);
      Short short0 = new Short((short)2069);
      Short.toUnsignedInt((short) (-31));
      short short1 = (short)1156;
      Short.compare((short)1156, (short)71);
      Short.toUnsignedLong((short)115);
      Short.compare((short)71, (short)32);
      Short.compare((short)158, (short)3837);
      Short.compare((short) (-2177), (short)158);
      Float float0 = new Float((double) (short) (-31));
      Float.min(0.0F, 3066.1895F);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~)6n{.jP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~)6n{.jP
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4004134328237865
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      
      stringWriter0.flush();
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000004\":\"java.lang.StringBuffer@0000000005\",\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000004\":\"java.lang.StringBuffer@0000000005\",\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.3624763091571643
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject jSONObject1 = jSONObject0.put("\r", (-2624.582551115724));
      Integer.getInteger("");
      Boolean boolean0 = new Boolean(false);
      Boolean boolean1 = new Boolean(true);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer.getInteger("\r", (Integer) null);
      Integer integer0 = new Integer((-1822));
      Integer.toUnsignedLong((-1822));
      hashMap0.replace(integer0, boolean0, boolean0);
      JSONObject.quote("");
      Integer.sum((-1822), (-1822));
      jSONObject0.optDouble("._S$*m");
      jSONObject1.getLong("\r");
      int int0 = (-32860528);
      jSONObject0.optInt("k\"Q_*o4", (-32860528));
      try { 
        jSONObject0.getDouble("P.F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"P.F\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0300388177574233
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Otru";
      jSONObject0.accumulate("Otru", "Otru");
      Boolean boolean0 = new Boolean("Otru");
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Boolean.logicalOr(false, false);
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean.logicalAnd((boolean) boolean0, (boolean) boolean0);
      hashMap1.putAll(hashMap0);
      try { 
        jSONObject0.getBoolean("Otru");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Otru\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1576770355110229
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Short.toUnsignedInt((short)1);
      Short.compare((short)1156, (short)71);
      Short.toUnsignedLong((short)115);
      Short.compare((short)71, (short)32);
      Short.compare((short)158, (short)3837);
      Short.compare((short) (-2177), (short)158);
      Float float0 = new Float((double) (short)1);
      Float.min(0.0F, 3066.1895F);
      Float.sum((-406.0F), 0.0F);
      Float.sum((-1.0F), (-1.0F));
      Integer.getInteger("M:.9-,0z'/mc~^}9-");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("M:.9-,0z'/mc~^}9-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"M:.9-,0z'/mc~^}9-\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Integer, Boolean> hashMap3 = new HashMap<Integer, Boolean>();
      HashMap<Short, Integer> hashMap4 = new HashMap<Short, Integer>();
      Short short0 = new Short((short) (-279));
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap4);
      Long long0 = new Long(0L);
      Long.sum((short) (-279), 462L);
      Long.max(2381L, (-1L));
      HashMap<Long, String> hashMap6 = new HashMap<Long, String>();
      Long.max(1L, (-3490L));
      HashMap<Long, String> hashMap7 = new HashMap<Long, String>();
      hashMap1.putIfAbsent(long0, "isclear");
      HashMap<Integer, Double> hashMap8 = new HashMap<Integer, Double>();
      jSONObject0.optJSONArray("re");
      JSONObject jSONObject1 = jSONObject0.put("isclear", (-49.29491));
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.110960593318499
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("U", (-1717986916));
      jSONObject0.optDouble((String) null);
      jSONObject0.optInt("U", (-1717986916));
      jSONObject0.optDouble("6f*&1BE1Bzmc;JGl$v", (double) (-1717986916));
      jSONObject0.optInt("ixVlF");
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5464088661557995
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\r", 0.0);
      Boolean boolean0 = new Boolean(false);
      Boolean boolean1 = new Boolean(false);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer((-1822));
      Integer.toUnsignedLong((-1822));
      hashMap0.replace(integer0, boolean1, boolean1);
      Integer integer1 = new Integer(28);
      jSONObject1.accumulate("NS[<+vTu'5S9R @K", integer1);
      Boolean boolean2 = Boolean.FALSE;
      Integer integer2 = new Integer(2423);
      Object object0 = new Object();
      jSONObject1.names();
      jSONObject1.optString("\r", "issum");
      jSONObject1.has("issum");
      Object object1 = new Object();
      JSONObject jSONObject2 = jSONObject0.accumulate("\n", object1);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.3285409512162865
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONArray@0000000002", "wheel.json.JSONArray@0000000002");
      String string0 = "U'[epm#@`";
      jSONObject1.put("U'[epm#@`", true);
      jSONObject0.optString("wheel.json.JSONArray@0000000002");
      String string1 = "E|";
      String string2 = "Expected '";
      try { 
        jSONObject0.getString("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7691160669405033
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("Otru", "Otru");
      boolean boolean0 = jSONObject0.optBoolean("Otru", true);
      assertTrue(boolean0);
      
      long long0 = jSONObject0.optLong("Otru");
      assertEquals(0L, long0);
      
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean1 = new Boolean(false);
      long long1 = jSONObject0.optLong("Otru", (-4660L));
      assertEquals((-4660L), long1);
      
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      double double0 = jSONObject0.optDouble("Otru");
      assertEquals(Double.NaN, double0, 0.01);
      
      HashMap<String, JSONArray> hashMap3 = new HashMap<String, JSONArray>();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.331125290341943
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(493.86F);
      Float.sum(493.86F, (-814.8239F));
      JSONObject jSONObject1 = jSONObject0.accumulate("yxCl@A# e9,*tg", jSONObject0);
      jSONObject0.optBoolean("\"\"");
      jSONObject0.optBoolean("d]");
      StringWriter stringWriter0 = new StringWriter(91);
      Integer integer0 = new Integer(91);
      jSONObject0.optInt("isvalueOf", 91);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject1.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.691166515952237
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string1 = "{";
      Float float0 = new Float(284.3600941599285);
      JSONObject jSONObject1 = jSONObject0.append("{", float0);
      byte byte0 = (byte)112;
      StringWriter stringWriter0 = new StringWriter((byte)112);
      stringWriter0.append('0');
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.write("{");
      stringWriter0.append((CharSequence) "");
      jSONObject1.write(stringWriter0);
      float float1 = 0.0F;
      Float.sum(0.0F, (-211.15F));
      JSONObject jSONObject2 = jSONObject1.put("{", (int) (byte)112);
      Float.sum((-911.8154F), (-683.007F));
      jSONObject2.getInt("{");
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.9042552998214495
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Otru";
      JSONObject jSONObject1 = jSONObject0.accumulate("Otru", "Otru");
      try { 
        jSONObject1.getJSONObject("Otru");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Otru\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.6516029054190007
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\r", 0.0);
      Integer.getInteger("isformat");
      Boolean boolean0 = new Boolean(false);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      hashMap0.put((Integer) null, boolean0);
      Integer integer0 = new Integer((-1822));
      Integer.toUnsignedLong((-1822));
      hashMap0.replace(integer0, boolean0, boolean0);
      Boolean boolean1 = Boolean.FALSE;
      Integer integer1 = new Integer(2423);
      Object object0 = new Object();
      jSONObject1.names();
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.accumulate("issum", jSONObject2);
      int int0 = 8192;
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 8192, 2423);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6313949921423214
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Otru", "Otru");
      Boolean boolean0 = new Boolean(false);
      jSONObject0.optLong("Otru");
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean1 = new Boolean(false);
      Boolean.logicalAnd((boolean) boolean0, (boolean) boolean0);
      Integer.getInteger("Otru");
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      Long long0 = new Long(0L);
      hashMap2.putIfAbsent(long0, "Otru");
      HashMap<Integer, Double> hashMap3 = new HashMap<Integer, Double>();
      JSONObject.valueToString(hashMap3, 40, 40);
      try { 
        jSONObject1.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.5998852788125673
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Float float0 = new Float(284.3600941599285);
      JSONObject jSONObject1 = jSONObject0.append("", float0);
      Byte byte0 = new Byte((byte)112);
      JSONObject jSONObject2 = jSONObject1.accumulate("", byte0);
      jSONObject0.put("", true);
      Integer integer0 = new Integer(96);
      Short short0 = new Short((byte)112);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      Short short1 = new Short((byte)112);
      int int0 = new Integer(110);
      Short.compare((short) (-391), (byte)112);
      hashMap0.put(short1, (Integer) null);
      Object object0 = JSONObject.NULL;
      jSONObject2.put("jL:/OE_M[", (Object) short0);
      jSONObject0.optLong("");
      String string0 = "A{j-S@@2#Lw_yve/GK";
      try { 
        jSONObject2.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Boolean.valueOf(true);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(123);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>(123);
      Boolean boolean0 = new Boolean(true);
      Integer integer1 = new Integer(123);
      Integer integer2 = new Integer((-3929));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Integer.getInteger(" at character ", integer1);
      HashMap<Short, Integer> hashMap2 = new HashMap<Short, Integer>();
      HashMap<Integer, Double> hashMap3 = new HashMap<Integer, Double>();
      jSONObject0.optJSONArray((String) null);
      Boolean boolean1 = Boolean.valueOf(true);
      JSONObject.testValidity(boolean1);
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.452785888280122
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("true", "true");
      Boolean boolean0 = new Boolean("true");
      Boolean.logicalXor(true, true);
      jSONObject1.isNull("true");
      jSONObject0.get("true");
      JSONObject jSONObject2 = new JSONObject(boolean0);
      BiFunction<Integer, Object, Boolean> biFunction0 = (BiFunction<Integer, Object, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Boolean.logicalAnd(true, false);
      Integer integer0 = new Integer((short) (-357));
      Integer.getInteger("true");
      jSONObject1.getBoolean("true");
      JSONObject jSONObject3 = jSONObject1.optJSONObject("true");
      assertNull(jSONObject3);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.680961306344725
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "");
      jSONObject0.optLong("");
      Long.valueOf(0L);
      JSONObject.getNames(jSONObject0);
      jSONObject1.optDouble("", (-0.3882473185430616));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject1.put("Null pointer", (Collection) linkedList0);
      jSONObject1.getJSONArray("Null pointer");
      assertEquals(4, jSONObject1.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.5026515980831765
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject();
      Double.isFinite(0.0);
      JSONObject jSONObject1 = jSONObject0.append("Expected a ':' after a key", double0);
      jSONObject1.getJSONArray("Expected a ':' after a key");
      JSONObject.valueToString(double0);
      try { 
        jSONObject0.getBoolean("wDu0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wDu0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.4895359087015163
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte byte1 = new Byte((byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "isintern";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", true);
      Integer integer0 = new Integer(2);
      Short short0 = new Short((short)59);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      Short short1 = new Short((byte)0);
      Integer.remainderUnsigned((short)59, (short)59);
      Short.compare((short)496, (short) (-412));
      hashMap0.put(short1, integer0);
      JSONObject jSONObject2 = jSONObject1.put("isintern", (Object) short1);
      jSONObject2.optLong("getcopyValueOf");
      jSONObject1.opt("isintern");
      double double0 = jSONObject1.getDouble("isintern");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.close();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      stringWriter0.flush();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      Byte byte0 = new Byte((byte)55);
      assertEquals((byte)55, (byte)byte0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.2675632284814613
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6620654311033607
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      String string0 = jSONObject0.toString();
      stringWriter0.flush();
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000004\":\"java.lang.StringBuffer@0000000005\",\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      jSONTokener0.syntaxError("{\"java.lang.String@0000000004\":\"java.lang.StringBuffer@0000000005\",\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertFalse(jSONTokener0.more());
      
      String string1 = jSONObject0.toString(116, (-426));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[2] = "zi{[&?`[}*@Z";
      Short.toUnsignedLong((short)3837);
      Short.compare((short)158, (short)159);
      Short.compare((short)7, (short)44);
      Short.compare((short)158, (short)288);
      Float float0 = new Float(Double.NaN);
      Float.min(3075.168F, 2824.2F);
      Float.min(1.0F, (-1542.8F));
      Float.sum(1.0F, 0.0F);
      Float.sum(1.0F, 0.0F);
      Float float1 = new Float((-1380.142208));
      Float.min(1775.2379F, 0.0F);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "isnotifyAll";
      stringArray0[1] = "";
      stringArray0[2] = "R5";
      stringArray0[3] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[4] = "not";
      stringArray0[5] = ": ";
      stringArray0[6] = "id>b-<#!M9|:sTk85q1";
      stringArray0[7] = "wheel.json.JSONException";
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.761097518174699
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Float float0 = new Float(284.3600941599285);
      JSONObject jSONObject1 = jSONObject0.append("{", float0);
      jSONObject0.optInt("");
      Integer integer0 = new Integer((byte)112);
      Boolean boolean0 = Boolean.valueOf("?3-C>+k1*6*12kPw%Ov");
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer.valueOf((int) (byte)112);
      Integer integer1 = new Integer((byte)112);
      hashMap0.put(integer1, boolean0);
      Boolean boolean1 = Boolean.valueOf("?3-C>+k1*6*12kPw%Ov");
      hashMap0.put(integer1, boolean1);
      Integer integer2 = new Integer(64);
      Boolean boolean2 = Boolean.FALSE;
      Integer integer3 = new Integer((-38489319));
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optString("", "toL");
      jSONObject1.has("?3-C>+k1*6*12kPw%Ov");
      try { 
        jSONObject1.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.576847860314965
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject0.isNull("has");
      int int0 = 1064;
      jSONObject0.toString(1064);
      jSONObject0.has((String) null);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "{}");
      Boolean boolean0 = Boolean.valueOf(false);
      BiFunction<Object, JSONObject, JSONObject> biFunction0 = (BiFunction<Object, JSONObject, JSONObject>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any(wheel.json.JSONObject.class));
      hashMap0.compute(boolean0, biFunction0);
      jSONObject1.optBoolean((String) null, false);
      JSONObject.valueToString(hashMap0);
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1);
      try { 
        jSONObject0.getJSONObject("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"has\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean0 = Boolean.TRUE;
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Short, Integer> hashMap3 = new HashMap<Short, Integer>();
      Short short0 = new Short((short) (-944));
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap4);
      Float float0 = new Float((-1260.447F));
      hashMap4.put(boolean0, float0);
      String string0 = jSONObject0.toString(43, 105);
      assertEquals("{}", string0);
      
      String string1 = JSONObject.valueToString((Object) null);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.840011980616752
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("lu[", 1.0);
      jSONObject1.toString(120, 170);
      String string0 = "4N721{@_1Xoe-Fb";
      jSONObject0.optLong("4N721{@_1Xoe-Fb");
      String string1 = "get";
      jSONObject0.getDouble("lu[");
      jSONObject0.put("get", (Object) "get");
      jSONObject0.append("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}", "4N721{@_1Xoe-Fb");
      try { 
        jSONObject0.getString(" s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" s\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.522582679633636
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("x", "x");
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      HashMap<Short, Integer> hashMap2 = new HashMap<Short, Integer>();
      Short short0 = new Short((short) (-274));
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap2);
      JSONObject jSONObject2 = jSONObject1.put("x", (-452.6520579));
      jSONObject2.getDouble("x");
      Long long0 = new Long((-1L));
      Long.sum((-1L), 462L);
      Long long1 = new Long(1653L);
      HashMap<Long, String> hashMap4 = new HashMap<Long, String>();
      Long.max(2997L, 0L);
      HashMap<Long, String> hashMap5 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap6 = new HashMap<Long, String>();
      hashMap6.putIfAbsent(long1, "Jlea+");
      HashMap<Integer, Double> hashMap7 = new HashMap<Integer, Double>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap4);
      JSONArray jSONArray0 = jSONObject3.optJSONArray(",");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.6145079644670624
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("a", "a");
      jSONObject0.optBoolean("a", false);
      jSONObject0.optLong("a");
      jSONObject1.keys();
      short short0 = (short)1400;
      Short short1 = new Short((short)1400);
      String string0 = ",";
      Long long0 = new Long((long) short1);
      Long long1 = Long.getLong(",", long0);
      long long2 = 0L;
      try { 
        jSONObject1.append("a", long1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[a] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.6022591590283186
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = new Integer((-763));
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Integer.divideUnsigned((-763), (-763));
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject2 = jSONObject0.put("true", (Collection) linkedList0);
      jSONObject2.append("true", ")WCs^hz3LZDj");
      JSONObject.valueToString(jSONObject1, (-763), 1);
      Float float0 = new Float(1.0);
      Boolean boolean0 = new Boolean(true);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(2633.49451393);
      // Undeclared exception!
      try { 
        linkedList1.add((-763), double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -763, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      Boolean boolean1 = Boolean.FALSE;
      HashMap<Integer, Boolean> hashMap3 = new HashMap<Integer, Boolean>();
      HashMap<Integer, Boolean> hashMap4 = new HashMap<Integer, Boolean>();
      HashMap<Short, Integer> hashMap5 = new HashMap<Short, Integer>();
      Short short0 = new Short((short) (-944));
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap5);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 97, 2147483645);
      HashMap<Integer, Double> hashMap7 = new HashMap<Integer, Double>();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("Mi");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.2868786494090307
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(493.86F);
      Float.sum(493.86F, (-827.5425F));
      Integer.getInteger("isformat");
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = Boolean.FALSE;
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(3);
      hashMap0.put(integer0, boolean0);
      Integer integer1 = new Integer(56);
      Integer integer2 = new Integer(3);
      Boolean boolean2 = Boolean.FALSE;
      hashMap0.replace(integer0, boolean2, boolean0);
      hashMap0.put((Integer) null, boolean1);
      Integer integer3 = new Integer(3);
      Boolean boolean3 = Boolean.FALSE;
      Boolean.logicalOr(false, true);
      Integer integer4 = new Integer(3001);
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject(boolean0);
      jSONObject1.names();
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.put("] is not a Boolean.", (Object) boolean3);
      Double double0 = new Double((-1.0));
      Double.max(3001, 0.0);
      jSONObject1.accumulate("false", double0);
      jSONObject2.putOpt("H~?[2-D!A=#6H", "] is not a Boolean.");
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8166102396728694
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.put("\n", 0.0);
      Integer.getInteger("\n");
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = new Boolean(true);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      hashMap0.put((Integer) null, boolean1);
      Integer integer0 = new Integer(2423);
      Boolean boolean2 = Boolean.FALSE;
      Integer integer1 = new Integer(4);
      Object object0 = new Object();
      jSONObject0.remove("\n");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.967027174722039
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("U", (-1717986916));
      jSONObject0.optDouble((String) null);
      jSONObject0.optInt("U", (-1717986916));
      jSONObject0.optDouble("6f*&1BE1Bzmc;JGl$v", (double) (-1717986916));
      jSONObject0.putOpt((String) null, (Object) null);
      Float float0 = new Float((double) (-1717986916));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ixVlF";
      stringArray0[1] = null;
      stringArray0[2] = "6f*&1BE1Bzmc;JGl$v";
      stringArray0[0] = "getreplaceFirst";
      stringArray0[4] = "U";
      stringArray0[5] = "is";
      JSONObject jSONObject1 = new JSONObject(float0, stringArray0);
      try { 
        jSONObject1.getInt("m81cZ)Cqm*0G:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"m81cZ)Cqm*0G:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.3102108334734597
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("true", "true");
      Boolean boolean0 = new Boolean("true");
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Boolean.logicalXor(true, true);
      jSONObject1.isNull("true");
      jSONObject0.get("true");
      JSONObject jSONObject2 = new JSONObject(boolean0);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      BiFunction<Integer, Object, Boolean> biFunction0 = (BiFunction<Integer, Object, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      Boolean.logicalAnd(true, false);
      Integer integer0 = new Integer((short) (-357));
      Integer.getInteger("true");
      hashMap1.put(integer0, boolean0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      // Undeclared exception!
      try { 
        jSONObject2.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.930905529121227
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)6);
      long long0 = jSONObject0.optLong(")WCs^hz3LZDj", (-1125L));
      assertEquals((-1125L), long0);
      
      Integer integer0 = new Integer((short)6);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      Integer integer1 = new Integer((short)6);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = hashMap0.merge(short0, integer1, biFunction0);
      Integer.max((short)6, 4);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString(")WCs^hz3LZDj");
      assertEquals("", string0);
      
      Short short1 = new Short((short)6);
      Integer integer3 = new Integer((short)6);
      Short short2 = new Short((short)6);
      hashMap0.put(short2, integer2);
      long long1 = jSONObject0.optLong("] is not a JSONObject.");
      assertEquals(0L, long1);
      
      jSONObject1.optString("Expected a ':' after a key", (String) null);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.327701700803115
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Short.valueOf((short)630);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short.valueOf((short)553);
      Integer integer0 = new Integer((-2149));
      Boolean boolean0 = Boolean.valueOf("?3-C>+k1*6*12kPw%Ov");
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      Integer integer1 = Integer.valueOf((int) (short)553);
      Integer integer2 = new Integer((-2149));
      Boolean boolean1 = Boolean.valueOf("?3-C>+k1*6*12kPw%Ov");
      hashMap1.put(integer2, boolean1);
      hashMap1.put(integer1, boolean0);
      hashMap1.put(integer0, boolean0);
      Integer integer3 = new Integer((short)553);
      Boolean boolean2 = Boolean.FALSE;
      Integer integer4 = new Integer((-38489319));
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[3];
      stringArray0[2] = "?3-C>+k1*6*12kPw%Ov";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      Object object0 = new Object();
      jSONObject1.optString("", "");
      boolean boolean3 = jSONObject1.has("");
      assertFalse(boolean3);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.888152191065211
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Float float0 = new Float(284.3600941599285);
      JSONObject jSONObject1 = jSONObject0.append("{", float0);
      Byte byte0 = new Byte((byte)112);
      JSONObject jSONObject2 = jSONObject1.accumulate("", byte0);
      jSONObject2.optLong("{");
      StringWriter stringWriter0 = new StringWriter((byte)112);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.write("{");
      jSONObject2.write(stringWriter1);
      jSONObject2.optString(":D3}!Z$3");
      Short short0 = new Short((byte)112);
      Integer integer0 = new Integer(1807);
      Short short1 = new Short((byte)112);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      hashMap0.put(short1, integer0);
      hashMap0.put(short0, integer0);
      jSONObject2.put("bbO+|2y4", (Object) "Expected a ':' after a key");
      jSONObject1.optLong("zlei");
      jSONObject0.opt("");
      assertEquals(6, jSONObject0.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.2751804330078285
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(782);
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      Short short0 = new Short((short)985);
      Integer integer1 = new Integer(21);
      hashMap1.put(short0, integer1);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Expected a ':' after a key", object0);
      jSONObject0.optLong("jo");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Expected a ':' after a key";
      Integer.remainderUnsigned(21, 21);
      Short.compare((short)18928, (short) (-4530));
      Short short1 = new Short((short) (-4530));
      hashMap1.put(short1, (Integer) null);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.put("", (Object) null);
      jSONObject2.optLong("Expected a ':' after a key");
      jSONObject1.opt((String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.close();
      stringWriter0.close();
      StringWriter stringWriter1 = new StringWriter();
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Integer, Boolean> hashMap3 = new HashMap<Integer, Boolean>();
      HashMap<Short, Integer> hashMap4 = new HashMap<Short, Integer>();
      Short short0 = new Short((short) (-274));
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap4);
      Long long0 = new Long(0L);
      Long.sum((short) (-274), 462L);
      Long.max(2381L, (-1L));
      HashMap<Long, String> hashMap6 = new HashMap<Long, String>();
      Long.max(1L, (-3490L));
      HashMap<Long, String> hashMap7 = new HashMap<Long, String>();
      hashMap1.putIfAbsent(long0, "isclear");
      HashMap<Integer, Double> hashMap8 = new HashMap<Integer, Double>();
      jSONObject0.optJSONArray("re");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONObject((JSONArray) null);
      jSONObject0.put("getintBitsToFloat", (Object) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("`=~/[a'hzL<jaVEC!", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.2201556487807856
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte byte1 = new Byte((byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Byte.toUnsignedInt((byte)39);
      Byte.toUnsignedLong((byte)51);
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", true);
      jSONObject1.put("(]c#.4w", (Map) null);
      Byte.toUnsignedInt((byte) (-34));
      Byte.toUnsignedLong((byte) (-34));
      JSONObject jSONObject2 = jSONObject0.put("%iw3L'ND^t5", true);
      jSONObject2.optBoolean("%iw3L'ND^t5", true);
      Byte.toUnsignedInt((byte)0);
      jSONObject0.optJSONObject("min");
      JSONObject jSONObject3 = jSONObject2.put("(]c#.4w", (int) (byte)0);
      jSONObject2.getInt("(]c#.4w");
      Object object0 = JSONObject.NULL;
      jSONObject3.optInt("(]c#.4w", 64);
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject("333H{QJd*2j'Am");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 333H{QJd*2j'Am
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "T,";
      stringArray0[1] = "f^b&]=`dSmw7{Q";
      stringArray0[2] = "p UaaDv%,\"=w=Y@7";
      stringArray0[3] = "A JSONObject text must be0in wit0 '{6";
      stringArray0[4] = "] is not a JSONObject.";
      stringArray0[5] = "in";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.3329680297486974
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("true", "true");
      Boolean boolean0 = new Boolean("true");
      Boolean.logicalXor(true, true);
      jSONObject1.isNull("true");
      Long long0 = new Long((-1983L));
      Long.sum((-1L), (-1983L));
      Long.max(3040L, 1266L);
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Long.max(0L, (-1352L));
      hashMap0.putIfAbsent(long0, (String) null);
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      jSONObject0.optJSONArray("true");
      try { 
        jSONObject1.getLong("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.636103711397223
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(284.3600941599285);
      JSONObject jSONObject1 = jSONObject0.append("{", float0);
      Byte byte0 = new Byte((byte)103);
      JSONObject jSONObject2 = jSONObject1.accumulate("", byte0);
      jSONObject2.optLong("{");
      StringWriter stringWriter0 = new StringWriter((byte)103);
      jSONObject2.optInt("u]ZZ.", (int) (byte)103);
      jSONObject2.optDouble("");
      Float.sum(1074.0983F, 1074.0983F);
      try { 
        jSONObject2.getInt("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.close();
      Short.toUnsignedLong((short)1819);
      Short.compare((short)1819, (short)1819);
      Short.compare((short)1819, (short)23);
      Short.compare((short) (-982), (short)18);
      Float float0 = new Float((double) (short)18);
      Float.min((short)23, (-999.85846F));
      Float.sum((short) (-2177), 1474.7446F);
      Float.sum(0.0F, (short)1819);
      Float float1 = new Float((double) 3066.1895F);
      Float.min((-999.85846F), (-702.2554F));
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.8111428303362396
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Long long0 = new Long((-521L));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long1 = jSONObject0.optLong("iKS%nqPZR-]XY?C");
      assertEquals(0L, long1);
      
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject1.optInt("get", 1129);
      assertEquals(1129, int0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.033810204512617
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "^";
      JSONObject jSONObject0 = new JSONObject((Object) "^");
      String string1 = "{";
      double double0 = 284.3600941599285;
      Long long0 = new Long(1402L);
      jSONObject0.optDouble("{", (double) 1402L);
      try { 
        jSONObject0.getDouble("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.7099284913365564
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Short.toUnsignedInt((short)1);
      Short.compare((short)1156, (short)71);
      Short.toUnsignedLong((short)115);
      Short.compare((short)71, (short)32);
      Short.compare((short)158, (short)3837);
      Short.compare((short) (-2177), (short)158);
      Float float0 = new Float((double) (short)1);
      Float.min(0.0F, 3066.1895F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.parallelStream();
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optJSONObject("1f=)");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.812863786049402
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte byte1 = new Byte((byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Byte.toUnsignedLong((byte)51);
      Byte.toUnsignedInt((byte) (-46));
      Byte.toUnsignedLong((byte) (-46));
      JSONObject jSONObject1 = jSONObject0.put("%iw3L'ND^t5", false);
      boolean boolean0 = jSONObject1.optBoolean("%iw3L'ND^t5", false);
      assertFalse(boolean0);
      
      Byte.toUnsignedInt((byte)0);
      jSONObject0.optJSONObject("min");
      JSONObject jSONObject2 = jSONObject1.put("(]c#.4w", (int) (byte)0);
      jSONObject1.getInt("(]c#.4w");
      Object object0 = JSONObject.NULL;
      double double0 = jSONObject1.optDouble("(]c#.4w");
      assertEquals(0.0, double0, 0.01);
      
      Float.sum(3944.2F, 3944.2F);
      jSONObject2.getInt("(]c#.4w");
      long long0 = jSONObject1.optLong(",\n");
      assertEquals(0L, long0);
      
      jSONObject0.getString("%iw3L'ND^t5");
      Float float0 = new Float(7888.4F);
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject3 = jSONObject0.append("wheel.json.JSONObject$1", float0);
      Object object1 = jSONObject3.get("(]c#.4w");
      assertEquals(0, object1);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Float float0 = new Float(0.0);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      Float float1 = new Float(1.0F);
      Integer integer0 = new Integer(444);
      Integer.valueOf(18);
      JSONObject.quote("CNaO/IBS:mL[^5'");
      Short short0 = new Short((short) (-1));
      Byte byte0 = new Byte((byte) (-100));
      assertEquals((byte) (-100), (byte)byte0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-868.453));
      linkedList0.add(double0);
      linkedList0.parallelStream();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.59238473365966
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = "{";
      Float float0 = new Float(284.3600941599285);
      JSONObject jSONObject1 = jSONObject0.append("{", float0);
      byte byte0 = (byte)112;
      StringWriter stringWriter0 = new StringWriter((byte)112);
      stringWriter0.append('0');
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.write("{");
      stringWriter0.append((CharSequence) "");
      jSONObject1.write(stringWriter0);
      float float1 = 0.0F;
      Float.sum(0.0F, (-211.15F));
      JSONObject jSONObject2 = jSONObject1.put("{", 1892);
      Float.sum((-911.8154F), (-683.007F));
      String string1 = "D/ds@Kz6\"t_wnSwE3EC";
      try { 
        jSONObject2.getInt("D/ds@Kz6\"t_wnSwE3EC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"D/ds@Kz6\\\"t_wnSwE3EC\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.2021514424366178
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Short short0 = new Short((short) (-1106));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.parallelStream();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.close();
      jSONObject0.write(stringWriter1);
      stringWriter1.write(114);
      StringWriter stringWriter2 = new StringWriter();
      assertEquals("", stringWriter2.toString());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.2961565009059486
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ")WCs^hz3LZDj");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.9313422910329603
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "true";
      JSONObject jSONObject1 = jSONObject0.accumulate("true", "true");
      Boolean boolean0 = new Boolean("true");
      jSONObject0.optLong("true");
      boolean boolean1 = true;
      Boolean.compare(true, true);
      jSONObject0.getString("true");
      jSONObject1.isNull("true");
      jSONObject0.get("true");
      JSONObject jSONObject2 = new JSONObject(boolean0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames(jSONObject0);
      boolean boolean2 = true;
      Boolean.valueOf(true);
      jSONObject1.optInt((String) null, 2612);
      try { 
        jSONObject1.getJSONArray("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.2205050130644213
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Integer, Boolean> hashMap3 = new HashMap<Integer, Boolean>();
      HashMap<Short, Integer> hashMap4 = new HashMap<Short, Integer>();
      Short short0 = new Short((short) (-274));
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap4);
      Long long0 = new Long(0L);
      Long.sum((short) (-274), 462L);
      Long.max(2381L, (-1L));
      HashMap<Long, String> hashMap6 = new HashMap<Long, String>();
      Long.max(1L, (-3490L));
      HashMap<Long, String> hashMap7 = new HashMap<Long, String>();
      jSONObject0.accumulate("Jlea+", hashMap3);
      Byte byte0 = new Byte((byte) (-61));
      JSONObject jSONObject1 = jSONObject0.accumulate("Jlea+", (Object) null);
      Byte byte1 = new Byte((byte) (-45));
      jSONObject1.putOpt("AFX&o'bBH", byte1);
      try { 
        jSONObject1.getInt("Jlea+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Jlea+\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.909674039071152
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.close();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      JSONObject.valueToString(jSONObject0);
      stringWriter0.flush();
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONObject@0000000001");
      jSONTokener0.nextTo("wheel.json.JSONObject@0000000001");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONObject@0000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.5975592837958557
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      stringWriter0.flush();
      String string1 = jSONObject0.toString((-2592), 40);
      String string2 = jSONObject0.toString((-2592));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.610139666424519
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Integer integer0 = new Integer((-763));
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Integer.divideUnsigned((-763), (-763));
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      JSONObject.valueToString(jSONObject1, (-763), 1);
      Object object0 = new Object();
      double double0 = new Long(1);
      StringWriter stringWriter0 = new StringWriter(8192);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put(")WCs^hz3LZDj", (Collection) linkedList0);
      JSONObject.valueToString("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}", (-4403), 0);
      Float float0 = new Float((double) 1);
      JSONObject jSONObject2 = new JSONObject("Ns!:Fs", stringArray0);
      try { 
        jSONObject2.getLong("_n>J]H(p:&SE(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_n>J]H(p:&SE(\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Integer, Boolean> hashMap3 = new HashMap<Integer, Boolean>();
      HashMap<Short, Integer> hashMap4 = new HashMap<Short, Integer>();
      Short short0 = new Short((short) (-274));
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap4);
      long long0 = 0L;
      Long long1 = new Long(0L);
      Long.sum((short) (-274), 462L);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 1342L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.046212966853168
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ";5O:7wGL?p9{BY,~tm%";
      stringArray0[1] = ";5O:7wGL?p9{BY,~tm%";
      stringArray0[2] = ";5O:7wGL?p9{BY,~tm%";
      stringArray0[3] = "di";
      stringArray0[4] = "] is not a Boolean.";
      Double double0 = new Double(0.0);
      double double1 = Double.sum(15.24019856092846, Double.NaN);
      Double.min(0.0, Double.NaN);
      Object object2 = new Object();
      JSONObject jSONObject0 = new JSONObject(object2);
      jSONObject0.optLong("islogicalOr", 1L);
      double double2 = Double.max(Double.NaN, Double.NaN);
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.41864420449796
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.parallelStream();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Double double0 = new Double((-1.0));
      Double.min(0.0, 0.0);
      JSONObject jSONObject1 = jSONObject0.accumulate("({8}d#$A|$9q.=$YMd", "co");
      jSONObject1.optInt("co");
      jSONObject0.getString("({8}d#$A|$9q.=$YMd");
      try { 
        jSONObject0.getLong("fcyEVMI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fcyEVMI\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.2022413954579148
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Short.compare((short) (-3877), (short)47);
      Short.compare((short)26, (short)26);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(0, (-1940));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      try { 
        jSONObject0.append((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.0328827474726703
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Integer integer0 = new Integer((-763));
      String[] stringArray0 = new String[2];
      stringArray0[1] = ")WCs^hz3LZDj";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Integer.divideUnsigned((-763), (-763));
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      jSONObject0.toString((-763), 0);
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(8192);
      jSONObject1.optLong("_n>J]H(p:&SE(");
      jSONObject0.optInt(")WCs^hz3LZDj", 8192);
      jSONObject0.append("1i", stringArray0[0]);
      JSONObject.quote("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}");
      Integer.sum(1, (-763));
      jSONObject1.optDouble("cop");
      jSONObject0.getLong(")WCs^hz3LZDj");
      jSONObject0.optInt("1i", 114);
      try { 
        jSONObject0.getDouble("P.F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"P.F\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.971546327153289
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte byte1 = new Byte((byte)83);
      String[] stringArray0 = new String[1];
      String string0 = "(]c#.4w";
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Byte byte2 = new Byte((byte)56);
      Byte byte3 = new Byte((byte)56);
      JSONObject jSONObject1 = jSONObject0.accumulate("U4bDj5to^", byte3);
      jSONObject1.optLong("U4bDj5to^");
      jSONObject1.put(",:]}/\"[{;=#", 13);
      String string1 = null;
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Boolean.valueOf(true);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      int int0 = 123;
      Integer integer0 = new Integer(123);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>(123);
      hashMap1.clone();
      Boolean boolean0 = new Boolean(true);
      Integer integer1 = new Integer(123);
      int int1 = (-3929);
      Integer integer2 = new Integer((-3929));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.3376514649426348
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      Short short0 = new Short((short)6);
      Integer integer0 = new Integer((short)6);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      Integer integer1 = new Integer((short)6);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = hashMap0.merge(short0, integer1, biFunction0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("getlowestOneBit");
      Short short1 = new Short((short)6);
      Integer integer3 = new Integer((short)6);
      Short short2 = new Short((short)6);
      hashMap0.put(short2, integer2);
      jSONObject1.put("getlowestOneBit", (Object) "Expected a ':' after a key");
      jSONObject0.optLong("] is not a JSONObject.");
      jSONObject1.opt("0..");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      Float.sum((-1.0F), (-1.0F));
      Float.sum((-2.0F), 0.0F);
      Float.sum(0.0F, (-3145.8745F));
      Float.min((-3145.8745F), 0.0F);
      float float0 = new Float((-1.0F));
      Float.sum((-2.0F), 1.0F);
      Float.sum((-2.0F), 1.0F);
      Float.sum(1.0F, (-89.24F));
      Float float1 = new Float(0.0);
      Float.sum(1136.1747F, 2752.64F);
      Float.min(1.0F, (-88.24F));
      Byte byte0 = new Byte((byte)125);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Short.toUnsignedInt((short)1);
      Short.compare((short)1156, (short)71);
      Short.toUnsignedLong((short)115);
      Short.compare((short)71, (short)32);
      Short.compare((short)158, (short)3837);
      Short.compare((short) (-2177), (short)158);
      Float float0 = new Float((double) (short)1);
      Float.min(0.0F, 3066.1895F);
      Float.sum((-406.0F), 0.0F);
      Float.sum((-1.0F), (-1.0F));
      Float float1 = new Float((double) (short)158);
      Float.min((-406.0F), (-1350.0F));
      String string0 = JSONObject.valueToString(float1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.8624789868050988
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Short.toUnsignedInt((short)1);
      Short.compare((short)1156, (short)71);
      Short.toUnsignedLong((short)115);
      Short.compare((short)71, (short)32);
      Short.compare((short)158, (short)3837);
      Short.compare((short) (-2177), (short)158);
      Float float0 = new Float((double) (short)1);
      Float.min(0.0F, 3066.1895F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double((-3679));
      linkedList1.add(double0);
      Float.max(838.0F, 1.0F);
      linkedList1.parallelStream();
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.get("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.0729839760476843
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Integer integer0 = new Integer(13);
      Integer.sum(114, 114);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "iscompare";
      stringArray0[1] = "/l";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      long long0 = jSONObject0.optLong("/l", 328L);
      assertEquals(328L, long0);
      
      double double0 = jSONObject0.optDouble("/l", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      long long1 = jSONObject0.optLong("iscompare");
      assertEquals(0L, long1);
      
      int int0 = jSONObject0.optInt("/l");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.close();
      stringWriter0.close();
      StringWriter stringWriter1 = new StringWriter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "su";
      stringArray0[1] = "+Q:zta";
      stringArray0[2] = "gettoHexString";
      stringArray0[3] = "-701.8561123010";
      stringArray0[4] = "toS";
      JSONObject jSONObject0 = new JSONObject(stringWriter1, stringArray0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Float float0 = new Float((-60.54036445530755));
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      Float float1 = new Float((double) 1.0F);
      linkedList2.add(float0);
      Float float2 = new Float(0.0F);
      Float float3 = new Float(642.103F);
      linkedList2.add(float3);
      Short short0 = new Short((short)9);
      Short.compare((short)9, (short)9);
      Short.toUnsignedLong((short) (-29662));
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      linkedList3.pollFirst();
      Double double0 = new Double((short)9);
      Double.max(642.103F, (-1108.8276930960144));
      linkedList3.listIterator();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      linkedList5.poll();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "SVb\f#'S,'uJHA;iB";
      stringArray0[1] = "SVb\f#'S,'uJHA;iB";
      stringArray0[2] = "SVb\f#'S,'uJHA;iB";
      Byte byte0 = new Byte((byte)9);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.078395752078857
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Short.toUnsignedInt((short)1);
      Short.compare((short)1156, (short)71);
      Short.toUnsignedLong((short)115);
      Short.compare((short)71, (short)32);
      Short.compare((short)158, (short)3837);
      Short.compare((short) (-2177), (short)158);
      Float float0 = new Float((double) (short)1);
      Float.min(0.0F, 3066.1895F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.parallelStream();
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.putOpt("getput", "getput");
      try { 
        jSONObject0.getDouble("getput");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getput\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      short short0 = (short) (-1106);
      Short short1 = new Short((short) (-1106));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"<J47L0A6/-";
      Float.sum((short) (-1106), (short) (-1106));
      Float.sum((-1.0F), (-1.0F));
      Float.sum((-2.0F), (-1.0F));
      Long long0 = new Long((-4429L));
      Long.sum(208L, 0L);
      Long.max((short) (-1106), 0L);
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Short short2 = new Short((short) (-1106));
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      hashMap0.putAll(hashMap1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute(long0, biFunction0);
      hashMap0.putIfAbsent(long0, "Hofi8*&m}");
      HashMap<Integer, Double> hashMap2 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Long long0 = new Long(2406L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "RL7!Q1&<,b";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      try { 
        jSONObject0.getJSONObject("gsu;Ht");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gsu;Ht\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Short.toUnsignedInt((short)1);
      Short.compare((short)1156, (short)71);
      long long0 = new Short((short)71);
      Short.compare((short)71, (short)32);
      Short.compare((short)158, (short)3837);
      Short.compare((short) (-2177), (short)158);
      Float float0 = new Float((double) (short)1);
      Float.min(0.0F, 3066.1895F);
      Float.sum((-406.0F), 0.0F);
      Float.sum((-1.0F), (-1.0F));
      Float.sum((short)71, 1.0F);
      Float float1 = new Float((double) (short)158);
      float float2 = Float.min((-406.0F), (-1350.0F));
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.testValidity(float0);
      assertNotEquals((float)float0, (float)float2, 0.01F);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.502643297757431
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Short short0 = new Short((short) (-1106));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((short) (-1106));
      linkedList0.add(double0);
      linkedList0.parallelStream();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Byte byte0 = new Byte((byte) (-99));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      Double double1 = new Double((short) (-1106));
      Boolean boolean0 = new Boolean(true);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      linkedList3.clear();
      Byte byte1 = new Byte((byte) (-25));
      String[] stringArray0 = new String[1];
      stringArray0[0] = " Bu:";
      JSONObject jSONObject1 = new JSONObject(byte1, stringArray0);
      jSONObject0.toString((int) (short) (-1106), (int) (short) (-1106));
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.2696172122480425
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      HashMap<Short, Integer> hashMap2 = new HashMap<Short, Integer>();
      Short short0 = new Short((short)163);
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Byte byte0 = new Byte((byte)9);
      JSONObject jSONObject1 = new JSONObject(byte0);
      jSONObject1.toString(93, 93);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.840827283190615
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Float float0 = new Float((-270.9474F));
      Float.isFinite(43.59076F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer integer0 = new Integer((-1207));
      boolean boolean0 = jSONObject0.isNull("Unclosed comment");
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.026016522068678
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Short.valueOf((short)2069);
      Short.toUnsignedLong((short)123);
      Short.toUnsignedInt((short)2069);
      Short.compare((short) (-3877), (short)47);
      Short.compare((short)26, (short)26);
      Short.compare((short)2069, (short)26);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(A5/";
      jSONObject0.remove("false");
      stringArray0[1] = "null";
      stringArray0[2] = "Expected '";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      HashMap<Long, Boolean>[] hashMapArray0 = (HashMap<Long, Boolean>[]) Array.newInstance(HashMap.class, 9);
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      hashMapArray0[0] = hashMap0;
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>(102, 102);
      hashMapArray0[1] = hashMap1;
      HashMap<Long, Boolean> hashMap2 = new HashMap<Long, Boolean>();
      hashMapArray0[2] = hashMap2;
      HashMap<Long, Boolean> hashMap3 = new HashMap<Long, Boolean>(4, 4);
      hashMapArray0[3] = hashMap3;
      HashMap<Long, Boolean> hashMap4 = new HashMap<Long, Boolean>();
      hashMapArray0[4] = hashMap4;
      HashMap<Long, Boolean> hashMap5 = new HashMap<Long, Boolean>();
      hashMapArray0[5] = hashMap5;
      HashMap<Long, Boolean> hashMap6 = new HashMap<Long, Boolean>();
      hashMapArray0[6] = hashMap6;
      HashMap<Long, Boolean> hashMap7 = new HashMap<Long, Boolean>();
      hashMapArray0[7] = hashMap7;
      HashMap<Long, Boolean> hashMap8 = new HashMap<Long, Boolean>();
      hashMapArray0[8] = hashMap8;
      linkedList0.toArray(hashMapArray0);
      linkedList0.parallelStream();
      Double double0 = new Double(4);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.717724998462594
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      Short.compare((short) (-3167), (short) (-3167));
      Short.toUnsignedLong((short)115);
      Short.compare((short)32, (short) (-3167));
      Short.compare((short)4134, (short)158);
      Short.compare((short)3734, (short) (-3517));
      Float float0 = new Float((double) 3976);
      Float.min(7251, (short)4134);
      Float.max(3220.4F, (short) (-3167));
      Float.min(0.0F, (short) (-3517));
      Float.sum((-2338.962F), 2212.236F);
      Float.max(115L, (short)3734);
      Boolean boolean0 = Boolean.valueOf("getnotifyAll");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.putOpt("getnotifyAll", float0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Integer, Boolean> hashMap3 = new HashMap<Integer, Boolean>();
      HashMap<Short, Integer> hashMap4 = new HashMap<Short, Integer>();
      Short short0 = new Short((short) (-944));
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      Long long0 = new Long(0L);
      Long.sum(0L, (short) (-944));
      Long.max(3040L, 203L);
      HashMap<Long, String> hashMap6 = new HashMap<Long, String>();
      Short short1 = new Short((short) (-944));
      hashMap6.putAll(hashMap1);
      BiFunction<Long, String, String> biFunction0 = (BiFunction<Long, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyLong() , anyString());
      hashMap6.compute((Long) null, biFunction0);
      Byte byte0 = new Byte((byte)55);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.1229295229850584
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Short short0 = new Short((short) (-1106));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.parallelStream();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Double double0 = new Double((short) (-1106));
      linkedList0.add(double0);
      jSONObject0.optBoolean("Expected a ',' or ']'", false);
      jSONObject0.optDouble("8{DHRS1kmX.RbY", 0.0);
      Byte byte0 = new Byte((byte) (-99));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double1 = new Double((short) (-1106));
      linkedList1.add(double1);
      Byte byte1 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte1);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Short short0 = new Short((short) (-1106));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"<J47L0A6/-";
      Float.sum((short) (-1106), (short) (-1106));
      Float.sum((-1.0F), (-1.0F));
      Float.sum((-2.0F), (-1.0F));
      Float.min(1.0F, 765.53705F);
      Float.max(1.0F, (-3.0F));
      JSONObject.quote("wW`Q]~W");
      Short short1 = new Short((short)105);
      Byte byte0 = new Byte((byte) (-50));
      assertEquals((byte) (-50), (byte)byte0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.9494837273589989
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[2] = "zi{[&?`[}*@Z";
      Short.toUnsignedLong((short)3837);
      Short.compare((short)158, (short)159);
      Short.compare((short)158, (short)288);
      Float float0 = new Float(Double.NaN);
      Float float1 = new Float((double) 2824.2F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList1.retainAll(linkedList2);
      Double double0 = new Double(3947.3259117701);
      linkedList1.offer(double0);
      linkedList1.add(double0);
      Double double1 = new Double(1583.8449);
      linkedList1.add(double1);
      Double double2 = new Double((-2497.5710481844085));
      linkedList0.add(double2);
      Float.max((-2846.9775F), 2730.673F);
      linkedList0.parallelStream();
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.getDouble("rJ{Kz7+^5y2c1t$nPdd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"rJ{Kz7+^5y2c1t$nPdd\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Short.valueOf((short)105);
      Short short0 = new Short((short)105);
      Short.toUnsignedInt((short)1376);
      Short.compare((short)1971, (short)1);
      Short.compare((short)230, (short)1156);
      Short.compare((short)1156, (short)25);
      Short.compare((short)3837, (short)1156);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.2711040449052744
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Short short0 = new Short((short)1270);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "vsiI*z,LT5\"5Aw[<";
      stringArray0[2] = "zi{[&?`[}*@Z";
      stringArray0[3] = "not";
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(30, 2577);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.066278442414676
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Byte byte0 = new Byte((byte) (-104));
      String string0 = JSONObject.valueToString(stringWriter0, (byte) (-104), (byte) (-104));
      assertNotNull(string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.2697606674508854
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Short.toUnsignedInt((short)1);
      Short.compare((short)1156, (short)71);
      Short.toUnsignedLong((short)115);
      Short.compare((short)71, (short)32);
      Short.compare((short)158, (short)3837);
      Short.compare((short) (-2177), (short)158);
      Float float0 = new Float((double) (short)1);
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Short short0 = new Short((short)0);
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      hashMap1.keySet();
      hashMap0.putAll(hashMap1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap1.compute((Long) null, biFunction0);
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      Long long0 = new Long((-3679));
      HashMap<Integer, Double> hashMap3 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString(2944, 1360);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.8499680486228542
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte byte1 = new Byte((byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Byte.toUnsignedLong((byte)51);
      jSONObject0.put("] is not a number.", true);
      int int0 = new Byte((byte) (-34));
      Byte.toUnsignedLong((byte) (-34));
      JSONObject jSONObject1 = jSONObject0.put("%iw3L'ND^t5", true);
      boolean boolean0 = jSONObject1.optBoolean("%iw3L'ND^t5", true);
      assertTrue(boolean0);
      
      Byte.toUnsignedInt((byte)0);
      jSONObject0.optJSONObject("min");
      JSONObject jSONObject2 = jSONObject1.put("(]c#.4w", (int) (byte)0);
      jSONObject1.getInt("(]c#.4w");
      Object object0 = JSONObject.NULL;
      double double0 = jSONObject1.optDouble("(]c#.4w");
      assertEquals(0.0, double0, 0.01);
      
      float float0 = new Byte((byte)51);
      jSONObject2.getInt("(]c#.4w");
      long long0 = jSONObject1.optLong(",\n");
      assertEquals(0L, long0);
      
      jSONObject0.getString("%iw3L'ND^t5");
      Float float1 = new Float((byte)51);
      Float.min(0.059684213F, 0.0F);
      JSONObject jSONObject3 = jSONObject0.append("wheel.json.JSONObject$1", float1);
      Object object1 = jSONObject3.get("(]c#.4w");
      assertEquals(0, object1);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.9205947352122825
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\r", 0.0);
      Integer.getInteger("isformat");
      Boolean boolean0 = new Boolean(false);
      Boolean boolean1 = new Boolean(false);
      Boolean.getBoolean("naJYn");
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      hashMap0.put((Integer) null, boolean1);
      Integer integer0 = new Integer((-1822));
      Integer.toUnsignedLong((-1822));
      Boolean boolean2 = new Boolean(false);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      hashMap0.clone();
      Integer.getInteger("isformat");
      Boolean.valueOf(false);
      Boolean boolean3 = new Boolean(true);
      hashMap0.put((Integer) null, boolean3);
      try { 
        jSONObject1.getBoolean("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\r\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.602280504188534
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Short short0 = new Short((short) (-1106));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.parallelStream();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Double double0 = new Double((short) (-1106));
      linkedList0.add(double0);
      Byte byte0 = new Byte((byte) (-99));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double1 = new Double((short) (-1106));
      linkedList1.add(double1);
      Byte byte1 = new Byte((byte)90);
      jSONObject0.put("] is not a Boolean.", false);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.081477091302241
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Integer, Boolean> hashMap3 = new HashMap<Integer, Boolean>();
      HashMap<Short, Integer> hashMap4 = new HashMap<Short, Integer>();
      Short short0 = new Short((short) (-944));
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      HashMap<Long, String> hashMap6 = new HashMap<Long, String>();
      Boolean boolean1 = new Boolean(false);
      HashMap<Integer, Boolean> hashMap7 = new HashMap<Integer, Boolean>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ": ";
      stringArray0[1] = "Expected a ',' or '}'";
      stringArray0[2] = "<<5/s1/i&$!P9L0";
      stringArray0[3] = "0_clI#Yz";
      JSONObject jSONObject1 = new JSONObject(hashMap3, stringArray0);
      double double0 = jSONObject1.optDouble("getlogicalOr");
      assertEquals(Double.NaN, double0, 0.01);
      
      HashMap<String, JSONArray> hashMap8 = new HashMap<String, JSONArray>();
      int int0 = jSONObject1.optInt("Expected a ',' or '}'");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Short short0 = new Short((short) (-1106));
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("c=KN|d", stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.close();
      jSONObject0.write(stringWriter0);
      stringWriter1.write((int) (short) (-1106));
      StringWriter stringWriter2 = new StringWriter();
      assertEquals("", stringWriter2.toString());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.4140512084176216
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Short short0 = new Short((short) (-1106));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"<J47L0A6/-";
      stringArray0[1] = "c=KWvvGNd|d";
      stringArray0[2] = "T_]#=Z+M+Jcw|XF";
      stringArray0[3] = "is";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject0.getJSONArray("T_]#=Z+M+Jcw|XF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"T_]#=Z+M+Jcw|XF\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.773056873217124
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("true", "true");
      Boolean boolean0 = new Boolean("true");
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      jSONObject1.optBoolean("true", false);
      jSONObject1.optLong("true");
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      Boolean boolean1 = new Boolean(false);
      HashMap<Integer, Boolean> hashMap3 = new HashMap<Integer, Boolean>();
      jSONObject0.optDouble("toS");
      HashMap<String, JSONArray> hashMap4 = new HashMap<String, JSONArray>();
      int int0 = jSONObject0.optInt("true");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Float float0 = new Float((-60.54087750941));
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      Float float1 = new Float((double) 1.0F);
      linkedList2.add(float0);
      Float float2 = new Float(0.0F);
      Float float3 = new Float(642.103F);
      linkedList2.add(float3);
      Short short0 = new Short((short)9);
      Short.compare((short)9, (short)9);
      Short.toUnsignedLong((short) (-29662));
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      linkedList3.pollFirst();
      Double double0 = new Double((short)9);
      Double.max(642.103F, (-4855.8742));
      linkedList3.listIterator();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      linkedList5.poll();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "SVb#'S,'uJHA;iB";
      stringArray0[1] = "SVb#'S,'uJHA;iB";
      stringArray0[2] = "SVb#'S,'uJHA;iB";
      stringArray0[3] = "SVb#'S,'uJHA;iB";
      stringArray0[4] = "SVb#'S,'uJHA;iB";
      stringArray0[5] = "SVb#'S,'uJHA;iB";
      stringArray0[6] = "SVb#'S,'uJHA;iB";
      JSONObject jSONObject0 = new JSONObject(linkedList5, stringArray0);
      JSONArray jSONArray1 = jSONObject0.names();
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean0 = Boolean.TRUE;
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Short, Integer> hashMap3 = new HashMap<Short, Integer>();
      Short short0 = new Short((short) (-944));
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap4);
      Float.max(105, (-1076.58F));
      jSONObject0.accumulate("getjoin", (Object) null);
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.244078921955791
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Short.toUnsignedInt((short)1);
      Short.compare((short)1156, (short)71);
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("JSON does not allow non-finite numbers.", true);
      assertTrue(boolean0);
      
      long long0 = jSONObject0.optLong("JSON does not allow non-finite numbers.");
      assertEquals(0L, long0);
      
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      Boolean boolean1 = new Boolean(true);
      HashMap<Integer, Boolean> hashMap3 = new HashMap<Integer, Boolean>();
      double double0 = jSONObject0.optDouble("JSON does not allow non-finite numbers.");
      assertEquals(Double.NaN, double0, 0.01);
      
      HashMap<String, JSONArray> hashMap4 = new HashMap<String, JSONArray>();
      int int0 = jSONObject0.optInt("\r");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(493.86F);
      Float.isFinite((-1546.9075F));
      boolean boolean0 = jSONObject0.optBoolean("x<9");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.950089105224377
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(123);
      Integer integer1 = new Integer((-2334));
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      Short short0 = new Short((short)4207);
      Double.sum(3178.388, (-3136.92));
      double double0 = Double.NaN;
      Double.min(0.0, (-3136.92));
      Long long0 = new Long(123);
      JSONObject jSONObject0 = new JSONObject(long0);
      try { 
        jSONObject0.getBoolean("_UrEs4~um?i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_UrEs4~um?i\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Short.toUnsignedInt((short)1);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(3);
      Integer.valueOf((-2201));
      JSONObject.quote("+\"BcP<6[P;vqH");
      Short short0 = new Short((short)2387);
      Byte byte0 = new Byte((byte) (-8));
      assertEquals((byte) (-8), (byte)byte0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.4140512084176216
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ";5O:7wGL?p9{BY,~tm%";
      stringArray0[1] = ";5O:7wGL?p9{BY,~tm%";
      stringArray0[2] = "^Yv2e";
      stringArray0[3] = "di";
      stringArray0[4] = "] is not a Boolean.";
      stringArray0[5] = ",\n";
      stringArray0[6] = " (vBtAn?Y(1Z7%wO";
      String string0 = "^ tJ%";
      stringArray0[8] = "PfdG";
      JSONObject jSONObject0 = new JSONObject(object1, stringArray0);
      try { 
        jSONObject0.getLong(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.9494837273589989
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Short short0 = new Short((short) (-1106));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"<J47L0A6/-";
      Float.sum((short) (-1106), (short) (-1106));
      Float.sum((-2212.0F), (short) (-1106));
      Float.min(1.0F, 765.53705F);
      Float.max(765.53705F, (-2212.0F));
      Float.min((-749.84973F), 1.0F);
      Float.sum((-1.0F), (-2248.5F));
      Float.sum(0.0F, 765.53705F);
      Float.max((-4704.0F), 1.0F);
      Float float0 = new Float((-2203.3738F));
      Float.min((-2212.0F), (-1.0F));
      Float.min(0.0F, 1.0F);
      Float.min((-4493.1104F), (-4704.0F));
      Float.max((-1961.547F), (short) (-1106));
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.getLong("I7ye265xjZ[Yo`@vi&4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"I7ye265xjZ[Yo`@vi&4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Integer, Boolean> hashMap3 = new HashMap<Integer, Boolean>();
      HashMap<Short, Integer> hashMap4 = new HashMap<Short, Integer>();
      Float float0 = new Float(2190.43F);
      Long long0 = new Long(0L);
      Long.sum(0L, 3040L);
      Long.max(0L, (-2202L));
      HashMap<Long, String> hashMap5 = new HashMap<Long, String>();
      Long.max(233L, 1L);
      Long long1 = new Long(3040L);
      Long.compare(3040L, 0L);
      String string0 = "null";
      hashMap0.putIfAbsent(long1, "null");
      HashMap<Integer, Double> hashMap6 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Integer, Boolean> hashMap3 = new HashMap<Integer, Boolean>();
      HashMap<Short, Integer> hashMap4 = new HashMap<Short, Integer>();
      short short0 = (short) (-944);
      Short short1 = new Short((short) (-944));
      Short short2 = new Short((short)127);
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Long long0 = new Long((-1L));
      Long.sum((short)127, (short)127);
      Long.max(0L, 254L);
      HashMap<Long, String> hashMap6 = new HashMap<Long, String>();
      Short short3 = new Short((short)14);
      HashMap<Long, String> hashMap7 = null;
      try {
        hashMap7 = new HashMap<Long, String>((short) (-944), 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -944
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter1 = new StringWriter();
      Long long0 = new Long((-763));
      JSONObject.quote((String) null);
      Byte byte0 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Short.toUnsignedInt((short)1);
      Short.compare((short)1156, (short)71);
      Short.toUnsignedLong((short)115);
      Short.compare((short)71, (short)32);
      Short.compare((short)158, (short)3837);
      Short.compare((short) (-2177), (short)158);
      Float float0 = new Float((double) (short)1);
      Float.min(0.0F, 3066.1895F);
      Float.sum((-406.0F), 0.0F);
      String string0 = JSONObject.quote("getgetBuffer");
      assertEquals("\"getgetBuffer\"", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Short short0 = new Short((short) (-1106));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"<J47L0A6/-";
      Float.sum((short) (-1106), (short) (-1106));
      Float.sum((-1.0F), (-1.0F));
      Float.sum((-2.0F), (-1.0F));
      Float.min(1.0F, 0.0F);
      Float.max(1.0F, (-3.0F));
      Float.min(1.0F, 0.0F);
      Float.min((-749.84973F), 0.0F);
      Float.sum(2323.2163F, (-2248.5F));
      Float.sum(0.0F, 1.0F);
      Float.max((-4704.0F), 1.0F);
      Float float0 = new Float((-2.0F));
      Float.min(0.0F, 0.0F);
      Float float1 = new Float((double) 0.0F);
      Float.min(0.0F, 1.0F);
      String string0 = JSONObject.doubleToString((-1.0F));
      assertEquals("-1", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      HashMap<Long, Boolean>[] hashMapArray0 = (HashMap<Long, Boolean>[]) Array.newInstance(HashMap.class, 9);
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      hashMapArray0[0] = hashMap0;
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>(102, 102);
      hashMapArray0[1] = hashMap1;
      HashMap<Long, Boolean> hashMap2 = new HashMap<Long, Boolean>();
      hashMapArray0[2] = hashMap2;
      HashMap<Long, Boolean> hashMap3 = new HashMap<Long, Boolean>(4, 4);
      hashMapArray0[3] = hashMap3;
      HashMap<Long, Boolean> hashMap4 = new HashMap<Long, Boolean>();
      hashMapArray0[4] = hashMap4;
      HashMap<Long, Boolean> hashMap5 = new HashMap<Long, Boolean>();
      hashMapArray0[5] = hashMap5;
      HashMap<Long, Boolean> hashMap6 = new HashMap<Long, Boolean>();
      hashMapArray0[6] = hashMap6;
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONArray0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.490314928127493
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Integer integer0 = new Integer(395);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = new JSONObject();
      Byte byte0 = new Byte((byte)57);
      JSONObject jSONObject2 = jSONObject0.put("] is not a Boolean.", (Object) byte0);
      Double.max((-1.0), (byte)57);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject3 = jSONObject2.accumulate("isintern", jSONArray0);
      jSONObject2.putOpt("false", jSONObject3);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Short short0 = new Short((short) (-1106));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"<J47L0A6/-";
      Float.sum((short) (-1106), (short) (-1106));
      Float.sum((-1.0F), (-1.0F));
      Float.sum((-2.0F), (short) (-1106));
      Float.min((-1.0F), 765.53705F);
      Float.max((-1108.0F), (-1108.0F));
      Float.min((-749.84973F), (-1.0F));
      Float.sum((short) (-1106), (-2.0F));
      Float.sum(1136.1747F, (-166.31F));
      Float.sum((-1108.0F), 1068.7F);
      Float float0 = new Float((double) 1.0F);
      Float.sum((-225.7126F), 1136.1747F);
      Float.min(1124.8754F, 1.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Integer, Boolean> hashMap3 = new HashMap<Integer, Boolean>();
      HashMap<Short, Integer> hashMap4 = new HashMap<Short, Integer>();
      Short short0 = new Short((short) (-944));
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      Long long0 = new Long(0L);
      Long.sum(0L, (short) (-944));
      Long.max(3040L, 203L);
      HashMap<Long, String> hashMap6 = new HashMap<Long, String>();
      Long.max((short) (-944), (-358L));
      hashMap6.putIfAbsent(long0, (String) null);
      HashMap<Integer, Double> hashMap7 = new HashMap<Integer, Double>();
      try { 
        jSONObject0.getInt("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.476941678592489
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Short, Integer> hashMap3 = new HashMap<Short, Integer>();
      Short short0 = new Short((short) (-944));
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap4);
      int int0 = jSONObject0.optInt("Zk5Gkr!id\"q~TI");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.7588182874513898
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Integer integer0 = new Integer((-763));
      Integer integer1 = new Integer(34);
      Integer integer2 = new Integer(34);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      Short short0 = new Short((short)4207);
      Integer integer3 = new Integer((-2334));
      Integer.getInteger("Nl##4?xb_+iQ*PY96");
      Integer.getInteger("'oTo`L&a", (Integer) null);
      Integer.compareUnsigned(670, 39);
      Integer.getInteger("'oTo`L&a", 670);
      Short short1 = new Short((short)2948);
      JSONObject.numberToString(short1);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("<D`7U>?`(<dZHH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of <D`7U>?`(<dZHH
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
