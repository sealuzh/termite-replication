/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 09:15:28 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = JSONObject.quote("6/8rv4iA<c#/g:");
      assertEquals("\"6/8rv4iA<c#/g:\"", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Long long0 = new Long((byte)102);
      JSONObject.testValidity(long0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9736489231972635
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6957425341696344
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer integer0 = new Integer((-763));
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.put(")WCs^hz3LZDj", 408L);
      Object object0 = jSONObject0.remove(")WCs^hz3LZDj");
      assertEquals(408L, object0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("sp", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5358551955461084
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Float float0 = new Float((-15.137566F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Byte byte0 = new Byte((byte)114);
      jSONObject0.accumulate("", byte0);
      jSONObject0.optString("");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5936174605927702
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.optLong((String) null, 0L);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0823563847381665
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = new Integer((-763));
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String string0 = "\\u";
      long long0 = jSONObject0.optLong(string0, 408L);
      assertEquals(408L, long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8989267893363286
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(2675L);
      linkedList0.add(long0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("isfloatToIntBits", 919.4);
      int int0 = jSONObject1.optInt("isfloatToIntBits");
      assertEquals(919, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0449311748495913
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1042.3));
      jSONObject0.accumulate("gettoHexString", double0);
      int int0 = jSONObject0.optInt("gettoHexString");
      assertEquals((-1042), int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, (double) 123L);
      assertEquals(123.0, double0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5358551955461084
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Byte byte0 = new Byte((byte)112);
      jSONObject0.accumulate("", byte0);
      double double0 = jSONObject0.optDouble("");
      assertEquals(4, jSONObject0.length());
      assertEquals(112.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1873223188492537
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", true);
      boolean boolean0 = jSONObject1.optBoolean("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("(]c#.4w", true);
      Object object1 = jSONObject0.opt("(]c#.4w");
      assertEquals(true, object1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "isejuoals");
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5358551955461084
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Float float0 = new Float((-15.137566F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Byte byte0 = new Byte((byte)114);
      jSONObject0.accumulate("", byte0);
      jSONObject0.getString("");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("get", (-1842));
      int int0 = jSONObject1.getInt("get");
      assertEquals((-1842), int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (-2571.6886318));
      double double0 = jSONObject1.getDouble("] not found.");
      assertEquals((-2571.6886318), double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7877024060653857
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(2675L);
      Long long1 = new Long(0L);
      linkedList0.add(long1);
      linkedList0.add(long0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      // Undeclared exception!
      jSONObject0.toString(1393, 8192);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8398854144113999
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      // Undeclared exception!
      jSONObject0.toString(3430);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.2798542258336674
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("set", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ] is not a JSONObject.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Long long0 = new Long(503L);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(long0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.712227691559177
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString(10, 10);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-2324), (int) (byte)102);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "QZ^cIi,%L6H;FjA.qn");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("kilZ", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = new String[7];
      try { 
        jSONObject0.put(stringArray0[1], (Object) "Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.optString("{\n\"java.lang.String@0000000004\": \"java.lang.StringBuffer@0000000005\",\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n                                                           }", "");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble(":|f%q", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("isnotify");
      assertNull(object0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = new Double(1.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Short short0 = Short.valueOf((short) (-659));
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(")WCs^hz3LZDj", 408L);
      long long0 = jSONObject0.getLong(")WCs^hz3LZDj");
      assertEquals(408L, long0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("Null key.", (Collection) linkedList0);
      try { 
        jSONObject0.getLong("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5358551955461084
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Byte byte0 = new Byte((byte)112);
      JSONObject jSONObject1 = jSONObject0.accumulate("", byte0);
      jSONObject1.getInt("");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("CF_Yr", hashMap0);
      try { 
        jSONObject1.getDouble("CF_Yr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"CF_Yr\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5353632953768164
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(114);
      jSONObject0.accumulate("CF_Yr", integer0);
      try { 
        jSONObject0.getBoolean("CF_Yr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"CF_Yr\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6094379124341
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (-2571.6886318));
      Object object0 = jSONObject1.get("] not found.");
      assertEquals((-2571.6886318), object0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get(")WCs^hz3LZDj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")WCs^hz3LZDj\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.2033320406994705
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = Integer.valueOf(20);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("\b");
      assertNull(object0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.0023212479718584
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Float float0 = new Float(284.3600941599285);
      JSONObject jSONObject1 = jSONObject0.append("{", float0);
      StringWriter stringWriter0 = new StringWriter((byte)112);
      jSONObject1.write(stringWriter0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3826070734809082
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String string0 = JSONObject.valueToString(linkedList0, 1300, 1300);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      String string0 = JSONObject.valueToString(hashMap0, (-818), 59);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.0465852476376236
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Float float0 = new Float(284.3600941599285);
      JSONObject jSONObject1 = jSONObject0.append("{", float0);
      jSONObject1.toString(1342, (-450));
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 1118, 57);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 1, 1);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-818), 46);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.8486855577264172
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.874624493093895
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("false", (-1014.13238));
      String string0 = jSONObject0.toString((-1453));
      assertNotNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.6904546939944762
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      Long long0 = new Long((-2229L));
      linkedList1.add(long0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.2127556469888376
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.add((Long) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-75));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = JSONObject.quote("T/s");
      assertEquals("\"T/s\"", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = JSONObject.quote("D}E BXeAG+%b;\"}J");
      assertEquals("\"D}E BXeAG+%b;\\\"}J\"", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.7248301468410545
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      int int0 = jSONObject0.optInt("", 59);
      assertEquals(2, jSONObject0.length());
      assertEquals(59, int0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      jSONObject0.putOpt("CF_Yr", hashMap1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put("%iw3L'ND^t5", true);
      String string0 = jSONObject0.optString("%iw3L'ND^t5", "%iw3L'ND^t5");
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("spl");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("toL", (Collection) linkedList1);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("toL");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject("iscompare", stringArray0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("getsubList");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.6094379124341
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("false", (-1014.13238));
      double double0 = jSONObject0.optDouble("false", (-1014.13238));
      assertEquals((-1014.13238), double0, 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.9135152934164343
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Float float0 = new Float(284.3600941599285);
      jSONObject0.optInt("isvalueOf", (-658));
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.8883748344162048
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ")WCs^hz3LZDj");
      jSONObject0.toString((-763), (-2592));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Long long0 = new Long((-2229L));
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer((-386));
      hashMap0.putIfAbsent(integer0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.5171063970610277
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      
      Short short0 = new Short((short)2);
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Float float0 = new Float((-15.137566F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Short short0 = Short.valueOf((short) (-659));
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      Integer integer0 = new Integer((short) (-659));
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(short0, integer0, biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(")WCs^hz3LDj", 384L);
      long long0 = jSONObject0.optLong(")WCs^hz3LDj");
      assertEquals(384L, long0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.8101599924519924
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Float float0 = new Float(284.3600941599285);
      JSONObject jSONObject1 = jSONObject0.append("{", float0);
      long long0 = jSONObject1.optLong("{");
      assertEquals(4, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.106577333232116
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put("] is not a number.", false);
      jSONObject0.accumulate("] is not a number.", "(]c#.4w");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("] is not a number.");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.257133793549772
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Unclosed comment", (Object) boolean0);
      try { 
        jSONObject0.getJSONArray("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.9792045174343245
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.accumulate("CF_Yr", long0);
      int int0 = jSONObject1.optInt("CF_Yr", (-1879));
      assertEquals(0, int0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.9251211907908183
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Double double0 = new Double(1.0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.accumulate("646.614281534892", double0);
      double double1 = jSONObject0.getDouble("646.614281534892");
      assertEquals(1.0, double1, 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.5311386121723252
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("CF_Yr", hashMap0);
      try { 
        jSONObject0.getInt("CF_Yr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"CF_Yr\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.581573107414146
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(")WCs^hz3LDj", 384L);
      boolean boolean0 = jSONObject0.optBoolean(")WCs^hz3LDj", false);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.0837660374856473
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("%iw3L'ND^t5", true);
      boolean boolean0 = jSONObject1.optBoolean("%iw3L'ND^t5", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.6792706702716655
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("Substring bounds error", false);
      boolean boolean0 = jSONObject1.optBoolean("Substring bounds error", false);
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.4998949364896357
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("\t", (Object) null);
      try { 
        jSONObject0.getJSONObject("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = JSONObject.doubleToString(646.614281534892);
      assertEquals("646.614281534892", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.5247073930301438
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("#-|ol=)4P!ZdF@OPY", (Collection) linkedList0);
      Float float0 = new Float(0.0);
      jSONObject0.append("#-|ol=)4P!ZdF@OPY", float0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.8636799873410004
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Integer integer0 = new Integer((-763));
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      Long long0 = new Long((-17L));
      try { 
        jSONObject1.append(")WCs^hz3LZDj", long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[)WCs^hz3LZDj] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("\t", (Object) null);
      jSONObject0.accumulate("\t", "\t");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertFalse(jSONTokener0.more());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("|c(@u]w049ti-");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |c(@u]w049ti-
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.863679987341
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("CF_Yr", hashMap0);
      boolean boolean0 = jSONObject1.isNull("CF_Yr");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("u2q6:");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1752045970807579
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Boolean boolean0 = new Boolean("7&");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.put((String) null, (-3332));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.1894736293243366
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("\b");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("getputOpt", (-1901L));
      assertEquals((-1901L), long0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("false");
      assertEquals("", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("CF_Yr");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.784617558418788
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(10, 10);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("\t", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("\t", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }
}
