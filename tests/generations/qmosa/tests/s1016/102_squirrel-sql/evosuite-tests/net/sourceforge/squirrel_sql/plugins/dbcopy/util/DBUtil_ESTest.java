/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 11:58:51 GMT 2019
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.gargoylesoftware.base.resource.jdbc.CallableStatementWrapper;
import com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.ContainerOrderFocusTraversalPolicy;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.AdjustmentListener;
import java.awt.event.ComponentListener;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyListener;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelListener;
import java.awt.event.PaintEvent;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverPropertyInfo;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.EventListener;
import java.util.List;
import java.util.Stack;
import javax.swing.Box;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.InputVerifier;
import javax.swing.JColorChooser;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JProgressBar;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicCheckBoxUI;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.text.StyledEditorKit;
import javax.swing.tree.DefaultTreeCellRenderer;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAlias;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAliasColorProperties;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.client.util.ApplicationFileWrappersImpl;
import net.sourceforge.squirrel_sql.fw.id.UidIdentifier;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriver;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverPropertyCollection;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.fw.util.FileWrapper;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperFactoryImpl;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.data.time.Quarter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9358749974619789
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      JTextPane jTextPane0 = new JTextPane();
      jTextPane0.update((Graphics) null);
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI2 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getAccessibleChild(jTextPane0, Integer.MIN_VALUE);
      BasicCheckBoxUI basicCheckBoxUI3 = new BasicCheckBoxUI();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.FOREIGN_KEY;
      DBUtil.typesAreEquivalent((-1626), 579);
      SQLAlias sQLAlias0 = new SQLAlias();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, (-4), 70, (-4), (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.5357939587515939
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      ResultSet resultSet0 = null;
      PreparedStatement preparedStatement0 = null;
      int int0 = 93;
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 2004, 93, 2004, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.035639204717278
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DBUtil.getLastStatement();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, (String) null, "Encountered unexpected exception when attempting to call SQLDatabaseMetaData.getTables with catalog = ");
      DBUtil.validateColumnNames((ITableInfo) null, dBCopyPlugin0);
      SQLAlias sQLAlias0 = new SQLAlias();
      DriverPropertyInfo driverPropertyInfo0 = new DriverPropertyInfo((String) null, ";gyosMpig");
      SQLAlias sQLAlias1 = new SQLAlias();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      SQLDriver sQLDriver0 = new SQLDriver(uidIdentifier0);
      assertEquals("-7e62fa77:16e7e5a8a4a:-7f42", uidIdentifier0.toString());
      
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[6];
      iDatabaseObjectInfoArray0[0] = (IDatabaseObjectInfo) null;
      iDatabaseObjectInfoArray0[1] = (IDatabaseObjectInfo) null;
      iDatabaseObjectInfoArray0[2] = (IDatabaseObjectInfo) null;
      iDatabaseObjectInfoArray0[3] = (IDatabaseObjectInfo) null;
      iDatabaseObjectInfoArray0[4] = (IDatabaseObjectInfo) null;
      iDatabaseObjectInfoArray0[5] = (IDatabaseObjectInfo) null;
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      List<IDatabaseObjectInfo> list1 = DBUtil.convertTableToObjectList(list0);
      DBUtil.convertObjectToTableList(list1);
      assertEquals(6, list0.size());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      JTextPane jTextPane0 = new JTextPane();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 2, 2812, 2, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo(". Usxng 'max'", ". Usxng 'max'", ". Usxng 'max'");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDF;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.INDEX_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType(". Usxng 'max'");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("rcplaceOtherDataType: unexpected exception - ");
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType(". Usxng 'max'");
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.SYNONYM;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 3, 3, 1353, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      JTextPane jTextPane0 = new JTextPane();
      jTextPane0.update((Graphics) null);
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI2 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getAccessibleChild(jTextPane0, 2147483606);
      BasicCheckBoxUI basicCheckBoxUI3 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI4 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI5 = new BasicCheckBoxUI();
      basicCheckBoxUI4.getPropertyPrefix();
      basicCheckBoxUI2.getDefaultIcon();
      BasicCheckBoxUI basicCheckBoxUI6 = new BasicCheckBoxUI();
      basicCheckBoxUI6.getDefaultIcon();
      StyledEditorKit.FontFamilyAction styledEditorKit_FontFamilyAction0 = new StyledEditorKit.FontFamilyAction("CheckBox.", "CheckBox.");
      JMenu jMenu0 = new JMenu(styledEditorKit_FontFamilyAction0);
      jMenu0.add("?");
      basicCheckBoxUI0.getAccessibleChild(jMenu0, 2147483606);
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 92, 102, 4088, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JTextPane jTextPane0 = new JTextPane();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.remove(mouseWheelListener1, mouseWheelListener1);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove(mouseWheelListener1, mouseWheelListener1);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 1111, 59, 1896, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 70, (-1592), 70, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) null);
      AWTEventMulticaster.add((FocusListener) aWTEventMulticaster4, (FocusListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster5, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster5);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPropertyPrefix();
      JMenuBar jMenuBar0 = new JMenuBar();
      basicCheckBoxUI0.getAccessibleChild(jMenuBar0, 2786);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster4, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster5, (ComponentListener) aWTEventMulticaster3);
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, (-7), 2786, 2786, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 6, (-506), 6, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PreparedStatement preparedStatement0 = null;
      ResultSet resultSet0 = null;
      int int0 = 34;
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 2000, 34, 34, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      JTextPane jTextPane0 = new JTextPane();
      jTextPane0.update((Graphics) null);
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 16, 6, 47, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster5, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster4, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster.add((MouseWheelListener) aWTEventMulticaster2, (MouseWheelListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.remove((MouseWheelListener) aWTEventMulticaster5, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) aWTEventMulticaster7, (MouseWheelListener) aWTEventMulticaster3);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster6, (ComponentListener) null);
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, (-5), (-924), (-2705), (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.5357939587515939
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DBUtil.getLastStatement();
      int int0 = 0;
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 0, 0, 0, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener0, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster.add((AdjustmentListener) aWTEventMulticaster0, (AdjustmentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster2, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster4, (ComponentListener) aWTEventMulticaster0);
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, (-1), 370, 47, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PreparedStatement preparedStatement0 = null;
      ResultSet resultSet0 = null;
      int int0 = 2505;
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 1, 1, 2505, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      SQLAlias sQLAlias0 = new SQLAlias(uidIdentifier0);
      sQLAlias0.setIdentifier(uidIdentifier0);
      sQLAlias0.setAutoLogon(true);
      SQLAliasColorProperties sQLAliasColorProperties0 = sQLAlias0.getColorProperties();
      sQLAlias0.setColorProperties(sQLAliasColorProperties0);
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, (-6), (-6), 58, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      ComponentListener componentListener2 = AWTEventMulticaster.add((ComponentListener) null, componentListener1);
      ComponentListener componentListener3 = AWTEventMulticaster.add(componentListener1, componentListener2);
      AWTEventMulticaster.remove(componentListener3, componentListener3);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener2, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) null, componentListener3);
      AWTEventMulticaster.remove((KeyListener) aWTEventMulticaster0, (KeyListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) null, componentListener3);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster1, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add(componentListener3, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener3, componentListener2);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster4, componentListener3);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) aWTEventMulticaster5);
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 93, 2305, 1116, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((FocusListener) aWTEventMulticaster4, (FocusListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster.add((MouseWheelListener) aWTEventMulticaster5, (MouseWheelListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster3);
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 2002, (-3100), (-2916), (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      SQLAlias sQLAlias0 = new SQLAlias(uidIdentifier0);
      SQLAliasColorProperties sQLAliasColorProperties0 = sQLAlias0.getColorProperties();
      sQLAlias0.setColorProperties(sQLAliasColorProperties0);
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 2003, (-6), 58, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 1576;
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 7, 1576, 1576, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.5357939587515939
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 2005, 106, 50000, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 91, (-506), 91, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      ComponentListener componentListener2 = AWTEventMulticaster.remove(componentListener1, (ComponentListener) null);
      ComponentListener componentListener3 = AWTEventMulticaster.add(componentListener2, (ComponentListener) null);
      ComponentListener componentListener4 = AWTEventMulticaster.add(componentListener1, componentListener3);
      AWTEventMulticaster.remove(componentListener4, componentListener1);
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 12, 2002, (-3100), (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ResultSet resultSet0 = null;
      int int0 = 8;
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 8, (-3109), 8, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ArrayList<IDatabaseObjectInfo> arrayList0 = new ArrayList<IDatabaseObjectInfo>();
      ForeignKeyInfo[] foreignKeyInfoArray0 = new ForeignKeyInfo[8];
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      foreignKeyInfoArray0[0] = foreignKeyInfo0;
      foreignKeyInfoArray0[1] = foreignKeyInfo0;
      foreignKeyInfoArray0[2] = foreignKeyInfo0;
      arrayList0.add((IDatabaseObjectInfo) foreignKeyInfo0);
      foreignKeyInfoArray0[3] = foreignKeyInfo0;
      foreignKeyInfoArray0[4] = foreignKeyInfo0;
      foreignKeyInfoArray0[5] = foreignKeyInfo0;
      foreignKeyInfoArray0[6] = foreignKeyInfo0;
      foreignKeyInfoArray0[7] = foreignKeyInfo0;
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList(arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo$MockitoMock$1101153350 cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("$UxYl7@", "$UxYl7@", "$UxYl7@");
      int int0 = 2001;
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 2001, 3834, (-477), (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener1, (ComponentListener) null);
      AWTEventMulticaster.remove(componentListener1, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener1, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, componentListener1);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener1, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster5, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster5, (ComponentListener) aWTEventMulticaster6);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster6, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, componentListener1);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster7);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster8, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster6);
      AWTEventMulticaster.add(componentListener1, (ComponentListener) aWTEventMulticaster8);
      AWTEventMulticaster.add((MouseWheelListener) aWTEventMulticaster0, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) aWTEventMulticaster1);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) aWTEventMulticaster1);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, (ComponentListener) aWTEventMulticaster2);
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 5, 1000, 2, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.117456111453701
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getDestSession();
      String string0 = "[acou^K(I3k>";
      int int0 = 1;
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "", (String) null, (String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      JProgressBar jProgressBar0 = new JProgressBar(13, 13);
      jProgressBar0.getCursor();
      containerOrderFocusTraversalPolicy0.getFirstComponent(jProgressBar0);
      containerOrderFocusTraversalPolicy0.setImplicitDownCycleTraversal(true);
      containerOrderFocusTraversalPolicy0.setImplicitDownCycleTraversal(false);
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, (-1038), 12, 12, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.5357939587515939
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, (-2), (-3100), 292, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      ComponentListener componentListener2 = AWTEventMulticaster.add((ComponentListener) null, componentListener1);
      ComponentListener componentListener3 = AWTEventMulticaster.add(componentListener1, componentListener2);
      AWTEventMulticaster.remove(componentListener3, componentListener3);
      ComponentListener componentListener4 = AWTEventMulticaster.add(componentListener2, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener4);
      ComponentListener componentListener5 = AWTEventMulticaster.add((ComponentListener) null, componentListener3);
      ComponentListener componentListener6 = AWTEventMulticaster.add((ComponentListener) null, componentListener3);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener6);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      ComponentListener componentListener7 = AWTEventMulticaster.remove(componentListener5, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add(componentListener3, componentListener7);
      AWTEventMulticaster.add(componentListener3, componentListener2);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-44);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, "");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, (String) null, "5jQ,'&orxS,55pb0(,n");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin1, (ITableInfo) null, "[(y>$Du(930g4[", "=!<m@?YTV", " #~Gcc9qY*;>0`4U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo(". Usxng 'max'", ". Usxng 'max'", ". Usxng 'max'");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE;
      DatabaseObjectType.createNewDatabaseObjectType(". Usxng 'max'");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDF;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.INDEX_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType(". Usxng 'max'");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType.createNewDatabaseObjectType("rcplaceOtherDataType: unexpected exception - ");
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("), but the value was null.  ");
      DatabaseObjectType.createNewDatabaseObjectType("), but the value was null.  ");
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.SYNONYM;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DatabaseObjectType databaseObjectType7 = DatabaseObjectType.FUNCTION;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, "");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "", "G<}GQ9JL_");
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin0, (ITableInfo) null, "G<}GQ9JL_", "[(y>$Du(930g4[", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ArrayList<IDatabaseObjectInfo> arrayList0 = new ArrayList<IDatabaseObjectInfo>();
      dBCopyPlugin0.setSourceDatabaseObjects(arrayList0);
      int int0 = 2;
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (String) null, "[acou^K(I3k>", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo(". Usxng 'max'", ". Usxng 'max'", ". Usxng 'max'");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDF;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.INDEX_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType(". Usxng 'max'");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("rcplaceOtherDataType: unexpected exception - ");
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("), but the value was null.  ");
      DatabaseObjectType.createNewDatabaseObjectType("), but the value was null.  ");
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.SYNONYM;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DatabaseObjectType.createNewDatabaseObjectType("DBUtil.error.unknowntype");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, "");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "", "G<}GQ9JL_");
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        DBUtil.getColumnCount((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDF;
      DatabaseObjectType.createNewDatabaseObjectType(")/q1-4mr ");
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.BEST_ROW_ID;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.UDT;
      DBUtil.typesAreEquivalent((-7), (-4));
      SQLAlias sQLAlias0 = new SQLAlias();
      assertFalse(sQLAlias0.isAutoLogon());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getFAQFile();
      applicationFileWrappersImpl0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      DBUtil.typesAreEquivalent(16, (-4436));
      System.setCurrentTimeMillis(1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      // Undeclared exception!
      try { 
        DBUtil.tableHasPrimaryKey((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      JTextPane jTextPane0 = new JTextPane();
      jTextPane0.update((Graphics) null);
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getDTPropertiesFile();
      applicationFileWrappersImpl0.getQuickStartGuideFile();
      applicationFileWrappersImpl0.getSquirrelHomeDir();
      applicationFileWrappersImpl0.getChangeLogFile();
      boolean boolean0 = DBUtil.typesAreEquivalent((-7), 59);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = (-2149);
      String string0 = "z{O9yV8uTNaOs)S+";
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList((List<IDatabaseObjectInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      dBCopyPlugin0.getApplication();
      dBCopyPlugin0.getSourceSession();
      Integer integer0 = new Integer((-59));
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.INDEX_TYPE_DBO;
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) null);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JTextPane jTextPane0 = new JTextPane();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getChangeLogFile();
      applicationFileWrappersImpl0.getDTPropertiesFile();
      applicationFileWrappersImpl0.getQuickStartGuideFile();
      applicationFileWrappersImpl0.getSquirrelHomeDir();
      applicationFileWrappersImpl0.getChangeLogFile();
      boolean boolean0 = DBUtil.typesAreEquivalent(3, (-3741));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getChangeLogFile();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DBUtil.typesAreEquivalent(3, 3);
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      assertFalse(applicationFileWrappersImpl1.equals((Object)applicationFileWrappersImpl0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener1, (ComponentListener) null);
      AWTEventMulticaster.remove(componentListener1, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener1, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, componentListener1);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) null);
      AWTEventMulticaster.add(componentListener1, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) null, componentListener1);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, componentListener1);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster5, (ComponentListener) aWTEventMulticaster6);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster.add(componentListener1, (ComponentListener) aWTEventMulticaster7);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseWheelListener) aWTEventMulticaster0, (MouseWheelListener) null);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.remove((MouseWheelListener) aWTEventMulticaster2, (MouseWheelListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster4, (ComponentListener) aWTEventMulticaster8);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster5, (ComponentListener) aWTEventMulticaster11);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster10, (ComponentListener) aWTEventMulticaster9);
      // Undeclared exception!
      try { 
        DBUtil.getColumnName((ISQLConnection) null, (ITableInfo) null, 2291);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      ComponentListener componentListener2 = AWTEventMulticaster.add(componentListener1, (ComponentListener) null);
      AWTEventMulticaster.remove(componentListener1, componentListener2);
      ComponentListener componentListener3 = AWTEventMulticaster.add((ComponentListener) null, componentListener2);
      ComponentListener componentListener4 = AWTEventMulticaster.add(componentListener1, componentListener3);
      ComponentListener componentListener5 = AWTEventMulticaster.remove(componentListener4, componentListener1);
      AWTEventMulticaster.remove(componentListener4, componentListener4);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove(componentListener1, componentListener5);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove(componentListener4, componentListener4);
      AWTEventMulticaster.add((ComponentListener) null, componentListener2);
      ComponentListener componentListener6 = AWTEventMulticaster.add(componentListener3, (ComponentListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.removeComponentListener(componentListener3);
      ComponentListener componentListener7 = AWTEventMulticaster.remove(componentListener4, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener5);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener4, componentListener6);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.remove((ItemListener) aWTEventMulticaster0, (ItemListener) null);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster1, componentListener5);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, (ComponentListener) null);
      Rectangle rectangle0 = new Rectangle((-598), 4);
      PaintEvent paintEvent0 = new PaintEvent(defaultTreeCellRenderer0, 0, rectangle0);
      componentListener3.componentShown(paintEvent0);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster3, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster4, (ComponentListener) null);
      AWTEventMulticaster.remove(componentListener1, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster4, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, componentListener7);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getForeignKeySQL(dBCopyPlugin1, (ITableInfo) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, (String) null);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/102_squirrel-sql");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, (String) null);
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getQuickStartGuideFile();
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      FileWrapperFactoryImpl fileWrapperFactoryImpl2 = new FileWrapperFactoryImpl();
      applicationFileWrappersImpl2.setFileWrapperFactory(fileWrapperFactoryImpl2);
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl3.getDatabaseAliasesFile_before_version_2_3();
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl5 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl4.getLicenceFile();
      applicationFileWrappersImpl2.getLicenceFile();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl1);
      IApplication iApplication0 = dBCopyPlugin0.getApplication();
      assertNull(iApplication0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      JTextPane jTextPane0 = new JTextPane();
      jTextPane0.update((Graphics) null);
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI2 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getAccessibleChild(jTextPane0, Integer.MIN_VALUE);
      BasicCheckBoxUI basicCheckBoxUI3 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI4 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI5 = new BasicCheckBoxUI();
      basicCheckBoxUI4.getPropertyPrefix();
      basicCheckBoxUI2.getDefaultIcon();
      BasicCheckBoxUI basicCheckBoxUI6 = new BasicCheckBoxUI();
      basicCheckBoxUI6.getDefaultIcon();
      DatabaseObjectType.createNewDatabaseObjectType("CheckBox.", (Icon) null);
      BasicCheckBoxUI basicCheckBoxUI7 = new BasicCheckBoxUI();
      // Undeclared exception!
      try { 
        DBUtil.getPKColumnString((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JTextPane jTextPane0 = new JTextPane();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginAppSettingsFolder();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getPasteToTableInfo((ISQLConnection) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "d54p;}x}vo;");
      dBCopyPlugin1.getSourceSession();
      dBCopyPlugin0.setDestSession((ISession) null);
      dBCopyPlugin1.getDestSession();
      dBCopyPlugin1.setDestSession((ISession) null);
      dBCopyPlugin0.getDestSession();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      dBCopyPlugin2.getSourceSession();
      dBCopyPlugin0.setSourceSession((ISession) null);
      dBCopyPlugin0.getApplication();
      dBCopyPlugin1.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, 3851);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      fileWrapperFactoryImpl0.create("\n", "\n");
      applicationFileWrappersImpl0.getFwJarFile();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("\n");
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      applicationFileWrappersImpl0.getFwJarFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getDatabaseAliasesTreeStructureFile();
      FileWrapperFactoryImpl fileWrapperFactoryImpl2 = new FileWrapperFactoryImpl();
      dBCopyPlugin0.unload();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nYVpL6ZL{#");
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getQuickStartGuideFile();
      applicationFileWrappersImpl0.getQuickStartGuideFile();
      FileWrapperFactoryImpl fileWrapperFactoryImpl3 = new FileWrapperFactoryImpl();
      applicationFileWrappersImpl2.setFileWrapperFactory(fileWrapperFactoryImpl3);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[0];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "Y+L)LO1\\'`|s[";
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate((ISQLConnection) null, "Y+L)LO1'`|s[", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(2, 4);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/102_squirrel-sql");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("org.hibernate.lob.ReaderInputStream", "org.hibernate.lob.ReaderInputStream", "org.hibernate.lob.ReaderInputStream", (String) null, (-4), "W(NeRcXR6", 1055, (-2520), 1055, 1073741823, (String) null, "W(NeRcXR6", 304, 1073741823, "char(1)");
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(tableColumnInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getQuickStartGuideFile();
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getLibraryDirectory();
      applicationFileWrappersImpl2.getEditWhereColsFile();
      applicationFileWrappersImpl2.getLicenceFile();
      applicationFileWrappersImpl2.setFileWrapperFactory(fileWrapperFactoryImpl0);
      applicationFileWrappersImpl2.getDatabaseAliasesFile_before_version_2_3();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl3.getDTPropertiesFile();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl3);
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl5 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl4.getLicenceFile();
      applicationFileWrappersImpl1.getLicenceFile();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl0);
      dBCopyPlugin0.getApplication();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "8#z{9yV8uT'NaOskS+", "8#z{9yV8uT'NaOskS+");
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo(". Using '>ax'", ". Using '>ax'", ". Using '>ax'");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      ImageIcon imageIcon0 = new ImageIcon(". Using '>ax'");
      DatabaseObjectType.createNewDatabaseObjectType(". Using '>ax'", (Icon) imageIcon0);
      DatabaseObjectType.createNewDatabaseObjectType(". Using '>ax'");
      DatabaseObjectType.createNewDatabaseObjectType(". Using '>ax'", (Icon) imageIcon0);
      DatabaseObjectType.createNewDatabaseObjectType("=s;n Il02h0;}", (Icon) imageIcon0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.INDEX_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType((String) null);
      DatabaseObjectType.createNewDatabaseObjectType("rcplaceO,herDataTyph: unexpected exception - ");
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.INDEX_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("), but the value was null.  ");
      DatabaseObjectType.createNewDatabaseObjectType(". Using '>ax'");
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.SYNONYM;
      byte[] byteArray0 = new byte[1];
      DatabaseObjectType.createNewDatabaseObjectType(".");
      byteArray0[0] = (byte) (-86);
      ImageIcon imageIcon1 = new ImageIcon(byteArray0, " sc;hema=");
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.SEQUENCE;
      DatabaseObjectType databaseObjectType7 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      DatabaseObjectType databaseObjectType8 = DatabaseObjectType.BEST_ROW_ID;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getSelectQuery(dBCopyPlugin0, ".", (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "=dAxv*kvY}eoqD");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getSourceSession();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dBCopyPlugin0.getPluginJarFilePath();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.VIEW;
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      dBCopyPlugin1.getDestSession();
      String string0 = DBUtil.fixCase((ISession) null, "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo(". Using '>ax'", ". Using '>ax'", ". Using '>ax'");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      ImageIcon imageIcon0 = new ImageIcon(". Using '>ax'");
      DatabaseObjectType.createNewDatabaseObjectType(". Using '>ax'", (Icon) imageIcon0);
      DatabaseObjectType.createNewDatabaseObjectType(". Using '>ax'");
      DatabaseObjectType.createNewDatabaseObjectType("=s;n Il02h0;}", (Icon) imageIcon0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.INDEX_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType((String) null);
      DatabaseObjectType.createNewDatabaseObjectType("rcplaceO,herDataTyph: unexpected exception - ");
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.INDEX_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("), but the value was null.  ");
      DatabaseObjectType.createNewDatabaseObjectType(". Using '>ax'");
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.SYNONYM;
      byte[] byteArray0 = new byte[1];
      DatabaseObjectType.createNewDatabaseObjectType("");
      byteArray0[0] = (byte) (-86);
      ImageIcon imageIcon1 = new ImageIcon(byteArray0, " sc;hema=");
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.SEQUENCE;
      DatabaseObjectType databaseObjectType7 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      DatabaseObjectType databaseObjectType8 = DatabaseObjectType.BEST_ROW_ID;
      DatabaseObjectType databaseObjectType9 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType databaseObjectType10 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType5);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      String string0 = DBUtil.fixCase((ISession) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.fixCase((ISession) null, "8pz{O9yV8uTNaOskS+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "Unknown", "Yq:PhBgy*</>Lt");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-55);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Encountered unexpected exception while attempting to determine if catalogs are used in table definitions", "MNJwVHIG)a;", "START WITH $startWith$ ,", "DBUtil.info.bindblobfile", 2004, "vQ~i neEn<:[VD", 668, 2011, 49, (-233), "START WITH $startWith$ ,", "", (-4682), (-7), "");
      DBUtil.isBinaryType(tableColumnInfo0);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin3 = new DBCopyPlugin();
      assertFalse(dBCopyPlugin3.equals((Object)dBCopyPlugin0));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("dl=}PH", "dl=}PH", "b$qV##+A~XeJ~&!\r", "U-CX~4mm", (-3), "b$qV##+A~XeJ~&!\r", 32, 53, 53, (-3), "dl=}PH", "C", (-5), (-414), "dl=}PH");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDF_TYPE_DBO;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getClosedIcon();
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      defaultTreeCellRenderer0.removeHierarchyListener((HierarchyListener) null);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove((AdjustmentListener) aWTEventMulticaster0, (AdjustmentListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((FocusListener) aWTEventMulticaster0, (FocusListener) aWTEventMulticaster0);
      defaultTreeCellRenderer0.addFocusListener((FocusListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster0);
      Class<StyledEditorKit.AlignmentAction> class0 = StyledEditorKit.AlignmentAction.class;
      AWTEventMulticaster.getListeners((EventListener) null, class0);
      defaultTreeCellRenderer0.removeComponentListener(aWTEventMulticaster1);
      DBUtil.isBinaryType(tableColumnInfo0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("coSV?YuCjj@[h", "coSV?YuCjj@[h", "coSV?YuCjj@[h");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.CATALOG;
      DatabaseObjectType.createNewDatabaseObjectType(". Using 'length'");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.CATALOG;
      byte[] byteArray0 = new byte[8];
      DatabaseObjectType.createNewDatabaseObjectType("coSV?YuCjj@[h");
      byteArray0[0] = (byte) (-12);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-12);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.CATALOG;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.CATALOG;
      DatabaseObjectType.createNewDatabaseObjectType("char(1)");
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.SCHEMA;
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.SYNONYM;
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLAlias sQLAlias0 = new SQLAlias();
      sQLAlias0.getDriverPropertiesClone();
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[5];
      iDatabaseObjectInfoArray0[0] = (IDatabaseObjectInfo) databaseObjectInfo0;
      iDatabaseObjectInfoArray0[1] = (IDatabaseObjectInfo) databaseObjectInfo0;
      iDatabaseObjectInfoArray0[2] = (IDatabaseObjectInfo) databaseObjectInfo0;
      iDatabaseObjectInfoArray0[3] = (IDatabaseObjectInfo) databaseObjectInfo0;
      iDatabaseObjectInfoArray0[4] = (IDatabaseObjectInfo) databaseObjectInfo0;
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("coSV?YuCjj@[h", "coSV?YuCjj@[h", "coSV?YuCjj@[h");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.CATALOG;
      DatabaseObjectType.createNewDatabaseObjectType(". Using 'lengsh'");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType.createNewDatabaseObjectType("\"_]OqkBO]skwr.z", (Icon) null);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.CATALOG;
      byte[] byteArray0 = new byte[8];
      DatabaseObjectType.createNewDatabaseObjectType("/=DupWW.Md=_&");
      DatabaseObjectType.createNewDatabaseObjectType("coSV?YuCjj@[h");
      byteArray0[0] = (byte) (-12);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-12);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.CATALOG;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.CATALOG;
      DatabaseObjectType.createNewDatabaseObjectType("char(1)");
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.SCHEMA;
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.SYNONYM;
      DatabaseObjectType.createNewDatabaseObjectType(". Using 'lengsh'");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType6);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList((IDatabaseObjectInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("coSV?YuCjj@[h", "coSV?YuCjj@[h", "coSV?YuCjj@[h");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.CATALOG;
      DatabaseObjectType.createNewDatabaseObjectType(". Using 'length'");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.CATALOG;
      byte[] byteArray0 = new byte[8];
      DatabaseObjectType.createNewDatabaseObjectType("coSV?YuCjj@[h");
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getOpenIcon();
      DatabaseObjectType.createNewDatabaseObjectType(". Using 'length'", icon0);
      byteArray0[3] = (byte) (-22);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.CATALOG;
      DatabaseObjectType.createNewDatabaseObjectType("char(1)");
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.SCHEMA;
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.SYNONYM;
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLAlias sQLAlias0 = new SQLAlias();
      sQLAlias0.getDriverPropertiesClone();
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[5];
      iDatabaseObjectInfoArray0[0] = (IDatabaseObjectInfo) databaseObjectInfo0;
      iDatabaseObjectInfoArray0[1] = (IDatabaseObjectInfo) databaseObjectInfo0;
      iDatabaseObjectInfoArray0[2] = (IDatabaseObjectInfo) databaseObjectInfo0;
      iDatabaseObjectInfoArray0[3] = (IDatabaseObjectInfo) databaseObjectInfo0;
      iDatabaseObjectInfoArray0[4] = (IDatabaseObjectInfo) databaseObjectInfo0;
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("coSV?YuCjj@[h", "coSV?YuCjj@[h", "coSV?YuCjj@[h");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.CATALOG;
      DatabaseObjectType.createNewDatabaseObjectType(". Using 'lengsh'");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.CATALOG;
      byte[] byteArray0 = new byte[8];
      DatabaseObjectType.createNewDatabaseObjectType("coSV?YuCjj@[h");
      byteArray0[0] = (byte) (-12);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-12);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.CATALOG;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.CATALOG;
      DatabaseObjectType.createNewDatabaseObjectType("char(1)");
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.SCHEMA;
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.SYNONYM;
      DatabaseObjectType.createNewDatabaseObjectType(". Using 'lengsh'");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType6);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList((IDatabaseObjectInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JTextPane jTextPane0 = new JTextPane();
      jTextPane0.update((Graphics) null);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI2 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI3 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI4 = new BasicCheckBoxUI();
      basicCheckBoxUI3.getPropertyPrefix();
      basicCheckBoxUI1.getDefaultIcon();
      BasicCheckBoxUI basicCheckBoxUI5 = new BasicCheckBoxUI();
      basicCheckBoxUI5.getDefaultIcon();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "A CloneNotSupportedException was thrown: ", "A CloneNotSupportedException was thrown: ", "A CloneNotSupportedException was thrown: ", (-2147483641), "A CloneNotSupportedException was thrown: ", (-2147483641), (-2147483641), (-271), (-2147483641), (String) null, "CheckBox.", (-436), (-32), "CheckBox.");
      // Undeclared exception!
      try { 
        DBUtil.getColumnSql(dBCopyPlugin0, tableColumnInfo0, "A CloneNotSupportedException was thrown: ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(" ", " ", (String) null, " ", 3274, " ", Integer.MIN_VALUE, 3274, 3274, 2278, (String) null, "", 49, 249, "k");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.PRIMARY_KEY;
      dBCopyPlugin0.setDestDatabaseObject(tableColumnInfo0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceDistinctDataType(0, tableColumnInfo0, (ISession) null);
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[0];
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      // Undeclared exception!
      try { 
        DBUtil.convertTableToObjectList((List<ITableInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[2];
      // Undeclared exception!
      try { 
        DBUtil.getColumnList(tableColumnInfoArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo(". Usxng 'max'", ". Usxng 'max'", ". Usxng 'max'");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDF;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.INDEX_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("rcplaceOtherDataType: unexpected exception - ");
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("), but the value was null.  ");
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.SYNONYM;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DatabaseObjectType.createNewDatabaseObjectType("DBUtil.error.unknowntype");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, "");
      DatabaseObjectType databaseObjectType7 = DatabaseObjectType.SEQUENCE;
      DatabaseObjectType databaseObjectType8 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("$l", ". Usxng 'max'", ". Usxng 'max'", (String) null, (-1128), "), but the value was null.  ", (-1128), (-1128), (-1128), (byte) (-86), (String) null, ". Usxng 'max'", (-1128), (-1128), ". Usxng 'max'");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      // Undeclared exception!
      try { 
        DBUtil.getMaxColumnLengthSQL((ISession) null, tableColumnInfo0, "N*[TUyMk}", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultIcon();
      DatabaseObjectType.createNewDatabaseObjectType((String) null, (Icon) null);
      DatabaseObjectType.createNewDatabaseObjectType("5jQ,'&orxS,55pb0(,n");
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI2 = new BasicCheckBoxUI();
      JTextPane jTextPane0 = new JTextPane();
      BasicCheckBoxUI basicCheckBoxUI3 = new BasicCheckBoxUI();
      basicCheckBoxUI2.getPropertyPrefix();
      BasicCheckBoxUI basicCheckBoxUI4 = new BasicCheckBoxUI();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(")/q1-4mr ", (String) null, "5jQ,'&orxS,55pb0(,n", "Successfully closed session: ", (-1044), (String) null, 2144, 2820, (-1044), (-723), ",,lz}U'1(", "$_3", 2354, (-723), "5jQ,'&orxS,55pb0(,n");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.replaceOtherDataType((TableColumnInfo) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl0.getChangeLogFile();
      fileWrapper0.createNewFile();
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      basicComboBoxEditor0.getEditorComponent();
      AWTEventMulticaster.add((FocusListener) basicComboBoxEditor0, (FocusListener) basicComboBoxEditor0);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add(componentListener1, (ComponentListener) null);
      Class<StyledEditorKit.AlignmentAction> class0 = StyledEditorKit.AlignmentAction.class;
      AWTEventMulticaster.getListeners((EventListener) null, class0);
      // Undeclared exception!
      try { 
        DBUtil.isBinaryType((TableColumnInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      JTextPane jTextPane0 = new JTextPane();
      jTextPane0.update((Graphics) null);
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI2 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getAccessibleChild(jTextPane0, Integer.MIN_VALUE);
      BasicCheckBoxUI basicCheckBoxUI3 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI4 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI5 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI6 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPropertyPrefix();
      basicCheckBoxUI6.getAccessibleChild(jTextPane0, Integer.MIN_VALUE);
      basicCheckBoxUI5.contains(jTextPane0, (-6), 1683);
      boolean boolean0 = DBUtil.typesAreEquivalent(16, 16);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo(". Using 'max'", ". Using 'max'", ". Using 'max'");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDF;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.INDEX_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType((String) null);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.createNewDatabaseObjectType("rcplaceOtherDataType: unexpected exception - ");
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("), but the value was null.  ");
      DatabaseObjectType.createNewDatabaseObjectType(". Using 'max'");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DatabaseObjectType.createNewDatabaseObjectType("DBUtil.error.unknowntype");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, " schema=");
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.SEQUENCE;
      DatabaseObjectType databaseObjectType7 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("CREATE OR REPLACE TRIGGER $triggerName$ \nBEFORE INSERT ON $tableName$ \nFOR EACH ROW \nDECLARE \n    nextid number(8) := 0; \nBEGIN \n    SELECT $sequenceName$.nextval into nextid from dual; \n    :new.$columnName$ := nextid; \nEND; ", "6RO@Tdo'S{5Q_:s\"", ". Using 'max'", (String) null, (-1128), "), but the value was null.  ", (-1128), (-1128), (-1128), (byte) (-86), (String) null, ". Using 'max'", (-1128), (-1128), "6RO@Tdo'S{5Q_:s\"");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType4);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals((-1128), int0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DBUtil dBUtil0 = new DBUtil();
      assertNull(dBUtil0.getLastStatement());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo(". Usxng 'max'", ". Usxng 'max'", ". Usxng 'max'");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDF;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.INDEX_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType(". Usxng 'max'");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("rcplaceOtherDataType: unexpected exception - ");
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("), but the value was null.  ");
      DatabaseObjectType.createNewDatabaseObjectType("), but the value was null.  ");
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.SYNONYM;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DatabaseObjectType.createNewDatabaseObjectType("DBUtil.error.unknowntype");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, "");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("rcplaceOtherDataType: unexpected exception - ", "DBUtil.error.unknowntype", "DO>-M.yHQ", "DO>-M.yHQ", 2261, "), but the value was null.  ", (byte) (-86), (byte) (-86), 2261, 2004, "", "", 2002, (byte) (-86), "rcplaceOtherDataType: unexpected exception - ");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType6);
      dBCopyPlugin1.getDestSession();
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(2261, int0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      defaultTreeCellRenderer0.addFocusListener(metalComboBoxEditor0);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      Class<StyledEditorKit.AlignmentAction> class0 = StyledEditorKit.AlignmentAction.class;
      AWTEventMulticaster.getListeners((EventListener) null, class0);
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      defaultTreeCellRenderer1.removeComponentListener((ComponentListener) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("4", "*", (String) null, (String) null, (-572), "4", (-572), (-572), (-572), (-1979), "'5*", "'5*", (-1211), (-1685), "'5*");
      DBUtil.isBinaryType(tableColumnInfo0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo(". Using '>ax'", ". Using '>ax'", ". Using '>ax'");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      ImageIcon imageIcon0 = new ImageIcon(". Using '>ax'");
      DatabaseObjectType.createNewDatabaseObjectType(". Using '>ax'", (Icon) imageIcon0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.INDEX_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType((String) null);
      DatabaseObjectType.createNewDatabaseObjectType("rcplaceO,herDataTyph: unexpected exception - ");
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("), but the value was null.  ");
      DatabaseObjectType.createNewDatabaseObjectType(". Using '>ax'");
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.SYNONYM;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      ImageIcon imageIcon1 = new ImageIcon(byteArray0, " sc;hema=");
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.SEQUENCE;
      DatabaseObjectType databaseObjectType7 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      DatabaseObjectType databaseObjectType8 = DatabaseObjectType.BEST_ROW_ID;
      DatabaseObjectType databaseObjectType9 = DatabaseObjectType.INDEX_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType5);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(databaseObjectInfo0, (SchemaInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo(". Using '>ax'", ". Using '>ax'", ". Using '>ax'");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      ImageIcon imageIcon0 = new ImageIcon(". Using '>ax'");
      DatabaseObjectType.createNewDatabaseObjectType(". Using '>ax'", (Icon) imageIcon0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("R");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.INDEX_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType((String) null);
      DatabaseObjectType.createNewDatabaseObjectType("rcplaceO,herDataTyph: unexpected exception - ");
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("), but the value was null.  ");
      DatabaseObjectType.createNewDatabaseObjectType(". Using '>ax'");
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.SYNONYM;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      ImageIcon imageIcon1 = new ImageIcon(byteArray0, " sc;hema=");
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.SEQUENCE;
      DatabaseObjectType databaseObjectType7 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      DatabaseObjectType databaseObjectType8 = DatabaseObjectType.BEST_ROW_ID;
      DatabaseObjectType databaseObjectType9 = DatabaseObjectType.INDEX_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType5);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(databaseObjectInfo0, (SchemaInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("(", "+H_*b>~_6)", (String) null);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.CATALOG;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDT_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("C@~4~DFtU .r5dV?");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)48;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.DATABASE_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("+H_*b>~_6)");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      JTextPane jTextPane0 = new JTextPane();
      jTextPane0.update((Graphics) null);
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI2 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getAccessibleChild(jTextPane0, Integer.MIN_VALUE);
      BasicCheckBoxUI basicCheckBoxUI3 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI4 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI5 = new BasicCheckBoxUI();
      basicCheckBoxUI4.getPropertyPrefix();
      basicCheckBoxUI2.getDefaultIcon();
      BasicCheckBoxUI basicCheckBoxUI6 = new BasicCheckBoxUI();
      basicCheckBoxUI6.getDefaultIcon();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.tableHasForeignKey("A CloneNotSupportedException was thrown: ", "A CloneNotSupportedException was thrown: ", "CheckBox.", foreignKeyInfo0, dBCopyPlugin1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Box box0 = Box.createVerticalBox();
      box0.getX();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      defaultListCellRenderer0.getAncestorListeners();
      defaultListCellRenderer0.transferFocusUpCycle();
      defaultListCellRenderer0.createVolatileImage(1111, 3163);
      box0.getInputVerifier();
      defaultListCellRenderer_UIResource0.setInputVerifier((InputVerifier) null);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource1 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource1.isRequestFocusEnabled();
      defaultListCellRenderer_UIResource1.getPopupLocation((MouseEvent) null);
      defaultListCellRenderer_UIResource1.getDisabledIcon();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "j|1%GVn0\"1s&r288", "j|1%GVn0\"1s&r288");
      int[] intArray0 = Quarter.FIRST_MONTH_IN_QUARTER;
      // Undeclared exception!
      try { 
        DBUtil.getColumnNames((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[2];
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("p2(", "NW@AD]`JO,", "]|4_PJ-M} y", "H^.zM3V8", 380, "ALTER TABLE $tableName$ ALTER $columnName$ DROP DEFAULT", 380, 7, 380, 380, "NW@AD]`JO,", "NW@AD]`JO,", 1337, 7, "ALTER TABLE $tableName$ ALTER $columnName$ DROP DEFAULT");
      tableColumnInfoArray0[0] = tableColumnInfo0;
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("7", "ALTER TABLE $tableName$ ALTER $columnName$ DROP DEFAULT", "]|4_PJ-M} y", (String) null, 1337, "@^lIA{!2(", 328, 182, 992, 1201, "4\"", "p2(", (-2), (-2), "net.sourceforge.squirrel_sql.client.Application");
      tableColumnInfoArray0[1] = tableColumnInfo1;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("H^.zM3V8, null", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("$UxYl7@", "$UxYl7@", "$UxYl7@");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("yw", "yw", "C", "$UxYl7@", 2291, "char(1)", 1358, (-5), 53, 44, "$UxYl7@", "dl=}PH", Integer.MIN_VALUE, (-1499), "|<5TvyiX*]4_A!");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDF_TYPE_DBO;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getClosedIcon();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((AdjustmentListener) null, (AdjustmentListener) null);
      AWTEventMulticaster.remove((AdjustmentListener) null, (AdjustmentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      AWTEventMulticaster.remove((FocusListener) basicComboBoxEditor_UIResource0, (FocusListener) basicComboBoxEditor_UIResource0);
      defaultTreeCellRenderer0.addFocusListener(basicComboBoxEditor_UIResource0);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      Class<StyledEditorKit.AlignmentAction> class0 = StyledEditorKit.AlignmentAction.class;
      AWTEventMulticaster.getListeners((EventListener) null, class0);
      defaultTreeCellRenderer0.removeComponentListener((ComponentListener) null);
      DBUtil.isBinaryType(tableColumnInfo0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNull(dBCopyPlugin0.getPasteToTableName());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("+y@7", "+y@7", "", "+y@7", 1111, " 0*vJLULu", 929, 2000, (-4), (-8), "orq.jfree.dMta.time.Month", "length", (-4), 2, "QodC~ ?5VP5R@O^:+@");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.removeComponentListener((ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("*'gG%k0s1 ", "gGz~Q9", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "gGz~Q9", 4, "QPu=ru+V1", 929, Integer.MIN_VALUE, Integer.MIN_VALUE, (-236), "9;9(eS8Z", "(%<f `vLz0$*7$m<5", Integer.MIN_VALUE, (-236), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Stack<ITableInfo> stack0 = new Stack<ITableInfo>();
      DBUtil.convertTableToObjectList(stack0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).getCatalog();
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString() , anyInt() , anyInt() , anyInt());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      ConnectionWrapper connectionWrapper1 = new ConnectionWrapper(connectionWrapper0);
      connectionWrapper0.getCatalog();
      ConnectionWrapper connectionWrapper2 = new ConnectionWrapper(connectionWrapper0);
      // Undeclared exception!
      try { 
        connectionWrapper2.prepareCall("Encountered unexpected exception while attempting to determine if catalogs are used in able definitions", 897, 2003, (-119));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getQuickStartGuideFile();
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getLibraryDirectory();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "{k<U-.==}Ie,%7,@", (-1762), "ervxY", 317, (-2463), (-1762), 317, "{k<U-.==}Ie,%7,@", "#Z\"~aU23'zFVoX", 317, 3, "#Z\"~aU23'zFVoX");
      dBCopyPlugin0.getSourceSession();
      DBUtil.replaceDistinctDataType((-2463), tableColumnInfo0, (ISession) null);
      applicationFileWrappersImpl2.getQuickStartGuideFile();
      FileWrapperFactoryImpl fileWrapperFactoryImpl2 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getDatabaseDriversFile();
      applicationFileWrappersImpl2.getWelcomeFile();
      ArrayList<IDatabaseObjectInfo> arrayList0 = new ArrayList<IDatabaseObjectInfo>();
      dBCopyPlugin0.setSourceDatabaseObjects(arrayList0);
      fileWrapperFactoryImpl2.create(". Skipping FK constraint", "z_XP6p7}G`:lkl8c%");
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl4.setFileWrapperFactory(fileWrapperFactoryImpl0);
      applicationFileWrappersImpl4.getDatabaseAliasesFile_before_version_2_3();
      ApplicationFileWrappersImpl applicationFileWrappersImpl5 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl4.getJDBCDebugLogFile();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      applicationFileWrappersImpl5.getLicenceFile();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl4);
      IApplication iApplication0 = dBCopyPlugin0.getApplication();
      assertNull(iApplication0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "})h-n~G^s~~f@";
      DBUtil.setLastStatement("})h-n~G^s~~f@");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ArrayList<IDatabaseObjectInfo> arrayList0 = new ArrayList<IDatabaseObjectInfo>();
      DBUtil.convertObjectToTableList(arrayList0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      String string1 = "K`@6hpBBHcmgb~]@";
      // Undeclared exception!
      try { 
        DBUtil.deleteDataInExistingTable((ISession) null, "K`@6hpBBHcmgb~]@", "})h-n~G^s~~f@", "})h-n~G^s~~f@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DatabaseObjectType.createNewDatabaseObjectType("b$qV##+A~XeJ~&!\r");
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      JTextPane jTextPane0 = new JTextPane();
      BasicCheckBoxUI basicCheckBoxUI2 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI3 = new BasicCheckBoxUI();
      jTextPane0.update((Graphics) null);
      BasicCheckBoxUI basicCheckBoxUI4 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI5 = new BasicCheckBoxUI();
      // Undeclared exception!
      try { 
        DBUtil.dropTable("b$qV##+A~XeJ~&!\r", "b$qV##+A~XeJ~&!\r", "_default", (ISession) null, true, (-2939));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = DBUtil.getLastStatementValues();
      assertNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.isKeyword((ISession) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      JTextPane jTextPane0 = new JTextPane();
      jTextPane0.update((Graphics) null);
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI2 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getAccessibleChild(jTextPane0, Integer.MIN_VALUE);
      BasicCheckBoxUI basicCheckBoxUI3 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI4 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI5 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI6 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getPropertyPrefix();
      basicCheckBoxUI6.getAccessibleChild(jTextPane0, Integer.MIN_VALUE);
      basicCheckBoxUI5.contains(jTextPane0, (-6), 1683);
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      DefaultListCellRenderer defaultListCellRenderer1 = new DefaultListCellRenderer();
      defaultListCellRenderer1.getDisabledIcon();
      BasicCheckBoxUI basicCheckBoxUI7 = new BasicCheckBoxUI();
      // Undeclared exception!
      try { 
        DBUtil.executeQuery((ISession) null, "CheckBox.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      JTextPane jTextPane0 = new JTextPane();
      jTextPane0.update((Graphics) null);
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI2 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getAccessibleChild(jTextPane0, 2147483606);
      BasicCheckBoxUI basicCheckBoxUI3 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI4 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI5 = new BasicCheckBoxUI();
      basicCheckBoxUI4.getPropertyPrefix();
      basicCheckBoxUI2.getDefaultIcon();
      BasicCheckBoxUI basicCheckBoxUI6 = new BasicCheckBoxUI();
      basicCheckBoxUI6.getDefaultIcon();
      Box.createVerticalBox();
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      // Undeclared exception!
      try { 
        DBUtil.sanityCheckPreferences((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setPasteMenuEnabled(false);
      dBCopyPlugin0.setPasteMenuEnabled(false);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.unload();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      dBCopyPlugin2.getDestSession();
      dBCopyPlugin2.getPluginAppSettingsFolder();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "/home/ubuntu/termite/projects/102_squirrel-sql/plugins/dbcopy.jar", "DBUtil.error.unknowntype", (String) null, (-3397), "5K: v{", 7, (-935), (-935), 834, (String) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 32, 7, "DBUtil.error.unknowntype");
      DBCopyPlugin dBCopyPlugin3 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin4 = new DBCopyPlugin();
      dBCopyPlugin4.getDestSession();
      int int0 = new Integer(834);
      int int1 = DBUtil.replaceDistinctDataType(3163, tableColumnInfo0, (ISession) null);
      assertEquals(3163, int1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = (-2149);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.getSourceSession();
      String string0 = "{)sV%ae} 3fSM:";
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, (String) null, "{)sV%ae} 3fSM:", "(", 1503);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, "3o_pt", "ktRGprax-", (String) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "";
      DBUtil.setLastStatementValues("");
      CallableStatementWrapper callableStatementWrapper0 = null;
      try {
        callableStatementWrapper0 = new CallableStatementWrapper((CallableStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLAlias sQLAlias0 = new SQLAlias();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      //  // Unstable assertion: assertEquals("-7e62fa77:16e7e5a8a4a:-7f89", uidIdentifier0.toString());
      
      uidIdentifier0.setString("<-su-5pl*p$\"vr7f&");
      SQLAlias sQLAlias1 = new SQLAlias(uidIdentifier0);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      boolean boolean0 = DBUtil.typesAreEquivalent((-2509), (-2509));
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(2, 0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultIcon();
      basicCheckBoxUI0.getPropertyPrefix();
      JColorChooser jColorChooser0 = new JColorChooser();
      Character character0 = new Character('9');
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(character0, 2574);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jColorChooser0, (-1405), 0L, (-1405), 2574, '9', (MenuElement[]) null, menuSelectionManager0);
      KeyEvent.getExtendedKeyCodeForChar((-1405));
      KeyStroke.getKeyStrokeForEvent(menuKeyEvent0);
      jColorChooser0.getConditionForKeyStroke(keyStroke0);
      basicCheckBoxUI0.contains(jColorChooser0, 824, 824);
      basicCheckBoxUI0.getDefaultIcon();
      DatabaseObjectType.createNewDatabaseObjectType("3", (Icon) null);
      boolean boolean0 = DBUtil.typesAreEquivalent(792, 2006);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Box.createVerticalBox();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      defaultTreeCellRenderer1.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      defaultTreeCellRenderer1.getRegisteredKeyStrokes();
      defaultTreeCellRenderer1.getTextSelectionColor();
      defaultTreeCellRenderer1.getTextSelectionColor();
      defaultTreeCellRenderer1.getClosedIcon();
      boolean boolean0 = DBUtil.typesAreEquivalent(40, 40);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Box.createVerticalBox();
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      DefaultListCellRenderer defaultListCellRenderer1 = new DefaultListCellRenderer();
      defaultListCellRenderer1.getAncestorListeners();
      defaultListCellRenderer1.getVetoableChangeListeners();
      Class<StyledEditorKit.AlignmentAction> class0 = StyledEditorKit.AlignmentAction.class;
      defaultTreeCellRenderer0.getListeners(class0);
      defaultListCellRenderer1.createVolatileImage(1111, 3163);
      defaultTreeCellRenderer0.grabFocus();
      defaultTreeCellRenderer0.contains(3163, 2005);
      Box.createVerticalBox();
      DefaultListCellRenderer defaultListCellRenderer2 = new DefaultListCellRenderer();
      // Undeclared exception!
      try { 
        DBUtil.sameDatabaseType((ISession) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JTextPane jTextPane0 = new JTextPane();
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI2 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI3 = new BasicCheckBoxUI();
      basicCheckBoxUI1.getPropertyPrefix();
      basicCheckBoxUI2.getPropertyPrefix();
      basicCheckBoxUI1.getAccessibleChild(jTextPane0, (-892));
      BasicCheckBoxUI basicCheckBoxUI4 = new BasicCheckBoxUI();
      basicCheckBoxUI2.getPropertyPrefix();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.add("'5*", (Component) jTextPane0);
      defaultTreeCellRenderer0.grabFocus();
      defaultTreeCellRenderer0.contains(2005, 1071);
      Box.createVerticalBox();
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      // Undeclared exception!
      try { 
        DBUtil.getTableInfo((ISession) null, "5Se>$dM6t4p^l/", "CheckBox.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("coSV?YuCTj@[h", "coSV?YuCTj@[h", "coSV?YuCTj@[h");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDF;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      databaseObjectType0.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType("F!B?G+", (Icon) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("I9", "jqO%", "jqO%", "Dtg=efv3y", 0, "coSV?YuCTj@[h", 1927, 2373, 1397, (-932), "{", ")) from ", 1116, 2001, "jqO%");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      dBCopyPlugin0.getDestSession();
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.removeComponentListener((ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("P3n_", "P3n_", "fixCase: unexpected exception: ", "P=7cG6WE)L}vjgcT", 5, "s|bzrU[/|X", 5, 5, (-2965), (-5), "fixCase: unexpected exception: ", "P=7cG6WE)L}vjgcT", (-4), 509, "Z1Bs");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.INDEX_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      dBCopyPlugin0.getDestSession();
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(5, int0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = (-2180);
      String string0 = " from dual";
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getTables((ISession) null, "tR?n$G8hZ7}eO", (String) null, " from dual");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DBUtil.setPreferences((DBCopyPreferenceBean) null);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString() , anyInt() , anyInt());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      // Undeclared exception!
      try { 
        connectionWrapper0.prepareCall("D }/a", 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("coSV?YuCTj@[h", "coSV?YuCTj@[h", "coSV?YuCTj@[h");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SCHEMA;
      DatabaseObjectType.createNewDatabaseObjectType("coSV?YuCTj@[h");
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SEQUENCE;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      String string0 = DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      assertEquals("coSV?YuCTj@[h", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("coSV?YuCTj@[h", "coSV?YuCTj@[h", "coSV?YuCTj@[h");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.CATALOG;
      DatabaseObjectType.createNewDatabaseObjectType("()jOM?E");
      DatabaseObjectType.createNewDatabaseObjectType("coSV?YuCTj@[h");
      DatabaseObjectType.createNewDatabaseObjectType("coSV?YuCTj@[h");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      String string0 = DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      assertEquals("coSV?YuCTj@[h", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener1, (ComponentListener) null);
      AWTEventMulticaster.remove(componentListener1, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener1, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, componentListener1);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener1, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster5, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) null, componentListener1);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster6, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, componentListener1);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster7, (ComponentListener) aWTEventMulticaster8);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster6);
      AWTEventMulticaster.add(componentListener1, (ComponentListener) aWTEventMulticaster9);
      AWTEventMulticaster.add((MouseWheelListener) aWTEventMulticaster0, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) aWTEventMulticaster2, (MouseWheelListener) aWTEventMulticaster1);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getInsertSQL(dBCopyPlugin0, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (ITableInfo) null, (-3414));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getRegisteredKeyStrokes();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      Color color0 = Color.GRAY;
      defaultTreeCellRenderer1.setBackgroundSelectionColor(color0);
      defaultTreeCellRenderer1.getTextSelectionColor();
      DefaultTreeCellRenderer defaultTreeCellRenderer2 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer1.getClosedIcon();
      defaultTreeCellRenderer2.getRegisteredKeyStrokes();
      DefaultTreeCellRenderer defaultTreeCellRenderer3 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer3.getTextSelectionColor();
      DefaultTreeCellRenderer defaultTreeCellRenderer4 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer4.getClosedIcon();
      // Undeclared exception!
      try { 
        DBUtil.checkKeyword((ISession) null, "org.jfree.data.UnknownKeyException", "?B3u|id>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }
}
