/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 14:07:41 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.885494900967881
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("QR.`LV@{dam!EjE");
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath(")C\"y]_q-LM(\u0004F");
      XPathLexer xPathLexer2 = new XPathLexer("iB9Lmk#rSt*{+K4");
      xPathLexer1.at();
      xPathLexer2.at();
      Token token0 = xPathLexer2.notEquals();
      assertEquals("B9", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.plus();
      xPathLexer2.or();
      xPathLexer1.relationalOperator();
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer2.at();
      assertEquals("L", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token3 = xPathLexer3.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(".", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.mod();
      Token token5 = xPathLexer4.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer1.doubleColon();
      assertEquals("]_", token6.getTokenText());
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer3.slashes();
      assertEquals(11, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer5.colon();
      assertEquals(18, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token9 = xPathLexer6.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer1.plus();
      assertEquals("q", token10.getTokenText());
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer1.dots();
      assertEquals("-", token11.getTokenText());
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer6.nextToken();
      assertEquals((-1), token12.getTokenType());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.4164619552622248
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "com.werken.saxpath.XPathLexer";
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.equals();
      Token token1 = xPathLexer0.nextToken();
      token0.toString();
      token1.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.plus();
      xPathLexer0.rightParen();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2724604512750197
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.comma();
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.comma();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("aG2-9%");
      xPathLexer0.rightParen();
      xPathLexer1.at();
      Token token2 = xPathLexer1.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("G2", token2.getTokenText());
      
      xPathLexer0.not();
      Token token3 = xPathLexer1.comma();
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer1.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("9", token4.getTokenText());
      
      xPathLexer0.plus();
      Token token5 = xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("ken.saxpath.XPathLexer", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.dollar();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("eP_%Q");
      xPathLexer4.identifier();
      XPathLexer xPathLexer5 = new XPathLexer("aG2-9%");
      xPathLexer3.setPreviousToken(token5);
      assertEquals("r", token5.getTokenText());
      
      Token token8 = xPathLexer1.notEquals();
      assertEquals(22, token8.getTokenType());
      
      xPathLexer4.dollar();
      Token token9 = xPathLexer3.identifierOrOperatorName();
      assertNotNull(token9);
      
      xPathLexer1.or();
      Token token10 = xPathLexer3.dots();
      assertEquals(13, token10.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("aG2-9%");
      Token token11 = xPathLexer6.slashes();
      assertEquals("a", token11.getTokenText());
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer5.not();
      assertEquals(23, token12.getTokenType());
      assertEquals("a", token12.getTokenText());
      
      Token token13 = xPathLexer3.equals();
      assertEquals(21, token13.getTokenType());
      
      Token token14 = xPathLexer4.colon();
      assertEquals("Q", token14.getTokenText());
      
      Token token15 = xPathLexer0.at();
      assertEquals(16, token15.getTokenType());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.746815336080225
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("co.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.minus();
      assertEquals("c", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.or();
      Token token1 = xPathLexer0.dots();
      assertEquals("o.", token1.getTokenText());
      assertEquals(14, token1.getTokenType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0707253908934753
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.at();
      Token token1 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.07831204173722
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w.(7I");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      xPathLexer0.and();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (15) (w.)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (15) (w.)");
      Token token2 = xPathLexer1.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("[", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("sIv4");
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      assertEquals(" ", token3.getTokenText());
      
      xPathLexer1.identifier();
      XPathLexer xPathLexer3 = new XPathLexer("yY(0zA{~=c/w#1");
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("7", token4.getTokenText());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer3.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals("y", token5.getTokenText());
      
      xPathLexer3.nextToken();
      Token token6 = xPathLexer1.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer3.minus();
      assertEquals("(", token7.getTokenText());
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer3.equals();
      assertEquals("0", token8.getTokenText());
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals(30, token9.getTokenType());
      assertEquals("5", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer2.colon();
      assertEquals("s", token10.getTokenText());
      assertEquals(18, token10.getTokenType());
      
      xPathLexer2.or();
      Token token11 = xPathLexer0.slashes();
      assertEquals(11, token11.getTokenType());
      assertEquals("I", token11.getTokenText());
      
      Token token12 = xPathLexer1.leftParen();
      assertEquals(")", token12.getTokenText());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.797900946855852
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w.(7I");
      Token token0 = xPathLexer0.equals();
      assertEquals("w", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (4) ()", string0);
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(".(", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (4) ()");
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer1.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("[", token3.getTokenText());
      
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.nextToken();
      Token token4 = xPathLexer1.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("4", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token5 = xPathLexer0.rightParen();
      assertEquals("7", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("w.(7I");
      Token token6 = xPathLexer6.leftParen();
      assertEquals("w", token6.getTokenText());
      assertEquals(1, token6.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token7 = xPathLexer1.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals(")", token7.getTokenText());
      
      Token token8 = xPathLexer1.notEquals();
      assertEquals(" (", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer1.dots();
      assertEquals(13, token9.getTokenType());
      assertEquals("", token9.getTokenText());
      
      Token token10 = xPathLexer6.star();
      assertEquals("", token10.getTokenText());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0630621369988202
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w.(7I");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (15) (w.)", string0);
      
      xPathLexer0.at();
      Token token1 = xPathLexer0.at();
      assertEquals("7", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("[ (15) (w.)");
      Token token3 = xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("[ (15) (w.)");
      Token token4 = xPathLexer1.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      xPathLexer2.nextToken();
      Token token5 = xPathLexer1.leftParen();
      assertEquals(" ", token5.getTokenText());
      
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer("[ (15) (w.)");
      XPathLexer xPathLexer4 = new XPathLexer("[ (15) (w.)");
      Token token7 = xPathLexer3.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals("[", token7.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer1.comma();
      assertEquals(32, token8.getTokenType());
      assertEquals("(", token8.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("kMVo");
      String string1 = token3.toString();
      assertEquals("[ (3) ([)", string1);
      
      XPathLexer xPathLexer7 = new XPathLexer("[ (15) (w.)");
      Token token9 = xPathLexer4.doubleColon();
      assertEquals(19, token9.getTokenType());
      assertEquals("[ ", token9.getTokenText());
      
      Token token10 = xPathLexer3.plus();
      assertEquals(" ", token10.getTokenText());
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer0.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer6.rightBracket();
      assertEquals("k", token12.getTokenText());
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer0.star();
      assertEquals(20, token13.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9548669314558516
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aG2-9%");
      Token token0 = xPathLexer0.at();
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.dollar();
      token1.toString();
      token1.toString();
      xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.notEquals();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer1.doubleColon();
      xPathLexer0.literal();
      xPathLexer0.leftBracket();
      xPathLexer1.pipe();
      xPathLexer1.star();
      xPathLexer1.comma();
      xPathLexer1.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer0.slashes();
      xPathLexer1.colon();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("wc%cj;Dc{l|.LfoD]0T");
      xPathLexer1.dollar();
      xPathLexer0.doubleColon();
      xPathLexer2.getPreviousToken();
      Token token2 = xPathLexer0.not();
      Token token3 = xPathLexer1.rightBracket();
      assertNotSame(token3, token2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.844743368076524
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7745269067327434
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.notEquals();
      xPathLexer0.number();
      xPathLexer0.relationalOperator();
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      xPathLexer0.getXPath();
      xPathLexer0.slashes();
      xPathLexer0.equals();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.or();
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer1.getXPath();
      xPathLexer0.equals();
      xPathLexer0.div();
      xPathLexer0.dollar();
      xPathLexer1.and();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8383987769443602
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.setXPath("QR.`LV@{dam!EjE");
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath(">=2A");
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.plus();
      xPathLexer0.at();
      Token token1 = xPathLexer0.at();
      assertEquals("R", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer3.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer2.relationalOperator();
      assertEquals(">=", token3.getTokenText());
      assertEquals(10, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer4 = new XPathLexer(">=2A");
      xPathLexer1.relationalOperator();
      Token token4 = xPathLexer3.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer2.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer4.star();
      assertEquals(">", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      xPathLexer0.comma();
      Token token8 = xPathLexer1.rightParen();
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer2.slashes();
      assertEquals("A", token10.getTokenText());
      assertEquals(11, token10.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token11 = xPathLexer3.leftParen();
      assertEquals(1, token11.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("lT4v@j-P-");
      Token token12 = xPathLexer5.colon();
      assertEquals(18, token12.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token13 = xPathLexer8.comma();
      assertEquals(32, token13.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer("QR.`LV@{dam!EjE");
      xPathLexer4.relationalOperator();
      Token token14 = xPathLexer3.dots();
      assertEquals(13, token14.getTokenType());
      
      Token token15 = xPathLexer2.rightBracket();
      assertEquals(4, token15.getTokenType());
      
      Token token16 = xPathLexer7.equals();
      assertEquals("l", token16.getTokenText());
      assertEquals(21, token16.getTokenType());
  }
}
