/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 00:41:07 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.NoSuchElementException;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u/,r-UbD0AY+_&8KWl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      int int0 = 63;
      streamTokenizer0.wordChars(63, 63);
      streamTokenizer0.wordChars((-1313), 41);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.equalT = 1087;
      jSTerm1.addElement(jSSubstitution0);
      jSTerm1.makeFunction();
      streamTokenizer0.ordinaryChar(63);
      streamTokenizer0.ordinaryChar(38);
      streamTokenizer0.ordinaryChars(3457, 63);
      streamTokenizer0.commentChar(57);
      stringReader0.ready();
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm2 = new JSTerm();
      int int1 = 94;
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.343960443549483
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fQI,&Z)[>n1{]m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars(44, (-490));
      streamTokenizer0.whitespaceChars(36, 36);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSTerm1;
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) jSTerm1;
      jSSubstitution0.toArray(objectArray0);
      jSTerm1.equals(jSTerm0);
      jSTerm0.makeEval(false);
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSSubstitution0.fail());
      assertTrue(jSTerm2.isConstant());
      
      jSTerm0.print();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm0.isEval());
      assertEquals("[nil]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm1, jSTerm3);
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isConstant());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.addElement(jSTerm0);
      jSSubstitution0.add((Object) jSTerm1);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSSubstitution0.add((Object) jSTerm1);
      jSTerm1.isEmpty();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.798652206252129
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "'3sq^9V/WdCVwtB)");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.firstElement();
      jSSubstitution1.add((Object) "'3sq^9V/WdCVwtB)");
      jSSubstitution0.add((Object) jSTerm1);
      Object[] objectArray0 = new Object[7];
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      objectArray0[0] = (Object) jSSubstitution1;
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[2] = (Object) "'3sq^9V/WdCVwtB)";
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) jSSubstitution0;
      objectArray0[6] = (Object) jSSubstitution0;
      jSSubstitution1.toArray(objectArray0);
      jSSubstitution0.add((Object) "'3sq^9V/WdCVwtB)");
      jSTerm0.isEmpty();
      jSTerm1.addAll(0, (Collection) jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9721037385162659
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "?i9@<{I/4wH0H");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.firstElement();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.removeAllElements();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.matches(jSTerm2, jSSubstitution2);
      JSJshopVars.exclamation = 0;
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution2.ensureCapacity(0);
      UnaryOperator.identity();
      jSSubstitution1.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution4 = (JSSubstitution)jSSubstitution0.clone();
      jSTerm0.elementAt(0);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator1);
      StringReader stringReader0 = new StringReader("| ");
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution3.sort(comparator0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.add((Object) jSSubstitution2);
      jSSubstitution6.retainAll(jSSubstitution4);
      stringReader0.close();
      // Undeclared exception!
      try { 
        stringReader0.read((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u/,r-UbD0AY+_&8KWl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.246854328665985
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yw (&:,wbh>,j");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.nval = (double) 32;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("Yw (&:,wbh>,j");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      jSTerm0.isConstant();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1548174235771813
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "?i9@<{I/4wH0H");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.firstElement();
      jSSubstitution1.add((Object) "?i9@<{I/4wH0H");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSSubstitution1;
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[2] = (Object) "?i9@<{I/4wH0H";
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) jSSubstitution0;
      objectArray0[6] = (Object) jSSubstitution0;
      jSSubstitution1.toArray(objectArray0);
      jSSubstitution1.add((Object) null);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSSubstitution1.add(objectArray0[0]);
      Object object0 = new Object();
      jSSubstitution0.add(objectArray0[2]);
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      jSSubstitution0.sort(comparator0);
      jSTerm0.print();
      System.setCurrentTimeMillis(1L);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm4.isFunction());
      
      boolean boolean0 = jSTerm1.equals(jSTerm3);
      assertTrue(boolean0);
      assertFalse(jSTerm3.isEval());
      assertNotSame(jSTerm1, jSTerm4);
      assertTrue(jSTerm1.isFunction());
      assertNotSame(jSTerm3, jSTerm1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3182008951665916
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yw (&:,wbh>,j");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("Yw (&:,wbh>,j");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.slashStarComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.makeFunction();
      streamTokenizer0.commentChar((-301));
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm0.equals(jSTerm3);
      JSTerm jSTerm4 = jSTerm3.cloneT();
      jSTerm3.standardizerTerm();
      jSTerm1.equals(jSTerm4);
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(jSTerm0.isConstant());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9133036567531658
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.clear();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.removeAllElements();
      jSTerm2.isFunction();
      jSTerm0.equals(jSTerm2);
      System.setCurrentTimeMillis(0);
      Predicate.isEqual((Object) jSSubstitution0);
      jSTerm2.clone();
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "?i9@<{I/4wH0H");
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.5297061990576545
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yw (&wb>j");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      JSJshopVars.minus = 32;
      jSTerm0.parallelStream();
      JSJshopVars.slash = 32;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.nextToken();
      jSTerm0.toStr();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.582995028497628
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.call();
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertTrue(boolean0);
      
      JSTerm jSTerm3 = jSTerm0.cloneT();
      StringReader stringReader1 = new StringReader("Line : ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm0, jSSubstitution0);
      jSTerm2.isConstant();
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      jSTerm0.matches(jSTerm4, jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.clone();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSTerm3.matches(jSTerm1, jSSubstitution3);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm3.applySubstitutionT(jSSubstitution2);
      boolean boolean1 = jSTerm4.isGround();
      assertFalse(boolean1 == boolean0);
      
      jSTerm4.cloneT();
      assertEquals("[?%%%0]", jSTerm4.toString());
      assertFalse(jSTerm4.isEval());
      
      boolean boolean2 = jSTerm3.isFunction();
      assertFalse(boolean2);
      
      JSTerm jSTerm6 = jSTerm5.applySubstitutionT(jSSubstitution4);
      assertNotSame(jSTerm3, jSTerm6);
      assertEquals(1, jSSubstitution4.size());
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.152687918271191
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "?i9@<{I/4wH0H");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      jSSubstitution1.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution4 = (JSSubstitution)jSSubstitution2.clone();
      jSTerm0.elementAt(0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator1);
      jSSubstitution4.add((Object) jSTerm0);
      Object object0 = new Object();
      jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      UnaryOperator.identity();
      jSTerm2.replaceAll(unaryOperator0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.toStr();
      StringReader stringReader0 = new StringReader("?%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm5.equals(jSTerm6);
      JSTerm jSTerm7 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.69240886298655
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "?9^<{I/J4wH]H");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.firstElement();
      StringReader stringReader0 = new StringReader("?9^<{I/J4wH]H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSSubstitution1.replaceAll(unaryOperator0);
      streamTokenizer0.nval = (double) 0;
      jSSubstitution3.clone();
      int int0 = (-3206);
      // Undeclared exception!
      try { 
        jSTerm0.elementAt((-3206));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%%%");
      stringReader0.read();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      stringReader0.mark(32);
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader1 = new StringReader("%qbrq+!r72");
      StringReader stringReader2 = new StringReader("%qbrq+!r72");
      stringReader0.read(charBuffer0);
      stringReader0.ready();
      StringReader stringReader3 = new StringReader("}G.[w]");
      stringReader2.read(charBuffer0);
      StringReader stringReader4 = new StringReader("-VmQuon)");
      System.setCurrentTimeMillis(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
      assertEquals("[%qbrq]", jSTerm0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm0);
      Object object0 = jSTerm0.clone();
      jSSubstitution0.add(object0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      stringReader0.mark(32);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (double) 'C';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) streamTokenizer0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) stringReader0;
      objectArray0[3] = (Object) stringReader0;
      objectArray0[4] = (Object) streamTokenizer0;
      objectArray0[5] = (Object) "?i9@<{I/4wH0H";
      objectArray0[6] = (Object) streamTokenizer0;
      objectArray0[7] = (Object) jSSubstitution0;
      jSSubstitution0.toArray(objectArray0);
      jSSubstitution0.add(objectArray0[0]);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSSubstitution0.add((Object) jSTerm1);
      jSTerm0.trimToSize();
      jSTerm1.isEmpty();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSTerm1.toString();
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.061757322800503
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "'3sq^9V/WdCVwtB)");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.firstElement();
      jSSubstitution1.add((Object) "'3sq^9V/WdCVwtB)");
      jSSubstitution0.add((Object) jSTerm1);
      Object[] objectArray0 = new Object[7];
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      objectArray0[0] = (Object) jSSubstitution1;
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) jSSubstitution0;
      objectArray0[6] = (Object) jSSubstitution0;
      jSSubstitution1.toArray(objectArray0);
      jSSubstitution0.add((Object) "'3sq^9V/WdCVwtB)");
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm2.applySubstitutionPF(jSSubstitution0);
      jSSubstitution1.add(objectArray0[0]);
      Object object0 = new Object();
      jSSubstitution0.add(objectArray0[2]);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any());
      jSSubstitution0.sort(comparator0);
      System.setCurrentTimeMillis((-819L));
      jSSubstitution0.iterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      jSTerm4.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm3.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3114313374732374
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.VarCounter = (-1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = '8';
      charArray0[2] = 'i';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.slice();
      StringReader stringReader0 = new StringReader("__wDJ3h)%r>N@DVbYo");
      stringReader0.read(charBuffer0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.parseList(streamTokenizer0);
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9721037385162659
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.semicolon = 1485;
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.022456924203762
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "?i9@<{I/4wH0H");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.firstElement();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm2, jSSubstitution2);
      assertFalse(jSSubstitution3.fail());
      
      JSJshopVars.exclamation = 0;
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution2.ensureCapacity(0);
      UnaryOperator.identity();
      jSSubstitution1.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution5 = (JSSubstitution)jSSubstitution0.clone();
      jSTerm0.elementAt(0);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator1);
      StringReader stringReader0 = new StringReader("| ");
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution4.sort(comparator0);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution7.retainAll(jSSubstitution5);
      System.setCurrentTimeMillis(745L);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution4);
      assertTrue(jSTerm1.isFunction());
      assertNotSame(jSTerm3, jSTerm1);
      assertTrue(jSTerm3.isFunction());
      
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      assertEquals("[?i9@<{I/4wH0H]", jSTerm4.toString());
      assertFalse(jSTerm2.isEval());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1681552360159664
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      stringReader0.mark(32);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[2];
      streamTokenizer0.nval = (double) 'C';
      CharBuffer.wrap(charArray0);
      streamTokenizer0.commentChar(1662);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertEquals("[?%%%0]", jSTerm3.toString());
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      boolean boolean1 = jSTerm1.isGround();
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm0, jSTerm2);
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTerm1.isEval());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "Yw (&:,wbh>,j";
      StringReader stringReader0 = new StringReader("Yw (&:,wbh>,j");
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0577223167610805
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "?i9@<{I/4wH0H");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.toString();
      jSSubstitution1.add((Object) "[?i9@<{I/4wH0H]");
      Object[] objectArray0 = new Object[7];
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      objectArray0[0] = (Object) jSSubstitution1;
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[2] = (Object) "[?i9@<{I/4wH0H]";
      objectArray0[3] = (Object) jSSubstitution0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator0);
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) jSSubstitution1;
      objectArray0[6] = (Object) jSSubstitution0;
      jSSubstitution1.toArray(objectArray0);
      jSSubstitution1.add((Object) null);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSSubstitution1.add(objectArray0[0]);
      Object object0 = new Object();
      jSSubstitution0.add(objectArray0[2]);
      jSSubstitution0.add(objectArray0[2]);
      jSTerm1.applySubstitutionT(jSSubstitution1);
      Object object1 = new Object();
      jSTerm2.cloneT();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.toStr();
      jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm3.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1321922400878854
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) null);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSSubstitution1.add((Object) jSSubstitution0);
      Object object0 = new Object();
      jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.913303656753166
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.clear();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.removeAllElements();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1390858946957136
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u/,r-UbD0AY/xy&8KWl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.cloneT();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm2.replaceAll(unaryOperator0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.equals(jSTerm0);
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm5.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8080457195839967
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "Yw (&:,wbh>,j";
      StringReader stringReader0 = new StringReader("Yw (&:,wbh>,j");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (double) 32;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm1.toString();
      JSTerm jSTerm2 = new JSTerm();
      int int0 = 44;
      // Undeclared exception!
      try { 
        jSTerm2.lastElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7558847487169416
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "Hi4D9@<{I/4wH0H");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.firstElement();
      StringReader stringReader0 = new StringReader("Hi4D9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      streamTokenizer0.nval = (double) 0;
      jSSubstitution3.clone();
      int int0 = (-3206);
      // Undeclared exception!
      try { 
        jSTerm0.elementAt((-3206));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      stringReader0.mark(32);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      char[] charArray0 = new char[7];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'J';
      charArray0[6] = 'C';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader1 = new StringReader("%qbrq+!r72");
      StringReader stringReader2 = new StringReader(":");
      StringReader stringReader3 = new StringReader("Hkm,F<");
      stringReader3.read(charBuffer0);
      stringReader0.ready();
      StringReader stringReader4 = new StringReader("p#@n|");
      stringReader1.read(charBuffer0);
      StringReader stringReader5 = new StringReader("p#@n|");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader3);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8080457195839967
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H/,f-UbD0AY+x_&8KWl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.removeAllElements();
      jSTerm2.equals(jSTerm3);
      System.setCurrentTimeMillis((-1));
      Predicate.isEqual((Object) spliterator0);
      jSTerm3.clone();
      // Undeclared exception!
      try { 
        jSTerm3.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      stringReader0.mark(32);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      streamTokenizer0.ttype = 32;
      StringReader stringReader1 = new StringReader("ceil");
      StringReader stringReader2 = new StringReader("ceil");
      stringReader2.mark(0);
      stringReader0.read(charBuffer0);
      stringReader0.ready();
      stringReader0.mark(63);
      CharBuffer.wrap(charArray0);
      stringReader2.read(charArray0);
      stringReader0.read();
      StringReader stringReader3 = new StringReader("ceil");
      stringReader2.read(charBuffer0);
      StringReader stringReader4 = new StringReader("-VmQuon)");
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9512595041439562
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      Predicate<JSTerm> predicate0 = Predicate.isEqual((Object) jSTerm0);
      predicate0.test(jSTerm0);
      jSTerm0.removeIf(predicate0);
      jSTerm0.iterator();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader(">uC|Y(Cmz{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8288411561741995
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "?i9@<{I/4wH0H");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.firstElement();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.removeAllElements();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm2, jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "?/9?<{I/4VH0H";
      StringReader stringReader0 = new StringReader("?/9?<{I/4VH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9254081650860662
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "?i9@<{I/4wH0H");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.firstElement();
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSSubstitution1.replaceAll(unaryOperator0);
      streamTokenizer0.nval = (double) 0;
      jSSubstitution3.clone();
      int int0 = (-3206);
      // Undeclared exception!
      try { 
        jSTerm0.elementAt((-3206));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.parallelStream();
      jSTerm0.makeEval(false);
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1569876443452742
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yw (&:,wbh>,j");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.nextToken();
      jSSubstitution0.add((Object) "Yw (&:,wbh>,j");
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = '?';
      stringReader0.read(charArray0);
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSTerm0.toString();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5977295736436044
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u/,r-UbD0AY+_&8KWl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.wordChars(63, 63);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement(jSSubstitution0);
      jSTerm1.makeFunction();
      streamTokenizer0.ordinaryChar(63);
      streamTokenizer0.ordinaryChar(38);
      jSTerm0.makeConstant();
      streamTokenizer0.ordinaryChars(3457, 63);
      streamTokenizer0.commentChar(57);
      JSTerm jSTerm2 = new JSTerm();
      streamTokenizer0.whitespaceChars(94, 63);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u/,r-UbD0AY+_&8KWl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.wordChars(63, 63);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.equalT = 1087;
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.makeFunction();
      streamTokenizer0.ordinaryChar(63);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.clone();
      JSJshopVars.verticalL = 10;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isFunction();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.303092403761719
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.semicolon = 1485;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.clone();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("2`7YuUb_`yHT.g.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.cloneT();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1935496040981333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      stringReader0.mark(32);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader1 = new StringReader("?i9@<{I/4wH0H");
      StringReader stringReader2 = new StringReader(", ");
      stringReader0.read(charBuffer0);
      StringReader stringReader3 = new StringReader("%qbrq+!r72");
      stringReader3.ready();
      StringReader stringReader4 = new StringReader("-VmQuon)");
      stringReader3.read(charBuffer0);
      StringReader stringReader5 = new StringReader("w)[FNO&");
      StringReader stringReader6 = new StringReader("}G.[w]");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader6);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      charArray0[1] = 'A';
      charArray0[2] = 'b';
      charArray0[3] = 'o';
      charArray0[4] = '2';
      charArray0[5] = '\\';
      charArray0[6] = '(';
      JSJshopVars.greaterT = 17;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.0140355237092673
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      System.setCurrentTimeMillis((-1261L));
      Predicate.isEqual((Object) "NN");
      jSTerm1.clone();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.equals(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm0.remove(1149);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1149
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0317671113505356
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      stringReader0.mark(32);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      streamTokenizer0.ttype = 32;
      StringReader stringReader1 = new StringReader("%qbrq+!r72");
      StringReader stringReader2 = new StringReader("%qbrq+!r72");
      stringReader2.mark(0);
      stringReader0.read(charBuffer0);
      stringReader0.ready();
      stringReader0.mark(63);
      CharBuffer.wrap(charArray0);
      stringReader2.read(charArray0);
      stringReader0.read();
      StringReader stringReader3 = new StringReader("%qbrq+!r72");
      stringReader2.read(charBuffer0);
      StringReader stringReader4 = new StringReader("-VmQuon)");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader4);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.8486855577264172
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("notequal");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader1 = new StringReader("__wDJ3h)%r>N@DVbYo");
      stringReader1.read(charBuffer0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.print();
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.8734641445321513
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yw (&wb>j");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      JSJshopVars.minus = 32;
      streamTokenizer0.ordinaryChar((-281));
      jSTerm0.parallelStream();
      JSJshopVars.slash = 32;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.standardizerTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yw (&:,wbh>,j");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(2116);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (double) 32;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.cloneT();
      streamTokenizer0.commentChar(3528);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      stringReader0.mark(32);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8080457195839967
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      predicate0.or(predicate1);
      Predicate<Object> predicate2 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<JSSubstitution> predicate3 = predicate0.or(predicate2);
      Predicate<JSSubstitution> predicate4 = predicate3.and(predicate0);
      Predicate<JSSubstitution> predicate5 = predicate4.negate();
      jSTerm0.removeIf(predicate5);
      jSTerm0.iterator();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader(">uC|Y(Cmz{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.whitespaceChars((-4), (-4));
      Predicate<Object> predicate6 = Predicate.isEqual((Object) jSTerm1);
      Predicate<JSTerm> predicate7 = Predicate.isEqual((Object) jSTerm0);
      Predicate<JSTerm> predicate8 = predicate7.negate();
      Predicate<JSTerm> predicate9 = predicate8.or(predicate6);
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate<JSTerm> predicate11 = predicate8.and(predicate10);
      Predicate.isEqual((Object) predicate6);
      stringReader0.reset();
      stringReader0.skip((-4));
      predicate9.or(predicate11);
      streamTokenizer0.whitespaceChars((-3), (-1114));
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.2644994906224682
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "'3sq^9V/WdCVwtB)");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.firstElement();
      jSTerm1.isVariable();
      jSSubstitution0.add((Object) jSTerm1);
      Object[] objectArray0 = new Object[7];
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      objectArray0[0] = (Object) jSSubstitution1;
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) jSSubstitution0;
      objectArray0[6] = (Object) jSSubstitution0;
      jSSubstitution1.toArray(objectArray0);
      jSSubstitution0.add((Object) "'3sq^9V/WdCVwtB)");
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm2.applySubstitutionPF(jSSubstitution0);
      jSSubstitution1.add(objectArray0[0]);
      Object object0 = new Object();
      jSSubstitution0.add(objectArray0[2]);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any());
      jSSubstitution0.sort(comparator0);
      jSTerm0.print();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm1.call();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.standardizerTerm();
      jSTerm1.isGround();
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.3439604435494834
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      StringReader stringReader1 = new StringReader("Line : ");
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = '_';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm1);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSSubstitution2.isEmpty());
      assertEquals("[?%%%]", jSTerm2.toString());
      assertNotSame(jSTerm1, jSTerm3);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.11336892717262
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "?i9@<{I/4wH0H");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.toString();
      jSSubstitution1.add((Object) "[?i9@<{I/4wH0H]");
      Object[] objectArray0 = new Object[7];
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      objectArray0[0] = (Object) jSSubstitution1;
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[2] = (Object) "[?i9@<{I/4wH0H]";
      objectArray0[3] = (Object) jSSubstitution0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator0);
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) jSSubstitution1;
      objectArray0[6] = (Object) jSSubstitution0;
      jSSubstitution1.toArray(objectArray0);
      jSSubstitution1.add((Object) null);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      assertFalse(jSTerm2.isVariable());
      
      jSSubstitution1.add(objectArray0[0]);
      Object object0 = new Object();
      jSSubstitution0.add(objectArray0[2]);
      jSSubstitution0.add(objectArray0[2]);
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution1);
      Object object1 = new Object();
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      JSTerm jSTerm5 = jSTerm3.cloneT();
      JSSubstitution jSSubstitution2 = jSTerm5.matches(jSTerm4);
      assertTrue(jSTerm1.isFunction());
      assertNotSame(jSTerm3, jSTerm1);
      assertFalse(jSTerm5.isEval());
      assertTrue(jSTerm3.isFunction());
      assertEquals(0, jSSubstitution2.size());
      assertFalse(jSSubstitution2.fail());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.358831279638734
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SdX&+*e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSJshopVars.semicolon = (-1);
      jSTerm0.spliterator();
      streamTokenizer0.nextToken();
      jSTerm0.isGround();
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = 'A';
      charArray0[2] = 'b';
      charArray0[3] = 'o';
      charArray0[4] = '2';
      charArray0[5] = '\\';
      charArray0[6] = '(';
      stringReader0.read(charArray0);
      jSTerm0.isVariable();
      JSJshopVars.greaterT = (int) '\\';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.toStr();
      jSTerm1.trimToSize();
      jSTerm1.matches(jSTerm0);
      jSTerm0.print();
      jSTerm0.print();
      jSTerm0.toStr();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.firstElement();
      jSSubstitution1.add((Object) "%%%");
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      stringReader0.mark(32);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      streamTokenizer0.ttype = 32;
      StringReader stringReader1 = new StringReader("%qbrq+!r72");
      StringReader stringReader2 = new StringReader("%qbrq+!r72");
      stringReader0.read(charBuffer0);
      stringReader2.ready();
      stringReader0.mark(78);
      CharBuffer.wrap(charArray0);
      stringReader0.read();
      StringReader stringReader3 = new StringReader("%qbrq+!r72");
      stringReader2.read(charBuffer0);
      StringReader stringReader4 = new StringReader("-VmQuon)");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader4);
      jSTerm0.toStr();
      System.setCurrentTimeMillis(2229L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.spliterator();
      jSTerm0.equals(jSTerm1);
      System.setCurrentTimeMillis((-2097L));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.9865302366210549
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "?i9@<{I/4wH0H");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.firstElement();
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution2.replaceAll(unaryOperator0);
      jSSubstitution2.clone();
      // Undeclared exception!
      try { 
        jSTerm2.elementAt(165);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 165 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5810937501718236
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7326587201992074
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W\"E_&^5{hLeYo\"X2}Pt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("?%%%");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.parseNumbers();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer4.slashStarComments(false);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'C';
      stringReader0.read();
      stringReader0.read();
      charArray0[1] = '0';
      CharBuffer.wrap(charArray0);
      stringReader0.skip((-1));
      StringReader stringReader1 = new StringReader("%qbrq+!r72");
      StringReader stringReader2 = new StringReader("%qbrq+!r72");
      System.setCurrentTimeMillis((-1));
      jSTerm0.print();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 44;
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1269287948006759
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NbkBt(Y '~/E");
      StringReader stringReader1 = new StringReader("|");
      stringReader0.reset();
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[4] = 'q';
      charArray0[2] = 'g';
      charArray0[3] = 'j';
      charArray0[4] = 'k';
      charArray0[5] = '\"';
      charArray0[6] = 'F';
      charArray0[7] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader2 = new StringReader("K=");
      StringReader stringReader3 = new StringReader("V'mR.::>kO[G8Q]a~");
      StringReader stringReader4 = new StringReader("?%%%");
      stringReader4.read(charBuffer0);
      StringReader stringReader5 = new StringReader("p?Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader5);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
