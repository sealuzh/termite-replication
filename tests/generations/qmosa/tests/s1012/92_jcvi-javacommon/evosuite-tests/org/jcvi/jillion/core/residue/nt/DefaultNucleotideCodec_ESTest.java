/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 13:52:05 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9640255276469456
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      int int0 = 7;
      defaultNucleotideCodec0.toString(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray0, 4294967295L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483645
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 635;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      ListIterator<Nucleotide> listIterator0 = linkedList0.listIterator();
      Nucleotide nucleotide0 = Nucleotide.Weak;
      linkedList0.add(nucleotide0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(635, (Iterator<Nucleotide>) listIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Nucleotide) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.388482854108097
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.add(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      linkedList1.add(nucleotide1);
      Nucleotide nucleotide2 = Nucleotide.Gap;
      linkedList1.add(nucleotide2);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide3 = Nucleotide.NotThymine;
      linkedList0.add(nucleotide3);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, 65);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, 2220);
      assertTrue(int1 == int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide2);
      boolean boolean0 = defaultNucleotideCodec1.isGap(byteArray2, 0);
      assertTrue(boolean0);
      
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec2.getUngappedLength(byteArray2);
      defaultNucleotideCodec1.isGap(byteArray0, (-1300));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)18, (byte) (-32)}, byteArray0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)3;
      byteArray1[2] = (byte)31;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.184682158332512
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set1 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.addAll((Collection<? extends Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Thymine;
      linkedList0.add(nucleotide1);
      int int0 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 131072);
      int int1 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-1));
      assertTrue(int1 == int0);
      assertEquals(5, byteArray0.length);
      assertEquals(1, int1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, (-1221));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 26;
      Integer integer0 = new Integer(26);
      Integer integer1 = new Integer(585);
      Integer.sum(585, 26);
      Integer integer2 = new Integer((-1));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer integer3 = new Integer(1717986918);
      Integer[] integerArray0 = new Integer[6];
      Integer integer4 = new Integer((-1));
      Integer integer5 = Integer.getInteger("JR~{Ny<>X?", 1717986918);
      Integer.getInteger("range ", integer5);
      Integer.getInteger("range ", integer4);
      integerArray0[0] = integer1;
      Integer integer6 = new Integer(1717986918);
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer3;
      Integer integer7 = new Integer(1717986918);
      Integer.toUnsignedLong((int) integerArray0[3]);
      Integer integer8 = new Integer((int) integerArray0[3]);
      Integer.sum(int0, (-1));
      Integer.compare((-1), int0);
      Integer.toUnsignedString(int0);
      Integer.divideUnsigned((-1), 10);
      Integer integer9 = Integer.getInteger("", integer8);
      Integer.getInteger("", integer9);
      integerArray0[4] = integer7;
      Integer integer10 = new Integer(2844);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(26, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9331859890592473
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      int int0 = 26;
      Integer integer0 = new Integer(26);
      Integer integer1 = new Integer(585);
      Integer.sum(585, 26);
      Integer integer2 = new Integer(26);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer integer3 = new Integer(1717986918);
      Integer[] integerArray0 = new Integer[6];
      Integer.getInteger("IABH#!o Yuxm~u;8s", 1717986918);
      integerArray0[0] = integer1;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      Integer integer4 = new Integer(1717986918);
      integerArray0[1] = integer0;
      Integer.min(75, (-2024));
      integerArray0[2] = integer0;
      integerArray0[3] = integer3;
      Integer integer5 = new Integer(1717986918);
      Integer.toUnsignedLong((int) integerArray0[3]);
      Integer integer6 = new Integer((int) integerArray0[3]);
      Integer.sum(int0, 611);
      Integer integer7 = new Integer(int0);
      Integer.toUnsignedString(int0);
      Integer.divideUnsigned((int) integer7, 10);
      Integer integer8 = Integer.getInteger("", integer6);
      Integer.getInteger("", integer8);
      integerArray0[4] = integer5;
      Integer integer9 = new Integer(2844);
      defaultNucleotideCodec0.isGap(byteArray0, 26);
      DefaultNucleotideCodec[] defaultNucleotideCodecArray0 = DefaultNucleotideCodec.values();
      assertEquals(1, defaultNucleotideCodecArray0.length);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.505155899851634
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("-", string0);
      
      defaultNucleotideCodec0.isGap(byteArray0, 7);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      defaultNucleotideCodec0.iterator(byteArray0);
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1717986918);
      assertEquals(1717986917, int0);
      
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec.values();
      Range range0 = Range.ofLength(1);
      defaultNucleotideCodec0.iterator(byteArray0, range0);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 1);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.375964994904694
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.toString(byteArray0);
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("-", string0);
      
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 7);
      assertFalse(boolean0);
      
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 7);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode((byte[]) null, 32L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor((byte[]) null, (-2199));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-371);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-36);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9651095384870536
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-2);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-2);
      byteArray1[1] = (byte) (-96);
      byteArray1[2] = (byte) (-2);
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte) (-2);
      byteArray1[5] = (byte) (-2);
      byteArray1[6] = (byte) (-2);
      defaultNucleotideCodec0.iterator(byteArray1);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 0);
      byteArray0[2] = (byte) (-2);
      Range range0 = Range.ofLength((byte)109);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0, range0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode((int) (byte) (-2), iterator0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, (-64));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer(26);
      Integer integer1 = new Integer(585);
      Integer.sum(585, 26);
      Integer integer2 = new Integer((-1));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer integer3 = new Integer(1717986918);
      Integer[] integerArray0 = new Integer[5];
      Integer integer4 = new Integer((-1));
      Integer.getInteger("range ", integer4);
      integerArray0[0] = integer1;
      Integer.getInteger("Kl");
      integerArray0[4] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer3;
      Integer integer5 = new Integer(1717986918);
      Integer.toUnsignedLong((int) integerArray0[3]);
      Integer integer6 = new Integer((int) integerArray0[3]);
      Integer.sum(659, (-1));
      Integer.toUnsignedString(11);
      Integer integer7 = Integer.getInteger("", integer6);
      Integer.getInteger("", integer7);
      integerArray0[4] = integer5;
      linkedList0.toArray(integerArray0);
      Integer integer8 = new Integer(26);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)1;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1022);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7290425571534516
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      int int0 = 26;
      Integer integer0 = new Integer(26);
      Integer integer1 = new Integer(585);
      Integer integer2 = new Integer(26);
      Integer integer3 = new Integer(1717986918);
      Integer[] integerArray0 = new Integer[5];
      Integer integer4 = new Integer(1717986918);
      Integer.getInteger("rnge", integer4);
      Integer integer5 = Integer.getInteger("rnge", integer0);
      integerArray0[0] = integer1;
      Integer integer6 = new Integer(1717986918);
      integerArray0[1] = integer0;
      integerArray0[2] = integer5;
      integerArray0[3] = integer3;
      Integer integer7 = new Integer(1717986918);
      Integer.toUnsignedLong((int) integerArray0[3]);
      Integer integer8 = new Integer((int) integerArray0[3]);
      Integer.compare(26, int0);
      Integer.toUnsignedString(int0);
      Integer integer9 = new Integer(int0);
      Integer.divideUnsigned(37, (int) integerArray0[0]);
      Integer.compare(0, (-395247784));
      Integer integer10 = Integer.getInteger("", integer8);
      Integer.toUnsignedString((-3260));
      Integer.getInteger("", integer10);
      integerArray0[4] = integer7;
      Range.ofLength(1717986918);
      int int1 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-1982292597));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)16}, byteArray0);
      assertEquals(1, int1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3538591634529324
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, 7);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 7);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("GT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.GT
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      int int0 = 26;
      Integer integer0 = new Integer(26);
      Integer integer1 = new Integer(585);
      Integer integer2 = new Integer(26);
      Integer integer3 = new Integer(1717986918);
      Integer[] integerArray0 = new Integer[13];
      Integer integer4 = Integer.getInteger("SB", 585);
      Integer integer5 = Integer.getInteger("=Y|'DDn5", 1717986918);
      Integer.getInteger("rnge", integer5);
      Integer integer6 = Integer.getInteger("rnge", integer0);
      integerArray0[0] = integer1;
      Integer.getInteger("rnge", 585);
      integerArray0[1] = integer4;
      integerArray0[2] = integer6;
      integerArray0[3] = integer3;
      Integer integer7 = new Integer(1717986918);
      Integer.toUnsignedLong((int) integerArray0[3]);
      Integer integer8 = new Integer((int) integerArray0[3]);
      Integer.compare(26, int0);
      Integer.toUnsignedString(int0);
      Integer integer9 = new Integer(int0);
      Integer.divideUnsigned((int) integerArray0[1], (int) integerArray0[0]);
      Integer.compare(0, (-395247784));
      Integer.getInteger("", integer8);
      Integer.toUnsignedString((-3260));
      Integer integer10 = new Integer(int0);
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("A", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.174834213558677
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)50;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)117);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-1);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      defaultNucleotideCodec0.encode((-1), iterator0);
      Nucleotide nucleotide0 = Nucleotide.Purine;
      defaultNucleotideCodec1.encode(nucleotide0);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.948107248050431
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(4334, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5231918705451206
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.addAll((Collection<? extends Nucleotide>) linkedList0);
      linkedList0.add(nucleotide0);
      linkedList1.add(nucleotide0);
      linkedList0.add(nucleotide0);
      linkedList0.removeFirstOccurrence((Object) null);
      ListIterator<Nucleotide> listIterator0 = linkedList1.listIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(798, (Iterator<Nucleotide>) listIterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1004790618760354
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-25);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      int int0 = 1;
      defaultNucleotideCodec0.isGap(byteArray0, 1);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Keto;
      linkedList2.add(nucleotide0);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      Range range0 = Range.of(0L);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray1, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2076465455668037
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("", string0);
      
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-26);
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (byte) (-26));
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2076465455668037
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.toString(byteArray0);
      byteArray0[1] = (byte)0;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, (byte)0);
      assertEquals(1, int0);
      assertEquals(5, byteArray1.length);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.053085404600997
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Keto;
      linkedList1.add(nucleotide0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      linkedList0.add(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList3);
      linkedList3.pollFirst();
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      Range range0 = Range.ofLength(0L);
      defaultNucleotideCodec0.iterator(byteArray0, range0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8836404106149494
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)4;
      Range range0 = Range.ofLength((byte)4);
      defaultNucleotideCodec0.iterator(byteArray0, range0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      String string0 = "cCyQA= ,l\\2";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("cCyQA= ,l\u0002", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse cCyQA= ,l\u0002 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.700439941267991
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)85;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1317L), 2015L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.valueOf("INSTANCE");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)10;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5666170714355765
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-2);
      Byte byte0 = new Byte((byte)2);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-2115903005);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)109;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, (Range) null);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      int int0 = 185375742;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.NotThymine;
      linkedList0.add(nucleotide0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-18);
      byteArray0[2] = (byte)7;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.130285399790697
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      boolean boolean0 = defaultNucleotideCodec1.isGap(byteArray0, (-8330448));
      assertFalse(boolean0);
      
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      linkedList1.add(nucleotide0);
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList5 = new LinkedList<Nucleotide>();
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) linkedList4);
      assertEquals(4, byteArray1.length);
      
      byte[] byteArray2 = defaultNucleotideCodec1.encode(nucleotide0);
      assertEquals(5, byteArray2.length);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.562200162369491
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      int int1 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.403763330235561
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)3;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.403763330235561
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.0662861127283794
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      int int0 = 26;
      Integer integer0 = new Integer(26);
      Integer integer1 = new Integer(26);
      Integer integer2 = new Integer(26);
      Integer integer3 = new Integer(579);
      Integer integer4 = new Integer(579);
      Integer[] integerArray0 = new Integer[4];
      Integer integer5 = Integer.getInteger("IABH#!o Yuxm~u;8s", 579);
      Integer.toUnsignedLong(579);
      Integer integer6 = new Integer(26);
      Integer.getInteger("gyYT/", integer5);
      Integer integer7 = Integer.getInteger("gyYT/", integer0);
      integerArray0[0] = integer1;
      Integer integer8 = new Integer(26);
      integerArray0[1] = integer0;
      integerArray0[2] = integer7;
      integerArray0[3] = integer4;
      Integer integer9 = new Integer(26);
      Integer.toUnsignedLong((int) integerArray0[3]);
      Integer integer10 = new Integer(int0);
      Integer.divideUnsigned((-1134), (-894));
      Integer integer11 = new Integer((int) integerArray0[3]);
      Integer.compare(26, int0);
      Integer.toUnsignedString(int0);
      Integer.divideUnsigned(579, 26);
      Integer integer12 = new Integer(int0);
      Integer integer13 = new Integer(22);
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Integer integer14 = new Integer(int0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int1 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertEquals(0, int1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)7, (byte) (-9), (byte) (-106), (byte)74, (byte) (-64)}, byteArray0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      defaultNucleotideCodec0.encode(nucleotide0);
      int int0 = 26;
      Integer integer0 = new Integer(26);
      Integer integer1 = new Integer(585);
      Integer integer2 = new Integer(26);
      Integer integer3 = new Integer(1717986918);
      Integer[] integerArray0 = new Integer[5];
      Integer integer4 = Integer.getInteger("IABH#!o Yuxm~u;8s", 1717986918);
      Integer.getInteger("rnge", integer4);
      Integer integer5 = Integer.getInteger("rnge", integer0);
      integerArray0[0] = integer1;
      Integer integer6 = new Integer(1717986918);
      integerArray0[1] = integer0;
      integerArray0[2] = integer5;
      integerArray0[3] = integer3;
      Integer integer7 = new Integer(1717986918);
      Integer.toUnsignedLong((int) integerArray0[3]);
      Integer integer8 = new Integer((int) integerArray0[3]);
      Integer.compare(26, int0);
      Integer.toUnsignedString(int0);
      Integer integer9 = new Integer(int0);
      Integer.divideUnsigned(int0, (int) integerArray0[0]);
      Integer.compare(0, (-395247784));
      Integer integer10 = Integer.getInteger("", integer8);
      Integer.toUnsignedString((-3260));
      Integer.getInteger("", integer10);
      integerArray0[4] = integer7;
      Integer integer11 = new Integer(2844);
      Range range0 = Range.ofLength(0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null, range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)3;
      Range range0 = Range.ofLength((byte)50);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(127L);
      Range range1 = Range.of(range_CoordinateSystem0, 127L, 127L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      range1.getEnd();
      range0.equals("[ 127 .. 127 ]/SB");
      range0.isSubRangeOf(range1);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem2);
      int int0 = 7;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 7);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem3);
      Range.parseRange("[ 127 .. 127 ]/SB", range_CoordinateSystem3);
      range0.intersects(range1);
      Range.of(range_CoordinateSystem1, 13L, 127L);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 555L;
      long long1 = 396L;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 127 .. 126 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)68;
      byteArray0[0] = (byte)68;
      byte byte1 = (byte) (-47);
      byteArray0[1] = (byte) (-47);
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(127L);
      Range range1 = Range.of(range_CoordinateSystem0, 127L, 127L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      range1.getEnd();
      range0.equals("[ 127 .. 127 ]/SB");
      range0.isSubRangeOf(range1);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem2);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 7);
      assertEquals(0, int0);
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem3);
      Range.parseRange("[ 127 .. 127 ]/SB", range_CoordinateSystem3);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.parseRange("[ 127 .. 127 ]/SB", range_CoordinateSystem4);
      Range.CoordinateSystem range_CoordinateSystem5 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem5, (-1291L), 2L);
      Range range3 = Range.of(126L);
      Range.of((-1331L));
      range2.complement(range3);
      Range.ofLength(4L);
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      int int0 = 26;
      Integer integer0 = new Integer(26);
      Integer integer1 = new Integer(26);
      Integer integer2 = new Integer(26);
      Integer integer3 = new Integer(579);
      Integer integer4 = new Integer(579);
      Integer[] integerArray0 = new Integer[4];
      Integer integer5 = Integer.getInteger("IABH#!o Yuxm~u;8s", 579);
      Integer.toUnsignedLong(579);
      Integer integer6 = new Integer(26);
      Integer.getInteger("gyYT/", integer5);
      Integer integer7 = Integer.getInteger("gyYT/", integer0);
      integerArray0[0] = integer1;
      Integer integer8 = new Integer(26);
      integerArray0[1] = integer0;
      integerArray0[2] = integer7;
      integerArray0[3] = integer4;
      Integer integer9 = new Integer(26);
      Integer.toUnsignedLong((int) integerArray0[3]);
      Integer integer10 = new Integer(int0);
      Integer.divideUnsigned((-1134), (-894));
      Integer integer11 = new Integer((int) integerArray0[3]);
      Integer.compare(26, int0);
      Integer.toUnsignedString(int0);
      Integer.divideUnsigned(579, 26);
      Integer integer12 = new Integer(int0);
      Integer.divideUnsigned(int0, int0);
      Integer integer13 = new Integer(22);
      nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getNumberOfGapsUntil((byte[]) null, 22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.75012938226178
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray0, (byte)3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 3 corresponds to encodedIndex 5  encodedglyph length is 5
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-64);
      byteArray0[8] = (byte)11;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte)124);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 124 corresponds to encodedIndex 66  encodedglyph length is 9
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.9074582868385934
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-31);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 211);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte)13, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.1465021848890036
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      int int0 = 18;
      Integer integer0 = new Integer(18);
      Integer integer1 = new Integer(18);
      Integer integer2 = new Integer(18);
      Integer integer3 = new Integer(579);
      Integer integer4 = new Integer(579);
      Integer[] integerArray0 = new Integer[4];
      Integer integer5 = Integer.getInteger("IABH#!o Yuxm~u;8s", 579);
      Integer.toUnsignedLong(579);
      Integer integer6 = new Integer(18);
      Integer.getInteger("gyYT/", integer5);
      Integer integer7 = Integer.getInteger("gyYT/", integer0);
      integerArray0[0] = integer1;
      Integer integer8 = new Integer(18);
      integerArray0[1] = integer0;
      integerArray0[2] = integer7;
      integerArray0[3] = integer4;
      Integer integer9 = new Integer(18);
      Integer.toUnsignedLong((int) integerArray0[3]);
      Integer integer10 = new Integer(int0);
      Integer.divideUnsigned((-1134), (-894));
      Integer integer11 = new Integer((int) integerArray0[3]);
      Integer.compare(18, int0);
      Integer.toUnsignedString(int0);
      Integer.divideUnsigned(579, 18);
      Integer integer12 = new Integer(int0);
      Integer.divideUnsigned(int0, int0);
      Integer integer13 = new Integer(32);
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Integer integer14 = new Integer(int0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int1 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)7, (byte) (-9), (byte) (-106), (byte)74, (byte) (-64)}, byteArray0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.022794924510636
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)9;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)96);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      String string0 = "cCyQA= ,l\\2";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("cCyQA= ,l\u0002", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse cCyQA= ,l\u0002 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.3952163216885523
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)9;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-1593));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.626929082193149
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)77;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.024884788669466
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)12;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      int int0 = 26;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = "$&_B'x";
      // Undeclared exception!
      try { 
        Range.parseRange("$&_B'x", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse $&_B'x into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.5068077022515487
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)25;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)55);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.4026604904230435
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)10;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (byte)10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.122928297357194
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)9;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Strong;
      defaultNucleotideCodec0.encode(nucleotide1);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)3;
      defaultNucleotideCodec0.decode(byteArray0, 0L);
      int int0 = defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      assertEquals(648707, int0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.9410699503727393
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)16;
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, (byte)3);
      DefaultNucleotideCodec.values();
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-415L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -415
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.1016582190348654
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-25);
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray1, 1274);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide1 = Nucleotide.Unknown;
      linkedList0.add(nucleotide1);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide2 = Nucleotide.NotGuanine;
      linkedList0.add(nucleotide2);
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, (byte) (-25));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-34)}, byteArray1);
      assertEquals(2, int0);
      
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.510404533308129
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-21);
      byte byte0 = (byte)1;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.007646885410318
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      int int0 = 26;
      Integer integer0 = new Integer(26);
      Integer integer1 = new Integer(585);
      Integer integer2 = new Integer(26);
      Integer integer3 = new Integer(1717986918);
      Integer[] integerArray0 = new Integer[5];
      Integer.getInteger("SB", 585);
      Integer integer4 = Integer.getInteger("=Y|'DDn5", 1717986918);
      Integer.getInteger("rnge", integer4);
      Integer integer5 = Integer.getInteger("rnge", integer0);
      integerArray0[0] = integer1;
      Integer integer6 = new Integer(1717986918);
      integerArray0[1] = integer0;
      integerArray0[2] = integer5;
      integerArray0[3] = integer3;
      Integer.toUnsignedLong((int) integerArray0[3]);
      Integer integer7 = new Integer((int) integerArray0[3]);
      Integer.compare(26, int0);
      Integer.toUnsignedString(int0);
      Integer integer8 = new Integer(int0);
      Integer.divideUnsigned(int0, (int) integerArray0[0]);
      Integer.compare(0, (-395247784));
      Integer.toUnsignedString((-3260));
      Integer.getInteger("", (Integer) int0);
      integerArray0[4] = integer2;
      Integer integer9 = new Integer(2857);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 26);
      assertFalse(boolean0);
      
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(1L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)16}, byteArray0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-7);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.9720861369674885
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      nucleotide0.getBasesFor();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.add(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      linkedList1.add(nucleotide1);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide2 = Nucleotide.NotThymine;
      linkedList0.add(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList3);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 2220);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("r_yR_34EKB-$F<Db$C<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.r_yR_34EKB-$F<Db$C<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte)5;
      int int0 = defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      assertEquals((-16443071), int0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)104;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-331));
      int int0 = 26;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = "$&_B'x";
      // Undeclared exception!
      try { 
        Range.parseRange("$&_B'x", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse $&_B'x into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.692069938160962
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1024);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 3);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)64;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1322);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)15;
      byte byte1 = (byte)0;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 4);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)13;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.8104399097753396
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte)3;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.4125876522655534
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)13;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-36);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-371), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.6510794496696652
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-2);
      Byte byte0 = new Byte((byte) (-114));
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)2);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      String string0 = "V:0`fEvyTN";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte) (-32);
      defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        Range.parseRange("index ", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse index  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 26;
      Integer integer0 = new Integer(26);
      Integer integer1 = new Integer(26);
      Integer integer2 = new Integer(26);
      Integer integer3 = new Integer(1717986927);
      Integer integer4 = new Integer(1717986927);
      Integer[] integerArray0 = new Integer[4];
      Integer integer5 = Integer.getInteger("IABH#!o Yuxm~u;8s", 1717986927);
      Integer.toUnsignedLong(1717986927);
      Integer integer6 = new Integer(1717986927);
      Integer.getInteger("gyYT/", integer5);
      Integer integer7 = Integer.getInteger("gyYT/", integer0);
      integerArray0[0] = integer1;
      Integer integer8 = new Integer(1717986927);
      integerArray0[1] = integer0;
      integerArray0[2] = integer7;
      integerArray0[3] = integer4;
      Integer integer9 = new Integer(1717986927);
      Integer.toUnsignedLong((int) integerArray0[3]);
      Integer.divideUnsigned((-1134), (-894));
      Integer integer10 = new Integer((int) integerArray0[3]);
      Integer.toUnsignedString(int0);
      Integer.divideUnsigned(579, 1717986927);
      Integer integer11 = new Integer(int0);
      Integer.divideUnsigned(int0, int0);
      Integer integer12 = new Integer(0);
      Integer integer13 = new Integer(1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte)95;
      byteArray0[8] = (byte)59;
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray0);
      assertEquals(0, list0.size());
  }
}
