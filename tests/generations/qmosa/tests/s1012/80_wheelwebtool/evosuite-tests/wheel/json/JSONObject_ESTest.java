/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 00:01:56 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("nC@Im{vxFCAfRLzA", 15L);
      Object object0 = jSONObject1.remove("nC@Im{vxFCAfRLzA");
      assertEquals(15L, object0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("Expected a ',' or '}'", (Collection) linkedList0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("#ny*UJ]+", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString((String) null, "4^W'Wt7hn@|Rr}Wx");
      assertEquals("4^W'Wt7hn@|Rr}Wx", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("0..", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("true", (-1.0));
      long long0 = jSONObject1.optLong("true");
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      int int0 = jSONObject0.optInt("YL", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("] not found.", 272);
      assertEquals(272, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("K:?dH!.l~_-}tpvBWeHj", (double) 42);
      assertEquals(42.0, double0, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("nC@Im{vxFCAfRLzA", 15L);
      double double0 = jSONObject0.optDouble("nC@Im{vxFCAfRLzA");
      assertEquals(15.0, double0, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("nC@Im{vxFCAfRLzA", (-911L));
      double double0 = jSONObject0.optDouble("nC@Im{vxFCAfRLzA");
      assertEquals((-911.0), double0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Short short0 = new Short((short) (-5922));
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("G~#", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1490596969706204
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      jSONObject0.put("gettoUnsignedLong", (Object) float0);
      Object object0 = jSONObject0.opt("gettoUnsignedLong");
      assertEquals(0.0F, object0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("null", 1L);
      boolean boolean0 = jSONObject0.has("null");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("V<w)8)", object0);
      String string0 = jSONObject1.getString("V<w)8)");
      assertNotNull(string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(",\n", 44);
      long long0 = jSONObject1.getLong(",\n");
      assertEquals(44L, long0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("\b", 15);
      int int0 = jSONObject1.getInt("\b");
      assertEquals(15, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8866967846580784
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject("3}dm&U5j$[e", stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("(_pa]?\b:.//_", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8504305848855847
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("nC@Im{vxFCAfRLzA", 7L);
      JSONObject jSONObject1 = jSONObject0.put("#ZNTqtj+QrH", false);
      // Undeclared exception!
      jSONObject1.toString(8448);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      hashMap0.put((Object) null, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-2176));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.240684291953396
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("] not jfo1nd.", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double double0 = new Double(1037.5931142336);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject0.put(stringArray0[2], false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.310686555367963
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1428074196753928
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) " :cQ\"lXI G#Tf`Ro[oe");
      try { 
        jSONObject0.put((String) null, (-4136.48125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Float float0 = new Float((float) (short) (-5922));
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer((short) (-842));
      hashMap0.putIfAbsent(integer0, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4426625170494494
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Short short0 = new Short((short)4);
      JSONObject jSONObject0 = new JSONObject(short0);
      try { 
        jSONObject0.accumulate((String) null, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("#Cz", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7562860925204884
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray();
      linkedList0.add(jSONArray0);
      jSONArray0.put(93, true);
      JSONObject jSONObject1 = jSONObject0.append("QO!eu/", linkedList0);
      String string0 = jSONObject1.toString(0, 93);
      assertNotNull(string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8114272629416952
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      Integer integer0 = new Integer((-1889));
      hashMap0.put(integer0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      jSONObject0.put("gettoUnsignedLong", (Object) float0);
      String string0 = jSONObject0.toString((-1889), 123);
      assertNotNull(string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4860325981639935
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Double double0 = new Double(1037.5931142336);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString((-14), 33193);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      String string0 = jSONObject0.toString(44, 473);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = JSONObject.quote("Lc$(k'Z#b,m# 6$");
      assertEquals("\"Lc$(k'Z#b,m# 6$\"", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = JSONObject.quote("G!^e?>DD#d5qM/p7");
      assertEquals("\"G!^e?>DD#d5qM/p7\"", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "^hABa");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("9", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(1352.9F);
      try { 
        jSONObject0.put((String) null, (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("QC`^", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      double double0 = jSONObject0.optDouble("k`/_!yBU*/", (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("/r: U");
      assertNull(object0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Double double0 = new Double(1037.5931142336);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("A,}G%lqPd2OjLhW", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@00000000040", (-149L));
      long long0 = jSONObject1.getLong("java.lang.Long@00000000040");
      assertEquals((-149L), long0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5311386121723252
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("$b7@-", "$b7@-");
      try { 
        jSONObject0.getLong("$b7@-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$b7@-\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.991509361356614
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = new Integer(32);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", long0);
      int int0 = jSONObject1.getInt("] not found.");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("$b7@-", "$b7@-");
      try { 
        jSONObject1.getDouble("$b7@-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$b7@-\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("9OV9m!o6b{|U{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9OV9m!o6b{|U{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("U[N@C@^RS*?/.8");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of U[N@C@^RS*?/.8
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Double double0 = new Double((-2557.6404F));
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("U[N@C@^RS*?/.8", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8228804629889481
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "gC");
      StringWriter stringWriter0 = new StringWriter(2641);
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6859646722371444
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.append("par", "A,}G%lqPd2OjLhW");
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7045415261995158
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.append("QO!eu/", linkedList0);
      String string0 = jSONObject1.toString(0, 93);
      assertNotNull(string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      String string0 = JSONObject.valueToString(hashMap0, 6, 3648);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.8239592165010823
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(10, (Object) "\b");
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, (-1157), 3058);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 2150, 3570);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8008293981022103
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "ZCRVtGy)yV");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7844387513960345
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Double double0 = new Double(1037.5931142336);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a Boolean.", object0);
      jSONObject1.toString();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.9838209212084619
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("$b7@-", "$b7@-");
      jSONObject0.put("\f", 176L);
      String string0 = JSONObject.valueToString(jSONObject0, 1661, 123);
      assertNotNull(string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.939290554095524
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] not founxd.");
      jSONObject0.toString(44);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(",\n");
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = new Float((float) (short) (-5922));
      Double double0 = new Double(102);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-1363), 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.271899083808096
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Short short0 = new Short((short) (-5922));
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("istrim");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = JSONObject.quote(" :cQ\"lXI G#Tf`Ro8oe");
      assertEquals("\" :cQ\\\"lXI G#Tf`Ro8oe\"", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.2592004731479975
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      int int0 = jSONObject0.optInt("\b", (-1157));
      assertEquals((-1157), int0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "9";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(",", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("{}");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optJSONArray("&?rATh*NTg1*");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.583258459420477
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Short short0 = new Short((short) (-5922));
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      Float float0 = new Float((double) (short) (-5922));
      jSONObject0.put("3}dm&U5j$[e", (Object) float0);
      double double0 = jSONObject0.optDouble("3}dm&U5j$[e", (-2091.026119077755));
      assertEquals((-5922.0), double0, 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.4311119194329758
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(1300.097128);
      JSONObject jSONObject1 = new JSONObject(float0);
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.818835129043033
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\f", 176L);
      String string0 = JSONObject.valueToString(jSONObject0, 1661, 123);
      assertNotNull(string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.3730039128771998
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.7202025435261346
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Double double0 = new Double(1037.5931142336);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.put("] is not a Boolean.", false);
      long long0 = jSONObject0.optLong("] is not a Boolean.", 6L);
      assertEquals(6L, long0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.5805323987726638
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Short short0 = new Short((short)70);
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.accumulate("<vm'N6X8Bd&9uSHRA]=", "");
      try { 
        jSONObject0.getJSONObject("<vm'N6X8Bd&9uSHRA]=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<vm'N6X8Bd&9uSHRA]=\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.3034330334440738
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.put("gettoUnsignedLong", (Object) float0);
      try { 
        jSONObject1.getJSONArray("gettoUnsignedLong");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoUnsignedLong\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("nC@Im{vxFCAfRLzA", (-17L));
      int int0 = jSONObject0.optInt("nC@Im{vxFCAfRLzA");
      assertEquals((-17), int0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.4335753918268728
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("fxF'T8/;|EaA", "fxF'T8/;|EaA");
      try { 
        jSONObject1.getInt("fxF'T8/;|EaA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fxF'T8/;|EaA\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.8446831811117756
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-3));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.put("1FGFfSHU*hr_V", true);
      boolean boolean0 = jSONObject0.optBoolean("1FGFfSHU*hr_V");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.4763959755529905
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("fxF'T8/;|EaA", "fxF'T8/;|EaA");
      try { 
        jSONObject0.getBoolean("fxF'T8/;|EaA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fxF'T8/;|EaA\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.484925891109223
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("nC@Im{vxFCAfRLzA", 21L);
      try { 
        jSONObject1.getBoolean("nC@Im{vxFCAfRLzA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nC@Im{vxFCAfRLzA\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = JSONObject.doubleToString((short) (-5929));
      assertEquals("-5929", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = JSONObject.doubleToString(415.7387956);
      assertEquals("415.7387956", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.5047882836811908
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("\"2e+$($9'i16_A+3&", hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("\"2e+$($9'i16_A+3&", "\"2e+$($9'i16_A+3&");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.8636799873410004
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      jSONObject0.put("\b", 15);
      try { 
        jSONObject0.append("\b", "\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\b] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("uV Ug=MI5M;ZEW%:$T-", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{b:IEp,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 6 of {b:IEp,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{bPIEp,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {bPIEp,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.2033320406994705
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{b:IEp_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 7 of {b:IEp_
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{;^yu~hbO/");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 1 of {;^yu~hbO/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}sx}1OXzDf5z!Ri");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }sx}1OXzDf5z!Ri
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("nC@Im{vxFCAfRLzA", 0L);
      boolean boolean0 = jSONObject1.isNull("nC@Im{vxFCAfRLzA");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.6291821433649187
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "nC@Im{vxFCAfRLzA");
      int int0 = jSONObject0.optInt("isreplace");
      assertEquals(0, int0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.6726254461503207
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("$b7@-", 907);
      JSONObject jSONObject1 = jSONObject0.accumulate("$b7@-", "$b7@-");
      JSONObject jSONObject2 = jSONObject1.accumulate("$b7@-", "uV Ug=MI5M;ZEW%:$T-");
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("Bad value from toJSONString: ");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Float float0 = new Float((-1051.0));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.optString("%K8");
      assertEquals(3, jSONObject0.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("nC@Im{vxFCAfRLzA");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("is", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.6783278577773888
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-3));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.put("t", (double) (byte) (-3));
      long long0 = jSONObject0.optLong("t", (-1L));
      assertEquals(2, jSONObject0.length());
      assertEquals((-3L), long0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("nC@Im{vxFCAfRLzA", 21L);
      assertEquals(1, jSONObject0.length());
      
      Object object0 = jSONObject1.get("nC@Im{vxFCAfRLzA");
      assertEquals(21L, object0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("V<w)8)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"V<w)8)\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("A JSONObject text must begin with '{'");
      assertFalse(boolean0);
  }
}
