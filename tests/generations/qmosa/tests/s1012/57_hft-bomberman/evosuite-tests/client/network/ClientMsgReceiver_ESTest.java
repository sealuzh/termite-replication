/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 13:40:32 GMT 2019
 */

package client.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import client.BomberClient;
import client.network.ClientMsgReceiver;
import java.awt.HeadlessException;
import java.net.Proxy;
import java.net.Socket;
import java.net.UnknownHostException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.HashMap;
import messages.Message;
import messages.global.GlobalChatMsg;
import messages.global.ScoreMsg;
import messages.round.BombMoveMsg;
import messages.round.CountdownMsg;
import messages.round.RoundScoreMsg;
import org.apache.log4j.helpers.LogLog;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      System.setCurrentTimeMillis((-2876L));
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      RoundScoreMsg roundScoreMsg0 = new RoundScoreMsg(hashMap0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(roundScoreMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      byte[] byteArray0 = null;
      String string0 = "e39";
      String string1 = null;
      GlobalChatMsg globalChatMsg0 = new GlobalChatMsg(string0, string1);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(globalChatMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      String string0 = "";
      String string1 = "v Ms'uE}e:#5[rgFQu";
      int int0 = 0;
      EvoSuiteFile evoSuiteFile1 = null;
      String string2 = "Couldn't close input stream";
      FileSystemHandling.appendLineToFile(evoSuiteFile1, string2);
      EvoSuiteFile evoSuiteFile2 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-30);
      byteArray0[0] = byte0;
      byte byte1 = (byte)7;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      FileSystemHandling.appendDataToFile(evoSuiteFile2, byteArray0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      SQLDataException sQLDataException0 = new SQLDataException(string0, string1, int0);
      EvoSuiteFile evoSuiteFile3 = null;
      byte[] byteArray1 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile3, byteArray1);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String string3 = "";
      String string4 = "0.mwV";
      SQLWarning sQLWarning0 = new SQLWarning(string3, string4);
      SQLDataException sQLDataException1 = new SQLDataException(string0);
      sQLDataException1.getSuppressed();
      SQLException sQLException0 = new SQLException(sQLDataException1);
      String string5 = "V";
      String string6 = "|#A}HsZqLOM@G$P8";
      SQLDataException sQLDataException2 = new SQLDataException(string5, string6, int0);
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      NetworkHandling.sendDataOnTcp(evoSuiteLocalAddress0, byteArray1);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLWarning0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      int int0 = 3931;
      CountdownMsg countdownMsg0 = new CountdownMsg(int0);
      ArrayList<CountdownMsg> arrayList0 = new ArrayList<CountdownMsg>();
      arrayList0.add(countdownMsg0);
      ScoreMsg scoreMsg0 = new ScoreMsg(arrayList0);
      CountdownMsg countdownMsg1 = new CountdownMsg(int0);
      CountdownMsg countdownMsg2 = new CountdownMsg(int0);
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp(evoSuiteLocalAddress0, byteArray0);
      int int1 = (-1110);
      CountdownMsg countdownMsg3 = new CountdownMsg(int1);
      ArrayList<CountdownMsg> arrayList1 = new ArrayList<CountdownMsg>();
      boolean boolean0 = arrayList1.add(countdownMsg1);
      LogLog.setQuietMode(boolean0);
      int int2 = 1;
      int[] intArray0 = new int[6];
      intArray0[0] = int2;
      intArray0[1] = int1;
      intArray0[2] = int0;
      intArray0[3] = int2;
      intArray0[4] = int2;
      intArray0[5] = int2;
      boolean boolean1 = false;
      BombMoveMsg bombMoveMsg0 = new BombMoveMsg(int2, intArray0, intArray0, boolean1);
      clientMsgReceiver0.processMsg(countdownMsg3);
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isDaemon());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      byte[] byteArray0 = null;
      NetworkHandling.sendDataOnTcp(evoSuiteLocalAddress0, byteArray0);
      mockSocket0.getReuseAddress();
      Message message0 = null;
      clientMsgReceiver0.processMsg(message0);
      byte byte0 = (byte) (-5);
      String string0 = "org.apache.log4j.spi.Configurator";
      try { 
        MockInetAddress.getByAddress(string0, byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      int int0 = 0;
      int[] intArray0 = new int[3];
      int int1 = 3931;
      intArray0[0] = int1;
      intArray0[1] = int0;
      intArray0[2] = int0;
      String string0 = "Couldn't close input stream";
      SQLWarning sQLWarning0 = new SQLWarning(string0, string0);
      String string1 = "VqY%-vik8k3c(tI34B[";
      String string2 = " ?l*E_bl *+!=s WYi";
      SQLDataException sQLDataException0 = new SQLDataException(string1, string2, intArray0[0]);
      String string3 = null;
      SQLWarning sQLWarning1 = new SQLWarning(string0);
      SQLException sQLException0 = new SQLException(sQLWarning1);
      SQLException sQLException1 = new SQLException(sQLException0);
      String string4 = "";
      int int2 = (-1238);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(string4, string0, int2);
      sQLTransientConnectionException0.getStackTrace();
      SQLWarning sQLWarning2 = new SQLWarning(string3, sQLWarning0);
      SQLWarning sQLWarning3 = new SQLWarning(sQLException0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      Socket socket0 = null;
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = null;
      try {
        clientMsgReceiver0 = new ClientMsgReceiver(socket0, bomberClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("common.network.MsgReceiver", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      String string0 = "";
      String string1 = "v Ms'uE}e:#5[rgFQu";
      int int0 = 0;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      SQLDataException sQLDataException0 = new SQLDataException(string0, string1, int0);
      EvoSuiteFile evoSuiteFile1 = null;
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      String string2 = "";
      String string3 = "0.mwV";
      SQLWarning sQLWarning0 = new SQLWarning(string2, string3);
      SQLDataException sQLDataException1 = new SQLDataException();
      SQLException sQLException0 = new SQLException(sQLDataException1);
      SQLWarning sQLWarning1 = new SQLWarning(sQLDataException1);
      int int1 = 310;
      String string4 = "a21c";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(string4, string2, int1);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      String string5 = "^y8)aW";
      int int2 = 4144;
      StackTraceElement stackTraceElement0 = new StackTraceElement(string2, string2, string5, int2);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string6 = "87";
      int int3 = 1;
      StackTraceElement stackTraceElement1 = new StackTraceElement(string2, string1, string6, int3);
      stackTraceElementArray0[1] = stackTraceElement1;
      String string7 = "V+8};.3@\"";
      String string8 = "[<giE";
      int int4 = (-2780);
      StackTraceElement stackTraceElement2 = new StackTraceElement(string7, string7, string8, int4);
      stackTraceElementArray0[2] = stackTraceElement2;
      String string9 = "";
      String string10 = "CONNECTION LOST";
      StackTraceElement stackTraceElement3 = new StackTraceElement(string9, string3, string10, int3);
      stackTraceElementArray0[3] = stackTraceElement3;
      String string11 = "";
      String string12 = "writing scores to db";
      StackTraceElement stackTraceElement4 = new StackTraceElement(string6, string11, string12, int4);
      stackTraceElementArray0[4] = stackTraceElement4;
      int int5 = 1974;
      StackTraceElement stackTraceElement5 = new StackTraceElement(string9, string1, string11, int5);
      stackTraceElementArray0[5] = stackTraceElement5;
      int int6 = 1;
      StackTraceElement stackTraceElement6 = new StackTraceElement(string5, string0, string3, int6);
      stackTraceElementArray0[6] = stackTraceElement6;
      sQLWarning1.setStackTrace(stackTraceElementArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLException0);
      sQLSyntaxErrorException0.setNextException(sQLWarning1);
      SQLException sQLException1 = new SQLException(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.displayErrorMessage();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
