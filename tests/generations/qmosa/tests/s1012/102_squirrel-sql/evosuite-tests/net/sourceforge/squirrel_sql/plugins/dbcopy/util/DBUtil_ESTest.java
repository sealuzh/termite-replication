/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 14:21:39 GMT 2019
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.gargoylesoftware.base.resource.jdbc.CallableStatementWrapper;
import com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.plaf.basic.BasicCheckBoxMenuItemUI;
import javax.swing.plaf.basic.BasicSplitPaneDivider;
import javax.swing.plaf.metal.MetalSplitPaneUI;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAlias;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAliasConnectionProperties;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.client.util.ApplicationFileWrappersImpl;
import net.sourceforge.squirrel_sql.fw.id.IIdentifier;
import net.sourceforge.squirrel_sql.fw.id.IntegerIdentifier;
import net.sourceforge.squirrel_sql.fw.id.UidIdentifier;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.SQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.SQLDatabaseMetaData;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriver;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverProperty;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverPropertyCollection;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableInfo;
import net.sourceforge.squirrel_sql.fw.util.FileWrapper;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperFactoryImpl;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl;
import net.sourceforge.squirrel_sql.fw.util.beanwrapper.StringWrapper;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.scheduling.concurrent.CustomizableThreadFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      BasicCheckBoxMenuItemUI basicCheckBoxMenuItemUI0 = new BasicCheckBoxMenuItemUI();
      BasicCheckBoxMenuItemUI basicCheckBoxMenuItemUI1 = new BasicCheckBoxMenuItemUI();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, ") - table ", ") - table ", "`$5'`~;:0!&7G4n+'Tu", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("HL8", "Don't display splash screen", "Don't display splash screen", "HL8", 3700, "hv", 3700, 1110, 3700, (-1460), "Don't display splash screen", "WmLNj5~4", 516, (-1723), "HL8");
      DBUtil.isBinaryType(tableColumnInfo0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "DBitil.e$ror.bindclobfailure";
      LinkedList<ITableInfo> linkedList0 = new LinkedList<ITableInfo>();
      linkedList0.add((ITableInfo) null);
      DBUtil.convertTableToObjectList(linkedList0);
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      uidIdentifier0.setString("getCatSep: Unexpected Exception - ");
      uidIdentifier0.setString("Application.splash.loadUserSpecificWikiConfiguration");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getTableInfo((ISession) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "([<iju>?p1E]S;+6u31");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        DBUtil.convertTableToObjectList((List<ITableInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("", "),@',V^4iw", "");
      DatabaseObjectType.createNewDatabaseObjectType("),@',V^4iw");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.FUNCTION;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.FUNCTION;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.TABLE;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "Max function is null for dialect=", "),@',V^4iw", "j", (-2), "j", 600, (-2), (-2), (-2), "TRUNCATE TABLE ", "addToPopupMenu", 2003, (-2759), "-AY\"");
      DBUtil.isBinaryType(tableColumnInfo0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DBUtil.getLastStatementValues();
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList((IDatabaseObjectInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("C6|5W![Z\"KVwVY");
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("adPdToPopupMenu", "HL8", "Vgte)E>J?YH");
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.UDF_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(" NOT NULL", "ceiling", "adPdToPopupMenu", (String) null, 969, " NOT NULL", 969, 969, (-2250), (-17), " NOT NULL", ";\"4bkx:s", (-2250), (-2250), "X3F<1XE.tbFpM");
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.SESSION;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[0];
      DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[9];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      tableColumnInfoArray0[2] = tableColumnInfo0;
      tableColumnInfoArray0[3] = tableColumnInfo0;
      tableColumnInfoArray0[4] = tableColumnInfo0;
      tableColumnInfoArray0[5] = tableColumnInfo0;
      tableColumnInfoArray0[6] = tableColumnInfo0;
      tableColumnInfoArray0[7] = tableColumnInfo0;
      tableColumnInfoArray0[8] = tableColumnInfo0;
      DBUtil.getColumnList(tableColumnInfoArray0);
      DBUtil.getColumnList(tableColumnInfoArray0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 2553;
      Integer integer0 = new Integer(2553);
      // Undeclared exception!
      try { 
        DBUtil.tableHasPrimaryKey((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getQuickStartGuideFile();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl0);
      String string0 = "+\\O'd%TvAMYg%3W+!Q";
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "+O'd%TvAMYg%3W+!Q", "+O'd%TvAMYg%3W+!Q");
      DBUtil.validateColumnNames((ITableInfo) null, dBCopyPlugin0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ConnectionWrapper connectionWrapper0 = null;
      try {
        connectionWrapper0 = new ConnectionWrapper((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo(">Tj\"S9Ewx~", "", ">Tj\"S9Ewx~");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDF;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDF_TYPE_DBO;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.BEST_ROW_ID;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("09");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "xF6n)@", "DBUtil.error.tablelotfound", "$1.O$:hxmD,", (-747), "DBUtil.info.bindclobfile", 1247, (-747), (-2897), 2000, "BWRy", "<8h_B'w&!r.7,cBsCh", 7, 1111, "G_gFq6Q=A{k=H&");
      // Undeclared exception!
      try { 
        DBUtil.isBinaryType((TableColumnInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[3];
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "2G", "U`%0BcO,2", "Cr<!*JUpJ)75u4d!", (-102), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-102), (-2123), (-2123), (-102), "U`%0BcO,2", "+`", 16, 184, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      tableColumnInfoArray0[0] = tableColumnInfo0;
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("U`%0BcO,2", "b,q", "U`%0BcO,2", "", 0, ";ib-g{d<Q^.L}QLow^S", 16, 16, (-102), (-16), "b,q", "", 101, 16, ";ib-g{d<Q^.L}QLow^S");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getSourceSession();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      dBCopyPlugin2.getSourceSession();
      dBCopyPlugin2.getDestSession();
      DBUtil.replaceOtherDataType(tableColumnInfo1, (ISession) null);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("([<iju>?p1E]S;+6u31", "> IF,Zu~=l~NT", " tableName=", "'WT#-S*)<", 970, "([<iju>?p1E]S;+6u31", 2009, 128, 11448517, (-2339), "> IF,Zu~=l~NT", "9NJo!", 128, (-1535), "([<iju>?p1E]S;+6u31");
      DBUtil.isBinaryType(tableColumnInfo0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      assertEquals("Synonym Type", databaseObjectType0.getKeyForSerializationReplace());
      assertEquals("Synonym Type", databaseObjectType0.toString());
      assertEquals("Synonym Type", databaseObjectType0.getName());
      assertNotNull(databaseObjectType0);
      
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("),@',V^4iw", "t\"CNP]uxzuw?g", "1");
      assertEquals("),@',V^4iw", databaseObjectInfo0.getCatalogName());
      assertEquals("t\"CNP]uxzuw?g", databaseObjectInfo0.getSchemaName());
      assertEquals("1", databaseObjectInfo0.toString());
      assertEquals("1", databaseObjectInfo0.getSimpleName());
      assertEquals("1", databaseObjectInfo0.getQualifiedName());
      assertNotNull(databaseObjectInfo0);
      
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("eh'wp7Y<$FX5VH)");
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType0));
      assertNotSame(databaseObjectType1, databaseObjectType0);
      assertEquals("eh'wp7Y<$FX5VH)", databaseObjectType1.toString());
      assertEquals("eh'wp7Y<$FX5VH)", databaseObjectType1.getName());
      assertEquals("eh'wp7Y<$FX5VH)", databaseObjectType1.getKeyForSerializationReplace());
      assertNotNull(databaseObjectType1);
      
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.FUNCTION;
      assertFalse(databaseObjectType2.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType2.equals((Object)databaseObjectType1));
      assertNotSame(databaseObjectType2, databaseObjectType0);
      assertNotSame(databaseObjectType2, databaseObjectType1);
      assertEquals("Function", databaseObjectType2.getName());
      assertEquals("Function", databaseObjectType2.getKeyForSerializationReplace());
      assertEquals("Function", databaseObjectType2.toString());
      assertNotNull(databaseObjectType2);
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      assertFalse(databaseObjectType0.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType0.equals((Object)databaseObjectType2));
      assertNotSame(databaseObjectType0, databaseObjectType1);
      assertNotSame(databaseObjectType0, databaseObjectType2);
      assertEquals("Synonym Type", databaseObjectType0.getKeyForSerializationReplace());
      assertEquals("Synonym Type", databaseObjectType0.toString());
      assertEquals("Synonym Type", databaseObjectType0.getName());
      assertEquals("),@',V^4iw", databaseObjectInfo0.getCatalogName());
      assertEquals("t\"CNP]uxzuw?g", databaseObjectInfo0.getSchemaName());
      assertEquals("1", databaseObjectInfo0.toString());
      assertEquals("1", databaseObjectInfo0.getSimpleName());
      assertEquals("1", databaseObjectInfo0.getQualifiedName());
      
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.FUNCTION;
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType0));
      assertNotSame(databaseObjectType3, databaseObjectType1);
      assertNotSame(databaseObjectType3, databaseObjectType0);
      assertSame(databaseObjectType3, databaseObjectType2);
      assertEquals("Function", databaseObjectType3.toString());
      assertEquals("Function", databaseObjectType3.getName());
      assertEquals("Function", databaseObjectType3.getKeyForSerializationReplace());
      assertNotNull(databaseObjectType3);
      
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.FOREIGN_KEY;
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType2));
      assertNotSame(databaseObjectType4, databaseObjectType3);
      assertNotSame(databaseObjectType4, databaseObjectType0);
      assertNotSame(databaseObjectType4, databaseObjectType1);
      assertNotSame(databaseObjectType4, databaseObjectType2);
      assertEquals("ForeignKey", databaseObjectType4.getName());
      assertEquals("ForeignKey", databaseObjectType4.toString());
      assertEquals("ForeignKey", databaseObjectType4.getKeyForSerializationReplace());
      assertNotNull(databaseObjectType4);
      
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.UDF_TYPE_DBO;
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType2));
      assertNotSame(databaseObjectType5, databaseObjectType4);
      assertNotSame(databaseObjectType5, databaseObjectType3);
      assertNotSame(databaseObjectType5, databaseObjectType1);
      assertNotSame(databaseObjectType5, databaseObjectType0);
      assertNotSame(databaseObjectType5, databaseObjectType2);
      assertEquals("UDF Type", databaseObjectType5.toString());
      assertEquals("UDF Type", databaseObjectType5.getKeyForSerializationReplace());
      assertEquals("UDF Type", databaseObjectType5.getName());
      assertNotNull(databaseObjectType5);
      
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.createNewDatabaseObjectType("),@',V^4iw");
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType5));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType0));
      assertNotSame(databaseObjectType6, databaseObjectType4);
      assertNotSame(databaseObjectType6, databaseObjectType3);
      assertNotSame(databaseObjectType6, databaseObjectType1);
      assertNotSame(databaseObjectType6, databaseObjectType2);
      assertNotSame(databaseObjectType6, databaseObjectType5);
      assertNotSame(databaseObjectType6, databaseObjectType0);
      assertEquals("),@',V^4iw", databaseObjectType6.getName());
      assertEquals("),@',V^4iw", databaseObjectType6.getKeyForSerializationReplace());
      assertEquals("),@',V^4iw", databaseObjectType6.toString());
      assertNotNull(databaseObjectType6);
      
      ImageIcon imageIcon0 = new ImageIcon("eh'wp7Y<$FX5VH)");
      assertNotNull(imageIcon0);
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("=3|@!~Eb\"h&n C>u8fW", "fev'A", "eh'wp7Y<$FX5VH)", "[;2jD$:q2Y|@*jn_", (-6), "> IF,Zu~=l~NT", (-1889), 970, (-587), 128, "fev'A", "> IF,Zu~=l~NT", 1111, 7, "'WT#-S*)<");
      assertEquals((-6), tableColumnInfo0.getDataType());
      assertEquals(1111, tableColumnInfo0.getOctetLength());
      assertEquals("> IF,Zu~=l~NT", tableColumnInfo0.getTypeName());
      assertEquals("eh'wp7Y<$FX5VH)", tableColumnInfo0.getTableName());
      assertEquals("fev'A", tableColumnInfo0.getRemarks());
      assertEquals("=3|@!~Eb\"h&n C>u8fW", tableColumnInfo0.getCatalogName());
      assertEquals("fev'A", tableColumnInfo0.getSchemaName());
      assertEquals("eh'wp7Y<$FX5VH)", tableColumnInfo0.toString());
      assertEquals("> IF,Zu~=l~NT", tableColumnInfo0.getDefaultValue());
      assertEquals(970, tableColumnInfo0.getDecimalDigits());
      assertEquals(7, tableColumnInfo0.getOrdinalPosition());
      assertEquals(128, tableColumnInfo0.isNullAllowed());
      assertEquals("'WT#-S*)<", tableColumnInfo0.isNullable());
      assertEquals((-1889), tableColumnInfo0.getColumnSize());
      assertEquals("eh'wp7Y<$FX5VH)", tableColumnInfo0.getSimpleName());
      assertEquals("[;2jD$:q2Y|@*jn_", tableColumnInfo0.getColumnName());
      assertEquals("eh'wp7Y<$FX5VH)", tableColumnInfo0.getQualifiedName());
      assertEquals((-587), tableColumnInfo0.getRadix());
      assertNotNull(tableColumnInfo0);
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
      assertEquals((-6), tableColumnInfo0.getDataType());
      assertEquals(1111, tableColumnInfo0.getOctetLength());
      assertEquals("> IF,Zu~=l~NT", tableColumnInfo0.getTypeName());
      assertEquals("eh'wp7Y<$FX5VH)", tableColumnInfo0.getTableName());
      assertEquals("fev'A", tableColumnInfo0.getRemarks());
      assertEquals("=3|@!~Eb\"h&n C>u8fW", tableColumnInfo0.getCatalogName());
      assertEquals("fev'A", tableColumnInfo0.getSchemaName());
      assertEquals("eh'wp7Y<$FX5VH)", tableColumnInfo0.toString());
      assertEquals("> IF,Zu~=l~NT", tableColumnInfo0.getDefaultValue());
      assertEquals(970, tableColumnInfo0.getDecimalDigits());
      assertEquals(7, tableColumnInfo0.getOrdinalPosition());
      assertEquals(128, tableColumnInfo0.isNullAllowed());
      assertEquals("'WT#-S*)<", tableColumnInfo0.isNullable());
      assertEquals((-1889), tableColumnInfo0.getColumnSize());
      assertEquals("eh'wp7Y<$FX5VH)", tableColumnInfo0.getSimpleName());
      assertEquals("[;2jD$:q2Y|@*jn_", tableColumnInfo0.getColumnName());
      assertEquals("eh'wp7Y<$FX5VH)", tableColumnInfo0.getQualifiedName());
      assertEquals((-587), tableColumnInfo0.getRadix());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stack<IDatabaseObjectInfo> stack0 = new Stack<IDatabaseObjectInfo>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      String string0 = "\t";
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("\t", "\t", "\t");
      assertEquals("\t", databaseObjectInfo0.getCatalogName());
      assertEquals("\t", databaseObjectInfo0.getSimpleName());
      assertEquals("\t", databaseObjectInfo0.toString());
      assertEquals("\t", databaseObjectInfo0.getQualifiedName());
      assertEquals("\t", databaseObjectInfo0.getSchemaName());
      assertNotNull(databaseObjectInfo0);
      
      boolean boolean0 = stack0.add((IDatabaseObjectInfo) databaseObjectInfo0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[\t]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals("\t", databaseObjectInfo0.getCatalogName());
      assertEquals("\t", databaseObjectInfo0.getSimpleName());
      assertEquals("\t", databaseObjectInfo0.toString());
      assertEquals("\t", databaseObjectInfo0.getQualifiedName());
      assertEquals("\t", databaseObjectInfo0.getSchemaName());
      
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList(stack0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        DBUtil.sanityCheckPreferences((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte) (-101);
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)2, (byte) (-123), (byte) (-18), (byte) (-1), (byte) (-87), (byte) (-101)}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, (String) null, (String) null, 599, (String) null, 1007, 95, (-909), 95, (String) null, "2J5WV(Gs$xh", (-2303), (-2303), (String) null);
      assertNull(tableColumnInfo0.getTableName());
      assertNull(tableColumnInfo0.getSimpleName());
      assertNull(tableColumnInfo0.isNullable());
      assertEquals(1007, tableColumnInfo0.getColumnSize());
      assertEquals(95, tableColumnInfo0.getDecimalDigits());
      assertNull(tableColumnInfo0.getQualifiedName());
      assertNull(tableColumnInfo0.getTypeName());
      assertEquals(599, tableColumnInfo0.getDataType());
      assertNull(tableColumnInfo0.getColumnName());
      assertEquals((-2303), tableColumnInfo0.getOctetLength());
      assertNull(tableColumnInfo0.getCatalogName());
      assertNull(tableColumnInfo0.toString());
      assertNull(tableColumnInfo0.getRemarks());
      assertNull(tableColumnInfo0.getSchemaName());
      assertEquals("2J5WV(Gs$xh", tableColumnInfo0.getDefaultValue());
      assertEquals(95, tableColumnInfo0.isNullAllowed());
      assertEquals((-909), tableColumnInfo0.getRadix());
      assertEquals((-2303), tableColumnInfo0.getOrdinalPosition());
      assertNotNull(tableColumnInfo0);
      
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.createNewDatabaseObjectType("2J5WV(Gs$xh");
      assertEquals("2J5WV(Gs$xh", databaseObjectType0.getName());
      assertEquals("2J5WV(Gs$xh", databaseObjectType0.toString());
      assertEquals("2J5WV(Gs$xh", databaseObjectType0.getKeyForSerializationReplace());
      assertNotNull(databaseObjectType0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType((String) null);
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType0));
      assertNotSame(databaseObjectType1, databaseObjectType0);
      assertNull(databaseObjectType1.getKeyForSerializationReplace());
      assertNotNull(databaseObjectType1);
      
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType("STv&w(#");
      assertFalse(databaseObjectType2.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType2.equals((Object)databaseObjectType0));
      assertNotSame(databaseObjectType2, databaseObjectType1);
      assertNotSame(databaseObjectType2, databaseObjectType0);
      assertEquals("STv&w(#", databaseObjectType2.getName());
      assertEquals("STv&w(#", databaseObjectType2.toString());
      assertEquals("STv&w(#", databaseObjectType2.getKeyForSerializationReplace());
      assertNotNull(databaseObjectType2);
      
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      assertFalse(databaseObjectType0.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType0.equals((Object)databaseObjectType1));
      assertNotSame(databaseObjectType0, databaseObjectType2);
      assertNotSame(databaseObjectType0, databaseObjectType1);
      assertNull(tableColumnInfo0.getTableName());
      assertNull(tableColumnInfo0.getSimpleName());
      assertNull(tableColumnInfo0.isNullable());
      assertEquals(1007, tableColumnInfo0.getColumnSize());
      assertEquals(95, tableColumnInfo0.getDecimalDigits());
      assertNull(tableColumnInfo0.getQualifiedName());
      assertNull(tableColumnInfo0.getTypeName());
      assertEquals(599, tableColumnInfo0.getDataType());
      assertNull(tableColumnInfo0.getColumnName());
      assertEquals((-2303), tableColumnInfo0.getOctetLength());
      assertNull(tableColumnInfo0.getCatalogName());
      assertNull(tableColumnInfo0.toString());
      assertNull(tableColumnInfo0.getRemarks());
      assertNull(tableColumnInfo0.getSchemaName());
      assertEquals("2J5WV(Gs$xh", tableColumnInfo0.getDefaultValue());
      assertEquals(95, tableColumnInfo0.isNullAllowed());
      assertEquals((-909), tableColumnInfo0.getRadix());
      assertEquals((-2303), tableColumnInfo0.getOrdinalPosition());
      assertEquals("2J5WV(Gs$xh", databaseObjectType0.getName());
      assertEquals("2J5WV(Gs$xh", databaseObjectType0.toString());
      assertEquals("2J5WV(Gs$xh", databaseObjectType0.getKeyForSerializationReplace());
      
      String string0 = DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      assertNull(tableColumnInfo0.getTableName());
      assertNull(tableColumnInfo0.getSimpleName());
      assertNull(tableColumnInfo0.isNullable());
      assertEquals(1007, tableColumnInfo0.getColumnSize());
      assertEquals(95, tableColumnInfo0.getDecimalDigits());
      assertNull(tableColumnInfo0.getQualifiedName());
      assertNull(tableColumnInfo0.getTypeName());
      assertEquals(599, tableColumnInfo0.getDataType());
      assertNull(tableColumnInfo0.getColumnName());
      assertEquals((-2303), tableColumnInfo0.getOctetLength());
      assertNull(tableColumnInfo0.getCatalogName());
      assertNull(tableColumnInfo0.toString());
      assertNull(tableColumnInfo0.getRemarks());
      assertNull(tableColumnInfo0.getSchemaName());
      assertEquals("2J5WV(Gs$xh", tableColumnInfo0.getDefaultValue());
      assertEquals(95, tableColumnInfo0.isNullAllowed());
      assertEquals((-909), tableColumnInfo0.getRadix());
      assertEquals((-2303), tableColumnInfo0.getOrdinalPosition());
      assertNull(string0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNotNull(dBCopyPlugin0);
      
      IApplication iApplication0 = dBCopyPlugin0.getApplication();
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(iApplication0);
      
      // Undeclared exception!
      try { 
        dBCopyPlugin0.load((IApplication) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null IApplication passed
         //
         verifyException("net.sourceforge.squirrel_sql.client.plugin.DefaultPlugin", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicCheckBoxMenuItemUI basicCheckBoxMenuItemUI0 = new BasicCheckBoxMenuItemUI();
      assertNotNull(basicCheckBoxMenuItemUI0);
      
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode(basicCheckBoxMenuItemUI0);
      assertNotNull(defaultMutableTreeNode0);
      
      DefaultTreeModel defaultTreeModel0 = new DefaultTreeModel(defaultMutableTreeNode0, false);
      assertNotNull(defaultTreeModel0);
      
      JTree jTree0 = new JTree(defaultTreeModel0);
      assertFalse(jTree0.isFocusCycleRoot());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertFalse(jTree0.getIgnoreRepaint());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertNotNull(jTree0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertNull(iSession0);
      
      dBCopyPlugin0.setDestSession((ISession) null);
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin0, (ITableInfo) null, "net.sourceforge.squirrel_sql.fw.gui.FontInfo", "FQL", "net.sourceforge.squirrel_sql.fw.gui.FontInfo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("", ")J,@',V^}iw", "");
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals(")J,@',V^}iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals("", databaseObjectInfo0.toString());
      assertNotNull(databaseObjectInfo0);
      
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.FUNCTION;
      assertEquals("Function", databaseObjectType0.toString());
      assertEquals("Function", databaseObjectType0.getKeyForSerializationReplace());
      assertEquals("Function", databaseObjectType0.getName());
      assertNotNull(databaseObjectType0);
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals(")J,@',V^}iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals("", databaseObjectInfo0.toString());
      assertEquals("Function", databaseObjectType0.toString());
      assertEquals("Function", databaseObjectType0.getKeyForSerializationReplace());
      assertEquals("Function", databaseObjectType0.getName());
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals(")J,@',V^}iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals("", databaseObjectInfo0.toString());
      assertEquals("Function", databaseObjectType0.toString());
      assertEquals("Function", databaseObjectType0.getKeyForSerializationReplace());
      assertEquals("Function", databaseObjectType0.getName());
      
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType0));
      assertNotSame(databaseObjectType1, databaseObjectType0);
      assertEquals("Synonym Type", databaseObjectType1.getName());
      assertEquals("Synonym Type", databaseObjectType1.toString());
      assertEquals("Synonym Type", databaseObjectType1.getKeyForSerializationReplace());
      assertNotNull(databaseObjectType1);
      
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType("");
      assertFalse(databaseObjectType2.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType2.equals((Object)databaseObjectType1));
      assertNotSame(databaseObjectType2, databaseObjectType0);
      assertNotSame(databaseObjectType2, databaseObjectType1);
      assertEquals("", databaseObjectType2.toString());
      assertEquals("", databaseObjectType2.getKeyForSerializationReplace());
      assertEquals("", databaseObjectType2.getName());
      assertNotNull(databaseObjectType2);
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType0));
      assertNotSame(databaseObjectType1, databaseObjectType2);
      assertNotSame(databaseObjectType1, databaseObjectType0);
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals(")J,@',V^}iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals("", databaseObjectInfo0.toString());
      assertEquals("Synonym Type", databaseObjectType1.getName());
      assertEquals("Synonym Type", databaseObjectType1.toString());
      assertEquals("Synonym Type", databaseObjectType1.getKeyForSerializationReplace());
      
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.UDF_TYPE_DBO;
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType2));
      assertNotSame(databaseObjectType3, databaseObjectType0);
      assertNotSame(databaseObjectType3, databaseObjectType1);
      assertNotSame(databaseObjectType3, databaseObjectType2);
      assertEquals("UDF Type", databaseObjectType3.getName());
      assertEquals("UDF Type", databaseObjectType3.toString());
      assertEquals("UDF Type", databaseObjectType3.getKeyForSerializationReplace());
      assertNotNull(databaseObjectType3);
      
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.createNewDatabaseObjectType("http://www.squirrelsql.org");
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType3));
      assertNotSame(databaseObjectType4, databaseObjectType2);
      assertNotSame(databaseObjectType4, databaseObjectType1);
      assertNotSame(databaseObjectType4, databaseObjectType0);
      assertNotSame(databaseObjectType4, databaseObjectType3);
      assertEquals("http://www.squirrelsql.org", databaseObjectType4.getName());
      assertEquals("http://www.squirrelsql.org", databaseObjectType4.getKeyForSerializationReplace());
      assertEquals("http://www.squirrelsql.org", databaseObjectType4.toString());
      assertNotNull(databaseObjectType4);
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      assertFalse(databaseObjectType0.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType0.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType0.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType0.equals((Object)databaseObjectType2));
      assertNotSame(databaseObjectType0, databaseObjectType3);
      assertNotSame(databaseObjectType0, databaseObjectType1);
      assertNotSame(databaseObjectType0, databaseObjectType4);
      assertNotSame(databaseObjectType0, databaseObjectType2);
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals(")J,@',V^}iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals("", databaseObjectInfo0.toString());
      assertEquals("Function", databaseObjectType0.toString());
      assertEquals("Function", databaseObjectType0.getKeyForSerializationReplace());
      assertEquals("Function", databaseObjectType0.getName());
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals(")J,@',V^}iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals("", databaseObjectInfo0.toString());
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("http://www.squirrelsql.org", ")J,@',V^}iw", "http://www.squirrelsql.org", "z&JxWU-b/", (-350), (String) null, (-2067947214), 1434, (-1610612734), 2001, "%\"~@\"An:", "addToPopupMenu", (-980), 1434, "http://www.squirrelsql.org");
      assertEquals("%\"~@\"An:", tableColumnInfo0.getRemarks());
      assertEquals((-350), tableColumnInfo0.getDataType());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getQualifiedName());
      assertEquals(2001, tableColumnInfo0.isNullAllowed());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.toString());
      assertEquals("addToPopupMenu", tableColumnInfo0.getDefaultValue());
      assertEquals((-1610612734), tableColumnInfo0.getRadix());
      assertEquals("z&JxWU-b/", tableColumnInfo0.getColumnName());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getTableName());
      assertEquals((-980), tableColumnInfo0.getOctetLength());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getCatalogName());
      assertEquals(1434, tableColumnInfo0.getDecimalDigits());
      assertNull(tableColumnInfo0.getTypeName());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getSimpleName());
      assertEquals(1434, tableColumnInfo0.getOrdinalPosition());
      assertEquals(")J,@',V^}iw", tableColumnInfo0.getSchemaName());
      assertEquals((-2067947214), tableColumnInfo0.getColumnSize());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.isNullable());
      assertNotNull(tableColumnInfo0);
      
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType2));
      assertNotSame(databaseObjectType3, databaseObjectType0);
      assertNotSame(databaseObjectType3, databaseObjectType4);
      assertNotSame(databaseObjectType3, databaseObjectType1);
      assertNotSame(databaseObjectType3, databaseObjectType2);
      assertEquals("UDF Type", databaseObjectType3.getName());
      assertEquals("UDF Type", databaseObjectType3.toString());
      assertEquals("UDF Type", databaseObjectType3.getKeyForSerializationReplace());
      assertEquals("%\"~@\"An:", tableColumnInfo0.getRemarks());
      assertEquals((-350), tableColumnInfo0.getDataType());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getQualifiedName());
      assertEquals(2001, tableColumnInfo0.isNullAllowed());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.toString());
      assertEquals("addToPopupMenu", tableColumnInfo0.getDefaultValue());
      assertEquals((-1610612734), tableColumnInfo0.getRadix());
      assertEquals("z&JxWU-b/", tableColumnInfo0.getColumnName());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getTableName());
      assertEquals((-980), tableColumnInfo0.getOctetLength());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getCatalogName());
      assertEquals(1434, tableColumnInfo0.getDecimalDigits());
      assertNull(tableColumnInfo0.getTypeName());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getSimpleName());
      assertEquals(1434, tableColumnInfo0.getOrdinalPosition());
      assertEquals(")J,@',V^}iw", tableColumnInfo0.getSchemaName());
      assertEquals((-2067947214), tableColumnInfo0.getColumnSize());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.isNullable());
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertNotNull(dBCopyPlugin0);
      
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType0));
      assertNotSame(databaseObjectType1, databaseObjectType2);
      assertNotSame(databaseObjectType1, databaseObjectType3);
      assertNotSame(databaseObjectType1, databaseObjectType4);
      assertNotSame(databaseObjectType1, databaseObjectType0);
      assertEquals("Synonym Type", databaseObjectType1.getName());
      assertEquals("Synonym Type", databaseObjectType1.toString());
      assertEquals("Synonym Type", databaseObjectType1.getKeyForSerializationReplace());
      assertEquals("%\"~@\"An:", tableColumnInfo0.getRemarks());
      assertEquals((-350), tableColumnInfo0.getDataType());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getQualifiedName());
      assertEquals(2001, tableColumnInfo0.isNullAllowed());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.toString());
      assertEquals("addToPopupMenu", tableColumnInfo0.getDefaultValue());
      assertEquals((-1610612734), tableColumnInfo0.getRadix());
      assertEquals("z&JxWU-b/", tableColumnInfo0.getColumnName());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getTableName());
      assertEquals((-980), tableColumnInfo0.getOctetLength());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getCatalogName());
      assertEquals(1434, tableColumnInfo0.getDecimalDigits());
      assertNull(tableColumnInfo0.getTypeName());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getSimpleName());
      assertEquals(1434, tableColumnInfo0.getOrdinalPosition());
      assertEquals(")J,@',V^}iw", tableColumnInfo0.getSchemaName());
      assertEquals((-2067947214), tableColumnInfo0.getColumnSize());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.isNullable());
      
      // Undeclared exception!
      try { 
        DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(iSession0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[3];
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "2G", "U`%0BcO,2", "Cr<!*JUpJ)75u4d!", (-102), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-102), (-2123), (-2123), (-102), "U`%0BcO,2", "+`", 16, 184, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      assertEquals("+`", tableColumnInfo0.getDefaultValue());
      assertEquals((-2123), tableColumnInfo0.getDecimalDigits());
      assertEquals("2G", tableColumnInfo0.getSchemaName());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.isNullable());
      assertEquals((-102), tableColumnInfo0.getColumnSize());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getTypeName());
      assertEquals("U`%0BcO,2", tableColumnInfo0.getSimpleName());
      assertEquals("Cr<!*JUpJ)75u4d!", tableColumnInfo0.getColumnName());
      assertEquals((-2123), tableColumnInfo0.getRadix());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getCatalogName());
      assertEquals(184, tableColumnInfo0.getOrdinalPosition());
      assertEquals("U`%0BcO,2", tableColumnInfo0.toString());
      assertEquals((-102), tableColumnInfo0.isNullAllowed());
      assertEquals((-102), tableColumnInfo0.getDataType());
      assertEquals("U`%0BcO,2", tableColumnInfo0.getRemarks());
      assertEquals("U`%0BcO,2", tableColumnInfo0.getQualifiedName());
      assertEquals("U`%0BcO,2", tableColumnInfo0.getTableName());
      assertEquals(16, tableColumnInfo0.getOctetLength());
      assertNotNull(tableColumnInfo0);
      
      tableColumnInfoArray0[0] = tableColumnInfo0;
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("2G", "gnhcA>", "+`", (String) null, (-102), "7Gy1XI20o&", 2103, 16, 16, (-102), "Sr%MxUI[oX\"f==", "T", 16, 16, "+`");
      assertFalse(tableColumnInfo1.equals((Object)tableColumnInfo0));
      assertEquals("+`", tableColumnInfo1.getQualifiedName());
      assertEquals(16, tableColumnInfo1.getOrdinalPosition());
      assertEquals("+`", tableColumnInfo1.toString());
      assertEquals((-102), tableColumnInfo1.isNullAllowed());
      assertEquals((-102), tableColumnInfo1.getDataType());
      assertEquals("gnhcA>", tableColumnInfo1.getSchemaName());
      assertEquals("Sr%MxUI[oX\"f==", tableColumnInfo1.getRemarks());
      assertEquals("+`", tableColumnInfo1.getTableName());
      assertNull(tableColumnInfo1.getColumnName());
      assertEquals(2103, tableColumnInfo1.getColumnSize());
      assertEquals("T", tableColumnInfo1.getDefaultValue());
      assertEquals("2G", tableColumnInfo1.getCatalogName());
      assertEquals(16, tableColumnInfo1.getDecimalDigits());
      assertEquals("+`", tableColumnInfo1.isNullable());
      assertEquals(16, tableColumnInfo1.getRadix());
      assertEquals("7Gy1XI20o&", tableColumnInfo1.getTypeName());
      assertEquals("+`", tableColumnInfo1.getSimpleName());
      assertEquals(16, tableColumnInfo1.getOctetLength());
      assertNotNull(tableColumnInfo1);
      
      tableColumnInfoArray0[1] = tableColumnInfo1;
      String string0 = DBUtil.fixCase((ISession) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertNull(iSession0);
      
      String string0 = DBUtil.fixCase((ISession) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, 2553);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      // Undeclared exception!
      try { 
        DBUtil.getMaxColumnLengthSQL((ISession) null, (TableColumnInfo) null, "fev'A", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNotNull(dBCopyPlugin0);
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("http://www.squirrelsql.org", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (String) null, "JY", 1007, "http://www.squirrelsql.org", (-245), 1007, 626, 1007, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "6`QS<i)=7N;~p~1kp2", (-1610612757), 1007, "");
      assertEquals(1007, tableColumnInfo0.getOrdinalPosition());
      assertEquals(1007, tableColumnInfo0.isNullAllowed());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getTypeName());
      assertEquals(626, tableColumnInfo0.getRadix());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getSchemaName());
      assertNull(tableColumnInfo0.getSimpleName());
      assertNull(tableColumnInfo0.toString());
      assertEquals("", tableColumnInfo0.isNullable());
      assertEquals(1007, tableColumnInfo0.getDataType());
      assertEquals((-245), tableColumnInfo0.getColumnSize());
      assertNull(tableColumnInfo0.getQualifiedName());
      assertEquals(1007, tableColumnInfo0.getDecimalDigits());
      assertEquals("JY", tableColumnInfo0.getColumnName());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getRemarks());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getCatalogName());
      assertNull(tableColumnInfo0.getTableName());
      assertEquals((-1610612757), tableColumnInfo0.getOctetLength());
      assertEquals("6`QS<i)=7N;~p~1kp2", tableColumnInfo0.getDefaultValue());
      assertNotNull(tableColumnInfo0);
      
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      assertFalse(dBCopyPlugin1.equals((Object)dBCopyPlugin0));
      assertEquals("Dan Dragut", dBCopyPlugin1.getContributors());
      assertEquals("license.txt", dBCopyPlugin1.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin1.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin1.getInternalName());
      assertEquals("readme.html", dBCopyPlugin1.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin1.getDescriptiveName());
      assertFalse(dBCopyPlugin1.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin1.getPasteToTableName());
      assertEquals("1.15", dBCopyPlugin1.getVersion());
      assertEquals("changes.txt", dBCopyPlugin1.getChangeLogFileName());
      assertNotNull(dBCopyPlugin1);
      
      dBCopyPlugin1.unload();
      assertFalse(dBCopyPlugin1.equals((Object)dBCopyPlugin0));
      assertNotSame(dBCopyPlugin1, dBCopyPlugin0);
      assertEquals("Dan Dragut", dBCopyPlugin1.getContributors());
      assertEquals("license.txt", dBCopyPlugin1.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin1.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin1.getInternalName());
      assertEquals("readme.html", dBCopyPlugin1.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin1.getDescriptiveName());
      assertFalse(dBCopyPlugin1.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin1.getPasteToTableName());
      assertEquals("1.15", dBCopyPlugin1.getVersion());
      assertEquals("changes.txt", dBCopyPlugin1.getChangeLogFileName());
      
      ISession iSession0 = dBCopyPlugin1.getSourceSession();
      assertFalse(dBCopyPlugin1.equals((Object)dBCopyPlugin0));
      assertNotSame(dBCopyPlugin1, dBCopyPlugin0);
      assertEquals("Dan Dragut", dBCopyPlugin1.getContributors());
      assertEquals("license.txt", dBCopyPlugin1.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin1.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin1.getInternalName());
      assertEquals("readme.html", dBCopyPlugin1.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin1.getDescriptiveName());
      assertFalse(dBCopyPlugin1.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin1.getPasteToTableName());
      assertEquals("1.15", dBCopyPlugin1.getVersion());
      assertEquals("changes.txt", dBCopyPlugin1.getChangeLogFileName());
      assertNull(iSession0);
      
      ISession iSession1 = dBCopyPlugin1.getSourceSession();
      assertFalse(dBCopyPlugin1.equals((Object)dBCopyPlugin0));
      assertNotSame(dBCopyPlugin1, dBCopyPlugin0);
      assertEquals("Dan Dragut", dBCopyPlugin1.getContributors());
      assertEquals("license.txt", dBCopyPlugin1.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin1.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin1.getInternalName());
      assertEquals("readme.html", dBCopyPlugin1.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin1.getDescriptiveName());
      assertFalse(dBCopyPlugin1.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin1.getPasteToTableName());
      assertEquals("1.15", dBCopyPlugin1.getVersion());
      assertEquals("changes.txt", dBCopyPlugin1.getChangeLogFileName());
      assertNull(iSession1);
      
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(1007, int0);
      assertEquals(1007, tableColumnInfo0.getOrdinalPosition());
      assertEquals(1007, tableColumnInfo0.isNullAllowed());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getTypeName());
      assertEquals(626, tableColumnInfo0.getRadix());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getSchemaName());
      assertNull(tableColumnInfo0.getSimpleName());
      assertNull(tableColumnInfo0.toString());
      assertEquals("", tableColumnInfo0.isNullable());
      assertEquals(1007, tableColumnInfo0.getDataType());
      assertEquals((-245), tableColumnInfo0.getColumnSize());
      assertNull(tableColumnInfo0.getQualifiedName());
      assertEquals(1007, tableColumnInfo0.getDecimalDigits());
      assertEquals("JY", tableColumnInfo0.getColumnName());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getRemarks());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getCatalogName());
      assertNull(tableColumnInfo0.getTableName());
      assertEquals((-1610612757), tableColumnInfo0.getOctetLength());
      assertEquals("6`QS<i)=7N;~p~1kp2", tableColumnInfo0.getDefaultValue());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertNotNull(dBCopyPlugin0);
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("JY", "", "HL8", (String) null, 2003, "w1\"EMU3/E5E?;0q_A", 0, 0, 3, 1003, "&'&h23T|0 v", "eh'wp7Y<$FX5VH)", (-824), (-2600), "http://www.squirrelsql.org");
      assertEquals(2003, tableColumnInfo0.getDataType());
      assertEquals(1003, tableColumnInfo0.isNullAllowed());
      assertEquals((-824), tableColumnInfo0.getOctetLength());
      assertEquals("JY", tableColumnInfo0.getCatalogName());
      assertEquals(0, tableColumnInfo0.getColumnSize());
      assertEquals(0, tableColumnInfo0.getDecimalDigits());
      assertEquals("eh'wp7Y<$FX5VH)", tableColumnInfo0.getDefaultValue());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.isNullable());
      assertEquals("HL8", tableColumnInfo0.getTableName());
      assertEquals("w1\"EMU3/E5E?;0q_A", tableColumnInfo0.getTypeName());
      assertEquals((-2600), tableColumnInfo0.getOrdinalPosition());
      assertEquals("HL8", tableColumnInfo0.getQualifiedName());
      assertEquals(3, tableColumnInfo0.getRadix());
      assertEquals("HL8", tableColumnInfo0.toString());
      assertEquals("", tableColumnInfo0.getSchemaName());
      assertEquals("HL8", tableColumnInfo0.getSimpleName());
      assertNull(tableColumnInfo0.getColumnName());
      assertEquals("&'&h23T|0 v", tableColumnInfo0.getRemarks());
      assertNotNull(tableColumnInfo0);
      
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      assertFalse(dBCopyPlugin1.equals((Object)dBCopyPlugin0));
      assertEquals("1.15", dBCopyPlugin1.getVersion());
      assertEquals("dbcopy", dBCopyPlugin1.getInternalName());
      assertEquals("Dan Dragut", dBCopyPlugin1.getContributors());
      assertFalse(dBCopyPlugin1.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin1.getPasteToTableName());
      assertEquals("readme.html", dBCopyPlugin1.getHelpFileName());
      assertEquals("changes.txt", dBCopyPlugin1.getChangeLogFileName());
      assertEquals("Rob Manning", dBCopyPlugin1.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin1.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin1.getLicenceFileName());
      assertNotNull(dBCopyPlugin1);
      
      dBCopyPlugin0.unload();
      assertFalse(dBCopyPlugin0.equals((Object)dBCopyPlugin1));
      assertNotSame(dBCopyPlugin0, dBCopyPlugin1);
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      
      ISession iSession0 = dBCopyPlugin1.getSourceSession();
      assertFalse(dBCopyPlugin1.equals((Object)dBCopyPlugin0));
      assertNotSame(dBCopyPlugin1, dBCopyPlugin0);
      assertEquals("1.15", dBCopyPlugin1.getVersion());
      assertEquals("dbcopy", dBCopyPlugin1.getInternalName());
      assertEquals("Dan Dragut", dBCopyPlugin1.getContributors());
      assertFalse(dBCopyPlugin1.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin1.getPasteToTableName());
      assertEquals("readme.html", dBCopyPlugin1.getHelpFileName());
      assertEquals("changes.txt", dBCopyPlugin1.getChangeLogFileName());
      assertEquals("Rob Manning", dBCopyPlugin1.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin1.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin1.getLicenceFileName());
      assertNull(iSession0);
      
      ISession iSession1 = dBCopyPlugin0.getSourceSession();
      assertFalse(dBCopyPlugin0.equals((Object)dBCopyPlugin1));
      assertNotSame(dBCopyPlugin0, dBCopyPlugin1);
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertNull(iSession1);
      
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(2003, int0);
      assertEquals(2003, tableColumnInfo0.getDataType());
      assertEquals(1003, tableColumnInfo0.isNullAllowed());
      assertEquals((-824), tableColumnInfo0.getOctetLength());
      assertEquals("JY", tableColumnInfo0.getCatalogName());
      assertEquals(0, tableColumnInfo0.getColumnSize());
      assertEquals(0, tableColumnInfo0.getDecimalDigits());
      assertEquals("eh'wp7Y<$FX5VH)", tableColumnInfo0.getDefaultValue());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.isNullable());
      assertEquals("HL8", tableColumnInfo0.getTableName());
      assertEquals("w1\"EMU3/E5E?;0q_A", tableColumnInfo0.getTypeName());
      assertEquals((-2600), tableColumnInfo0.getOrdinalPosition());
      assertEquals("HL8", tableColumnInfo0.getQualifiedName());
      assertEquals(3, tableColumnInfo0.getRadix());
      assertEquals("HL8", tableColumnInfo0.toString());
      assertEquals("", tableColumnInfo0.getSchemaName());
      assertEquals("HL8", tableColumnInfo0.getSimpleName());
      assertNull(tableColumnInfo0.getColumnName());
      assertEquals("&'&h23T|0 v", tableColumnInfo0.getRemarks());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("", "DBUtil.info.bindblobmem", "),@',V^4iw");
      assertEquals("DBUtil.info.bindblobmem", databaseObjectInfo0.getSchemaName());
      assertEquals("),@',V^4iw", databaseObjectInfo0.getQualifiedName());
      assertEquals("),@',V^4iw", databaseObjectInfo0.toString());
      assertEquals("),@',V^4iw", databaseObjectInfo0.getSimpleName());
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertNotNull(databaseObjectInfo0);
      
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      assertEquals("Synonym Type", databaseObjectType0.getKeyForSerializationReplace());
      assertEquals("Synonym Type", databaseObjectType0.toString());
      assertEquals("Synonym Type", databaseObjectType0.getName());
      assertNotNull(databaseObjectType0);
      
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("),@',V^4iw");
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType0));
      assertNotSame(databaseObjectType1, databaseObjectType0);
      assertEquals("),@',V^4iw", databaseObjectType1.getName());
      assertEquals("),@',V^4iw", databaseObjectType1.getKeyForSerializationReplace());
      assertEquals("),@',V^4iw", databaseObjectType1.toString());
      assertNotNull(databaseObjectType1);
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType0));
      assertNotSame(databaseObjectType1, databaseObjectType0);
      assertEquals("DBUtil.info.bindblobmem", databaseObjectInfo0.getSchemaName());
      assertEquals("),@',V^4iw", databaseObjectInfo0.getQualifiedName());
      assertEquals("),@',V^4iw", databaseObjectInfo0.toString());
      assertEquals("),@',V^4iw", databaseObjectInfo0.getSimpleName());
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals("),@',V^4iw", databaseObjectType1.getName());
      assertEquals("),@',V^4iw", databaseObjectType1.getKeyForSerializationReplace());
      assertEquals("),@',V^4iw", databaseObjectType1.toString());
      
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.FUNCTION;
      assertFalse(databaseObjectType2.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType2.equals((Object)databaseObjectType1));
      assertNotSame(databaseObjectType2, databaseObjectType0);
      assertNotSame(databaseObjectType2, databaseObjectType1);
      assertEquals("Function", databaseObjectType2.getKeyForSerializationReplace());
      assertEquals("Function", databaseObjectType2.getName());
      assertEquals("Function", databaseObjectType2.toString());
      assertNotNull(databaseObjectType2);
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      assertFalse(databaseObjectType2.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType2.equals((Object)databaseObjectType1));
      assertNotSame(databaseObjectType2, databaseObjectType0);
      assertNotSame(databaseObjectType2, databaseObjectType1);
      assertEquals("DBUtil.info.bindblobmem", databaseObjectInfo0.getSchemaName());
      assertEquals("),@',V^4iw", databaseObjectInfo0.getQualifiedName());
      assertEquals("),@',V^4iw", databaseObjectInfo0.toString());
      assertEquals("),@',V^4iw", databaseObjectInfo0.getSimpleName());
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals("Function", databaseObjectType2.getKeyForSerializationReplace());
      assertEquals("Function", databaseObjectType2.getName());
      assertEquals("Function", databaseObjectType2.toString());
      
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.UDF_TYPE_DBO;
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType2));
      assertNotSame(databaseObjectType3, databaseObjectType1);
      assertNotSame(databaseObjectType3, databaseObjectType0);
      assertNotSame(databaseObjectType3, databaseObjectType2);
      assertEquals("UDF Type", databaseObjectType3.getName());
      assertEquals("UDF Type", databaseObjectType3.toString());
      assertEquals("UDF Type", databaseObjectType3.getKeyForSerializationReplace());
      assertNotNull(databaseObjectType3);
      
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.createNewDatabaseObjectType("Skipping FK (");
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType1));
      assertNotSame(databaseObjectType4, databaseObjectType2);
      assertNotSame(databaseObjectType4, databaseObjectType0);
      assertNotSame(databaseObjectType4, databaseObjectType3);
      assertNotSame(databaseObjectType4, databaseObjectType1);
      assertEquals("Skipping FK (", databaseObjectType4.getKeyForSerializationReplace());
      assertEquals("Skipping FK (", databaseObjectType4.toString());
      assertEquals("Skipping FK (", databaseObjectType4.getName());
      assertNotNull(databaseObjectType4);
      
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.createNewDatabaseObjectType((String) null);
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType2));
      assertNotSame(databaseObjectType5, databaseObjectType0);
      assertNotSame(databaseObjectType5, databaseObjectType4);
      assertNotSame(databaseObjectType5, databaseObjectType1);
      assertNotSame(databaseObjectType5, databaseObjectType3);
      assertNotSame(databaseObjectType5, databaseObjectType2);
      assertNull(databaseObjectType5.getKeyForSerializationReplace());
      assertNotNull(databaseObjectType5);
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      assertFalse(databaseObjectType0.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType0.equals((Object)databaseObjectType5));
      assertFalse(databaseObjectType0.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType0.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType0.equals((Object)databaseObjectType1));
      assertNotSame(databaseObjectType0, databaseObjectType4);
      assertNotSame(databaseObjectType0, databaseObjectType5);
      assertNotSame(databaseObjectType0, databaseObjectType2);
      assertNotSame(databaseObjectType0, databaseObjectType3);
      assertNotSame(databaseObjectType0, databaseObjectType1);
      assertEquals("DBUtil.info.bindblobmem", databaseObjectInfo0.getSchemaName());
      assertEquals("),@',V^4iw", databaseObjectInfo0.getQualifiedName());
      assertEquals("),@',V^4iw", databaseObjectInfo0.toString());
      assertEquals("),@',V^4iw", databaseObjectInfo0.getSimpleName());
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals("Synonym Type", databaseObjectType0.getKeyForSerializationReplace());
      assertEquals("Synonym Type", databaseObjectType0.toString());
      assertEquals("Synonym Type", databaseObjectType0.getName());
      
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.createNewDatabaseObjectType("http://www.squirrelsql.org");
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType5));
      assertNotSame(databaseObjectType6, databaseObjectType3);
      assertNotSame(databaseObjectType6, databaseObjectType2);
      assertNotSame(databaseObjectType6, databaseObjectType1);
      assertNotSame(databaseObjectType6, databaseObjectType0);
      assertNotSame(databaseObjectType6, databaseObjectType4);
      assertNotSame(databaseObjectType6, databaseObjectType5);
      assertEquals("http://www.squirrelsql.org", databaseObjectType6.getKeyForSerializationReplace());
      assertEquals("http://www.squirrelsql.org", databaseObjectType6.getName());
      assertEquals("http://www.squirrelsql.org", databaseObjectType6.toString());
      assertNotNull(databaseObjectType6);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertNotNull(dBCopyPlugin0);
      
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      assertNotNull(fileWrapperFactoryImpl0);
      
      FileWrapper fileWrapper0 = fileWrapperFactoryImpl0.create("),@',V^4iw");
      assertFalse(fileWrapper0.exists());
      assertEquals(0L, fileWrapper0.length());
      assertFalse(fileWrapper0.isDirectory());
      assertEquals("),@',V^4iw", fileWrapper0.getName());
      assertEquals("),@',V^4iw", fileWrapper0.toString());
      assertEquals("),@',V^4iw", fileWrapper0.getPath());
      assertNull(fileWrapper0.getParent());
      assertFalse(fileWrapper0.canWrite());
      assertTrue(fileWrapper0.isFile());
      assertFalse(fileWrapper0.isHidden());
      assertFalse(fileWrapper0.canRead());
      assertEquals(0L, fileWrapper0.lastModified());
      assertFalse(fileWrapper0.isAbsolute());
      assertNotNull(fileWrapper0);
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      assertEquals("DBUtil.info.bindblobmem", databaseObjectInfo0.getSchemaName());
      assertEquals("),@',V^4iw", databaseObjectInfo0.getQualifiedName());
      assertEquals("),@',V^4iw", databaseObjectInfo0.toString());
      assertEquals("),@',V^4iw", databaseObjectInfo0.getSimpleName());
      assertEquals("", databaseObjectInfo0.getCatalogName());
      
      DatabaseObjectType databaseObjectType7 = DatabaseObjectType.createNewDatabaseObjectType("DBUtil.info.bindblobmem");
      assertFalse(databaseObjectType7.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType7.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType7.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType7.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType7.equals((Object)databaseObjectType5));
      assertFalse(databaseObjectType7.equals((Object)databaseObjectType6));
      assertFalse(databaseObjectType7.equals((Object)databaseObjectType2));
      assertNotSame(databaseObjectType7, databaseObjectType1);
      assertNotSame(databaseObjectType7, databaseObjectType3);
      assertNotSame(databaseObjectType7, databaseObjectType0);
      assertNotSame(databaseObjectType7, databaseObjectType4);
      assertNotSame(databaseObjectType7, databaseObjectType5);
      assertNotSame(databaseObjectType7, databaseObjectType6);
      assertNotSame(databaseObjectType7, databaseObjectType2);
      assertEquals("DBUtil.info.bindblobmem", databaseObjectType7.getName());
      assertEquals("DBUtil.info.bindblobmem", databaseObjectType7.getKeyForSerializationReplace());
      assertEquals("DBUtil.info.bindblobmem", databaseObjectType7.toString());
      assertNotNull(databaseObjectType7);
      
      IApplication iApplication0 = dBCopyPlugin0.getApplication();
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertNull(iApplication0);
      
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      assertEquals(2, SchemaInfo.TABLE_EXT_COLS_LOADED_BEFORE);
      assertEquals(0, SchemaInfo.TABLE_EXT_NOT_A_TABLE);
      assertEquals(1, SchemaInfo.TABLE_EXT_COLS_LOADED_IN_THIS_CALL);
      assertFalse(schemaInfo0.isLoaded());
      assertNotNull(schemaInfo0);
      
      SchemaInfo schemaInfo1 = new SchemaInfo((IApplication) null);
      assertFalse(schemaInfo1.equals((Object)schemaInfo0));
      assertEquals(2, SchemaInfo.TABLE_EXT_COLS_LOADED_BEFORE);
      assertEquals(1, SchemaInfo.TABLE_EXT_COLS_LOADED_IN_THIS_CALL);
      assertEquals(0, SchemaInfo.TABLE_EXT_NOT_A_TABLE);
      assertFalse(schemaInfo1.isLoaded());
      assertNotNull(schemaInfo1);
      
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(databaseObjectInfo0, schemaInfo1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("", "),@',V^4iw", "");
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("),@',V^4iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals("", databaseObjectInfo0.toString());
      assertNotNull(databaseObjectInfo0);
      
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.createNewDatabaseObjectType("),@',V^4iw");
      assertEquals("),@',V^4iw", databaseObjectType0.getKeyForSerializationReplace());
      assertEquals("),@',V^4iw", databaseObjectType0.getName());
      assertEquals("),@',V^4iw", databaseObjectType0.toString());
      assertNotNull(databaseObjectType0);
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("),@',V^4iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals("", databaseObjectInfo0.toString());
      assertEquals("),@',V^4iw", databaseObjectType0.getKeyForSerializationReplace());
      assertEquals("),@',V^4iw", databaseObjectType0.getName());
      assertEquals("),@',V^4iw", databaseObjectType0.toString());
      
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.FUNCTION;
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType0));
      assertNotSame(databaseObjectType1, databaseObjectType0);
      assertEquals("Function", databaseObjectType1.getName());
      assertEquals("Function", databaseObjectType1.getKeyForSerializationReplace());
      assertEquals("Function", databaseObjectType1.toString());
      assertNotNull(databaseObjectType1);
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType0));
      assertNotSame(databaseObjectType1, databaseObjectType0);
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("),@',V^4iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals("", databaseObjectInfo0.toString());
      assertEquals("Function", databaseObjectType1.getName());
      assertEquals("Function", databaseObjectType1.getKeyForSerializationReplace());
      assertEquals("Function", databaseObjectType1.toString());
      
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.FUNCTION;
      assertFalse(databaseObjectType2.equals((Object)databaseObjectType0));
      assertSame(databaseObjectType2, databaseObjectType1);
      assertNotSame(databaseObjectType2, databaseObjectType0);
      assertEquals("Function", databaseObjectType2.getKeyForSerializationReplace());
      assertEquals("Function", databaseObjectType2.toString());
      assertEquals("Function", databaseObjectType2.getName());
      assertNotNull(databaseObjectType2);
      
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.TABLE;
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType1));
      assertNotSame(databaseObjectType3, databaseObjectType2);
      assertNotSame(databaseObjectType3, databaseObjectType0);
      assertNotSame(databaseObjectType3, databaseObjectType1);
      assertEquals("Table", databaseObjectType3.getName());
      assertEquals("Table", databaseObjectType3.toString());
      assertEquals("Table", databaseObjectType3.getKeyForSerializationReplace());
      assertNotNull(databaseObjectType3);
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType1));
      assertNotSame(databaseObjectType3, databaseObjectType2);
      assertNotSame(databaseObjectType3, databaseObjectType0);
      assertNotSame(databaseObjectType3, databaseObjectType1);
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("),@',V^4iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals("", databaseObjectInfo0.toString());
      assertEquals("Table", databaseObjectType3.getName());
      assertEquals("Table", databaseObjectType3.toString());
      assertEquals("Table", databaseObjectType3.getKeyForSerializationReplace());
      
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.UDF_TYPE_DBO;
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType0));
      assertNotSame(databaseObjectType4, databaseObjectType2);
      assertNotSame(databaseObjectType4, databaseObjectType1);
      assertNotSame(databaseObjectType4, databaseObjectType3);
      assertNotSame(databaseObjectType4, databaseObjectType0);
      assertEquals("UDF Type", databaseObjectType4.getName());
      assertEquals("UDF Type", databaseObjectType4.getKeyForSerializationReplace());
      assertEquals("UDF Type", databaseObjectType4.toString());
      assertNotNull(databaseObjectType4);
      
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.createNewDatabaseObjectType((String) null);
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType4));
      assertNotSame(databaseObjectType5, databaseObjectType0);
      assertNotSame(databaseObjectType5, databaseObjectType1);
      assertNotSame(databaseObjectType5, databaseObjectType3);
      assertNotSame(databaseObjectType5, databaseObjectType2);
      assertNotSame(databaseObjectType5, databaseObjectType4);
      assertNull(databaseObjectType5.getKeyForSerializationReplace());
      assertNotNull(databaseObjectType5);
      
      ImageIcon imageIcon0 = new ImageIcon("),@',V^4iw");
      assertNotNull(imageIcon0);
      
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.createNewDatabaseObjectType("opteV)%soqk5#+K/", (Icon) imageIcon0);
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType5));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType0));
      assertNotSame(databaseObjectType6, databaseObjectType5);
      assertNotSame(databaseObjectType6, databaseObjectType1);
      assertNotSame(databaseObjectType6, databaseObjectType3);
      assertNotSame(databaseObjectType6, databaseObjectType4);
      assertNotSame(databaseObjectType6, databaseObjectType2);
      assertNotSame(databaseObjectType6, databaseObjectType0);
      assertEquals("opteV)%soqk5#+K/", databaseObjectType6.getKeyForSerializationReplace());
      assertEquals("opteV)%soqk5#+K/", databaseObjectType6.getName());
      assertEquals("opteV)%soqk5#+K/", databaseObjectType6.toString());
      assertNotNull(databaseObjectType6);
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType5);
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType6));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType4));
      assertNotSame(databaseObjectType5, databaseObjectType0);
      assertNotSame(databaseObjectType5, databaseObjectType1);
      assertNotSame(databaseObjectType5, databaseObjectType6);
      assertNotSame(databaseObjectType5, databaseObjectType3);
      assertNotSame(databaseObjectType5, databaseObjectType2);
      assertNotSame(databaseObjectType5, databaseObjectType4);
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("),@',V^4iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals("", databaseObjectInfo0.toString());
      assertNull(databaseObjectType5.getKeyForSerializationReplace());
      
      DatabaseObjectType databaseObjectType7 = DatabaseObjectType.createNewDatabaseObjectType("long varchar byte");
      assertFalse(databaseObjectType7.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType7.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType7.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType7.equals((Object)databaseObjectType6));
      assertFalse(databaseObjectType7.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType7.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType7.equals((Object)databaseObjectType5));
      assertNotSame(databaseObjectType7, databaseObjectType2);
      assertNotSame(databaseObjectType7, databaseObjectType0);
      assertNotSame(databaseObjectType7, databaseObjectType1);
      assertNotSame(databaseObjectType7, databaseObjectType6);
      assertNotSame(databaseObjectType7, databaseObjectType3);
      assertNotSame(databaseObjectType7, databaseObjectType4);
      assertNotSame(databaseObjectType7, databaseObjectType5);
      assertEquals("long varchar byte", databaseObjectType7.toString());
      assertEquals("long varchar byte", databaseObjectType7.getName());
      assertEquals("long varchar byte", databaseObjectType7.getKeyForSerializationReplace());
      assertNotNull(databaseObjectType7);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertNotNull(dBCopyPlugin0);
      
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      assertNotNull(fileWrapperFactoryImpl0);
      
      DatabaseObjectType databaseObjectType8 = DatabaseObjectType.FOREIGN_KEY;
      assertFalse(databaseObjectType8.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType8.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType8.equals((Object)databaseObjectType7));
      assertFalse(databaseObjectType8.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType8.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType8.equals((Object)databaseObjectType5));
      assertFalse(databaseObjectType8.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType8.equals((Object)databaseObjectType6));
      assertNotSame(databaseObjectType8, databaseObjectType3);
      assertNotSame(databaseObjectType8, databaseObjectType2);
      assertNotSame(databaseObjectType8, databaseObjectType7);
      assertNotSame(databaseObjectType8, databaseObjectType1);
      assertNotSame(databaseObjectType8, databaseObjectType4);
      assertNotSame(databaseObjectType8, databaseObjectType5);
      assertNotSame(databaseObjectType8, databaseObjectType0);
      assertNotSame(databaseObjectType8, databaseObjectType6);
      assertEquals("ForeignKey", databaseObjectType8.getKeyForSerializationReplace());
      assertEquals("ForeignKey", databaseObjectType8.getName());
      assertEquals("ForeignKey", databaseObjectType8.toString());
      assertNotNull(databaseObjectType8);
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType8);
      assertFalse(databaseObjectType8.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType8.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType8.equals((Object)databaseObjectType7));
      assertFalse(databaseObjectType8.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType8.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType8.equals((Object)databaseObjectType5));
      assertFalse(databaseObjectType8.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType8.equals((Object)databaseObjectType6));
      assertNotSame(databaseObjectType8, databaseObjectType3);
      assertNotSame(databaseObjectType8, databaseObjectType2);
      assertNotSame(databaseObjectType8, databaseObjectType7);
      assertNotSame(databaseObjectType8, databaseObjectType1);
      assertNotSame(databaseObjectType8, databaseObjectType4);
      assertNotSame(databaseObjectType8, databaseObjectType5);
      assertNotSame(databaseObjectType8, databaseObjectType0);
      assertNotSame(databaseObjectType8, databaseObjectType6);
      assertEquals("ForeignKey", databaseObjectType8.getKeyForSerializationReplace());
      assertEquals("ForeignKey", databaseObjectType8.getName());
      assertEquals("ForeignKey", databaseObjectType8.toString());
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("),@',V^4iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals("", databaseObjectInfo0.toString());
      
      DatabaseObjectType databaseObjectType9 = DatabaseObjectType.createNewDatabaseObjectType("adPdToPopupMenu");
      assertFalse(databaseObjectType9.equals((Object)databaseObjectType7));
      assertFalse(databaseObjectType9.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType9.equals((Object)databaseObjectType8));
      assertFalse(databaseObjectType9.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType9.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType9.equals((Object)databaseObjectType6));
      assertFalse(databaseObjectType9.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType9.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType9.equals((Object)databaseObjectType5));
      assertNotSame(databaseObjectType9, databaseObjectType7);
      assertNotSame(databaseObjectType9, databaseObjectType3);
      assertNotSame(databaseObjectType9, databaseObjectType8);
      assertNotSame(databaseObjectType9, databaseObjectType2);
      assertNotSame(databaseObjectType9, databaseObjectType0);
      assertNotSame(databaseObjectType9, databaseObjectType6);
      assertNotSame(databaseObjectType9, databaseObjectType4);
      assertNotSame(databaseObjectType9, databaseObjectType1);
      assertNotSame(databaseObjectType9, databaseObjectType5);
      assertEquals("adPdToPopupMenu", databaseObjectType9.getName());
      assertEquals("adPdToPopupMenu", databaseObjectType9.getKeyForSerializationReplace());
      assertEquals("adPdToPopupMenu", databaseObjectType9.toString());
      assertNotNull(databaseObjectType9);
      
      IApplication iApplication0 = dBCopyPlugin0.getApplication();
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertNull(iApplication0);
      
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      assertEquals(0, SchemaInfo.TABLE_EXT_NOT_A_TABLE);
      assertEquals(1, SchemaInfo.TABLE_EXT_COLS_LOADED_IN_THIS_CALL);
      assertEquals(2, SchemaInfo.TABLE_EXT_COLS_LOADED_BEFORE);
      assertFalse(schemaInfo0.isLoaded());
      assertNotNull(schemaInfo0);
      
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(databaseObjectInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate((ISQLConnection) null, "u&^4/&'[^vZ;D", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = DBUtil.replaceDistinctDataType((-1967), (TableColumnInfo) null, (ISession) null);
      assertEquals((-1967), int0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      LinkedList<ITableInfo> linkedList0 = new LinkedList<ITableInfo>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertNotNull(dBCopyPlugin0);
      
      IApplication iApplication0 = dBCopyPlugin0.getApplication();
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertNull(iApplication0);
      
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      assertEquals("19aeb863:16e747c35c3:-7fac", uidIdentifier0.toString());
      assertNotNull(uidIdentifier0);
      
      SQLDriver sQLDriver0 = new SQLDriver(uidIdentifier0);
      assertEquals("19aeb863:16e747c35c3:-7fac", uidIdentifier0.toString());
      assertFalse(sQLDriver0.isJDBCDriverClassLoaded());
      assertEquals("", sQLDriver0.getName());
      assertEquals("", sQLDriver0.getUrl());
      assertNull(sQLDriver0.getJarFileName());
      assertEquals("", sQLDriver0.toString());
      assertEquals("", sQLDriver0.getWebSiteUrl());
      assertNull(sQLDriver0.getDriverClassName());
      assertNotNull(sQLDriver0);
      
      Connection connection0 = null;
      StringWrapper[] stringWrapperArray0 = sQLDriver0.getJarFileNameWrappers();
      assertEquals("19aeb863:16e747c35c3:-7fac", uidIdentifier0.toString());
      assertFalse(sQLDriver0.isJDBCDriverClassLoaded());
      assertEquals("", sQLDriver0.getName());
      assertEquals("", sQLDriver0.getUrl());
      assertNull(sQLDriver0.getJarFileName());
      assertEquals("", sQLDriver0.toString());
      assertEquals("", sQLDriver0.getWebSiteUrl());
      assertNull(sQLDriver0.getDriverClassName());
      assertEquals(0, stringWrapperArray0.length);
      assertNotNull(stringWrapperArray0);
      
      try { 
        sQLDriver0.getJarFileNameWrapper((-1967));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertNull(iSession0);
      
      dBCopyPlugin0.setDestSession((ISession) null);
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (String) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 297, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 297, 0, (-1224), 4, (String) null, "FBU4l1LFY9", (-1224), 0, (String) null);
      assertEquals("FBU4l1LFY9", tableColumnInfo0.getDefaultValue());
      assertEquals(4, tableColumnInfo0.isNullAllowed());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getTypeName());
      assertNull(tableColumnInfo0.isNullable());
      assertEquals(0, tableColumnInfo0.getOrdinalPosition());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getQualifiedName());
      assertNull(tableColumnInfo0.getRemarks());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getTableName());
      assertEquals(0, tableColumnInfo0.getDecimalDigits());
      assertEquals((-1224), tableColumnInfo0.getOctetLength());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getCatalogName());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.toString());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getColumnName());
      assertEquals(297, tableColumnInfo0.getDataType());
      assertEquals(297, tableColumnInfo0.getColumnSize());
      assertNull(tableColumnInfo0.getSchemaName());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getSimpleName());
      assertEquals((-1224), tableColumnInfo0.getRadix());
      assertNotNull(tableColumnInfo0);
      
      ISession iSession1 = dBCopyPlugin0.getDestSession();
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertNull(iSession1);
      
      int int0 = DBUtil.replaceDistinctDataType(0, tableColumnInfo0, (ISession) null);
      assertEquals(0, int0);
      assertEquals("FBU4l1LFY9", tableColumnInfo0.getDefaultValue());
      assertEquals(4, tableColumnInfo0.isNullAllowed());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getTypeName());
      assertNull(tableColumnInfo0.isNullable());
      assertEquals(0, tableColumnInfo0.getOrdinalPosition());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getQualifiedName());
      assertNull(tableColumnInfo0.getRemarks());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getTableName());
      assertEquals(0, tableColumnInfo0.getDecimalDigits());
      assertEquals((-1224), tableColumnInfo0.getOctetLength());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getCatalogName());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.toString());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getColumnName());
      assertEquals(297, tableColumnInfo0.getDataType());
      assertEquals(297, tableColumnInfo0.getColumnSize());
      assertNull(tableColumnInfo0.getSchemaName());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getSimpleName());
      assertEquals((-1224), tableColumnInfo0.getRadix());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("", ")J,@',V^}iw", "");
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals(")J,@',V^}iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.toString());
      assertNotNull(databaseObjectInfo0);
      
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.FUNCTION;
      assertEquals("Function", databaseObjectType0.getKeyForSerializationReplace());
      assertEquals("Function", databaseObjectType0.toString());
      assertEquals("Function", databaseObjectType0.getName());
      assertNotNull(databaseObjectType0);
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals(")J,@',V^}iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.toString());
      assertEquals("Function", databaseObjectType0.getKeyForSerializationReplace());
      assertEquals("Function", databaseObjectType0.toString());
      assertEquals("Function", databaseObjectType0.getName());
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals(")J,@',V^}iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.toString());
      assertEquals("Function", databaseObjectType0.getKeyForSerializationReplace());
      assertEquals("Function", databaseObjectType0.toString());
      assertEquals("Function", databaseObjectType0.getName());
      
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType0));
      assertNotSame(databaseObjectType1, databaseObjectType0);
      assertEquals("Synonym Type", databaseObjectType1.toString());
      assertEquals("Synonym Type", databaseObjectType1.getKeyForSerializationReplace());
      assertEquals("Synonym Type", databaseObjectType1.getName());
      assertNotNull(databaseObjectType1);
      
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SCHEMA;
      assertFalse(databaseObjectType2.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType2.equals((Object)databaseObjectType0));
      assertNotSame(databaseObjectType2, databaseObjectType1);
      assertNotSame(databaseObjectType2, databaseObjectType0);
      assertEquals("Schema", databaseObjectType2.toString());
      assertEquals("Schema", databaseObjectType2.getName());
      assertEquals("Schema", databaseObjectType2.getKeyForSerializationReplace());
      assertNotNull(databaseObjectType2);
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType2));
      assertNotSame(databaseObjectType1, databaseObjectType0);
      assertNotSame(databaseObjectType1, databaseObjectType2);
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals(")J,@',V^}iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.toString());
      assertEquals("Synonym Type", databaseObjectType1.toString());
      assertEquals("Synonym Type", databaseObjectType1.getKeyForSerializationReplace());
      assertEquals("Synonym Type", databaseObjectType1.getName());
      
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.UDF_TYPE_DBO;
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType2));
      assertNotSame(databaseObjectType3, databaseObjectType1);
      assertNotSame(databaseObjectType3, databaseObjectType0);
      assertNotSame(databaseObjectType3, databaseObjectType2);
      assertEquals("UDF Type", databaseObjectType3.getKeyForSerializationReplace());
      assertEquals("UDF Type", databaseObjectType3.toString());
      assertEquals("UDF Type", databaseObjectType3.getName());
      assertNotNull(databaseObjectType3);
      
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertNotNull(jInternalFrame0);
      
      Icon icon0 = jInternalFrame0.getFrameIcon();
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertNotNull(icon0);
      
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.createNewDatabaseObjectType("", icon0);
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType4.equals((Object)databaseObjectType1));
      assertNotSame(databaseObjectType4, databaseObjectType2);
      assertNotSame(databaseObjectType4, databaseObjectType3);
      assertNotSame(databaseObjectType4, databaseObjectType0);
      assertNotSame(databaseObjectType4, databaseObjectType1);
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals("", databaseObjectType4.getKeyForSerializationReplace());
      assertEquals("", databaseObjectType4.getName());
      assertEquals("", databaseObjectType4.toString());
      assertNotNull(databaseObjectType4);
      
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType5.equals((Object)databaseObjectType4));
      assertNotSame(databaseObjectType5, databaseObjectType0);
      assertNotSame(databaseObjectType5, databaseObjectType3);
      assertNotSame(databaseObjectType5, databaseObjectType2);
      assertNotSame(databaseObjectType5, databaseObjectType1);
      assertNotSame(databaseObjectType5, databaseObjectType4);
      assertEquals("Sequence Type", databaseObjectType5.getKeyForSerializationReplace());
      assertEquals("Sequence Type", databaseObjectType5.toString());
      assertEquals("Sequence Type", databaseObjectType5.getName());
      assertNotNull(databaseObjectType5);
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      assertFalse(databaseObjectType0.equals((Object)databaseObjectType5));
      assertFalse(databaseObjectType0.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType0.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType0.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType0.equals((Object)databaseObjectType2));
      assertNotSame(databaseObjectType0, databaseObjectType5);
      assertNotSame(databaseObjectType0, databaseObjectType4);
      assertNotSame(databaseObjectType0, databaseObjectType3);
      assertNotSame(databaseObjectType0, databaseObjectType1);
      assertNotSame(databaseObjectType0, databaseObjectType2);
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals(")J,@',V^}iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.toString());
      assertEquals("Function", databaseObjectType0.getKeyForSerializationReplace());
      assertEquals("Function", databaseObjectType0.toString());
      assertEquals("Function", databaseObjectType0.getName());
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals(")J,@',V^}iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.toString());
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      assertFalse(databaseObjectType2.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType2.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType2.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType2.equals((Object)databaseObjectType5));
      assertFalse(databaseObjectType2.equals((Object)databaseObjectType3));
      assertNotSame(databaseObjectType2, databaseObjectType1);
      assertNotSame(databaseObjectType2, databaseObjectType0);
      assertNotSame(databaseObjectType2, databaseObjectType4);
      assertNotSame(databaseObjectType2, databaseObjectType5);
      assertNotSame(databaseObjectType2, databaseObjectType3);
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals(")J,@',V^}iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.toString());
      assertEquals("Schema", databaseObjectType2.toString());
      assertEquals("Schema", databaseObjectType2.getName());
      assertEquals("Schema", databaseObjectType2.getKeyForSerializationReplace());
      
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.createNewDatabaseObjectType("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType3));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType6.equals((Object)databaseObjectType5));
      assertNotSame(databaseObjectType6, databaseObjectType0);
      assertNotSame(databaseObjectType6, databaseObjectType2);
      assertNotSame(databaseObjectType6, databaseObjectType3);
      assertNotSame(databaseObjectType6, databaseObjectType4);
      assertNotSame(databaseObjectType6, databaseObjectType1);
      assertNotSame(databaseObjectType6, databaseObjectType5);
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", databaseObjectType6.getName());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", databaseObjectType6.getKeyForSerializationReplace());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", databaseObjectType6.toString());
      assertNotNull(databaseObjectType6);
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("http://www.squirrelsql.org", ")J,@',V^}iw", "http://www.squirrelsql.org", "Jnv \n", (-350), "Jnv \n", (-2067947214), 1434, (-1610612726), 2001, "%\"~@\"An:", "addToPopupMenu", (-980), 1434, "http://www.squirrelsql.org");
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.isNullable());
      assertEquals(1434, tableColumnInfo0.getOrdinalPosition());
      assertEquals((-350), tableColumnInfo0.getDataType());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getSimpleName());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getQualifiedName());
      assertEquals("Jnv \n", tableColumnInfo0.getColumnName());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getCatalogName());
      assertEquals((-980), tableColumnInfo0.getOctetLength());
      assertEquals((-2067947214), tableColumnInfo0.getColumnSize());
      assertEquals(1434, tableColumnInfo0.getDecimalDigits());
      assertEquals((-1610612726), tableColumnInfo0.getRadix());
      assertEquals(")J,@',V^}iw", tableColumnInfo0.getSchemaName());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.toString());
      assertEquals("Jnv \n", tableColumnInfo0.getTypeName());
      assertEquals(2001, tableColumnInfo0.isNullAllowed());
      assertEquals("addToPopupMenu", tableColumnInfo0.getDefaultValue());
      assertEquals("%\"~@\"An:", tableColumnInfo0.getRemarks());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getTableName());
      assertNotNull(tableColumnInfo0);
      
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType6));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType1));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType5));
      assertNotSame(databaseObjectType3, databaseObjectType6);
      assertNotSame(databaseObjectType3, databaseObjectType1);
      assertNotSame(databaseObjectType3, databaseObjectType4);
      assertNotSame(databaseObjectType3, databaseObjectType0);
      assertNotSame(databaseObjectType3, databaseObjectType2);
      assertNotSame(databaseObjectType3, databaseObjectType5);
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.isNullable());
      assertEquals(1434, tableColumnInfo0.getOrdinalPosition());
      assertEquals((-350), tableColumnInfo0.getDataType());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getSimpleName());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getQualifiedName());
      assertEquals("Jnv \n", tableColumnInfo0.getColumnName());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getCatalogName());
      assertEquals((-980), tableColumnInfo0.getOctetLength());
      assertEquals((-2067947214), tableColumnInfo0.getColumnSize());
      assertEquals(1434, tableColumnInfo0.getDecimalDigits());
      assertEquals((-1610612726), tableColumnInfo0.getRadix());
      assertEquals(")J,@',V^}iw", tableColumnInfo0.getSchemaName());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.toString());
      assertEquals("Jnv \n", tableColumnInfo0.getTypeName());
      assertEquals(2001, tableColumnInfo0.isNullAllowed());
      assertEquals("addToPopupMenu", tableColumnInfo0.getDefaultValue());
      assertEquals("%\"~@\"An:", tableColumnInfo0.getRemarks());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getTableName());
      assertEquals("UDF Type", databaseObjectType3.getKeyForSerializationReplace());
      assertEquals("UDF Type", databaseObjectType3.toString());
      assertEquals("UDF Type", databaseObjectType3.getName());
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNotNull(dBCopyPlugin0);
      
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType6));
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType4));
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType0));
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType2));
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType5));
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType3));
      assertNotSame(databaseObjectType1, databaseObjectType6);
      assertNotSame(databaseObjectType1, databaseObjectType4);
      assertNotSame(databaseObjectType1, databaseObjectType0);
      assertNotSame(databaseObjectType1, databaseObjectType2);
      assertNotSame(databaseObjectType1, databaseObjectType5);
      assertNotSame(databaseObjectType1, databaseObjectType3);
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.isNullable());
      assertEquals(1434, tableColumnInfo0.getOrdinalPosition());
      assertEquals((-350), tableColumnInfo0.getDataType());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getSimpleName());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getQualifiedName());
      assertEquals("Jnv \n", tableColumnInfo0.getColumnName());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getCatalogName());
      assertEquals((-980), tableColumnInfo0.getOctetLength());
      assertEquals((-2067947214), tableColumnInfo0.getColumnSize());
      assertEquals(1434, tableColumnInfo0.getDecimalDigits());
      assertEquals((-1610612726), tableColumnInfo0.getRadix());
      assertEquals(")J,@',V^}iw", tableColumnInfo0.getSchemaName());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.toString());
      assertEquals("Jnv \n", tableColumnInfo0.getTypeName());
      assertEquals(2001, tableColumnInfo0.isNullAllowed());
      assertEquals("addToPopupMenu", tableColumnInfo0.getDefaultValue());
      assertEquals("%\"~@\"An:", tableColumnInfo0.getRemarks());
      assertEquals("http://www.squirrelsql.org", tableColumnInfo0.getTableName());
      assertEquals("Synonym Type", databaseObjectType1.toString());
      assertEquals("Synonym Type", databaseObjectType1.getKeyForSerializationReplace());
      assertEquals("Synonym Type", databaseObjectType1.getName());
      
      String string0 = DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      assertEquals("", string0);
      assertEquals("", databaseObjectInfo0.getCatalogName());
      assertEquals("", databaseObjectInfo0.getQualifiedName());
      assertEquals("", databaseObjectInfo0.getSimpleName());
      assertEquals(")J,@',V^}iw", databaseObjectInfo0.getSchemaName());
      assertEquals("", databaseObjectInfo0.toString());
      assertNotNull(string0);
      
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[2];
      iDatabaseObjectInfoArray0[0] = (IDatabaseObjectInfo) tableColumnInfo0;
      iDatabaseObjectInfoArray0[1] = (IDatabaseObjectInfo) tableColumnInfo0;
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "adPdToPopupMenu", "", (String) null, 1007, "adPdToPopupMenu", 1007, 1007, 626, Integer.MIN_VALUE, "adPdToPopupMenu", (String) null, (-1026), (-747), (String) null);
      assertEquals("adPdToPopupMenu", tableColumnInfo0.getTypeName());
      assertNull(tableColumnInfo0.getColumnName());
      assertEquals("adPdToPopupMenu", tableColumnInfo0.getRemarks());
      assertEquals((-747), tableColumnInfo0.getOrdinalPosition());
      assertNull(tableColumnInfo0.isNullable());
      assertEquals(1007, tableColumnInfo0.getDataType());
      assertEquals("", tableColumnInfo0.getCatalogName());
      assertEquals("", tableColumnInfo0.getSimpleName());
      assertNull(tableColumnInfo0.getDefaultValue());
      assertEquals(1007, tableColumnInfo0.getColumnSize());
      assertEquals((-1026), tableColumnInfo0.getOctetLength());
      assertEquals(Integer.MIN_VALUE, tableColumnInfo0.isNullAllowed());
      assertEquals("adPdToPopupMenu", tableColumnInfo0.getSchemaName());
      assertEquals("", tableColumnInfo0.toString());
      assertEquals("", tableColumnInfo0.getQualifiedName());
      assertEquals(1007, tableColumnInfo0.getDecimalDigits());
      assertEquals("", tableColumnInfo0.getTableName());
      assertEquals(626, tableColumnInfo0.getRadix());
      assertNotNull(tableColumnInfo0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(iSession0);
      
      List<IDatabaseObjectInfo> list0 = dBCopyPlugin0.getSourceDatabaseObjects();
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(list0);
      
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList((List<IDatabaseObjectInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LinkedList<ITableInfo> linkedList0 = new LinkedList<ITableInfo>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "E{c@bZ^JXcAjgg%L";
      String[] stringArray1 = linkedList0.toArray(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      List<IDatabaseObjectInfo> list0 = new Vector<IDatabaseObjectInfo>();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<ITableInfo> list1 = DBUtil.convertObjectToTableList(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertNotNull(defaultListCellRenderer_UIResource0);
      
      BasicCheckBoxMenuItemUI basicCheckBoxMenuItemUI0 = new BasicCheckBoxMenuItemUI();
      assertNotNull(basicCheckBoxMenuItemUI0);
      
      boolean boolean0 = DBUtil.typesAreEquivalent(3126, 3126);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, "!gp", "!gp", 1007, "DBUtil.info.executeupdate", 626, 584, (-1857), 584, "NORMAL", "~c", 1988, (-307), ". Using 'length'");
      assertEquals("!gp", tableColumnInfo0.getColumnName());
      assertEquals(584, tableColumnInfo0.isNullAllowed());
      assertEquals(1007, tableColumnInfo0.getDataType());
      assertEquals(626, tableColumnInfo0.getColumnSize());
      assertEquals("DBUtil.info.executeupdate", tableColumnInfo0.getTypeName());
      assertEquals((-1857), tableColumnInfo0.getRadix());
      assertEquals((-307), tableColumnInfo0.getOrdinalPosition());
      assertEquals("!gp", tableColumnInfo0.getSimpleName());
      assertNull(tableColumnInfo0.getSchemaName());
      assertEquals(584, tableColumnInfo0.getDecimalDigits());
      assertEquals("!gp", tableColumnInfo0.getQualifiedName());
      assertEquals("!gp", tableColumnInfo0.toString());
      assertEquals("~c", tableColumnInfo0.getDefaultValue());
      assertNull(tableColumnInfo0.getCatalogName());
      assertEquals(1988, tableColumnInfo0.getOctetLength());
      assertEquals("NORMAL", tableColumnInfo0.getRemarks());
      assertEquals("!gp", tableColumnInfo0.getTableName());
      assertEquals(". Using 'length'", tableColumnInfo0.isNullable());
      assertNotNull(tableColumnInfo0);
      
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.COLUMN;
      assertEquals("Column", databaseObjectType0.getName());
      assertEquals("Column", databaseObjectType0.toString());
      assertEquals("Column", databaseObjectType0.getKeyForSerializationReplace());
      assertNotNull(databaseObjectType0);
      
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      assertEquals("!gp", tableColumnInfo0.getColumnName());
      assertEquals(584, tableColumnInfo0.isNullAllowed());
      assertEquals(1007, tableColumnInfo0.getDataType());
      assertEquals(626, tableColumnInfo0.getColumnSize());
      assertEquals("DBUtil.info.executeupdate", tableColumnInfo0.getTypeName());
      assertEquals((-1857), tableColumnInfo0.getRadix());
      assertEquals((-307), tableColumnInfo0.getOrdinalPosition());
      assertEquals("!gp", tableColumnInfo0.getSimpleName());
      assertNull(tableColumnInfo0.getSchemaName());
      assertEquals(584, tableColumnInfo0.getDecimalDigits());
      assertEquals("!gp", tableColumnInfo0.getQualifiedName());
      assertEquals("!gp", tableColumnInfo0.toString());
      assertEquals("~c", tableColumnInfo0.getDefaultValue());
      assertNull(tableColumnInfo0.getCatalogName());
      assertEquals(1988, tableColumnInfo0.getOctetLength());
      assertEquals("NORMAL", tableColumnInfo0.getRemarks());
      assertEquals("!gp", tableColumnInfo0.getTableName());
      assertEquals(". Using 'length'", tableColumnInfo0.isNullable());
      assertEquals("Column", databaseObjectType0.getName());
      assertEquals("Column", databaseObjectType0.toString());
      assertEquals("Column", databaseObjectType0.getKeyForSerializationReplace());
      
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDF_TYPE_DBO;
      assertFalse(databaseObjectType1.equals((Object)databaseObjectType0));
      assertNotSame(databaseObjectType1, databaseObjectType0);
      assertEquals("UDF Type", databaseObjectType1.getName());
      assertEquals("UDF Type", databaseObjectType1.getKeyForSerializationReplace());
      assertEquals("UDF Type", databaseObjectType1.toString());
      assertNotNull(databaseObjectType1);
      
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertNotNull(jInternalFrame0);
      
      DBUtil dBUtil0 = new DBUtil();
      assertNull(dBUtil0.getLastStatementValues());
      assertNull(dBUtil0.getLastStatement());
      assertNotNull(dBUtil0);
      
      JOptionPane jOptionPane0 = null;
      try {
        jOptionPane0 = new JOptionPane(dBUtil0, 1007);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JOptionPane: type must be one of JOptionPane.ERROR_MESSAGE, JOptionPane.INFORMATION_MESSAGE, JOptionPane.WARNING_MESSAGE, JOptionPane.QUESTION_MESSAGE or JOptionPane.PLAIN_MESSAGE
         //
         verifyException("javax.swing.JOptionPane", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      // Undeclared exception!
      try { 
        DBUtil.deleteDataInExistingTable((ISession) null, "FQL", "FQL", "FQL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<ITableInfo> linkedList0 = new LinkedList<ITableInfo>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<IDatabaseObjectInfo> list0 = DBUtil.convertTableToObjectList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      assertEquals("19aeb863:16e747c35c3:-7fad", uidIdentifier0.toString());
      assertNotNull(uidIdentifier0);
      
      String string0 = "Application.splash.loadUserSpecifcWikiConfiguration";
      uidIdentifier0.setString("Application.splash.loadUserSpecifcWikiConfiguration");
      assertEquals("Application.splash.loadUserSpecifcWikiConfiguration", uidIdentifier0.toString());
      
      ConnectionWrapper connectionWrapper0 = null;
      try {
        connectionWrapper0 = new ConnectionWrapper((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLAlias sQLAlias0 = new SQLAlias();
      assertNull(sQLAlias0.getUserName());
      assertNull(sQLAlias0.getName());
      assertFalse(sQLAlias0.isAutoLogon());
      assertNull(sQLAlias0.getUrl());
      assertNull(sQLAlias0.getPassword());
      assertNull(sQLAlias0.toString());
      assertFalse(sQLAlias0.getUseDriverProperties());
      assertFalse(sQLAlias0.isValid());
      assertFalse(sQLAlias0.isConnectAtStartup());
      assertNotNull(sQLAlias0);
      
      SQLAliasConnectionProperties sQLAliasConnectionProperties0 = new SQLAliasConnectionProperties();
      assertFalse(sQLAliasConnectionProperties0.isEnableConnectionKeepAlive());
      assertEquals("", sQLAliasConnectionProperties0.getKeepAliveSqlStatement());
      assertEquals(120, sQLAliasConnectionProperties0.getKeepAliveSleepTimeSeconds());
      assertNotNull(sQLAliasConnectionProperties0);
      
      sQLAlias0.setConnectionProperties(sQLAliasConnectionProperties0);
      assertNull(sQLAlias0.getUserName());
      assertNull(sQLAlias0.getName());
      assertFalse(sQLAlias0.isAutoLogon());
      assertNull(sQLAlias0.getUrl());
      assertNull(sQLAlias0.getPassword());
      assertNull(sQLAlias0.toString());
      assertFalse(sQLAlias0.getUseDriverProperties());
      assertFalse(sQLAlias0.isValid());
      assertFalse(sQLAlias0.isConnectAtStartup());
      assertFalse(sQLAliasConnectionProperties0.isEnableConnectionKeepAlive());
      assertEquals("", sQLAliasConnectionProperties0.getKeepAliveSqlStatement());
      assertEquals(120, sQLAliasConnectionProperties0.getKeepAliveSleepTimeSeconds());
      
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = sQLAlias0.getDriverPropertiesClone();
      assertNull(sQLAlias0.getUserName());
      assertNull(sQLAlias0.getName());
      assertFalse(sQLAlias0.isAutoLogon());
      assertNull(sQLAlias0.getUrl());
      assertNull(sQLAlias0.getPassword());
      assertNull(sQLAlias0.toString());
      assertFalse(sQLAlias0.getUseDriverProperties());
      assertFalse(sQLAlias0.isValid());
      assertFalse(sQLAlias0.isConnectAtStartup());
      assertEquals(0, sQLDriverPropertyCollection0.size());
      assertNotNull(sQLDriverPropertyCollection0);
      
      SQLDriverProperty[] sQLDriverPropertyArray0 = sQLDriverPropertyCollection0.getDriverProperties();
      assertNull(sQLAlias0.getUserName());
      assertNull(sQLAlias0.getName());
      assertFalse(sQLAlias0.isAutoLogon());
      assertNull(sQLAlias0.getUrl());
      assertNull(sQLAlias0.getPassword());
      assertNull(sQLAlias0.toString());
      assertFalse(sQLAlias0.getUseDriverProperties());
      assertFalse(sQLAlias0.isValid());
      assertFalse(sQLAlias0.isConnectAtStartup());
      assertEquals(0, sQLDriverPropertyCollection0.size());
      assertEquals(0, sQLDriverPropertyArray0.length);
      assertNotNull(sQLDriverPropertyArray0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      assertNull(connectionWrapper0.getResourceFactoryName());
      assertNotNull(connectionWrapper0);
      
      SQLDriverPropertyCollection sQLDriverPropertyCollection1 = new SQLDriverPropertyCollection();
      assertFalse(sQLDriverPropertyCollection1.equals((Object)sQLDriverPropertyCollection0));
      assertEquals(0, sQLDriverPropertyCollection1.size());
      assertNotNull(sQLDriverPropertyCollection1);
      
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      assertEquals("19aeb863:16e747c35c3:-7fae", uidIdentifier0.toString());
      assertNotNull(uidIdentifier0);
      
      System.setCurrentTimeMillis(1218L);
      // Undeclared exception!
      try { 
        DBUtil.isKeyword((ISession) null, "HL8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNotNull(dBCopyPlugin0);
      
      dBCopyPlugin0.setDestSession((ISession) null);
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(iSession0);
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "addToPopupMenu", "!", "p6;w3.HS_", 78, "Couldn't find an exact match for destination table ", 91, (-2555), 2217, 91, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", ",X?j(dn|1&n<Tie", (-7), (-7), "getCatSep: Unexpected Exception - ");
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getCatalogName());
      assertEquals("!", tableColumnInfo0.getSimpleName());
      assertEquals("Couldn't find an exact match for destination table ", tableColumnInfo0.getTypeName());
      assertEquals(91, tableColumnInfo0.isNullAllowed());
      assertEquals((-2555), tableColumnInfo0.getDecimalDigits());
      assertEquals("!", tableColumnInfo0.getTableName());
      assertEquals((-7), tableColumnInfo0.getOrdinalPosition());
      assertEquals(91, tableColumnInfo0.getColumnSize());
      assertEquals(2217, tableColumnInfo0.getRadix());
      assertEquals("!", tableColumnInfo0.getQualifiedName());
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", tableColumnInfo0.getRemarks());
      assertEquals("getCatSep: Unexpected Exception - ", tableColumnInfo0.isNullable());
      assertEquals("p6;w3.HS_", tableColumnInfo0.getColumnName());
      assertEquals(78, tableColumnInfo0.getDataType());
      assertEquals("!", tableColumnInfo0.toString());
      assertEquals((-7), tableColumnInfo0.getOctetLength());
      assertEquals(",X?j(dn|1&n<Tie", tableColumnInfo0.getDefaultValue());
      assertEquals("addToPopupMenu", tableColumnInfo0.getSchemaName());
      assertNotNull(tableColumnInfo0);
      
      ISession iSession1 = dBCopyPlugin0.getSourceSession();
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(iSession1);
      
      ISession iSession2 = dBCopyPlugin0.getSourceSession();
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(iSession2);
      
      ISession iSession3 = dBCopyPlugin0.getDestSession();
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(iSession3);
      
      // Undeclared exception!
      try { 
        DBUtil.replaceOtherDataType((TableColumnInfo) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertNotNull(defaultListCellRenderer_UIResource0);
      
      BasicCheckBoxMenuItemUI basicCheckBoxMenuItemUI0 = new BasicCheckBoxMenuItemUI();
      assertNotNull(basicCheckBoxMenuItemUI0);
      
      BasicCheckBoxMenuItemUI basicCheckBoxMenuItemUI1 = new BasicCheckBoxMenuItemUI();
      assertFalse(basicCheckBoxMenuItemUI1.equals((Object)basicCheckBoxMenuItemUI0));
      assertNotNull(basicCheckBoxMenuItemUI1);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      assertFalse(boolean0);
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(") - table ", "opteV)%soqk5#+K/", ")a $L5N$y>Pa$dcxj[~", ") - table ", (-2077), ") - table ", 81, 1, 2503, (-669), ") - table ", "e+$REs+aPD)", 2631, (-795), "org.jboss.net.protocol.resource.Handler");
      assertEquals(")a $L5N$y>Pa$dcxj[~", tableColumnInfo0.getQualifiedName());
      assertEquals(")a $L5N$y>Pa$dcxj[~", tableColumnInfo0.toString());
      assertEquals(") - table ", tableColumnInfo0.getTypeName());
      assertEquals(2503, tableColumnInfo0.getRadix());
      assertEquals(")a $L5N$y>Pa$dcxj[~", tableColumnInfo0.getTableName());
      assertEquals("org.jboss.net.protocol.resource.Handler", tableColumnInfo0.isNullable());
      assertEquals(") - table ", tableColumnInfo0.getColumnName());
      assertEquals(1, tableColumnInfo0.getDecimalDigits());
      assertEquals(2631, tableColumnInfo0.getOctetLength());
      assertEquals(") - table ", tableColumnInfo0.getCatalogName());
      assertEquals(81, tableColumnInfo0.getColumnSize());
      assertEquals(") - table ", tableColumnInfo0.getRemarks());
      assertEquals((-669), tableColumnInfo0.isNullAllowed());
      assertEquals((-2077), tableColumnInfo0.getDataType());
      assertEquals(")a $L5N$y>Pa$dcxj[~", tableColumnInfo0.getSimpleName());
      assertEquals((-795), tableColumnInfo0.getOrdinalPosition());
      assertEquals("e+$REs+aPD)", tableColumnInfo0.getDefaultValue());
      assertEquals("opteV)%soqk5#+K/", tableColumnInfo0.getSchemaName());
      assertNotNull(tableColumnInfo0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(iSession0);
      
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals((-2077), int0);
      assertEquals(")a $L5N$y>Pa$dcxj[~", tableColumnInfo0.getQualifiedName());
      assertEquals(")a $L5N$y>Pa$dcxj[~", tableColumnInfo0.toString());
      assertEquals(") - table ", tableColumnInfo0.getTypeName());
      assertEquals(2503, tableColumnInfo0.getRadix());
      assertEquals(")a $L5N$y>Pa$dcxj[~", tableColumnInfo0.getTableName());
      assertEquals("org.jboss.net.protocol.resource.Handler", tableColumnInfo0.isNullable());
      assertEquals(") - table ", tableColumnInfo0.getColumnName());
      assertEquals(1, tableColumnInfo0.getDecimalDigits());
      assertEquals(2631, tableColumnInfo0.getOctetLength());
      assertEquals(") - table ", tableColumnInfo0.getCatalogName());
      assertEquals(81, tableColumnInfo0.getColumnSize());
      assertEquals(") - table ", tableColumnInfo0.getRemarks());
      assertEquals((-669), tableColumnInfo0.isNullAllowed());
      assertEquals((-2077), tableColumnInfo0.getDataType());
      assertEquals(")a $L5N$y>Pa$dcxj[~", tableColumnInfo0.getSimpleName());
      assertEquals((-795), tableColumnInfo0.getOrdinalPosition());
      assertEquals("e+$REs+aPD)", tableColumnInfo0.getDefaultValue());
      assertEquals("opteV)%soqk5#+K/", tableColumnInfo0.getSchemaName());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("HL8", "pFQL", " |cGgk%RjcGVuuD<&4@", (String) null, (-1442), (String) null, 1627, (-1442), 2004, (-2034), "HL8", "Don't display splash screen", (-1), (-1442), "Don't display splash screen");
      assertEquals(1627, tableColumnInfo0.getColumnSize());
      assertEquals((-1442), tableColumnInfo0.getDecimalDigits());
      assertEquals("HL8", tableColumnInfo0.getRemarks());
      assertEquals("Don't display splash screen", tableColumnInfo0.getDefaultValue());
      assertEquals(2004, tableColumnInfo0.getRadix());
      assertEquals((-1442), tableColumnInfo0.getDataType());
      assertEquals(" |cGgk%RjcGVuuD<&4@", tableColumnInfo0.getTableName());
      assertEquals((-1442), tableColumnInfo0.getOrdinalPosition());
      assertNull(tableColumnInfo0.getTypeName());
      assertEquals("Don't display splash screen", tableColumnInfo0.isNullable());
      assertEquals(" |cGgk%RjcGVuuD<&4@", tableColumnInfo0.getQualifiedName());
      assertEquals(" |cGgk%RjcGVuuD<&4@", tableColumnInfo0.getSimpleName());
      assertEquals("HL8", tableColumnInfo0.getCatalogName());
      assertEquals(" |cGgk%RjcGVuuD<&4@", tableColumnInfo0.toString());
      assertEquals((-1), tableColumnInfo0.getOctetLength());
      assertEquals((-2034), tableColumnInfo0.isNullAllowed());
      assertEquals("pFQL", tableColumnInfo0.getSchemaName());
      assertNull(tableColumnInfo0.getColumnName());
      assertNotNull(tableColumnInfo0);
      
      // Undeclared exception!
      try { 
        DBUtil.getColumnList((TableColumnInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("SVbB", "leAQSdVf(k", "7Gy1XI20o&", "SVbB", 1007, (String) null, 626, 626, (-511), 520, "  (", "adPdToPopupMenu", (-2), 1007, (String) null);
      assertEquals(626, tableColumnInfo0.getDecimalDigits());
      assertEquals(520, tableColumnInfo0.isNullAllowed());
      assertNull(tableColumnInfo0.isNullable());
      assertEquals(1007, tableColumnInfo0.getDataType());
      assertEquals("leAQSdVf(k", tableColumnInfo0.getSchemaName());
      assertEquals("adPdToPopupMenu", tableColumnInfo0.getDefaultValue());
      assertEquals("SVbB", tableColumnInfo0.getColumnName());
      assertNull(tableColumnInfo0.getTypeName());
      assertEquals((-511), tableColumnInfo0.getRadix());
      assertEquals((-2), tableColumnInfo0.getOctetLength());
      assertEquals("7Gy1XI20o&", tableColumnInfo0.toString());
      assertEquals(626, tableColumnInfo0.getColumnSize());
      assertEquals("  (", tableColumnInfo0.getRemarks());
      assertEquals(1007, tableColumnInfo0.getOrdinalPosition());
      assertEquals("7Gy1XI20o&", tableColumnInfo0.getSimpleName());
      assertEquals("7Gy1XI20o&", tableColumnInfo0.getTableName());
      assertEquals("SVbB", tableColumnInfo0.getCatalogName());
      assertEquals("7Gy1XI20o&", tableColumnInfo0.getQualifiedName());
      assertNotNull(tableColumnInfo0);
      
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("=#", "HL8", "L2l((?~lPm", "oh5xx[1", (-1789569704), "#Y(QE?+tm6", 2103, (-1789569704), (-1789569704), (-1025), "RDpGuPg6zyVSTdzA", "#Y(QE?+tm6", (-534), 2163, (String) null);
      assertFalse(tableColumnInfo1.equals((Object)tableColumnInfo0));
      assertEquals("oh5xx[1", tableColumnInfo1.getColumnName());
      assertEquals((-1789569704), tableColumnInfo1.getRadix());
      assertEquals("L2l((?~lPm", tableColumnInfo1.getQualifiedName());
      assertEquals(2103, tableColumnInfo1.getColumnSize());
      assertEquals(2163, tableColumnInfo1.getOrdinalPosition());
      assertEquals("HL8", tableColumnInfo1.getSchemaName());
      assertEquals("L2l((?~lPm", tableColumnInfo1.getSimpleName());
      assertNull(tableColumnInfo1.isNullable());
      assertEquals((-1789569704), tableColumnInfo1.getDecimalDigits());
      assertEquals("#Y(QE?+tm6", tableColumnInfo1.getDefaultValue());
      assertEquals("RDpGuPg6zyVSTdzA", tableColumnInfo1.getRemarks());
      assertEquals("=#", tableColumnInfo1.getCatalogName());
      assertEquals((-1789569704), tableColumnInfo1.getDataType());
      assertEquals("L2l((?~lPm", tableColumnInfo1.toString());
      assertEquals("L2l((?~lPm", tableColumnInfo1.getTableName());
      assertEquals("#Y(QE?+tm6", tableColumnInfo1.getTypeName());
      assertEquals((-1025), tableColumnInfo1.isNullAllowed());
      assertEquals((-534), tableColumnInfo1.getOctetLength());
      assertNotNull(tableColumnInfo1);
      
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[0];
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("", string0);
      assertEquals(0, tableColumnInfoArray0.length);
      assertNotNull(string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBUtil.setLastStatementValues("");
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      assertNull(connectionWrapper0.getResourceFactoryName());
      assertNotNull(connectionWrapper0);
      
      // Undeclared exception!
      try { 
        connectionWrapper0.prepareCall("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = DBUtil.getLastStatement();
      assertNull(string0);
      
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      assertFalse(dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(0L, dBCopyPreferenceBean0.getTableDelayMillis());
      assertEquals(0L, dBCopyPreferenceBean0.getRecordDelayMillis());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertTrue(dBCopyPreferenceBean0.isCopyData());
      assertTrue(dBCopyPreferenceBean0.isCopyForeignKeys());
      assertTrue(dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertTrue(dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertTrue(dBCopyPreferenceBean0.isTestColumnNames());
      assertFalse(dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertFalse(dBCopyPreferenceBean0.isWriteScript());
      assertTrue(dBCopyPreferenceBean0.isUseFileCaching());
      assertTrue(dBCopyPreferenceBean0.isCheckKeywords());
      assertTrue(dBCopyPreferenceBean0.isCopyIndexDefs());
      assertNull(dBCopyPreferenceBean0.getClientName());
      assertFalse(dBCopyPreferenceBean0.isPromptForDialect());
      assertFalse(dBCopyPreferenceBean0.isAppendRecordsToExisting());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertTrue(dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertNull(dBCopyPreferenceBean0.getClientVersion());
      assertTrue(dBCopyPreferenceBean0.isUseTruncate());
      assertNotNull(dBCopyPreferenceBean0);
      
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      assertFalse(dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(0L, dBCopyPreferenceBean0.getTableDelayMillis());
      assertEquals(0L, dBCopyPreferenceBean0.getRecordDelayMillis());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertTrue(dBCopyPreferenceBean0.isCopyData());
      assertTrue(dBCopyPreferenceBean0.isCopyForeignKeys());
      assertTrue(dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertTrue(dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertTrue(dBCopyPreferenceBean0.isTestColumnNames());
      assertFalse(dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertFalse(dBCopyPreferenceBean0.isWriteScript());
      assertTrue(dBCopyPreferenceBean0.isUseFileCaching());
      assertTrue(dBCopyPreferenceBean0.isCheckKeywords());
      assertTrue(dBCopyPreferenceBean0.isCopyIndexDefs());
      assertNull(dBCopyPreferenceBean0.getClientName());
      assertFalse(dBCopyPreferenceBean0.isPromptForDialect());
      assertFalse(dBCopyPreferenceBean0.isAppendRecordsToExisting());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertTrue(dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertNull(dBCopyPreferenceBean0.getClientVersion());
      assertTrue(dBCopyPreferenceBean0.isUseTruncate());
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertNull(iSession0);
      
      String string1 = "";
      dBCopyPlugin0.unload();
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      
      // Undeclared exception!
      try { 
        DBUtil.getTables((ISession) null, "DBUtil.getTableInfo: found ", "", "V,z<9jU`=3@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      // Undeclared exception!
      try { 
        DBUtil.dropTable("$1.O$:hxmD,", "7|FvKBX)e](lN p", "bit_xor", (ISession) null, true, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertNotNull(defaultListCellRenderer_UIResource0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = DBUtil.typesAreEquivalent((-8), 3126);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Mr$";
      boolean boolean0 = DBUtil.typesAreEquivalent(64, 0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CustomizableThreadFactory customizableThreadFactory0 = new CustomizableThreadFactory("ALTER TABLE $tableName$ DROP CONSTRAINT $constraintName$");
      customizableThreadFactory0.getThreadGroup();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2001, threadPoolExecutor_DiscardOldestPolicy0);
      scheduledThreadPoolExecutor0.getLargestPoolSize();
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0);
      MockThread mockThread2 = new MockThread(mockThread0, "Don't display splash screen");
      MockThread mockThread3 = new MockThread(mockThread2);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.checkKeyword((ISession) null, "CsW%u=7!9f=", "Cannot accept XYSeries that allow duplicate values. Use XYSeries(seriesName, <sort>, false) constructor.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.setDestSession((ISession) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 1003, "Ir6{^/uZ_#nZ^FH?", (-4), 2072, 1003, Integer.MAX_VALUE, "/", "/", 1003, 5563, "Ir6{^/uZ_#nZ^FH?");
      DBUtil.replaceDistinctDataType(5563, tableColumnInfo0, (ISession) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<ITableInfo> linkedList0 = new LinkedList<ITableInfo>();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        dBCopyPlugin1.getGlobalPreferencePanels();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.gui.PreferencesPanel", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      BasicCheckBoxMenuItemUI basicCheckBoxMenuItemUI0 = new BasicCheckBoxMenuItemUI();
      BasicCheckBoxMenuItemUI basicCheckBoxMenuItemUI1 = new BasicCheckBoxMenuItemUI();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(") - table ", "opteV)%soqk5#+K/", ")a $L5N$y>Pa$dcxj[~", ") - table ", (-2077), ") - table ", 81, 1, 2503, (-669), ") - table ", "e+$REs+aPD)", 2631, 2001, "org.jboss.net.protocol.resource.Handler");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getColumnSql(dBCopyPlugin0, tableColumnInfo0, "=;r~ploQ}'vS,", "-bHW<vqg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("eh'wp7Y<$FX5VH)");
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.FUNCTION;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.FUNCTION;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.TABLE;
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.UDF_TYPE_DBO;
      ImageIcon imageIcon0 = new ImageIcon("eh'wp7Y<$FX5VH)");
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      metalTreeUI0.getExpandedIcon();
      DatabaseObjectType.createNewDatabaseObjectType("A zC7&I6&", (Icon) null);
      DatabaseObjectType.createNewDatabaseObjectType(" schema = ");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.sameDatabaseType((ISession) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.sameDatabaseType((ISession) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BasicCheckBoxMenuItemUI basicCheckBoxMenuItemUI0 = new BasicCheckBoxMenuItemUI();
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode(basicCheckBoxMenuItemUI0);
      DefaultTreeModel defaultTreeModel0 = new DefaultTreeModel(defaultMutableTreeNode0, false);
      defaultTreeModel0.reload();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "addToPopupMenu", "addToPopupMenu", "peeS7y;65", (byte)88);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, "case \"CYCLE-OK\" ", "D/", "2J5WV(Gs$xh", 1007);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("", "),@',V^4iw", "");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.FUNCTION;
      DBUtil.setLastStatement(":C$E+gYgftod");
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      BasicCheckBoxMenuItemUI basicCheckBoxMenuItemUI0 = new BasicCheckBoxMenuItemUI();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource1 = new DefaultListCellRenderer.UIResource();
      BasicCheckBoxMenuItemUI basicCheckBoxMenuItemUI1 = new BasicCheckBoxMenuItemUI();
      BasicCheckBoxMenuItemUI basicCheckBoxMenuItemUI2 = new BasicCheckBoxMenuItemUI();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      // Undeclared exception!
      try { 
        DBUtil.executeQuery((ISession) null, "http//www.squirrelsql.org");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.tableHasForeignKey("pFQL", "{?= call CURRENT_TIMESTAMP }", "addToPopupMenu", foreignKeyInfo0, dBCopyPlugin0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("", "),@',V^4iw", "");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDF_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("http://www.squirrelsql.org");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType.createNewDatabaseObjectType("),@',V^4iw");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      String string0 = DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      assertEquals("),@',V^4iw", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.fixCase((ISession) null, "c9+9{/z2Msy/A,;\"0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }
}
