/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 00:05:00 GMT 2020
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.actions.EdgeWidthAction;
import freemind.modes.schememode.SchemeMode;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseWheelListener;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.CellRendererPane;
import javax.swing.ImageIcon;
import javax.swing.InputVerifier;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.GapContent;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StringContent;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.xalan.processor.TransformerFactoryImpl;
import org.apache.xml.serializer.EmptySerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MemoryTileCache;
import org.openstreetmap.gui.jmapviewer.tilesources.OsmTileSource;
import plugins.collaboration.database.DatabaseConnectionHook;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.723470183627356
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setFocusTraversalPolicyProvider(false);
      jDayChooser_DecoratorButton0.isFocusPainted();
      jDayChooser_DecoratorButton0.getY();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.repaint(329, 8217, 8217, 8217);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.initDecorations();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8005634091045097
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-1991));
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setMonth((-1848));
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.setDay(0);
      MenuSelectionManager.defaultManager();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 48, 14, 915, 0, '1');
      jDayChooser1.keyPressed(keyEvent0);
      Locale locale0 = Locale.UK;
      jDayChooser1.setLocale(locale0);
      jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6236622122205495
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      StringContent stringContent0 = new StringContent((-1437625606));
      StyleContext styleContext0 = new StyleContext();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      styleContext0.addAttributes(attributeSet0, attributeSet0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-92);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      MenuSelectionManager.defaultManager();
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate((-2929), 6, (byte) (-92));
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7197215697529176
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      ActionEvent actionEvent0 = new ActionEvent("plugins.map.FreeMindMapController$SetHomeAction", 22, "plugins.map.FreeMindMapController$SetHomeAction", 3406);
      StringContent stringContent0 = new StringContent(19);
      StyleContext styleContext0 = new StyleContext();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      CellRendererPane cellRendererPane0 = new CellRendererPane();
      FocusEvent focusEvent0 = new FocusEvent(cellRendererPane0, (-3941));
      jDayChooser0.focusGained(focusEvent0);
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.setDay((-3941));
      Color color1 = Color.ORANGE;
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setMaxDayCharacters(22);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7857837033324397
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.init();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle(styleContext_NamedStyle0);
      jTextPane0.addStyle("Windows", styleContext_NamedStyle0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)54;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      defaultStyledDocument0.addStyle("Windows", styleContext_NamedStyle0);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("Windows", vetoableChangeListenerProxy0);
      StyleContext styleContext1 = new StyleContext();
      styleContext1.addAttribute(styleContext_NamedStyle1, styleContext_NamedStyle0, "Windows");
      StringContent stringContent0 = new StringContent(1);
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(styleContext0);
      Color color0 = Color.lightGray;
      Color color1 = jDayChooser0.getSundayForeground();
      jDayChooser0.setWeekdayForeground(color1);
      Color color2 = MapView.standardNodeTextColor;
      jDayChooser0.setDay(13);
      Color color3 = Color.ORANGE;
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser1.setMaxDayCharacters(0);
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.706697613279902
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent("plugins.map.FreeMindMapController$SetHomeAction", 19, "31", 0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      actionEvent0.setSource(jDayChooser0);
      StringContent stringContent0 = new StringContent(19);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 19);
      jDayChooser0.focusGained(focusEvent0);
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.setDay((-1036));
      jDayChooser0.setFont((Font) null);
      jDayChooser0.drawDays();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-119), 0L, 12, 0, '?');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.770581544706131
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.lightGray;
      Color.getColor("day", color0);
      color0.getColorSpace();
      jDayChooser0.setWeekdayForeground(color0);
      Color color1 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDay(3);
      MockDate mockDate0 = new MockDate(3, 3, 3);
      Date date0 = jDayChooser0.setMinSelectableDate(mockDate0);
      date0.getTime();
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setDecorationBackgroundColor(color1);
      jDayChooser0.setMinSelectableDate(date1);
      assertEquals(3, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.60625553136712
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      StringContent stringContent0 = new StringContent((-1437625606));
      StyleContext styleContext0 = new StyleContext();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      styleContext0.addAttributes(attributeSet0, attributeSet0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      MenuSelectionManager.defaultManager();
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate((-2929), 6, (byte) (-92));
      MockDate.UTC(585, 8932, (-332), 19, (byte) (-92), 12);
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(2, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 22, "plugins.map.FreeMindMapController$SetHomeAction", 19);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      DefaultTableModel defaultTableModel1 = new DefaultTableModel();
      defaultTableModel0.fireTableStructureChanged();
      ActionEvent actionEvent1 = new ActionEvent(jDayChooser0, (-615), "fN.5&xy@(\"4Ui\"soO");
      actionEvent1.paramString();
      actionEvent1.setSource(defaultTableModel0);
      actionEvent1.paramString();
      JButton jButton0 = new JButton();
      ActionEvent actionEvent2 = new ActionEvent(jButton0, 0, "Windows", 19, 743);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.669576756952125
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      EmptySerializer emptySerializer0 = new EmptySerializer();
      emptySerializer0.getOutputFormat();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)66;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      MenuSelectionManager.defaultManager();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1642);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.838627116043149
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent("plugins.map.FreeMindMapController$SetHomeAction", 19, "31", 0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      actionEvent0.setSource(jDayChooser0);
      StringContent stringContent0 = new StringContent(19);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      jDayChooser0.focusGained(focusEvent0);
      Color color0 = MapView.standardNodeTextColor;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay(27);
      Color color1 = Color.ORANGE;
      jDayChooser1.setDecorationBackgroundColor((Color) null);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setMaxDayCharacters((-1036));
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser1.setFocus();
      assertEquals(27, jDayChooser1.getDay());
      
      jDayChooser2.isDecorationBackgroundVisible();
      jDayChooser2.addListeners(19);
      jDayChooser2.isDecorationBordersVisible();
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.832868554707763
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent("plugins.map.FreeMindMapController$SetHomeAction", 19, "31", 0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      actionEvent0.setSource(jDayChooser0);
      StringContent stringContent0 = new StringContent(19);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 19);
      jDayChooser0.focusGained(focusEvent0);
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.setDay((-1036));
      Color color1 = Color.ORANGE;
      jDayChooser0.setDecorationBackgroundColor(color1);
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setFocus();
      jDayChooser0.setEnabled(false);
      jDayChooser0.getLocale();
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7419541084422874
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.init();
      StyleContext styleContext0 = new StyleContext();
      StringContent stringContent0 = new StringContent(0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      MutableAttributeSet mutableAttributeSet0 = jTextPane0.getInputAttributes();
      styleContext0.getBackground(mutableAttributeSet0);
      jDayChooser1.getWeekdayForeground();
      jDayChooser0.getMaxDayCharacters();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(9999, "Q=o1");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.630470240160676
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getHeight();
      jDayChooser0.getSelectedDay();
      jDayChooser0.getHierarchyListeners();
      jDayChooser0.setDay((-4807));
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getDaysInMonth();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      jDayChooser0.setForeground(systemColor0);
      BrowseMode browseMode0 = new BrowseMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8980579323065547
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.getMaxSelectableDate();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setMaxDayCharacters(3526);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPanel0, 0, 2834L, 0, 0, '`', (MenuElement[]) null, (MenuSelectionManager) null);
      menuKeyEvent0.setSource((Object) null);
      jDayChooser0.keyTyped(menuKeyEvent0);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.initDecorations();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      jDayChooser0.init();
      StyleContext styleContext0 = new StyleContext();
      StringContent stringContent0 = new StringContent(0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      MutableAttributeSet mutableAttributeSet0 = jTextPane0.getInputAttributes();
      Color color0 = styleContext0.getBackground(mutableAttributeSet0);
      jDayChooser0.setWeekdayForeground(color0);
      Color color1 = jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, color1.getRed());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.75392703780395
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("s;iQ*]<\"7M{B", vetoableChangeListener0);
      ActionEvent actionEvent0 = new ActionEvent(vetoableChangeListenerProxy0, (-2796), "z]XRBUvM[nhVv", 118);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getClientProperty(actionEvent0);
      actionEvent0.setSource((Object) null);
      StringContent stringContent0 = new StringContent(300);
      StyleContext styleContext0 = new StyleContext();
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 300);
      jDayChooser0.focusGained(focusEvent0);
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.setDay(300);
      Color color1 = Color.ORANGE;
      Color color2 = Color.ORANGE;
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setMaxDayCharacters((-944));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      Color color0 = Color.lightGray;
      color0.getColorSpace();
      Color color1 = Color.yellow;
      MockDate mockDate0 = new MockDate(3, 3, 3);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      String string0 = "),&aT nyWx-";
      ActionEvent actionEvent0 = new ActionEvent("plugins.map.FreeMindMapController$SetHomeAction", 776, "),&aT nyWx-", 1754);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      actionEvent0.paramString();
      jDayChooser0.setForeground(systemColor0);
      BrowseMode browseMode0 = new BrowseMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.688993790313629
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      ActionEvent actionEvent0 = new ActionEvent("plugins.map.FreeMindMapController$SetHomeAction", 22, "d)/(x8j BD^JhhD+ND", 3406);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      actionEvent0.setSource(defaultTableModel0);
      StringContent stringContent0 = new StringContent(19);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      MenuSelectionManager.defaultManager();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3406, (-642L), (byte) (-92), 22, '');
      InputEvent.getModifiersExText((byte) (-92));
      keyEvent0.setKeyCode(12);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getSelectedDay();
      assertEquals(2, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JComponent.getDefaultLocale();
      jMonthChooser0.getName();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      // Undeclared exception!
      try { 
        jDayChooser0.getBaseline((-2754), (-2754));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width and height must be >= 0
         //
         verifyException("java.awt.Component", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.541357735141685
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775762L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(17, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ActionEvent actionEvent0 = new ActionEvent("plugins.map.FreeMindMapController$SetHomeAction", 19, "QjF6a]", 3406);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      actionEvent0.setSource(defaultTableModel0);
      StringContent stringContent0 = new StringContent(3499);
      StyleContext styleContext0 = new StyleContext();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      styleContext0.addAttributes(attributeSet0, attributeSet0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-92);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      MenuSelectionManager.defaultManager();
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate((byte) (-92), (byte) (-92), 3406);
      MockDate.UTC((byte) (-92), 18, 1630, 178, 178, 28);
      MockDate mockDate1 = new MockDate((byte) (-92), 178, 3499, 3499, 3406);
      jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7325637712329622
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 22, "plugins.map.FreeMindMapController$SetHomeAction", 19);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      StringContent stringContent0 = new StringContent(300);
      StyleContext styleContext0 = new StyleContext();
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 46);
      StringContent stringContent1 = new StringContent(19);
      StyleContext styleContext1 = new StyleContext();
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.setWeekdayForeground(color0);
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setSelectableDateRange(date1, date0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7385791605222836
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getName();
      jDayChooser0.setDay(48);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.value = 0;
      jDayChooser0.setMonth(14);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((MouseWheelListener) aWTEventMulticaster0, (MouseWheelListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) aWTEventMulticaster0);
      JDayChooser jDayChooser1 = new JDayChooser();
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.setDay(14);
      MenuSelectionManager.defaultManager();
      KeyEvent keyEvent0 = new KeyEvent(jYearChooser0, 48, 1024L, 567, (-2447), '1');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 22, "plugins.map.FreeMindMapController$SetHomeAction", 19);
      actionEvent0.setSource("plugins.map.FreeMindMapController$SetHomeAction");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      actionEvent0.setSource(defaultTableModel0);
      StringContent stringContent0 = new StringContent(300);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[3] = (byte)125;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)125;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      MenuSelectionManager.defaultManager();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8176716672820588
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser();
      String string0 = "17";
      jDayChooser0.setToolTipText("17");
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getDay();
      int int0 = 36;
      char char0 = 'l';
      MenuElement[] menuElementArray0 = new MenuElement[6];
      SchemeMode schemeMode0 = new SchemeMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(schemeMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7411208419017394
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent("plugins.map.FreeMindMapController$SetHomeAction", 19, "31", 0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      actionEvent0.setSource(jDayChooser0);
      StringContent stringContent0 = new StringContent(19);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 19);
      jDayChooser0.focusGained(focusEvent0);
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.setDay((-1036));
      Color color1 = Color.ORANGE;
      jDayChooser0.setDecorationBackgroundColor(color1);
      jDayChooser0.setMaxDayCharacters(2);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent("plugins.map.FreeMindMapController$SetHomeAtion", 19, "31", 0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      actionEvent0.setSource(jDayChooser0);
      StringContent stringContent0 = new StringContent(19);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      MockDate mockDate0 = new MockDate((-2929), (-3066), (-305));
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.863765544073182
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      Color color0 = jDayChooser0.getSundayForeground();
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      OsmTileSource.TilesAtHome osmTileSource_TilesAtHome0 = new OsmTileSource.TilesAtHome();
      int int0 = (-462);
      memoryTileCache0.getTile(osmTileSource_TilesAtHome0, (-3469), (-462), (-462));
      JMapViewer jMapViewer0 = new JMapViewer(memoryTileCache0, (-3469));
      TransformerFactoryImpl transformerFactoryImpl0 = new TransformerFactoryImpl();
      Color.getColor("/>_\"7%alT$u+jxw(~", color0);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.getDayPanel();
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      jDayChooser0.setSundayForeground(color0);
      int int1 = 3526;
      jDayChooser0.setMaxDayCharacters(3526);
      jDayChooser0.getWeekdayForeground();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "day";
      stringArray0[1] = "org/apache/xalan/res/XSLTInfo.properties";
      stringArray0[3] = "org/apache/xalan/res/XSLTInfo.properties";
      stringArray0[4] = "http://xml.apache.org/xalan/features/incremental";
      stringArray0[5] = "org/apache/xalan/res/XSLTInfo.properties";
      stringArray0[6] = "org/apache/xalan/res/XSLTInfo.properties";
      stringArray0[7] = "http://xml.apache.org/xalan/features/incremental";
      stringArray0[8] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.660726144843012
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser1.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.getUI();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5876788665337553
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      GapContent gapContent0 = new GapContent(1973);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getInputAttributes();
      StringContent stringContent0 = new StringContent(1839);
      StyleContext styleContext1 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(styleContext0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.firePropertyChange("22", (double) 1973, 286.1571004);
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5876788665337553
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      GapContent gapContent0 = new GapContent(1973);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getInputAttributes();
      StringContent stringContent0 = new StringContent(1839);
      StyleContext styleContext1 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(styleContext0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.firePropertyChange("22", (double) 1973, 286.1571004);
      jDayChooser1.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusDownCycle();
      jDayChooser0.firePropertyChange("#R.o.", (-2759), (-1351));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.794384563563956
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      jDayChooser0.init();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle(styleContext_NamedStyle0);
      Style style0 = jTextPane0.addStyle("'", styleContext_NamedStyle1);
      defaultStyledDocument0.addStyle("Windows", style0);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("0", vetoableChangeListener0);
      styleContext0.addAttribute(styleContext_NamedStyle0, defaultStyledDocument0, "Il4Hhrr-jbJb");
      StringContent stringContent0 = new StringContent(14);
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(styleContext0);
      Color color0 = Color.lightGray;
      jDayChooser0.setWeekdayForeground(color0);
      Color color1 = MapView.standardNodeTextColor;
      jDayChooser0.setDay(14);
      Color color2 = Color.ORANGE;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      
      jDayChooser0.setMaxDayCharacters(49);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6442551993262904
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      Color color0 = MapView.standardNodeTextColor;
      Color color1 = Color.ORANGE;
      SystemColor systemColor0 = SystemColor.textInactiveText;
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setFocus();
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.588251708495433
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      ActionEvent actionEvent0 = new ActionEvent("plugins.map.FreeMindMapController$SetHomeAction", 22, "d)/(x8j BD^JhhD+ND", 3406);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      actionEvent0.setSource(defaultTableModel0);
      StringContent stringContent0 = new StringContent(19);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      MenuSelectionManager.defaultManager();
      jDayChooser0.setMaxDayCharacters((byte) (-92));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(2, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6266116706270752
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      SchemeMode schemeMode0 = new SchemeMode();
      schemeMode0.getController();
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      databaseConnectionHook0.getMindMapController();
      EdgeWidthAction edgeWidthAction0 = null;
      try {
        edgeWidthAction0 = new EdgeWidthAction((MindMapController) null, (-236));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.mindmapmode.actions.NodeGeneralAction", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7325637712329622
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setSelectableDateRange(date0, (Date) null);
      SchemeMode schemeMode0 = new SchemeMode();
      SchemeMode schemeMode1 = new SchemeMode();
      schemeMode1.getController();
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      DatabaseConnectionHook databaseConnectionHook1 = new DatabaseConnectionHook();
      DatabaseConnectionHook databaseConnectionHook2 = new DatabaseConnectionHook();
      databaseConnectionHook2.getMindMapController();
      jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.780913602769236
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      jDayChooser0.init();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle(styleContext_NamedStyle0);
      Style style0 = jTextPane0.addStyle("'", styleContext_NamedStyle1);
      Style style1 = defaultStyledDocument0.addStyle("Windows", style0);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("pGKEKtC9%", vetoableChangeListener0);
      styleContext0.addAttribute(style1, styleContext_NamedStyle0, vetoableChangeListenerProxy0);
      StringContent stringContent0 = new StringContent(0);
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(styleContext0);
      Color color0 = Color.lightGray;
      jDayChooser0.setWeekdayForeground(color0);
      Color color1 = MapView.standardNodeTextColor;
      jDayChooser0.setDay((-1558));
      Color color2 = Color.ORANGE;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setDecorationBackgroundColor(color0);
      jDayChooser0.setMaxDayCharacters((-1558));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.630470240160676
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ActionEvent actionEvent0 = new ActionEvent("plugins.map.FreeMindMapController$SetHomeAction", 19, "QjF6a]", 3406);
      actionEvent0.paramString();
      actionEvent0.setSource("plugins.map.FreeMindMapController$SetHomeAction");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      actionEvent0.setSource(defaultTableModel0);
      StringContent stringContent0 = new StringContent(3499);
      StyleContext styleContext0 = new StyleContext();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      styleContext0.addAttributes(attributeSet0, attributeSet0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane();
      jTextPane0.getInputAttributes();
      Color color0 = Color.lightGray;
      color0.getColorSpace();
      Color color1 = Color.yellow;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-2022));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7325637712329622
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputMethodListeners();
      jDayChooser0.isValidateRoot();
      jDayChooser0.setMaxDayCharacters(92);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.addFocusListener((FocusListener) null);
      jDayChooser_DecoratorButton0.setFocusCycleRoot(false);
      jDayChooser_DecoratorButton0.firePropertyChange("day", 1.0, (-766.9851768324241));
      jDayChooser_DecoratorButton0.setVisible(false);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getWeekdayForeground();
      StringContent stringContent0 = new StringContent(1081);
      DefaultStyledDocument defaultStyledDocument0 = null;
      try {
        defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, (StyleContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7421583343393316
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)StrokingTextPainter.YPOS;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, 614, "day", 0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      ActionEvent actionEvent1 = new ActionEvent("31", 27, "plugins.map.FreeMindMapController$SetHomeAction");
      actionEvent1.setSource("plugins.map.FreeMindMapController$SetHomeAction");
      StringContent stringContent0 = new StringContent(27);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser1.setDay(19);
      MenuSelectionManager.defaultManager();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 26, 614, 4, 11, '1');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser1.setMonth(614);
      assertEquals(19, jDayChooser1.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      GapContent gapContent0 = new GapContent(1973);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getInputAttributes();
      Color color0 = Color.lightGray;
      color0.getColorSpace();
      Color color1 = Color.yellow;
      jDayChooser0.setWeekdayForeground(color1);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDay(3);
      assertEquals(3, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getUIClassID();
      jDayChooser0.setAlwaysFireDayProperty(false);
      TimeZone timeZone0 = TimeZone.getTimeZone("7.AIm^!OgPMk<A^");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "PanelUI";
      stringArray0[1] = "o2(kY";
      stringArray0[2] = "day";
      stringArray0[3] = "]";
      stringArray0[4] = "7.AIm^!OgPMk<A^";
      String[] stringArray1 = new String[0];
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      UnmarshallingContext unmarshallingContext0 = null;
      try {
        unmarshallingContext0 = new UnmarshallingContext((-3339), stringArray0, stringArray0, stringArray1, stringArray0, iBindingFactory0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6144130179623333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775762L);
      SchemeMode schemeMode0 = new SchemeMode();
      schemeMode0.getController();
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      DatabaseConnectionHook databaseConnectionHook1 = new DatabaseConnectionHook();
      DatabaseConnectionHook databaseConnectionHook2 = new DatabaseConnectionHook();
      databaseConnectionHook2.getMindMapController();
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }
}
