/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 01:19:59 GMT 2020
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.sql.compile.AggregateNode;
import org.apache.derby.impl.sql.compile.CreateIndexNode;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.store.access.heap.HeapController;
import org.databene.commons.version.VersionNumber;
import org.databene.commons.version.VersionNumberComponent;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBIndex;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.jca.FBConnectionRequestInfo;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.FBConnection;
import org.h2.engine.ConnectionInfo;
import org.h2.engine.SessionRemote;
import org.h2.value.ValueLob;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NCLOB");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "NCLOB";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NCLOB", defaultDBTable0, (-3546), "NCLOB");
      DBDataType dBDataType0 = DBDataType.getInstance(3503, "NCLOB");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("NCLOB", defaultDBTable0, dBDataType0, integer0, integer0);
      Vector<DBIndex> vector0 = new Vector<DBIndex>();
      defaultDBColumn1.toString();
      Integer integer1 = RawTransaction.ABORT;
      defaultDBColumn1.setFractionDigits(integer1);
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      defaultDBTable0.countProviders();
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      defaultDBColumn1.isIdentical(defaultDBColumn0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn0;
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      linkedBlockingQueue0.add(integer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer.max((-4080), 0);
      Boolean boolean0 = new Boolean(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean.valueOf("NCLOB");
      SQLUtil.parseColumnTypeAndSize("SKX");
      System.setCurrentTimeMillis((-3546));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-12);
      ValueLob valueLob0 = ValueLob.createSmallLob((-3863), byteArray0);
      Reader reader0 = valueLob0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      streamTokenizer0.pushBack();
      Vector<VersionNumberComponent> vector0 = new Vector<VersionNumberComponent>();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      streamTokenizer0.eolIsSignificant(false);
      VersionNumber versionNumber1 = VersionNumber.valueOf("sele]t ");
      VersionNumber.valueOf("3OqH'Fp`}cD&46=y");
      VersionNumber versionNumber2 = VersionNumber.valueOf((String) null);
      versionNumber1.compareTo(versionNumber2);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("drop materialized viewolter materialized viewd", "3OqH'Fp`}cD&46=y", versionNumber0);
      dBCatalog0.setDatabase(defaultDatabase0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "3OqH'Fp`}cD&46=y";
      stringArray0[2] = "3OqH'Fp`}cD&46=y";
      stringArray0[3] = "drop materialized viewolter materialized viewd";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      assertEquals("foreign key constraint constraint", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.685994205661393
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("U|[Q|K");
      String[] stringArray0 = new String[4];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("U|[Q|K", defaultDBTable0, (-3554), "U|[Q|K");
      defaultDBColumn0.setNullable(false);
      DBDataType dBDataType0 = DBDataType.getInstance(3503, "n%jb3id,-m3.B}&#U6");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = Integer.getInteger("", (-1115177992));
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1, integer1);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      Integer integer2 = RawTransaction.COMMIT;
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn1;
      Integer.max((-3554), (-463256631));
      dBColumnArray0[8] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.mutatesDataOrStructure("Olter materialized viewdOflate");
      SQLUtil.renderColumnTypeWithSize(dBColumnArray0[0]);
      SQLUtil.renderWhereClause(stringArray0, dBColumnArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray1 = new String[2];
      SQLUtil.renderQuery(defaultDBTable0, stringArray1, dBColumnArray0);
      SQLUtil.renderColumn(dBColumnArray0[0]);
      SQLUtil.renderColumnListWithTableName("v#r{n\"433", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.02065988387882
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[4];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9x%IARs%Wn");
      stringArray0[0] = "~jHmh";
      stringArray0[1] = "~jHmh";
      stringArray0[0] = "";
      stringArray0[3] = "9x%IARs%Wn";
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      Integer integer0 = new Integer(4586);
      linkedBlockingQueue0.add(integer0);
      int int0 = new Integer(4080);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      linkedBlockingQueue0.add(integer1);
      Integer integer2 = RawTransaction.ABORT;
      Integer integer3 = RawTransaction.ABORT;
      linkedBlockingQueue0.add(integer3);
      SQLUtil.normalize("", true);
      SQLUtil.isDDL("qi(YJ{41&P82y");
      SQLUtil.mutatesDataOrStructure("qi(YJ{41&P82y");
      SQLUtil.isQuery("EcSe\"6[J");
      SQLUtil.isQuery("S'R");
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0592293789763123
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      ValueLob valueLob0 = ValueLob.createSmallLob((-3852), byteArray0);
      Reader reader0 = valueLob0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.nval = 1.0;
      SQLUtil.renderNumber(streamTokenizer0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("1");
      assertNull(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6326309271543522
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "3";
      stringArray0[1] = null;
      stringArray0[2] = "ua!.j";
      stringArray0[3] = null;
      stringArray0[5] = null;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(stringArray0[6], defaultDBTable0, 32, "ua!.j");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint((byte)13);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      stringBuilder0.appendCodePoint((byte)13);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("\r\rUA!.J", stringBuilder0.toString());
      
      String[] stringArray1 = new String[5];
      stringArray1[0] = null;
      stringArray1[1] = "3";
      stringArray1[2] = "op_open/create_blob2 ";
      stringArray1[3] = null;
      defaultDBColumn0.setDefaultValue("JDc%E< D1w1,MT&DW");
      stringArray1[4] = null;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "|k3.ap";
      objectArray0[1] = (Object) stringArray1[3];
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) stringBuilder2;
      objectArray0[4] = (Object) "3";
      SQLUtil.renderQuery(defaultDBTable0, stringArray1, objectArray0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("null UA!.J DEFAULT JDc%E< D1w1,MT&DW NULL", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9072839993213795
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("U|[Q|K");
      String[] stringArray0 = new String[4];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("U|[Q|K", defaultDBTable0, (-3554), "U|[Q|K");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Update statement returned results.", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("U|[Q|K", false, dBPrimaryKeyConstraint0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex(" (", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex1.getTable();
      boolean boolean0 = false;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " (", false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.ownerDotComponent(defaultDBColumn0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBUniqueConstraint1, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec1);
      StringBuilder stringBuilder1 = stringBuilder0.append((-3554));
      int int0 = 2415;
      char[] charArray0 = new char[5];
      char char0 = 'n';
      charArray0[0] = 'n';
      charArray0[1] = 'y';
      charArray0[2] = 'W';
      charArray0[3] = 'e';
      charArray0[4] = 'a';
      // Undeclared exception!
      try { 
        stringBuilder1.insert(2415, charArray0, (-2021161078), (-1897));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2415
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("\u0001\u0001;\uFFFF\u0001\u0004\u0001\u0003\n\uFFFF\u0001\u0002");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique zindex");
      defaultDBTable0.getUniqueConstraint((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("create unique zindex", (String[]) null, "\u0001\u0001;\uFFFF\u0001\u0004\u0001\u0003\n\uFFFF\u0001\u0002", "\u0001\u0001;\uFFFF\u0001\u0004\u0001\u0003\n\uFFFF\u0001\u0002", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3161139232214873
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/TYW7|&-3?uK";
      stringArray0[1] = "/TYW7|&-3?uK";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "/TYW7|&-3?uK", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("/TYW7|&-3?uK", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "/TYW7|&-3?uK");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1);
      charArrayWriter1.write(330);
      dBUniqueIndex0.equals(charArrayWriter1);
      PrintWriter printWriter0 = mockPrintWriter0.format("/TYW7|&-3?uK", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, printWriter0);
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.parseColumnTypeAndSize("insert`y^j$5l#hps]1'}7eg7");
      String string0 = "create table|k3.apq'w~o@%n_5?f";
      SQLUtil.mutatesDataOrStructure("create table|k3.apq'w~o@%n_5?f");
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "(/TYW7|&-3?uK, /TYW7|&-3?uK)");
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = '|';
      charArray0[2] = '$';
      charArray0[3] = 'E';
      charArray0[4] = '@';
      charArray0[5] = '9';
      // Undeclared exception!
      try { 
        stringBuilder0.append(charArray0, (-447), 330);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = new Boolean("SELECT * FROM ");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "SELECT * FROM ");
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)3;
      StringBuilder stringBuilder0 = new StringBuilder((byte)3);
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      DBSchema dBSchema0 = new DBSchema("^nt*");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CLOB", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CLOB", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      dBForeignKeyConstraint0.setName((String) null);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      System.setCurrentTimeMillis(1L);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SELECT * FROM ";
      stringArray0[1] = "^nt*";
      stringArray0[2] = null;
      SQLUtil.renderColumnNames(stringArray0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("create table", stringBuilder0);
      assertEquals("null or create table", stringBuilder0.toString());
      assertEquals("null or create table", stringBuilder1.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5857708352080968
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("1", false, "^pP+$zgwr(hCW^8>)", "1");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "pdatenull = null and null = null and null = null and null = null and null = null and null = null");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("pdatenull = null and null = null and null = null and null = null and null = null and null = nullCONSTRAINT 1 ", stringBuilder0.toString());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view", (DBSchema) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "jdbc:columnlist:connection";
      stringArray0[1] = "escape";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "callktzmdrom7", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK 1", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "\u0001\u0001;\uFFFF\u0001\u0004\u0001\u0003\n\uFFFF\u0001\u0002";
      jdbcClob jdbcClob0 = new jdbcClob("\u0001\u0001;\uFFFF\u0001\u0004\u0001\u0003\n\uFFFF\u0001\u0002");
      String string1 = "|k3.ap";
      String string2 = "ua!.j";
      String string3 = "call";
      DBSchema dBSchema0 = new DBSchema("call");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|k3.ap", dBSchema0);
      String string4 = "(";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("|k3.ap", defaultDBTable0, 2279, "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[3] = (byte) (-1);
      Vector<VersionNumberComponent> vector0 = new Vector<VersionNumberComponent>();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "update");
      VersionNumber versionNumber0 = new VersionNumber(vector0, genericDescriptorList0);
      String string0 = "o|XhY1d=]wR@LaKJ|$";
      SQLUtil.isDDL("o|XhY1d=]wR@LaKJ|$");
      SQLUtil.mutatesDataOrStructure("update");
      Boolean boolean0 = new Boolean("y");
      SQLUtil.isQuery("z(6)");
      SQLUtil.isDML("~Eg{XDR':&");
      StringBuilder stringBuilder0 = new StringBuilder("tj0NogjjVYiMdIV");
      // Undeclared exception!
      try { 
        stringBuilder0.appendCodePoint((byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.177604496545693
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLUtil.isProcedureCall("|K3.apq'W~o@%N_5?f");
      Boolean boolean0 = new Boolean(false);
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("grwaWY?7!", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|K3.apq'W~o@%N_5?f", defaultDBTable0, (-1941475505), "|K3.apq'W~o@%N_5?f");
      DBDataType dBDataType0 = DBDataType.getInstance(3503, "`Y^J$5l#Hps]'}7EG7");
      Integer integer0 = new Integer(3503);
      Integer integer1 = RawTransaction.COMMIT;
      Integer.toUnsignedString(3503);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1, integer0);
      dBDataType0.isNumber();
      DBDataType.getInstance(3503, "|K3.apq'W~o@%N_5?f");
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("g!/qd8|\",={^O)", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.mutatesStructure("|K3.apq'W~o@%N_5?f");
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("", defaultDBTable0, 13, "alter materi");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      SQLUtil.isDML("`Y^J$5l#Hps]'}7EG7");
      columnDescriptorList0.add((DBColumn) defaultDBColumn1);
      SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
      System.setCurrentTimeMillis(1222L);
      SQLUtil.isDDL("alter materi");
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("executeolter materialized viewdoflate", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBCatalog dBCatalog0 = new DBCatalog("FA(?xP=+~!/Y'");
      dBCatalog0.equals(integer2);
      dBCatalog0.getTables();
      dBCatalog0.getTables();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = null;
      Character character0 = new Character('i');
      SQLUtil.renderValue(character0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8891591637540217
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("U|[Q|K");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "U|[Q|K";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("|k3.ap", true, defaultDBTable0, stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|k3.ap", defaultDBTable0, (-4458), "U|[Q|K");
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.appendCodePoint(1039);
      stringBuilder0.reverse();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SBgf1>a/LAC:s", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT SBgf1>a/LAC:s PRIMARY KEY (U|[Q|K, , , )", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6232347025221605
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("U|[Q|K");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("U|[Q|K", defaultDBTable0, (-3554), "U|[Q|K");
      DBDataType dBDataType0 = DBDataType.getInstance(3503, "n%jb3id,-m3.B}&#U6");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = Integer.getInteger("", (-1115177992));
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1, integer1);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.COMMIT;
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn1;
      defaultDBColumn0.getForeignKeyConstraint();
      dBColumnArray0[6] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.mutatesDataOrStructure("Olter materialized viewdOflate");
      SQLUtil.renderColumnTypeWithSize(dBColumnArray0[0]);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Olter materialized viewdOflate";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, dBColumnArray0);
      SQLUtil.renderColumn(dBColumnArray0[0]);
      Object object0 = new Object();
      columnDescriptorList0.add(object0);
      Random.setNextRandom(1960);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.395274179670176
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("U|[Q|K");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "U|[Q|K";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("U|[Q|K", defaultDBTable0, (-3550), "U|[Q|K");
      DBDataType dBDataType0 = DBDataType.getInstance(3503, "n%jb3id,-m3.B}&#U6");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("n%jb3id,-m3.B}&#U6", defaultDBTable0, dBDataType0, integer1, integer1);
      Vector<DBIndex> vector0 = new Vector<DBIndex>();
      Integer integer2 = RawTransaction.ABORT;
      defaultDBColumn1.setFractionDigits(integer2);
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("U|[Q|K, n%jb3id,-m3.B}&#U6, U|[Q|K, U|[Q|K, n%jb3id,-m3.B}&#U6, n%jb3id,-m3.B}&#U6, n%jb3id,-m3.B}&#U6, U|[Q|K, U|[Q|K", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized viewdeflate");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      SQLUtil.renderColumnTypeWithSize(dBColumnArray0[0]);
      String string1 = SQLUtil.renderWhereClause(stringArray0, dBColumnArray0);
      assertEquals("U|[Q|K = U|[Q|K : U|[Q|K AND null = n%jb3id,-m3.B}&#U6 : N%JB3ID,-M3.B}&#U6(2,1) AND null = U|[Q|K : U|[Q|K AND null = U|[Q|K : U|[Q|K", string1);
      
      String[] stringArray1 = new String[0];
      String string2 = SQLUtil.renderQuery(defaultDBTable0, stringArray1, dBColumnArray0);
      assertEquals("SELECT * FROM U|[Q|K WHERE ", string2);
      
      String string3 = SQLUtil.renderColumn(dBColumnArray0[6]);
      assertEquals("n%jb3id,-m3.B}&#U6 N%JB3ID,-M3.B}&#U6(2,1) NULL", string3);
      
      SQLUtil.renderColumnListWithTableName("m;h)J++", stringArray1);
      String string4 = SQLUtil.renderColumnTypeWithSize(dBColumnArray0[4]);
      assertEquals("N%JB3ID,-M3.B}&#U6(2,1)", string4);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.985053187904615
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("|K3.apq'W~o@%N_5?f");
      Boolean boolean1 = new Boolean(false);
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("$Om@AD/r'S{cm", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|K3.apq'W~o@%N_5?f", defaultDBTable0, (-1941475505), "|K3.apq'W~o@%N_5?f");
      DBDataType dBDataType0 = DBDataType.getInstance(3503, "`Y^J$5l#Hps]'}7EG7");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.toUnsignedString(3503);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1, integer0);
      dBDataType0.isNumber();
      DBDataType.getInstance(3503, "|K3.apq'W~o@%N_5?f");
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("g!/qd8|\",={^O)", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      Boolean boolean2 = SQLUtil.mutatesStructure("|K3.apq'W~o@%N_5?f");
      assertTrue(boolean2.equals((Object)boolean0));
      
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("", defaultDBTable0, 13, "alter materi");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.add((Object) defaultDBColumn4);
      columnDescriptorList0.add((DBColumn) defaultDBColumn1);
      String string1 = SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
      assertEquals(", ", string1);
      
      System.setCurrentTimeMillis(1222L);
      boolean boolean3 = SQLUtil.isDDL("alter materi");
      assertFalse(boolean3);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3942435448646626
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("|K3.apq'W~o@%N_5?f");
      Boolean boolean1 = Boolean.FALSE;
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("BLOBRELEASELOCATOR", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("BLOBRELEASELOCATOR");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|K3.apq'W~o@%N_5?f", defaultDBTable0, (-1941475505), "|K3.apq'W~o@%N_5?f");
      DBDataType dBDataType0 = DBDataType.getInstance(3503, "`Y^J$5l#Hps]'}7EG7");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger("|K3.apq'W~o@%N_5?f");
      Integer.toUnsignedString(3503);
      defaultDBTable0.setPrimaryKey((DBPrimaryKeyConstraint) null);
      Integer.sum(3503, (-1941475505));
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("Pg", defaultDBTable0, dBDataType0, integer1, integer0);
      DBDataType.getInstance(3503, "|K3.apq'W~o@%N_5?f");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("@", objectArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      Boolean boolean2 = SQLUtil.mutatesStructure("|K3.apq'W~o@%N_5?f");
      assertTrue(boolean2.equals((Object)boolean0));
      
      boolean boolean3 = SQLUtil.isDDL("@");
      assertFalse(boolean3);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6995441589246922
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PriorityBlockingQueue<DBForeignKeyConstraint> priorityBlockingQueue0 = new PriorityBlockingQueue<DBForeignKeyConstraint>();
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      priorityBlockingQueue0.removeAll(linkedBlockingQueue0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.retainAll(priorityBlockingQueue0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      LinkedBlockingQueue<Integer> linkedBlockingQueue1 = new LinkedBlockingQueue<Integer>();
      linkedBlockingQueue1.add(integer0);
      Integer.max((-2475), 4080);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      linkedBlockingQueue1.add(integer1);
      Integer integer2 = RawTransaction.ABORT;
      linkedBlockingQueue0.add(integer0);
      String string0 = SQLUtil.normalize("create tablesele]t * +rom", false);
      assertEquals("create tablesele ] t * + rom", string0);
      
      SQLUtil.mutatesStructure("Fpm!OFb+l1lcgy=");
      SQLUtil.isDDL("PRIMARY KEY ");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("escaped");
      assertNull(boolean0);
      
      SQLUtil.isQuery("PRIMARY KEY ");
      SQLUtil.isQuery("");
      boolean boolean1 = SQLUtil.isDML("updateprimary key");
      SQLUtil.isDDL("*07?I s6:D>xszH");
      boolean boolean2 = SQLUtil.isDDL("drop indexcallolter materialized viewdoflate");
      assertTrue(boolean2 == boolean1);
      
      String string1 = SQLUtil.substituteMarkers("", "sun.arch.data.model", (Object) null);
      assertEquals("", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5857708352080968
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("BLOBRELEASELOCATOR", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("BLOBRELEASELOCATOR");
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBDataType.getInstance(238, "}");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.toUnsignedString((-856));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-28);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "}", true, stringArray0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      NameSpec nameSpec2 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec2);
      DBSchema dBSchema0 = new DBSchema("|K3.apq'W~o@%N_5?f");
      dBSchema0.toString();
      NameSpec nameSpec3 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec3);
      stringBuilder1.append(1332);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT } CONSTRAINT } 1332", stringBuilder0.toString());
      
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec1);
      assertEquals("CONSTRAINT BLOBRELEASELOCATOR FOREIGN KEY (, , , , , ) REFERENCES null(, , , , , )", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)57;
      byteArray0[3] = (byte) (-12);
      ValueLob valueLob0 = ValueLob.createSmallLob((-3860), byteArray0);
      valueLob0.getReader();
      Boolean.valueOf((String) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4184836619456564
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "3";
      stringArray0[1] = null;
      stringArray0[2] = "ua!.j";
      stringArray0[3] = null;
      stringArray0[5] = null;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(stringArray0[6], defaultDBTable0, 32, "ua!.j");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint((byte)13);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      stringBuilder0.appendCodePoint((byte)13);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "|k3.ap";
      objectArray0[1] = (Object) "op_open/create_blob2 ";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) stringBuilder2;
      objectArray0[4] = (Object) "3";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PriorityBlockingQueue<DBForeignKeyConstraint> priorityBlockingQueue0 = new PriorityBlockingQueue<DBForeignKeyConstraint>();
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      linkedBlockingQueue0.containsAll(priorityBlockingQueue0);
      priorityBlockingQueue0.removeAll(linkedBlockingQueue0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) priorityBlockingQueue0;
      objectArray0[1] = (Object) genericDescriptorList0;
      objectArray0[2] = (Object) genericDescriptorList0;
      objectArray0[3] = (Object) genericDescriptorList0;
      objectArray0[4] = (Object) genericDescriptorList0;
      objectArray0[5] = (Object) linkedBlockingQueue0;
      genericDescriptorList0.removeAll(linkedBlockingQueue0);
      genericDescriptorList0.toArray(objectArray0);
      genericDescriptorList0.add((Object) linkedBlockingQueue0);
      genericDescriptorList0.retainAll(priorityBlockingQueue0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer.divideUnsigned((-2475), (-2475));
      LinkedBlockingQueue<Integer> linkedBlockingQueue1 = new LinkedBlockingQueue<Integer>();
      linkedBlockingQueue1.containsAll(linkedBlockingQueue0);
      linkedBlockingQueue1.add(integer0);
      Integer integer1 = new Integer(86);
      linkedBlockingQueue1.add(integer1);
      linkedBlockingQueue1.add(integer0);
      linkedBlockingQueue1.add(integer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer.max((-2475), (-2475));
      Boolean boolean0 = new Boolean(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean.valueOf("r!RxO~v5(H{Feo");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("r!RxO~v5(H{Feo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: r!RxO~v5(H{Feo
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.833785546820053
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("|K3.apq'W~o@%N_5?f");
      Boolean boolean1 = new Boolean(false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|K3.apq'W~o@%N_5?f", defaultDBTable0, (-1941475505), "|K3.apq'W~o@%N_5?f");
      DBDataType dBDataType0 = DBDataType.getInstance(3513, "`Y^J$5l#Hps]'}7EG7");
      Integer integer0 = new Integer(3513);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer.toUnsignedString(3513);
      dBDataType0.isNumber();
      DBDataType.getInstance(3513, "|K3.apq'W~o@%N_5?f");
      Integer integer2 = new Integer(3513);
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("Ul0%G", defaultDBTable0, dBDataType0, integer0);
      Boolean boolean2 = SQLUtil.mutatesStructure("|K3.apq'W~o@%N_5?f");
      assertFalse(boolean2);
      
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      boolean boolean3 = SQLUtil.isDML("`Y^J$5l#Hps]'}7EG7");
      assertTrue(boolean3 == boolean0);
      
      columnDescriptorList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
      assertEquals("|K3.apq'W~o@%N_5?f", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("\u0001\u0001;\uFFFF\u0001\u0004\u0001\u0003\n\uFFFF\u0001\u0002");
      SQLUtil.normalize("op_open/create_blob2 ", true);
      Boolean boolean0 = new Boolean("op_open / create_blob2");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("op_open/create_blob2 ");
      MockFile mockFile0 = new MockFile("op_open/create_blob2 ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("op_open / create_blob2", "5\")#", "_");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "\u0001\u0001;\uFFFF\u0001\u0004\u0001\u0003\n\uFFFF\u0001\u0002";
      objectArray0[1] = (Object) "Cp949C";
      objectArray0[2] = (Object) boolean0;
      objectArray0[3] = (Object) "Cp949C";
      objectArray0[4] = (Object) "op_open/create_blob2 ";
      objectArray0[5] = (Object) "op_open/create_blob2 ";
      Boolean.logicalAnd(true, true);
      objectArray0[6] = (Object) "Cp949C";
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "Cp949C", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      SQLUtil.normalize("5\")#", true);
      // Undeclared exception!
      try { 
        locale0.getExtension('1');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: 1
         //
         verifyException("java.util.Locale", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.570223120602395
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1625);
      Vector<DBIndex> vector0 = new Vector<DBIndex>();
      Integer integer0 = new Integer(1625);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("IT+FHw1;IcjB\"!&=Ui7");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("L/>LUp4T6.{g", defaultDBTable0, 1625, "L/>LUp4T6.{g");
      defaultDBColumn0.setFractionDigits(integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("IT+FHw1;IcjB\"!&=Ui7", defaultDBTable0, 3767, "T[,n");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("L/>LUp4T6.{g, IT+FHw1;IcjB\"!&=Ui7, L/>LUp4T6.{g, L/>LUp4T6.{g, L/>LUp4T6.{g, L/>LUp4T6.{g", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("org.hsqldb.Library.curdate");
      assertNull(boolean0);
      
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, dBColumnArray0);
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, dBColumnArray0);
      assertEquals("SELECT * FROM IT+FHw1;IcjB\"!&=Ui7 WHERE ", string1);
      
      String string2 = SQLUtil.renderColumn(dBColumnArray0[2]);
      assertEquals("L/>LUp4T6.{g L/>LUP4T6.{G NULL", string2);
      
      SQLUtil.renderColumnListWithTableName("q/xb", stringArray0);
      String string3 = SQLUtil.renderColumnTypeWithSize(dBColumnArray0[0]);
      assertEquals("L/>LUP4T6.{G", string3);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.310783678099714
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("JN[9LmYa");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "JN[9LmYa";
      stringArray0[1] = "JN[9LmYa";
      stringArray0[2] = "JN[9LmYa";
      stringArray0[3] = "JN[9LmYa";
      SQLUtil.mutatesStructure("execute*h<%csozizm");
      System.setCurrentTimeMillis((-1984L));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("NULLID");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$pOm@AD/rS{cm");
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("$pOm@AD/rS{cm", defaultDBTable0, (DBDataType) null, integer2, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5317846958283783
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("tZH.Y\"v@agLAK&", "", versionNumber0);
      defaultDatabase0.getTable("*/", false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "tZH.Y\"v@agLAK&";
      VersionNumber versionNumber1 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      versionNumber0.compareTo(versionNumber1);
      stringArray0[1] = "*/";
      stringArray0[2] = "";
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      Boolean boolean0 = new Boolean("*/");
      boolean boolean1 = SQLUtil.isDML("+}5l@My");
      defaultDatabase0.setTableInclusionPattern("^0x ?SIr*(mnf1b");
      TableContainer tableContainer0 = new TableContainer("c!~ps<VW(#", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("cre-ate table", (DBSchema) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c!~ps<VW(#", defaultDBTable0, 0, "");
      defaultDBColumn0.getForeignKeyConstraint();
      SQLUtil.join("7*dzV", "WT@qqlG![eLIB~+,1bD", stringArray0, "x3W=wIym47j:z'", "DflSl%jGUwT", stringArray0);
      SQLUtil.isQuery(".tZH.Y\"v@agLAK&, .*/, .");
      String string0 = SQLUtil.normalize("^0x ?SIr*(mnf1b", false);
      assertEquals("^ 0x ? SIr * (mnf1b", string0);
      
      SQLUtil.removeComments("^ 0x ? SIr * (mnf1b");
      boolean boolean2 = SQLUtil.isQuery("create tablef");
      assertTrue(boolean2 == boolean1);
      
      System.setCurrentTimeMillis(0);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9080368345090655
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "execute";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("MATERIALIZE", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("/!diJF'>", stringBuilder0);
      stringBuilder1.append((Object) "MATERIALIZE");
      SQLUtil.ownerDotComponent(defaultDBTable0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "execute", true, stringArray0);
      stringBuilder2.append(1040);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-77);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf("INT4", (Object[]) stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertEquals(71, dynamicByteArrayOutputStream0.getUsed());
      assertEquals(71, dynamicByteArrayOutputStream0.getPosition());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0114042647073518
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.elements();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.COMMIT;
      String string0 = ",OJ,#eu:cs^";
      SQLUtil.isDDL(",OJ,#eu:cs^");
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      Integer integer5 = RawTransaction.SAVEPOINT_ROLLBACK;
      int int0 = 18;
      DBDataType.getInstance(18, "truncate|k3.apq'w~o@%");
      Integer integer6 = RawTransaction.SAVEPOINT_ROLLBACK;
      // Undeclared exception!
      SQLUtil.isProcedureCall("z%ms:w.^U3/*");
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "|K3.apq'W~o@%N_5?f";
      SQLUtil.isProcedureCall("|K3.apq'W~o@%N_5?f");
      Boolean boolean0 = new Boolean(false);
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("$Om@AD/r'S{cm", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|K3.apq'W~o@%N_5?f", defaultDBTable0, (-1941475505), "|K3.apq'W~o@%N_5?f");
      DBDataType.getInstance(3503, "`Y^J$5l#Hps]'}7EG7");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.toUnsignedString(3503);
      defaultDBTable0.setPrimaryKey((DBPrimaryKeyConstraint) null);
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("MATERIALIZE", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(2.147483648E9);
      SQLUtil.addRequiredCondition("MATERIALIZE", stringBuilder0);
      Object object0 = new Object();
      stringBuilder2.append(object0);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      String string0 = ", external id = ";
      String[] stringArray0 = new String[16];
      stringArray0[0] = ":%f$EHNkO0TjI>Q>";
      stringArray0[1] = ", external id = ";
      stringArray0[2] = ", external id = ";
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint(":%f$EHNkO0TjI>Q>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "drop t";
      stringArray0[1] = "drop table";
      stringArray0[2] = "olter materialized viewd";
      stringArray0[3] = "alter session";
      stringArray0[4] = "DZWk{XW,r C> #";
      stringArray0[5] = "Result set type changed. ResultSet.TYPE_SCROLL_SENSITIVE is not supported.";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "alter session";
      objectArray0[1] = (Object) "alter session";
      objectArray0[2] = (Object) "Result set type changed. ResultSet.TYPE_SCROLL_SENSITIVE is not supported.";
      objectArray0[3] = (Object) "olter materialized viewd";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[3] = (byte) (-12);
      ValueLob valueLob0 = ValueLob.createSmallLob((-3863), byteArray0);
      Reader reader0 = valueLob0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(reader0);
      streamTokenizer1.nval = (-1.0);
      streamTokenizer1.lowerCaseMode(true);
      SQLUtil.renderNumber(streamTokenizer1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, ".yVKd*(#p^E", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)3;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("cc(78xrLMo2UpwK2aQ");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)65;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "L022";
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "SELECT * FROM ";
      objectArray0[6] = (Object) (byte)3;
      DBDataType dBDataType0 = DBDataType.getInstance((int) (byte)3, "AX}H's");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("cc(78xrLMo2UpwK2aQ", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("AX}H'S(2)", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "~jHmh";
      stringArray0[1] = "~jHmh";
      stringArray0[2] = "";
      stringArray0[3] = "9@x%IARs%Xn";
      String[] stringArray1 = new String[18];
      stringArray1[0] = "~jHmh";
      String string1 = "alter index";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "alter index");
      SQLUtil.join("~jHmh", "~jHmh", stringArray1, "~jHmh", "~jHmh", stringArray1);
      int int0 = 189;
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("alter table", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7214023220140038
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("SELECT * FROM ");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "BLOBRELEASELOCATOR";
      stringArray0[1] = "SELECT * FROM ";
      stringArray0[2] = "BLOBRELEASELOCATOR";
      stringArray0[3] = "7fc2+mms";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("7fc2+mms", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("There are no rows in this ResultSet.");
      boolean boolean2 = SQLUtil.isDDL("executedate");
      assertFalse(boolean2);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.2554823251787535
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLUtil.isQuery("SELE]T * +ROM ");
      HeapController heapController0 = new HeapController();
      CreateIndexNode createIndexNode0 = new CreateIndexNode();
      CreateIndexNode createIndexNode1 = new CreateIndexNode();
      boolean boolean0 = SQLUtil.isQuery("%|X0p");
      assertFalse(boolean0);
      
      boolean boolean1 = SQLUtil.isDML("mk2bh<7");
      boolean boolean2 = SQLUtil.isDDL("rename\"c]kib!^z/g");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.833785546820053
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLUtil.isQuery("SELE]T * +ROM ");
      HeapController heapController0 = new HeapController();
      CreateIndexNode createIndexNode0 = new CreateIndexNode();
      CreateIndexNode createIndexNode1 = new CreateIndexNode();
      SQLUtil.mutatesStructure("[}Nu__B");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      SQLUtil.isDML("create unique index");
      columnDescriptorList0.add((DBColumn) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("U|[Q|K");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "U|[Q|K";
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)119;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "|'m{ s.2SPoXkc~}fN", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec1);
      DBSchema dBSchema0 = new DBSchema(":curBytePos=");
      dBSchema0.toString();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append(734);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-1969348332), 236.34F);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1969348332
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6326309271543518
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      DBSchema dBSchema0 = new DBSchema("pos and flags: ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("pos and flags: ", dBSchema0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "pos and flags: ";
      stringArray0[1] = "pos and flags: ";
      stringArray0[2] = "inner";
      stringArray0[3] = "pos and flags: ";
      stringArray0[4] = "pos and flags: ";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop materialized view10.6", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"drop materialized view10.6\" FOREIGN KEY (pos and flags: , pos and flags: , inner, pos and flags: , pos and flags: ) REFERENCES pos and flags: (pos and flags: , pos and flags: , inner, pos and flags: , pos and flags: )", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-12);
      ValueLob valueLob0 = ValueLob.createSmallLob((-3860), byteArray0);
      Reader reader0 = valueLob0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4142351166063802
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DBSchema dBSchema0 = new DBSchema("org.hsqldb.jdbc.jdbcPreparedStatement");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "lNW+VeL.Uhhu}Y(LjVr";
      stringArray0[1] = "lNW+VeL.Uhhu}Y(LjVr";
      stringArray0[2] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "lNW+VeL.Uhhu}Y(LjVr", true, stringArray0);
      defaultDBTable0.countProviders();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      dBSchema0.toString();
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec1);
      stringBuilder0.append(300);
      NameSpec nameSpec2 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec2);
      assertEquals("CONSTRAINT lNW+VeL.Uhhu}Y(LjVr CONSTRAINT lNW+VeL.Uhhu}Y(LjVr 300CONSTRAINT lNW+VeL.Uhhu}Y(LjVr ", stringBuilder0.toString());
      
      SQLUtil.mutatesDataOrStructure("lNW+VeL.Uhhu}Y(LjVr");
      NameSpec nameSpec3 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec3);
      assertEquals("CONSTRAINT lNW+VeL.Uhhu}Y(LjVr UNIQUE (lNW+VeL.Uhhu}Y(LjVr, lNW+VeL.Uhhu}Y(LjVr, )", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("\u0001\u0001;\uFFFF\u0001\u0004\u0001\u0003\n\uFFFF\u0001\u0002");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("lNW+VeL.Uhhu}Y(LjVr");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\u0001\u0001;\uFFFF\u0001\u0004\u0001\u0003\n\uFFFF\u0001\u0002";
      stringArray0[1] = null;
      stringArray0[2] = "\u0001\u0001;\uFFFF\u0001\u0004\u0001\u0003\n\uFFFF\u0001\u0002";
      stringArray0[3] = "lNW+VeL.Uhhu}Y(LjVr";
      stringArray0[4] = null;
      stringArray0[5] = "lNW+VeL.Uhhu}Y(LjVr";
      stringArray0[6] = "lNW+VeL.Uhhu}Y(LjVr";
      stringArray0[7] = "\u0001\u0001;\uFFFF\u0001\u0004\u0001\u0003\n\uFFFF\u0001\u0002";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("\u0001\u0001;\uFFFF\u0001\u0004\u0001\u0003\n\uFFFF\u0001\u0002", dBCatalog0);
      dBSchema0.toString();
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = stringBuilder0.append((-1775.0F));
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec1);
      StringBuilder stringBuilder3 = stringBuilder1.append(300);
      NameSpec nameSpec2 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder4 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder3, nameSpec2);
      assertSame(stringBuilder4, stringBuilder2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PriorityBlockingQueue<DBForeignKeyConstraint> priorityBlockingQueue0 = new PriorityBlockingQueue<DBForeignKeyConstraint>();
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      linkedBlockingQueue0.containsAll(priorityBlockingQueue0);
      priorityBlockingQueue0.removeAll(linkedBlockingQueue0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      SQLUtil.normalize(")=id]p,%wEqf{", false);
      Boolean boolean0 = new Boolean(")=id]p,%wEqf{");
      SessionRemote sessionRemote0 = new SessionRemote();
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DBDataType.getInstance(3503, "org.h2.util.CacheObject");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger("\u0001\u00B0", (-3016));
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer3 = RawTransaction.ABORT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getColumns();
      defaultDBTable0.countProviders();
      defaultDBTable0.getIndexes();
      Integer integer4 = RawTransaction.COMMIT;
      Integer integer5 = RawTransaction.COMMIT;
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      Integer integer6 = new Integer((-1115177992));
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5883156848346471
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PriorityBlockingQueue<DBForeignKeyConstraint> priorityBlockingQueue0 = new PriorityBlockingQueue<DBForeignKeyConstraint>();
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      priorityBlockingQueue0.removeAll(linkedBlockingQueue0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.retainAll(priorityBlockingQueue0);
      Integer integer0 = new Integer((-2475));
      LinkedBlockingQueue<Integer> linkedBlockingQueue1 = new LinkedBlockingQueue<Integer>();
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      linkedBlockingQueue1.add(integer1);
      Integer integer2 = RawTransaction.ABORT;
      linkedBlockingQueue0.add(integer0);
      SQLUtil.normalize("create tablesele]t * +rom", false);
      SQLUtil.isDDL("PRIMARY KEY ");
      SQLUtil.mutatesDataOrStructure("delete");
      SQLUtil.isQuery("S'R");
      SQLUtil.isQuery("openleInputY Stream");
      SQLUtil.isDML("S'R");
      SQLUtil.isDDL("create tablesele]t * +rom");
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("create tablesele ] t * + rom", "alter materialized viewcheck", versionNumber0);
      defaultDatabase0.getCatalog("create materialized viewprimary key");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6726254461503207
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("BLOBRELEASELOCATOR", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("BLOBRELEASELOCATOR");
      DBDataType.getInstance(238, "}");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer.toUnsignedString((-856));
      System.setCurrentTimeMillis(238);
      boolean boolean1 = SQLUtil.isDDL("|K3.apq'W~o@%N_5?f");
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Character character0 = new Character('@');
      String string0 = SQLUtil.substituteMarkers("5H[y= @q4ddl{", "5H[y= @q4ddl{", character0);
      assertEquals("'@'", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4294966440");
      MockPrintStream mockPrintStream0 = new MockPrintStream("select into|k3.apq'w~o@%n_5?f");
      boolean boolean2 = SQLUtil.isDML("5H[y= @q4ddl{");
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = SQLUtil.isQuery("73JoVAmZ;mpI\"4\"tN/F");
      assertFalse(boolean3);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLUtil.isQuery("SEQUENCEID");
      SQLUtil.renderValue("SEQUENCEID");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_iH";
      stringArray0[1] = "'SEQUENCEID'";
      stringArray0[2] = "'SEQUENCEID'";
      stringArray0[3] = "_iH";
      stringArray0[4] = "SEQUENCEID";
      stringArray0[5] = "_iH";
      stringArray0[6] = "SEQUENCEID";
      stringArray0[7] = "'SEQUENCEID'";
      SQLUtil.renderColumnListWithTableName("_iH", stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.1732052067491771
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PriorityBlockingQueue<DBForeignKeyConstraint> priorityBlockingQueue0 = new PriorityBlockingQueue<DBForeignKeyConstraint>();
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      linkedBlockingQueue0.containsAll(priorityBlockingQueue0);
      priorityBlockingQueue0.removeAll(linkedBlockingQueue0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.retainAll(priorityBlockingQueue0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      LinkedBlockingQueue<Integer> linkedBlockingQueue1 = new LinkedBlockingQueue<Integer>();
      linkedBlockingQueue1.add(integer0);
      Integer.max((-2475), 4080);
      Integer.compare(4080, (-3511));
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      linkedBlockingQueue1.add(integer1);
      Integer integer2 = RawTransaction.ABORT;
      linkedBlockingQueue0.add(integer0);
      SQLUtil.normalize("create tablesele]t * +rom", false);
      GDSType.getType("execute");
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mB<!Kyz1");
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(8);
      streamTokenizer0.slashStarComments(false);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "6";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.elements();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBCatalog dBCatalog0 = new DBCatalog();
      Object[] objectArray0 = new Object[1];
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("9q", "W", versionNumber0);
      defaultDatabase0.getTable("select into", false);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("NULLLID");
      jdbcClob jdbcClob1 = new jdbcClob("$pOm@AD/rS{cm");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "$pOm@AD/rS{cm";
      stringArray0[1] = "NULLLID";
      stringArray0[2] = "$pOm@AD/rS{cm";
      stringArray0[3] = "NULLLID";
      stringArray0[5] = "NULLLID";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "NULLLID", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ($pOm@AD/rS{cm, NULLLID, $pOm@AD/rS{cm, NULLLID, , NULLLID)", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("n}Y)(.", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.6326309271543522
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "3";
      stringArray0[1] = null;
      stringArray0[2] = "ua!.j";
      stringArray0[3] = null;
      stringArray0[5] = null;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(stringArray0[6], defaultDBTable0, 32, "ua!.j");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint((byte)13);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      stringBuilder0.appendCodePoint((byte)13);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("\r\rUA!.J", stringBuilder0.toString());
      
      String[] stringArray1 = new String[5];
      stringArray1[0] = null;
      stringArray1[1] = "3";
      stringArray1[2] = "op_open/create_blob2 ";
      stringArray1[3] = null;
      stringArray1[4] = null;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "|k3.ap";
      objectArray0[1] = (Object) stringArray1[3];
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) stringBuilder2;
      objectArray0[4] = (Object) "3";
      SQLUtil.renderQuery(defaultDBTable0, stringArray1, objectArray0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("null UA!.J NULL", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PriorityBlockingQueue<DBForeignKeyConstraint> priorityBlockingQueue0 = new PriorityBlockingQueue<DBForeignKeyConstraint>();
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      linkedBlockingQueue0.containsAll(priorityBlockingQueue0);
      priorityBlockingQueue0.removeAll(linkedBlockingQueue0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) linkedBlockingQueue0);
      genericDescriptorList0.retainAll(priorityBlockingQueue0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      LinkedBlockingQueue<Integer> linkedBlockingQueue1 = new LinkedBlockingQueue<Integer>();
      linkedBlockingQueue1.add(integer0);
      linkedBlockingQueue1.add(integer0);
      Boolean boolean0 = new Boolean(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean.valueOf("r!RxO~v5(H{Feo");
      String string0 = SQLUtil.normalize("r!RxO~v5(H{Feo", true);
      assertEquals("r ! RxO ~ v5 (H { Feo", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "U|[Q|K";
      jdbcClob jdbcClob0 = new jdbcClob("U|[Q|K");
      jdbcClob jdbcClob1 = new jdbcClob("");
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "SELECT * FROM ";
      SQLUtil.isQuery("SELECT * FROM ");
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection0).getConnectionRequestInfo();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer("vl^QX$R5");
      SQLUtil.addRequiredCondition("vl^QX$R5", stringBuilder0);
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer1.reverse();
      stringBuffer1.chars();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("vl^QX$R5", stringBuilder0);
      stringBuilder1.append(stringBuffer0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-23), (CharSequence) stringBuilder0, (-1295), (-1540));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -23
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1625);
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      Integer integer0 = RawTransaction.COMMIT;
      linkedBlockingQueue0.add(integer0);
      Integer.max(10, 1625);
      linkedBlockingQueue0.remove();
      Integer.compare(10, 10);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      linkedBlockingQueue0.add(integer0);
      Integer integer2 = RawTransaction.ABORT;
      linkedBlockingQueue0.add(integer0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PriorityBlockingQueue<DBForeignKeyConstraint> priorityBlockingQueue0 = new PriorityBlockingQueue<DBForeignKeyConstraint>();
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      priorityBlockingQueue0.removeAll(linkedBlockingQueue0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.retainAll(priorityBlockingQueue0);
      Integer integer0 = new Integer((-2475));
      LinkedBlockingQueue<Integer> linkedBlockingQueue1 = new LinkedBlockingQueue<Integer>();
      linkedBlockingQueue1.add(integer0);
      Integer.max((-2475), 4080);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      linkedBlockingQueue1.add(integer1);
      Integer integer2 = RawTransaction.ABORT;
      DBCatalog dBCatalog0 = new DBCatalog("create tablesele]t * +rom");
      Vector<VersionNumberComponent> vector0 = new Vector<VersionNumberComponent>();
      GenericDescriptorList genericDescriptorList1 = new GenericDescriptorList();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      VersionNumber versionNumber0 = new VersionNumber(vector0, arrayList0);
      VersionNumber versionNumber1 = VersionNumber.valueOf("SYSCONGLOMERATES");
      versionNumber0.compareTo(versionNumber1);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("rule expression", "Illegal column type format: ", versionNumber0);
      dBCatalog0.setDatabase(defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("C3zY3}#BJ.");
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema C3zY3}#BJ.", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.parseColumnTypeAndSize("javac");
      String[] stringArray0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "rE,OJ29Xii2");
      String string0 = "alter index5q1d$^2t4f402++xy";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("Blw;t6", (String[]) null, "alter index5q1d$^2t4f402++xy", "PGtr", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("I/", "I/", versionNumber0);
      defaultDatabase0.getTable("I/", false);
      PriorityBlockingQueue<DBForeignKeyConstraint> priorityBlockingQueue0 = new PriorityBlockingQueue<DBForeignKeyConstraint>();
      priorityBlockingQueue0.iterator();
      priorityBlockingQueue0.removeAll(genericDescriptorList0);
      genericDescriptorList0.retainAll(priorityBlockingQueue0);
      genericDescriptorList0.elements();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-12);
      ValueLob valueLob0 = ValueLob.createSmallLob((-3863), byteArray0);
      Reader reader0 = valueLob0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      streamTokenizer0.pushBack();
      Vector<VersionNumberComponent> vector0 = new Vector<VersionNumberComponent>();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(vector0, genericDescriptorList0);
      streamTokenizer0.eolIsSignificant(true);
      VersionNumber versionNumber1 = VersionNumber.valueOf((String) null);
      VersionNumber.valueOf((String) null);
      VersionNumber.valueOf(".Q6:~hrz");
      versionNumber0.compareTo(versionNumber1);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, (String) null, versionNumber0);
      dBCatalog0.setDatabase(defaultDatabase0);
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "%h\\u~LNv<DCg";
      stringArray0[0] = string0;
      stringArray0[1] = "dh?uek$xm.^eaav@lpa";
      SQLUtil.normalize("()=]", true);
      Boolean boolean0 = new Boolean("dh?uek$xm.^eaav@lpa");
      SessionRemote sessionRemote0 = new SessionRemote();
      Connection connection0 = sessionRemote0.getLobConnection();
      assertNull(connection0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "XMLExists";
      SQLUtil.removeComments("");
      String string1 = "+";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "~jHmh";
      stringArray0[1] = "~jHmh";
      stringArray0[2] = "";
      stringArray0[3] = "9@x%IARs%Xn";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("9@x%IARs%Xn", true, defaultDBTable0, stringArray0);
      defaultDBTable0.removeIndex(dBNonUniqueIndex0);
      String[] stringArray1 = new String[18];
      stringArray1[0] = "~jHmh";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "alter index");
      DBNonUniqueIndex dBNonUniqueIndex1 = new DBNonUniqueIndex("y>SV.$A2T{d)|", true, defaultDBTable0, stringArray1);
      SQLUtil.join("~jHmh", "~jHmh", stringArray1, "~jHmh", "~jHmh", stringArray1);
      SessionRemote sessionRemote0 = new SessionRemote();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(248);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.printf("\u0001`", (Object[]) stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("qVz,", defaultDBTable0, (-247508598), "\u0001`");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("cc(78xrLMo2UpwK2aQ");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)69;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "executed*ipa`");
      MockPrintStream mockPrintStream0 = new MockPrintStream("SELECT * FROM ");
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.format((Locale) null, "SELECT * FROM ", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("SELECT * FROM ");
      mockPrintStream1.print(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      mockPrintWriter0.printf("\"\"r+Ap.KTr<Xhj8[H", objectArray0);
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.elements();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.COMMIT;
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("select|k3.apq'w~o@%", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter sessioncreate tableforeign key");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBCatalog dBCatalog0 = new DBCatalog("FA(?xP=+~!/Y'");
      dBCatalog0.equals(integer2);
      dBCatalog0.getTables();
      dBCatalog0.getTables();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Object[] objectArray0 = new Object[6];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"w_3\"K.F}AkE");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Transaction isolation level ");
      // Undeclared exception!
      try { 
        SQLUtil.join("alter index", "9x%IARs%Wn", (String[]) null, "Transaction isolation level ", "alter index", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      String[] stringArray0 = new String[5];
      Integer integer2 = RawTransaction.ABORT;
      Integer.getInteger("Q-Yp:v2N PI4Zd4", integer2);
      stringArray0[0] = "Q-Yp:v2N PI4Zd4";
      stringArray0[1] = "";
      String string0 = SQLUtil.normalize("Q-Yp:v2N PI4Zd4", false);
      assertEquals("Q - Yp : v2N PI4Zd4", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("isNot");
      SQLUtil.mutatesDataOrStructure("isNot");
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[3] = (byte) (-12);
      ValueLob valueLob0 = ValueLob.createSmallLob((-3863), byteArray0);
      Reader reader0 = valueLob0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      streamTokenizer0.pushBack();
      Vector<VersionNumberComponent> vector0 = new Vector<VersionNumberComponent>();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(vector0, genericDescriptorList0);
      streamTokenizer0.quoteChar(3);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      defaultDBTable0.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "~jHmh";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)81;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      mockPrintWriter1.printf("exec", (Object[]) stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "jjqH#mgP2V?";
      stringArray1[1] = "~jHmh";
      stringArray1[2] = "@/<X";
      // Undeclared exception!
      try { 
        SQLUtil.join("@/<X", "jjqH#mgP2V?", stringArray0, "", "", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = new Boolean("|K3.ap*q'W~o@%N_5?f");
      Boolean boolean1 = SQLUtil.mutatesStructure("create unique index");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PriorityBlockingQueue<DBForeignKeyConstraint> priorityBlockingQueue0 = new PriorityBlockingQueue<DBForeignKeyConstraint>();
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      priorityBlockingQueue0.removeAll(linkedBlockingQueue0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.retainAll(priorityBlockingQueue0);
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[1];
      Integer integer0 = new Integer((-2475));
      linkedBlockingQueue0.add(integer0);
      Integer integer1 = RawTransaction.ABORT;
      linkedBlockingQueue0.add(integer1);
      stringArray1[0] = "imp&`'FKR+?p";
      boolean boolean0 = SQLUtil.isQuery("imp&`'FKR+?p");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("renamealter materi");
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = SQLUtil.mutatesStructure("MM(ck?C-L~J)");
      assertTrue(boolean2.equals((Object)boolean0));
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.324309430944521
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLUtil.isDML("|K3.apq'W~o@%N_5?f");
      SQLUtil.mutatesDataOrStructure("|K3.apq'W~o@%N_5?f");
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("BLOBRELEASELOCATOR", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("BLOBRELEASELOCATOR");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      SQLUtil.isProcedureCall("execut");
      SQLUtil.mutatesStructure("`Y^J$5l#Hps]'}7EG7");
      System.setCurrentTimeMillis((-1534L));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[6] = "~jHmh";
      stringArray0[4] = "~jHmh";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "dk%_9f";
      stringArray0[8] = "~jHmh";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" and ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("3=21E", defaultDBTable0, (-5053), "3=21E");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CreateIndexNode createIndexNode0 = new CreateIndexNode();
      CreateIndexNode createIndexNode1 = new CreateIndexNode();
      CreateIndexNode createIndexNode2 = new CreateIndexNode();
      SessionRemote sessionRemote0 = new SessionRemote();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = SQLUtil.join("", ".5/=7=3d$cC(ZM/", stringArray0, "hyh.7'OGz", "different", stringArray0);
      assertEquals("hyh.7'OGz as different on .5/=7=3d$cC(ZM/. = different.", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call", (DBSchema) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "out of memory";
      stringArray0[1] = "call";
      stringArray0[2] = "`y^j$5";
      stringArray0[3] = "|k3.apq'w~o@";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "|k3.apq'w~o@", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("`y^j$5l#hps", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "out of memory", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"out of memory\" PRIMARY KEY (out of memory, call, `y^j$5, |k3.apq'w~o@)", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "";
      int int0 = 436;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder("R8,l)y7_SJ8");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLUtil.normalize("9d.luP{q}:R]&0s", true);
      System.setCurrentTimeMillis((-1148L));
  }

  /**
  //Test case number: 89
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("amz^-z]i");
      SQLUtil.normalize("'", true);
      Boolean boolean0 = new Boolean("'");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter indexamz^-z]i.qn<x%twdb");
      MockFile mockFile0 = new MockFile("''");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.PRC;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "HXim<!ng&@(v";
      objectArray0[1] = (Object) "Cp949C";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "8W", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        locale0.getExtension('1');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: 1
         //
         verifyException("java.util.Locale", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = new String[4];
      stringArray1[1] = "Unknown constraint type: ";
      stringArray1[2] = "Unknown constraint type: ";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("Unknown constraint type: ", stringArray1, "+f5dC+~_UbF", "&N6y'T^.", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, ")%U~Mg;fX6K-;B-:e", ")%U~Mg;fX6K-;B-:e", stringArray0);
      assertEquals(")%U~Mg;fX6K-;B-:e as )%U~Mg;fX6K-;B-:e on null.null = )%U~Mg;fX6K-;B-:e.null", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "I0hANmk";
      stringArray0[1] = "I0hANmk";
      stringArray0[2] = "[0p[8)Ndql=e%y";
      stringArray0[3] = "I0hANmk";
      stringArray0[4] = "I0hANmk";
      stringArray0[5] = "I0hANmk";
      String string0 = SQLUtil.innerJoin("I0hANmk", stringArray0, "create mater", "I0hANmk", stringArray0);
      assertEquals("create mater as I0hANmk on I0hANmk.I0hANmk = I0hANmk.I0hANmk and I0hANmk.I0hANmk = I0hANmk.I0hANmk and I0hANmk.[0p[8)Ndql=e%y = I0hANmk.[0p[8)Ndql=e%y and I0hANmk.I0hANmk = I0hANmk.I0hANmk and I0hANmk.I0hANmk = I0hANmk.I0hANmk and I0hANmk.I0hANmk = I0hANmk.I0hANmk", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I6%#V%Ig>6");
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "ALTER TABLE ";
      stringArray0[8] = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ", ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("m$7SfIZdkG~]JI9", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[0], false, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , , ALTER TABLE , ) REFERENCES null(, , , , , , , ALTER TABLE , )", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("NULLLID");
      jdbcClob jdbcClob1 = new jdbcClob("$pOm@AD/rS{cm");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "$pOm@AD/rS{cm";
      stringArray0[1] = "NULLLID";
      stringArray0[5] = "$pOm@AD/rS{cm";
      stringArray0[3] = "NULLLID";
      stringArray0[5] = "NULLLID";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "NULLLID", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ($pOm@AD/rS{cm, NULLLID, , NULLLID, , NULLLID)", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CreateIndexNode createIndexNode0 = new CreateIndexNode();
      VersionNumber versionNumber0 = VersionNumber.valueOf("9C:k5-=xVd-!mDY");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("9C:k5-=xVd-!mDY", "drop materialized view", versionNumber0);
      defaultDatabase0.getTable("drop materialized view", false);
      DBDataType dBDataType0 = DBDataType.getInstance(1, "drop materialized view");
      Integer integer0 = new Integer(3);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized view", (DBTable) null, dBDataType0, integer0, (Integer) 1);
      StringBuilder stringBuilder0 = new StringBuilder("9C:k5-=xVd-!mDY");
      StringBuilder stringBuilder1 = stringBuilder0.insert(3, (double) 1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      createIndexNode0.getProperties();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2);
      MockThread mockThread0 = new MockThread((Runnable) null, "alter materialized view2353491791");
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        scheduledThreadPoolExecutor0.scheduleAtFixedRate(mockThread0, 1, 0, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("I/", "I/", versionNumber0);
      defaultDatabase0.getTable("I/", false);
      DBDataType dBDataType0 = DBDataType.getInstance((-603), "I/");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      defaultDatabase0.getCatalog((String) null);
      Integer integer2 = new Integer((-603));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0, integer0, integer0);
      Integer.min((-603), (-603));
      SQLUtil.renderColumn(defaultDBColumn0);
      defaultDBColumn0.setName((String) null);
      Integer integer3 = RawTransaction.ABORT;
      try { 
        Integer.parseUnsignedInt("@A");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@A\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.elements();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "insertowner";
      stringArray0[1] = "insertowner";
      stringArray0[2] = ";";
      stringArray0[3] = "insertowner";
      stringArray0[4] = "insertowner";
      stringArray0[5] = "insertowner";
      stringArray0[0] = "insertowner";
      stringArray0[7] = "insertowner";
      stringArray0[8] = "insertowner";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("insertowner", true, defaultDBTable0, stringArray0);
      dBNonUniqueIndex0.setDoc("c\"A1a8x4*");
      dBNonUniqueIndex0.addColumnName("drop indexdeletecreate unirue index");
      defaultDBTable0.removeIndex(dBNonUniqueIndex0);
      defaultDBTable0.getColumns();
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(dBNonUniqueIndex0);
      assertEquals("insertowner (insertowner, insertowner, ;, insertowner, insertowner, insertowner, , insertowner, insertowner, drop indexdeletecreate unirue index)", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.5966761907389824
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = SQLUtil.isProcedureCall("Z(6)$w.bd%88v@5'T");
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("$Om@AD/r'S{cm", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Z(6)$w.bd%88v@5'T", defaultDBTable0, (-1941475505), "Z(6)$w.bd%88v@5'T");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter materi", true, defaultDBTable0, "COUNT");
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.toUnsignedString((-1941475505));
      defaultDBTable0.setPrimaryKey((DBPrimaryKeyConstraint) null);
      Integer.sum(16, (-34));
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.mutatesStructure("2353491791");
      SQLUtil.isDDL("PRIMARY KEY ");
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("escaped");
      assertNull(boolean2);
      
      SQLUtil.isQuery("truncate");
      SQLUtil.isQuery("2353");
      boolean boolean3 = SQLUtil.isDML("PRIMARY KEY ");
      assertFalse(boolean3);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[3] = (byte) (-12);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte)81;
      byteArray1[2] = (byte) (-12);
      byteArray1[3] = (byte)81;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      mockPrintWriter1.printf("exec", (Object[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c013800d-00fb-2646-07ec-000000134f30");
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = SQLUtil.substituteMarkers("$Y~HCmJg<WcQzK", "", (Object) null);
      assertEquals("null$nullYnull~nullHnullCnullmnullJnullgnull<nullWnullcnullQnullznullKnull", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "%h\\u~LNv<DCg";
      stringArray0[0] = string0;
      stringArray0[1] = "dh?uek$xm.^eaav@lpa";
      stringArray0[2] = "TAN";
      stringArray0[3] = "_fRrYnF3HefHZJr;";
      stringArray0[1] = " @GExUg";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Random.setNextRandom((-1302));
  }

  /**
  //Test case number: 105
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("\u0001\u0001;\uFFFF\u0001\u0004\u0001\u0003\n\uFFFF\u0001\u0002");
      ConnectionInfo connectionInfo0 = new ConnectionInfo("\u0001\u0001;\uFFFF\u0001\u0004\u0001\u0003\n\uFFFF\u0001\u0002");
      Random.setNextRandom(42);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", versionNumber0);
      defaultDatabase0.getTable("*/", false);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      AggregateNode aggregateNode0 = new AggregateNode();
      aggregateNode0.getSourceResultColumn();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "*/";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "";
      String string1 = "SlhZCDo,c\"kW)![";
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = 57;
      StringBuilder stringBuilder1 = new StringBuilder(57);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "SlhZCDo,c\"kW)![";
      stringArray0[3] = "$P";
      stringArray0[4] = "09>k5`dy(}<y@S0L*h";
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(2340, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2340
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("|<|=^Yb<$R+y(jO)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jO\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      SQLUtil.leftJoin((String) null, stringArray0, stringArray0[6], (String) null, stringArray0);
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection((FBManagedConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      versionNumber0.toString();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("tZH.Y\"v@agLAK&", "", versionNumber0);
      defaultDatabase0.getTable("*/", false);
      String[] stringArray0 = new String[3];
      stringArray0[2] = "tZH.Y\"v@agLAK&";
      VersionNumber versionNumber1 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      versionNumber0.compareTo(versionNumber1);
      VersionNumber.valueOf("delete|k3.apq'w~o@%");
      VersionNumber versionNumber2 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      versionNumber2.compareTo(versionNumber1);
      DefaultDatabase defaultDatabase1 = new DefaultDatabase((String) null, "", versionNumber2);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "";
      stringArray1[1] = "tZH.Y\"v@agLAK&";
      stringArray1[2] = "";
      stringArray1[3] = "tZH.Y\"v@agLAK&";
      stringArray1[4] = "tZH.Y\"v@agLAK&";
      stringArray1[5] = "*/";
      stringArray1[6] = "";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("delete|k3.apq'w~o@%", stringArray1, "A-U/kpqmu9=CCg", "org.apache.derby.iapi.db.ConnectionInfo::", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      versionNumber0.toString();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("tZH.Y\"v@agLAK&", "", versionNumber0);
      defaultDatabase0.getTable("*/", false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "tZH.Y\"v@agLAK&";
      VersionNumber versionNumber1 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      versionNumber0.compareTo(versionNumber1);
      VersionNumber.valueOf("delete|k3.apq'w~o@%");
      VersionNumber versionNumber2 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      versionNumber2.compareTo(versionNumber1);
      DefaultDatabase defaultDatabase1 = new DefaultDatabase((String) null, "", versionNumber2);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "";
      stringArray1[1] = "tZH.Y\"v@agLAK&";
      stringArray1[2] = "";
      stringArray1[3] = "tZH.Y\"v@agLAK&";
      stringArray1[4] = "tZH.Y\"v@agLAK&";
      stringArray1[5] = "*/";
      stringArray1[6] = "";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("delete|k3.apq'w~o@%", stringArray1, "A-U/kpqmu9=CCg", "org.apache.derby.iapi.db.ConnectionInfo::", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-12);
      ValueLob valueLob0 = ValueLob.createSmallLob((-3863), byteArray0);
      Reader reader0 = valueLob0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      streamTokenizer0.pushBack();
      Vector<VersionNumberComponent> vector0 = new Vector<VersionNumberComponent>();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(vector0, genericDescriptorList0);
      streamTokenizer0.eolIsSignificant(true);
      VersionNumber versionNumber1 = VersionNumber.valueOf((String) null);
      VersionNumber.valueOf((String) null);
      VersionNumber.valueOf(".Q6:~hrz");
      versionNumber0.compareTo(versionNumber1);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, (String) null, versionNumber0);
      dBCatalog0.setDatabase(defaultDatabase0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
