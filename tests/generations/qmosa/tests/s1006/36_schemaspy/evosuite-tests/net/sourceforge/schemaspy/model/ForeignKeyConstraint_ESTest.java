/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 21:58:34 GMT 2019
 */

package net.sourceforge.schemaspy.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.PropertyResourceBundle;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import net.sourceforge.schemaspy.Config;
import net.sourceforge.schemaspy.model.ForeignKeyConstraint;
import net.sourceforge.schemaspy.model.Table;
import net.sourceforge.schemaspy.model.TableColumn;
import net.sourceforge.schemaspy.model.xml.TableColumnMeta;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ForeignKeyConstraint_ESTest extends ForeignKeyConstraint_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1672261165779627
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.unlinkChildren();
      tableColumn0.setShortType("Cascade on delete:\n Deletion of parent deletes child");
      tableColumn0.setIsAutoUpdated(true);
      Config config0 = Config.getInstance();
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      config0.isSingleSignOn();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", (-1), 0);
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("C", string0);
      
      boolean boolean1 = foreignKeyConstraint0.isCascadeOnDelete();
      foreignKeyConstraint0.isCascadeOnDelete();
      foreignKeyConstraint0.isCascadeOnDelete();
      foreignKeyConstraint0.isCascadeOnDelete();
      String string1 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Cascade on delete:\n Deletion of parent deletes child", string1);
      
      boolean boolean2 = foreignKeyConstraint0.isRestrictDelete();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals((-1), foreignKeyConstraint0.getUpdateRule());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.199339121172421
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(1207L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(1207L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "=R8O", 2, 1);
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Restrict delete", string0);
      
      boolean boolean0 = foreignKeyConstraint0.isCascadeOnDelete();
      assertFalse(boolean0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string1);
      
      boolean boolean1 = foreignKeyConstraint0.isRestrictDelete();
      assertTrue(boolean1);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      System.setCurrentTimeMillis(1);
      System.setCurrentTimeMillis(1207L);
      System.setCurrentTimeMillis(0L);
      String string2 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals(2, foreignKeyConstraint0.getUpdateRule());
      assertEquals("R", string2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.316714789694518
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.unlinkChildren();
      tableColumn0.setShortType("Cascade on delete:\n Deletion of parent deletes child");
      tableColumn0.setIsAutoUpdated(true);
      Config config0 = Config.getInstance();
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      config0.isSingleSignOn();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", (-1), 0);
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("C", string0);
      
      foreignKeyConstraint0.isCascadeOnDelete();
      foreignKeyConstraint0.isCascadeOnDelete();
      boolean boolean1 = foreignKeyConstraint0.isCascadeOnDelete();
      foreignKeyConstraint0.isCascadeOnDelete();
      String string1 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Cascade on delete", string1);
      
      String string2 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Cascade on delete:\n Deletion of parent deletes child", string2);
      
      boolean boolean2 = foreignKeyConstraint0.isRestrictDelete();
      assertTrue(boolean2 == boolean0);
      assertEquals((-1), foreignKeyConstraint0.getUpdateRule());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.511040506484353
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      Config.getInstance();
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 1360, 1360);
      foreignKeyConstraint0.addChildColumn((TableColumn) null);
      List<TableColumn> list0 = foreignKeyConstraint0.getChildColumns();
      assertEquals(0, list0.size());
      
      foreignKeyConstraint0.addChildColumn(tableColumn0);
      List<TableColumn> list1 = foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentColumns();
      ForeignKeyConstraint.toString(list1);
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.addParentColumn(tableColumn0);
      List<TableColumn> list2 = foreignKeyConstraint0.getParentColumns();
      assertTrue(list2.contains(tableColumn0));
      
      foreignKeyConstraint0.isRestrictDelete();
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertEquals(1360, foreignKeyConstraint0.getDeleteRule());
      assertEquals(1360, foreignKeyConstraint0.getUpdateRule());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Config config0 = Config.getInstance();
      Config.setInstance((Config) null);
      Config config1 = Config.getInstance();
      Config.setInstance((Config) null);
      Config config2 = Config.getInstance();
      config2.getMaxDetailedTables();
      config1.isSingleSignOn();
      config0.setOutputDir("UTF-8");
      Config config3 = Config.getInstance();
      Config.getInstance();
      Config config4 = Config.getInstance();
      config4.setViewsEnabled(false);
      Config config5 = new Config();
      Config config6 = Config.getInstance();
      config3.setHasOrphans(false);
      config6.isHighQuality();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.replace("UTF-8", "UTF-8");
      hashMap0.put("UTF-8", "UTF-8");
      config6.setDbSpecificOptions(hashMap0);
      Config config7 = Config.getInstance();
      Config config8 = Config.getInstance();
      config5.getFontSize();
      Config.getInstance();
      Config config9 = Config.getInstance();
      config8.getDbProperties();
      config5.getRenderer();
      config7.setRenderer("UTF-8");
      Config config10 = new Config();
      config9.getDbProperties();
      Config config11 = new Config();
      Config config12 = new Config();
      config3.getFont();
      config5.setDriverPath("UTF-8");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 11, 11);
      int int0 = foreignKeyConstraint0.getUpdateRule();
      assertEquals(11, foreignKeyConstraint0.getDeleteRule());
      assertEquals(11, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4820705151765026
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis((-1898L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(1L);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 3, 3);
      foreignKeyConstraint0.isCascadeOnDelete();
      foreignKeyConstraint0.getDeleteRuleDescription();
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      boolean boolean1 = foreignKeyConstraint0.isNullOnDelete();
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("R", string0);
      
      boolean boolean2 = foreignKeyConstraint0.isCascadeOnDelete();
      assertTrue(boolean2 == boolean1);
      
      foreignKeyConstraint0.isReal();
      String string1 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Restrict delete", string1);
      
      String string2 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string2);
      
      foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getName();
      boolean boolean3 = foreignKeyConstraint0.isReal();
      assertTrue(boolean3 == boolean0);
      assertEquals(3, foreignKeyConstraint0.getUpdateRule());
      assertTrue(boolean3);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      Config.getInstance();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Frdpi{TgNR", (-1189), 2);
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      assertTrue(boolean0);
      assertEquals((-1189), foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 2, 2);
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals(2, foreignKeyConstraint0.getUpdateRule());
      assertEquals("N", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.offer((TableColumn) null);
      // Undeclared exception!
      try { 
        ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "guR!z#kge");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^pd");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 1048, 2);
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals(1048, foreignKeyConstraint0.getUpdateRule());
      assertEquals("Null on delete:\n Foreign key to parent set to NULL when parent deleted", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(gNVV^];FJW*S");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "w", 2, 2);
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Null on delete", string0);
      assertEquals(2, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Config config0 = new Config();
      Config.setInstance(config0);
      Config config1 = Config.getInstance();
      Config.setInstance(config1);
      config1.setViewsEnabled(false);
      config1.setConnectionProperties("UTF-8");
      Config config2 = Config.getInstance();
      config1.isOneOfMultipleSchemas();
      config1.isSingleSignOn();
      Config config3 = Config.getInstance();
      Config config4 = new Config();
      Config config5 = new Config();
      config1.setOutputDir("UTF-8");
      config5.setViewsEnabled(false);
      Config config6 = new Config();
      Config config7 = Config.getInstance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      config7.setDbSpecificOptions(hashMap0);
      config2.isSchemaDisabled();
      config7.getMeta();
      Config config8 = Config.getInstance();
      Config config9 = new Config();
      config6.getFontSize();
      Config config10 = new Config();
      Config config11 = Config.getInstance();
      config0.getConnectionProperties();
      config6.getRenderer();
      config8.setRenderer("UTF-8");
      Config config12 = new Config();
      config2.getConnectionProperties();
      Config.getInstance();
      Config config13 = new Config();
      config11.getFont();
      config3.getFont();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 11, 11);
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals(11, foreignKeyConstraint0.getUpdateRule());
      assertEquals(11, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5202107828156763
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "CORRESPONDING", 2, (-1));
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.isRestrictDelete();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.isCascadeOnDelete();
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.isCascadeOnDelete();
      foreignKeyConstraint0.isNullOnDelete();
      foreignKeyConstraint0.isCascadeOnDelete();
      foreignKeyConstraint0.getDeleteRuleAlias();
      boolean boolean0 = foreignKeyConstraint0.isCascadeOnDelete();
      assertFalse(boolean0);
      
      boolean boolean1 = foreignKeyConstraint0.isNullOnDelete();
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleDescription();
      boolean boolean2 = foreignKeyConstraint0.isRestrictDelete();
      assertTrue(boolean2 == boolean1);
      
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals((-1), int0);
      
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleName();
      assertEquals(2, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Config.getInstance();
      Config.setInstance((Config) null);
      Config config0 = Config.getInstance();
      Config.setInstance((Config) null);
      config0.setConnectionProperties("UTF-8");
      Config.getInstance();
      config0.isOneOfMultipleSchemas();
      config0.isSingleSignOn();
      Config config1 = Config.getInstance();
      Config.getInstance();
      Config config2 = Config.getInstance();
      config0.setEncodeCommentsEnabled(false);
      config0.setOutputDir("UTF-8");
      config2.isLogoEnabled();
      config2.setViewsEnabled(false);
      Config config3 = Config.getInstance();
      Config config4 = Config.getInstance();
      config4.isHighQuality();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("UTF-8", "UTF-8");
      config4.setDbSpecificOptions(hashMap0);
      Config config5 = Config.getInstance();
      Config config6 = Config.getInstance();
      config3.getFontSize();
      Config.getInstance();
      Config config7 = Config.getInstance();
      config6.getDbProperties();
      config3.getRenderer();
      config5.setRenderer("UTF-8");
      Config config8 = new Config();
      config7.getDbProperties();
      Config config9 = new Config();
      Config config10 = new Config();
      config7.getFont();
      config1.getFont();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 11, 11);
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertEquals(11, foreignKeyConstraint0.getUpdateRule());
      assertEquals(11, foreignKeyConstraint0.getDeleteRule());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Config config0 = new Config();
      Config.setInstance(config0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      config0.setPassword("y03g8'TrT( _AG");
      config0.setConnectionProperties("UTF-8");
      config0.setHtmlGenerationEnabled(false);
      Config config1 = Config.getInstance();
      config0.isOneOfMultipleSchemas();
      config0.isSingleSignOn();
      Config config2 = new Config();
      config0.getCharset();
      config2.setOutputDir("ISO-8859-1");
      config0.getMeta();
      Config config3 = new Config();
      config0.getMeta();
      Config config4 = Config.getInstance();
      Config config5 = new Config();
      config4.getConnectionProperties();
      config3.setDescription("UTF-8");
      config1.setRenderer((String) null);
      Config config6 = new Config();
      config3.getConnectionProperties();
      Config config7 = Config.getInstance();
      config6.getFont();
      config7.getFont();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 157, 512);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, (String) null, 2, 3113);
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "guR!z#kge");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^pd");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G*pkOVb_&");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "guR!z#kge", (byte) (-103), 2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "G*pkOVb_&", 2183, 2);
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
      assertEquals((-103), foreignKeyConstraint0.getUpdateRule());
      assertEquals(75, int0);
      assertEquals(2, foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.unlinkChildren();
      Config.getInstance();
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      tableColumn0.unlinkParents();
      tableColumn1.removeParent(tableColumn0);
      TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta2).getComments();
      doReturn((String) null).when(tableColumnMeta2).getDefaultValue();
      doReturn(0).when(tableColumnMeta2).getDigits();
      doReturn((String) null).when(tableColumnMeta2).getId();
      doReturn((String) null).when(tableColumnMeta2).getName();
      doReturn(0).when(tableColumnMeta2).getSize();
      doReturn((String) null).when(tableColumnMeta2).getType();
      doReturn(false).when(tableColumnMeta2).isAutoUpdated();
      doReturn(false).when(tableColumnMeta2).isNullable();
      tableColumn0.removeParent(tableColumn1);
      tableColumn0.setShortType("bpP8Ma0}:i>V.");
      TableColumn tableColumn2 = new TableColumn((Table) null, tableColumnMeta2);
      tableColumn2.removeChild(tableColumn1);
      TableColumnMeta tableColumnMeta3 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta3).getComments();
      doReturn((String) null).when(tableColumnMeta3).getDefaultValue();
      doReturn(0).when(tableColumnMeta3).getDigits();
      doReturn((String) null).when(tableColumnMeta3).getId();
      doReturn((String) null).when(tableColumnMeta3).getName();
      doReturn(0).when(tableColumnMeta3).getSize();
      doReturn((String) null).when(tableColumnMeta3).getType();
      doReturn(false).when(tableColumnMeta3).isAutoUpdated();
      doReturn(false).when(tableColumnMeta3).isNullable();
      TableColumn tableColumn3 = new TableColumn((Table) null, tableColumnMeta3);
      tableColumn3.removeChild(tableColumn2);
      TableColumnMeta tableColumnMeta4 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta4).getComments();
      doReturn((String) null).when(tableColumnMeta4).getDefaultValue();
      doReturn(0).when(tableColumnMeta4).getDigits();
      doReturn((String) null).when(tableColumnMeta4).getId();
      doReturn((String) null).when(tableColumnMeta4).getName();
      doReturn(0).when(tableColumnMeta4).getSize();
      doReturn((String) null).when(tableColumnMeta4).getType();
      doReturn(false).when(tableColumnMeta4).isAutoUpdated();
      doReturn(false).when(tableColumnMeta4).isNullable();
      TableColumn tableColumn4 = new TableColumn((Table) null, tableColumnMeta4);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint((TableColumn) null, tableColumn1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Config config0 = new Config();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      config0.setGraphvizDir("");
      config0.setCss("");
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      config0.setHtmlGenerationEnabled(false);
      config0.getConnectionProperties();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(resultSet0).getInt(anyString());
      doReturn((Object) null).when(resultSet0).getObject(anyString());
      doReturn((String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyString());
      config0.getTableInclusions();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 324, 110);
      foreignKeyConstraint0.addParentColumn((TableColumn) null);
      TableColumn tableColumn0 = null;
      try {
        tableColumn0 = new TableColumn((Table) null, resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Restrict delete:\n Parent cannot be deleted if children exist");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q.QU;|Q\"Xv]XQ#xJQ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Restrict delete:\n Parent cannot be deleted if children exist");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Restrict delete:\n Parent cannot be deleted if children exist");
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", (byte) (-103), (byte) (-103));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "Restrict delete:\n Parent cannot be deleted if children exist", (-2638), 70);
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
      assertEquals((-2638), foreignKeyConstraint1.getUpdateRule());
      assertEquals(70, foreignKeyConstraint1.getDeleteRule());
      assertEquals((-60), int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Restrict delete:\n Parent cannot be deleted if children exist");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q.QU;|Q\"Xv]XQ#xJQ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", (byte) (-103), (byte) (-103));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "", (-2638), 70);
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Restrict delete:\n Parent cannot be deleted if children exist");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q.QU;|Q\"Xv]XQ#xJQ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", (byte) (-103), (byte) (-103));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      foreignKeyConstraint0.compareTo(foreignKeyConstraint0);
      System.setCurrentTimeMillis((-383L));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.parallelStream();
      String string0 = ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Config config0 = Config.getInstance();
      Config.setInstance((Config) null);
      Config config1 = Config.getInstance();
      Config.setInstance((Config) null);
      Config.getInstance();
      config1.isSingleSignOn();
      config0.setOutputDir("UTF-8");
      Config config2 = Config.getInstance();
      Config.getInstance();
      Config config3 = Config.getInstance();
      config1.setOutputDir("UTF-8");
      config3.isLogoEnabled();
      config3.setViewsEnabled(false);
      Config config4 = Config.getInstance();
      Config config5 = Config.getInstance();
      config2.setHasOrphans(false);
      config5.isHighQuality();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("UTF-8", "UTF-8");
      hashMap0.replace("UTF-8", "UTF-8");
      hashMap0.put("UTF-8", "UTF-8");
      config5.setDbSpecificOptions(hashMap0);
      Config config6 = Config.getInstance();
      Config config7 = Config.getInstance();
      config4.getFontSize();
      Config.getInstance();
      Config config8 = Config.getInstance();
      config7.getDbProperties();
      config4.getRenderer();
      config6.setRenderer("UTF-8");
      Config config9 = new Config();
      config8.getDbProperties();
      Config config10 = new Config();
      Config config11 = new Config();
      config2.getFont();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 11, 11);
      foreignKeyConstraint0.getChildTable();
      assertEquals(11, foreignKeyConstraint0.getUpdateRule());
      assertEquals(11, foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Config config0 = Config.getInstance();
      Config.setInstance(config0);
      Config.setInstance(config0);
      config0.setViewsEnabled(false);
      config0.setConnectionProperties("UTF-8");
      Config config1 = Config.getInstance();
      config0.isOneOfMultipleSchemas();
      config0.isSingleSignOn();
      Config config2 = Config.getInstance();
      Config config3 = new Config();
      Config config4 = Config.getInstance();
      config0.setOutputDir("UTF-8");
      config4.isLogoEnabled();
      config4.setViewsEnabled(false);
      Config config5 = Config.getInstance();
      Config config6 = Config.getInstance();
      config1.isSchemaDisabled();
      config6.getMeta();
      Config config7 = Config.getInstance();
      Config config8 = new Config();
      config0.setMaxDetailedTabled((-778));
      config5.getFontSize();
      Config.getInstance();
      Config.getInstance();
      config0.getConnectionProperties();
      config5.getRenderer();
      config7.setRenderer("UTF-8");
      Config config9 = new Config();
      config2.getDbProperties();
      StringReader stringReader0 = new StringReader("UTF-8");
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(stringReader0);
      Config.asProperties(propertyResourceBundle0);
      Config config10 = new Config();
      Config config11 = new Config();
      config2.getFont();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 11, 11);
      foreignKeyConstraint0.getParentTable();
      assertEquals(11, foreignKeyConstraint0.getDeleteRule());
      assertEquals(11, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q.U;|Q\"Xv]XQxJQ");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Q.U;|Q\"Xv]XQxJQ", (byte) (-103), (byte) (-103));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      foreignKeyConstraint0.getName();
      assertEquals((-103), foreignKeyConstraint0.getDeleteRule());
      assertEquals((-103), foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q.U;|Q\"Xv]XQxJQ");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", (byte) (-103), (byte) (-103));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      foreignKeyConstraint0.getName();
      assertEquals((-103), foreignKeyConstraint0.getUpdateRule());
      assertEquals((-103), foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Config config0 = Config.getInstance();
      Config.setInstance(config0);
      Config config1 = Config.getInstance();
      Config.setInstance(config1);
      config1.setViewsEnabled(false);
      config1.setConnectionProperties("UTF-8");
      Config config2 = Config.getInstance();
      config1.isOneOfMultipleSchemas();
      config1.isSingleSignOn();
      Config config3 = Config.getInstance();
      Config config4 = new Config();
      config3.isLogoEnabled();
      config2.setViewsEnabled(false);
      Config config5 = new Config();
      Config config6 = Config.getInstance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      config6.setDbSpecificOptions(hashMap0);
      config6.getMeta();
      Config config7 = Config.getInstance();
      Config config8 = new Config();
      config5.getFontSize();
      Config config9 = new Config();
      config9.setOutputDir("UTF-8");
      Config config10 = Config.getInstance();
      config0.getConnectionProperties();
      config10.setDb("C");
      config5.getRenderer();
      config7.setRenderer("UTF-8");
      Config config11 = new Config();
      config2.getConnectionProperties();
      Config.getInstance();
      Config.getInstance();
      config10.getFont();
      config3.getFont();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 11, 11);
      boolean boolean0 = foreignKeyConstraint0.isImplied();
      assertEquals(11, foreignKeyConstraint0.getDeleteRule());
      assertEquals(11, foreignKeyConstraint0.getUpdateRule());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Restrict delete:\n Parent cannot be deleted if children exist");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q.QU;|Q\"Xv]XQ#xJQ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Restrict delete:\n Parent cannot be deleted if children exist");
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", (byte) (-103), (byte) (-103));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      int int0 = foreignKeyConstraint0.getUpdateRule();
      assertEquals((-103), int0);
      assertEquals((-103), foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q.U;|Q\"Xv]XQxJQ");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", (byte) (-103), (byte) (-103));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      foreignKeyConstraint0.getName();
      assertEquals((-103), foreignKeyConstraint0.getDeleteRule());
      assertEquals((-103), foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Config config0 = Config.getInstance();
      Config.setInstance((Config) null);
      Config config1 = Config.getInstance();
      Config.setInstance((Config) null);
      Config config2 = Config.getInstance();
      config2.getMaxDetailedTables();
      config1.isSingleSignOn();
      config0.setOutputDir("UTF-8");
      Config config3 = Config.getInstance();
      Config config4 = new Config();
      Config config5 = new Config();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      config5.setDbSpecificOptions(hashMap0);
      config1.setOutputDir("UTF-8");
      config5.isLogoEnabled();
      Config config6 = Config.getInstance();
      config1.isHighQuality();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      hashMap1.computeIfAbsent("UTF-8", function1);
      hashMap1.replace("UTF-8", "UTF-8");
      config2.setDbSpecificOptions(hashMap1);
      Config config7 = Config.getInstance();
      Config config8 = Config.getInstance();
      config6.getFontSize();
      Config.getInstance();
      Config config9 = Config.getInstance();
      config8.getDbProperties();
      config7.setRenderer("UTF-8");
      Config config10 = new Config();
      config9.getDbProperties();
      Config config11 = new Config();
      Config config12 = new Config();
      config3.getFont();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 11, 11);
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Config config0 = Config.getInstance();
      Config.setInstance((Config) null);
      Config config1 = Config.getInstance();
      Config.setInstance((Config) null);
      Config config2 = Config.getInstance();
      config2.getMaxDetailedTables();
      config1.isSingleSignOn();
      config0.setOutputDir("UTF-8");
      Config config3 = Config.getInstance();
      Config.getInstance();
      Config config4 = Config.getInstance();
      config1.setOutputDir("UTF-8");
      config4.isLogoEnabled();
      Config config5 = Config.getInstance();
      Config config6 = Config.getInstance();
      config6.isHighQuality();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      hashMap0.computeIfAbsent("UTF-8", function1);
      hashMap0.replace("UTF-8", "UTF-8");
      config6.setDbSpecificOptions(hashMap0);
      Config config7 = Config.getInstance();
      Config config8 = Config.getInstance();
      config5.getFontSize();
      Config.getInstance();
      Config config9 = Config.getInstance();
      config8.getDbProperties();
      config7.setRenderer("UTF-8");
      Config config10 = new Config();
      config9.getDbProperties();
      Config config11 = new Config();
      Config config12 = new Config();
      config3.getFont();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 11, 11);
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Config config0 = Config.getInstance();
      Config config1 = Config.getInstance();
      Config.setInstance((Config) null);
      Config.getInstance();
      config1.isSingleSignOn();
      config0.setOutputDir("UTF-8");
      Config config2 = Config.getInstance();
      Config.getInstance();
      Config config3 = Config.getInstance();
      config1.setOutputDir("UTF-8");
      config3.isLogoEnabled();
      config3.setViewsEnabled(false);
      Config config4 = Config.getInstance();
      Config config5 = Config.getInstance();
      config2.setHasOrphans(false);
      config5.isHighQuality();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("UTF-8", "UTF-8");
      hashMap0.replace("UTF-8", "UTF-8");
      hashMap0.put("UTF-8", "UTF-8");
      config5.setDbSpecificOptions(hashMap0);
      Config config6 = Config.getInstance();
      Config config7 = Config.getInstance();
      config4.getFontSize();
      Config.getInstance();
      Config config8 = Config.getInstance();
      config7.getDbProperties();
      config4.getRenderer();
      config6.setRenderer("UTF-8");
      Config config9 = new Config();
      config8.getDbProperties();
      Config config10 = new Config();
      Config config11 = new Config();
      config2.getFont();
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint((TableColumn) null, (TableColumn) null, 11, (-220));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.unlinkChildren();
      Config.getInstance();
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      tableColumn0.unlinkParents();
      TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      tableColumn0.removeParent(tableColumn1);
      tableColumn0.setShortType("bpP8Ma0}:i>V.");
      tableColumn0.removeChild(tableColumn1);
      TableColumnMeta tableColumnMeta3 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta3).getComments();
      doReturn((String) null).when(tableColumnMeta3).getDefaultValue();
      doReturn(0).when(tableColumnMeta3).getDigits();
      doReturn((String) null).when(tableColumnMeta3).getId();
      doReturn((String) null).when(tableColumnMeta3).getName();
      doReturn(0).when(tableColumnMeta3).getSize();
      doReturn((String) null).when(tableColumnMeta3).getType();
      doReturn(false).when(tableColumnMeta3).isAutoUpdated();
      doReturn(false).when(tableColumnMeta3).isNullable();
      TableColumn tableColumn2 = new TableColumn((Table) null, tableColumnMeta3);
      tableColumn2.removeChild((TableColumn) null);
      TableColumnMeta tableColumnMeta4 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta4).getComments();
      doReturn((String) null).when(tableColumnMeta4).getDefaultValue();
      doReturn(0).when(tableColumnMeta4).getDigits();
      doReturn((String) null).when(tableColumnMeta4).getId();
      doReturn((String) null).when(tableColumnMeta4).getName();
      doReturn(0).when(tableColumnMeta4).getSize();
      doReturn((String) null).when(tableColumnMeta4).getType();
      doReturn(false).when(tableColumnMeta4).isAutoUpdated();
      doReturn(false).when(tableColumnMeta4).isNullable();
      TableColumn tableColumn3 = new TableColumn((Table) null, tableColumnMeta4);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint(tableColumn3, tableColumn1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }
}
