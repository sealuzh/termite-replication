/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 20:28:00 GMT 2019
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.ib.client.EWrapperMsgGenerator;
import com.ib.client.Order;
import com.ib.client.OrderState;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EWrapperMsgGenerator_ESTest extends EWrapperMsgGenerator_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      vector0.clear();
      Object object0 = new Object();
      vector0.add(object0);
      vector0.clear();
      vector0.add((Object) null);
      Object object1 = new Object();
      vector0.add(object1);
      Iterator<Object> iterator0 = vector0.iterator();
      vector0.trimToSize();
      Object object2 = new Object();
      vector0.addElement(object2);
      Object object3 = new Object();
      vector0.add(object3);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      vector0.add((Object) " | ");
      vector0.trimToSize();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any());
      vector0.sort(comparator0);
      vector0.addElement(iterator0);
      Object object4 = new Object();
      Object object5 = new Object();
      EWrapperMsgGenerator.tickOptionComputation(1, 13, (-3640), 1.7976931348623157E308, (-1275), 1.7976931348623157E308);
      System.setCurrentTimeMillis(13);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Object> vector1 = new Vector<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      vector1.replaceAll(unaryOperator0);
      System.setCurrentTimeMillis((-806L));
      String string0 = EWrapperMsgGenerator.tickPrice((-1422), (-1422), 938.52, (-1422));
      assertEquals("id=-1422  unknown=938.52  canAutoExecute", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.updateNewsBulletin(3676, 9, "?<", "?<");
      assertEquals("MsgId=3676 :: MsgType=9 :: Origin=?< :: Message=?<", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.updateNewsBulletin((-260), (-260), "Nd2", "\"sSHn##B8");
      assertEquals("MsgId=-260 :: MsgType=-260 :: Origin=\"sSHn##B8 :: Message=Nd2", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      vector0.clear();
      Object object0 = new Object();
      Object object1 = new Object();
      vector0.addElement("BAG");
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      vector0.add(object4);
      Vector<Object> vector1 = new Vector<Object>();
      vector0.add(object3);
      vector1.add(object0);
      Vector<Object> vector2 = new Vector<Object>();
      vector2.trimToSize();
      Vector<Object> vector3 = new Vector<Object>();
      Vector<Object> vector4 = new Vector<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector4.sort(comparator0);
      Object object5 = new Object();
      Object object6 = new Object();
      vector2.addElement(object6);
      Function.identity();
      UnaryOperator.identity();
      String string0 = EWrapperMsgGenerator.tickOptionComputation(1, 1, 1275.0, 0.0, (-865.409063432154), (-1999.8747353081917));
      assertEquals("id=1  bidPrice: vol = 1275.0 delta = 0.0", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      function2.andThen((Function<? super String, ? extends String>) function1);
      unaryOperator0.apply(function2);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function.identity();
      function2.andThen((Function<? super String, ?>) function1);
      Function<Integer, Integer> function4 = Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Integer integer0 = new Integer(940);
      Function.identity();
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function5).apply(any());
      function1.compose((Function<? super Integer, ?>) function2);
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      function7.apply(function4);
      function6.apply(function1);
      function2.compose((Function<? super Integer, ?>) function6);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      function7.andThen((Function<? super Integer, ? extends Integer>) function6);
      function7.andThen((Function<? super Integer, ?>) function3);
      unaryOperator1.andThen((Function<? super Object, ?>) function2);
      function6.andThen((Function<? super Integer, ? extends Integer>) function7);
      Function.identity();
      function7.compose((Function<? super String, ?>) function1);
      function7.compose((Function<? super Object, ?>) unaryOperator1);
      System.setCurrentTimeMillis(1L);
      String string0 = EWrapperMsgGenerator.updateMktDepthL2(940, 28, "qlv", (-1), (-1827), (-1), (-4583));
      assertEquals("updateMktDepth: 940 28 qlv -1 -1827 -1.0 -4583", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      vector0.clear();
      Object object0 = new Object();
      vector0.add(object0);
      vector0.clear();
      vector0.add((Object) null);
      Object object1 = new Object();
      vector0.add(object1);
      Iterator<Object> iterator0 = vector0.iterator();
      vector0.trimToSize();
      Object object2 = new Object();
      vector0.addElement(object2);
      Object object3 = new Object();
      vector0.add(object3);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      vector0.add((Object) " | ");
      vector0.trimToSize();
      vector0.addElement(iterator0);
      Object object4 = new Object();
      Object object5 = new Object();
      String string0 = EWrapperMsgGenerator.realtimeBar((-3640), (-584L), (-1.0), (-584L), (-1.0), (-1275), 0L, 1985L, 2145645048);
      assertEquals("id=-3640 time = -584 open=-1.0 high=-584.0 low=-1.0 close=-1275.0 volume=0 count=2145645048 WAP=1985.0", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Integer integer0 = new Integer((-18));
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      String string0 = EWrapperMsgGenerator.tickOptionComputation((-18), 856, 1.7976931348623157E308, 2251, 856, 2251);
      assertEquals("id=-18  unknown: vol = N/A delta = N/A", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Integer integer0 = new Integer((-18));
      Function.identity();
      UnaryOperator.identity();
      String string0 = EWrapperMsgGenerator.realtimeBar(1, 340L, 1680.0, 340L, 2251, 825.693024, 340L, (-1.0), 856);
      assertEquals("id=1 time = 340 open=1680.0 high=340.0 low=2251.0 close=825.693024 volume=340 count=856 WAP=-1.0", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      vector0.trimToSize();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      vector0.sort((Comparator<? super Object>) null);
      Order order0 = new Order();
      OrderState orderState0 = new OrderState((String) null, (String) null, " scaleInitLevelSize=", (String) null, 0, 'b', 0, "", (String) null);
      OrderState orderState1 = new OrderState();
      OrderState orderState2 = new OrderState();
      String string0 = EWrapperMsgGenerator.nextValidId(2146325974);
      assertEquals("Next Valid Order ID: 2146325974", string0);
  }
}
