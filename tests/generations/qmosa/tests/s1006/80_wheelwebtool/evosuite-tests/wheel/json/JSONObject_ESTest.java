/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 22:22:02 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3022618818454754
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Double double0 = new Double((-267.3542775253941));
      Double double1 = new Double((-722.685));
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      
      JSONObject jSONObject1 = jSONObject0.put("@WPm@/f<BtE", true);
      String string0 = JSONObject.quote("in'fGkT4oF/tFip*pDj");
      assertEquals("\"in'fGkT4oF/tFip*pDj\"", string0);
      
      jSONObject1.put("in'fGkT4oF/tFip*pDj", (Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.put("in'fGkT4oF/tFip*pDj", (Object) boolean0);
      boolean boolean1 = jSONObject0.getBoolean("in'fGkT4oF/tFip*pDj");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.650902078864118
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Double double0 = new Double((-267.3542775253941));
      Double double1 = new Double((-722.685));
      hashMap0.values();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("");
      JSONObject.doubleToString((-267.3542775253941));
      Boolean boolean0 = new Boolean((String) null);
      hashMap0.put((String) null, "");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) null, 0, 0);
      stringWriter0.append((CharSequence) ">[kacy%`q$");
      JSONObject jSONObject1 = jSONObject0.put("-267.3542775253941", true);
      jSONObject1.optBoolean("-267.3542775253941", true);
      Float.max(0, 0);
      Float.max(1152.5286F, 0.0F);
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      Boolean.valueOf("java.lang.Long@00000000120");
      StringWriter stringWriter1 = new StringWriter(0);
      Float float0 = new Float(3714.876);
      JSONObject jSONObject2 = new JSONObject(float0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject3.getDouble("java.lang.Long@00000000120");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@00000000120\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      Float float0 = new Float((-5831.04F));
      Float.sum((-5831.04F), (-5831.04F));
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.put(float0, jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(44);
      JSONObject.getNames((Object) integer0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4929121326659214
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      String string0 = "s;,FV)N= &P|@";
      Double double0 = new Double(1954.438227807878);
      JSONObject jSONObject1 = jSONObject0.accumulate("s;,FV)N= &P|@", double0);
      jSONObject0.put("kis", (Object) "kis");
      jSONObject1.optLong("s;,FV)N= &P|@");
      try { 
        jSONObject0.getBoolean("kis");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"kis\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9420744958443144
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.optDouble("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList0);
      Integer integer0 = new Integer((-6254807));
      linkedList0.add(integer0);
      jSONObject2.optLong("");
      jSONObject0.getString("");
      jSONObject1.names();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      JSONObject jSONObject3 = jSONObject1.put("wheel.json.JSONArray@0000000006", (Collection) linkedList1);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList1);
      jSONArray1.put(4378);
      Long long0 = new Long(4378);
      JSONObject jSONObject4 = jSONObject0.put("islongBitsToDouble", (long) 4378);
      Predicate<Long> predicate0 = Predicate.isEqual((Object) jSONObject2);
      Predicate<Long> predicate1 = predicate0.negate();
      Predicate<Long> predicate2 = predicate0.and(predicate1);
      Predicate<Long> predicate3 = predicate2.or(predicate1);
      linkedList1.removeIf(predicate3);
      linkedList1.add(long0);
      jSONArray1.put((Collection) linkedList1);
      jSONObject3.optDouble("", (-179.969357638132));
      jSONObject0.isNull("wheel.json.JSONArray@0000000006");
      jSONObject1.opt("");
      jSONObject0.optJSONArray("");
      try { 
        jSONObject4.getLong("LBLbi5oz[&>.uN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"LBLbi5oz[&>.uN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7685183543023157
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONObject1.toString(44);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList2);
      JSONObject jSONObject3 = new JSONObject();
      Double.sum(44, 44);
      JSONObject jSONObject4 = new JSONObject("{\"java.lang.String@0000000002\": {}}");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("{\"java.lang.String@0000000002\": {}}", ">[kacy%$");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(8192);
      stringWriter1.append((CharSequence) ">[kacy%$");
      JSONObject jSONObject5 = jSONObject2.put("", 449.09409137);
      jSONObject5.putOpt((String) null, stringWriter0);
      long long0 = jSONObject1.getLong("");
      assertEquals(449L, long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9413602938489847
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.optDouble("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList0);
      jSONObject2.optLong("}>\tCJkn7MCpR9XW@(");
      jSONObject0.getString("");
      jSONObject1.names();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      JSONObject jSONObject3 = jSONObject1.put("wheel.json.JSONArray@0000000006", (Collection) linkedList1);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList1);
      jSONArray1.put(4378);
      Long long0 = new Long(4378);
      jSONObject0.put("islongBitsToDouble", (long) 4378);
      linkedList1.add(long0);
      jSONArray1.put((Collection) linkedList1);
      jSONObject3.optDouble("", (-179.969357638132));
      boolean boolean0 = new Boolean(true);
      StringWriter stringWriter0 = new StringWriter(46);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "}>\tCJkn7MCpR9XW@(");
      StringWriter stringWriter2 = stringWriter1.append('k');
      Writer writer0 = jSONObject2.write(stringWriter2);
      StringWriter stringWriter3 = new StringWriter(46);
      assertFalse(stringWriter3.equals((Object)writer0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7018655587735982
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONObject1.toString(44);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      jSONObject1.put("", (Collection) linkedList2);
      JSONObject jSONObject2 = new JSONObject();
      Double.sum(44, 44);
      JSONObject jSONObject3 = new JSONObject("{\"java.lang.String@0000000002\": {}}");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("{\"java.lang.String@0000000002\": {}}", "no");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(8192);
      stringWriter0.write("{\"java.lang.String@0000000002\": {}}");
      stringWriter0.close();
      Byte byte0 = new Byte((byte) (-29));
      JSONObject jSONObject4 = new JSONObject(stringWriter0);
      jSONObject3.write(stringWriter0);
      StringWriter stringWriter2 = null;
      try {
        stringWriter2 = new StringWriter((-317));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.693157509936776
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      JSONObject jSONObject2 = jSONObject0.append("s9Q[QOosOWwJ.UcA", "");
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      jSONObject1.put("", (Map) hashMap0);
      jSONObject2.getJSONObject("");
      Boolean.valueOf("zJ_GtGHH");
      int int0 = 69;
      try { 
        jSONArray0.getJSONArray(69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[69] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3491692666583344
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = "WM4(?~";
      linkedList0.add("WM4(?~");
      // Undeclared exception!
      jSONObject0.toString(2275, 2275);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0740540570710664
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Double double0 = new Double((-267.3542775253941));
      Double double1 = new Double((-722.685));
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      
      String string0 = JSONObject.quote("in'fGkT4oF/tFip*pDj");
      assertEquals("\"in'fGkT4oF/tFip*pDj\"", string0);
      
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.put("in'fGkT4oF/tFip*pDj", (Object) boolean0);
      jSONObject0.optInt("in'fGkT4oF/tFip*pDj", 0);
      boolean boolean1 = jSONObject0.getBoolean("in'fGkT4oF/tFip*pDj");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1262361032003727
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(Double.NaN);
      Double.isFinite(Double.NaN);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("WM4(?~");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double.isFinite((-2685.000988756));
      Integer integer0 = new Integer(114);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      Double double1 = new Double(Double.NaN);
      JSONObject jSONObject1 = jSONObject0.accumulate("[>p+O", jSONArray0);
      jSONObject1.optString("8sO");
      jSONObject0.put("WM4(?~", (long) 114);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2478938370449457
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      HashMap<Double, Byte> hashMap2 = new HashMap<Double, Byte>();
      hashMap1.putAll(hashMap2);
      Float.max(5458.847F, 1.0F);
      Double double0 = new Double(0.0);
      BiFunction<Double, Byte, Byte> biFunction0 = (BiFunction<Double, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double double1 = new Double(5458.847F);
      hashMap2.computeIfPresent(double1, biFunction0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("IL$:z;~S@e", (Map) hashMap1);
      jSONObject1.optLong("aG[5YUY[$am;s");
      JSONObject jSONObject2 = jSONObject1.optJSONObject("IL$:z;~S@e");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0060780287171975
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Short.toUnsignedLong((short) (-925));
      Double double0 = new Double(765.7274603368688);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "b$J|6cCg4rJ{-pv;6'";
      Double.sum((short) (-925), 0.0);
      stringArray0[3] = "Ma";
      stringArray0[4] = "zplRsaj8H<";
      Double double1 = new Double(76.728651648919);
      Double.isFinite(0.0);
      Double double2 = new Double(765.7274603368688);
      Double.sum(0.0, (-925.0));
      Double.min((-925.0), 1.0);
      Double.sum(76.728651648919, 0.0);
      Double.min(1.0, Double.NaN);
      String[] stringArray1 = JSONObject.getNames((Object) double2);
      assertNotNull(stringArray1);
      
      Float float0 = new Float((-1956.988F));
      JSONObject jSONObject0 = new JSONObject(float0, stringArray1);
      JSONObject jSONObject1 = jSONObject0.put("zplRsaj8H<", 64611L);
      jSONObject1.put("b$J|6cCg4rJ{-pv;6'", 765.7274603368688);
      assertEquals(10, jSONObject1.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.085207107455459
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      Float float0 = new Float((-211.741683));
      Float.sum(1.0F, 1.0F);
      HashMap<Object, Float> hashMap2 = new HashMap<Object, Float>();
      hashMap2.put(hashMap1, float0);
      Boolean.logicalAnd(true, true);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("iscompareTo", hashMap2);
      Byte byte0 = new Byte((byte)82);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject1.put("iscompareTo", (Collection) linkedList0);
      Long long0 = new Long(0L);
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      Float float1 = new Float((float) (-1L));
      JSONObject jSONObject2 = jSONObject1.accumulate("iscompareTo", (Object) null);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.489496015462759
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = jSONObject0.toString(2755);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put(string0, (Collection) linkedList1);
      Byte byte0 = new Byte((byte) (-39));
      jSONObject0.append("to", jSONObject1);
      int int0 = (-65);
      int int1 = 4;
      // Undeclared exception!
      jSONObject0.toString(4);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.768778567677283
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONObject1.toString(44);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList2);
      JSONObject jSONObject3 = new JSONObject();
      Double.sum(44, 44);
      JSONObject jSONObject4 = new JSONObject("{\"java.lang.String@0000000002\": {}}");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      String string0 = "no";
      hashMap1.put("{\"java.lang.String@0000000002\": {}}", "no");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(8192);
      stringWriter1.append((CharSequence) ">[kacy%$");
      JSONObject jSONObject5 = jSONObject2.put("", 449.09409137);
      jSONObject5.putOpt((String) null, stringWriter0);
      try { 
        jSONObject1.getLong("no");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"no\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6639316178387755
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject.valueToString(hashMap0);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList2);
      JSONObject jSONObject2 = new JSONObject();
      Double.sum(44, 44);
      JSONObject jSONObject3 = new JSONObject("{}");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("{}", "no");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(8192);
      stringWriter1.append((CharSequence) ">[kacy%$");
      JSONObject jSONObject4 = jSONObject1.put("", 449.09409137);
      jSONObject4.putOpt((String) null, stringWriter0);
      try { 
        jSONObject0.getLong("no");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"no\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8888456347731886
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      Double double0 = new Double((-1138.0));
      JSONObject.valueToString(double0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject1.put("", (Collection) linkedList0);
      jSONObject0.getJSONArray("");
      JSONObject jSONObject2 = jSONObject0.append("s9Q[QOosOWwJ.UcA", "");
      jSONObject2.optDouble("s9Q[QOosOWwJ.UcA");
      try { 
        jSONObject2.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.07336051654242
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      HashMap<Byte, JSONObject> hashMap1 = new HashMap<Byte, JSONObject>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Byte byte0 = new Byte((byte) (-73));
      hashMap0.put(byte0, jSONObject0);
      Byte byte1 = new Byte((byte)74);
      hashMap1.put(byte1, jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("isvalueOf", 0.0);
      jSONObject1.getDouble("isvalueOf");
      String string0 = JSONObject.quote("isvalueOf");
      String string1 = JSONObject.numberToString(byte1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4527306921137946
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-9f;~-s/>v'hVK8'S ", true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "rot";
      stringArray0[1] = "rot";
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      jSONObject1.put(" NJ5o?e_f", (Map) hashMap0);
      stringArray0[2] = " NJ5o?e_f";
      stringArray0[1] = " NJ5o?e_f";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.accumulate("getreverse", jSONObject0);
      try { 
        jSONObject1.getJSONArray(" NJ5o?e_f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" NJ5o?e_f\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.799687254092893
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      JSONObject jSONObject2 = jSONObject0.put("", 817.6582277038609);
      JSONObject jSONObject3 = jSONObject0.put("n", 817.6582277038609);
      jSONObject1.optDouble("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      jSONObject1.put("", (Collection) linkedList0);
      jSONObject0.getString("");
      jSONObject2.keys();
      jSONObject1.names();
      jSONObject2.optDouble("", 817.6582277038609);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      JSONObject jSONObject4 = jSONObject1.put("wheel.json.JSONArray@0000000008", (Collection) linkedList1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      linkedList0.removeAll(linkedList1);
      jSONArray0.put(4378);
      Long long0 = new Long(0L);
      Long.compare(0L, 283L);
      linkedList1.add(long0);
      jSONArray0.put((Collection) linkedList1);
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject5 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject6 = jSONObject5.put("N;T,vLj_", (Collection) linkedList0);
      jSONObject5.optJSONObject("*Q\"-LQ$LkW763\";q{e");
      Boolean boolean0 = new Boolean("wheel.json.JSONArray@0000000008");
      jSONObject3.opt("*Q\"-LQ$LkW763\";q{e");
      jSONObject4.optBoolean("_;lG<~U~uU/M");
      try { 
        jSONObject6.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5820183568770028
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      Object object0 = new Object();
      jSONObject1.accumulate("wuj^P4{2IZn~", jSONObject0);
      assertEquals(1, jSONObject1.length());
      
      Object object1 = new Object();
      JSONObject jSONObject2 = jSONObject0.put("wuj^P4{2IZn~", 503);
      jSONObject0.optJSONArray("DnO]<z^0^-syj6");
      double double0 = jSONObject2.getDouble("wuj^P4{2IZn~");
      assertEquals(503.0, double0, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.812582101424124
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      jSONObject1.optDouble("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList0);
      jSONObject0.getString("");
      jSONObject1.names();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      JSONObject jSONObject3 = jSONObject1.put("wheel.json.JSONArray@0000000005", (Collection) linkedList1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONArray0.join("islongBitsToDouble");
      jSONArray0.put(4378);
      Long long0 = new Long(4378);
      jSONObject0.put("islongBitsToDouble", (long) 4378);
      linkedList1.add(long0);
      jSONArray0.put((Collection) linkedList1);
      Double double0 = new Double(Double.NaN);
      jSONObject1.put("JSONArray initial value should be a string or collection or array.", (Collection) linkedList0);
      jSONObject3.put("\"Sc77Gm'^h~", 0.0);
      Double.isFinite(0.0);
      jSONObject2.optJSONArray("@IqW-Ks^zo>~+/OP");
      try { 
        jSONObject0.getLong("wheel.json.JSONArray@0000000005");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray@0000000005\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6391507892704076
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      jSONObject0.put("", (-2104.0));
      jSONObject0.put("n", (-2104.0));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      jSONObject1.put("", (Collection) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      JSONObject jSONObject2 = new JSONObject(linkedList0, stringArray0);
      Float float0 = new Float(304.14F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.452888727960641
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Double.min(0.0, 0.0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt((String) null);
      jSONObject0.keys();
      jSONObject0.put(": ", 391L);
      int int0 = jSONObject0.getInt(": ");
      assertEquals(391, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8093709150409323
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      JSONObject jSONObject2 = jSONObject0.put("", (-2104.0));
      jSONObject0.put("n", (-2104.0));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      jSONObject1.put("", (Collection) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("n");
      linkedList1.add("n");
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      Double.isFinite((-1371.26749408977));
      jSONObject1.toJSONArray((JSONArray) null);
      Object object0 = JSONObject.NULL;
      StringWriter stringWriter0 = new StringWriter(93);
      long long0 = jSONObject2.getLong("n");
      assertEquals((-2104L), long0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7989740084016517
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      jSONObject0.append("s9Q[QOosOWwJ.UcA", "");
      jSONObject0.put("n", (-2104.0));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      jSONObject1.put("", (Collection) linkedList0);
      Boolean boolean0 = Boolean.valueOf("zJ_GtGHH");
      jSONObject0.accumulate("~-03a", boolean0);
      jSONObject0.accumulate("n", jSONObject0);
      Long long0 = new Long(2250L);
      Object object0 = new Object();
      jSONObject1.has("");
      assertEquals(4, jSONObject1.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.917730347982188
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Double double0 = new Double((-722.685));
      Collection<String> collection0 = hashMap0.values();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("");
      Boolean boolean0 = new Boolean((String) null);
      JSONObject.valueToString(collection0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "[]", 0, 0);
      stringWriter0.append((CharSequence) ">[kacy%`q$");
      try { 
        jSONObject0.getDouble("gethashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gethashCode\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.94990480327419
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("x{:");
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject(double0);
      JSONObject.valueToString(linkedList0);
      JSONObject jSONObject3 = new JSONObject(jSONObject2);
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6864398575151536
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Double double0 = new Double((-267.3542775253941));
      Double double1 = new Double(173.226);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add((String) null);
      linkedList2.add((String) null);
      linkedList1.add("b[K,f(e0~h5}b&siw(d");
      Double.isFinite(0.0);
      linkedList1.add("#UH0LJSkx\"ij_Ej|w");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList2);
      Double.isFinite(0.0);
      JSONObject jSONObject0 = new JSONObject(double1);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.247085326747658
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      jSONObject1.optDouble("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList0);
      jSONObject0.getString("");
      jSONObject1.names();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      JSONObject jSONObject3 = jSONObject1.put("wheel.json.JSONArray@0000000005", (Collection) linkedList1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONArray0.put(4378);
      Long long0 = new Long(4378);
      jSONObject0.put("islongBitsToDouble", (long) 4378);
      linkedList1.add(long0);
      jSONArray0.put((Collection) linkedList1);
      jSONObject0.isNull("wheel.json.JSONArray@0000000005");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Float> function0 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Float> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Float>) function0);
      function1.compose((Function<? super Object, ?>) unaryOperator0);
      Function<Object, Float> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Float>) function1);
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Float> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Float>) function2);
      unaryOperator1.andThen((Function<? super String, ? extends Float>) function3);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.replaceAll(unaryOperator1);
      Float.min((byte)74, (-1913.901F));
      jSONObject3.length();
      JSONArray jSONArray1 = jSONObject2.optJSONArray("islongBitsToDouble");
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.005154853485851
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-1632), (-30803738));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.490126964439146
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Double double0 = new Double((-267.3542775253941));
      Double double1 = new Double((-722.685));
      Collection<String> collection0 = hashMap0.values();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("");
      JSONObject.valueToString(collection0, 0, 0);
      Boolean boolean0 = new Boolean((String) null);
      hashMap0.put((String) null, "");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) null, 0, 0);
      stringWriter0.append((CharSequence) ">[kacy%`q$");
      jSONObject0.put("[]", true);
      double double2 = new Integer(0);
      assertEquals(0, double2, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7608990947791696
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      JSONObject jSONObject1 = jSONObject0.put("", (-2104.0));
      jSONObject0.put("n", (-2104.0));
      Boolean boolean0 = Boolean.valueOf("zJ_GtGHH");
      jSONObject0.accumulate("n", boolean0);
      Long long0 = new Long(0L);
      Object object0 = JSONObject.NULL;
      int int0 = jSONObject1.optInt("n", (int) (byte)74);
      assertEquals(74, int0);
      
      long long1 = jSONObject1.optLong("");
      assertEquals((-2104L), long1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.2542269086672133
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      JSONObject.quote("{&(cu5VJd/`uz");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{&(cu5VJd/`uz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of {&(cu5VJd/`uz
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9234467485132996
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      Float float0 = new Float((-211.741683));
      HashMap<Object, Float> hashMap2 = new HashMap<Object, Float>();
      hashMap2.put(hashMap1, float0);
      Boolean.logicalAnd(true, false);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("iscompareTo", hashMap2);
      Byte byte0 = new Byte((byte) (-63));
      Long long0 = new Long(0L);
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      Float float1 = new Float((float) (-1L));
      jSONObject1.accumulate("iscompareTo", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.264425224878989
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap1);
      jSONObject0.optInt("-%w0(f", (-3080));
      jSONObject0.optLong("true");
      try { 
        jSONObject0.getLong("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.105029631334913
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      JSONObject jSONObject1 = jSONObject0.put("{f", true);
      jSONObject1.get("{f");
      jSONObject1.put("par", (-1.0));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      byte byte0 = (byte)74;
      Byte byte1 = new Byte((byte)74);
      JSONTokener jSONTokener0 = new JSONTokener("{f");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {f
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Double.min(0.0, 0.0);
      Double.max(Double.NaN, Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.opt((String) null);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.729204106940035
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      jSONObject0.put("", (-2104.0));
      jSONObject0.put("n", (-2104.0));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList0);
      jSONObject1.accumulate("Null key.", jSONObject2);
      Long long0 = new Long((byte)74);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 1, 1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      HashMap<Integer, Byte> hashMap1 = new HashMap<Integer, Byte>();
      BiFunction<Integer, Object, Byte> biFunction0 = (BiFunction<Integer, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8408292699713393
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = new Double(773.4662036118111);
      Double double1 = new Double(0.0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("+Iu3!{bU'hI");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.spliterator();
      linkedList1.add("&UH%Joc");
      linkedList0.add(";y");
      linkedList0.clear();
      boolean boolean0 = new Boolean(true);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("has");
      linkedList0.add(";y");
      linkedList0.add(";y");
      linkedList1.add("jwhX/3dlSv");
      LinkedList<Short> linkedList3 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Boolean boolean1 = new Boolean("+Iu3!{bU'hI");
      linkedList1.add("\"gvi6#v$`");
      JSONObject jSONObject0 = new JSONObject(double1);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(3, jSONObject0.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(2, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7046427072575114
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject1.optInt("");
      jSONArray0.put((-1951.753201166812));
      JSONObject.valueToString(jSONArray0);
      JSONObject jSONObject2 = jSONObject0.append("s9Q[QOosOWwJ.UcA", "");
      try { 
        jSONObject2.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7473160710982958
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = new Integer(44);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-9f;~-s/>v'hVK8'S ", true);
      Integer integer1 = new Integer(44);
      try { 
        jSONObject1.getDouble("-9f;~-s/>v'hVK8'S ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-9f;~-s/>v'hVK8'S \"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.418359126143601
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject.valueToString((Object) null, 44, 44);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      jSONObject1.put("", (Collection) linkedList2);
      String string0 = "C2!LM<b~";
      byte byte0 = (byte)6;
      Byte byte1 = new Byte((byte)6);
      JSONObject jSONObject2 = jSONObject0.append("C2!LM<b~", byte1);
      try { 
        jSONObject2.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.483659025581849
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Short.toUnsignedLong((short) (-925));
      Float float0 = new Float((float) 64611L);
      Float.min((short) (-925), 1.0F);
      Float.min(1.0F, (short) (-925));
      Float.isFinite((-5.0262403F));
      Float.isFinite(0.0F);
      Float.max(64611L, (short) (-925));
      Float.isFinite((-925.0F));
      Float.max(1.0F, 978.92896F);
      Float.max(0.0F, 898.5F);
      Float.max((-925.0F), 0.0F);
      Float.isFinite((-5.0262403F));
      Float.isFinite((-1.0F));
      Boolean.valueOf("java.lang.Long@00000000120");
      StringWriter stringWriter0 = new StringWriter(4520);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Long@00000000120";
      stringArray0[1] = "java.lang.Long@00000000120";
      stringArray0[2] = "java.lang.Long@00000000120";
      stringArray0[3] = "y;x!lrQ/clw";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(2, jSONObject0.length());
      
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject2, (-1415), 1);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      float float0 = (-1585.0F);
      Float float1 = new Float((-1585.0F));
      Float.min((-1585.0F), (-0.049533248F));
      Float.max((-0.049533248F), (-0.049533248F));
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.753595346624297
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("", "");
      JSONObject jSONObject1 = jSONObject0.put("", (-2104.0));
      JSONObject jSONObject2 = jSONObject0.put("n", (-2104.0));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      jSONObject0.getString("");
      jSONObject1.keys();
      jSONObject1.optDouble("", (-2104.0));
      Long long0 = new Long(0L);
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      jSONObject0.put("N;T,vLj_", (Collection) linkedList0);
      jSONObject0.optBoolean("n", true);
      jSONObject2.optJSONObject("*Q\"-LQ$LkW763\";q{e");
      jSONObject0.isNull("java.lang.Double@0000000004");
      jSONObject2.getInt("");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject3 = jSONObject2.put("gettoUnsignedLong", object0);
      assertSame(jSONObject3, jSONObject0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.731961405209194
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("", "");
      jSONObject0.toString(76);
      jSONObject0.opt("{}");
      Short short0 = new Short((short)9);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) short0);
      JSONObject jSONObject2 = jSONObject1.put("isquote", (long) (short)9);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject1.put("zEL;dU'G", (-518.9457));
      jSONObject2.optBoolean("egoi5Rxw4_a(F5N^h:");
      jSONObject2.optInt("zEL;dU'G");
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6365496422779366
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      jSONObject0.append("s9Q[QOosOWwJ.UcA", "");
      JSONObject jSONObject2 = jSONObject0.put("n", (-2104.0));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      jSONObject1.put("", (Collection) null);
      Boolean.valueOf("zJ_GtGTHH");
      jSONObject2.opt("~-03a");
      jSONObject1.optString("s9Q[QOosOWwJ.UcA", "do");
      jSONObject0.optLong("wheel.json.JSONArray@0000000005");
      try { 
        jSONObject2.get("isN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MY+Lh@[a(W&";
      stringArray0[1] = "x\"`2kYgQuT$AS\"G";
      stringArray0[2] = "pa";
      stringArray0[3] = "517.6220";
      stringArray0[4] = "";
      stringArray0[5] = "pa";
      stringArray0[6] = "x\"`2kYgQuT$AS\"G";
      stringArray0[7] = "#W`dS1AiE&0Ww).Q 9R";
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = jSONObject1.optString(".)z-2]?Ggs@c)siZ(E", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.3149664307126074
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      JSONObject jSONObject1 = jSONObject0.append("s9Q[QOosOWwJ.UcA", "");
      jSONObject1.optLong("s9Q[QOosOWwJ.UcA");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject1.put("<M11_.28Dtq", (Collection) linkedList0);
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.2519060360972816
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      Object object0 = new Object();
      Long long0 = new Long((-2130L));
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      Float float0 = new Float(0.0F);
      JSONObject.numberToString(float0);
      Object object1 = new Object();
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Float float1 = new Float((float) (-2130L));
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.8435921481713176
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(Double.NaN);
      Double double1 = new Double((-722.685));
      Double.max(0.0, (-722.685));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      Double.max(0.0, 1751.41578481);
      Long long0 = new Long(1926L);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      Double.min(0.0, 0.0);
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-466));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.353363451324745
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      Float float0 = new Float((-211.741683));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a Boolean.";
      stringArray0[1] = "] is not a Boolean.";
      hashMap1.entrySet();
      stringArray0[2] = "getvalueOf";
      JSONObject jSONObject0 = new JSONObject(hashMap1, stringArray0);
      Integer integer0 = new Integer((-568));
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected a ',' or ']'", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.5557815952023986
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      String string0 = "";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject((Object) "wheel.json.JSONObject@0000000001");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject.valueToString("wheel.json.JSONObject@0000000001", 58, 58);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      JSONObject jSONObject2 = jSONObject1.put("wheel.json.JSONObject@0000000001", (Collection) linkedList2);
      jSONObject2.toString(37, 27);
      JSONTokener jSONTokener0 = new JSONTokener("\"java.lang.String@0000000074\"");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"java.lang.String@0000000074\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.783763485864765
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      JSONObject jSONObject2 = jSONObject0.put("", (-2104.0));
      jSONObject0.append("s9Q[QOosOWwJ.UcA", "");
      JSONObject jSONObject3 = jSONObject0.put("n", (-2104.0));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      JSONObject jSONObject4 = jSONObject1.put("", (Collection) linkedList0);
      Boolean boolean0 = Boolean.valueOf("zJ_GtGHH");
      jSONObject0.accumulate("~-03a", boolean0);
      jSONObject0.accumulate("n", jSONObject2);
      Long long0 = new Long(2250L);
      Object object0 = new Object();
      jSONObject4.names();
      jSONObject3.optJSONArray(",\n");
      // Undeclared exception!
      try { 
        jSONObject4.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.0067848794820025
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("%i", "%i");
      jSONObject0.getJSONArray("%i");
      JSONObject jSONObject1 = jSONObject0.append("s9Q[QOosOWwJ.UcA", "%i");
      try { 
        jSONObject1.getBoolean("s9Q[QOosOWwJ.UcA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"s9Q[QOosOWwJ.UcA\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.0743445783804724
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1230.0));
      jSONObject0.accumulate("ods<w", double0);
      jSONObject0.put("ods<w", (Object) "ods<w");
      try { 
        jSONObject0.getBoolean("ods<w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ods<w\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.031051583822962
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.optLong("HaqvN6;", (-1510L));
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      JSONObject jSONObject1 = new JSONObject();
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.6883569797160485
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer integer0 = new Integer(1987);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("getsum", 3679.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("getsum", integer0);
      jSONObject0.optDouble("su");
      jSONObject0.optJSONObject("isvalueOf");
      jSONObject1.isNull("isvalueOf");
      Object object0 = new Object();
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.9703193498234346
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      JSONObject jSONObject2 = jSONObject0.put("", (-2104.0));
      JSONObject jSONObject3 = jSONObject0.put("n", (-2104.0));
      jSONObject1.optDouble("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      jSONObject2.remove("n");
      jSONObject1.put("", (Collection) linkedList0);
      jSONObject0.getString("");
      jSONObject1.names();
      jSONObject2.optDouble("", (-2104.0));
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      JSONObject jSONObject4 = jSONObject1.put("wheel.json.JSONArray@0000000008", (Collection) linkedList1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONArray0.put(4378);
      Long long0 = new Long(0L);
      linkedList1.offerFirst(long0);
      linkedList1.add(long0);
      jSONArray0.put((Collection) linkedList1);
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject5 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject6 = jSONObject5.put("N;T,vLj_", (Collection) linkedList0);
      jSONObject5.optJSONObject("*Q\"-LQ$LkW763\";q{e");
      jSONObject0.isNull("wheel.json.JSONArray@0000000008");
      jSONObject3.opt("*Q\"-LQ$LkW763\";q{e");
      jSONObject4.optBoolean("_;lG<~U~uU/M");
      try { 
        jSONObject6.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1807382878069084
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      HashMap<Double, Byte> hashMap2 = new HashMap<Double, Byte>();
      HashMap<Double, Byte> hashMap3 = new HashMap<Double, Byte>();
      Float float0 = new Float(0.0);
      HashMap<Double, Byte> hashMap4 = new HashMap<Double, Byte>();
      HashMap hashMap5 = new HashMap<Double, Float>();
      Integer.valueOf((-1921));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      String string0 = "$A<1n\\X#kj";
      String string1 = ",\n";
      try { 
        jSONObject0.getLong(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.1759615451260204
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Short short0 = new Short((short) (-925));
      Double double0 = new Double(765.7274603368688);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.spliterator();
      linkedList1.add("has");
      linkedList1.add(")<9UKU");
      linkedList1.clear();
      Double.isFinite((-85.18101476));
      linkedList0.add(")<9UKU");
      linkedList1.add("~ KBgta4|5J>qn[0");
      linkedList0.add(")<9UKU");
      linkedList1.add("jwhX/3dlSv");
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Double.isFinite(115);
      linkedList1.add("~ KBgta4|5J>qn[0");
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      String string0 = JSONObject.valueToString(linkedList0);
      assertNotNull(string0);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONArray1);
      assertEquals(2, jSONArray1.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Short.toUnsignedLong((short) (-925));
      Double double0 = new Double(765.7274603368688);
      String[] stringArray0 = new String[6];
      String string0 = "b$J|6cCc4r~{-pvW6)";
      stringArray0[1] = "b$J|6cCc4r~{-pvW6)";
      Double.sum((short) (-925), 0.0);
      stringArray0[3] = "Ma";
      stringArray0[4] = "zplRsaj8H<";
      Double double1 = new Double(76.728651648919);
      Double.isFinite(0.0);
      Double double2 = new Double(765.7274603368688);
      Boolean boolean0 = new Boolean("zplRsaj8H<");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Float> function0 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      Function<Object, Float> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function0);
      Function.identity();
      function1.compose((Function<? super LinkedList<Boolean>, ?>) unaryOperator1);
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends Float>) function1);
      Function.identity();
      UnaryOperator.identity();
      Function<Double, String> function2 = (Function<Double, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Double, ? extends String>) function2);
      unaryOperator0.andThen((Function<? super String, ? extends Float>) function1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.replaceAll(unaryOperator0);
      Long long0 = new Long((short) (-925));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.8558800514229925
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.optDouble("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList0);
      Integer integer0 = new Integer((-6254807));
      linkedList0.add(integer0);
      jSONObject2.optLong("}>\tCJkn7MCpR9XW@(");
      jSONObject0.getString("");
      jSONObject1.names();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      JSONObject jSONObject3 = jSONObject1.put("wheel.json.JSONArray@0000000006", (Collection) linkedList1);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList1);
      jSONArray1.put(4378);
      Long long0 = new Long(4378);
      JSONObject jSONObject4 = jSONObject0.put("islongBitsToDouble", (long) 4378);
      Predicate<Long> predicate0 = Predicate.isEqual((Object) jSONObject2);
      Predicate<Long> predicate1 = predicate0.negate();
      Predicate<Long> predicate2 = predicate0.and(predicate1);
      Predicate<Long> predicate3 = predicate2.or(predicate1);
      linkedList1.removeIf(predicate3);
      linkedList1.add(long0);
      jSONArray1.put((Collection) linkedList1);
      jSONObject3.optDouble("", (-179.969357638132));
      jSONObject0.isNull("wheel.json.JSONArray@0000000006");
      jSONObject1.opt("");
      jSONObject0.optJSONArray("}>\tCJkn7MCpR9XW@(");
      String string0 = "_;lG<~U~uU/M";
      try { 
        jSONObject4.getLong("LBLbi5oz[&>.uN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"LBLbi5oz[&>.uN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5801229155620669
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      Double.min(0.0, 0.0);
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "max";
      stringArray0[1] = "max";
      stringArray0[2] = "max";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      stringArray0[5] = "isN";
      jSONObject0.putOpt((String) null, "K$D~{qA;{S[[Kh)");
      Short short0 = new Short((short)40);
      JSONObject jSONObject1 = new JSONObject((Object) "max");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.437668949141933
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "gettoHexString";
      stringArray0[1] = "NSAS\"uvuzSt:r";
      stringArray0[2] = "y{+3t,W";
      Double.min((-618.7529212619169), 0.0);
      stringArray0[3] = "H)K_~!.";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("NSAS\"uvuzSt:r", "gettoHexString");
      jSONObject1.put("gettoHexString", 1.0);
      jSONObject1.optString("gettoHexString");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.529403535395866
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)2246);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject("<z/Q+dO", stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("m]T]SC8Dz2,Sx)#j,", 0L);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject1.put("do", (Collection) linkedList0);
      jSONObject2.optDouble("m]T]SC8Dz2,Sx)#j,");
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalXor(false, false);
      JSONObject jSONObject3 = new JSONObject((Object) "do");
      jSONObject2.optBoolean("lo", false);
      JSONObject.quote("sC]I");
      try { 
        jSONObject3.getDouble("fkV`!pYuG:_N DBe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fkV`!pYuG:_N DBe\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.900630467102318
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      JSONObject jSONObject2 = jSONObject0.put("", (-2104.0));
      JSONObject jSONObject3 = jSONObject0.put("n", (-2104.0));
      jSONObject1.optDouble("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      JSONObject jSONObject4 = jSONObject1.put("", (Collection) linkedList0);
      jSONObject0.getString("");
      jSONObject1.names();
      jSONObject2.optDouble("", (-2104.0));
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONArray0.put(4378);
      Long long0 = new Long(0L);
      linkedList1.add(long0);
      jSONArray0.put((Collection) linkedList1);
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject5 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject6 = jSONObject5.put("N;T,vLj_", (Collection) linkedList0);
      jSONObject5.optJSONObject("*Q\"-LQ$LkW763\";q{e");
      jSONObject0.isNull("wheel.json.JSONArray@0000000008");
      jSONObject3.opt("*Q\"-LQ$LkW763\";q{e");
      jSONObject4.optBoolean("_;lG<~U~uU/M");
      try { 
        jSONObject6.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.9017832074119507
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("", "");
      String string0 = jSONObject0.toString(76);
      assertEquals("{}", string0);
      
      jSONObject0.opt("{}");
      hashMap0.put("", "L<_?3/uC");
      Short short0 = new Short((short)9);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) short0);
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{}";
      stringArray0[1] = null;
      stringArray0[2] = "getsum";
      Double.sum(0.0, 76);
      String string1 = jSONObject0.toString();
      assertFalse(string1.equals((Object)string0));
      
      jSONObject0.optInt("");
      jSONObject1.optJSONObject("*Q\"-LQ$LkW763\";q{e");
      boolean boolean0 = jSONObject0.isNull("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.2438848869708714
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      JSONObject jSONObject2 = jSONObject0.put("", (-2104.0));
      jSONObject0.put("n", (-2104.0));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      jSONObject1.put("", (Collection) linkedList0);
      Boolean boolean0 = Boolean.valueOf("zJ_GtGHH");
      JSONObject jSONObject3 = jSONObject0.accumulate("~-03a", boolean0);
      Long long0 = new Long(0L);
      jSONObject3.opt("CmI>`^ `rb@;N@, A-m");
      jSONObject2.optInt("n", (int) (byte)74);
      long long1 = jSONObject2.optLong("");
      assertEquals(3, jSONObject0.length());
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Short.toUnsignedLong((short) (-925));
      Double double0 = new Double(765.7274603368688);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "b$J|6cCc4r~{-pvW6)";
      Double.sum((short) (-925), 0.0);
      stringArray0[3] = "Ma";
      String string0 = "zplRsaj8H<";
      stringArray0[4] = "zplRsaj8H<";
      Double double1 = new Double(76.728651648919);
      Double.isFinite(0.0);
      Double double2 = new Double(765.7274603368688);
      Double.sum(76.728651648919, (-215.7984));
      Double.isFinite(76.728651648919);
      JSONObject jSONObject0 = new JSONObject("zplRsaj8H<", stringArray0);
      double double3 = (-2185.9);
      Double double4 = new Double((-925.0));
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.031051583822962
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      StringWriter stringWriter0 = new StringWriter(10);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap1);
      jSONObject0.optLong("HaqvN6;", 1L);
      HashMap<Double, Byte> hashMap2 = new HashMap<Double, Byte>();
      JSONObject jSONObject1 = new JSONObject();
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.6723957433509247
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("<FcZ/~].");
      long long0 = jSONObject0.optLong(".*%WUWQ`+c W\"H", (long) 0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      StringWriter stringWriter0 = new StringWriter(3564);
      JSONObject.testValidity(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.1091821433649187
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      HashMap<Double, Byte> hashMap2 = new HashMap<Double, Byte>();
      Float.max(5458.847F, 1.0F);
      Double double0 = new Double(0.0);
      BiFunction<Double, Byte, Byte> biFunction0 = (BiFunction<Double, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.computeIfPresent(double0, biFunction0);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap2);
      long long0 = jSONObject0.optLong("*");
      assertEquals(2, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.7455832943344118
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString((String) null, (String) null);
      long long0 = jSONObject0.optLong("$<{lu_b");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.7431904929487785
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer integer0 = new Integer(44);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-9f;~-s/>v'hVK8'S ", true);
      Integer integer1 = new Integer(44);
      double double0 = new Integer(44);
      jSONObject0.optLong("-9f;~-s/>v'hVK8'S ");
      jSONObject1.optLong("-9f;~-s/>v'hVK8'S ");
      String[] stringArray0 = new String[4];
      jSONObject1.optInt("-9f;~-s/>v'hVK8'S ");
      stringArray0[0] = "rot";
      stringArray0[1] = " NJ5o?e_f";
      stringArray0[2] = " NJ5o?e_f";
      stringArray0[3] = " NJ5o?e_f";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = jSONObject0.accumulate("getreverse", jSONObject0);
      jSONObject3.optDouble("5v/'G(G8Jf}'{Yb`", (-667.601563181576));
      try { 
        jSONObject1.getJSONArray(" NJ5o?e_f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" NJ5o?e_f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.744502543361508
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONObject1.toString(44);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList2);
      JSONObject jSONObject3 = jSONObject2.append("C+c/@s{6o /S", linkedList1);
      Integer integer0 = new Integer(44);
      jSONObject2.toString(44, (-57));
      jSONObject1.optLong("C+c/@s{6o /S");
      jSONObject3.optInt("{\"java.lang.String@0000000002\": {}}", 555);
      jSONObject3.optLong("{\"java.lang.String@0000000002\": {}}");
      jSONObject3.toString(88);
      linkedList2.removeLastOccurrence((Object) null);
      jSONObject0.toString(44, 44);
      Boolean boolean0 = new Boolean(false);
      Boolean.compare(false, false);
      jSONObject1.putOpt("{\"java.lang.String@0000000002\": {}}", boolean0);
      try { 
        jSONObject2.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.9576699287932238
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "min";
      jSONObject0.put("min", true);
      try { 
        jSONObject0.getInt("min");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"min\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.004782616963043
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1230.0));
      String string0 = "ods<w";
      JSONObject jSONObject1 = jSONObject0.accumulate("ods<w", double0);
      jSONObject1.getDouble("ods<w");
      JSONObject jSONObject2 = jSONObject0.put("ods<w", (Object) "ods<w");
      try { 
        jSONObject2.get("D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"D\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.059130541410059
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      Float float0 = new Float((double) 3705);
      Double.max(487.27662203, 3705);
      Float float1 = new Float((float) 3705);
      float float2 = new Float((double) 1.0F);
      Float.sum(1.0F, 3705);
      Float.sum(3705, 0.0F);
      Float.max(0.0F, 5458.847F);
      JSONObject jSONObject0 = new JSONObject(float1);
      assertEquals(3, jSONObject0.length());
      
      StringWriter stringWriter0 = new StringWriter(2333);
      String string0 = JSONObject.valueToString(hashMap0, (-30733247), 54);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.4402380383310271
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Short.toUnsignedLong((short) (-925));
      Float float0 = new Float((float) 64611L);
      Float.min(1.0F, (short) (-925));
      Float.isFinite((-5.0262403F));
      Float.isFinite((-299.6892F));
      Float.max(1.0F, (-299.6892F));
      Float.isFinite((-5.0262403F));
      Float.sum(0.0F, (short) (-925));
      Float.max((-2155.038F), 1410.0F);
      Float.max((-3411.0715F), 0.0F);
      Float.isFinite((short) (-925));
      Float.min((-1.0F), 1.0F);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "'g1zy^ECrJTXX0*vE";
      stringArray0[2] = "'g1zy^ECrJTXX0*vE";
      stringArray0[3] = "'g1zy^ECrJTXX0*vE";
      stringArray0[4] = "'g1zy^ECrJTXX0*vE";
      stringArray0[5] = "'g1zy^ECrJTXX0*vE";
      JSONObject jSONObject0 = new JSONObject("'g1zy^ECrJTXX0*vE", stringArray0);
      String string0 = JSONObject.valueToString("'g1zy^ECrJTXX0*vE", 120, 117);
      assertNotNull(string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.237966169824137
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (Object) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer(618);
      Integer integer1 = new Integer(38);
      Integer.getInteger("f~-e#", integer1);
      Boolean boolean0 = new Boolean("_)g3i)3TRQ55,k.");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'g1zy^ECrJTXX0*vE";
      stringArray0[1] = "_)g3i)3TRQ55,k.";
      stringArray0[2] = "] not found.";
      stringArray0[3] = "";
      stringArray0[4] = "] not found.";
      stringArray0[5] = "_)g3i)3TRQ55,k.";
      stringArray0[6] = "_)g3i)3TRQ55,k.";
      stringArray0[7] = "Expected a ':' after a key";
      JSONObject jSONObject1 = new JSONObject(boolean0, stringArray0);
      Short short0 = new Short((short)103);
      String string0 = JSONObject.valueToString(short0, 5, 120);
      assertNotNull(string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, (-1623), (-1623));
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Boolean, String> function1 = unaryOperator0.compose((Function<? super Boolean, ? extends String>) function0);
      Function<Boolean, String> function2 = unaryOperator0.compose((Function<? super Boolean, ? extends String>) function1);
      unaryOperator0.compose((Function<? super Boolean, ? extends String>) function2);
      Function<Object, Float> function3 = null;
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      // Undeclared exception!
      try { 
        unaryOperator1.andThen((Function<? super Object, ? extends Float>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer integer0 = new Integer(120);
      String[] stringArray0 = new String[4];
      Integer integer1 = new Integer(120);
      Integer.getInteger((String) null, integer1);
      stringArray0[0] = "] not found.";
      stringArray0[1] = "has";
      stringArray0[2] = "has";
      stringArray0[3] = "'g1zy^ECrJTXX0*vE";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String string0 = JSONObject.valueToString((Object) null, (-2260), (-2260));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.811403313278401
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("");
      JSONObject jSONObject2 = jSONObject0.put("", (-2104.0));
      jSONObject0.put("n", (-2104.0));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      JSONObject jSONObject3 = jSONObject1.put("", (Collection) linkedList0);
      jSONObject3.accumulate("~-03a", "");
      Long long0 = new Long(0L);
      JSONObject.valueToString(jSONObject3, (byte)74, 1);
      jSONObject1.toJSONArray((JSONArray) null);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray1 = jSONObject2.names();
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.47021591933456
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      HashMap<Double, Byte> hashMap2 = new HashMap<Double, Byte>();
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.replaceAll(biFunction0);
      BiConsumer<Double, Object> biConsumer0 = (BiConsumer<Double, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap2.forEach(biConsumer0);
      hashMap1.clear();
      Byte byte0 = new Byte((byte)45);
      hashMap1.replace((Double) null, byte0);
      hashMap1.putAll(hashMap2);
      Float float0 = new Float(1.0F);
      Double double0 = new Double(0.0);
      Double.isFinite((-4543.9533373));
      Double double1 = new Double(0.0);
      hashMap1.putIfAbsent(double1, (Byte) null);
      Double.isFinite(0.0);
      BiFunction<Double, Byte, Byte> biFunction1 = (BiFunction<Double, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.computeIfPresent(double0, biFunction1);
      Integer integer0 = new Integer(9);
      Integer.getInteger("fo", integer0);
      JSONObject jSONObject0 = new JSONObject(integer0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      jSONObject0.toString(6, 2513);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.3585873887206783
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Short.toUnsignedLong((short) (-925));
      Double double0 = new Double(64611L);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("toU");
      linkedList0.add("getparseDouble");
      linkedList1.add((String) null);
      Double.isFinite((-1.0));
      Integer integer0 = new Integer(16);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Boolean, ? extends String>) function0);
      Function<Object, Float> function1 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      linkedList0.pop();
      Function<Object, Float> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function1);
      function2.apply(unaryOperator1);
      function2.compose((Function<? super Object, ?>) unaryOperator1);
      Function<Object, Float> function3 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function2);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      function2.compose((Function<? super Object, ?>) unaryOperator2);
      Function.identity();
      unaryOperator0.andThen((Function<? super String, ? extends Float>) function3);
      linkedList0.replaceAll(unaryOperator0);
      Long long0 = new Long(4041L);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      jSONObject0.toString(32, (-1226));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.312242165116608
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      Float float0 = new Float((-211.741683));
      Float.sum(1.0F, 1.0F);
      HashMap<Double, Byte> hashMap2 = new HashMap<Double, Byte>();
      hashMap1.putAll(hashMap2);
      StringWriter stringWriter0 = new StringWriter(10);
      JSONObject jSONObject0 = new JSONObject((Object) "co");
      jSONObject0.write(stringWriter0);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-466));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.1761689797087618
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      HashMap<Double, Byte> hashMap2 = new HashMap<Double, Byte>();
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.replaceAll(biFunction0);
      BiConsumer<Double, Object> biConsumer0 = (BiConsumer<Double, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap2.forEach(biConsumer0);
      hashMap1.putAll(hashMap2);
      Float float0 = new Float(1.0F);
      Double double0 = new Double(1.0F);
      Double.isFinite((-1406.064865));
      BiFunction<Double, Byte, Byte> biFunction1 = (BiFunction<Double, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.computeIfPresent(double0, biFunction1);
      Integer integer0 = new Integer(19);
      Integer.getInteger("com", integer0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.4242753321202222
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("09(R#]%e");
      Boolean boolean0 = new Boolean((String) null);
      String string0 = "mi9n";
      String string1 = "4J\\1<|3+f+/#7lZ";
      JSONObject.quote("4J\u0001<|3+f+/#7lZ");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "\"4J\\1<|3+f+/#7lZ\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.1719330103601107
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("pXwWj %PkZ", true);
      jSONObject1.put("pXwWj %PkZ", true);
      Integer integer0 = new Integer(11);
      try { 
        jSONObject0.append("pXwWj %PkZ", integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[pXwWj %PkZ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.5702525239721337
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      JSONObject jSONObject1 = jSONObject0.append("", "");
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      HashMap<Double, Byte> hashMap2 = new HashMap<Double, Byte>();
      hashMap1.putAll(hashMap2);
      HashMap<Double, Byte> hashMap3 = new HashMap<Double, Byte>();
      Float float0 = new Float((double) 1.0F);
      Integer.getInteger("8<:)6gh$Phs", (Integer) null);
      Integer.getInteger("\r", (Integer) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.486476853275102
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Short.toUnsignedLong((short) (-925));
      Double double0 = new Double(765.7274603368688);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.listIterator();
      linkedList1.add(")<9UKU");
      linkedList1.clear();
      Double.isFinite((-85.18101476));
      Integer integer0 = new Integer(102);
      Double.max(2012.0452, 102);
      Double.min(1.0, 64611L);
      Double.sum((-2623.7722548661477), 64611L);
      Float.max((-1.0F), 1.0F);
      Float.max(1378.0F, 0.0F);
      Float.min(1749.761F, (-2525.682F));
      Short short0 = new Short((short)44);
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Double double0 = new Double(773.4662036118111);
      Double double1 = new Double(0.0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("+Iu3!{bU'hI");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.spliterator();
      linkedList1.add("&UH%Joc");
      linkedList0.add("Zv");
      linkedList0.clear();
      Boolean boolean0 = new Boolean(true);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("has");
      linkedList0.add("Zv");
      linkedList0.add("Zv");
      linkedList1.add("jwhX/3dlSv");
      LinkedList<Short> linkedList3 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Boolean boolean1 = new Boolean("+Iu3!{bU'hI");
      linkedList1.add("\"gvi6#v$`");
      JSONObject jSONObject0 = new JSONObject(double1);
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.5831417482076728
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Short.toUnsignedLong((short) (-925));
      Double double0 = new Double(765.7274603368688);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add(")<9UKU");
      linkedList1.clear();
      Double.isFinite((-85.18101476));
      Integer integer0 = new Integer(102);
      Double.max(1984.4457304362434, 102);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Float> function0 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Float> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Float>) function0);
      unaryOperator0.andThen((Function<? super Object, ? extends Float>) function1);
      Function<Object, Short> function2 = (Function<Object, Short>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Short> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Short>) function2);
      Function<Object, Float> function4 = function1.compose((Function<? super Object, ?>) function3);
      unaryOperator0.andThen((Function<? super Object, ? extends Float>) function1);
      UnaryOperator.identity();
      Function<Object, Float> function5 = function4.compose((Function<? super Object, ?>) function3);
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super String, ? extends Float>) function5);
      linkedList0.replaceAll(unaryOperator1);
      Long long0 = new Long((-1L));
      Long long1 = new Long((short) (-925));
      JSONObject jSONObject0 = new JSONObject(long1);
      jSONObject0.keys();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      HashMap<Double, Byte> hashMap2 = new HashMap<Double, Byte>();
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.replaceAll(biFunction0);
      BiConsumer<Double, Object> biConsumer0 = (BiConsumer<Double, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap2.forEach(biConsumer0);
      hashMap1.putAll(hashMap2);
      Float.max(5458.847F, 1.0F);
      Double double0 = new Double(0.0);
      BiFunction<Double, Byte, Byte> biFunction1 = (BiFunction<Double, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.computeIfPresent(double0, biFunction1);
      Integer integer0 = new Integer(9);
      HashMap<Double, Byte> hashMap3 = new HashMap<Double, Byte>();
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Double double0 = new Double(765.7274603368688);
      Double double1 = new Double(0.0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("JSONArray initial value should be a string or collection or array.");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.spliterator();
      String string0 = "has";
      linkedList1.add("&UH%Joc");
      String string1 = ";y";
      linkedList0.add(";y");
      linkedList0.clear();
      Double.isFinite((-85.18101476));
      Integer integer0 = new Integer((-140));
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Boolean, String> function1 = unaryOperator0.compose((Function<? super Boolean, ? extends String>) function0);
      unaryOperator0.compose((Function<? super Boolean, ? extends String>) function1);
      Function<Object, Float> function2 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function2).apply(any());
      Function<Object, Float> function3 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function2);
      Function<Object, Float> function4 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function3);
      Function<Object, Float> function5 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function3);
      function3.apply(";y");
      Function<Object, Float> function6 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function4);
      function6.compose((Function<? super Object, ?>) function4);
      unaryOperator1.andThen((Function<? super Object, ? extends Float>) function5);
      StringWriter stringWriter0 = new StringWriter(2);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("&UH%Joc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of &UH%Joc
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.6342415258810084
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(Double.NaN);
      Double.isFinite(Double.NaN);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("ispush");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double.isFinite((-722.685));
      Integer integer0 = new Integer(1948);
      JSONObject jSONObject0 = new JSONObject((Object) "getmin");
      Double double1 = new Double(102);
      Double double2 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate("gettoHexString", double2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Short.toUnsignedLong((short) (-925));
      Double double0 = new Double(765.7274603368688);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "b$J|6cCc4r~{-pvW6)";
      Double.sum((short) (-925), 0.0);
      stringArray0[3] = "Ma";
      stringArray0[4] = "zplRsaj8H<";
      Double double1 = new Double(76.728651648919);
      Double.isFinite(0.0);
      Double double2 = new Double(765.7274603368688);
      Double.sum(76.728651648919, (-215.7984));
      Double.isFinite(76.728651648919);
      Double.max(725.3099452772134, 0.0);
      Double.sum(0.0, (-925.0));
      Double.min((-925.0), 1.0);
      Double.sum(76.728651648919, 0.0);
      Double.sum((-925.0), (-1778.97500867875));
      Double.max(0.0, (-925.0));
      StringWriter stringWriter0 = new StringWriter(116);
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.5236603515739744
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(Double.NaN);
      Double double1 = new Double((-722.685));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "getmin";
      stringArray0[1] = "gettoHexString";
      stringArray0[2] = "gettoHexString";
      Double.min((-722.685), (-722.685));
      stringArray0[3] = "getmin";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "getmin";
      stringArray1[1] = "ismin";
      stringArray1[2] = "getmin";
      stringArray1[5] = "getmin";
      stringArray1[6] = "Expected a ',' or '}'";
      stringArray1[7] = "gettoHexString";
      jSONObject0.optJSONArray("Expected '");
      try { 
        jSONObject0.getDouble(",lF3/7W6n_-oC.YK>OZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",lF3/7W6n_-oC.YK>OZ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.809287344168781
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      HashMap<Double, Byte> hashMap2 = new HashMap<Double, Byte>();
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.replaceAll(biFunction0);
      BiConsumer<Double, Object> biConsumer0 = (BiConsumer<Double, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap2.forEach(biConsumer0);
      hashMap1.clear();
      Byte byte0 = new Byte((byte)45);
      hashMap1.replace((Double) null, byte0);
      hashMap1.putAll(hashMap2);
      Double double0 = new Double(0.0);
      Double.isFinite((-4543.9533373));
      Double double1 = new Double(0.0);
      hashMap1.putIfAbsent(double1, (Byte) null);
      Double.isFinite(0.0);
      BiFunction<Double, Byte, Byte> biFunction1 = (BiFunction<Double, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.computeIfPresent(double0, biFunction1);
      Integer integer0 = new Integer(9);
      Integer.getInteger("fo", integer0);
      Double.min((-3700.41), 0.0);
      Integer integer1 = new Integer(9);
      JSONObject jSONObject0 = new JSONObject(integer1);
      jSONObject0.accumulate("fo", integer1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Short.toUnsignedLong((short) (-925));
      Double double0 = new Double(64611L);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("toU");
      linkedList0.add("BD.z],S");
      linkedList1.add((String) null);
      Double.isFinite((-1.0));
      Integer integer0 = new Integer(16);
      UnaryOperator.identity();
      Double.max(16, 2012.0452);
      Double.min(1.0, 16);
      Double.sum(Double.NaN, (short) (-925));
      Double.sum(1.0, 943.1);
      Double.max(0.0, 1.0);
      Double.min(0.0, 943.1);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.1392921128169875
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Collection<Float> collection0 = hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\t";
      stringArray0[1] = "\t";
      stringArray0[2] = "\t";
      stringArray0[3] = "\t";
      stringArray0[4] = "\t";
      stringArray0[5] = "\t";
      JSONObject jSONObject1 = jSONObject0.put("\t", 0);
      stringArray0[6] = "\t";
      stringArray0[7] = "\t";
      stringArray0[8] = "\t";
      JSONObject jSONObject2 = new JSONObject(collection0, stringArray0);
      try { 
        jSONObject1.put((String) null, (Object) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Short short0 = new Short((short) (-925));
      Double.sum(Double.NaN, Double.NaN);
      Double double0 = new Double((-1556.80611));
      Boolean boolean0 = new Boolean("cop");
      Double double1 = new Double((-1556.80611));
      Boolean boolean1 = new Boolean("] is not a Boolean.");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      Function<Object, Float> function1 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Float> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function1);
      Function<Object, Float> function3 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function2);
      Function<Object, Float> function4 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function2);
      function4.compose((Function<? super LinkedList<Boolean>, ?>) function2);
      Function.identity();
      Function<Object, Float> function5 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function4);
      function4.andThen((Function<? super Float, ? extends Float>) function5);
      unaryOperator0.andThen((Function<? super String, ? extends Float>) function3);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Boolean> function6 = (Function<Object, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super String, ? extends Boolean>) function6);
      unaryOperator1.andThen((Function<? super Object, ? extends Float>) function5);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      HashMap<Double, Byte> hashMap2 = new HashMap<Double, Byte>();
      hashMap1.putAll(hashMap2);
      Double double0 = new Double(1.0F);
      Double.isFinite(1.0F);
      Double double1 = new Double(1.0F);
      Double.isFinite(0.0);
      Double.max(1.0, 0.0);
      Double.sum(Double.NaN, 0.0);
      Double.min(1.0, 0.0);
      Double.sum(Double.NaN, 0.0);
      Double.sum(5458.847F, (-1.0));
      Double.max(1.0, 1.0);
      Double.min(Double.NaN, (-383.65339));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.putOpt("\t", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Short short0 = new Short((short)17);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "e)F{LX\";xA_98:Hv";
      stringArray1[1] = "wheel.json.JSONException";
      stringArray1[2] = "ohW]{|GYc!UX=*_'r=";
      try { 
        jSONObject0.getString("k^<p]|v*|BW Kfzj r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"k^<p]|v*|BW Kfzj r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Short short0 = new Short((short) (-925));
      Double double0 = new Double(765.7274603368688);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("has");
      linkedList1.add(")<9UKU");
      linkedList1.clear();
      Double.isFinite((-85.18101476));
      Integer integer0 = new Integer(115);
      Integer integer1 = new Integer(554);
      linkedList1.add(")<9UKU");
      linkedList1.add("has");
      Double.max(1.0, (-5206.44406303625));
      Short short1 = new Short((short) (-925));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) short1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      linkedList1.removeIf(predicate2);
      Double.min(765.7274603368688, 0.0);
      Double.sum((-1.0), 115);
      linkedList1.parallelStream();
      Double.sum(2908.34, 2908.34);
      linkedList1.poll();
      linkedList1.add("C<qu=z0[US");
      linkedList1.stream();
      Double.max(1538.9360198, 1777.758080481451);
      Double.min(1777.758080481451, 554);
      JSONObject.getNames((Object) linkedList1);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(linkedList1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Short short0 = new Short((short)17);
      Short.toUnsignedLong((short) (-925));
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.optBoolean((String) null, false);
      Double.isFinite(Double.NaN);
      Object object0 = JSONObject.NULL;
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.882966775644198
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("");
      JSONObject jSONObject2 = jSONObject0.put("", (-2104.0));
      jSONObject0.put("n", (-2104.0));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      jSONObject1.put("", (Collection) linkedList0);
      Boolean boolean0 = Boolean.valueOf("zJ_GtGHH");
      JSONObject jSONObject3 = jSONObject0.accumulate("~-03a", boolean0);
      Long long0 = new Long(0L);
      jSONObject3.optBoolean("u=>5mK*Ff< ", true);
      jSONObject0.optJSONObject("'");
      jSONObject0.isNull("u=>5mK*Ff< ");
      jSONObject3.opt("O@V7Et!");
      JSONArray jSONArray1 = jSONObject2.toJSONArray(jSONArray0);
      assertEquals(3, jSONObject0.length());
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.9346117679154384
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Short.toUnsignedLong((short) (-925));
      Double double0 = new Double(765.7274603368688);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("toU");
      linkedList1.add(")<NUKU");
      Double.isFinite((-85.18101476));
      Integer integer0 = new Integer(102);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Boolean, ? extends String>) function0);
      Function<Object, Float> function1 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Float> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function1);
      function2.compose((Function<? super Integer, ?>) unaryOperator1);
      UnaryOperator.identity();
      Function.identity();
      unaryOperator0.andThen((Function<? super String, ? extends Float>) function2);
      Float.min(0.0F, 3550.4346F);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "toU";
      stringArray0[1] = ")<NUKU";
      stringArray0[2] = ")<NUKU";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      boolean boolean0 = jSONObject2.optBoolean("istoHexString");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.8425664136253976
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      Double.min(0.0, 0.0);
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "max";
      stringArray0[1] = "[]";
      stringArray0[2] = "CC#Ts`eOUm:z*`as";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = "is";
      stringArray0[5] = "isN";
      stringArray0[6] = "C7WI^(N$V6:]vRDZU";
      stringArray0[7] = "!O=?";
      boolean boolean0 = jSONObject0.isNull("max");
      assertTrue(boolean0);
      
      jSONObject0.opt("isN");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      HashMap<Double, Byte> hashMap2 = new HashMap<Double, Byte>();
      hashMap1.putAll(hashMap2);
      Double double0 = new Double(5458.847F);
      Double.isFinite(1.0);
      Double double1 = new Double(0.0);
      boolean boolean0 = new Boolean(true);
      Double.max((-1.0), 0.0);
      Double.sum(1343.55637, 1343.55637);
      Double.min(1.0, 0.0);
      Double.sum(0.0, 0.0);
      Double.sum(0.0, 0.0);
      Double.max((-560.532015), 0.0);
      Double.min(1493.854722504, (-1487.38));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject.quote((String) null);
      Boolean boolean0 = new Boolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.1576770355110229
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("]YW[jQJVa()>/TmUhAv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]YW[jQJVa()>/TmUhAv\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.9935433028254361
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Double double1 = new Double((-689.87));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("d[:Y$XyVfK");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double.isFinite((-85.18101476));
      Integer integer0 = new Integer(0);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      Double double2 = new Double((-729.0));
      jSONObject0.accumulate("WM4(?~", ")<NUKU");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.241345207612541
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Double double0 = new Double(908.754212471);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      String string0 = "<i% H+7:x";
      jSONObject1.put("<i% H+7:x", (Object) null);
      Long long0 = new Long(0L);
      Short short0 = new Short((short)123);
      JSONObject jSONObject2 = new JSONObject(short0);
      jSONObject1.opt("VmfwqV#+=");
      jSONObject2.optJSONArray("VmfwqV#+=");
      String string1 = "q:3r@&&:Rd]<";
      try { 
        jSONObject1.getBoolean("q:3r@&&:Rd]<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"q:3r@&&:Rd]<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString((-441));
      Double double0 = new Double(765.7274603368688);
      Double.sum(1.0, (-658.834));
      Short short0 = new Short((short) (-1609));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Ma";
      stringArray0[1] = "Ma";
      stringArray0[2] = "zplRsaj8H<";
      JSONObject jSONObject1 = new JSONObject(short0, stringArray0);
      Double double1 = new Double((-1.2266654078536126));
      boolean boolean0 = Double.isFinite(Double.NaN);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.8068592024262526
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Short.toUnsignedLong((short) (-925));
      Double double0 = new Double(765.7274603368688);
      String[] stringArray0 = new String[7];
      Double.sum((short) (-925), 64611L);
      Double.sum(Double.NaN, Double.NaN);
      stringArray0[3] = "Ma";
      stringArray0[4] = "|BLt&L{9(qz";
      Double double1 = new Double(76.728651648919);
      Double.sum(76.728651648919, (-215.7984));
      Double.isFinite(76.728651648919);
      Double.max(64611L, (short) (-925));
      Double.max(Double.NaN, (short) (-925));
      Double.sum((-1.0), 63686.0);
      Double.min(63686.0, 1.0);
      Double.sum(0.0, 63685.0);
      Double.max((-817.7514), Double.NaN);
      Double.max(0.0, 64611L);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject0.getInt("dqfxLSCw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dqfxLSCw\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.9956323595267105
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Short.toUnsignedLong((short) (-933));
      JSONObject.quote("&s\"|,Pp$uDpg");
      Boolean.valueOf("\"&s\"|,Pp$uDpg\"");
      StringWriter stringWriter0 = new StringWriter(3564);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("NM_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of NM_
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.9175503412075572
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      UnaryOperator.identity();
      try { 
        jSONObject0.getBoolean("+8@y(I%Me(F#=^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+8@y(I%Me(F#=^\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\n";
      stringArray0[1] = "eS!N>?Ul";
      stringArray0[2] = "wheel.json.JSONException";
      stringArray0[3] = "BN+QpaV\"_$.w";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.602280504188534
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(Double.NaN);
      Double double1 = new Double((-722.685));
      Double.max(0.0, (-722.685));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      Double.max(0.0, 1751.41578481);
      Long long0 = new Long(1926L);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("false", false);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.7921680368494446
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Short.toUnsignedLong((short) (-925));
      Double double0 = new Double(64611L);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("toU");
      linkedList0.add("getparseDouble");
      linkedList1.add((String) null);
      Double.isFinite((-1.0));
      Integer integer0 = new Integer(16);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Boolean, ? extends String>) function0);
      Function<Object, Float> function1 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, Float> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function1);
      function2.apply(unaryOperator1);
      function2.compose((Function<? super Object, ?>) unaryOperator1);
      Function<Object, Float> function3 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function2);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      function2.compose((Function<? super Object, ?>) unaryOperator2);
      Function.identity();
      unaryOperator0.andThen((Function<? super String, ? extends Float>) function3);
      linkedList0.replaceAll(unaryOperator0);
      Long long0 = new Long(4041L);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      jSONObject0.put("Expected a ',' or ']'", true);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Integer integer0 = new Integer(1987);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.9362909245092568
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Boolean, String> function1 = unaryOperator0.compose((Function<? super Boolean, ? extends String>) function0);
      Function<Boolean, String> function2 = unaryOperator0.compose((Function<? super Boolean, ? extends String>) function1);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Boolean, ? extends String>) function2);
      Function.identity();
      Function<Object, Float> function3 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Float> function4 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function3);
      unaryOperator1.andThen((Function<? super Object, ? extends Float>) function4);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Boolean> function5 = (Function<Object, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super String, ? extends Boolean>) function5);
      Function<Object, Float> function6 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function4);
      unaryOperator3.andThen((Function<? super String, ? extends Float>) function6);
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Short, ? extends String>) function7);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super JSONArray, ? extends String>) function8);
      linkedList0.replaceAll(unaryOperator0);
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Short.toUnsignedLong((short) (-925));
      Double double0 = new Double(765.7274603368688);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "b$J|6cCc4r~{-pvW6)";
      Double.sum((short) (-925), 0.0);
      stringArray0[3] = "Ma";
      stringArray0[4] = "zplRsaj8H<";
      Double double1 = new Double(76.728651648919);
      Boolean boolean0 = new Boolean("zplRsaj8H<");
      Double double2 = new Double(765.7274603368688);
      Boolean boolean1 = new Boolean("zplRsaj8H<");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Float> function1 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      Function.identity();
      Function<Object, Float> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function1);
      function2.compose((Function<? super LinkedList<Boolean>, ?>) unaryOperator1);
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends Float>) function2);
      unaryOperator0.andThen((Function<? super String, ? extends Float>) function2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Boolean> function3 = (Function<Object, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super String, ? extends Boolean>) function3);
      Function<JSONArray, String> function4 = (Function<JSONArray, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Float> function5 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function2);
      unaryOperator2.andThen((Function<? super String, ? extends Float>) function5);
      unaryOperator2.compose((Function<? super JSONArray, ? extends String>) function4);
      linkedList0.replaceAll(unaryOperator2);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.6506304393911542
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("isdoubleToRawLongBits");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("sum", (-3575.23));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.9556913461207355
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Short short0 = new Short((short) (-925));
      Double double0 = new Double(765.7274603368688);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.spliterator();
      linkedList1.add("has");
      linkedList1.add("has");
      linkedList1.clear();
      Double.isFinite((-85.18101476));
      linkedList0.add("has");
      linkedList1.add("~ KBgta4|5J>qn[0");
      linkedList0.add("has");
      linkedList1.add("jwhX/3dlSv");
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Double.isFinite(115);
      Integer integer0 = new Integer((short) (-925));
      linkedList1.add("java.lang.Float@0000000001.");
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      try { 
        jSONObject0.getBoolean("g+]}V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g+]}V\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Integer integer0 = new Integer(120);
      String[] stringArray0 = new String[4];
      Integer integer1 = new Integer(120);
      Integer.getInteger((String) null, integer1);
      stringArray0[0] = "] not found.";
      stringArray0[1] = "has";
      stringArray0[2] = "Expected a ':' after a key";
      stringArray0[3] = "gethashCode";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String string0 = jSONObject0.toString(120, (-2260));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      try { 
        jSONObject0.getDouble("a)q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"a)q\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer integer0 = new Integer(44);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "txlw!Y}W'mdB?";
      stringArray0[1] = "!~5E$-F 2; EZ@MLS";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String string0 = jSONObject0.optString("txlw!Y}W'mdB?", "!~5E$-F 2; EZ@MLS");
      assertEquals("!~5E$-F 2; EZ@MLS", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Short.toUnsignedLong((short) (-925));
      Double double0 = new Double(765.7274603368688);
      JSONObject.quote("");
      Boolean boolean0 = new Boolean("/M-aj{a=p_;.+v'1J");
      StringWriter stringWriter0 = new StringWriter(3564);
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.9494837273589989
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      Double.min(0.0, 0.0);
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "[]";
      stringArray0[2] = "[]";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = "is";
      stringArray0[5] = "isN";
      stringArray0[6] = "K$D~{qA;{S[[Kh)";
      Float.sum(981.9568F, 981.9568F);
      try { 
        jSONObject0.getJSONObject("CC#Ts`eOUm:z*`as");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"CC#Ts`eOUm:z*`as\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.679841860103151
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Boolean boolean0 = new Boolean((String) null);
      Double.isFinite(Double.NaN);
      Double.isFinite((-284.84));
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(biFunction0);
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.582767809422592
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      HashMap<Double, Byte> hashMap2 = new HashMap<Double, Byte>();
      hashMap1.putAll(hashMap2);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("isshortValue");
      hashMap0.put("isshortValue", "toS");
      Integer integer0 = new Integer((-38689130));
      JSONObject jSONObject1 = jSONObject0.putOpt("isshortValue", integer0);
      hashMap0.clone();
      Integer.valueOf(327);
      HashMap<Integer, String> hashMap3 = new HashMap<Integer, String>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap3);
      String string0 = "";
      try { 
        jSONObject1.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.7034596674633078
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      hashMap1.clear();
      HashMap<Double, Byte> hashMap2 = new HashMap<Double, Byte>();
      hashMap1.putAll(hashMap2);
      HashMap<Double, Byte> hashMap3 = new HashMap<Double, Byte>();
      Float float0 = new Float((double) 1.0F);
      HashMap<Double, Byte> hashMap4 = new HashMap<Double, Byte>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.putOpt("to&AsV,$Jc'v|", "\t");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.9373878754040268
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Short.toUnsignedLong((short) (-925));
      Double double0 = new Double(64611L);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("toU");
      linkedList0.add("BD.z],S");
      linkedList0.add("A JSONObject text must begin with '{'");
      linkedList1.add((String) null);
      Double.isFinite((-1.0));
      Integer integer0 = new Integer(16);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Boolean, ? extends String>) function0);
      Function<Object, Float> function1 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, Float> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function1);
      function2.apply(unaryOperator1);
      function2.compose((Function<? super Object, ?>) unaryOperator1);
      Function<Object, Float> function3 = unaryOperator1.andThen((Function<? super Object, ? extends Float>) function2);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      function2.compose((Function<? super Object, ?>) unaryOperator2);
      Function.identity();
      unaryOperator0.andThen((Function<? super String, ? extends Float>) function3);
      linkedList0.replaceAll(unaryOperator0);
      Long long0 = new Long(4041L);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      try { 
        jSONObject0.append((String) null, "BD.z],S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(Double.NaN);
      Double.isFinite(Double.NaN);
      Double double1 = new Double((-722.685));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "getmin";
      stringArray0[1] = "gettoHexString";
      stringArray0[2] = "gettoHexString";
      Double.min((-722.685), (-722.685));
      stringArray0[3] = "getmin";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      String string0 = jSONObject0.optString("gettoHexString");
      assertEquals("", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "getvalueOf";
      JSONTokener jSONTokener0 = new JSONTokener("getvalueOf");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getvalueOf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.3141455801481003
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      hashMap1.clear();
      HashMap<Double, Byte> hashMap2 = new HashMap<Double, Byte>();
      hashMap1.putAll(hashMap2);
      HashMap<Double, Byte> hashMap3 = new HashMap<Double, Byte>();
      Float float0 = new Float((double) 1.0F);
      HashMap<Double, Byte> hashMap4 = new HashMap<Double, Byte>();
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("fy!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of fy!
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(2813);
      int int0 = jSONObject0.optInt("#;kq2p", 2813);
      assertEquals(2813, int0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject.quote("KrCmV]< ,");
      Boolean boolean0 = new Boolean((String) null);
      StringWriter stringWriter0 = new StringWriter(3564);
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.1376698117477586
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\t";
      stringArray0[1] = "\t";
      stringArray0[2] = "\t";
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("AO])", 1244);
      assertEquals(1244, int0);
      
      double double0 = jSONObject0.optDouble("bi3)aCUjMn;I");
      assertEquals(Double.NaN, double0, 0.01);
      
      Boolean.valueOf("\t");
      HashMap<Boolean, Boolean> hashMap1 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = new Boolean(false);
      hashMap1.putIfAbsent(boolean0, boolean1);
      jSONObject1.optJSONArray("\t");
      jSONObject1.has("\"\"");
      String string0 = jSONObject0.optString("\"\"");
      assertEquals("", string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.7412699576190973
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Short.toUnsignedLong((short) (-925));
      Double double0 = new Double((short) (-925));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.spliterator();
      linkedList1.add("IL_QnV.A");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("has");
      linkedList0.clear();
      Boolean boolean0 = new Boolean("has");
      linkedList1.add("gethashCode");
      linkedList2.add("has");
      linkedList1.add("has");
      linkedList0.add("gettoUnsignedLong");
      linkedList2.add("isompareTo");
      linkedList0.add("gethashCode");
      LinkedList<Short> linkedList4 = new LinkedList<Short>();
      LinkedList<Byte> linkedList5 = new LinkedList<Byte>();
      linkedList5.listIterator();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList5);
      Long long0 = new Long(115);
      JSONObject jSONObject0 = new JSONObject(long0);
      StringWriter stringWriter0 = new StringWriter(112);
      HashMap<Short, String> hashMap0 = new HashMap<Short, String>();
      jSONObject0.put("/", (Map) hashMap0);
      assertEquals(2, jSONObject0.length());
  }
}
