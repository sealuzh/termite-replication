/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 13:00:19 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.294545165844896
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Integer integer0 = new Integer(8);
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String string0 = JSONObject.valueToString(jSONObject0, 8, 647);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Short short0 = new Short((short) (-941));
      JSONObject.testValidity(short0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7595813969267111
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put((Double) null, hashMap1);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}", (Object) hashMap0);
      jSONObject1.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.remove("");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("Missing value", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (int) (byte) (-33));
      String string0 = jSONObject1.optString("");
      assertNotNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5622590391891036
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.optLong("gettoString", (long) 0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5622590391891036
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Long long0 = new Long((-2130L));
      JSONObject jSONObject0 = new JSONObject(long0);
      long long1 = jSONObject0.optLong("ul", 743L);
      assertEquals(1, jSONObject0.length());
      assertEquals(743L, long1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7405117043237692
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("istoUnigneString", 58);
      long long0 = jSONObject0.optLong("istoUnigneString");
      assertEquals(2, jSONObject0.length());
      assertEquals(58L, long0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject("getlogicalOr", stringArray0);
      int int0 = jSONObject0.optInt("app", 4134);
      assertEquals(4134, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9722469794234418
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)9);
      jSONObject0.put("", (Object) short0);
      int int0 = jSONObject0.optInt("");
      assertEquals(9, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) " of ");
      double double0 = jSONObject0.optDouble("get", (double) 0L);
      assertEquals(3, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Double double0 = new Double(734.685153939);
      JSONObject jSONObject0 = new JSONObject(double0);
      double double1 = jSONObject0.optDouble("4z7+),.$>%$Mlh", (-527.71587571341));
      assertEquals((-527.71587571341), double1, 0.01);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("m]T]SC8Dz2,Sx)#j,", 0L);
      double double0 = jSONObject1.optDouble("m]T]SC8Dz2,Sx)#j,");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Long long0 = new Long(44);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.put("txlw!Y}W'mdB?", (long) 44);
      double double0 = jSONObject0.optDouble("txlw!Y}W'mdB?");
      assertEquals(44.0, double0, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)9);
      jSONObject0.put("", (Object) short0);
      Object object0 = jSONObject0.opt("");
      assertEquals((short)9, object0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)9);
      jSONObject0.put("", (Object) short0);
      boolean boolean0 = jSONObject0.isNull("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("6FV/@~", "6FV/@~");
      boolean boolean0 = jSONObject1.has("6FV/@~");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5600040073151407
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Float@0000000001");
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("Expected a ',' or '}'", double0);
      jSONObject1.getString("Expected a ',' or '}'");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (int) (byte) (-33));
      double double0 = jSONObject0.getDouble("");
      assertEquals((-33.0), double0, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9048966903847697
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put((Double) null, hashMap1);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}", (Object) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(1058);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (long) (short) (-363));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1752045970807579
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.put((String) null, 58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-996.453284545));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      Long long0 = new Long(0L);
      hashMap0.put(long0, (Byte) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.40912941612615
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[1];
      Long long0 = new Long(647);
      try { 
        jSONObject0.accumulate(stringArray0[0], long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Integer integer0 = new Integer(33);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(integer0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0851886129676505
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Float float0 = new Float(316.9F);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7846300761330085
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      // Undeclared exception!
      jSONObject0.toString(2608, 2608);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7260509192674385
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Byte byte0 = new Byte((byte)81);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toString(14, 44);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Integer integer0 = new Integer(33);
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String string0 = jSONObject0.toString(33, 1199);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = JSONObject.quote("O2/@5d ");
      assertEquals("\"O2/@5d \"", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "]");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt(":c9*gWM1CZXH{(qpY", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Lf<g>1r]mKMD_xTp,", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Long long0 = new Long((-1071L));
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      try { 
        jSONObject0.put(stringArray0[3], (Object) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Integer integer0 = new Integer(44);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String string0 = jSONObject0.optString("txlw!Y}W'mdB?", "!~5E$-F 2; EZ@MLS");
      assertEquals("!~5E$-F 2; EZ@MLS", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject("s", stringArray0);
      double double0 = jSONObject0.optDouble("{", 130.628);
      assertEquals(130.628, double0, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("{}");
      assertNull(object0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Double double0 = new Double(31);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6890092384766586
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5228146795137603
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("istoUnigneString", 58);
      long long0 = jSONObject1.getLong("istoUnigneString");
      assertEquals(2, jSONObject0.length());
      assertEquals(58L, long0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (Object) hashMap0);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.484925891109223
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("jO", 0L);
      try { 
        jSONObject1.getBoolean("jO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jO\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("n/RWEwp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"n/RWEwp\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{kEw+Ufsj2w");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {kEw+Ufsj2w
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("3!VFY,mld@,:8n|4RGV");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 3!VFY,mld@,:8n|4RGV
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = new Float((double) (short) (-1558));
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6859646722371444
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      StringWriter stringWriter0 = new StringWriter(62);
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      String string0 = JSONObject.valueToString(linkedList0, 123, (short)46);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      String string0 = JSONObject.valueToString(hashMap0, (-64089270), 2965);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.849817938409554
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("\t", (Collection) linkedList0);
      jSONObject1.toString((-2299), (-1217));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-3029), (-3029));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 64, 10);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.8228804629889481
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5);
      JSONObject jSONObject0 = new JSONObject((Object) "\t");
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      String string0 = JSONObject.valueToString(linkedList0);
      assertNotNull(string0);
      assertEquals("[null]", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.788191435362226
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((-28829259), 46);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = new Integer(33);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("8*Ltzf_cBbY{}o", stringArray0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Float float0 = new Float(316.9F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = JSONObject.quote("JCU?&+8Z1}R(v4\u0000)x6");
      assertEquals("\"JCU?&+8Z1}R(v4\\u0000)x6\"", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("Ca</Xfb}>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ca<\\/Xfb}>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = JSONObject.quote("\"\"");
      assertEquals("\"\\\"\\\"\"", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = JSONObject.quote("`\n");
      assertEquals("\"`\\n\"", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5571130980576458
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\b";
      JSONObject jSONObject0 = new JSONObject("getlogicalOr", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Lf<g>1r]mKMD_xTp,", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.2127556469888376
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Float float0 = new Float((double) (short) (-1558));
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.1285962936622183
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("\t", false);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)9);
      jSONObject0.put("", (Object) short0);
      String string0 = jSONObject0.optString("", "] not found.");
      assertNotNull(string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("co");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("JCU?&+8Z1}R(v4\u0000)x6");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.1605655773712296
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(12);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      JSONObject jSONObject1 = jSONObject0.accumulate("@q0/G=l%dgzp !&", object0);
      jSONObject1.optBoolean("@q0/G=l%dgzp !&", false);
      jSONObject1.optInt("@q0/G=l%dgzp !&", (-36682612));
      Long long0 = new Long((-1726L));
      String string0 = JSONObject.valueToString(long0, 12, (-8037));
      assertNotNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.3730039128771998
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Integer integer0 = new Integer((-513));
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.6978169099032328
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "IR");
      JSONObject jSONObject1 = jSONObject0.put("+>K),Sx0.nzDqS}", (-2083));
      long long0 = jSONObject1.optLong("+>K),Sx0.nzDqS}");
      assertEquals(4, jSONObject0.length());
      assertEquals((-2083L), long0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.6941592577998341
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(12);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      JSONObject jSONObject1 = jSONObject0.putOpt("Unclosed comment", stringWriter0);
      try { 
        jSONObject1.getLong("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (int) (byte) (-33));
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("", "");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.6059020322440924
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.accumulate(".", boolean0);
      try { 
        jSONObject0.getJSONArray(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "\\u";
      stringArray0[0] = string0;
      JSONObject jSONObject0 = new JSONObject(string0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put(string0, (-579L));
      int int0 = jSONObject1.getInt(stringArray0[0]);
      assertEquals((-579), int0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.put("[]", (long) 46);
      double double0 = jSONObject0.getDouble("[]");
      assertEquals(3, jSONObject0.length());
      assertEquals(46.0, double0, 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("", "");
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.0854684353173742
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "%JlGOk(FujSUIn8");
      boolean boolean0 = jSONObject0.optBoolean("");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1628.43713006849);
      assertEquals("1628.43713006849", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0F);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.5247073930301438
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-2104.0));
      Byte byte0 = new Byte((byte)74);
      try { 
        jSONObject1.append("", byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.5047882836811908
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("", "");
      Byte byte0 = new Byte((byte)74);
      jSONObject0.append("", byte0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.6726254461503207
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Lf<g>1r]mKMD_xTp,", 0L);
      Byte byte0 = new Byte((byte)16);
      JSONObject jSONObject1 = jSONObject0.accumulate("Lf<g>1r]mKMD_xTp,", "Lf<g>1r]mKMD_xTp,");
      jSONObject1.accumulate("Lf<g>1r]mKMD_xTp,", byte0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.3734685941026814
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("wheel.json.JSONObject$Null", jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{EwUfsj2");
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {EwUfsj2
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.939290554095524
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\t");
      jSONObject0.toString(76);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.271899083808096
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      long long0 = jSONObject0.optLong("<>v_@");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.6414480415035768
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Long long0 = new Long((-2130L));
      JSONObject jSONObject0 = new JSONObject(long0);
      int int0 = jSONObject0.optInt("cl");
      assertEquals(0, int0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (int) (byte)53);
      double double0 = jSONObject1.optDouble("", 1967.195184929082);
      assertEquals(1, jSONObject0.length());
      assertEquals(53.0, double0, 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      long long0 = jSONObject0.optLong("3)W,p4R|I[i|F(", (-392L));
      assertEquals((-392L), long0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("%JlGOk(FujSUIn8");
      assertEquals("", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|G#ZEu8^+.B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |G#ZEu8^+.B
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("'#[\"A]", (Map) hashMap0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = new Integer(34);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("e85&pP^WV+Sq2U;8", (-766L));
      double double0 = jSONObject1.optDouble("e85&pP^WV+Sq2U;8");
      assertEquals(1, jSONObject0.length());
      assertEquals((-766.0), double0, 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Integer integer0 = new Integer(1);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      try { 
        jSONObject0.getString("55Ttn,>x('Unxr!qt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"55Ttn,>x('Unxr!qt\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Double double0 = new Double(761.3648114892005);
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("6FV/@~");
      assertFalse(boolean0);
  }
}
