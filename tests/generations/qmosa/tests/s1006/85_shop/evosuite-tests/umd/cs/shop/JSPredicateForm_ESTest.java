/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 11:39:37 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.25731864054383163
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(X)3");
      StringReader stringReader0 = new StringReader("(X)3");
      jSPredicateForm0.listIterator();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
      assertEquals(2, jSPredicateForm0.size());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("()3");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.makeConstant();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.remove((Object) jSTerm1);
      jSTerm1.clear();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.equals(jSTerm0);
      jSTerm0.clone();
      jSTerm0.listIterator();
      jSTerm1.equals(jSTerm0);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.iterator();
      jSTerm1.removeElement(jSTerm0);
      jSTerm1.makeConstant();
      jSTerm1.clear();
      jSTerm0.iterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.retainAll(jSTerm0);
      jSTerm1.spliterator();
      jSTerm1.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "(Bv?b ";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(Bv?b ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.5783252866601273
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(aR3 I");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("sZU0iwt5y31&]1[&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution0.clone();
      jSSubstitution2.removeElements(jSSubstitution0);
      jSSubstitution1.addElements(jSSubstitution0);
      jSSubstitution2.parallelStream();
      jSSubstitution1.assignFailure();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.clone();
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution2.addElements(jSSubstitution0);
      jSSubstitution2.trimToSize();
      jSSubstitution1.cloneS();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.iterator();
      jSSubstitution3.iterator();
      jSSubstitution0.assignFailure();
      jSSubstitution0.listIterator();
      jSSubstitution3.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.listIterator();
      jSSubstitution4.clone();
      jSSubstitution4.addElements(jSSubstitution3);
      jSSubstitution1.clone();
      jSSubstitution1.removeAllElements();
      jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution1);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5292482930376914
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "non");
      StringReader stringReader0 = new StringReader("non");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      jSPredicateForm1.firstElement();
      objectArray0[0] = (Object) "non";
      objectArray0[1] = (Object) stringReader0;
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      jSTerm1.toArray(objectArray1);
      StringBuffer stringBuffer0 = jSPredicateForm1.toStr();
      assertEquals(9, stringBuffer0.length());
      
      jSPredicateForm0.print();
      assertEquals(2, jSPredicateForm0.size());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "non");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Object> function0 = unaryOperator2.compose((Function<? super Object, ?>) unaryOperator0);
      jSSubstitution0.removeElement(unaryOperator1);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      int int0 = 1983;
      Integer integer0 = new Integer(1983);
      unaryOperator4.apply(integer0);
      UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Integer, ?>) unaryOperator3);
      Integer integer1 = new Integer((-1));
      unaryOperator2.andThen((Function<? super Object, ?>) unaryOperator3);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator6 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) unaryOperator6);
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSPredicateForm0.addElement(function0);
      System.setCurrentTimeMillis((-1));
      System.setCurrentTimeMillis((-1036L));
      jSTerm0.clonePF();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$52/1194381201 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0549201679861442
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.makeConstant();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.setSize(38);
      jSTerm0.remove((Object) jSTerm1);
      jSTerm1.clear();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.equals(jSTerm1);
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.listIterator();
      jSTerm1.equals(jSTerm0);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.iterator();
      jSTerm1.removeElement(jSTerm0);
      jSTerm1.makeConstant();
      jSTerm1.clear();
      jSTerm0.isGround();
      jSTerm0.iterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      jSTerm2.sort(comparator0);
      jSTerm0.firstElement();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "(^&b ";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(^&b ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "(&v?b ";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(&v?b ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) jSPredicateForm0;
      objectArray0[1] = (Object) jSPredicateForm0;
      objectArray0[4] = (Object) jSPredicateForm0;
      objectArray0[3] = objectArray0[1];
      objectArray0[5] = (Object) jSPredicateForm0;
      objectArray0[6] = (Object) jSPredicateForm0;
      JSJshopVars.flagLevel = 96;
      jSPredicateForm0.setSize(96);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.addElements(jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.assignFailure();
      jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      System.setCurrentTimeMillis((-837L));
      System.setCurrentTimeMillis(40);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6843729712135973
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "Y8m");
      jSTerm0.add((Object) "not");
      Integer integer0 = new Integer(40);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      jSSubstitution0.add((Object) "Y8m");
      JSPredicateForm jSPredicateForm0 = jSTerm1.clonePF();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      jSTerm0.add((Object) jSPredicateForm0);
      jSSubstitution1.add((Object) "not");
      jSTerm0.setSize(2947);
      jSTerm0.standarizerPredicateForm();
      jSTerm1.equals(jSPredicateForm0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.clonePF();
      jSSubstitution0.add((Object) jSSubstitution2);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm1.clonePF();
      jSTerm1.applySubstitutionPF(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution4);
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.2309316230479224
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.makeConstant();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.equals(jSTerm0);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.iterator();
      jSTerm1.removeElement(jSTerm0);
      jSTerm1.clear();
      jSTerm0.iterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm2);
      jSTerm1.retainAll(jSTerm0);
      jSTerm1.makeEval(true);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      assertEquals(3, jSTerm0.size());
      
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8599672810355049
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeAll(jSTerm0);
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution1.add((Object) stringReader0);
      StringReader stringReader1 = new StringReader("Y");
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      int int0 = (-58344104);
      // Undeclared exception!
      try { 
        jSSubstitution2.addAll(3198, (Collection) jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 3198
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5843227778183768
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "Y";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.assignFailure();
      jSTerm0.spliterator();
      jSSubstitution1.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSPredicateForm0.standarizerPredicateForm();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      stringReader0.close();
      jSTerm0.isEmpty();
      jSSubstitution0.standarizerSubs();
      jSTerm1.equals(jSPredicateForm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      System.setCurrentTimeMillis(11L);
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSPredicateForm1.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "not";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.makeConstant();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.remove((Object) jSTerm1);
      jSTerm1.clear();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.equals(jSTerm0);
      jSTerm0.clone();
      jSTerm0.firstElement();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      jSSubstitution0.assignFailure();
      jSSubstitution0.clone();
      jSSubstitution1.addElements(jSSubstitution0);
      jSSubstitution1.assignFailure();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution2.clone();
      jSSubstitution0.add((Object) jSSubstitution2);
      jSSubstitution2.addElements(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.iterator();
      jSSubstitution0.assignFailure();
      jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.listIterator();
      jSSubstitution5.clone();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.add((Object) "the");
      jSTerm0.trimToSize();
      jSTerm0.add((Object) jSTerm0);
      StringReader stringReader0 = new StringReader("the");
      Consumer<JSPredicateForm> consumer0 = (Consumer<JSPredicateForm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.removeAllElements();
      jSPredicateForm0.clone();
      jSPredicateForm0.listIterator();
      Integer integer0 = new Integer(0);
      jSPredicateForm0.addElement(integer0);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeAll(jSTerm0);
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution1.add((Object) stringReader0);
      StringReader stringReader1 = new StringReader("Y");
      JSSubstitution jSSubstitution2 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSSubstitution2.addAll(3198, (Collection) jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 3198
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9002560512685369
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      jSTerm1.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars(32, 32);
      // Undeclared exception!
      try { 
        jSTerm1.listIterator(32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.stream();
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("h{bh]_,XoL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "h{bh]_,XoL";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement(streamTokenizer0);
      jSPredicateForm0.addAll((Collection) jSTerm0);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution0.clone();
      jSSubstitution1.addElements(jSSubstitution0);
      jSSubstitution1.assignFailure();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.clone();
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution2.addElements(jSSubstitution0);
      jSSubstitution2.trimToSize();
      jSSubstitution1.cloneS();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.iterator();
      jSSubstitution0.assignFailure();
      jSSubstitution0.listIterator();
      jSSubstitution3.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.parallelStream();
      jSTerm0.add((Object) "not");
      jSSubstitution4.clone();
      jSSubstitution4.addElements(jSSubstitution3);
      jSSubstitution1.clone();
      jSSubstitution1.removeAllElements();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("Y");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer1.parseNumbers();
      StringReader stringReader2 = new StringReader("%%%");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      streamTokenizer0.lowerCaseMode(true);
      StringReader stringReader3 = new StringReader("%%%");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      streamTokenizer3.parseNumbers();
      StringReader stringReader4 = null;
      try {
        stringReader4 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Kc=9gx$:8Mw}9+>");
      jSTerm0.makeConstant();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.iterator();
      jSTerm1.removeElement(jSTerm0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.trimToSize();
      jSTerm1.forEach(consumer0);
      jSTerm1.retainAll(jSTerm0);
      jSTerm1.makeEval(true);
      jSTerm0.add((Object) jSTerm1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      boolean boolean0 = jSTerm1.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "V|not");
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.cloneT();
      jSTerm0.call();
      jSTerm1.ensureCapacity((-220));
      jSTerm1.equals(jSTerm0);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.removeElement(jSTerm0);
      jSTerm1.makeEval(true);
      jSTerm0.add((Object) jSTerm1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      jSTerm0.sort(comparator0);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "Y8m");
      jSTerm0.add((Object) "not");
      jSTerm1.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.addElements(jSSubstitution1);
      jSSubstitution0.assignFailure();
      jSSubstitution1.listIterator();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "non");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator0.apply("non");
      Function<Object, Object> function0 = unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator2);
      unaryOperator2.andThen((Function<? super Object, ?>) unaryOperator3);
      unaryOperator0.compose((Function<? super Integer, ?>) unaryOperator1);
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator2);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Integer> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Integer> unaryOperator8 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator9 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator7);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.compose((Function<? super Object, ?>) unaryOperator9);
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator7);
      unaryOperator6.andThen((Function<? super Integer, ?>) function0);
      UnaryOperator.identity();
      unaryOperator4.compose((Function<? super Integer, ?>) unaryOperator8);
      UnaryOperator.identity();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nA&<y$U9.\"wgio%jx2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.whitespaceChars((-4), (-119));
      streamTokenizer0.quoteChar((-1962));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.ordinaryChars((-119), (-1080958110));
      streamTokenizer2.pushBack();
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer2.commentChar((-4));
      streamTokenizer2.ordinaryChar((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nA&<y$U9.\"wgio%jx2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.ttype = (-23);
      streamTokenizer0.ordinaryChar((-23));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar((-23));
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-23), (-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.quoteChar((-23));
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.nextToken();
      streamTokenizer0.wordChars(110, 110);
      streamTokenizer1.whitespaceChars((-23), (-119));
      streamTokenizer0.quoteChar((-1962));
      streamTokenizer2.wordChars((-23), (-1962));
      streamTokenizer0.slashSlashComments(true);
      stringReader0.mark(276);
      streamTokenizer2.ordinaryChars(110, 110);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clone();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSPredicateForm0, jSSubstitution1);
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "U8m");
      jSTerm0.add((Object) "n:M");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.apply("U8m");
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.apply("U8m");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator6);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ?>) unaryOperator7);
      UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Integer, ?>) unaryOperator7);
      unaryOperator2.compose((Function<? super Integer, ?>) unaryOperator4);
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k:^<6p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar((-1));
      streamTokenizer1.ordinaryChar(13);
      streamTokenizer1.wordChars(13, (-1));
      stringReader0.markSupported();
      stringReader0.close();
      streamTokenizer1.ttype = 1;
      jSTerm0.add((Object) "k:^<6p");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nAjU&<y$U9.\"wgio%jx2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-1384));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.pushBack();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      stringReader0.close();
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChars((-4), (-1384));
      streamTokenizer0.pushBack();
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.lowerCaseMode(true);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "got");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution2);
      jSSubstitution1.assignFailure();
      jSSubstitution1.addElements(jSSubstitution0);
      jSSubstitution2.assignFailure();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution5 = (JSSubstitution)jSSubstitution1.clone();
      jSSubstitution0.addElements(jSSubstitution1);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution1.iterator();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution6.listIterator();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution8.add((Object) jSSubstitution6);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution6.listIterator();
      jSSubstitution9.clone();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      jSSubstitution5.addElements(jSSubstitution6);
      jSSubstitution11.addElements(jSSubstitution7);
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      jSSubstitution13.trimToSize();
      jSSubstitution2.removeAll(jSSubstitution9);
      jSSubstitution4.clone();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      jSSubstitution9.addElements(jSSubstitution8);
      JSSubstitution jSSubstitution15 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution10);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator0.apply("non");
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator2);
      unaryOperator2.andThen((Function<? super Object, ?>) unaryOperator0);
      unaryOperator2.andThen((Function<? super Object, ?>) unaryOperator3);
      unaryOperator0.compose((Function<? super Integer, ?>) unaryOperator1);
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator4);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator4.compose((Function<? super Object, ?>) unaryOperator6);
      unaryOperator5.andThen((Function<? super Integer, ?>) unaryOperator3);
      unaryOperator4.compose((Function<? super Integer, ?>) unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "U8m");
      jSTerm0.add((Object) "n:M");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.apply("U8m");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Integer, ?>) unaryOperator6);
      unaryOperator2.compose((Function<? super Integer, ?>) unaryOperator4);
      UnaryOperator.identity();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.remove((Object) jSTerm1);
      jSTerm1.clear();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.equals(jSTerm1);
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.equals(jSTerm0);
      jSTerm0.clone();
      jSTerm0.listIterator();
      jSTerm1.equals(jSTerm0);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.iterator();
      jSTerm1.removeElement(jSTerm0);
      jSTerm1.makeConstant();
      jSTerm1.clear();
      jSTerm0.isGround();
      jSTerm0.iterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.retainAll(jSTerm0);
      jSTerm1.spliterator();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "non");
      Integer integer0 = new Integer(28);
      jSTerm0.spliterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Object[] objectArray0 = new Object[5];
      jSTerm0.add((Object) null);
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) "non";
      Integer integer1 = new Integer(28);
      objectArray0[4] = (Object) comparator0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.sort(comparator0);
      jSTerm0.firstElement();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.310783678099714
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.stream();
      StringReader stringReader0 = new StringReader("hbh]_,Xo");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "hbh]_,Xo";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSPredicateForm0.addAll((Collection) jSTerm0);
      jSPredicateForm0.print();
      Function<Integer, Integer> function0 = Function.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function1 = function0.compose((Function<? super Integer, ? extends Integer>) unaryOperator0);
      Function.identity();
      Function.identity();
      Integer integer0 = new Integer(38);
      unaryOperator0.apply(integer0);
      Integer integer1 = new Integer(38);
      function0.apply((Integer) (-1));
      Integer integer2 = new Integer((-1457181624));
      unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function1);
      Integer integer3 = new Integer(3696);
      Function.identity();
      Integer integer4 = new Integer((-1263));
      Function.identity();
      unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function0);
      Integer integer5 = new Integer((-1263));
      Function.identity();
      Integer integer6 = new Integer((-3444));
      Function.identity();
      Integer integer7 = new Integer(43);
      Integer integer8 = new Integer((-1263));
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = null;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 46;
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.add((Object) iterator0);
      Integer integer0 = new Integer(46);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "non");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nA&<y$U9.\"wgio%dx2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.nextToken();
      streamTokenizer0.wordChars(110, 110);
      streamTokenizer0.whitespaceChars(110, (-119));
      streamTokenizer1.ttype = 110;
      streamTokenizer0.quoteChar((-1962));
      stringReader0.skip(110);
      streamTokenizer1.wordChars(110, (-1962));
      streamTokenizer1.nval = (double) 110;
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.ordinaryChars(110, 110);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.addElement("nA&<y$U9.\"wgio%dx2");
      System.setCurrentTimeMillis((-3262L));
      jSPredicateForm0.toStr();
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "non");
      jSTerm0.standarizerPredicateForm();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("line");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function4 = function1.compose((Function<? super Object, ?>) unaryOperator0);
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function.identity();
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Object> function7 = Function.identity();
      function4.compose((Function<? super Object, ?>) function7);
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function9 = function5.compose((Function<? super Object, ?>) function8);
      Function<Object, Integer> function10 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function11 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function9);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function10);
      function11.compose((Function<? super Object, ?>) function8);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function12 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function6);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function13 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function12);
      function13.compose((Function<? super Object, ?>) function10);
      Function<Object, Integer> function14 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function14);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "Y8m");
      jSTerm0.add((Object) "not");
      jSTerm1.add((Object) null);
      Integer integer0 = new Integer(54);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.addElements(jSSubstitution1);
      jSSubstitution0.assignFailure();
      jSSubstitution1.listIterator();
      jSSubstitution0.add((Object) integer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nA&<q$U9.Uwgi>%dx2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.nval = (double) (-4);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.nextToken();
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.wordChars(110, 110);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer2.wordChars((-4), 110);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.ttype = (-4);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer2.ordinaryChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      assertEquals("[%%%]", jSPredicateForm1.toString());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#Nr!)Jx|)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer2.ordinaryChars((-4), (-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer2.nval = (double) (-4);
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer2.ttype = (-4);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer2.wordChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "U8m");
      jSTerm0.add((Object) "n:M");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.apply("U8m");
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super Integer, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator4.compose((Function<? super Object, ?>) unaryOperator7);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator8 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator9 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Object, ?>) unaryOperator8);
      jSTerm1.add((Object) unaryOperator3);
      UnaryOperator.identity();
      unaryOperator5.compose((Function<? super String, ?>) unaryOperator9);
      UnaryOperator.identity();
      unaryOperator6.andThen((Function<? super Integer, ?>) unaryOperator9);
      unaryOperator2.compose((Function<? super Integer, ?>) unaryOperator5);
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) "U8m");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.apply("U8m");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator6);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Integer, ?>) unaryOperator7);
      unaryOperator2.compose((Function<? super Integer, ?>) unaryOperator4);
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "U8m");
      jSTerm0.add((Object) "n:M");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.apply("U8m");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator6);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ?>) unaryOperator7);
      UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Integer, ?>) unaryOperator7);
      unaryOperator2.compose((Function<? super Integer, ?>) unaryOperator4);
      UnaryOperator.identity();
      UnaryOperator.identity();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.makeConstant();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.setSize(38);
      jSTerm0.remove((Object) jSTerm1);
      jSTerm1.clear();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.equals(jSTerm1);
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.equals(jSTerm0);
      jSTerm0.clone();
      jSTerm0.listIterator();
      jSTerm1.equals(jSTerm0);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.iterator();
      jSTerm1.removeElement(jSTerm0);
      jSTerm1.makeConstant();
      jSTerm1.clear();
      jSTerm0.isGround();
      jSTerm0.iterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.retainAll(jSTerm0);
      jSTerm1.spliterator();
      jSTerm1.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "U8m");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.apply("U8m");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Integer, ?>) unaryOperator6);
      unaryOperator2.compose((Function<? super Integer, ?>) unaryOperator4);
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis((-1L));
      JSPredicateForm jSPredicateForm1 = null;
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u8m");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("=gJ,*9");
      StringReader stringReader2 = new StringReader("=gJ,*9");
      StringReader stringReader3 = new StringReader("n5ot");
      stringReader0.ready();
      StringReader stringReader4 = new StringReader("(");
      StringReader stringReader5 = new StringReader(">CV Eu");
      StringReader stringReader6 = new StringReader("(");
      StringReader stringReader7 = new StringReader("6i?N9Zo1");
      stringReader7.reset();
      StringReader stringReader8 = new StringReader("u8m");
      stringReader5.ready();
      StringReader stringReader9 = new StringReader("7");
      StringReader stringReader10 = new StringReader("not");
      StringReader stringReader11 = new StringReader("(");
      stringReader8.ready();
      StringReader stringReader12 = new StringReader("u8m");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nA&<y$U9.\"wgio%dx2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.ttype = (-23);
      streamTokenizer0.ordinaryChar((-23));
      streamTokenizer0.commentChar((-23));
      streamTokenizer0.ordinaryChars((-23), (-23));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-23), (-23));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.nval = (double) (-23);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.quoteChar((-23));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.nextToken();
      streamTokenizer0.wordChars(110, 110);
      streamTokenizer0.whitespaceChars(110, (-119));
      streamTokenizer0.quoteChar((-1962));
      streamTokenizer1.wordChars(110, (-1962));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.ordinaryChars(110, 110);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.addElement("nA&<y$U9.\"wgio%dx2");
      System.setCurrentTimeMillis((-3262L));
      jSPredicateForm0.toStr();
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis(221L);
      jSPredicateForm0.toStr();
      System.setCurrentTimeMillis(221L);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      StringReader stringReader0 = new StringReader("(&)I");
      StringReader stringReader1 = new StringReader("um");
      stringReader1.reset();
      StringReader stringReader2 = new StringReader("(&)I");
      StringReader stringReader3 = new StringReader("(&)I");
      StringReader stringReader4 = new StringReader("!U(7pprk!F_~<)2J+XG");
      stringReader0.read();
      stringReader0.reset();
      StringReader stringReader5 = new StringReader("(");
      char[] charArray0 = new char[8];
      charArray0[3] = 'K';
      charArray0[4] = '\u0000';
      charArray0[5] = 's';
      charArray0[6] = '>';
      charArray0[7] = '=';
      charArray0[0] = '\u0014';
      stringReader5.read(charArray0, 0, 0);
      stringReader5.skip(40);
      StringReader stringReader6 = new StringReader("&;&j-|]3");
      StringReader stringReader7 = new StringReader("(");
      StringReader stringReader8 = new StringReader("um");
      stringReader8.reset();
      StringReader stringReader9 = new StringReader("um");
      stringReader0.ready();
      StringReader stringReader10 = new StringReader("");
      StringReader stringReader11 = new StringReader("gW~t");
      StringReader stringReader12 = new StringReader("(");
      stringReader9.ready();
      StringReader stringReader13 = new StringReader("u8m");
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(0, stringBuffer0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "non");
      Integer integer0 = new Integer(28);
      Spliterator spliterator0 = jSTerm0.spliterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      jSTerm0.add((Object) spliterator0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) "non";
      Integer integer1 = new Integer(28);
      objectArray0[4] = (Object) comparator0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.sort(comparator0);
      jSTerm0.firstElement();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector$VectorSpliterator cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      long long0 = (-2354L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PlanningDomain: error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer2.ordinaryChars((-4), (-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer2.quoteChar(2245);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer2.nval = (double) (-4);
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.commentChar((-4));
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer2.ttype = (-4);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer2.wordChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nAjU&<y$U9.\"wgio%jx2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-1384));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.pushBack();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChars((-4), (-1080958110));
      streamTokenizer0.pushBack();
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.lowerCaseMode(true);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nAjU&<y$U9.\"wgio%jx2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-1384));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.pushBack();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChars((-4), (-1080958110));
      streamTokenizer0.pushBack();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.lowerCaseMode(true);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nAjU&<y$U9.\"wgio%jx2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.resetSyntax();
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChars((-4), (-1080958110));
      streamTokenizer0.pushBack();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.lowerCaseMode(true);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#Nr!)Jx|)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.commentChar((-4));
      stringReader0.ready();
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer2.ordinaryChars((-4), (-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer2.nval = (double) (-4);
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer2.ttype = (-4);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer2.wordChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      assertEquals("[]", jSPredicateForm0.toString());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4293230219306162
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(zl");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.5297061990576545
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function<Integer, Integer> function0 = Function.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      function0.compose((Function<? super Integer, ? extends Integer>) unaryOperator0);
      Function.identity();
      Function.identity();
      Integer integer0 = new Integer((-1117595073));
      function0.apply(integer0);
      Integer integer1 = new Integer((-1117595073));
      Integer integer2 = new Integer(29);
      Function.identity();
      Function<Integer, String> function1 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, String> function2 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Integer integer3 = new Integer((-6292));
      Integer integer4 = new Integer(29);
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function2);
      Integer integer5 = new Integer((-1117595073));
      unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function0);
      Integer integer6 = new Integer((-34737972));
      Function.identity();
      Integer integer7 = new Integer((-1117595073));
      Function.identity();
      Integer integer8 = new Integer((-34737972));
      Integer integer9 = new Integer((-1117595073));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(!gN?I^O`bAWi+&3kj\"J");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("Ve$[2lPb");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("{r\"g3");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
