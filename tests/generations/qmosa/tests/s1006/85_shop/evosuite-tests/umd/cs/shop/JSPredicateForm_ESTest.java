/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 22:19:44 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.521586834652811
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Function<Integer, Integer> function0 = Function.identity();
      Integer integer0 = new Integer(2011);
      Integer integer1 = new Integer(2011);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = function2.andThen((Function<? super Integer, ? extends Integer>) function0);
      function3.compose((Function<? super String, ?>) unaryOperator0);
      Function.identity();
      jSTerm0.lastElement();
      function3.apply("not");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9297061990576545
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(!r~KW");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" e m expextNp%zed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-979));
      streamTokenizer2.whitespaceChars(32, (-4));
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.lowerCaseMode(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      stringReader0.close();
      Function.identity();
      try { 
        stringReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.rightPar = 577;
      jSPredicateForm0.removeElement((Object) null);
      jSPredicateForm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) null);
      Predicate<String> predicate1 = predicate0.or(predicate0);
      Predicate<String> predicate2 = predicate1.negate();
      predicate2.and(predicate1);
      predicate0.negate();
      jSPredicateForm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Function<Integer, Integer> function0 = Function.identity();
      Integer integer0 = new Integer(1983);
      function0.apply(integer0);
      UnaryOperator.identity();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.makeVariable();
      jSTerm0.makeConstant();
      jSTerm0.iterator();
      jSTerm0.ensureCapacity(1983);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0622259027573269
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ty67hp?=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.add((Object) jSTerm1);
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      stringReader0.ready();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.add((Object) jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "not");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.apply(unaryOperator1);
      unaryOperator1.apply(unaryOperator0);
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ?>) unaryOperator4);
      unaryOperator5.apply(unaryOperator3);
      UnaryOperator.identity();
      unaryOperator4.apply(unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.compose((Function<? super String, ?>) unaryOperator4);
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      unaryOperator6.compose((Function<? super String, ?>) unaryOperator3);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.makeVariable();
      jSTerm0.makeVariable();
      jSTerm0.makeConstant();
      jSTerm0.iterator();
      jSTerm0.ensureCapacity(777);
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "(KW ";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(KW ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.makeEval(true);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.spliterator();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6573186405438316
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("(S)1LEb!to`batb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
      assertEquals(1, jSPredicateForm0.size());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.234679199787727
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(Hil)>t");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.reset();
      stringReader0.skip((-2343L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
      jSPredicateForm0.standarizerPredicateForm();
      Integer integer0 = new Integer((-22737641));
      Integer integer1 = new Integer(634);
      Integer integer2 = new Integer((-3904));
      assertFalse(integer2.equals((Object)integer1));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0068967152315558
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(PJW X");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3646123915234463
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ty67hp?=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.stream();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.standarizerSubs();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      String string0 = "^Zaf_g]89=%j%tJ";
      JSJshopVars.plus = 1;
      jSPredicateForm0.toStr();
      jSPredicateForm0.setSize(1);
      StringReader stringReader0 = new StringReader("^Zaf_g]89=%j%tJ");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 2;
      streamTokenizer0.eolIsSignificant(true);
      stringReader0.close();
      streamTokenizer0.wordChars((-1), 2);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4151491771042335
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ty67hp?=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.add((Object) jSTerm0);
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      stringReader0.ready();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.add((Object) jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.containsAll(jSTerm0);
      jSTerm3.clone();
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm1.print();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("O");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.setSize(605);
      jSPredicateForm0.addAll((Collection) jSTerm0);
      jSPredicateForm0.spliterator();
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "(P)^ X");
      jSPredicateForm0.add((Object) "(P)^ X");
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = function1.andThen((Function<? super Integer, ? extends Integer>) function1);
      Function<String, Integer> function3 = function2.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      jSPredicateForm0.lastElement();
      function1.apply(unaryOperator1);
      unaryOperator1.apply(function3);
      Integer integer0 = new Integer((-1090586995));
      Function<Integer, Integer> function4 = function2.compose((Function<? super Integer, ?>) function1);
      Function.identity();
      Function.identity();
      Integer integer1 = new Integer((-1090586995));
      function4.apply(integer1);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function6 = function1.andThen((Function<? super Integer, ? extends String>) function5);
      Function<Object, Integer> function7 = function2.compose((Function<? super Object, ?>) function6);
      function4.apply((Integer) null);
      function1.andThen((Function<? super Integer, ? extends String>) function6);
      Function.identity();
      Integer integer2 = new Integer((-1090586995));
      function4.apply(integer2);
      function2.andThen((Function<? super Integer, ? extends String>) function6);
      Function<Object, Integer> function8 = function7.compose((Function<? super Object, ?>) function2);
      Function.identity();
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function8);
      function9.andThen((Function<? super Integer, ?>) function7);
      function4.compose((Function<? super Object, ? extends Integer>) function7);
      function7.andThen((Function<? super Integer, ? extends Integer>) function4);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(1434);
      int int0 = (-177928746);
      Integer integer1 = new Integer(1434);
      StringReader stringReader0 = new StringReader("(KJW X");
      stringReader0.ready();
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9684237946177348
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ty67hp?=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.add((Object) jSTerm0);
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.add((Object) jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.containsAll(jSTerm0);
      jSTerm3.makeEval(true);
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionPF((JSSubstitution) null);
      System.setCurrentTimeMillis(0L);
      jSTerm3.add((Object) jSSubstitution0);
      jSTerm0.clonePF();
      jSTerm0.standarizerPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6780270377766386
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ty67hp?=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.containsAll(jSTerm0);
      JSSubstitution jSSubstitution1 = null;
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.applySubstitutionPF((JSSubstitution) null);
      stringReader0.ready();
      // Undeclared exception!
      try { 
        jSTerm1.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" erm expectN2ed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.firstElement();
      jSTerm0.add((Object) "erm");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.214173924777526
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSJshopVars.rightPar = 43;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm0.addElement((Object) null);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm2.equals(jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.020593437179155
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSJshopVars.plus = 246;
      JSJshopVars.rightPar = 246;
      StringReader stringReader0 = new StringReader(" erm expectN2ed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSJshopVars.verticalL = (-1094437488);
      JSJshopVars.plus = 246;
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("[erm, [erm]]", jSPredicateForm0.toString());
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
      assertEquals("(ermerm )", stringBuffer0.toString());
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.clone();
      jSTerm1.add((Object) " erm expectN2ed");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSJshopVars.apostrophe = (-1);
      JSJshopVars.lessT = 246;
      Integer integer0 = new Integer(246);
      Integer integer1 = new Integer(246);
      System.setCurrentTimeMillis(246);
      JSPredicateForm jSPredicateForm3 = jSTerm0.clonePF();
      assertTrue(jSPredicateForm3.equals((Object)jSPredicateForm2));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3305555163296225
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ty67hp?=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSTerm0.equals(jSPredicateForm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.standarizerSubs();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionPF(jSSubstitution5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" erm expectN2ed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar(1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.ordinaryChar(32);
      streamTokenizer1.sval = null;
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      streamTokenizer1.pushBack();
      charArray0[1] = '1';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      jSTerm0.add((Object) null);
      charBuffer0.mark();
      charBuffer0.clear();
      stringReader0.read(charBuffer0);
      stringReader0.read();
      stringReader0.ready();
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.ttype = (-4);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" erm exetN2ed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.quoteChar(23);
      streamTokenizer1.ordinaryChar(32);
      streamTokenizer1.sval = null;
      streamTokenizer0.commentChar(32);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ttype = 32;
      streamTokenizer2.sval = null;
      streamTokenizer2.slashStarComments(true);
      jSTerm0.add((Object) streamTokenizer0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.ordinaryChars(32, 32);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0980526298332742
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ty67hp0?=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.clone();
      stringReader0.ready();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.makeConstant();
      jSTerm1.ensureCapacity((-1));
      jSTerm0.add((Object) "ty67hp0?=");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" e m expextNzed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars(32, 32);
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.ttype = (-725);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.wordChars((-725), (-725));
      streamTokenizer0.eolIsSignificant(false);
      jSTerm0.ensureCapacity((-725));
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "(PJW X");
      jSPredicateForm0.add((Object) "(PJW X");
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.forEach(consumer0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Function<Integer, Integer> function0 = Function.identity();
      jSTerm0.add((Object) null);
      Integer integer0 = new Integer(1983);
      Integer integer1 = function0.apply(integer0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function1).apply(any());
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = function2.andThen((Function<? super Integer, ? extends Integer>) function0);
      function3.compose((Function<? super String, ?>) unaryOperator0);
      Function<Object, Object> function4 = Function.identity();
      jSTerm0.lastElement();
      function3.apply((Object) null);
      Integer integer2 = new Integer(1983);
      Integer integer3 = new Integer(1983);
      Function<Integer, Integer> function5 = function2.compose((Function<? super Integer, ?>) unaryOperator0);
      Function.identity();
      Function.identity();
      function5.apply(integer1);
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.andThen((Function<? super Integer, ? extends String>) function6);
      Function<Object, Integer> function7 = function2.compose((Function<? super Object, ?>) function4);
      function0.apply(integer0);
      Function.identity();
      function7.compose((Function<? super Object, ?>) function7);
      Function.identity();
      Function.identity();
      Function.identity();
      function7.andThen((Function<? super Integer, ?>) function2);
      Function<Object, Integer> function8 = function0.compose((Function<? super Object, ? extends Integer>) function3);
      function7.andThen((Function<? super Integer, ? extends Integer>) function8);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" jrm expecKN2ed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.setSize(32);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      System.setCurrentTimeMillis((-2483L));
      System.setCurrentTimeMillis((-2483L));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "not");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.apply(unaryOperator1);
      unaryOperator1.apply(unaryOperator0);
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ?>) unaryOperator3);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ?>) unaryOperator3);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.compose((Function<? super String, ?>) unaryOperator2);
      UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Object, ?>) unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add((Object) " : ");
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("not");
      jSTerm0.clone();
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.553400193570591
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ty67hp?=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.add((Object) jSTerm0);
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      stringReader0.ready();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.add((Object) jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.containsAll(jSTerm0);
      jSPredicateForm0.iterator();
      jSTerm3.makeEval(true);
      JSSubstitution jSSubstitution1 = null;
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      jSTerm0.matches(jSPredicateForm1, jSSubstitution0);
      String string0 = "!1Uj%?4pG}a+";
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSPredicateForm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.clear();
      String string0 = null;
      jSPredicateForm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) null);
      Predicate<String> predicate1 = predicate0.or(predicate0);
      predicate0.test((String) null);
      Predicate<String> predicate2 = Predicate.isEqual((Object) null);
      predicate1.and(predicate2);
      Predicate<String> predicate3 = predicate1.and(predicate1);
      Predicate<String> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate6.and(predicate6);
      predicate1.or(predicate7);
      predicate3.negate();
      jSSubstitution0.removeIf(predicate3);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.0876413878036715
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" jrm expecKN2ed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator2.apply("Kwr");
      unaryOperator4.apply(unaryOperator3);
      UnaryOperator<JSTerm> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      unaryOperator4.apply(unaryOperator5);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ?>) unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator7.compose((Function<? super String, ?>) unaryOperator2);
      UnaryOperator<Object> unaryOperator8 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator9 = UnaryOperator.identity();
      unaryOperator8.apply(unaryOperator1);
      UnaryOperator<Object> unaryOperator10 = UnaryOperator.identity();
      unaryOperator6.compose((Function<? super String, ?>) unaryOperator10);
      UnaryOperator<Object> unaryOperator11 = UnaryOperator.identity();
      unaryOperator11.andThen((Function<? super Object, ?>) unaryOperator9);
      unaryOperator3.andThen((Function<? super Object, ?>) unaryOperator3);
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0);
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" e m expextp%zed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars(32, 32);
      streamTokenizer1.commentChar((-4));
      streamTokenizer2.ttype = streamTokenizer2.ttype;
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(32, (-4));
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer3.quoteChar(32);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      streamTokenizer5.lowerCaseMode(false);
      streamTokenizer5.pushBack();
      streamTokenizer3.slashStarComments(false);
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer3.nextToken();
      streamTokenizer4.whitespaceChars((-4), (-3));
      streamTokenizer5.eolIsSignificant(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer2.slashStarComments(true);
      streamTokenizer4.ttype = (-4);
      streamTokenizer5.wordChars((-3), (-3));
      streamTokenizer2.nextToken();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Function<Integer, Integer> function0 = Function.identity();
      Integer integer0 = new Integer(1983);
      function0.apply(integer0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function1).apply(any());
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = function2.andThen((Function<? super Integer, ? extends Integer>) function0);
      function3.compose((Function<? super String, ?>) unaryOperator0);
      Function<Object, Object> function4 = Function.identity();
      jSTerm0.lastElement();
      function3.apply("not");
      Integer integer1 = new Integer(1983);
      Integer integer2 = new Integer(1983);
      Function<Integer, Integer> function5 = function2.compose((Function<? super Integer, ?>) unaryOperator0);
      Function.identity();
      Function.identity();
      function5.apply((Integer) null);
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function7 = function3.andThen((Function<? super Integer, ? extends String>) function6);
      Function<Object, Integer> function8 = function2.compose((Function<? super Object, ?>) function4);
      function0.apply(integer0);
      function2.andThen((Function<? super Integer, ? extends String>) function7);
      Function<Object, Object> function9 = Function.identity();
      Function<Object, Integer> function10 = function8.compose((Function<? super Object, ?>) function9);
      function8.compose((Function<? super Object, ?>) function10);
      Function.identity();
      Function.identity();
      Function<Integer, Integer> function11 = Function.identity();
      function2.andThen((Function<? super Integer, ? extends Integer>) function11);
      Function.identity();
      function8.andThen((Function<? super Integer, ?>) function10);
      Function<Object, Integer> function12 = function0.compose((Function<? super Object, ? extends Integer>) function10);
      function8.andThen((Function<? super Integer, ? extends Integer>) function12);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9549478780836425
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.sort(comparator0);
      jSPredicateForm0.spliterator();
      jSPredicateForm0.parallelStream();
      jSPredicateForm0.add((Object) "cae");
      jSPredicateForm0.toStr();
      jSPredicateForm0.toStr();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(5, stringBuffer0.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.addElement(stringBuffer0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.StringBuffer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.removeAllElements();
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" e m expextNp%zed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer3.quoteChar(32);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      streamTokenizer5.lowerCaseMode(false);
      streamTokenizer5.pushBack();
      streamTokenizer3.slashStarComments(false);
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer3.nextToken();
      streamTokenizer4.whitespaceChars((-4), (-3));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer5.eolIsSignificant(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer2.slashStarComments(false);
      streamTokenizer4.ttype = (-4);
      streamTokenizer5.wordChars((-3), (-3));
      streamTokenizer2.nextToken();
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      streamTokenizer2.wordChars((-3), (-3));
      assertEquals(1, streamTokenizer2.lineno());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" jrm expecKN2ed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator2.apply("Kwr");
      unaryOperator4.apply(unaryOperator3);
      UnaryOperator<JSTerm> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      unaryOperator4.apply(unaryOperator5);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ?>) unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator7.compose((Function<? super String, ?>) unaryOperator2);
      UnaryOperator<Object> unaryOperator8 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator9 = UnaryOperator.identity();
      unaryOperator8.apply(unaryOperator1);
      unaryOperator9.apply(unaryOperator1);
      UnaryOperator<Object> unaryOperator10 = UnaryOperator.identity();
      unaryOperator6.compose((Function<? super String, ?>) unaryOperator10);
      UnaryOperator<Object> unaryOperator11 = UnaryOperator.identity();
      unaryOperator11.andThen((Function<? super Object, ?>) unaryOperator9);
      unaryOperator3.andThen((Function<? super Object, ?>) unaryOperator3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" erm expextN2ed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars(32, 32);
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.lowerCaseMode(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(32, (-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      streamTokenizer6.lowerCaseMode(true);
      streamTokenizer6.pushBack();
      streamTokenizer4.slashStarComments(false);
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer3.nextToken();
      streamTokenizer5.whitespaceChars(195, (-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer5.ordinaryChar((-22725752));
      streamTokenizer4.parseNumbers();
      streamTokenizer2.slashStarComments(true);
      streamTokenizer5.ttype = (-4);
      streamTokenizer6.wordChars((-1), (-1));
      streamTokenizer2.nextToken();
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      streamTokenizer2.wordChars((-1), (-1));
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" e m expextp%zed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars(32, 32);
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(32, (-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer3.quoteChar(32);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      streamTokenizer5.pushBack();
      streamTokenizer3.slashStarComments(false);
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer3.nextToken();
      streamTokenizer4.whitespaceChars((-4), (-3));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer5.eolIsSignificant(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer2.slashStarComments(false);
      streamTokenizer4.ttype = (-4);
      streamTokenizer5.wordChars((-3), (-3));
      streamTokenizer2.nextToken();
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      streamTokenizer2.wordChars((-3), (-3));
      assertFalse(streamTokenizer2.equals((Object)streamTokenizer3));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" erm expextN2ed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars(32, 32);
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.lowerCaseMode(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(32, (-4));
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer3.quoteChar(32);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer2.nextToken();
      streamTokenizer6.lowerCaseMode(false);
      streamTokenizer4.slashStarComments(true);
      streamTokenizer6.pushBack();
      streamTokenizer4.slashStarComments(false);
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer3.nextToken();
      streamTokenizer5.whitespaceChars(195, (-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer4.parseNumbers();
      streamTokenizer2.slashStarComments(false);
      streamTokenizer5.ttype = (-4);
      streamTokenizer6.wordChars((-1), (-1));
      streamTokenizer2.nextToken();
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      streamTokenizer2.wordChars(32, 32);
      assertFalse(streamTokenizer2.equals((Object)streamTokenizer4));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = function1.andThen((Function<? super Integer, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      function4.apply(function2);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function6 = function2.andThen((Function<? super Integer, ?>) function3);
      Function<Object, Integer> function7 = function3.compose((Function<? super Object, ?>) function5);
      Function<Integer, Integer> function8 = Function.identity();
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Object> function10 = function4.andThen((Function<? super Integer, ?>) function2);
      Function<Object, Integer> function11 = function9.andThen((Function<? super Integer, ? extends Integer>) function1);
      Function<Integer, Integer> function12 = function1.compose((Function<? super Integer, ?>) function10);
      Function<Object, Object> function13 = function7.andThen((Function<? super Integer, ?>) function2);
      function4.compose((Function<? super Integer, ?>) function2);
      Integer integer0 = new Integer(2068);
      Integer integer1 = new Integer(2068);
      Function<Object, Integer> function14 = function1.andThen((Function<? super Integer, ? extends Integer>) function3);
      function3.compose((Function<? super String, ?>) function7);
      Function<Object, Object> function15 = Function.identity();
      function14.apply(function10);
      function10.apply(function12);
      function14.apply(function7);
      function14.compose((Function<? super Integer, ?>) function6);
      Function.identity();
      Function<Object, String> function16 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Integer integer2 = new Integer(2068);
      function2.andThen((Function<? super Integer, ? extends String>) function16);
      function7.compose((Function<? super Object, ?>) function15);
      function1.andThen((Function<? super Integer, ?>) function13);
      function8.compose((Function<? super Object, ? extends Integer>) function1);
      function1.andThen((Function<? super Integer, ? extends Integer>) function11);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 557;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator5);
      unaryOperator2.apply("Kwr");
      UnaryOperator<JSTerm> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      unaryOperator4.apply(unaryOperator6);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator8 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ?>) unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator8.compose((Function<? super String, ?>) unaryOperator2);
      UnaryOperator<Object> unaryOperator9 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator10 = UnaryOperator.identity();
      unaryOperator9.apply(unaryOperator1);
      unaryOperator10.apply(unaryOperator1);
      UnaryOperator<Object> unaryOperator11 = UnaryOperator.identity();
      unaryOperator7.compose((Function<? super String, ?>) unaryOperator11);
      UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ?>) unaryOperator3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.clear();
      String string0 = null;
      jSPredicateForm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) null);
      Predicate<String> predicate1 = predicate0.or(predicate0);
      Predicate<String> predicate2 = Predicate.isEqual((Object) "not");
      predicate1.and(predicate2);
      Predicate<String> predicate3 = predicate1.and(predicate1);
      Predicate<String> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate5.or(predicate6);
      Predicate<Object> predicate8 = predicate7.and(predicate6);
      predicate1.or(predicate8);
      predicate3.negate();
      jSSubstitution0.removeIf(predicate3);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator2.apply("Kwr");
      UnaryOperator<JSTerm> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      unaryOperator4.apply(unaryOperator5);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ?>) unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator7.compose((Function<? super String, ?>) unaryOperator2);
      UnaryOperator<Object> unaryOperator8 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator9 = UnaryOperator.identity();
      unaryOperator8.apply(unaryOperator1);
      unaryOperator9.apply(unaryOperator1);
      UnaryOperator<Object> unaryOperator10 = UnaryOperator.identity();
      unaryOperator6.compose((Function<? super String, ?>) unaryOperator10);
      UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ?>) unaryOperator3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.apply(unaryOperator3);
      UnaryOperator<JSTerm> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator7 = UnaryOperator.identity();
      unaryOperator4.apply(unaryOperator5);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ?>) unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function<String, Object> function0 = unaryOperator2.compose((Function<? super String, ?>) unaryOperator7);
      UnaryOperator<Object> unaryOperator8 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator4);
      UnaryOperator<Object> unaryOperator9 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator8.compose((Function<? super String, ?>) unaryOperator3);
      UnaryOperator.identity();
      unaryOperator9.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator6.compose((Function<? super String, ?>) function0);
      unaryOperator9.apply(unaryOperator7);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      System.setCurrentTimeMillis((-2490L));
      System.setCurrentTimeMillis(2188L);
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(572L);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = function1.andThen((Function<? super Integer, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      function4.apply(function2);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function6 = function2.andThen((Function<? super Integer, ?>) function3);
      Function<Object, Integer> function7 = function3.compose((Function<? super Object, ?>) function5);
      Function<Integer, Integer> function8 = Function.identity();
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Object> function10 = function4.andThen((Function<? super Integer, ?>) function2);
      Function<Object, Integer> function11 = function9.andThen((Function<? super Integer, ? extends Integer>) function1);
      Function<Integer, Integer> function12 = function1.compose((Function<? super Integer, ?>) function10);
      function8.apply((Integer) null);
      function4.andThen((Function<? super Integer, ? extends Integer>) function11);
      Function<Object, Object> function13 = function7.andThen((Function<? super Integer, ?>) function2);
      function4.compose((Function<? super Integer, ?>) function2);
      Integer integer0 = new Integer(2068);
      Integer integer1 = new Integer(2068);
      Function<Object, Integer> function14 = function1.andThen((Function<? super Integer, ? extends Integer>) function3);
      function3.compose((Function<? super String, ?>) function7);
      Function<Object, Object> function15 = Function.identity();
      function12.compose((Function<? super String, ? extends Integer>) function11);
      function14.apply(function10);
      function14.apply(function7);
      function14.compose((Function<? super Integer, ?>) function6);
      Function<Object, String> function16 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function8.apply((Integer) null);
      function2.andThen((Function<? super Integer, ? extends String>) function16);
      function7.compose((Function<? super Object, ?>) function15);
      function1.andThen((Function<? super Integer, ?>) function13);
      function8.compose((Function<? super Object, ? extends Integer>) function1);
      function1.andThen((Function<? super Integer, ? extends Integer>) function11);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      jSTerm0.add((Object) "nRt");
      jSTerm0.clonePF();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Function<Integer, Integer> function0 = Function.identity();
      Integer integer0 = new Integer(1983);
      function0.apply(integer0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function1).apply(any());
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = function2.andThen((Function<? super Integer, ? extends Integer>) function0);
      function3.compose((Function<? super String, ?>) unaryOperator0);
      Function<Object, Object> function4 = Function.identity();
      jSTerm0.lastElement();
      function3.apply("not");
      unaryOperator0.apply(integer0);
      Integer integer1 = new Integer(1983);
      Function<Integer, Integer> function5 = function2.compose((Function<? super Integer, ?>) unaryOperator0);
      Function.identity();
      Function.identity();
      function5.apply((Integer) null);
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function7 = function3.andThen((Function<? super Integer, ? extends String>) function6);
      Function<Object, Integer> function8 = function2.compose((Function<? super Object, ?>) function4);
      function0.apply(integer0);
      function2.andThen((Function<? super Integer, ? extends String>) function7);
      Function<Object, Object> function9 = Function.identity();
      Function<Object, Integer> function10 = function8.compose((Function<? super Object, ?>) function9);
      function8.compose((Function<? super Object, ?>) function10);
      Function.identity();
      function8.andThen((Function<? super Integer, ?>) function10);
      Function<Object, Integer> function11 = function0.compose((Function<? super Object, ? extends Integer>) function10);
      function8.andThen((Function<? super Integer, ? extends Integer>) function11);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UnaryOperator.identity();
      String string0 = "b";
      StringReader stringReader0 = new StringReader("b");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      System.setCurrentTimeMillis((-2483L));
      System.setCurrentTimeMillis((-2483L));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(MuYy");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = function1.andThen((Function<? super Integer, ? extends Integer>) function1);
      function1.compose((Function<? super String, ?>) function2);
      Function.identity();
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super Integer, ?>) function1);
      Function<Object, Integer> function4 = function1.compose((Function<? super Object, ?>) function3);
      Function<Integer, Integer> function5 = Function.identity();
      Function<Object, Integer> function6 = function1.andThen((Function<? super Integer, ? extends Integer>) function1);
      function6.apply(function4);
      Function<Object, Integer> function7 = function2.compose((Function<? super Object, ?>) function6);
      Function<Object, Object> function8 = function2.andThen((Function<? super Integer, ?>) function2);
      function2.andThen((Function<? super Integer, ? extends Integer>) function1);
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function10 = function2.andThen((Function<? super Integer, ? extends String>) function9);
      function4.andThen((Function<? super Integer, ?>) function2);
      Function<Integer, Integer> function11 = function2.compose((Function<? super Integer, ?>) function2);
      Function<Object, Integer> function12 = function1.andThen((Function<? super Integer, ? extends Integer>) function1);
      function1.compose((Function<? super String, ?>) function4);
      Function<Object, Integer> function13 = function5.compose((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Object> function14 = Function.identity();
      Function<Object, String> function15 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function14.andThen((Function<? super Object, ?>) function7);
      function12.apply(function8);
      function8.apply(function5);
      function12.apply(function4);
      Function<Object, String> function16 = function13.andThen((Function<? super Integer, ? extends String>) function10);
      function11.compose((Function<? super String, ? extends Integer>) function12);
      Function<Object, Integer> function17 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function18 = function17.compose((Function<? super Object, ?>) function16);
      function12.andThen((Function<? super Integer, ?>) function16);
      function12.andThen((Function<? super Integer, ?>) function5);
      function6.andThen((Function<? super Integer, ? extends String>) function16);
      function11.compose((Function<? super Object, ? extends Integer>) function18);
      Function<Object, Integer> function19 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      function19.andThen((Function<? super Integer, ? extends Integer>) function1);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("Expecting elements of the list");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = function1.andThen((Function<? super Integer, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      function4.apply(function2);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function6 = function2.andThen((Function<? super Integer, ?>) function3);
      Function<Object, Integer> function7 = function3.compose((Function<? super Object, ?>) function5);
      Function<Integer, Integer> function8 = Function.identity();
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Object> function10 = function4.andThen((Function<? super Integer, ?>) function2);
      Function<Object, Integer> function11 = function9.andThen((Function<? super Integer, ? extends Integer>) function1);
      Function<Integer, Integer> function12 = function1.compose((Function<? super Integer, ?>) function10);
      function8.apply((Integer) null);
      function4.andThen((Function<? super Integer, ? extends Integer>) function11);
      Function<Object, Object> function13 = function7.andThen((Function<? super Integer, ?>) function2);
      function4.compose((Function<? super Integer, ?>) function2);
      Integer integer0 = new Integer(2068);
      Integer integer1 = new Integer(2068);
      Function<Object, Integer> function14 = function1.andThen((Function<? super Integer, ? extends Integer>) function3);
      function3.compose((Function<? super String, ?>) function7);
      Function<Object, Object> function15 = Function.identity();
      function14.apply(function10);
      function10.apply(function12);
      function14.apply(function7);
      function14.compose((Function<? super Integer, ?>) function6);
      function8.apply((Integer) null);
      function7.compose((Function<? super Object, ?>) function15);
      function1.andThen((Function<? super Integer, ?>) function13);
      function8.compose((Function<? super Object, ? extends Integer>) function1);
      function1.andThen((Function<? super Integer, ? extends Integer>) function11);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(HilP>g");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
