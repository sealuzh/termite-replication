/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 19:51:43 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("Yi/QRR");
      SystemInUtil.addInputLine("Yi/QRR");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("68R'$@r~4e");
      JSJshopVars.exclamation = (-2);
      StringReader stringReader0 = new StringReader("(>kr(YRx6^E$%2");
      SystemInUtil.addInputLine("Yi/QRR");
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      int int0 = 1032;
      jSTerm0.trimToSize();
      Integer integer0 = new Integer(1032);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9759748505930936
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      SystemInUtil.addInputLine("equal");
      SystemInUtil.addInputLine(". ");
      jSTerm0.add((Object) "Guet*T9TD>^V");
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.print();
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm0.cloneT();
      jSTerm4.equals((JSPredicateForm) jSTerm1);
      SystemInUtil.addInputLine("%%%");
      JSEvaluate.numericValue(jSTerm2);
      jSTerm3.equals(jSTerm2);
      jSTerm2.toStr();
      StringReader stringReader0 = new StringReader("Guet*T9TD>^V");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3914337620844703
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Xv7GO!FB5");
      jSTerm0.toStr();
      Integer integer0 = new Integer((-3955));
      StringReader stringReader0 = new StringReader("Xv7GO!FB5");
      stringReader0.read();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      SystemInUtil.addInputLine("z");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      String string0 = "[_`I?nKRC%oG";
      String string1 = "bio(";
      SystemInUtil.addInputLine("Xv7GO!FB5");
      SystemInUtil.addInputLine("caG;");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.607966203832247
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemInUtil.addInputLine(" uCK[LX;[7");
      SystemInUtil.addInputLine(" uCK[LX;[7");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine(" uCK[LX;[7");
      SystemInUtil.addInputLine("Guet*T9TD>^V");
      SystemInUtil.addInputLine("8.0");
      jSTerm0.add((Object) "Guet*T9TD>^V");
      jSTerm0.print();
      SystemInUtil.addInputLine(" uCK[LX;[7");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      SystemInUtil.addInputLine(" uCK[LX;[7");
      jSTerm0.standarizerPredicateForm();
      jSTerm1.addAll((Collection) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      SystemInUtil.addInputLine("S");
      SystemInUtil.addInputLine("k;~BvvG!6+U/TSN\"R.C");
      jSTerm1.matches(jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5967734116634884
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      StringReader stringReader0 = new StringReader("?");
      jSTerm0.makeVariable();
      StringReader stringReader1 = new StringReader("?");
      StringReader stringReader2 = new StringReader("?");
      stringReader2.skip(1838L);
      StringReader stringReader3 = new StringReader("%%%");
      stringReader2.read();
      stringReader3.markSupported();
      StringReader stringReader4 = new StringReader("#=bWoD.qb$q7E");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[8];
      stringReader2.reset();
      objectArray0[0] = (Object) "?";
      jSTerm0.contains(jSTerm0);
      objectArray0[1] = (Object) "#=bWoD.qb$q7E";
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) jSSubstitution0;
      stringReader4.reset();
      stringReader2.reset();
      objectArray0[4] = (Object) stringReader2;
      stringReader4.markSupported();
      objectArray0[5] = (Object) stringReader4;
      objectArray0[6] = (Object) stringReader4;
      stringReader4.ready();
      stringReader2.skip((-1567L));
      objectArray0[7] = (Object) stringReader1;
      System.setCurrentTimeMillis(0L);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.standardizerTerm();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8663378135571533
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemInUtil.addInputLine("umd.cs.shp.JSUtil");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("umd.cs.shp.JSUtil");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "Gue*T9D>^V");
      jSTerm0.print();
      SystemInUtil.addInputLine("umd.cs.shp.JSUtil");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.call();
      StringReader stringReader0 = new StringReader("umd.cs.shp.JSUtil");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-6343));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      streamTokenizer0.nval = (double) '*';
      charArray0[3] = 'Z';
      charArray0[4] = 'E';
      streamTokenizer0.ttype = (int) '\'';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer1);
      jSTerm0.addAll((Collection) jSTerm3);
      jSTerm3.makeFunction();
      jSTerm3.equals(jSTerm1);
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      jSTerm4.removeAll(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3231677157195962
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.equals(jSTerm1);
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7993362746426573
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SystemInUtil.addInputLine("umd.cs.shop.JSUtil");
      SystemInUtil.addInputLine("}J#");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("}J#");
      SystemInUtil.addInputLine("Guet*T9TD>^V");
      SystemInUtil.addInputLine("call");
      jSTerm0.add((Object) "Guet*T9TD>^V");
      jSTerm0.print();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.call();
      SystemInUtil.addInputLine("umd.cs.shop.JSUtil");
      jSTerm0.print();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      StringReader stringReader0 = new StringReader("9H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      SystemInUtil.addInputLine("}J#");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm1.standarizerPredicateForm();
      jSTerm2.addAll((Collection) jSTerm0);
      SystemInUtil.addInputLine("Guet*T9TD>^V");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm3.makeFunction();
      jSTerm2.equals(jSTerm1);
      jSTerm1.equals(jSTerm0);
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1253483530817467
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5}.BP.XQ");
      SystemInUtil.addInputLine("5}.BP.XQ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-4), (-4));
      stringReader0.ready();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.ordinaryChars(798, (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.eolIsSignificant(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      jSTerm0.add((Object) null);
      jSTerm0.addAll((Collection) jSTerm0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("Yi/QRR");
      SystemInUtil.addInputLine("Yi/QRR");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("68R'$@r~4e");
      JSJshopVars.exclamation = (-2);
      StringReader stringReader0 = new StringReader("(>kr(YRx6^E$%2");
      stringReader0.mark(2079);
      stringReader0.markSupported();
      SystemInUtil.addInputLine("` ");
      SystemInUtil.addInputLine("68R'$@r~4e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SystemInUtil.addInputLine(",");
      SystemInUtil.addInputLine("Hj/h_");
      SystemInUtil.addInputLine("(h2 ]H_)eSKGL Be");
      SystemInUtil.addInputLine("A5Cqx/w3W6");
      StringReader stringReader0 = new StringReader("(h2 ]H_)eSKGL Be");
      stringReader0.skip((-1L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("(h2 ]H_)eSKGL Be");
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8903075818572013
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars(4847, (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChars((-1437773131), 3833);
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(1200, 109);
      streamTokenizer4.ordinaryChars(1200, (-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-43));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.ttype = (-4);
      streamTokenizer1.eolIsSignificant(false);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(false);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer5);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.addAll((Collection) jSPredicateForm0);
      streamTokenizer5.sval = null;
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.ttype = 47;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-3955);
      streamTokenizer1.ordinaryChars(4847, 47);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar((-3955));
      SystemInUtil.addInputLine("iKHQS:;=j6'");
      streamTokenizer3.ordinaryChars((-1437773131), 3842);
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.ordinaryChars(1200, 47);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(4847);
      System.setCurrentTimeMillis((-4));
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.488312269837143
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SystemInUtil.addInputLine(" uCK[LX;[7");
      SystemInUtil.addInputLine(" uCK[LX;[7");
      SystemInUtil.addInputLine(" uCK[LX;[7");
      SystemInUtil.addInputLine("constant");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine(" uCK[LX;[7");
      SystemInUtil.addInputLine("c\"uuf,|");
      SystemInUtil.addInputLine("gj");
      SystemInUtil.addInputLine("c\"uuf,|");
      jSTerm0.add((Object) "c\"uuf,|");
      SystemInUtil.addInputLine("ioi(");
      SystemInUtil.addInputLine("list");
      SystemInUtil.addInputLine("[_`I?nKRC%oG");
      jSTerm0.print();
      SystemInUtil.addInputLine(" uCK[LX;[7");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      SystemInUtil.addInputLine(" uCK[LX;[7");
      jSTerm0.standarizerPredicateForm();
      jSTerm1.addAll((Collection) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT((JSSubstitution) null);
      SystemInUtil.addInputLine("~}ICP");
      SystemInUtil.addInputLine("ioi(");
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.print();
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ttype = 47;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = 47;
      streamTokenizer1.ttype = 1200;
      streamTokenizer1.ordinaryChars(47, 1200);
      StringReader stringReader1 = new StringReader("8.0");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("(4L");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightBrac = (-3955);
      JSJshopVars.leftBrac = (-3955);
      SystemInUtil.addInputLine("9JM^k3[kk");
      SystemInUtil.addInputLine("Xv7GO!FB5");
      jSTerm0.add((Object) "Xv7GO!FB5");
      JSJshopVars.leftPar = (-3955);
      Integer integer0 = new Integer((-3955));
      JSJshopVars.rightPar = (-3955);
      jSTerm0.add((Object) integer0);
      JSJshopVars.dot = 16;
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8798421459308867
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5}.BP.XQ");
      SystemInUtil.addInputLine("5}.BP.XQ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-4), (-4));
      stringReader0.ready();
      streamTokenizer0.ordinaryChars(798, (-652));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.eolIsSignificant(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      jSTerm0.addAll((Collection) jSTerm0);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3746972911835402
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SystemInUtil.addInputLine(" uCK[LX;[7");
      SystemInUtil.addInputLine(" uCK[LX;[7");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine(" uCK[LX;[7");
      SystemInUtil.addInputLine("Guet*T9TD>^V");
      SystemInUtil.addInputLine("Guet*T9TD>^V");
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.call();
      SystemInUtil.addInputLine(" uCK[LX;[7");
      jSTerm2.print();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightBrac = (-3955);
      SystemInUtil.addInputLine("9JM^k3[kk");
      SystemInUtil.addInputLine("Xv7GO!FB5");
      jSTerm0.add((Object) "Xv7GO!FB5");
      JSJshopVars.leftPar = (-3955);
      Integer integer0 = new Integer((-3955));
      JSJshopVars.rightPar = (-3955);
      jSTerm0.add((Object) integer0);
      JSJshopVars.dot = 16;
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.setSize(1067);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8798421459308867
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5}.BP.XQ");
      SystemInUtil.addInputLine("5}.BP.XQ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-4), (-4));
      stringReader0.ready();
      streamTokenizer0.ordinaryChars(798, (-652));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.eolIsSignificant(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      jSTerm0.addAll((Collection) jSTerm0);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightBrac = (-3955);
      JSJshopVars.flagLevel = (-164943355);
      JSJshopVars.leftBrac = (-3955);
      SystemInUtil.addInputLine("9JM^k3[kk");
      SystemInUtil.addInputLine("Xv7GO!FB5");
      jSTerm0.add((Object) "Xv7GO!FB5");
      JSJshopVars.leftPar = (-3955);
      Integer integer0 = new Integer((-3955));
      JSJshopVars.astherisk = (-164943355);
      JSJshopVars.rightPar = (-3955);
      jSTerm0.add((Object) integer0);
      JSJshopVars.dot = (-3955);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.185269476000287
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.586637688877766
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "?";
      objectArray0[2] = (Object) jSSubstitution0;
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.toArray(objectArray0);
      JSJshopVars.leftBrac = 59;
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.equals(jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) "%%%");
      jSTerm2.isGround();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm0, jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5087038813818348
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      StringReader stringReader0 = new StringReader("?");
      jSTerm0.makeVariable();
      StringReader stringReader1 = new StringReader("?");
      StringReader stringReader2 = new StringReader("?");
      stringReader2.skip(1838L);
      StringReader stringReader3 = new StringReader("%%%");
      stringReader2.read();
      jSTerm0.isVariable();
      StringReader stringReader4 = new StringReader("#=bWoD.qb$q7E");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[8];
      stringReader2.reset();
      objectArray0[0] = (Object) "?";
      stringReader3.markSupported();
      objectArray0[1] = (Object) "#=bWoD.qb$q7E";
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSSubstitution0;
      stringReader4.reset();
      stringReader2.reset();
      objectArray0[4] = (Object) stringReader2;
      stringReader4.markSupported();
      objectArray0[5] = (Object) stringReader4;
      objectArray0[6] = (Object) stringReader4;
      stringReader4.ready();
      stringReader2.skip((-1567L));
      objectArray0[7] = (Object) stringReader1;
      System.setCurrentTimeMillis(0L);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.standardizerTerm();
      jSTerm0.cloneT();
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.460685998915806
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?");
      jSTerm0.makeVariable();
      StringReader stringReader1 = new StringReader("?");
      StringReader stringReader2 = new StringReader("?");
      StringReader stringReader3 = new StringReader("%%%");
      stringReader2.read();
      stringReader3.markSupported();
      StringReader stringReader4 = new StringReader("#=bWoD.qb$q7E");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "?";
      stringReader3.markSupported();
      objectArray0[1] = (Object) "#=bWoD.qb$q7E";
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) jSSubstitution0;
      stringReader2.reset();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      objectArray0[4] = (Object) stringReader2;
      JSJshopVars.dot = 59;
      objectArray0[5] = (Object) stringReader4;
      objectArray0[6] = (Object) stringReader4;
      stringReader4.ready();
      stringReader4.markSupported();
      stringReader2.skip((-1567L));
      jSTerm0.call();
      objectArray0[7] = (Object) stringReader3;
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1859624766932884
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.equals(jSTerm1);
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3854132758228155
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      SystemInUtil.addInputLine("jds0jz]M.YXpLlI");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.326476235157148
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.502694782741236
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SystemInUtil.addInputLine("V}daaRM.A>?l-o>)hR");
      SystemInUtil.addInputLine("C'@-X)wD bH\"tW<nR");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("V}daaRM.A>?l-o>)hR");
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = 'u';
      SystemInUtil.addInputLine("V}daaRM.A>?l-o>)hR");
      charArray0[2] = '|';
      charArray0[3] = '?';
      charArray0[4] = '7';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.clonePF();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "% ");
      Predicate.isEqual((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) "Mjmpag");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution2);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.and(predicate0);
      StringReader stringReader0 = new StringReader("Mjmpag");
      StringReader stringReader1 = new StringReader(")");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("% ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      assertTrue(jSTerm2.isConstant());
      assertEquals("[nil]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6288922115877589
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%L");
      JSJshopVars.flagLevel = 1269;
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine((String) null);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?");
      jSTerm0.makeVariable();
      StringReader stringReader1 = new StringReader("?");
      StringReader stringReader2 = new StringReader("?");
      StringReader stringReader3 = new StringReader("%%%");
      stringReader2.read();
      stringReader3.markSupported();
      StringReader stringReader4 = new StringReader("%%%");
      stringReader3.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "?";
      stringReader3.markSupported();
      objectArray0[1] = (Object) "%%%";
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) jSSubstitution0;
      stringReader2.reset();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      objectArray0[4] = (Object) stringReader2;
      objectArray0[5] = (Object) stringReader4;
      objectArray0[6] = (Object) stringReader4;
      stringReader4.ready();
      stringReader2.skip((-1567L));
      stringReader2.close();
      objectArray0[7] = (Object) stringReader3;
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "?_jn|HS\\#amQC";
      StringReader stringReader0 = new StringReader("?_jn|HS#amQC");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "?_jn|HS#amQC");
      Predicate.isEqual((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate1);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate5.and(predicate4);
      predicate6.or(predicate4);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?");
      jSTerm0.makeVariable();
      StringReader stringReader1 = new StringReader("?");
      StringReader stringReader2 = new StringReader("?");
      stringReader2.skip((-1L));
      StringReader stringReader3 = new StringReader("%%%");
      stringReader2.read();
      stringReader3.markSupported();
      StringReader stringReader4 = new StringReader("#=bWoD.qb$q7E");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("%%%");
      StringReader stringReader5 = new StringReader("dJJ&Qv1xJ&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader5);
      SystemInUtil.addInputLine(") ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader5);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader4);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.87460206780668
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SystemInUtil.addInputLine("umd.cs.shop.JSUtil");
      SystemInUtil.addInputLine("%%%");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("%%%");
      jSTerm0.isGround();
      SystemInUtil.addInputLine("call");
      JSJshopVars.percent = 60;
      jSTerm0.add((Object) "Guet*T9TD>^V");
      jSTerm0.print();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.print();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.equals(jSTerm1);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm6 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.spliterator();
      jSTerm3.cloneT();
      System.setCurrentTimeMillis(60);
      jSTerm4.equals(jSTerm5);
      JSTerm jSTerm7 = jSTerm6.standardizerTerm();
      JSTerm jSTerm8 = jSTerm7.cloneT();
      // Undeclared exception!
      try { 
        jSTerm8.subList(1, (-2188));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1) > toIndex(-2188)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9349675563682265
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SystemInUtil.addInputLine("%%%");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("%%%");
      jSTerm0.isGround();
      jSTerm0.add((Object) "%%%");
      jSTerm0.print();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.print();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.equals(jSTerm1);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      jSTerm5.spliterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.spliterator();
      JSTerm jSTerm6 = jSTerm3.cloneT();
      jSTerm0.equals(jSTerm2);
      SystemInUtil.addInputLine(" : ");
      JSTerm jSTerm7 = jSTerm6.standardizerTerm();
      JSTerm jSTerm8 = jSTerm0.cloneT();
      jSTerm5.matches(jSTerm1, jSSubstitution0);
      jSTerm2.equals(jSTerm4);
      jSTerm6.retainAll(jSTerm4);
      jSTerm1.listIterator();
      jSTerm2.equals(jSTerm8);
      // Undeclared exception!
      try { 
        jSTerm6.set(1124, jSTerm7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1124
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.957071086900473
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SystemInUtil.addInputLine("%%%");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("%%%");
      SystemInUtil.addInputLine("Guet*T9TD>^V");
      jSTerm0.isGround();
      JSJshopVars.percent = 60;
      jSTerm0.add((Object) "Guet*T9TD>^V");
      jSTerm0.print();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.print();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.equals(jSTerm1);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm1.add(1, (Object) jSTerm0);
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.spliterator();
      JSTerm jSTerm6 = jSTerm3.cloneT();
      System.setCurrentTimeMillis(60);
      jSTerm0.equals(jSTerm2);
      SystemInUtil.addInputLine(" : ");
      JSTerm jSTerm7 = jSTerm6.standardizerTerm();
      JSTerm jSTerm8 = jSTerm0.cloneT();
      jSTerm5.matches(jSTerm1, jSSubstitution0);
      jSTerm2.equals(jSTerm4);
      jSTerm6.retainAll(jSTerm4);
      jSTerm1.listIterator();
      jSTerm2.equals(jSTerm8);
      // Undeclared exception!
      try { 
        jSTerm6.set(1124, jSTerm7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1124
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6817171669377426
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      StringReader stringReader0 = new StringReader("?");
      StringReader stringReader1 = new StringReader("?");
      StringReader stringReader2 = new StringReader("?");
      stringReader2.skip(1838L);
      StringReader stringReader3 = new StringReader("%%%");
      stringReader2.read();
      stringReader3.markSupported();
      StringReader stringReader4 = new StringReader("#=bWoD.qb$q7E");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[8];
      stringReader2.reset();
      objectArray0[0] = (Object) "?";
      stringReader3.markSupported();
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) jSSubstitution0;
      stringReader4.reset();
      stringReader2.reset();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      objectArray0[4] = (Object) stringReader2;
      stringReader4.markSupported();
      objectArray0[5] = (Object) stringReader4;
      objectArray0[6] = (Object) stringReader4;
      stringReader4.ready();
      stringReader2.skip((-1567L));
      objectArray0[7] = (Object) stringReader3;
      System.setCurrentTimeMillis(0L);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.892103863669368
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SystemInUtil.addInputLine(";D+x# zB(");
      SystemInUtil.addInputLine("%%%");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("%%%");
      jSTerm0.isGround();
      SystemInUtil.addInputLine("call");
      JSJshopVars.percent = 60;
      jSTerm0.add((Object) "Guet*T9TD>^V");
      jSTerm0.print();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      SystemInUtil.addInputLine("%%%");
      jSTerm0.print();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.equals(jSTerm1);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.standardizerTerm();
      jSTerm1.setSize(60);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.spliterator();
      jSTerm3.cloneT();
      System.setCurrentTimeMillis(60);
      jSTerm3.isFunction();
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm5.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.382797757078264
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      assertFalse(jSTerm0.isEval());
      
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSTerm0.makeEval(true);
      streamTokenizer2.parseNumbers();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm1.isEval();
      jSTerm0.cloneT();
      assertTrue(jSTerm0.isEval());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.289527201065478
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Y;o1b3 %zvZtQ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.clone();
      JSTerm jSTerm2 = new JSTerm();
      Integer integer0 = new Integer(96);
      Integer integer1 = new Integer((-2260));
      jSTerm1.addElement(integer1);
      jSTerm1.isConstant();
      jSTerm2.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.227789541525604
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars(4847, (-4));
      streamTokenizer1.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      SystemInUtil.addInputLine((String) null);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChars((-4), 3842);
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.pushBack();
      streamTokenizer3.resetSyntax();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.ordinaryChars(1200, (-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.ttype = (-4);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer7.eolIsSignificant(false);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer6);
      jSTerm0.addAll((Collection) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.makeFunction();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.87460206780668
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SystemInUtil.addInputLine("umd.cs.shop.JSUtil");
      SystemInUtil.addInputLine("%%%");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("%%%");
      jSTerm0.isGround();
      SystemInUtil.addInputLine("call");
      JSJshopVars.percent = 60;
      jSTerm0.add((Object) "Guet*T9TD>^V");
      jSTerm0.print();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.print();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.equals(jSTerm1);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      jSTerm1.setSize(60);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm6 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.spliterator();
      jSTerm3.cloneT();
      System.setCurrentTimeMillis(60);
      jSTerm4.equals(jSTerm5);
      JSTerm jSTerm7 = jSTerm6.standardizerTerm();
      JSTerm jSTerm8 = jSTerm7.cloneT();
      // Undeclared exception!
      try { 
        jSTerm8.subList(1, (-2188));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1) > toIndex(-2188)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate6.and(predicate4);
      Predicate<Object> predicate8 = predicate1.and(predicate2);
      predicate7.test("umd.cs.shop.JSJshopVars");
      Predicate<Object> predicate9 = predicate5.and(predicate5);
      Predicate<Object> predicate10 = predicate1.or(predicate1);
      predicate9.test("umd.cs.shop.JSJshopVars");
      predicate10.or(predicate4);
      predicate10.negate();
      predicate6.or(predicate7);
      Predicate<Object> predicate11 = predicate3.or(predicate5);
      predicate4.or(predicate3);
      Predicate<Object> predicate12 = predicate2.or(predicate9);
      predicate2.negate();
      Predicate.isEqual((Object) predicate12);
      predicate8.negate();
      predicate10.or(predicate2);
      predicate5.test(predicate12);
      predicate6.or(predicate3);
      predicate7.or(predicate5);
      predicate3.or(predicate11);
      Predicate<String> predicate13 = predicate6.or(predicate8);
      predicate13.and(predicate5);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(1200);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.415600505453946
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      int int0 = 0;
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.iterator();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.85441987781001
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(zE*mJ8UH*");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate1);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate6.or(predicate4);
      predicate6.negate();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      Predicate.isEqual((Object) predicate6);
      Predicate<String> predicate8 = Predicate.isEqual((Object) jSTerm0);
      Predicate<String> predicate9 = predicate8.and(predicate5);
      Predicate<Object> predicate10 = predicate7.and(predicate2);
      SystemInUtil.addInputLine("qiP");
      predicate9.test("umd.cs.shop.JSJshopVars");
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate12 = predicate6.and(predicate11);
      predicate11.or(predicate7);
      predicate3.or(predicate11);
      predicate5.or(predicate3);
      predicate12.negate();
      predicate8.or(predicate7);
      predicate9.or(predicate6);
      Predicate<String> predicate13 = predicate8.or(predicate10);
      predicate13.and(predicate11);
      jSTerm0.isConstant();
      predicate7.or(predicate4);
      Predicate<String> predicate14 = predicate9.negate();
      predicate13.and(predicate14);
      predicate0.negate();
      StringReader stringReader1 = new StringReader("");
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate6.and(predicate4);
      Predicate<Object> predicate8 = predicate1.and(predicate2);
      predicate7.test("umd.cs.shol.JSJshopVars");
      Predicate<Object> predicate9 = predicate5.and(predicate5);
      Predicate<Object> predicate10 = predicate1.or(predicate1);
      predicate9.test("umd.cs.shol.JSJshopVars");
      predicate10.or(predicate4);
      predicate10.negate();
      Predicate<String> predicate11 = predicate6.or(predicate7);
      Predicate<Object> predicate12 = predicate3.or(predicate5);
      predicate4.or(predicate3);
      predicate2.negate();
      Predicate.isEqual((Object) predicate4);
      predicate8.negate();
      predicate8.negate();
      predicate10.or(predicate2);
      predicate3.negate();
      predicate5.or(predicate4);
      predicate5.test(predicate2);
      Predicate<String> predicate13 = predicate6.or(predicate3);
      predicate11.negate();
      predicate3.or(predicate12);
      predicate13.and(predicate5);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(1200);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSJshopVars.leftPar = 93;
      Integer integer0 = new Integer((-3955));
      StringReader stringReader0 = new StringReader("Xv7GO!FB5");
      stringReader0.read();
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("%%%");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader2 = new StringReader("Xv7GO!FB5");
      stringReader2.markSupported();
      stringReader0.read();
      stringReader2.reset();
      stringReader0.markSupported();
      char[] charArray0 = new char[0];
      stringReader2.read(charArray0);
      StringReader stringReader3 = new StringReader("nil");
      stringReader3.ready();
      stringReader2.skip(1L);
      jSSubstitution0.listIterator();
      System.setCurrentTimeMillis(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.5716092553948373
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5}.BP.XQ");
      SystemInUtil.addInputLine("5}.BP.XQ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars(798, (-652));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      stringReader0.read();
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("5}.BP.XQ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.markSupported();
      stringReader0.reset();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      stringReader0.ready();
      stringReader1.skip(0L);
      System.setCurrentTimeMillis(1097L);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      assertTrue(jSTerm3.isConstant());
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertNotSame(jSTerm1, jSTerm3);
      assertTrue(jSSubstitution1.fail());
      
      boolean boolean0 = jSTerm2.isGround();
      assertNotSame(jSTerm2, jSTerm0);
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals("[5.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate7.and(predicate4);
      Predicate<Object> predicate9 = predicate1.and(predicate2);
      predicate8.test("umd.cs.shop.JSJshopVars");
      Predicate<Object> predicate10 = predicate5.and(predicate5);
      Predicate<Object> predicate11 = predicate1.or(predicate1);
      predicate10.test("umd.cs.shop.JSJshopVars");
      predicate11.negate();
      predicate7.or(predicate8);
      Predicate<Object> predicate12 = predicate3.or(predicate5);
      predicate4.or(predicate3);
      predicate2.or(predicate10);
      predicate2.negate();
      predicate11.or(predicate6);
      predicate3.negate();
      predicate7.or(predicate3);
      predicate8.or(predicate5);
      predicate6.or(predicate12);
      Predicate<String> predicate13 = predicate7.or(predicate9);
      predicate13.and(predicate6);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(1200);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6307049386554167
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("?");
      StringReader stringReader1 = new StringReader("?");
      stringReader1.skip(1838L);
      StringReader stringReader2 = new StringReader("%%%");
      stringReader1.read();
      stringReader2.markSupported();
      StringReader stringReader3 = new StringReader("#=bWoD.qb$q7E");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.reset();
      stringReader1.markSupported();
      stringReader3.reset();
      stringReader3.markSupported();
      stringReader0.ready();
      stringReader0.skip((-1567L));
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.isGround();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.928551319792604
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SystemInUtil.addInputLine(" uCK[LX;[7");
      SystemInUtil.addInputLine(" uCK[LX;[7");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine(" uCK[LX;[7");
      SystemInUtil.addInputLine("Guet*T9TD>^V");
      SystemInUtil.addInputLine("gj");
      SystemInUtil.addInputLine("Guet*T9TD>^V");
      jSTerm0.add((Object) "Guet*T9TD>^V");
      SystemInUtil.addInputLine("ioi(");
      SystemInUtil.addInputLine("[_`I?nKRC%oG");
      StringReader stringReader0 = new StringReader("8.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer0.ttype = 0;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-407));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.3882884914639884
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars(4847, (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChars((-1437773131), 3842);
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.lowerCaseMode(false);
      streamTokenizer4.pushBack();
      SystemInUtil.addInputLine((String) null);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars(3842, 9);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      streamTokenizer8.eolIsSignificant(false);
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-1530L));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer4);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isConstant());
      
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      boolean boolean0 = jSTerm0.equals(jSTerm4);
      assertNotSame(jSTerm1, jSTerm2);
      assertTrue(boolean0);
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isVariable());
      assertNotSame(jSTerm4, jSTerm3);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("2Yi/QRR");
      SystemInUtil.addInputLine("2Yi/QRR");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine(">=");
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine((String) null);
      StringReader stringReader0 = new StringReader("GGpl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.6219881584552325
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars(4847, (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChars((-1437773131), 3842);
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.pushBack();
      streamTokenizer3.resetSyntax();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.ordinaryChars(1200, (-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.ttype = (-4);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer7.eolIsSignificant(false);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer5);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      streamTokenizer3.ttype = (-414);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      System.setCurrentTimeMillis((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm1);
      assertEquals(2, jSTerm0.size());
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.476308104959637
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5}.BP.XQ");
      SystemInUtil.addInputLine("5}.BP.XQ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      SystemInUtil.addInputLine("call");
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm2.matches(jSTerm0);
      jSTerm2.matches(jSTerm0);
      jSTerm2.standardizerTerm();
      jSTerm0.isGround();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7073509586200624
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5}.BP.XQ");
      SystemInUtil.addInputLine("5}.BP.XQ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-4), (-4));
      stringReader0.ready();
      streamTokenizer0.ordinaryChars(798, (-652));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.eolIsSignificant(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      jSTerm0.addAll((Collection) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      StringReader stringReader1 = new StringReader("F~,\"?>h7gkI'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars((-4), 4847);
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.eolIsSignificant(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer4);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("Yi/QRR");
      SystemInUtil.addInputLine("Yi/QRR");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      jSSubstitution1.add((Object) "68R'$@r~4e");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution2);
      jSSubstitution2.add((Object) "TzoLXeZ( ;E#jxl");
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSSubstitution2.add(object0);
      SystemInUtil.addInputLine("( ");
      SystemInUtil.addInputLine("list");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.5476781211524027
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SystemInUtil.addInputLine(" uCK[LX;[7");
      SystemInUtil.addInputLine(" uCK[LX;[7");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine(" uCK[LX;[7");
      SystemInUtil.addInputLine("c\"uuf,|");
      SystemInUtil.addInputLine("gj");
      SystemInUtil.addInputLine("c\"uuf,|");
      jSTerm0.add((Object) "c\"uuf,|");
      SystemInUtil.addInputLine("ioi(");
      SystemInUtil.addInputLine("[_`I?nKRC%oG");
      jSTerm0.print();
      SystemInUtil.addInputLine(" uCK[LX;[7");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      SystemInUtil.addInputLine(" uCK[LX;[7");
      jSTerm0.standarizerPredicateForm();
      jSTerm1.makeConstant();
      jSTerm1.addAll((Collection) jSTerm0);
      JSJshopVars.equalT = (-2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      SystemInUtil.addInputLine("S");
      SystemInUtil.addInputLine("k;~BvvG!6+U/TSNR.C");
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?");
      jSTerm0.makeVariable();
      StringReader stringReader1 = new StringReader("?");
      StringReader stringReader2 = new StringReader("?");
      StringReader stringReader3 = new StringReader("%%%");
      stringReader2.read();
      StringReader stringReader4 = new StringReader("0.0");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "?";
      objectArray0[1] = (Object) "0.0";
      objectArray0[2] = (Object) jSSubstitution0;
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("calG ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.ttype = 47;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = 47;
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer1.ordinaryChars(47, 47);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars(47, 2);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer2.whitespaceChars(47, 47);
      streamTokenizer2.ordinaryChar(47);
      streamTokenizer3.ordinaryChars(47, (-4));
      streamTokenizer3.parseNumbers();
      streamTokenizer3.whitespaceChars((-3108), 47);
      streamTokenizer3.eolIsSignificant(true);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.pushBack();
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("+Yx_P7K");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.print();
      SystemInUtil.addInputLine((String) null);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.flagLevel = (-2471);
      jSTerm0.spliterator();
      JSJshopVars.lessT = (-2);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ttype = 47;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = 47;
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer1.ordinaryChars(47, 47);
      streamTokenizer1.wordChars(47, 2);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.whitespaceChars(47, 47);
      streamTokenizer0.ordinaryChar(47);
      streamTokenizer2.ordinaryChars(47, 47);
      streamTokenizer2.whitespaceChars((-3108), 47);
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.pushBack();
      streamTokenizer1.resetSyntax();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-4));
      streamTokenizer3.ordinaryChars((-4), 47);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer1.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.pushBack();
      streamTokenizer2.resetSyntax();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.nextToken();
      streamTokenizer4.ordinaryChars(1200, (-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5488235345316892
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5}.BP.XQ");
      StringReader stringReader1 = new StringReader("5}.BP.XQ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(47, (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer0.wordChars((-4), 1225);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.parseNumbers();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer4.parseNumbers();
      streamTokenizer1.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      streamTokenizer5.ordinaryChar((-4));
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer0.whitespaceChars(2, (-4));
      streamTokenizer3.eolIsSignificant(false);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader1);
      streamTokenizer6.slashSlashComments(true);
      streamTokenizer6.pushBack();
      streamTokenizer4.resetSyntax();
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader1);
      Integer integer0 = new Integer((-4));
      streamTokenizer4.ordinaryChars(44, 51);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.makeEval(true);
      jSSubstitution0.sort((Comparator) null);
      jSTerm0.listIterator();
      SystemInUtil.addInputLine("hb][");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightBrac = (-3955);
      JSJshopVars.leftBrac = 37;
      SystemInUtil.addInputLine("xJM^k3[kk");
      SystemInUtil.addInputLine("Xv7GO!FB5");
      JSJshopVars.leftPar = (-3955);
      Integer integer0 = new Integer((-3955));
      Integer integer1 = new Integer(37);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer1);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<String> predicate5 = Predicate.isEqual((Object) "Xv7GO!FB5");
      Predicate<String> predicate6 = predicate5.or(predicate1);
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<String> predicate8 = predicate7.or(predicate2);
      Predicate<String> predicate9 = predicate5.or(predicate3);
      predicate3.or(predicate0);
      Predicate<String> predicate10 = predicate9.or(predicate4);
      predicate10.negate();
      predicate4.or(predicate1);
      predicate8.test("Xv7GO!FB5");
      predicate0.or(predicate3);
      predicate10.negate();
      predicate7.and(predicate0);
      predicate6.negate();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars(4847, (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChars((-1437773131), 3833);
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.pushBack();
      streamTokenizer0.ordinaryChars(1200, 109);
      streamTokenizer2.ordinaryChars(1200, (-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.ttype = (-4);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine((String) null);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      streamTokenizer9.commentChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer4);
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Function.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = jSTerm0.isFunction();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.0446324302033596
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.addAll((Collection) jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution4);
      jSSubstitution1.add((Object) "TzoLXeZ(b ;E#jxl");
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution3.add((Object) jSSubstitution4);
      Object object0 = jSSubstitution4.clone();
      jSSubstitution1.add((Object) "TzoLXeZ(b ;E#jxl");
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = object0;
      objectArray0[3] = (Object) jSSubstitution1;
      objectArray0[3] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      StringReader stringReader0 = new StringReader("TzoLXeZ(b ;E#jxl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(2055, (-1603));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution5 = jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertTrue(jSSubstitution5.fail());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(zE*mJ8UH*");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate1);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate.isEqual((Object) predicate6);
      Predicate<String> predicate8 = predicate0.negate();
      Predicate<String> predicate9 = predicate8.and(predicate5);
      Predicate<Object> predicate10 = predicate4.and(predicate2);
      predicate9.test("ud.c.shop.JSJshoVars");
      Predicate<Object> predicate11 = predicate6.and(predicate6);
      Predicate<Object> predicate12 = predicate2.negate();
      predicate11.test("ud.c.shop.JSJshoVars");
      Predicate<Object> predicate13 = predicate3.or(predicate6);
      predicate5.or(predicate3);
      predicate11.negate();
      Predicate<Object> predicate14 = predicate12.or(predicate7);
      predicate10.and(predicate14);
      Predicate<String> predicate15 = predicate8.or(predicate3);
      predicate9.or(predicate6);
      predicate7.or(predicate13);
      Predicate<String> predicate16 = predicate8.or(predicate10);
      predicate16.test("jgx");
      predicate4.or(predicate4);
      SystemInUtil.addInputLine("ud.c.shop.JSJshoVars");
      Predicate<String> predicate17 = predicate15.negate();
      predicate16.and(predicate17);
      predicate15.negate();
      StringReader stringReader1 = new StringReader("Xw8C<6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate6.and(predicate4);
      predicate7.test("umd.cs.shop.JSJshopVars");
      Predicate<Object> predicate8 = predicate5.and(predicate5);
      Predicate<Object> predicate9 = predicate1.or(predicate1);
      predicate8.test("umd.cs.shop.JSJshopVars");
      predicate9.or(predicate4);
      predicate9.negate();
      Predicate<String> predicate10 = predicate6.or(predicate7);
      Predicate<Object> predicate11 = predicate3.or(predicate5);
      predicate4.or(predicate3);
      Predicate<Object> predicate12 = predicate2.or(predicate8);
      predicate2.negate();
      Predicate.isEqual((Object) predicate12);
      predicate3.negate();
      predicate3.negate();
      predicate10.and(predicate12);
      predicate9.or(predicate2);
      predicate3.negate();
      predicate5.or(predicate4);
      predicate5.test(predicate12);
      predicate6.or(predicate3);
      predicate10.negate();
      predicate3.or(predicate11);
      Predicate<String> predicate13 = predicate6.or(predicate3);
      predicate13.and(predicate5);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(1200);
      StringReader stringReader0 = new StringReader("x#uC^U");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.ttype = 47;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = 47;
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer1.ordinaryChars(47, 47);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars(47, 2);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer2.whitespaceChars(47, 47);
      streamTokenizer2.ordinaryChar(47);
      streamTokenizer3.ordinaryChars(47, (-4));
      streamTokenizer3.whitespaceChars((-3108), 47);
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.pushBack();
      streamTokenizer2.resetSyntax();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.nextToken();
      streamTokenizer4.ordinaryChars((-4), 47);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = (-3540);
      SystemInUtil.addInputLine("cgj],a");
      JSJshopVars.leftPar = (-5);
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" XxdV|b2uIqw^m+");
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSTerm1.isVariable();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate1.and(predicate2);
      Predicate<Object> predicate9 = predicate5.and(predicate5);
      Predicate<Object> predicate10 = predicate1.or(predicate1);
      predicate10.or(predicate4);
      predicate2.negate();
      predicate6.or(predicate7);
      Predicate<Object> predicate11 = predicate3.or(predicate5);
      predicate4.or(predicate3);
      Predicate<Object> predicate12 = predicate2.or(predicate9);
      Predicate<Object> predicate13 = predicate2.negate();
      Predicate<String> predicate14 = Predicate.isEqual((Object) predicate12);
      predicate8.negate();
      predicate10.or(predicate2);
      predicate3.negate();
      predicate14.or(predicate5);
      predicate5.or(predicate4);
      predicate4.test(predicate13);
      Predicate<String> predicate15 = predicate14.negate();
      predicate0.negate();
      predicate3.or(predicate11);
      predicate15.negate();
      SystemInUtil.addInputLine("drqYK");
      StringReader stringReader0 = new StringReader("drqYK");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertEquals("%%% ", stringBuffer0.toString());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate6.and(predicate4);
      Predicate<Object> predicate8 = predicate1.and(predicate2);
      predicate7.test("umd.cs.shol.JSJshopVars");
      Predicate<Object> predicate9 = predicate5.and(predicate5);
      Predicate<Object> predicate10 = predicate1.or(predicate1);
      predicate9.test("umd.cs.shol.JSJshopVars");
      Predicate<Object> predicate11 = predicate10.or(predicate4);
      Predicate<Object> predicate12 = predicate10.negate();
      Predicate<String> predicate13 = predicate6.or(predicate7);
      Predicate<Object> predicate14 = predicate3.or(predicate5);
      Predicate<Object> predicate15 = predicate4.or(predicate3);
      Predicate<Object> predicate16 = predicate2.or(predicate9);
      predicate9.negate();
      predicate6.negate();
      predicate4.negate();
      Predicate<Object> predicate17 = predicate8.negate();
      predicate5.test(predicate14);
      Predicate<Object> predicate18 = predicate10.or(predicate2);
      predicate15.negate();
      predicate18.or(predicate8);
      predicate12.test(predicate17);
      predicate6.or(predicate5);
      Predicate<String> predicate19 = predicate13.negate();
      predicate16.or(predicate18);
      predicate7.or(predicate18);
      predicate19.and(predicate11);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(1172);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("zZFN7");
      JSJshopVars.flagLevel = 1269;
      Object[] objectArray0 = new Object[14];
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) "% ";
      objectArray0[5] = (Object) "% ";
      objectArray0[7] = (Object) "% ";
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("zZFN7");
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightBrac = (-3955);
      JSJshopVars.flagLevel = (-164943355);
      JSJshopVars.leftBrac = (-3955);
      JSJshopVars.leftPar = (-3955);
      Integer integer0 = new Integer((-3955));
      JSJshopVars.rightPar = (-3955);
      jSTerm0.add((Object) integer0);
      JSJshopVars.dot = (-3955);
      jSTerm0.isGround();
      System.setCurrentTimeMillis((-3955));
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate1.and(predicate2);
      predicate7.test("umd.cs.s(op.JSJshopVars");
      Predicate<Object> predicate9 = predicate5.and(predicate5);
      Predicate<Object> predicate10 = predicate1.or(predicate1);
      predicate9.test("umd.cs.s(op.JSJshopVars");
      predicate10.or(predicate4);
      predicate2.negate();
      Predicate<String> predicate11 = predicate6.or(predicate7);
      Predicate<Object> predicate12 = predicate3.or(predicate5);
      predicate4.or(predicate3);
      Predicate<Object> predicate13 = predicate2.or(predicate9);
      Predicate<Object> predicate14 = predicate2.negate();
      Predicate<String> predicate15 = Predicate.isEqual((Object) predicate13);
      predicate8.negate();
      predicate10.or(predicate2);
      predicate3.negate();
      predicate5.or(predicate4);
      predicate4.test(predicate14);
      predicate15.negate();
      predicate7.or(predicate5);
      predicate3.or(predicate12);
      Predicate<String> predicate16 = predicate11.negate();
      predicate16.and(predicate5);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(1200);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate1.and(predicate2);
      Predicate<Object> predicate9 = predicate5.and(predicate5);
      Predicate<Object> predicate10 = predicate1.or(predicate1);
      predicate10.or(predicate4);
      predicate5.or(predicate9);
      predicate2.negate();
      predicate6.or(predicate7);
      predicate3.or(predicate5);
      Predicate<Object> predicate11 = predicate4.or(predicate3);
      Predicate<Object> predicate12 = predicate2.or(predicate9);
      Predicate<Object> predicate13 = predicate11.negate();
      Predicate<String> predicate14 = Predicate.isEqual((Object) predicate12);
      predicate8.negate();
      predicate10.or(predicate2);
      predicate3.negate();
      predicate11.negate();
      predicate5.or(predicate4);
      predicate4.test(predicate13);
      predicate14.negate();
      predicate7.or(predicate5);
      StringReader stringReader0 = new StringReader("apw-=U*(`c5-9L");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ttype = 47;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = 47;
      streamTokenizer1.sval = "strm':";
      streamTokenizer1.ttype = 1200;
      streamTokenizer1.ordinaryChars(47, (-1936221613));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer2.ordinaryChar(1200);
      streamTokenizer3.ordinaryChars(1200, (-4));
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.pushBack();
      streamTokenizer2.resetSyntax();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.nextToken();
      streamTokenizer4.ordinaryChars(1200, 47);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(4847);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(EmJ8Uf");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.addAll((Collection) jSSubstitution1);
      jSSubstitution1.containsAll(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution3);
      jSSubstitution2.add((Object) "(EmJ8Uf");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution4);
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      jSSubstitution1.add((Object) "TzoLXeZ(b ;E#jxl");
      jSSubstitution0.add((Object) jSSubstitution1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSSubstitution3.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = (JSSubstitution)jSSubstitution4.clone();
      jSSubstitution5.add((Object) jSSubstitution2);
      streamTokenizer0.ordinaryChars((-1384), 2055);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
