/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 21:28:37 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.net.URI;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F#pb[oRZVkXQ");
      MockFile mockFile1 = new MockFile(mockFile0, ";m;");
      mockFile0.setExecutable(true);
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      mockFile1.deleteOnExit();
      mockFile0.setReadable(true, true);
      mockFile0.setReadOnly();
      File file0 = mockFile0.getCanonicalFile();
      file0.setReadable(true, false);
      MockFile mockFile2 = new MockFile(">MSy4Cs-MbKF", ">MSy4Cs-MbKF");
      MockFile mockFile3 = new MockFile(".zip");
      mockFile1.mkdir();
      file0.setReadOnly();
      file0.toURI();
      MockFile mockFile4 = new MockFile("F#pb[oRZVkXQ", "The system has encountered a severe, internal error");
      String[] stringArray0 = new String[2];
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector0;
      stringArray0[0] = "";
      stringArray0[1] = "F#pb[oRZVkXQ";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(mockFile0, "F#pb[oRZVkXQ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F#p[oRZkQ");
      MockFile mockFile1 = new MockFile(mockFile0, ".ear");
      mockFile0.setExecutable(true);
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      mockFile1.setReadable(true, true);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsExcluded = vector0;
      MockFile mockFile2 = new MockFile(".ear", ">MSyCs-MbKF");
      mockFile0.setReadOnly();
      mockFile0.deleteOnExit();
      File file0 = mockFile0.getCanonicalFile();
      file0.setReadable(true, true);
      MockFile mockFile3 = new MockFile(">MSyCs-MbKF", ">MSyCs-MbKF");
      MockFile mockFile4 = new MockFile("F#p[oRZkQ");
      mockFile1.mkdir();
      file0.setReadOnly();
      URI uRI0 = file0.toURI();
      MockFile mockFile5 = new MockFile("F#p[oRZkQ", ".ear");
      mockFile0.mkdir();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ">MSyCs-MbKF";
      stringArray0[1] = "F#p[oRZkQ";
      stringArray0[2] = ">MSyCs-MbKF";
      mockFile3.getCanonicalPath();
      MockFile mockFile6 = new MockFile(uRI0);
      stringArray0[3] = "F#p[oRZkQ";
      stringArray0[4] = ">MSyCs-MbKF";
      stringArray0[5] = ".ear";
      stringArray0[6] = "/home/ubuntu/termite/projects/78_caloriecount/>MSyCs-MbKF/>MSyCs-MbKF";
      stringArray0[7] = ".ear";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(mockFile3, ">MSyCs-MbKF", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7499659805515169
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "F#zb[o@ZVkXQ";
      ImprovedFile improvedFile0 = new ImprovedFile("F#zb[o@ZVkXQ");
      DirectoryScanner.matchPatternStart("", "F#zb[o@ZVkXQ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.dirsExcluded = vector1;
      archiveScanner0.dirsNotIncluded = vector0;
      String[] stringArray0 = new String[3];
      boolean boolean0 = archiveScanner0.haveSlowResults;
      stringArray0[0] = "Could not create temporary directory for archive: ";
      stringArray0[1] = "F#zb[o@ZVkXQ";
      stringArray0[2] = "Could not create temporary directory for archive: ";
      archiveScanner0.setIncludes(stringArray0);
      improvedFile0.createTempDir("com.lts.event.ListenerHelper", "Could not create temporary directory for archive: ");
      improvedFile0.createTempDir("Could not create temporary directory for archive: ", ":i|uD1");
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.toFileType(improvedFile0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processDirectory(improvedFile0, "Could not create temporary directory for archive: ", false);
      archiveScanner0.scandir(improvedFile0, "R4Z|4?aYDjAhX%C9WR", false);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, F#zb[o@ZVkXQ
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      ImprovedFile improvedFile0 = new ImprovedFile("fjao.jar");
      String string1 = "<7Ok$PrO";
      boolean boolean0 = DirectoryScanner.matchPath("<7Ok$PrO", "fjao.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.basedir = (File) improvedFile0;
      Vector<Object> vector0 = new Vector<Object>();
      improvedFile0.mkdirs();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.processDirectory(improvedFile0, string0, boolean0);
      long long0 = (-2639L);
      vector0.trimToSize();
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(archiveScanner0.DIRECTORY);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(archiveScanner0.FILE);
      System.setCurrentTimeMillis(long0);
      Vector<InputStream> vector1 = new Vector<InputStream>();
      archiveScanner0.filesNotIncluded = vector1;
      System.setCurrentTimeMillis(archiveScanner0.ARCHIVE);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(archiveScanner0.DIRECTORY);
      long long1 = 1903L;
      System.setCurrentTimeMillis(archiveScanner0.DIRECTORY);
      System.setCurrentTimeMillis(long1);
      System.setCurrentTimeMillis(archiveScanner0.ARCHIVE);
      long long2 = (-1292L);
      System.setCurrentTimeMillis(archiveScanner0.DIRECTORY);
      long long3 = 0L;
      System.setCurrentTimeMillis(long3);
      System.setCurrentTimeMillis(long2);
      System.setCurrentTimeMillis(long1);
      archiveScanner0.processArchive(improvedFile0, string1);
      assertFalse(improvedFile0.isHidden());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ".jar.jar";
      ImprovedFile improvedFile0 = new ImprovedFile(".jar.jar");
      DirectoryScanner.matchPatternStart("", "F#pb[oRZVkXQ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("E$ %j12qNYK", "E$ %j12qNYK");
      String string0 = "J:|}`bmO'ZCYX";
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[2];
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsExcluded = vector0;
      stringArray0[0] = "J:|}`bmO'ZCYX";
      stringArray0[1] = "J:|}`bmO'ZCYX";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "dW1F%Qsr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "`hr0";
      ImprovedFile improvedFile0 = new ImprovedFile("`hr0");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.haveSlowResults = true;
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      DirectoryScanner.matchPatternStart(string0, string0);
      String[] stringArray0 = new String[3];
      archiveScanner0.setBasedir(string0);
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = stringArray0[1];
      String string1 = ".jar.jar";
      archiveScanner0.slowScan();
      DirectoryScanner.matchPatternStart(string0, string1);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "F#pb[oRZVkXQ";
      String string1 = ".jar.jar";
      ImprovedFile improvedFile0 = new ImprovedFile(".jar.jar");
      String string2 = "";
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      String[] stringArray0 = new String[6];
      String string3 = "bA~rbp\\,Xf.jY*&2";
      stringArray0[0] = string3;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string2;
      stringArray0[4] = string2;
      stringArray0[5] = string1;
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector1 = new Vector<Object>();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, string1, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      ImprovedFile improvedFile0 = new ImprovedFile("fjao.jar");
      boolean boolean0 = DirectoryScanner.matchPatternStart("", "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      improvedFile0.mkdirs();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.processDirectory(improvedFile0, string0, boolean0);
      long long0 = (-2639L);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(archiveScanner0.DIRECTORY);
      System.setCurrentTimeMillis(long0);
      long long1 = 0L;
      System.setCurrentTimeMillis(long1);
      System.setCurrentTimeMillis(long1);
      long long2 = 0L;
      System.setCurrentTimeMillis(long1);
      long long3 = (-2833L);
      System.setCurrentTimeMillis(long3);
      System.setCurrentTimeMillis(long3);
      System.setCurrentTimeMillis(long2);
      System.setCurrentTimeMillis(archiveScanner0.DIRECTORY);
      long long4 = 1L;
      System.setCurrentTimeMillis(long4);
      long long5 = 1L;
      System.setCurrentTimeMillis(long5);
      System.setCurrentTimeMillis(long3);
      long long6 = (-1L);
      System.setCurrentTimeMillis(long6);
      long long7 = (-2744L);
      System.setCurrentTimeMillis(long7);
      assertFalse(long7 == long4);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.535043918223923
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("F#pb[oRZVkXQ");
      DirectoryScanner.matchPath("BfDHXw Upn!v-S*D_=", "F#pb[oRZVkXQ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.dirsExcluded = vector1;
      Vector<String> vector2 = new Vector<String>();
      archiveScanner0.filesExcluded = vector2;
      archiveScanner0.dirsNotIncluded = vector0;
      String[] stringArray0 = new String[3];
      vector0.add((Object) "F#pb[oRZVkXQ");
      stringArray0[0] = "Could not create temporary directory for archive: ";
      stringArray0[1] = "F#pb[oRZVkXQ";
      stringArray0[2] = "Could not create temporary directory for archive: ";
      archiveScanner0.setIncludes(stringArray0);
      improvedFile0.createTempDir("com.lts.event.ListenerHelper", "Could not create temporary directory for archive: ");
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.scandir(improvedFile0, "J,X`3", true);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "F#pb[oRZVkXQ";
      String string1 = ".jar.jar";
      ImprovedFile improvedFile0 = new ImprovedFile(".jar.jar");
      String string2 = "";
      boolean boolean0 = DirectoryScanner.matchPatternStart("", "F#pb[oRZVkXQ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      String[] stringArray0 = new String[6];
      String string3 = "bA~rbp\\,Xf.jY*&2";
      stringArray0[0] = string3;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string2;
      stringArray0[4] = string2;
      stringArray0[5] = string1;
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector1 = new Vector<Object>();
      File file0 = archiveScanner0.getBasedir();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(file0, string3, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Gp_)R7Zk1Ot");
      MockFile mockFile1 = new MockFile(mockFile0, "Gp_)R7Zk1Ot");
      mockFile0.setExecutable(false);
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      mockFile1.setExecutable(true);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      mockFile1.getAbsolutePath();
      archiveScanner0.addDefaultExcludes();
      mockFile1.setReadable(false, false);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesIncluded = vector0;
      MockFile mockFile2 = new MockFile("Gp_)R7Zk1Ot", "Gp_)R7Zk1Ot");
      mockFile0.setReadOnly();
      mockFile0.deleteOnExit();
      File file0 = mockFile0.getCanonicalFile();
      MockFile mockFile3 = new MockFile("Gp_)R7Zk1Ot");
      MockFile mockFile4 = new MockFile("Gp_)R7Zk1Ot", "Gp_)R7Zk1Ot");
      mockFile1.setReadable(false, true);
      mockFile1.mkdir();
      file0.setReadOnly();
      mockFile1.getAbsolutePath();
      URI uRI0 = file0.toURI();
      MockFile mockFile5 = new MockFile("/home/ubuntu/termite/projects/78_caloriecount/Gp_)R7Zk1Ot/Gp_)R7Zk1Ot");
      mockFile0.setReadable(true, false);
      MockFile mockFile6 = new MockFile("/home/ubuntu/termite/projects/78_caloriecount/Gp_)R7Zk1Ot/Gp_)R7Zk1Ot");
      file0.mkdir();
      mockFile0.mkdir();
      mockFile0.getCanonicalPath();
      mockFile6.setWritable(false, true);
      mockFile6.mkdir();
      MockFile mockFile7 = new MockFile(uRI0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/home/ubuntu/termite/projects/78_caloriecount/Gp_)R7Zk1Ot";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(mockFile6, "/home/ubuntu/termite/projects/78_caloriecount/Gp_)R7Zk1Ot", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("l%=;JaU]ATo");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.haveSlowResults = true;
      boolean boolean0 = archiveScanner0.haveSlowResults;
      String[] stringArray0 = new String[3];
      archiveScanner0.setBasedir("l%=;JaU]ATo");
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "l%=;JaU]ATo";
      stringArray0[1] = "l%=;JaU]ATo";
      improvedFile0.toURI();
      stringArray0[2] = "l%=;JaU]ATo";
      archiveScanner0.slowScan();
      Vector<ObjectInputStream> vector0 = new Vector<ObjectInputStream>();
      archiveScanner0.filesNotIncluded = vector0;
      boolean boolean1 = archiveScanner0.haveSlowResults;
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      archiveScanner0.processFile("l%=;JaU]ATo");
      long long0 = 955L;
      System.setCurrentTimeMillis(long0);
      long long1 = (-2344L);
      System.setCurrentTimeMillis(long1);
      System.setCurrentTimeMillis(archiveScanner0.ARCHIVE);
      System.setCurrentTimeMillis(archiveScanner0.DIRECTORY);
      long long2 = 0L;
      archiveScanner0.slowScan();
      System.setCurrentTimeMillis(long2);
      String string0 = "dir0";
      archiveScanner0.isExcluded(string0);
      long long3 = 0L;
      long long4 = 0L;
      System.setCurrentTimeMillis(long4);
      long long5 = 0L;
      System.setCurrentTimeMillis(long5);
      System.setCurrentTimeMillis(long4);
      System.setCurrentTimeMillis(long3);
      assertFalse(long3 == long0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("E$ %j12qNYK", "E$ %j12qNYK");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "F/1";
      Vector<ObjectInputStream> vector0 = new Vector<ObjectInputStream>();
      Vector<InputStream> vector1 = new Vector<InputStream>();
      vector0.containsAll(vector1);
      archiveScanner0.filesExcluded = vector0;
      stringArray0[1] = "F/1";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.processArchive(improvedFile0, "F/1");
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "E$ %j12qNYK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F#p[oRZkQ");
      mockFile0.setExecutable(true);
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      mockFile0.setReadable(true, true);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsExcluded = vector0;
      MockFile mockFile1 = new MockFile(".ear", ">MSyCs-MbKF");
      mockFile0.setReadOnly();
      mockFile0.deleteOnExit();
      File file0 = mockFile0.getCanonicalFile();
      file0.setReadable(true, true);
      MockFile mockFile2 = new MockFile(">MSyCs-MbKF", ">MSyCs-MbKF");
      MockFile mockFile3 = new MockFile("F#p[oRZkQ");
      mockFile0.mkdir();
      file0.setReadOnly();
      URI uRI0 = file0.toURI();
      MockFile mockFile4 = new MockFile("F#p[oRZkQ", ".ear");
      mockFile0.mkdir();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ">MSyCs-MbKF";
      stringArray0[1] = "F#p[oRZkQ";
      stringArray0[2] = ">MSyCs-MbKF";
      mockFile2.getCanonicalPath();
      MockFile mockFile5 = new MockFile(uRI0);
      stringArray0[3] = "F#p[oRZkQ";
      stringArray0[4] = ">MSyCs-MbKF";
      stringArray0[5] = ".ear";
      stringArray0[6] = "/home/ubuntu/termite/projects/78_caloriecount/>MSyCs-MbKF/>MSyCs-MbKF";
      stringArray0[7] = ".ear";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("F#p[oRZkQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("dir0", "dir0");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.haveSlowResults;
      String[] stringArray0 = new String[3];
      archiveScanner0.setBasedir("dir0");
      stringArray0[0] = "dir0";
      stringArray0[1] = "dir0";
      stringArray0[2] = "dir0";
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.filesIncluded = vector0;
      String string0 = ".jar.jar";
      Integer integer0 = new Integer(2399);
      DirectoryScanner.match("dir0", "dir0");
      DirectoryScanner.matchPatternStart(".EARe.jar", ".jar.jar");
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.includes = stringArray0;
      archiveScanner0.processFile("dir0");
      try { 
        archiveScanner0.scandir(improvedFile0, "dir0", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/dir0/dir0
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("E$ %j12qNYK", "E$ %j12qNYK");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E$ %j12qNYK");
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-51);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "E$ %j12qNYK";
      archiveScanner0.addDefaultExcludes();
      Vector<ObjectInputStream> vector0 = new Vector<ObjectInputStream>();
      archiveScanner0.filesExcluded = vector0;
      stringArray0[1] = "E$ %j12qNYK";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.processFile("E$ %j12qNYK");
      FileSystemHandling.shouldAllThrowIOExceptions();
      archiveScanner0.processFile("E$ %j12qNYK");
      archiveScanner0.processFile("E$ %j12qNYK");
      assertEquals(0, ArchiveScanner.FILE);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9448468679826323
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "F#pb[oRZVkXQ";
      ImprovedFile improvedFile0 = new ImprovedFile(".jar.jar");
      boolean boolean0 = DirectoryScanner.matchPatternStart("F#pb[oRZVkXQ", "F#pb[oRZVkXQ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.processDirectory(improvedFile0, string0, boolean0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner1.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setIncludes(archiveScanner1.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<Object> vector1 = new Vector<Object>();
      boolean boolean1 = false;
      String string1 = null;
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, string1, boolean1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("F#pb[oRZVkXQ");
      DirectoryScanner.matchPatternStart("", "F#pb[oRZVkXQ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.dirsExcluded = vector1;
      archiveScanner0.dirsNotIncluded = vector0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector1.forEach(consumer0);
      String[] stringArray0 = new String[3];
      vector0.add((Object) "F#pb[oRZVkXQ");
      stringArray0[0] = "Could not create temporary directory for archive: ";
      stringArray0[1] = "F#pb[oRZVkXQ";
      stringArray0[2] = "Could not create temporary directory for archive: ";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setExcludes(stringArray0);
      int int0 = ArchiveScanner.ARCHIVE;
      archiveScanner0.setIncludes(stringArray0);
      try { 
        archiveScanner0.processDirectory(improvedFile0, "Could not create temporary directory for archive: ", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/F#pb[oRZVkXQ
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".jar");
      DirectoryScanner.matchPatternStart("", "com.lts.pest.swing.PestTree.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector0;
      stringArray0[0] = "VDXOELP3.DN=D";
      stringArray0[1] = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[2] = "Culd not creatA temporary directory for archive: ";
      stringArray0[3] = "VDXOELP3.DN=D";
      stringArray0[4] = "VDXOELP3.DN=D";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setExcludes(stringArray0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.haveSlowResults;
      archiveScanner1.setIncludes(stringArray0);
      vector0.add("Culd not creatA temporary directory for archive: ");
      ArchiveScanner archiveScanner2 = new ArchiveScanner(improvedFile0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      String string0 = null;
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("com.lts.pest.swing.PestTree.jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".jar");
      DirectoryScanner.matchPatternStart("", "PG5$Do[yj");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector0;
      stringArray0[0] = "VDXOELP3.DN=D";
      stringArray0[1] = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[2] = "Could not create temporary directory for archive: ";
      stringArray0[3] = "VDXOELP3.DN=D";
      stringArray0[4] = "VDXOELP3.DN=D";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setExcludes(stringArray0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.haveSlowResults;
      archiveScanner1.setIncludes(stringArray0);
      vector0.add("Could not create temporary directory for archive: ");
      ArchiveScanner archiveScanner2 = new ArchiveScanner(improvedFile0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("VDXOELP3.DN=D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("@QC$", "@QC$");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.skip((-723L));
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      pipedInputStream1.read(byteArray0);
      pipedOutputStream0.close();
      pipedInputStream1.read(byteArray0);
      pipedInputStream0.close();
      pipedOutputStream0.flush();
      pipedOutputStream0.close();
      pipedInputStream1.read(byteArray0);
      pipedInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      pipedInputStream0.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0);
      pipedInputStream1.markSupported();
      pipedOutputStream0.write(byteArray0);
      bufferedInputStream0.markSupported();
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(dataInputStream0);
      DirectoryScanner.match("@QC$", "@QC$");
      LinkedList<InputStream> linkedList1 = new LinkedList<InputStream>();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream1);
      pushbackInputStream0.available();
      pushbackInputStream0.available();
      linkedList1.add((InputStream) pushbackInputStream0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Vector<InputStream> vector0 = new Vector<InputStream>(linkedList0);
      LinkedList<InputStream> linkedList3 = new LinkedList<InputStream>();
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream((InputStream) null);
      linkedList1.offer(bufferedInputStream3);
      linkedList3.add((InputStream) pipedInputStream0);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive(improvedFile0, "@QC$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.892246898188396
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.lts.pest.swing.PestTree/com.lts.pest.swing.PestTree");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "com.lts.pest.swing.PestTree");
      ImprovedFile improvedFile0 = new ImprovedFile("com.lts.pest.swing.PestTree");
      improvedFile0.getAbsolutePath();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[2];
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesIncluded = vector0;
      stringArray0[0] = "com.lts.pest.swing.PestTree";
      stringArray0[1] = "com.lts.pest.swing.PestTree";
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, ".tmp", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".jar.jar");
      DirectoryScanner.matchPatternStart("F#pb[oRZVkXQ", "");
      DirectoryScanner.matchPatternStart("", "F#pb[oRZVkXQ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      stringArray0[0] = "Could not create temporary directory for archive: ";
      stringArray0[1] = "F#pb[oRZVkXQ";
      stringArray0[2] = "Could not create temporary directory for archive: ";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.excludes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, ".ear");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.428860207414804
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F#pb[oRZVkXQ");
      MockFile mockFile1 = new MockFile(mockFile0, ";m;");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      mockFile1.setReadOnly();
      mockFile0.setReadable(true, true);
      MockFile mockFile2 = new MockFile("F#pb[oRZVkXQ");
      MockFile mockFile3 = new MockFile(">MS4MC-MbKF");
      mockFile1.mkdir();
      mockFile0.setReadOnly();
      mockFile3.toURI();
      mockFile2.setWritable(false);
      int int0 = archiveScanner0.toFileType(mockFile0);
      //  // Unstable assertion: assertEquals(0, int0);
      
      int int1 = archiveScanner0.toFileType(mockFile3);
      //  // Unstable assertion: assertEquals(2, int1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("l%=;JaU]ATo0te.0.jar", "l%=;JaU]ATo0te.0.jar");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Enumeration<ObjectInputStream> enumeration1 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("v$9$7=]JpzOp5", "v$9$7=]JpzOp5");
      UnaryOperator.identity();
      Vector<String> vector0 = new Vector<String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.skip((-686L));
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      pipedInputStream1.read(byteArray0);
      pipedInputStream0.close();
      pipedOutputStream0.flush();
      pipedOutputStream0.close();
      pipedInputStream1.read(byteArray0);
      pipedInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream1);
      pipedInputStream0.close();
      pipedInputStream1.mark(2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      pipedOutputStream0.write(byteArray0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0);
      pipedInputStream1.markSupported();
      pipedOutputStream0.write(byteArray0);
      ImprovedFile improvedFile1 = improvedFile0.createTempDir();
      bufferedInputStream0.markSupported();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      LinkedList<InputStream> linkedList1 = new LinkedList<InputStream>();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(pipedInputStream2);
      bufferedInputStream2.markSupported();
      linkedList1.offerLast(bufferedInputStream2);
      linkedList1.add((InputStream) bufferedInputStream1);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Vector<InputStream> vector1 = new Vector<InputStream>(linkedList1);
      linkedList1.add((InputStream) bufferedInputStream0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "v$9$7=]JpzOp5", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("@QC$");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.skip((-723L));
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      pipedInputStream1.read(byteArray0);
      pipedInputStream1.read(byteArray0);
      pipedInputStream0.close();
      pipedOutputStream0.flush();
      pipedOutputStream0.close();
      pipedInputStream0.markSupported();
      pipedInputStream1.read(byteArray0);
      pipedInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0);
      pipedInputStream1.markSupported();
      pipedOutputStream0.write(byteArray0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream1);
      linkedList0.add((InputStream) bufferedInputStream0);
      pushbackInputStream0.available();
      int int0 = new Integer(0);
      pushbackInputStream0.available();
      linkedList0.add((InputStream) pushbackInputStream0);
      linkedList0.add((InputStream) pipedInputStream1);
      linkedList0.add((InputStream) null);
      Vector<InputStream> vector0 = new Vector<InputStream>(linkedList0);
      LinkedList<InputStream> linkedList1 = new LinkedList<InputStream>();
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(bufferedInputStream2);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) null);
      int int1 = archiveScanner0.toFileType(improvedFile0);
      //  // Unstable assertion: assertEquals(2, int1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".EAR", ".EAR");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      long long0 = (-19L);
      long long1 = (-33L);
      System.setCurrentTimeMillis((-33L));
      long long2 = (-5965L);
      System.setCurrentTimeMillis((-5965L));
      improvedFile0.createTempDir();
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "ir0dl-Wh65,T/[Lr]t(", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Gp_MR7Zk1Ot");
      MockFile mockFile1 = new MockFile(mockFile0, "Gp_MR7Zk1Ot");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      mockFile1.getAbsolutePath();
      archiveScanner0.addDefaultExcludes();
      MockFile mockFile2 = new MockFile("Gp_MR7Zk1Ot", "Gp_MR7Zk1Ot");
      mockFile0.setReadOnly();
      mockFile0.deleteOnExit();
      MockFile mockFile3 = new MockFile("Gp_MR7Zk1Ot", "Gp_MR7Zk1Ot");
      MockFile mockFile4 = new MockFile("Gp_MR7Zk1Ot");
      MockFile mockFile5 = new MockFile("Gp_MR7Zk1Ot", "Gp_MR7Zk1Ot");
      mockFile3.setReadOnly();
      mockFile1.mkdir();
      mockFile3.renameTo(mockFile0);
      mockFile1.getAbsolutePath();
      URI uRI0 = mockFile3.toURI();
      MockFile mockFile6 = new MockFile("/home/ubuntu/termite/projects/78_caloriecount/Gp_MR7Zk1Ot/Gp_MR7Zk1Ot");
      MockFile mockFile7 = new MockFile(uRI0);
      mockFile3.mkdir();
      mockFile7.setWritable(false, false);
      mockFile0.mkdir();
      mockFile0.getCanonicalPath();
      MockFile mockFile8 = new MockFile(uRI0);
      mockFile0.setExecutable(false, false);
      mockFile3.mkdir();
      mockFile6.setReadOnly();
      improvedFile0.toURI();
      MockFile mockFile9 = new MockFile("createNode", "/home/ubuntu/termite/projects/78_caloriecount/Gp_MR7Zk1Ot/Gp_MR7Zk1Ot");
      mockFile8.setWritable(false);
      int int0 = archiveScanner0.toFileType(mockFile8);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F#pb[oRZVkXQ");
      MockFile mockFile1 = new MockFile(mockFile0, ";m;");
      mockFile0.setExecutable(true);
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      mockFile0.setReadable(true, true);
      ImprovedFile improvedFile1 = new ImprovedFile(">MSy4Cs-MbKF", ";m;");
      mockFile0.setReadOnly();
      File file0 = mockFile0.getCanonicalFile();
      file0.setReadable(true, false);
      MockFile mockFile2 = new MockFile(">MSy4Cs-MbKF");
      MockFile mockFile3 = new MockFile(".zip");
      mockFile1.mkdir();
      file0.setReadOnly();
      file0.toURI();
      MockFile mockFile4 = new MockFile("F#pb[oRZVkXQ", "The system has encountered a severe, internal error");
      mockFile0.mkdir();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "F#pb[oRZVkXQ";
      stringArray0[1] = "The system has encountered a severe, internal error";
      stringArray0[2] = ";m;";
      stringArray0[3] = "F#pb[oRZVkXQ";
      stringArray0[4] = ".zip";
      stringArray0[5] = "The system has encountered a severe, internal error";
      stringArray0[6] = ";m;";
      boolean boolean0 = archiveScanner0.isArchive(mockFile3);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("@QC$");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.skip((-723L));
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      pipedInputStream1.read(byteArray0);
      pipedInputStream1.read(byteArray0);
      pipedInputStream0.close();
      pipedOutputStream0.flush();
      pipedOutputStream0.close();
      pipedInputStream1.read(byteArray0);
      pipedInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0);
      pipedInputStream1.markSupported();
      pipedOutputStream0.write(byteArray0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream1);
      linkedList0.add((InputStream) bufferedInputStream0);
      archiveScanner0.haveSlowResults = true;
      pushbackInputStream0.available();
      pushbackInputStream0.read();
      pushbackInputStream0.available();
      linkedList0.add((InputStream) pushbackInputStream0);
      linkedList0.add((InputStream) pipedInputStream1);
      Vector<InputStream> vector0 = new Vector<InputStream>(linkedList0);
      LinkedList<InputStream> linkedList1 = new LinkedList<InputStream>();
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(bufferedInputStream2);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) null);
      linkedList1.add((InputStream) bufferedInputStream1);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("E$ %j12qNYAK", "E$ %j12qNYAK");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Enumeration<ObjectInputStream> enumeration1 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }
}
