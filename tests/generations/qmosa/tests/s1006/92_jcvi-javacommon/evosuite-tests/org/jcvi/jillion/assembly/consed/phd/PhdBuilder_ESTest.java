/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 21:06:47 GMT 2019
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jcvi.jillion.assembly.consed.phd.ArtificialPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdWholeReadItem;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.assembly.consed.phd.PhdBuilder;
import org.jcvi.jillion.assembly.consed.phd.PhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.PhdWholeReadItem;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannel;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannelGroup;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhdBuilder_ESTest extends PhdBuilder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      LinkedList<PhdReadTag> linkedList0 = new LinkedList<PhdReadTag>();
      Range range0 = Range.of(2567L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 2567L, 4209L);
      DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag("=`61d/s1#iG7,", "=`61d/s1#iG7,", range0, (Date) null, "fst", "=`61d/s1#iG7,");
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.FRANCE;
      locale0.getDisplayScript(locale1);
      defaultPhdReadTag0.equals(locale0);
      linkedList0.add((PhdReadTag) defaultPhdReadTag0);
      DefaultPhd defaultPhd0 = new DefaultPhd("fst", nucleotideSequence0, (QualitySequence) null, (PositionSequence) null, (Map<String, String>) null);
      defaultPhd0.getReadTags();
      defaultPhd0.equals(linkedList0);
      LinkedList<PhdReadTag> linkedList1 = new LinkedList<PhdReadTag>();
      defaultPhd0.getWholeReadItems();
      defaultPhd0.getReadTags();
      defaultPhd0.getReadTags();
      defaultPhd0.getWholeReadItems();
      defaultPhd0.getReadTags();
      defaultPhd0.getReadTags();
      defaultPhd0.getReadTags();
      defaultPhd0.getWholeReadItems();
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(defaultPhd0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      byte[] byteArray0 = new byte[5];
      short[] shortArray0 = new short[3];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      Object object0 = new Object();
      defaultChannel0.equals(object0);
      defaultChannel1.equals(object0);
      defaultChannel0.equals(defaultChannel1);
      defaultChannel1.equals(defaultChannel0);
      defaultChannel0.equals("f:3[RV45ra\bES");
      Object object1 = new Object();
      defaultChannel0.equals(object1);
      defaultChannel0.equals(defaultChannel1);
      Object object2 = new Object();
      defaultChannel0.equals(object1);
      defaultChannel1.equals(object2);
      defaultChannel1.equals(object1);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel2.equals((Object) null);
      Object object3 = new Object();
      Object object4 = new Object();
      defaultChannel0.equals(object4);
      defaultChannel2.equals("f:3[RV45ra\bES");
      DefaultChannel defaultChannel3 = new DefaultChannel(byteArray0, shortArray0);
      Object object5 = new Object();
      defaultChannel1.equals(object3);
      DefaultChannel defaultChannel4 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel3.equals(defaultChannel4);
      defaultChannel3.equals(object1);
      defaultChannel2.equals((Object) null);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel3, defaultChannel3, defaultChannel1, defaultChannel3);
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("1]2AwZ?t>_D", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.comments((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList1.add((Locale.LanguageRange) null);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList2);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0);
      LinkedList<PhdReadTag> linkedList3 = new LinkedList<PhdReadTag>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) 1093, (long) 1093);
      MockDate mockDate0 = new MockDate((-2349L));
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList4, (Collection<String>) linkedList5, locale_FilteringMode0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(list1);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag((String) null, (String) null, range0, mockDate0, (String) null, "peaks and qualities have unequal lengths");
      linkedList3.add((PhdReadTag) defaultPhdReadTag0);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("un'Z`.qUX+[\b", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.readTags(linkedList3);
      // Undeclared exception!
      try { 
        phdBuilder1.readTags((List<PhdReadTag>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      byte[] byteArray0 = new byte[5];
      short[] shortArray0 = new short[3];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      Object object0 = new Object();
      defaultChannel1.equals(object0);
      defaultChannel0.equals(defaultChannel1);
      defaultChannel1.equals(defaultChannel0);
      defaultChannel0.equals("f:3[RV45ra\bES");
      Object object1 = new Object();
      defaultChannel0.equals(object1);
      defaultChannel0.equals(defaultChannel1);
      Object object2 = new Object();
      defaultChannel0.equals(object1);
      defaultChannel1.equals(object2);
      defaultChannel1.equals(object1);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel2.equals((Object) null);
      defaultChannel2.equals(defaultChannel0);
      Object object3 = new Object();
      Object object4 = new Object();
      defaultChannel0.equals(object4);
      defaultChannel2.equals("f:3[RV45ra\bES");
      DefaultChannel defaultChannel3 = new DefaultChannel(byteArray0, shortArray0);
      Object object5 = new Object();
      defaultChannel1.equals(object3);
      DefaultChannel defaultChannel4 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel3.equals(defaultChannel4);
      defaultChannel3.equals(object1);
      defaultChannel2.equals((Object) null);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel3, defaultChannel3, defaultChannel1, defaultChannel3);
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("f:3[RV45ra\bES", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(3013, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // peak spacing must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("f:3[RV45ra\bES", nucleotideSequence0, qualitySequence0);
      byte[] byteArray0 = new byte[5];
      short[] shortArray0 = new short[3];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      Object object0 = new Object();
      defaultChannel1.equals(object0);
      defaultChannel0.equals(defaultChannel1);
      defaultChannel1.equals(defaultChannel0);
      defaultChannel0.equals("f:3[RV45ra\bES");
      Object object1 = new Object();
      defaultChannel0.equals(object1);
      defaultChannel0.equals(defaultChannel1);
      Object object2 = new Object();
      defaultChannel0.equals(object1);
      defaultChannel1.equals(object2);
      defaultChannel1.equals(object1);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel2.equals((Object) null);
      Object object3 = new Object();
      Object object4 = new Object();
      defaultChannel0.equals(object4);
      defaultChannel2.equals("f:3[RV45ra\bES");
      DefaultChannel defaultChannel3 = new DefaultChannel(byteArray0, shortArray0);
      Object object5 = new Object();
      defaultChannel1.equals(object3);
      defaultChannel2.equals(object5);
      DefaultChannel defaultChannel4 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel3.equals(defaultChannel4);
      defaultChannel3.equals(object1);
      defaultChannel2.equals((Object) null);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel3, defaultChannel3, defaultChannel1, defaultChannel3);
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks(1, 2889);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("f:3[R.45ra\bA]S", nucleotideSequence0, qualitySequence0);
      phdBuilder0.fakePeaks();
      phdBuilder0.build();
      byte[] byteArray0 = new byte[5];
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-89);
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel0.equals(defaultChannel1);
      defaultChannel0.equals("peaks and qualities have unequal lengths");
      Object object0 = new Object();
      defaultChannel0.equals(object0);
      defaultChannel0.equals(defaultChannel1);
      Object object1 = new Object();
      defaultChannel1.equals(object1);
      defaultChannel1.equals(object0);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel2.equals("&1]2Z$?>_D");
      defaultChannel1.equals((Object) null);
      defaultChannel2.equals((Object) null);
      Object object2 = new Object();
      Object object3 = new Object();
      defaultChannel0.equals(object3);
      DefaultChannel defaultChannel3 = new DefaultChannel(byteArray0, shortArray0);
      Object object4 = new Object();
      defaultChannel1.equals(object2);
      defaultChannel2.equals(object4);
      defaultChannel3.equals(object0);
      defaultChannel2.equals((Object) null);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel3, defaultChannel3, defaultChannel1, defaultChannel3);
      System.setCurrentTimeMillis((byte) (-89));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("2IpVytaeo;We.m_ar", nucleotideSequence0, qualitySequence0);
      byte[] byteArray0 = new byte[5];
      short[] shortArray0 = new short[7];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      Object object0 = new Object();
      defaultChannel1.equals(object0);
      defaultChannel0.equals(defaultChannel1);
      defaultChannel1.equals((Object) null);
      Object object1 = new Object();
      defaultChannel0.equals(defaultChannel0);
      defaultChannel0.equals(defaultChannel1);
      Object object2 = new Object();
      defaultChannel0.equals(object1);
      defaultChannel1.equals(object2);
      defaultChannel1.equals(object1);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel2.equals("2IpVytaeo;We.m_ar");
      defaultChannel0.equals(defaultChannel0);
      defaultChannel2.equals((Object) null);
      Object object3 = new Object();
      Object object4 = new Object();
      defaultChannel0.equals(object4);
      defaultChannel2.equals("2IpVytaeo;We.m_ar");
      DefaultChannel defaultChannel3 = new DefaultChannel(byteArray0, shortArray0);
      Object object5 = new Object();
      defaultChannel1.equals(object3);
      defaultChannel2.equals(object5);
      DefaultChannel defaultChannel4 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel3.equals(defaultChannel4);
      defaultChannel3.equals(object1);
      defaultChannel2.equals((Object) null);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel3, defaultChannel3, defaultChannel1, defaultChannel3);
      Phd phd0 = phdBuilder0.build();
      assertEquals("2IpVytaeo;We.m_ar", phd0.getId());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("", (NucleotideSequence) null, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sequence can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap1.put(">CIb5P)LfDD]", ">CIb5P)LfDD]");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      hashMap0.put(">CIb5P)LfDD]", ">CIb5P)LfDD]");
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap0.putAll(hashMap1);
      hashMap1.put(">CIb5P)LfDD]", "l!3('F~z=vm}c2 Gh?2G");
      hashMap0.put("xu`NL<", "l!3('F~z=vm}c2 Gh?2G");
      HashMap<Integer, Object> hashMap7 = new HashMap<Integer, Object>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      hashMap8.put("+VI0FK\"", "xu`NL<");
      hashMap8.put("YH%<<<^h[q", "IRa8Nl.Aw_");
      hashMap8.put("BnXr)`^v", (String) null);
      hashMap8.put("Wb3", "BnXer)`^v");
      hashMap8.put((String) null, (String) null);
      hashMap8.put("BnXr)`^v", (String) null);
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      ArtificialPhd artificialPhd0 = ArtificialPhd.createNewbler454Phd((String) null, nucleotideSequence0, qualitySequence0, (Map<String, String>) hashMap8);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap1.put((String) null, (String) null);
      hashMap1.put((String) null, "");
      hashMap2.put("zOFR0Vj~!U)ih", (String) null);
      hashMap1.put("N`JB", "7OkGt/kqF BRh4@");
      hashMap2.put((String) null, "");
      hashMap2.put("4/f-", "qualities can not be null");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap2.compute("", biFunction0);
      hashMap2.putAll(hashMap1);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , anyString());
      hashMap1.compute("coordinateSystem can not be null", biFunction1);
      BiFunction<Object, Object, String> biFunction2 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.merge("7OkGt/kqF BRh4@", "4/f-", biFunction2);
      hashMap1.put("7OkGt/kqF BRh4@", "coordinateSystem can not be null");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      DefaultPhd defaultPhd0 = new DefaultPhd((String) null, (NucleotideSequence) null, qualitySequence0, (PositionSequence) null);
      Map<String, String> map0 = defaultPhd0.getComments();
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      PhdBuilder phdBuilder1 = phdBuilder0.comments(map0);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap1.put("N`JB", "7OkGt/kqF BRh4@");
      HashMap<String, String> hashMap3 = new HashMap<String, String>(1834);
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      hashMap3.put((String) null, "K");
      hashMap1.put("_;1l9E(8Tb.", "N`JB");
      hashMap5.replace("N`JB", "bv490r4}Qh.,8m6X&");
      hashMap9.put("_;1l9E(8Tb.", "");
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      hashMap9.put("", (String) null);
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>(1538, 1538);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((String) null, (NucleotideSequence) null, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<DefaultPhdWholeReadItem> linkedList1 = new LinkedList<DefaultPhdWholeReadItem>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList2);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList2);
      linkedList1.add(defaultPhdWholeReadItem1);
      LinkedList<Object> linkedList3 = new LinkedList<Object>();
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("9*.", nucleotideSequence0, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualities can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Phd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // phd to copy can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<DefaultPhdWholeReadItem> linkedList1 = new LinkedList<DefaultPhdWholeReadItem>();
      linkedList1.poll();
      linkedList1.toArray();
      linkedList1.retainAll(linkedList0);
      linkedList1.remove((Object) linkedList0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList2);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      linkedList1.add((DefaultPhdWholeReadItem) null);
      linkedList1.clone();
      linkedList0.containsAll(linkedList1);
      PhdBuilder phdBuilder0 = new PhdBuilder("9*.", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.wholeReadItems(linkedList0);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder(">CIb5PE}yDD]", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap1.put(">CIb5PE}yDD]", ">CIb5PE}yDD]");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      hashMap0.put(">CIb5PE}yDD]", ">CIb5PE}yDD]");
      HashMap<String, String> hashMap6 = new HashMap<String, String>(1828);
      hashMap0.putAll(hashMap1);
      hashMap1.put(">CIb5PE}yDD]", "V3('_{tvc2iGza2G");
      hashMap0.put("xu`NL<", "V3('_{tvc2iGza2G");
      HashMap<Integer, Object> hashMap7 = new HashMap<Integer, Object>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      hashMap8.put("+VI0FK\"", "xu`NL<");
      hashMap8.put("hRE7#]ovGq>FI:`+Q", "Ira8Nl.Awa");
      hashMap8.put("Bn6;Xr)fv", (String) null);
      hashMap8.put("Wb3", "Bn6;Xr)fv");
      hashMap8.put("Bn6;Xr)fv", (String) null);
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        phdBuilder0.wholeReadItems((List<PhdWholeReadItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("f:3[RV45ra\bAES", nucleotideSequence0, qualitySequence0);
      byte[] byteArray0 = new byte[5];
      short[] shortArray0 = new short[3];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      Object object0 = new Object();
      defaultChannel1.equals(object0);
      defaultChannel0.equals(defaultChannel1);
      defaultChannel1.equals(defaultChannel0);
      defaultChannel0.equals("f:3[RV45ra\bAES");
      Object object1 = new Object();
      defaultChannel0.equals(object1);
      defaultChannel0.equals(defaultChannel1);
      Object object2 = new Object();
      defaultChannel0.equals(object1);
      defaultChannel1.equals(object2);
      defaultChannel1.equals(object1);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel2.equals("f:3[RV45ra\bAES");
      defaultChannel1.equals((Object) null);
      defaultChannel2.equals((Object) null);
      Object object3 = new Object();
      Object object4 = new Object();
      defaultChannel0.equals(object4);
      defaultChannel2.equals("f:3[RV45ra\bAES");
      DefaultChannel defaultChannel3 = new DefaultChannel(byteArray0, shortArray0);
      Object object5 = new Object();
      defaultChannel1.equals(object3);
      defaultChannel2.equals(object5);
      defaultChannel2.equals(defaultChannel3);
      defaultChannel3.equals(object1);
      defaultChannel2.equals((Object) null);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel3, defaultChannel3, defaultChannel1, defaultChannel3);
      PhdBuilder phdBuilder1 = phdBuilder0.copy();
      assertNotSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList1.add((Locale.LanguageRange) null);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList2);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0);
      LinkedList<PhdReadTag> linkedList3 = new LinkedList<PhdReadTag>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) 1093, (long) 1093);
      MockDate mockDate0 = new MockDate((-2349L));
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList4, (Collection<String>) linkedList5, locale_FilteringMode0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(list1);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag((String) null, (String) null, range0, mockDate0, (String) null, "peaks and qualities have unequal lengths");
      linkedList3.add((PhdReadTag) defaultPhdReadTag0);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("un'Z`.qUX+[\b", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks((-1007), (-1007));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList1.add((Locale.LanguageRange) null);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList2);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0);
      LinkedList<PhdReadTag> linkedList3 = new LinkedList<PhdReadTag>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) 1093, (long) 1093);
      MockDate mockDate0 = new MockDate((-2349L));
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList4, (Collection<String>) linkedList5, locale_FilteringMode0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(list1);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag((String) null, (String) null, range0, mockDate0, (String) null, "peaks and qualities have unequal lengths");
      linkedList3.add((PhdReadTag) defaultPhdReadTag0);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("un'Z`.qUX+[\b", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks((-1007), (-1007));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder(">CIb5PE}yDD]", nucleotideSequence0, qualitySequence0);
      phdBuilder0.peaks((PositionSequence) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>(1815);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap1.put(">CIb5PE}yDD]", ">CIb5PE}yDD]");
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap0.put(">CIb5PE}yDD]", ">CIb5PE}yDD]");
      HashMap<String, String> hashMap5 = new HashMap<String, String>(1815);
      hashMap0.putAll(hashMap1);
      hashMap1.put(">CIb5PE}yDD]", (String) null);
      hashMap0.put("xu`NL<", (String) null);
      HashMap<Integer, Object> hashMap6 = new HashMap<Integer, Object>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      hashMap7.put("+VI0F\"", "xu`NL<");
      hashMap7.put("ru.vg", "4~a8Nl.Aw;");
      hashMap7.put("Bn6;Xr)fv", (String) null);
      hashMap7.put("WOb3", "Bn6;Xr)fv");
      hashMap7.put((String) null, "!");
      hashMap7.put("Bn6;Xr)fv", (String) null);
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      assertTrue(hashMap13.equals((Object)hashMap5));
  }
}
