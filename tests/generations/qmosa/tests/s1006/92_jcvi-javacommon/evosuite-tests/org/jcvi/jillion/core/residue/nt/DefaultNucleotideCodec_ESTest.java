/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 20:50:27 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.335254104509809
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray0, 8);
      int int0 = (-859);
      Integer integer0 = new Integer((-859));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 8);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode((Nucleotide) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3752378774260157
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray0, 8);
      Integer integer0 = new Integer((-859));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 8);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      Nucleotide nucleotide1 = Nucleotide.Gap;
      byte[] byteArray1 = defaultNucleotideCodec1.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      defaultNucleotideCodec3.getGappedOffsetFor(byteArray1, (-405));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("NHDBWYK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.NHDBWYK
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode((byte[]) null, 24L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.178188218478882
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 8);
      assertFalse(boolean0);
      
      defaultNucleotideCodec0.iterator(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 8);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      Nucleotide nucleotide1 = Nucleotide.Gap;
      byte[] byteArray1 = defaultNucleotideCodec1.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec2.toString(byteArray0);
      assertEquals("T", string0);
      
      defaultNucleotideCodec1.getNumberOfGaps(byteArray1);
      int int0 = defaultNucleotideCodec3.getGappedOffsetFor(byteArray0, (-859));
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getGapOffsets(byteArray1);
      int int1 = defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, 1);
      assertTrue(int1 == int0);
      
      byte[] byteArray2 = new byte[9];
      defaultNucleotideCodec0.getGapOffsets(byteArray1);
      assertEquals(5, byteArray1.length);
      
      int int2 = defaultNucleotideCodec3.getNumberOfGapsUntil(byteArray2, (-859));
      assertFalse(int2 == int1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)73;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.405703329360429
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      nucleotide0.getAllPossibleAmbiguities();
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.NotCytosine;
      nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide2 = Nucleotide.Gap;
      Set<Nucleotide> set1 = nucleotide2.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, 89);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec3.toString(byteArray2);
      assertEquals("-", string0);
      
      defaultNucleotideCodec1.isGap(byteArray0, 89);
      Integer integer0 = new Integer(89);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.isGap(byteArray0, 89);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec5.getUngappedOffsetFor(byteArray2, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray2);
      assertEquals((-1), int1);
      
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      int int2 = defaultNucleotideCodec6.getGappedOffsetFor(byteArray0, 1560);
      assertTrue(int2 == int0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, int2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3778475412793196
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)14;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-695));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2203100414723047
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      nucleotide0.getAllPossibleAmbiguities();
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-128)}, byteArray0);
      
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide2 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide2.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec2.getUngappedLength(byteArray1);
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.16605140562168
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.isGap(byteArray0, 8);
      Integer integer0 = new Integer((-859));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 8);
      assertEquals(8, int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec2.toString(byteArray0);
      assertEquals("T", string0);
      
      Nucleotide nucleotide1 = Nucleotide.Gap;
      byte[] byteArray1 = defaultNucleotideCodec1.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getNumberOfGapsUntil(byteArray1, (-859));
      Integer integer1 = new Integer(0);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, 9);
      defaultNucleotideCodec5.isGap(byteArray0, 9);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec6.isGap(byteArray0, 9);
      int int1 = defaultNucleotideCodec3.getUngappedOffsetFor(byteArray1, 6);
      assertEquals(5, int1);
      
      int int2 = defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, (-1323));
      assertEquals(0, int2);
      
      long long0 = defaultNucleotideCodec1.getUngappedLength(byteArray1);
      assertEquals(0L, long0);
      assertEquals(5, byteArray1.length);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.471096777958133
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Amino;
      nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.isGap(byteArray0, 8);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, 8);
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray1);
      Nucleotide nucleotide2 = Nucleotide.Adenine;
      defaultNucleotideCodec0.encode(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-94);
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-34);
      byteArray2[4] = (byte)67;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.toString(byteArray2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)9;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-303965984));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2634055271357463
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      nucleotide0.getAllPossibleAmbiguities();
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.NotCytosine;
      nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.encode(nucleotide0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide2 = Nucleotide.Gap;
      Set<Nucleotide> set1 = nucleotide2.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 86);
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte)45;
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte)65;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = null;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec.values();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, (-1234));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-107);
      defaultNucleotideCodec0.iterator(byteArray0);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte) (-54);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-1812), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.528857151607773
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray0, 8);
      Integer integer0 = new Integer((-859));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 8);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      Nucleotide nucleotide1 = Nucleotide.Adenine;
      byte[] byteArray1 = defaultNucleotideCodec1.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      defaultNucleotideCodec1.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec3.getGappedOffsetFor(byteArray0, (-859));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.iterator(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-78);
      byteArray2[1] = (byte)6;
      byteArray2[2] = (byte) (-79);
      byteArray2[3] = (byte)1;
      defaultNucleotideCodec4.getGapOffsets(byteArray2);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec4.getNumberOfGapsUntil(byteArray0, 8);
      defaultNucleotideCodec3.isGap(byteArray1, (-1207));
      int int0 = 2765;
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.ofLength(8);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec5.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 7 ]/0B is out of range of sequence which is only [ 0 .. 6 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.300247040828731
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      nucleotide1.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 2);
      assertEquals(0, int0);
      
      Range range0 = Range.ofLength(2);
      defaultNucleotideCodec0.iterator(byteArray0, range0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)7, (byte) (-7), (byte)104, (byte)67, (byte)80}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)112}, byteArray1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.611283673204797
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Amino;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.isGap(byteArray0, 8);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray0, (-857));
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      Set<Nucleotide> set1 = nucleotide0.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, (-857));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGaps(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte) (-128);
      byteArray3[1] = (byte) (-87);
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte) (-15);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getUngappedOffsetFor(byteArray3, 418);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.getNumberOfGapsUntil(byteArray3, (byte) (-15));
      Range range0 = Range.ofLength((byte)0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray2, range0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(2489, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.4305640113911653
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray0, 8);
      Integer integer0 = new Integer((-859));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 8);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      Nucleotide nucleotide1 = Nucleotide.Adenine;
      byte[] byteArray1 = defaultNucleotideCodec1.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getNumberOfGapsUntil(byteArray0, 8);
      Integer integer1 = new Integer(14);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 9;
      defaultNucleotideCodec4.isGap(byteArray0, 9);
      defaultNucleotideCodec2.isGap(byteArray1, (-2135));
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      int int1 = 10;
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of((-390L));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec6.iterator(byteArray1, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -390 .. -390 ]/0B is out of range of sequence which is only [ 0 .. 0 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = null;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1211163152491554
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-303965984));
      assertEquals(7, int0);
      
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      int int1 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertEquals(0, int1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)7, (byte) (-7), (byte)104, (byte)67, (byte)80}, byteArray0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.185700315468096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      defaultNucleotideCodec0.isGap(byteArray0, (-1812));
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray1, (-1812));
      Integer integer0 = new Integer(803);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.getUngappedOffsetFor(byteArray2, (-859));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.174834213558677
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-108);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-23));
      byteArray0[3] = (byte)8;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(2642, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)26;
      int int0 = 8;
      Range range0 = Range.of((long) 8, (long) 8);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (byte)26);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 1845;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0587266276552683
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 520225021);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec2.toString(byteArray0);
      assertEquals("", string0);
      
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      String string1 = defaultNucleotideCodec2.toString(byteArray1);
      assertEquals("A", string1);
      
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec3.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec4.getGappedOffsetFor(byteArray1, 7);
      assertEquals(0, int1);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DefaultNucleotideCodec.valueOf("INSTANCE");
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.iterator(byteArray0);
      int int2 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, 0);
      assertTrue(int2 == int0);
      assertEquals(5, byteArray1.length);
      
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec6.isGap(byteArray0, 0);
      assertFalse(boolean0);
      
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.815301492400081
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)26;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(2073432487, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.885797234748777
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)93;
      defaultNucleotideCodec0.decode(byteArray0, (byte)7);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte) (-14);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-506));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 506;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)73;
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)96;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-4825));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.650195997410066
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)32);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-17);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1717986918);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.052128844641025
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      defaultNucleotideCodec0.encode(0, iterator0);
      byte[] byteArray0 = new byte[10];
      defaultNucleotideCodec0.isGap(byteArray0, (-1812));
      int int0 = 520225021;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 520225021);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("INSTACE", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse INSTACE into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      int int0 = 255;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int1 = 525;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-3141), (Iterator<Nucleotide>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.3194733950464252
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec1.encode((-1), iterator0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1));
      DefaultNucleotideCodec[] defaultNucleotideCodecArray0 = DefaultNucleotideCodec.values();
      assertEquals(1, defaultNucleotideCodecArray0.length);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      int int0 = 520224998;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 520224998);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.649669942596342
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 506);
      Integer integer0 = new Integer(506);
      defaultNucleotideCodec0.isGap(byteArray0, 255);
      Range range0 = Range.ofLength(1068L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 1067 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      nucleotide0.getAllPossibleAmbiguities();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-40L);
      long long1 = (-859L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)88;
      Range range0 = Range.of((long) (byte)9, (long) (byte)88);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.970114663574843
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[16];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte[] byteArray1 = new byte[9];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, 0);
      byteArray0[0] = (byte)0;
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)0);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)3;
      defaultNucleotideCodec0.decode(byteArray1, (byte)0);
      byteArray0[4] = (byte)93;
      defaultNucleotideCodec0.decode(byteArray0, (byte)0);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte) (-14);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-506));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1774707483986018
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      byte byte0 = (byte)111;
      byteArray0[1] = (byte)111;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1103);
      byteArray0[2] = (byte) (-108);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-23));
      byteArray0[3] = (byte) (-1);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Iterator<Nucleotide> iterator0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(2653, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.510780101807302
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray0, 8);
      Integer integer0 = new Integer((-859));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 8);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      Nucleotide nucleotide1 = Nucleotide.Adenine;
      byte[] byteArray1 = defaultNucleotideCodec1.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      defaultNucleotideCodec1.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec3.getGappedOffsetFor(byteArray0, (-859));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 8 corresponds to encodedIndex 8  encodedglyph length is 8
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = null;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      int int0 = 520225021;
      defaultNucleotideCodec0.toString(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, (-859));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5706696118552745
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.isGap(byteArray0, 2837);
      Integer integer0 = new Integer((byte)7);
      defaultNucleotideCodec0.isGap(byteArray0, 626);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, (-343));
      byte[] byteArray1 = null;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.getUngappedOffsetFor((byte[]) null, (byte) (-33));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.4179454785189023
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-60);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (byte)15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.146900056967584
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.isGap(byteArray0, 8);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.isGap(byteArray0, 7);
      Integer integer0 = new Integer(193);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.isGap(byteArray0, 193);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getUngappedOffsetFor(byteArray0, (-478));
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getGappedOffsetFor((byte[]) null, (-3464));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)10;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)32;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.1508293282135904
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Amino;
      nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.isGap(byteArray0, 8);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray0, (-857));
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 8);
      defaultNucleotideCodec2.toString(byteArray0);
      defaultNucleotideCodec1.isGap(byteArray0, 8);
      Integer integer0 = new Integer((-303965984));
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = null;
      int int0 = 271;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.isGap((byte[]) null, 271);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)26;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, 0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.4703448197489117
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray0, 8);
      Integer integer0 = new Integer((-859));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 8);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      Nucleotide nucleotide1 = Nucleotide.Adenine;
      byte[] byteArray1 = defaultNucleotideCodec1.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      defaultNucleotideCodec1.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec3.getGappedOffsetFor(byteArray0, (-859));
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getNumberOfGapsUntil(byteArray0, (-859));
      Integer integer1 = new Integer(0);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.isGap(byteArray0, 174395002);
      defaultNucleotideCodec4.getUngappedOffsetFor(byteArray0, (-859));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.iterator(byteArray0, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)109;
      byteArray0[0] = (byte)109;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-89);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      String string0 = "INSTACE";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("INSTACE", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse INSTACE into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      int int0 = 520225021;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 520225021);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, (Range) null);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)88;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 8L, (long) (byte)11);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.271759469228055
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      int int0 = 520224998;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 520224998);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      String string0 = "$N7TACE";
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("$N7TACE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.$N7TACE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      int int0 = new Integer(520225021);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = "I0STANCE";
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-3929L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -3929
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.052754235510318
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      int int0 = 520224998;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 520224998);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("$N7TACE", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse $N7TACE into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)72;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(1232, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-2));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("INSTACE", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse INSTACE into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.8058632507364383
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-17);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-26);
      byte byte0 = (byte)94;
      byteArray0[4] = (byte)94;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[4] = (byte)3;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-33);
      byteArray1[2] = (byte) (-33);
      byteArray1[1] = (byte) (-33);
      byteArray1[4] = (byte)82;
      byteArray1[5] = (byte) (-37);
      byteArray1[6] = (byte)120;
      byteArray1[7] = (byte) (-64);
      defaultNucleotideCodec0.getGapOffsets(byteArray1);
      byteArray0[6] = (byte)120;
      byteArray0[0] = (byte) (-118);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.198920039673785
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      nucleotide0.getAllPossibleAmbiguities();
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.NotCytosine;
      nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.encode(nucleotide0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide2 = Nucleotide.Gap;
      Set<Nucleotide> set1 = nucleotide2.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 86);
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      byte[] byteArray1 = new byte[17];
      byteArray1[1] = (byte)45;
      byte byte0 = (byte)123;
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte)65;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)20;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte)114);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 114 corresponds to encodedIndex 61  encodedglyph length is 8
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.5085427359576102
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-19);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.5257538231683174
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)73;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Predicate<Nucleotide> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Nucleotide> predicate1 = predicate0.negate();
      Nucleotide nucleotide0 = Nucleotide.Weak;
      defaultNucleotideCodec0.encode(nucleotide0);
      Predicate<Nucleotide> predicate2 = predicate1.or(predicate0);
      predicate1.or(predicate0);
      Predicate<Object> predicate3 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Nucleotide nucleotide1 = Nucleotide.Keto;
      predicate1.test(nucleotide1);
      Predicate<Nucleotide> predicate4 = predicate2.and(predicate3);
      predicate4.or(predicate0);
      linkedList0.removeIf(predicate4);
      ListIterator<Nucleotide> listIterator0 = linkedList0.listIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(5, (Iterator<Nucleotide>) listIterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.403763330235561
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)84;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.1405654533239313
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Set<Nucleotide> set2 = nucleotide1.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)2);
      int int1 = defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)29, (byte)32}, byteArray1);
      assertTrue(int1 == int0);
      
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)29, (byte)32}, byteArray2);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.valueOf("INSTANCE");
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
