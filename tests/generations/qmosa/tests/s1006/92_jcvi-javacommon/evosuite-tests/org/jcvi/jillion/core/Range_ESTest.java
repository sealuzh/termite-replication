/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 21:30:03 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=4.0461781267304815
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(2194L, 2194L);
      Range range1 = Range.of(65535L);
      range0.equals(range1);
      Range range2 = Range.of(2194L, 3480L);
      range1.equals(range0);
      Range range3 = range1.intersection(range0);
      Range range4 = Range.of(65535L);
      range4.iterator();
      Long long0 = new Long(1400L);
      Object object0 = new Object();
      range4.equals(object0);
      Range range5 = Range.of(0L);
      range3.complement(range5);
      Range range6 = Range.of((-1352L));
      List<Range> list0 = range6.complement(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range4.complementFrom(linkedList0);
      range3.equals(list0);
      Range.ofLength(65535L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1626L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=4.00346140824943
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Object object0 = new Object();
      long long0 = (-8L);
      range0.equals(range0);
      Range range2 = range1.intersection(range1);
      Range.of((-9223372036854775808L));
      Long long1 = new Long((-128L));
      range1.complement(range2);
      Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.of(0L, 0L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-304L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.860960099406945
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      range0.isSubRangeOf(range1);
      range1.equals(range0);
      range0.endsBefore(range1);
      range0.intersection(range1);
      Range.Comparators.values();
      Range.of((-1981L), 2147483647L);
      range1.asRange();
      // Undeclared exception!
      try { 
        Range.ofLength((-1981L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=4.072055646820999
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Long long0 = new Long((-152L));
      range0.equals(long0);
      range0.spliterator();
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range range1 = Range.ofLength(2147483647L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of((-3940L));
      range2.startsBefore(range1);
      Object object2 = new Object();
      range1.spliterator();
      Range.of((-21L), 127L);
      Range.ofLength(2147483647L);
      Range range3 = Range.of(2147483647L);
      range3.endsBefore(range2);
      range2.intersection(range3);
      // Undeclared exception!
      try { 
        Range.ofLength((-152L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=4.101061778910232
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Object object0 = new Object();
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      range1.equals(object0);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of((-9223372036854775808L));
      Long long0 = new Long((-9223372036854775808L));
      boolean boolean0 = range3.equals(long0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range4 = Range.of(1L);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      
      List<Range> list0 = range3.complement(range2);
      List<Range> list1 = range1.complement(range2);
      List<Range> list2 = range3.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list2.contains(range3));
      
      boolean boolean1 = range1.equals(range0);
      boolean boolean2 = range2.endsBefore(range3);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      
      Range.Comparators.values();
      List<Range> list3 = range3.complementFrom(list1);
      //  // Unstable assertion: assertEquals(0, list3.size());
      
      boolean boolean3 = range1.isSubRangeOf(range2);
      //  // Unstable assertion: assertSame(range2, range0);
      //  // Unstable assertion: assertFalse(boolean3 == boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=4.158331682248388
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483646L, 2147483646L);
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of(2147483646L);
      range1.equals(range0);
      range0.intersects(range1);
      range1.complement(range0);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(2147483646L, 2147483646L);
      range1.startsBefore(range2);
      range0.equals(range2);
      Range.CoordinateSystem.values();
      Range range3 = Range.of(1474L, 2147483646L);
      range3.getBegin(range_CoordinateSystem0);
      long long0 = (-1312L);
      Range range4 = Range.of((-1312L), 127L);
      range1.spliterator();
      range2.spliterator();
      range4.startsBefore(range1);
      range0.endsBefore(range3);
      Range range5 = Range.of(1268L);
      range5.equals(range4);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483646L, 1474L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=4.0893371696587595
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Object object0 = new Object();
      long long0 = (-8L);
      Range range2 = Range.of((-128L), (-8L));
      range2.equals(range0);
      Range range3 = range2.intersection(range1);
      Range.of((-9223372036854775808L));
      Long long1 = new Long((-128L));
      String string0 = "`}:f7l\"4gE%=`";
      range3.equals("`}:f7l\"4gE%=`");
      range1.complement(range3);
      Range.Builder range_Builder0 = new Range.Builder(range3);
      range_Builder0.expandEnd(2459L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.of(0L, 0L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-304L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3618457035673
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.111339254594211
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.ofLength(4294967314L);
      Range range1 = Range.ofLength(2147483660L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      range1.intersection(range0);
      long long0 = (-9223372036854775808L);
      Range range2 = Range.of((-9223372036854775808L));
      Range range3 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      range3.complement(range1);
      List<Range> list0 = range3.complement(range2);
      range3.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.parseRange(".7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse .7 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=4.050028708122073
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 1L);
      Object object0 = new Object();
      Range range1 = Range.of((-2147483648L));
      range1.equals(object0);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of((-9223372036854775808L));
      List<Range> list0 = range3.complement(range2);
      range3.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range3.equals((Object) null);
      Range.of(1L);
      range3.getBegin();
      Range.of((-1438L));
      long long0 = 1106L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, 1106L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.393565170792176
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder0);
      Range.Comparators.values();
      Long long0 = new Long(256L);
      Range.of(256L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3852238707301283
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(9223372036854775573L);
      range0.equals(consumer0);
      long long0 = (-32768L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775573L, (-32768L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775573 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.594030404884508
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 2147483646L;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483646L, 2147483646L);
      Long long1 = new Long(2147483646L);
      Range range1 = Range.of((long) long1);
      range1.equals(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      long long2 = 2221L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2147483646L, 2221L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.894014133326436
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.ofLength(2227L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.of(range_CoordinateSystem0, 0L, 2227L);
      Range range1 = Range.of(range_CoordinateSystem0, 127L, 9223372032559808512L);
      range1.equals((Object) null);
      range0.intersects(range1);
      range1.complement(range0);
      range1.isSubRangeOf(range0);
      Range range2 = Range.ofLength(108L);
      Object object0 = new Object();
      Object object1 = new Object();
      range2.intersects(range1);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 255L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.9472028668071895
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.ofLength(2227L);
      Range range1 = Range.of((-2639L), 2090L);
      range1.getBegin();
      range0.intersection(range1);
      Range range2 = Range.of((-2639L), (-2639L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = Range.of(9223372036854710273L);
      range3.equals(range0);
      long long0 = (-4088L);
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.391347142600739
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.ofLength(65535L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.equals((Object) null);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=4.0851910600209145
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      range0.equals("(d+)s*..s*(d+)");
      Range range1 = Range.of(4294967295L);
      range0.complement(range1);
      List<Range> list0 = range0.split(4294967295L);
      List<Range> list1 = range0.complementFrom(list0);
      assertFalse(list1.contains(range0));
      
      Range range2 = Range.ofLength(9223372036854771566L);
      String string0 = range1.toString();
      assertEquals("[ 4294967295 .. 4294967295 ]/0B", string0);
      
      range1.intersects(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.equals(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem0);
      range2.equals(range2);
      Range range3 = Range.ofLength(9223372036854710273L);
      range1.intersection(range0);
      Range range4 = Range.ofLength(0L);
      assertTrue(range4.isEmpty());
      
      range1.isSubRangeOf(range0);
      Range range5 = range1.intersection(range3);
      assertFalse(range5.isEmpty());
      assertSame(range5, range1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.9876239479935847
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(2147483646L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range range1 = Range.ofLength(2147483646L);
      range1.equals(range0);
      range0.intersects(range1);
      range1.complement(range0);
      range0.isSubRangeOf(range1);
      Range.of(127L);
      Long long0 = new Long((-2213L));
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483646L, 4093L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.8413306864285057
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483646L, 2147483646L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range range1 = Range.of(range_CoordinateSystem0, 4093L, 2147483646L);
      range1.equals(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals((Object) null);
      Range.ofLength(2147483645L);
      Range.ofLength(871L);
      Range.of((-1642L), 2147483646L);
      // Undeclared exception!
      try { 
        Range.of(2039L, (-1642L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=4.049128170226481
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 1L);
      Object object0 = new Object();
      Range range1 = Range.of((-2147483648L));
      range1.equals(object0);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of((-9223372036854775808L));
      List<Range> list0 = range3.complement(range2);
      range1.complement(range2);
      range3.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 65535L, (-9223372036854775808L));
      range1.complement(range2);
      range2.asRange();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-9223372036854775808L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=4.024596484811533
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L), 2227L);
      Object object0 = new Object();
      Range range1 = Range.of((-1L), 2227L);
      Long long1 = new Long(2227L);
      range1.equals((Object) null);
      Range range2 = range0.intersection(range1);
      range2.equals("unable to mkdir for ");
      range1.complement(range2);
      range2.complement(range2);
      Range.Builder range_Builder0 = new Range.Builder(7575L);
      Range.Builder range_Builder1 = new Range.Builder(range1);
      Range.Builder range_Builder2 = new Range.Builder(0L);
      Range.Builder range_Builder3 = new Range.Builder(1221L);
      range_Builder3.build();
      Range.Comparators.values();
      Range.Builder range_Builder4 = new Range.Builder(2227L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      range_Builder1.expandEnd((-2570L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.ofLength((-1134L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2937460519804915
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L));
      long long1 = (-3687L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.768373882572165
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(4294967314L);
      Range.ofLength(2147483647L);
      Object object0 = new Object();
      Range.of(4294967314L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-286L), 2147483647L);
      range0.isSubRangeOf(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-286L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.626847402214575
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-795L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals((-794L), long0);
      
      Range.of(range_CoordinateSystem0, (-795L), 2147483647L);
      Range range1 = Range.of((-4136L), (-795L));
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.865913728256773
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-297L), 2147483646L);
      Range range1 = Range.ofLength(2147483647L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(127L, (-297L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.5298746671405086
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 1L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      // Undeclared exception!
      try { 
        Range.ofLength((-2820L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.82597980823581
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      range0.equals("(d+)s*..s*(d+)");
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range range2 = Range.ofLength(9223372036854771566L);
      range0.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        range2.split(9223372036854771566L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -8485 would make range [9223372036854771566 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.947119458089991
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      Range range2 = Range.of(4294967295L, 9223372036854775807L);
      range2.isSubRangeOf(range0);
      range2.equals(range1);
      range0.endsBefore(range2);
      range0.intersection(range2);
      Range.Comparators.values();
      long long0 = 1720L;
      Range range3 = Range.of(1720L, 2147483647L);
      Range range4 = range2.asRange();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range4.forEach(consumer0);
      long long1 = 653L;
      Range.ofLength(653L);
      Range range5 = Range.ofLength(2147483647L);
      range5.endsBefore(range3);
      // Undeclared exception!
      try { 
        Range.ofLength((-1981L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.711684224501108
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1201L, 1201L);
      range0.equals("(d+)s*..s*(d+)");
      long long0 = 2312L;
      long long1 = (-3090L);
      Range.of((-3090L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-3090L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.847546711715549
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1201L, 1201L);
      range0.isEmpty();
      range0.intersects(range1);
      Range range2 = range1.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.ofLength(4294967295L);
      range2.complement(range3);
      Long long0 = new Long(1201L);
      Range.of(1201L, 1201L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.7043375047390334
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L);
      range1.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 258L;
      Range range2 = Range.of(range_CoordinateSystem0, 258L, 4294967295L);
      Range.of(258L, 2147483647L);
      Range range3 = Range.of(4294967295L);
      range2.isSubRangeOf(range3);
      range1.equals(range0);
      Range range4 = null;
      // Undeclared exception!
      try { 
        range1.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.990799563236863
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(255L);
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.complement(range0);
      Range range2 = Range.of(range_CoordinateSystem0, 255L, 65535L);
      Range range3 = Range.ofLength(255L);
      long long0 = (-1789L);
      Range range4 = Range.of((-1789L), 255L);
      range2.isSubRangeOf(range4);
      range1.equals(range3);
      range2.endsBefore(range3);
      range1.intersection(range3);
      Range.Comparators.values();
      Range.of(255L, 255L);
      range1.asRange();
      long long1 = 1622L;
      // Undeclared exception!
      try { 
        Range.ofLength((-1789L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=4.022520232876785
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(255L);
      range1.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.complement(range0);
      Range range2 = Range.of(range_CoordinateSystem0, 255L, 65535L);
      Range range3 = Range.ofLength(255L);
      Range range4 = Range.of((-1789L), 255L);
      range2.isSubRangeOf(range4);
      range1.equals(range3);
      range2.endsBefore(range3);
      range1.intersection(range3);
      Range.Comparators.values();
      long long0 = 255L;
      long long1 = (-1981L);
      Range.of((-1981L), 1419L);
      range4.asRange();
      // Undeclared exception!
      try { 
        Range.ofLength((-1129L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.3790713749126535
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Long long0 = new Long((-128L));
      Long long1 = new Long(2147483647L);
      range0.equals((Object) null);
      long long2 = (-2503L);
      Range.of(9223372036854775807L);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-394L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=4.166901902480361
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.ofLength(4561L);
      boolean boolean0 = range0.equals((Object) null);
      Range range1 = Range.of(1567L, 4561L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of((-32768L));
      Long long0 = new Long(4294967295L);
      boolean boolean1 = range3.equals(range0);
      Range range4 = Range.of(1574L);
      List<Range> list0 = range0.complement(range2);
      List<Range> list1 = range3.complement(range0);
      List<Range> list2 = range4.complementFrom(list0);
      assertTrue(list2.equals((Object)list0));
      assertEquals(1, list0.size());
      
      boolean boolean2 = range1.equals(list1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = range2.endsBefore(range1);
      assertTrue(boolean3 == boolean1);
      
      Range.Comparators.values();
      range2.complementFrom(list1);
      assertNotSame(range2, range1);
      
      boolean boolean4 = range0.isSubRangeOf(range3);
      assertFalse(range3.isEmpty());
      assertFalse(boolean4);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=4.16630992610834
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 2147483646L;
      Range range0 = Range.ofLength(2147483646L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      long long1 = 3459L;
      Range range1 = Range.of(range_CoordinateSystem0, 3459L, 2147483646L);
      range1.equals(range0);
      range0.intersects(range1);
      range1.complement(range0);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(127L);
      long long2 = (-2213L);
      Long long3 = new Long((-2213L));
      Long long4 = Long.getLong("AzqP56*@y$0", long3);
      range2.equals(long4);
      Range.CoordinateSystem.values();
      Range.of((-2213L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 76L, (-2213L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=4.133144051907849
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1926L), 4294967295L);
      Range range1 = Range.of(32767L);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      Range.of(range_CoordinateSystem0, 9989L, 32767L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("5u&Bq&VQ&}`Y'$6AXeE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.5u&Bq&VQ&}`Y'$6AXeE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.7669182219232638
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 110L);
      Range.ofLength(110L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-2152L);
      Range.of(range_CoordinateSystem1, (-2152L), (-2152L));
      Range.of((-1245L));
      long long1 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder((-1129L), 32767L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = 1413L;
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(range_CoordinateSystem2, 1413L, (-1129L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.8199036126437904
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      range0.equals("(d+)s*..s*(d+)");
      Range range1 = Range.of(4294967295L);
      range1.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 258L, 4294967295L);
      range0.equals((Object) null);
      Range.of(2312L);
      Range.Builder range_Builder0 = new Range.Builder(2312L);
      Range.Builder range_Builder1 = new Range.Builder(2312L, 2312L);
      range_Builder1.copy();
      range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.expandEnd((-2629L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.ofLength((-1686L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.6020317784906477
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.of(4294967295L);
      Range range0 = Range.of(4294967295L, 4294967295L);
      long long0 = (-1137L);
      Long long1 = new Long((-1137L));
      Long long2 = new Long(648L);
      range0.equals(long2);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 648L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.9202537644349613
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(2227L);
      Range range1 = Range.ofLength(2090L);
      Object object0 = new Object();
      Range range2 = Range.of(2227L, 9223372036854774334L);
      range0.endsBefore(range1);
      boolean boolean0 = range1.isSubRangeOf(range0);
      boolean boolean1 = range2.equals(range0);
      assertFalse(boolean1 == boolean0);
      
      range1.endsBefore(range1);
      Range range3 = range1.intersection(range0);
      Range range4 = Range.ofLength(4034L);
      Long long0 = new Long(343L);
      range4.equals(long0);
      Range.Comparators.values();
      Range.Comparators.values();
      List<Range> list0 = range2.complement(range1);
      assertTrue(list0.contains(range2));
      assertFalse(range2.isEmpty());
      assertSame(range1, range3);
      
      Range range5 = Range.ofLength(343L);
      assertNotSame(range5, range4);
      
      Range range6 = Range.ofLength(9223372036854775807L);
      assertFalse(range6.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 21L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.924454256687671
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      Range range2 = Range.of(4294967295L, 9223372036854775807L);
      range2.isSubRangeOf(range0);
      Range.Builder range_Builder0 = new Range.Builder(1828L);
      range_Builder0.build();
      Range.Comparators.values();
      Range.Builder range_Builder1 = range_Builder0.shift(826L);
      Range.Builder range_Builder2 = new Range.Builder(4294967295L);
      range_Builder0.shift((-1405L));
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder1.expandEnd(3457L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.ofLength(1929L);
      range2.complement(range1);
      Long long0 = new Long(176L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854774080L, (-194L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.5575589426786047
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(2227L);
      Range range1 = Range.ofLength(2227L);
      range0.intersection(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = Range.of(9223372036854710273L);
      range2.equals(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-4088L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.4298605666884656
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(2696L);
      assertFalse(range1.isEmpty());
      
      range_Builder0.build();
      boolean boolean0 = range0.intersects(range0);
      assertFalse(boolean0);
      
      Range.Comparators.values();
      Range range2 = range_Builder0.build();
      assertSame(range2, range0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=4.0218684194636545
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.ofLength(4294967314L);
      Long long0 = new Long(4294967314L);
      range0.equals((Object) null);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967314L, 4294967314L);
      range0.equals("");
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(2867L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder1.contractBegin(1105L);
      Range.Builder range_Builder4 = new Range.Builder(2867L);
      Range.Builder range_Builder5 = new Range.Builder(1999L);
      range1.complement(range0);
      range0.intersection(range1);
      Range.Builder range_Builder6 = new Range.Builder();
      range_Builder6.build();
      Range.Builder range_Builder7 = new Range.Builder(range_Builder6);
      range_Builder3.expandEnd(2867L);
      Range.of(255L);
      Long long1 = new Long(1105L);
      range1.intersection(range0);
      Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.812620461340721
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long long0 = 4294967314L;
      Range range0 = Range.ofLength(4294967314L);
      long long1 = 2147483660L;
      Range range1 = Range.ofLength(2147483660L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object0);
      Range range2 = Range.ofLength(4294967314L);
      range2.isSubRangeOf(range1);
      long long2 = (-3940L);
      Range range3 = Range.of((-128L));
      range0.startsBefore(range1);
      Object object4 = new Object();
      range3.spliterator();
      // Undeclared exception!
      try { 
        Range.of(4294967314L, (-3940L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.77779486331063
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      range0.equals(range_CoordinateSystem0);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(4294967295L);
      long long0 = (-899L);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-899L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.9712678450484744
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-32768L), (-32768L));
      range1.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of((-32768L));
      List<Range> list0 = range2.complement(range3);
      range0.complementFrom(list0);
      Range.of(range_CoordinateSystem0, 2424L, 2424L);
      Range.of(2424L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("unable to mkdir for ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.unable to mkdir for 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.9503100612477753
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of(2227L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 258L, 258L);
      range1.getLength();
      Range range2 = Range.of(1329L);
      range2.isSubRangeOf(range1);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775553L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandEnd(9223372034707292161L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.ofLength(1200L);
      range1.complement(range2);
      Long long0 = new Long(0L);
      range1.intersection(range3);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("&hNUy(?1%wYZyYBg(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.&hNUy(?1%wYZyYBg(
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 295L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 295L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.3284675066821325
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(4561L);
      range_Builder0.contractBegin(0L);
      range_Builder0.build();
      range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(4561L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-128L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -129 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.3968013958292134
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.710721101924456
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.of((-2147483648L), 1L);
      Range.ofLength(127L);
      Object object0 = new Object();
      long long1 = 9223372036854775807L;
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.780659447854742
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = 2227L;
      Range range0 = Range.ofLength(2227L);
      Range range1 = Range.of((-2639L), 2227L);
      Range range2 = range0.intersection(range1);
      Range.of((-2639L), (-2639L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 4574L;
      Range.of(range_CoordinateSystem0, 4574L, 2147483647L);
      Range range3 = null;
      // Undeclared exception!
      try { 
        range2.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=4.038454502077347
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(255L);
      range0.complement(range1);
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range2.complement(range1);
      Range.of((-1L));
      range1.complement(range0);
      range1.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list0.isEmpty());
      
      List<Range> list1 = range0.complement(range2);
      //  // Unstable assertion: assertEquals(2, list1.size());
      
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 256 .. 256 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.parseRange("[ 256 .. 256 ]/RB", range_CoordinateSystem1);
      //  // Unstable assertion: assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.945462070776015
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.of((-32768L));
      Range range0 = Range.of(2195L, 2195L);
      Range range1 = Range.of(65535L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      Range.of(65535L);
      Range range3 = Range.of(65535L);
      Range range4 = Range.of(65535L);
      range3.equals(range4);
      assertFalse(range4.isEmpty());
      
      Range range5 = Range.ofLength(65535L);
      assertFalse(range5.isEmpty());
      
      Range range6 = Range.ofLength(9223372036854775550L);
      assertFalse(range6.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.5292120912433798
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.ofLength(2227L);
      long long0 = 2090L;
      Range range1 = Range.ofLength(2090L);
      Object object0 = new Object();
      long long1 = 9223372036854774334L;
      Range.of(2227L, 9223372036854774334L);
      range0.endsBefore(range1);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1364L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=4.103557908032434
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      long long0 = (-288L);
      Range range1 = Range.of((-288L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-288L), 65535L);
      range2.isSubRangeOf(range3);
      Range.of(65280L, 65535L);
      Object object0 = new Object();
      Object object1 = new Object();
      long long1 = (-2535L);
      Range.of((-2535L), 65280L);
      Object object2 = new Object();
      range3.equals(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      Range.of((-743L), (-743L));
      Range.of((-743L), 110L);
      range1.spliterator();
      // Undeclared exception!
      try { 
        range3.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.6621520750476657
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 258L, 4294967295L);
      Long long0 = new Long(4294967295L);
      range0.isSubRangeOf(range1);
      long long1 = 2312L;
      Range.Builder range_Builder0 = new Range.Builder(2312L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long2 = (-4065L);
      range_Builder1.expandEnd((-4065L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(258L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-4065L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.596152607077001
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(4294967273L, 4294967273L);
      range0.spliterator();
      Long long0 = new Long(4294967273L);
      range0.isSubRangeOf(range0);
      long long1 = 2312L;
      Range.Builder range_Builder0 = new Range.Builder(2312L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long2 = (-4065L);
      range_Builder1.expandEnd((-4065L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(258L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-4065L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.7174851805946303
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(4294967314L);
      long long0 = 2147483647L;
      Range range1 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      long long1 = 9223372036854775807L;
      Range range2 = Range.of(4294967314L, 9223372036854775807L);
      range0.endsBefore(range2);
      range2.intersects(range1);
      range1.intersects(range2);
      range0.endsBefore(range2);
      range0.intersection(range2);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=4.045232917401473
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.spliterator();
      Range range1 = Range.of(range_CoordinateSystem0, 65535L, 9223372036854775807L);
      List<Range> list0 = range1.complement(range1);
      //  // Unstable assertion: assertTrue(list0.isEmpty());
      
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertSame(range2, range0);
      
      Range.of(range_CoordinateSystem0, (-5275L), (-1095L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.ofLength(1L);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      
      Range range4 = Range.of(9223372036854775807L);
      List<Range> list1 = range4.complement(range1);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertFalse(list1.contains(range4));
      
      Long long0 = new Long((-5275L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, (-818L), 2568L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      //  // Unstable assertion: assertEquals(4, range_ComparatorsArray0.length);
      
      Range range5 = Range.ofLength(32767L);
      //  // Unstable assertion: assertNotSame(range5, range3);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.893267331247292
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(4561L);
      range_Builder0.contractBegin(0L);
      range_Builder0.build();
      range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(4561L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-76L), 4294967295L);
      Range range1 = Range.of(4294967295L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range.Comparators.values();
      Range range3 = range_Builder0.build();
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.9541381245078706
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = 65535L;
      Range range0 = Range.of(65535L, 65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.spliterator();
      Range range1 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(7575L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.of((-1725L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.contractBegin(7575L);
      Range.Builder range_Builder3 = new Range.Builder(65535L);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-899L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.784303895668072
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of((-1L), 2227L);
      Object object0 = new Object();
      Range range1 = Range.of(2227L);
      range0.intersection(range1);
      Range.of((-1L), 2227L);
      Long long0 = new Long(2227L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      range0.equals(range_Builder1);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(2147483647L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.4998153583910803
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = 2217L;
      Range.of((-1L), 2217L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range range0 = Range.of((-1L), 2217L);
      Long long1 = new Long(2217L);
      Range range1 = Range.of((-2503L));
      range0.equals(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2503L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.5487197494420064
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.ofLength(91L);
      Range range1 = Range.ofLength(85L);
      Range range2 = range1.intersection(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of(2147483647L);
      range2.equals(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-2639L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.5105649730738673
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1L);
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.isEmpty();
      range0.toString(range_CoordinateSystem0);
      range0.spliterator();
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.equals(range1);
      range_CoordinateSystem0.toString();
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("X>x)_m~!9`c(CGH<", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse X>x)_m~!9`c(CGH< into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=4.015179353085551
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Object object0 = new Object();
      long long0 = (-8L);
      range1.equals(range0);
      Range range2 = range0.intersection(range1);
      Range.of((-9223372036854775808L));
      Long long1 = new Long((-128L));
      String string0 = "`}:f7l\"4gE%=`";
      range2.equals("`}:f7l\"4gE%=`");
      range1.complement(range2);
      Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.of(0L, 0L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-304L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.83317824389865
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = 65535L;
      Range range0 = Range.of(65535L, 65535L);
      Long long1 = new Long(65535L);
      range0.equals(long1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.spliterator();
      Range range1 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range1.equals(long1);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(7575L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.contractBegin(7575L);
      Range.Builder range_Builder3 = new Range.Builder(65535L);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-899L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.29339539986801
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.ofLength(4294967314L);
      long long0 = 2147483660L;
      Range range0 = Range.ofLength(2147483660L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object0);
      long long1 = (-144L);
      // Undeclared exception!
      try { 
        Range.ofLength((-144L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.702318659425058
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of((-1L));
      range0.startsBefore(range1);
      range1.endsBefore(range0);
      Range.of(range_CoordinateSystem0, (-1L), (-1L));
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.4424839413558903
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(2194L, 2194L);
      long long0 = 65535L;
      Range range1 = Range.of(65535L);
      range0.equals(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(3480L, 2127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.4586300385810778
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = 65535L;
      Range range0 = Range.of(65535L, 65535L);
      long long1 = 9223372036854775807L;
      range0.spliterator();
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 9223372036854775807L, 65535L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.610883314438375
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-17L), 4294967295L);
      Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      assertSame(range_CoordinateSystem1, range_CoordinateSystem0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.0719074572815157
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals((-1L), long0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.577830610677388
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(2227L);
      Range range1 = Range.ofLength(2227L);
      range0.intersection(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of(9223372036854710273L);
      Range.ofLength(9223372036854710273L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1626L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.237141881780156
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-2313L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.6286043672347024
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.of((-32768L));
      long long0 = 2195L;
      Range.of(2195L, 2195L);
      Range.of(65535L);
      long long1 = 2127L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(3480L, 2127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.209605773232386
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 8589934589L, 8589934589L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.792645160660982
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2147483647L);
      Range range1 = Range.of((-795L));
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
      
      boolean boolean0 = range2.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.900074039746917
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of(2195L, 2195L);
      Range range2 = Range.of(65535L);
      Range range3 = range0.intersection(range2);
      Range range4 = Range.of(2195L);
      List<Range> list0 = range3.complement(range4);
      range0.complementFrom(list0);
      List<Range> list1 = range4.complement(range3);
      assertTrue(list1.contains(range1));
      assertTrue(range3.isEmpty());
      
      range4.asRange();
      Range range5 = range2.asRange();
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.74560571476673
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = 65535L;
      String string0 = "(\\d+)\\s*\\.\\.\\s*(\\d+)";
      Range range0 = Range.ofLength(65535L);
      Long long1 = new Long(65535L);
      range0.equals(long1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.spliterator();
      Range range1 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range1.equals(long1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.toString();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range1.isSubRangeOf(range0);
      range1.startsBefore(range0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem3);
      // Undeclared exception!
      try { 
        Range.parseRange("(d+)s*..s*(d+)", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse (d+)s*..s*(d+) into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=4.022558151146334
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1926L), 4294967295L);
      Range range1 = Range.ofLength(1L);
      Object object0 = new Object();
      range0.complement(range1);
      range0.split(4294967295L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.4675825537773846
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(4242L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-3687L);
      long long1 = 1L;
      range0.split(1L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("O( ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.O( 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.8577532072155223
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(255L);
      range0.complement(range1);
      range0.split(1765L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.623593343495939
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 2147483646L, 2147483646L);
      Range.ofLength(2147483646L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(0L);
      Range.ofLength(9223372036854710273L);
      // Undeclared exception!
      try { 
        Range.ofLength((-4088L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.497068386063186
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(2195L, 2195L);
      Range range1 = Range.of(2195L);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
      
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(65529L);
      Range range2 = range_Builder0.build();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.9725418941131454
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of(2195L, 2195L);
      Range range2 = Range.of(65535L);
      Range range3 = range0.intersection(range2);
      Range range4 = Range.of(2195L);
      range0.iterator();
      List<Range> list0 = range3.complement(range4);
      range0.complementFrom(list0);
      assertTrue(range3.isEmpty());
      
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range range5 = range_Builder0.build();
      assertSame(range5, range2);
      assertFalse(range5.isEmpty());
      assertNotSame(range5, range1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.0840133560770506
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(4294967277L);
      range0.getLength();
      Long long0 = new Long(1L);
      Range.Comparators.values();
      String string0 = "&hNUy(?1%wYZyYBg(";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("&hNUy(?1%wYZyYBg(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.&hNUy(?1%wYZyYBg(
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.7774954579955673
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 3663L);
      Range range1 = Range.of(3663L, 3663L);
      range0.startsBefore(range1);
      Range.of(3663L);
      Range range2 = range0.intersection(range1);
      range0.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("inputstream can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.inputstream can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.7433689559969467
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      long long0 = 9223372036854775807L;
      Range range2 = Range.of(4294967295L, 9223372036854775807L);
      range2.isSubRangeOf(range0);
      range2.equals(range1);
      range2.toString();
      range0.endsBefore(range2);
      range0.intersection(range2);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.5358912279378782
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4561L, 4561L);
      Range range0 = range_Builder0.build();
      range_Builder0.contractEnd((-1828L));
      range_Builder0.contractBegin((-1828L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(")#!5TGRE,;Uv%^,XH$", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse )#!5TGRE,;Uv%^,XH$ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.810975410032937
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(4294967276L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range1.spliterator();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      long long0 = (-899L);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-899L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.5135349072453015
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = 2227L;
      Range range0 = Range.ofLength(2227L);
      Range range1 = Range.ofLength(2227L);
      Range range2 = range0.intersection(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long1 = 9223372036854710273L;
      Range.of(9223372036854710273L);
      range2.isEmpty();
      // Undeclared exception!
      try { 
        Range.ofLength((-2639L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.8366052942814153
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-609L), (-609L));
      range0.isSubRangeOf(range1);
      range2.startsBefore(range0);
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range2.getBegin(range_CoordinateSystem1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range1.forEach(consumer0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.278215254381127
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-1084L));
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(32756L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.9397407234585993
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      long long0 = 9223372036854775807L;
      Range range1 = Range.ofLength(9223372036854775554L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.spliterator();
      Range range2 = Range.of(range_CoordinateSystem0, 65535L, 9223372036854775807L);
      range2.complement(range2);
      range2.intersection(range0);
      long long1 = (-5275L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range.ofLength(65535L);
      // Undeclared exception!
      try { 
        Range.of(65535L, (-1095L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.4863140404228057
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2147483647L);
      Range range1 = Range.of(range_CoordinateSystem0, 2464L, 2464L);
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.9981872362258155
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range range0 = range_Builder0.build();
      range0.getBegin();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.807212970002276
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      long long0 = 9223372036854775807L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.spliterator();
      Range range1 = Range.of(range_CoordinateSystem0, 65535L, 9223372036854775807L);
      range1.getBegin();
      range1.complement(range1);
      range1.intersection(range0);
      long long1 = (-5275L);
      // Undeclared exception!
      try { 
        Range.of(65535L, (-1095L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.855590615382276
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(255L);
      range0.complement(range1);
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range2.complement(range1);
      range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(0, list1.size());
      
      List<Range> list2 = range0.complement(range2);
      assertEquals(2, list2.size());
      
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertSame(range1, range2);
      assertEquals("[ 256 .. 256 ]/RB", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.2995793963713953
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4561L, 4561L);
      Range range0 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(4562L, long0);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.3465703291436633
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 4294967310L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      assertEquals(Range.CoordinateSystem.ZERO_BASED, range_CoordinateSystem1);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=4.094084539240669
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 1L);
      Object object0 = new Object();
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      range1.equals(object0);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of((-9223372036854775808L));
      Long long0 = new Long((-9223372036854775808L));
      range3.equals(long0);
      Range range4 = Range.of(1L);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      
      List<Range> list0 = range3.complement(range2);
      List<Range> list1 = range1.complement(range2);
      List<Range> list2 = range3.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list2.contains(range3));
      
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      range2.endsBefore(range3);
      Range.Comparators.values();
      range3.complementFrom(list1);
      //  // Unstable assertion: assertTrue(list1.isEmpty());
      
      boolean boolean1 = range1.isSubRangeOf(range2);
      //  // Unstable assertion: assertSame(range2, range1);
      //  // Unstable assertion: assertTrue(boolean1);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.7432561096935566
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of(2784L);
      range1.startsBefore(range0);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.327295459635187
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long long0 = (-2639L);
      long long1 = 9223372036854775807L;
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2090L, 1326L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.140241613234836
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2224L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1243L, 1243L);
      range_Builder0.copy();
      range_Builder0.copy();
      range_Builder0.expandEnd((-2051L));
      Range.Builder range_Builder1 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.1773406515167744
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.split(2091L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("-nable to mHdirs for ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.-nable to mHdirs for 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.445049519655863
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(4294967310L);
      List<Range> list0 = range0.split(4294967310L);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=4.038232349722298
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Object object0 = new Object();
      Range range2 = Range.of((-128L), 1L);
      Range range3 = range2.intersection(range1);
      Range.of((-9223372036854775808L));
      Long long0 = new Long((-128L));
      Range range4 = Range.of(1L);
      assertFalse(range4.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(range3);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(1L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder2.expandEnd(2264L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range0.getLength();
      assertEquals(1L, long1);
      
      List<Range> list0 = range3.complement(range1);
      assertTrue(list0.isEmpty());
      
      Long long2 = new Long((-2147483648L));
      Range.ofLength(1L);
      Range.Comparators.values();
      Range.Comparators.values();
      range_Builder3.build();
      assertNotSame(range3, range2);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.240804857920011
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4561L, 4561L);
      Range range0 = range_Builder0.build();
      range0.getLength();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.7472446150497287
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(107L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(107L, 107L);
      boolean boolean0 = range1.intersects(range0);
      assertTrue(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      assertEquals(0, list0.size());
      
      range1.complement(range0);
      range1.asRange();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=4.033457356787803
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.ofLength(2227L);
      Range range1 = Range.of((-2639L), 2090L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(264L, 1282L);
      boolean boolean0 = range3.intersects(range1);
      assertTrue(boolean0);
      
      List<Range> list0 = range2.complement(range0);
      range0.complementFrom(list0);
      assertEquals(0, list0.size());
      
      List<Range> list1 = range2.complement(range3);
      assertEquals(2, list1.size());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.815490920069877
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L));
      range1.complement(range0);
      range1.split(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("(d+)s*-s*(d+)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.(d+)s*-s*(d+)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.953991497565954
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(255L);
      range0.complement(range1);
      Range range2 = range0.intersection(range1);
      range2.complement(range1);
      range1.complement(range0);
      Range range3 = Range.ofLength(65535L);
      Long long0 = new Long(255L);
      Range.of((-1433L));
      range3.intersection(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(2784L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.403368586825856
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.of((-2147483648L), 1L);
      Object object0 = new Object();
      long long0 = 2127L;
      long long1 = (-1534L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2204L, (-1534L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.932670654943244
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 2147483646L;
      long long1 = 2147483646L;
      Range range0 = Range.of((-1285L), 2147483646L);
      range0.spliterator();
      Range range1 = Range.of(1444L);
      range1.complement(range0);
      range1.intersection(range0);
      long long2 = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-9223372036854775808L), 2147483646L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.5315639635683764
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1227L, 1227L);
      range_Builder0.copy();
      range_Builder0.copy();
      range_Builder0.expandEnd((-2051L));
      // Undeclared exception!
      try { 
        range_Builder0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.Comparators.values();
      Range.of((-61L), (-61L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("CK`vIEWB%[8~)l}Zv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.CK`vIEWB%[8~)l}Zv
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.3582217310091407
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2400L), 4294967297L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.312014758986618
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.ofLength(65535L);
      Range range0 = Range.of(1765L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range0.split((-2741L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.682342584284411
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "(\\d+)\\s*\\.\\.\\s*(\\d+)";
      Range.of(4294967295L);
      Range.of(4294967295L);
      Range.of(4294967295L, 4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of((-32768L), (-2973L));
      Object object2 = new Object();
      Range.CoordinateSystem.values();
      Range.of(1474L);
      // Undeclared exception!
      try { 
        Range.of((-2L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=4.095236017103797
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 1L);
      Object object0 = new Object();
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of((-9223372036854775808L));
      range3.complement(range2);
      range1.complement(range2);
      Range.ofLength(1L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 1583L);
      range_Builder0.expandBegin(328L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(1583L);
      Range.Builder range_Builder2 = range_Builder0.shift(1L);
      assertSame(range_Builder2, range_Builder1);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.0742259876899336
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertSame(range0, range1);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.3745372712226818
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd(5218L);
      String string0 = "; \"mil}MUca`)js";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("bitLength must be >=0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.bitLength must be >=0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.4554253544515077
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of((-1368L));
      Range range1 = Range.of((-1368L));
      range1.startsBefore(range0);
      range1.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 9977L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, 9977L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.446929360245381
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 3663L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2064L);
      range1.intersection(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.3785894747345586
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Object object0 = new Object();
      range1.endsBefore(range0);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372036854775804L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=4.085673519109692
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.ofLength(2227L);
      Range range1 = Range.of((-2639L), 2090L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of((-2639L), (-2639L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Range range4 = Range.of(1415L, 1415L);
      range2.startsBefore(range0);
      range4.endsBefore(range3);
      Range range5 = Range.of(2090L);
      range5.intersection(range3);
      range3.isSubRangeOf(range5);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("3#9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.3#9
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.9612688001437535
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = range0.intersection(range0);
      Range range2 = Range.of(2195L);
      List<Range> list0 = range1.complement(range2);
      List<Range> list1 = range0.complementFrom(list0);
      Range.of(2195L);
      List<Range> list2 = range2.complement(range1);
      range2.intersection(range0);
      Range.Comparators.values();
      Range.Comparators.values();
      List<Range> list3 = range0.complementFrom(list1);
      assertFalse(range2.isEmpty());
      assertFalse(list3.equals((Object)list2));
      assertEquals(0, list3.size());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.3210331441392693
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(4561L);
      range_Builder0.contractBegin(0L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators.values();
      Range.Comparators.values();
      range0.complement(range1);
      assertTrue(range1.isEmpty());
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.694470561830604
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(4561L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(0L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(0L, 4561L);
      Range.Builder range_Builder3 = new Range.Builder();
      Range range1 = range_Builder2.build();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      range_Builder4.expandEnd(0L);
      range0.intersection(range1);
      Range.Comparators.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.775948112159976
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(4561L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder(0L, 2447L);
      range_Builder4.contractBegin(255L);
      Range.Builder range_Builder5 = new Range.Builder(4561L);
      Range.Builder range_Builder6 = new Range.Builder(255L);
      Range range0 = Range.of(3172L);
      range0.complement(range0);
      range0.intersection(range0);
      Range.Builder range_Builder7 = new Range.Builder();
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder8 = new Range.Builder(range_Builder6);
      range_Builder0.expandEnd((-141L));
      Range range2 = Range.of(2360L);
      Long long0 = new Long(3172L);
      range1.intersection(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.2044398354016748
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(4561L);
      range_Builder0.contractBegin(0L);
      range_Builder0.build();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(4560L, long0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.Comparators.values();
      Range.of((-61L), (-61L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.320612711093232
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.527062838287056
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1227L, 1227L);
      range_Builder0.copy();
      range_Builder0.expandEnd((-2051L));
      // Undeclared exception!
      try { 
        range_Builder0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.2671143019073323
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.of(4093L, 2147483646L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertFalse(range_ComparatorsArray1.equals((Object)range_ComparatorsArray0));
  }
}
