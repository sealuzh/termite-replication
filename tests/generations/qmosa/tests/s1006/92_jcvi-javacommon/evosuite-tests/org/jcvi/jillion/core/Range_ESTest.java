/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 11:22:51 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.6903427614935085
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 224L, 224L);
      Range range1 = Range.of((-2147483648L));
      range1.equals(range0);
      Range range2 = Range.of((-610L));
      Long long0 = new Long((-406L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Range range3 = Range.of((-229L), 1762L);
      range2.equals(long0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer1);
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2035414916849403
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of((-2147483657L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-126L), (-126L));
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-553L), (-2147483657L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6437168873850085
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854775807L);
      range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(9223372036800451441L, 9223372036800451441L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range0 = Range.of(2147483647L, 9223372036800451441L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder4 = new Range.Builder(0L);
      Range range1 = range_Builder4.build();
      Range.Builder range_Builder5 = range_Builder3.expandEnd(9223372036800451441L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-723L), 0L);
      Range.Builder range_Builder6 = range_Builder5.expandEnd(2594L);
      Range.Builder range_Builder7 = new Range.Builder(2594L, 9223372036854775807L);
      range_Builder6.expandEnd(9223372036800451441L);
      Range.Builder range_Builder8 = new Range.Builder((-2189L), 32767L);
      Range.Builder range_Builder9 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder10 = new Range.Builder(range_CoordinateSystem1, (-2926L), (-486L));
      Range.Builder range_Builder11 = new Range.Builder();
      Range.of(4294967295L);
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("CMm,.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.CMm,.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2340405399995724
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      range0.startsBefore(range0);
      Object object0 = new Object();
      range0.equals(object0);
      Range.ofLength(0L);
      Range range2 = Range.of(0L);
      range2.getEnd();
      Long long0 = new Long((-1713L));
      String string0 = "";
      range0.equals(long0);
      // Undeclared exception!
      try { 
        range1.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.510677054430376
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of((-2589L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-2589L), (-2589L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, (-234L), (-234L));
      range0.equals(range1);
      Range.of(range_CoordinateSystem0, (-126L), (-126L));
      Range.of((-127L));
      Range.ofLength(2119L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem3, (-3995L), (-3286L));
      // Undeclared exception!
      try { 
        Range.parseRange("Q&`u{q`XX:7yM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Q&`u{q`XX:7yM into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.5957867932019534
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1192L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1192L, 1192L);
      Range range1 = Range.of(range_CoordinateSystem0, 1192L, 1192L);
      range0.equals(range1);
      Range range2 = Range.of((-572L), (-128L));
      Range.Builder range_Builder1 = new Range.Builder(range1);
      Range range3 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(704L, 2027L);
      Range range4 = range_Builder2.build();
      Range.of(2027L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Object object0 = new Object();
      Range range5 = Range.of(704L, 1192L);
      range3.equals(range_Builder2);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range5.forEach(consumer1);
      range3.intersection(range2);
      range4.complement(range0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3377685889088555
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-3390L), (-3390L));
      Range range0 = Range.of((-3390L));
      Range range1 = Range.of((-1118L));
      range1.equals(range0);
      Range.of((-3390L));
      Long long0 = new Long(3593L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 255L, 9961L);
      Range range2 = Range.of((-1342L), 9990L);
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Yk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Yk
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3597662154380594
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of((-2147483657L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775805L, 9223372036854775805L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483657 would make range [9223372036854775805 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.405442363123962
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3390L), (-3390L));
      Range range1 = Range.of(range_CoordinateSystem0, (-3390L), (-1751L));
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 1909L, 1909L);
      range2.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 32767L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range2.getEnd(range_CoordinateSystem3);
      range0.complement(range1);
      range2.getEnd();
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.702210313630968
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.equals(":KrM7mW5");
      Range range1 = Range.of(275L, 2147483647L);
      Range range2 = Range.of(275L, 2147483647L);
      Range range3 = range_Builder1.build();
      range1.getBegin(range_CoordinateSystem0);
      Object object0 = new Object();
      range3.equals(object0);
      Range.of(range_CoordinateSystem0, 275L, 275L);
      Range range4 = Range.of((-32L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range4.forEach(consumer0);
      Object object1 = new Object();
      Range.of(255L, 2242L);
      range1.equals(range2);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range2.forEach(consumer1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2516621349175314
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of((-128L));
      range0.equals(range1);
      Range.of((-126L));
      Long long0 = new Long(906L);
      Range range2 = Range.of(range_CoordinateSystem0, (-126L), (-126L));
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Oex)uv/&@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Oex)uv/&@
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.666768162667773
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of((-2147483658L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(286L);
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      range1.equals(range0);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.of(286L);
      Range range2 = Range.of(4294967295L);
      assertFalse(range2.isEmpty());
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range3 = range0.intersection(range0);
      List<Range> list0 = range0.complement(range3);
      assertSame(range3, range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.321822344393357
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of((-2147483657L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-126L), (-126L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2147483657L), (-126L));
      range1.equals(range0);
      Range.of(range_CoordinateSystem1, (-2147483657L), (-2147483657L));
      long long0 = (-127L);
      Range.of((-127L));
      // Undeclared exception!
      try { 
        Range.ofLength((-126L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.7953294831138167
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(2147483646L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder2 = new Range.Builder(2147483646L);
      Range range0 = Range.of(range_CoordinateSystem0, 2147483646L, 2147483646L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483646L, 2147483646L);
      range0.equals(range1);
      Range.Builder range_Builder3 = new Range.Builder(2147483646L);
      Range.Builder range_Builder4 = range_Builder0.shift(4294967294L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      Range.Builder range_Builder6 = new Range.Builder(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, (-3319L), 2147483647L);
      Range range3 = Range.of(range_CoordinateSystem1, 1964L, 9223372036854775807L);
      Range range4 = range3.intersection(range1);
      range3.complement(range4);
      Range.of(64907L);
      // Undeclared exception!
      range2.split(65534L);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.513482692990041
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 2147483647L, 2147483646L);
      Range range1 = Range.ofLength(2147483647L);
      range0.equals(range1);
      Range.of(2147483647L);
      range_Builder1.expandEnd(2147483647L);
      Range range2 = Range.of(4294967295L);
      Long long0 = new Long(9223372036854772199L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.281467982986178
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(9223372036854775180L);
      Range range0 = Range.of(255L, 9223372036854775180L);
      Range range1 = range_Builder1.build();
      Range range2 = range_Builder1.build();
      Object object0 = new Object();
      range2.equals(object0);
      Range.of(2242L, 9223372036854775180L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Range.of(231L, 2242L);
      range0.equals(range1);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range1.forEach(consumer1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3971236477220086
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range0.equals(range_CoordinateSystem0);
      Long long0 = new Long(255L);
      Range range1 = Range.of((-1L), 703L);
      range1.equals((Object) null);
      Long long1 = new Long((-994L));
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range0.complement(range1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(255L, 703L);
      Range.Builder range_Builder4 = new Range.Builder(range_CoordinateSystem0, (-994L), 703L);
      Range.Builder range_Builder5 = new Range.Builder();
      Range.Builder range_Builder6 = new Range.Builder(range_Builder3);
      Range.Builder range_Builder7 = new Range.Builder(range0);
      range_Builder7.expandBegin((-1677L));
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 3262L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.484356923417574
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(3612L);
      range1.intersection(range0);
      range0.endsBefore(range1);
      range0.equals(range_CoordinateSystem0);
      range0.getBegin(range_CoordinateSystem0);
      Range range2 = Range.of(range_CoordinateSystem0, 3612L, 3612L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range2.complementFrom(linkedList0);
      range2.complementFrom(list0);
      range2.equals((Object) null);
      Range.of(3612L);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.524148733593939
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.ofLength(65535L);
      Range range2 = Range.of(range_CoordinateSystem0, (-13L), 65535L);
      range0.isSubRangeOf(range1);
      Range range3 = Range.of(65535L, 9223372036854774901L);
      range3.startsBefore(range0);
      Range range4 = Range.ofLength(2837L);
      Range range5 = Range.of(1L, 155L);
      boolean boolean0 = range4.startsBefore(range5);
      Object object0 = new Object();
      boolean boolean1 = range2.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      
      Range range6 = range4.intersection(range0);
      assertSame(range6, range4);
      assertNotSame(range6, range1);
      
      range3.asRange();
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2505486921305367
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3390L), (-3390L));
      Range range1 = Range.of((-3390L));
      range0.equals(range1);
      Range.of((-3390L));
      Long long0 = new Long((-406L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-3390L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3390 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9252027641711082
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.ofLength(1121L);
      range0.spliterator();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2595693344322374
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.iterator();
      Range range1 = Range.ofLength(0L);
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.7656838090495297
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854775807L);
      range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(9223372036800451441L, 9223372036800451441L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range0 = Range.of(2147483647L, 9223372036800451441L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder4 = new Range.Builder(0L);
      Range range1 = range_Builder4.build();
      Range.Builder range_Builder5 = range_Builder3.expandEnd(9223372036800451441L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-723L), 0L);
      long long0 = 2594L;
      Range.Builder range_Builder6 = range_Builder5.expandEnd(2594L);
      Range.Builder range_Builder7 = new Range.Builder(2594L, 9223372036854775807L);
      range_Builder6.expandEnd(9223372036800451441L);
      Range.Builder range_Builder8 = new Range.Builder((-2189L), 32767L);
      Range.Builder range_Builder9 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder10 = new Range.Builder(range_CoordinateSystem1, (-2926L), (-486L));
      Range.Builder range_Builder11 = new Range.Builder();
      Range range3 = Range.of(4294967295L);
      Range range4 = range2.intersection(range1);
      Range range5 = Range.ofLength(32767L);
      range5.complement(range1);
      range4.intersects(range3);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("`r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.`r
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.571769317120687
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1909L, 1909L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(286L);
      Range range2 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      range2.equals(range1);
      Range.Builder range_Builder1 = new Range.Builder(286L);
      Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      range1.equals((Object) null);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-1184L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.5669706680108053
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1909L, 1909L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(286L);
      long long1 = 1909L;
      Range range2 = Range.of(range_CoordinateSystem0, 1909L, 1909L);
      range2.equals(range1);
      Range.Builder range_Builder1 = new Range.Builder(286L);
      range_Builder0.build();
      long long2 = 4294967295L;
      long long3 = 2143L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 2143L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3773194617347917
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range0.equals(range_CoordinateSystem0);
      Long long0 = new Long((-1156L));
      long long1 = (-9223372036854775808L);
      Range.Builder range_Builder0 = new Range.Builder((-9223372036854775808L), (-653L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range0.equals(range_Builder1);
      Range.Builder range_Builder2 = new Range.Builder(0L);
      range_Builder1.build();
      Range.of(range_CoordinateSystem0, 65535L, (-9223372036854775808L));
      range_Builder0.expandEnd((-341L));
      range_Builder0.expandEnd((-653L));
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-341L), (-443L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.7553879870160918
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.equals(":KrM7mW5");
      Range range1 = Range.of(255L, 2147483647L);
      Range range2 = range_Builder1.build();
      Range range3 = range_Builder1.build();
      Object object0 = new Object();
      range3.equals(object0);
      Range.of(2252L);
      Range.of(range_CoordinateSystem0, 255L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range3.toString(range_CoordinateSystem1);
      Range.Builder range_Builder2 = new Range.Builder((-2091L), 65535L);
      range1.isSubRangeOf(range2);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder2.expandBegin(255L);
      Range range4 = Range.ofLength(9223372034707292161L);
      Range.Builder range_Builder4 = new Range.Builder(range4);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range5 = Range.of(range_CoordinateSystem2, (-1299L), 9223372034707292161L);
      Range range6 = range5.intersection(range2);
      range1.intersects(range6);
      // Undeclared exception!
      try { 
        range1.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3530508053873955
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      
      Range.Builder range_Builder1 = new Range.Builder(9994L);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      range_Builder2.shift(4294967294L);
      Range.Builder range_Builder3 = new Range.Builder();
      Range range2 = Range.ofLength(649L);
      Range.Builder range_Builder4 = new Range.Builder(range2);
      Range.Builder range_Builder5 = new Range.Builder(range2);
      Range range3 = range2.intersection(range0);
      assertTrue(range3.isEmpty());
      
      Range range4 = Range.ofLength(9994L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1184272811610554
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.equals(range0);
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      range_Builder0.shift(4294967294L);
      range_Builder1.contractEnd(4370L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.248575903485578
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854775807L);
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.equals(range_Builder1);
      Range range1 = Range.of(9223372036854775807L);
      Range.of(9223372036854775807L);
      range0.equals(range1);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range2 = range0.intersection(range1);
      range2.asRange();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("dTgJg/Am,F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.dTgJg/Am,F
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2620884221060087
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = 1466L;
      Range range0 = Range.of(1466L);
      long long1 = (-1472L);
      Long long2 = new Long((-1472L));
      Range range1 = Range.of(1466L, 65535L);
      range1.equals(range0);
      range0.complement(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(255L, (-573L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2485322345225187
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = (-2147483644L);
      Range range0 = Range.of((-2147483644L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-152L);
      Range.of(range_CoordinateSystem0, (-152L), (-152L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2147483644L), (-152L));
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483644L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3667294294083123
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3390L), (-3390L));
      Range range1 = Range.of(range_CoordinateSystem0, (-3390L), (-1751L));
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 1909L, 1909L);
      range2.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(2493L);
      long long0 = (-1872L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-672L), (-1872L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.5254481675600116
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range1.isSubRangeOf(range1);
      range1.equals(range_Builder0);
      range_Builder0.build();
      Range range2 = Range.of(range_CoordinateSystem0, 65535L, 9223372036854775807L);
      Object object0 = new Object();
      range2.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 65535L, (-9223372036854773961L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854773962 would make range [65535 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1633275625011605
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.equals(range0);
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      range_Builder0.shift(4294967294L);
      range_Builder1.contractEnd(4370L);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1682555017796385
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 9223372036854775807L;
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854775807L);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_Builder1.build();
      Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range_Builder1.build();
      long long1 = 2147483647L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 4294967295L, 4294967295L);
      Range.Builder range_Builder2 = range_Builder0.expandEnd(170L);
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.1704479994629717
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.of(0L);
      long long0 = (-406L);
      Long long1 = new Long((-1093L));
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-1093L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1094 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.286232061796231
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(9223372036854775180L);
      Range range0 = Range.of(255L, 9223372036854775180L);
      Range range1 = range_Builder1.build();
      Object object0 = new Object();
      range1.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(231L, 2242L);
      range0.equals(range0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.452704898307804
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.ofLength(4242L);
      Range range1 = Range.ofLength(255L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.of((-949L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      List<Range> list0 = range1.split(255L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.737976546203245
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1909L, 1909L);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, (-225L), 1909L);
      boolean boolean0 = range1.equals(range_CoordinateSystem2);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      
      Range range2 = Range.of(range_CoordinateSystem1, (-2147483648L), 1909L);
      assertFalse(range2.equals((Object)range1));
      
      Range range3 = Range.of((-32768L));
      Object object0 = new Object();
      Range range4 = Range.ofLength(255L);
      Range range5 = Range.of(1L, 9950L);
      range4.equals(range5);
      Range range6 = Range.of(range_CoordinateSystem1, (-225L), 1909L);
      range3.intersection(range0);
      assertFalse(range0.isEmpty());
      
      List<Range> list1 = range6.complement(range4);
      assertEquals(2, list1.size());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.543537923859781
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1909L, 1909L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, (-225L), 1909L);
      range1.equals(range_CoordinateSystem2);
      Range.of(1909L);
      Range range2 = Range.of(range_CoordinateSystem1, (-2147483648L), (-2147483648L));
      Object object0 = new Object();
      Range range3 = Range.ofLength(255L);
      Range range4 = Range.of(1L, 255L);
      range3.equals(range4);
      Range.of(range_CoordinateSystem1, (-225L), 1909L);
      range2.intersection(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.441525306229116
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      long long0 = 0L;
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.equals(range0);
      String string0 = ">5%Lc%[xc93X";
      Range range1 = Range.of(0L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.parseRange(">5%Lc%[xc93X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse >5%Lc%[xc93X into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.576520313439926
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range range2 = Range.of(0L);
      range2.startsBefore(range0);
      range1.isSubRangeOf(range2);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      range_Builder0.expandEnd((-1L));
      Range range3 = range_Builder0.build();
      Range.of(range_CoordinateSystem0, 0L, (-1L));
      Range.of((-1L));
      Range range4 = Range.of((-1L));
      range3.intersection(range4);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("UTF-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.UTF-8
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0216905105807728
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(788L, 9223372036854775180L);
      range0.equals(range_Builder0);
      long long0 = 255L;
      Long long1 = new Long(255L);
      long long2 = (-9223372036854775808L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-9223372036854775808L), 157L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.072232258605225
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3390L), (-3390L));
      Range range1 = Range.of((-3390L));
      range0.equals(range1);
      Range.of((-3390L));
      Long long0 = new Long((-406L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 64907L, (-406L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.355285987380379
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-28L), 1909L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-225L), (-225L));
      range0.equals("org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange");
      Range range1 = Range.of((-225L));
      Range.of((-225L));
      Object object0 = new Object();
      range0.equals(object0);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.652412027597161
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(65535L);
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.complement(range2);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range3 = range_Builder0.build();
      range_Builder0.build();
      Range range4 = Range.of(range_CoordinateSystem0, 0L, 65535L);
      boolean boolean0 = range4.intersects(range3);
      assertFalse(boolean0);
      assertFalse(range4.isEmpty());
      
      range_Builder0.expandEnd(0L);
      range_Builder0.expandBegin(2147483647L);
      range3.intersection(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.5436811226188873
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(2147483650L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483650L, 2147483650L);
      range0.equals(":KrM7mW5");
      Range range1 = Range.of(255L, 2147483650L);
      range_Builder1.build();
      Range range2 = range_Builder1.build();
      Object object0 = new Object();
      range2.equals(object0);
      Range.of((-128L));
      Range.of(1L);
      Object object1 = new Object();
      range1.equals(range2);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range1.forEach(consumer0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.4299803687664414
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = Range.of(255L, 2147483647L);
      Range range2 = range_Builder1.build();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      
      Range.of(range_CoordinateSystem0, 255L, 255L);
      Range range3 = Range.of(1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Object object1 = new Object();
      Range.of(255L, 2147483647L);
      boolean boolean1 = range1.equals(range2);
      assertTrue(boolean1 == boolean0);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range2.forEach(consumer1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1944110957225056
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 127L;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 4294967295L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range0.equals(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(1357L);
      range_Builder1.build();
      Range.of(range_CoordinateSystem0, 0L, (-1L));
      range_Builder0.expandEnd(1357L);
      range_Builder2.expandEnd((-1L));
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(0L, (-228L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.568696955005999
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 127L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-4708L), 1201L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, 3373L, 3644L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-126L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd(216L);
      Range.Builder range_Builder2 = new Range.Builder((-931L), 3644L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder(range1);
      range_Builder4.expandBegin((-394L));
      Range range2 = Range.of(range_CoordinateSystem2, (-4708L), 986L);
      range2.intersection(range1);
      Range range3 = range0.asRange();
      assertFalse(range3.equals((Object)range1));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.4046927289180116
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertFalse(list1.contains(range1));
      
      Range range2 = Range.of(0L);
      range2.startsBefore(range0);
      Object object0 = new Object();
      range1.equals((Object) null);
      Range.ofLength(0L);
      Range range3 = Range.of(880L);
      Long long0 = new Long(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range4 = range1.intersection(range3);
      assertFalse(range3.isEmpty());
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.1032372377054718
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3390L), (-3390L));
      range0.equals(range0);
      Range.of((-3390L));
      Long long0 = new Long((-406L));
      long long1 = 64907L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 64907L, (-406L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.338949446303339
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 0L;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = range1.intersection(range0);
      range2.equals(range1);
      String string0 = ">5%Lc%[xc93X";
      // Undeclared exception!
      try { 
        Range.parseRange("yyx_6/4<1YV9zj", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse yyx_6/4<1YV9zj into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.313432657703042
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854775807L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range.of(range_CoordinateSystem0, (-1250L), 54389941L);
      range0.equals(range_Builder0);
      long long0 = 2147483647L;
      Range.Builder range_Builder3 = new Range.Builder(2147483647L);
      range_Builder1.shift(9223372036854775807L);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-1250L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.9306768766483344
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 127L;
      Range.of(range_CoordinateSystem0, 127L, 4294967295L);
      Object object0 = new Object();
      long long1 = 1357L;
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      range_Builder0.build();
      range_Builder0.expandEnd((-486L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = (-2132L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-2132L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.9530375303326304
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.equals(range_CoordinateSystem0);
      long long0 = (-1156L);
      Long long1 = new Long((-1L));
      long long2 = (-9223372036854775808L);
      long long3 = (-653L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1L), (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.9295240128871245
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3611L, 4294967295L);
      range0.equals(range_CoordinateSystem0);
      Long long0 = new Long((-994L));
      long long1 = (-9223372036854775808L);
      long long2 = 9960L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(9960L, 1068L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.176633395029387
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 2147483647L;
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      range_Builder1.expandEnd(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.1917119917198744
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.complement(range0);
      Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Object object0 = new Object();
      Range.Builder range_Builder2 = new Range.Builder();
      Long long0 = new Long(9223372036854774926L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.2437181692461543
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 2147483647L;
      Range.of(2147483647L);
      long long1 = (-126L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-126L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-126L), (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.5438394423323714
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(2147479277L);
      Range range1 = Range.of((-997L));
      range0.startsBefore(range1);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range range2 = Range.of((-204L));
      Range.of(427L);
      Long long0 = new Long((-9223372036854775808L));
      Range range3 = Range.of(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      assertFalse(range3.isEmpty());
      
      Range range4 = range1.intersection(range2);
      assertFalse(range2.isEmpty());
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.2099837917932454
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = 65535L;
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(383L);
      range0.startsBefore(range1);
      range1.isSubRangeOf(range0);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      long long1 = (-1L);
      range_Builder0.expandEnd(0L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = (-2147486375L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-13L), (-2147486375L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.557438440348968
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = range_Builder0.build();
      Range range3 = range_Builder0.build();
      Range range4 = Range.of(range_CoordinateSystem0, 0L, 65535L);
      assertFalse(range4.isEmpty());
      
      range_Builder0.expandEnd(0L);
      Range range5 = range0.intersection(range3);
      boolean boolean0 = range0.isSubRangeOf(range3);
      assertFalse(boolean0);
      
      Range range6 = range3.intersection(range5);
      assertSame(range6, range2);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2464L;
      long long1 = 2147483647L;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2147483647L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.014635675651483
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of((-593L), 645L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.7536957058188274
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854775807L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      range0.split(9223372036854775807L);
      List<Range> list1 = range0.complementFrom(list0);
      Range.Builder range_Builder3 = range_Builder0.expandEnd(32767L);
      Range range1 = range_Builder2.build();
      range0.equals(range_Builder1);
      Range.Builder range_Builder4 = range_Builder3.contractBegin(4294963685L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-1069L), 32767L);
      range_Builder4.expandEnd(0L);
      Range.ofLength(0L);
      Range range2 = Range.ofLength(9223372036854775807L);
      String string0 = range2.toString(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals("[ 0 .. 9223372036854775806 ]/0B", string0);
      
      range_Builder2.expandBegin(2147483647L);
      List<Range> list2 = range1.complementFrom(list1);
      //  // Unstable assertion: assertEquals(1, list1.size());
      
      List<Range> list3 = range0.split(9223372036854775807L);
      //  // Unstable assertion: assertFalse(list3.equals((Object)list2));
      
      Range range3 = range1.asRange();
      Range range4 = Range.parseRange("[ 0 .. 9223372036854775806 ]/0B");
      //  // Unstable assertion: assertSame(range4, range3);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.267945560566878
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_Builder0.copy();
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      range0.equals(range1);
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      Range.Builder range_Builder3 = range_Builder0.shift(4294967294L);
      range_Builder3.copy();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder5 = new Range.Builder(range1);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
      
      Range.Builder range_Builder6 = new Range.Builder();
      Range range2 = Range.of(4294967294L);
      Range range3 = range0.intersection(range2);
      //  // Unstable assertion: assertTrue(range3.isEmpty());
      //  // Unstable assertion: assertFalse(range3.equals((Object)range1));
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.195526601816883
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.isSubRangeOf(range0);
      long long0 = 703L;
      Range range1 = Range.of(703L, 9223372036854775807L);
      range1.endsBefore(range1);
      Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 703L, (-906L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.14716708893603
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Object object0 = new Object();
      Range range0 = Range.of(4294967295L);
      range0.equals("lq/3:r`%8rVEP7~x");
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.of(2129L, (-247L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.579521819444305
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(65536L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.ofLength(0L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range1.toString(range_CoordinateSystem0);
      Range range2 = Range.ofLength(65536L);
      Object object0 = new Object();
      range2.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 255L, 1794L);
      range3.toString();
      range1.isEmpty();
      range3.split(255L);
      Range range4 = Range.ofLength(9223372036854775807L);
      assertFalse(range4.equals((Object)range0));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.2830503796406174
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(2378L, 2378L);
      Range range1 = Range.ofLength(255L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      List<Range> list0 = range1.split(255L);
      assertTrue(list0.contains(range1));
      assertFalse(range1.isEmpty());
      assertEquals(1, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(2378L, long0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.4700342895989125
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.build();
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 65535L);
      range_Builder0.expandEnd(0L);
      List<Range> list0 = range1.split(65535L);
      //  // Unstable assertion: assertEquals(2, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.206703734300362
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483646L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("cUUuhKC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.cUUuhKC
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.5401252355296977
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 3663L);
      Range range1 = Range.of((-225L));
      Range range2 = Range.ofLength(0L);
      Range range3 = range1.intersection(range2);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-225L));
      range_Builder0.expandBegin(1620L);
      Range range4 = range1.intersection(range3);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.45776896341335
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-28L), 1909L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-225L), (-225L));
      range1.intersects(range2);
      Range range3 = Range.of((-55596L));
      Range range4 = Range.of((-2147483648L));
      assertSame(range4, range0);
      assertFalse(range4.isEmpty());
      
      Long long0 = new Long((-13L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Range range5 = range2.intersection(range1);
      assertTrue(range5.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.060703298370603
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2147483647L);
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.177514020533748
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3390L), (-3390L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-1388L), (-1388L));
      Range range1 = Range.of((-1L), 1601L);
      range1.split(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, (-1388L), 1201L);
      Object object0 = new Object();
      Range.of((-3390L));
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(1201L);
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem1, (-3390L), (-1635L));
      Range range2 = Range.of(range_CoordinateSystem0, (-1635L), (-1635L));
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.2494831272243294
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(2372L);
      Range range1 = Range.ofLength(2455L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      List<Range> list0 = range0.split(255L);
      assertNotSame(range0, range1);
      assertFalse(list0.contains(range0));
      assertEquals(10, list0.size());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.6858430453674447
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-2147483658L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(286L);
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range2 = Range.of(286L);
      List<Range> list0 = range2.split(1L);
      assertTrue(list0.contains(range2));
      assertEquals(1, list0.size());
      
      Range range3 = Range.of(4294967295L);
      assertFalse(range3.isEmpty());
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range4 = range0.intersection(range0);
      List<Range> list1 = range0.complement(range4);
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.221736094304879
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(2378L, 2378L);
      Range range1 = Range.ofLength(255L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range2 = Range.ofLength(255L);
      Object object0 = new Object();
      range0.equals(range1);
      range1.intersection(range2);
      Range.ofLength(2378L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("O(L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.O(L
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.1330252472126636
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 2147483646L;
      Range.Builder range_Builder1 = new Range.Builder(2147483646L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder2 = new Range.Builder(2147483646L);
      Long long1 = new Long(1357L);
      long long2 = (-9223372036854775808L);
      Range.Builder range_Builder3 = new Range.Builder(1357L, 2147483646L);
      Range.Builder range_Builder4 = new Range.Builder((-9223372036854775808L), (-653L));
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      long long3 = (-3290L);
      long long4 = 1964L;
      Range range0 = Range.of((-3290L), 1964L);
      Long long5 = new Long(1964L);
      range0.equals(long5);
      Range.Builder range_Builder6 = null;
      try {
        range_Builder6 = new Range.Builder((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.3341673801889438
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of((-2147483657L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483657L), (-2147483657L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2147483657L), (-2147483657L));
      range1.equals(range0);
      Range.of(range_CoordinateSystem1, (-2147483657L), (-2147483657L));
      long long0 = (-127L);
      Range.of((-127L));
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483657L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.473748312981305
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1L);
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      long long1 = 3079L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.equals("(d+)s*..s*(d+)");
      range0.toString(range_CoordinateSystem1);
      range0.spliterator();
      Range range1 = Range.of(range_CoordinateSystem0, 3079L, 3079L);
      range0.equals(range1);
      range0.split(4294967295L);
      range_CoordinateSystem0.toString();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("X>x)_m~!9`c(CGH<", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse X>x)_m~!9`c(CGH< into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.0897556540651885
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3390L), (-3390L));
      Range range1 = Range.of(range_CoordinateSystem0, (-3390L), (-898L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.getEnd();
      range0.forEach(consumer1);
      range1.forEach(consumer0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.335175632092512
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      range0.getEnd();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(1L, 65534L);
      Range range1 = Range.of((-966L), 255L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.515923523813418
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-13L), (-13L));
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range1.isSubRangeOf(range1);
      boolean boolean0 = range1.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      range_Builder0.build();
      range_Builder0.shift((-13L));
      Range range2 = Range.of(range_CoordinateSystem0, 65535L, 9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(9223372036854775807L, (-13L));
      range1.isSubRangeOf(range0);
      range_Builder0.expandBegin((-13L));
      Range.Builder range_Builder2 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
      
      range2.intersection(range1);
      assertFalse(range2.isEmpty());
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.2812671286568516
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1904L, 64907L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("RHaBFOi'~w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.RHaBFOi'~w
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.059489109242114
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-659L), 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("UTF-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.UTF-8
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.1875426719431976
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(703L, 703L);
      range1.startsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder(703L);
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-3069L), (-439L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 703L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.3389494463033396
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      range0.endsBefore(range1);
      Range range2 = Range.of(0L);
      range2.startsBefore(range0);
      range1.isSubRangeOf(range2);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      range_Builder0.expandEnd((-1L));
      // Undeclared exception!
      try { 
        range1.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.7101222149351436
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 628L);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 1L, 1L);
      List<Range> list0 = range0.complement(range2);
      range1.complementFrom(list0);
      long long0 = (-225L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, (-225L), 65535L);
      String string0 = "org.jcvi.jillion.core.io.IOUtil";
      range0.equals("org.jcvi.jillion.core.io.IOUtil");
      Range.of(1909L);
      Range range3 = Range.of((-1040L));
      range3.getBegin();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-2039L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.081415990323895
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = 1909L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1909L, 1909L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 9223372036854775807L);
      range_Builder0.build();
      range_Builder0.expandEnd(0L);
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-2425L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 435L, 2851L);
      range_Builder1.expandEnd((-2512L));
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.95303753033263
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = (-2147483648L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 1909L;
      Range range0 = Range.of(range_CoordinateSystem0, (-28L), 1909L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.3423265618864355
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(703L, 9223372036854775807L);
      range1.startsBefore(range0);
      Range range2 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      range2.isEmpty();
      Range range3 = range1.intersection(range2);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range1));
      //  // Unstable assertion: assertNotSame(range3, range1);
      
      Range range4 = range2.asRange();
      range4.iterator();
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.4367382991177795
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      Range range1 = Range.of(703L, 9223372036854775807L);
      boolean boolean1 = range1.startsBefore(range0);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      Range range2 = Range.ofLength(9223372036854775807L);
      Range range3 = range1.intersection(range2);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range1));
      //  // Unstable assertion: assertNotSame(range3, range1);
      
      Range range4 = Range.of(2911L);
      Range range5 = range4.intersection(range2);
      //  // Unstable assertion: assertSame(range5, range4);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.1645184940579014
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.ofLength(2372L);
      Range.ofLength(255L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.of(2372L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.split((-213L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.284354742125087
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 127L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-4708L), 1201L);
      Range.of(127L, 2012L);
      Object object0 = new Object();
      Long long0 = new Long((-4708L));
      assertEquals((-4708L), (long)long0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.14396977459706
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Long long0 = new Long(2147483393L);
      Long long1 = new Long(2147483647L);
      Long long2 = new Long(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1465L, 3546L);
      range0.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range$RangeIterator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range$RangeIterator
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.655258685057931
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 1909L;
      Range range1 = Range.of(range_CoordinateSystem0, 1909L, 1909L);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-225L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, (-225L), 1909L);
      range2.toString();
      range1.equals(range_CoordinateSystem2);
      Range.of(1909L);
      Range.of((-32768L));
      Object object0 = new Object();
      Range.ofLength(241L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.337353438579759
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 1899L;
      long long1 = 4294967295L;
      Range.of(range_CoordinateSystem0, 1899L, 4294967295L);
      Range range0 = Range.of(1899L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Range.of(26627L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(")#!5TGRE,;Uv%^,XH$", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse )#!5TGRE,;Uv%^,XH$ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.574665493654402
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(0L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      Range range2 = Range.of(0L);
      boolean boolean0 = range2.startsBefore(range0);
      assertFalse(boolean0);
      
      range0.endsBefore(range2);
      Range range3 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, (-1L));
      range_Builder0.shift((-4405L));
      range_Builder0.contractEnd((-626L));
      range_Builder0.copy();
      Range.of((-593L), 645L);
      boolean boolean1 = range1.isEmpty();
      assertSame(range1, range3);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.8877348794044915
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, (-41L), 628L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(1, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-41L), (-41L));
      range0.complement(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, (-212L), 65535L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range3.getBegin(range_CoordinateSystem3);
      assertEquals((-212L), long0);
      
      boolean boolean0 = range0.equals("org.jcvi.jillion.core.io.IOUtil");
      assertFalse(boolean0);
      
      Range range4 = Range.of(1909L);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.ZERO_BASED;
      Range range5 = Range.of(range_CoordinateSystem4, (-93L), 628L);
      Range.of(1891L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range4.forEach(consumer0);
      Range range6 = Range.of(628L, 65535L);
      Range range7 = range6.intersection(range5);
      assertFalse(range7.isEmpty());
      
      Range range8 = Range.of(628L);
      range8.complement(range4);
      assertSame(range8, range7);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.310822360005315
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-126L), (-126L));
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 2775L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2775L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.747741805571995
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 1357L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.4966107369867823
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4242L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(766L);
      Range.Builder range_Builder2 = range_Builder1.shift(1421L);
      range_Builder1.contractEnd(255L);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range_Builder2.copy();
      Range range1 = Range.of(766L);
      Range range2 = range0.intersection(range1);
      long long0 = range2.getBegin();
      assertEquals(0L, long0);
      assertTrue(range2.isEmpty());
      
      Range range3 = Range.ofLength(766L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.9761388013384353
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 3663L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.7230830527357193
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1909L, 1909L);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, (-225L), 1909L);
      range1.equals(range_CoordinateSystem2);
      Range.of(1909L);
      Range range2 = Range.of((-32768L));
      Object object0 = new Object();
      Range range3 = Range.ofLength(255L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      range3.getBegin(range_CoordinateSystem3);
      Range range4 = Range.of(1L, 255L);
      range3.equals(range4);
      Range.of(range_CoordinateSystem1, (-225L), 1909L);
      range2.intersection(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("h^?M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.h^?M
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.2024451212289278
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(3100L);
      Range range0 = Range.of(246L);
      range0.getBegin();
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.of(1357L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.7173248956787504
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1909L, 1909L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.equals((Object)list0));
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, (-225L), 1909L);
      range1.equals(range_CoordinateSystem2);
      Range range3 = Range.of(1909L);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.of((-32768L));
      Object object0 = new Object();
      Range range5 = Range.ofLength(255L);
      Range range6 = Range.of(1L, 255L);
      range5.equals(range6);
      assertFalse(range6.isEmpty());
      assertFalse(range6.equals((Object)range5));
      
      Range range7 = Range.of(range_CoordinateSystem1, (-225L), 1909L);
      range4.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem3);
      assertEquals("[ -2147483647 .. -2147483647 ]/RB", string0);
      
      range5.isSubRangeOf(range0);
      assertFalse(range5.isEmpty());
      
      Range range8 = range7.intersection(range2);
      assertSame(range2, range8);
      assertNotSame(range7, range8);
      assertFalse(range8.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.9998159059644753
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of((-1L));
      range0.spliterator();
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range1 = Range.of((-128L));
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Range.of((-1L));
      Long long0 = new Long((-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.3283569227316416
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-28L), 1909L);
      Range.Builder range_Builder0 = new Range.Builder(1909L, 9223372036854775807L);
      Range.of(range_CoordinateSystem0, 1201L, 9223372036854775807L);
      Object object0 = new Object();
      Range.of(65535L);
      Object object1 = new Object();
      Range.Builder range_Builder1 = new Range.Builder(1909L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem1, (-4708L), 3893L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, (-1944L), (-3706L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.684661287081757
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(1909L, 1909L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(286L);
      long long1 = 1909L;
      Range range2 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      range2.equals(range1);
      Range.Builder range_Builder1 = new Range.Builder(range1);
      range_Builder0.build();
      long long2 = 4294967295L;
      long long3 = 2143L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 2143L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.4416071545659537
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.of((-2147483644L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-152L), (-152L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-2147483644L), (-152L));
      Range.of(1169L);
      Long long0 = new Long(1169L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.3620103999121125
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854775807L);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_Builder1.build();
      Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range0 = Range.of(9223372036854775807L);
      Range.of(9223372036854775807L);
      Long long0 = new Long(65535L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of(9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("&iyl#$]3H]Qxu- ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.&iyl#$]3H]Qxu- 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.0758406137347567
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      Range.Builder range_Builder3 = range_Builder0.shift(4294967294L);
      range_Builder1.contractEnd(4370L);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      assertFalse(range_Builder4.equals((Object)range_Builder3));
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.1418379274762063
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3390L), (-3390L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 3663L, 3663L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.22790914511199
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of((-2401L));
      Range range1 = Range.of(9223372036854774341L);
      range1.split(9223372036854774755L);
      Long long0 = new Long((-1663L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2401 would make range [9223372036854774341 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.1025712768045546
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-1654L), (-1654L));
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.ofLength((-1654L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.452109414875873
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3390L), (-3390L));
      Range range1 = Range.of((-3390L));
      boolean boolean0 = range0.equals(range1);
      Range range2 = Range.of((-3390L));
      Range range3 = Range.of((-3390L));
      Long long0 = new Long((-278L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range4 = range0.intersection(range2);
      assertTrue(range4.isEmpty());
      
      range1.complement(range0);
      boolean boolean1 = range3.intersects(range2);
      assertFalse(boolean1 == boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      assertFalse(range0.equals((Object)range3));
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.4891345220117116
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = 65535L;
      Range range0 = Range.of(907L);
      long long1 = (-1472L);
      Long long2 = new Long((-1472L));
      Range range1 = Range.of(907L, 65535L);
      range1.equals(range0);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range1.intersects(range0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-5048L));
      range0.equals(range1);
      Range.ofLength(1501L);
      long long3 = 0L;
      Range.Builder range_Builder2 = range_Builder1.expandEnd(0L);
      Range.Builder range_Builder3 = range_Builder2.expandEnd((-676L));
      Range.Builder range_Builder4 = new Range.Builder((-4963L), (-1472L));
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(range_Builder3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.5892399291239423
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.ofLength(65535L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      Range.Builder range_Builder0 = new Range.Builder();
      boolean boolean0 = range1.intersects(range1);
      assertTrue(boolean0);
      
      Range range2 = Range.of((-13L));
      Range range3 = Range.of(127L);
      Long long0 = new Long(65535L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range4 = range0.intersection(range3);
      assertFalse(range4.isEmpty());
      assertSame(range4, range3);
      
      List<Range> list1 = range2.complement(range0);
      assertTrue(list1.contains(range2));
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.9216576564967065
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-2401L));
      List<Range> list0 = range0.split(2372L);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.2695409261010817
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-1440L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of((-2147483648L), (-1440L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin((-2119L));
      assertSame(range_Builder1, range_Builder2);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.997756703271982
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = (-126L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = (-2147484816L);
      Range.of(range_CoordinateSystem0, (-2147484816L), 127L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-1439L), (-2147484816L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.1612136685436916
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-1250L);
      Range.of(range_CoordinateSystem0, (-1250L), 54389941L);
      range_Builder0.expandEnd(2147483531L);
      long long1 = 2147483647L;
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, (Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1227L, 1227L);
      range_Builder0.copy();
      range_Builder0.copy();
      range_Builder0.expandEnd((-2051L));
      // Undeclared exception!
      try { 
        range_Builder0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1227L, 1227L);
      range_Builder0.shift(1040L);
      range_Builder0.expandBegin((-1282L));
      // Undeclared exception!
      try { 
        range_Builder0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2147481191L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.886165178199426
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = 2372L;
      long long1 = 255L;
      long long2 = 1268L;
      Range.Builder range_Builder0 = new Range.Builder(255L, 1268L);
      range_Builder0.build();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("z%_a6}`jOIV7[#V7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.z%_a6}`jOIV7[#V7
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.047074222855931
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Long long0 = new Long((-303L));
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.split((-303L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.0126066370953697
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 127L, 4294967295L);
      Object object0 = new Object();
      Range range0 = Range.of(1357L, 4294967295L);
      Object object1 = new Object();
      Long long0 = new Long(4294967295L);
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.3449622597377577
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of(2378L, 2378L);
      Range range1 = Range.ofLength(255L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.Builder range_Builder0 = new Range.Builder(127L, 2147483647L);
      range_Builder0.expandBegin(127L);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.6634435781461825
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), 219L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(0, list1.size());
      
      Range range2 = Range.of(220L);
      Range range3 = Range.of(220L);
      Long long0 = new Long(1909L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range4 = range0.intersection(range3);
      List<Range> list2 = range0.complement(range4);
      assertNotSame(range0, range1);
      assertSame(range3, range2);
      assertFalse(list2.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 30L, 2147483648L);
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("lV:HQ>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.lV:HQ>
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.343510261338235
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(1L, 1L);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Long long0 = new Long((-394L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range1.intersection(range2);
      range1.complement(range2);
      String string0 = "org.jcvi.jillion.core.io.IOUtil";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.io.IOUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.io.IOUtil
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.4641394544326176
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854775807L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Object object0 = new Object();
      Range.Builder range_Builder3 = range_Builder1.shift((-4238L));
      range_Builder3.contractEnd(9223372036854775807L);
      Range.Builder range_Builder4 = new Range.Builder(range1);
      Range.Builder range_Builder5 = new Range.Builder(range0);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.1403381284166865
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = range_Builder0.build();
      range_Builder0.build();
      range_Builder0.expandEnd((-302L));
      range_Builder0.expandBegin(0L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.240914899134997
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.of(1651L);
      Range.of(0L);
      Range range1 = Range.of(0L);
      range1.startsBefore(range0);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("2%awK/g(P%(.^'h2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 2%awK/g(P%(.^'h2 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.472533667833284
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range range2 = Range.of(0L);
      range2.startsBefore(range0);
      range1.isSubRangeOf(range2);
      Range range3 = Range.ofLength(0L);
      Range.of((-249L));
      Range.of(711L);
      range1.intersection(range3);
      // Undeclared exception!
      try { 
        Range.ofLength((-395L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.6232593020797768
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 127L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-4708L), 1201L);
      Object object0 = new Object();
      Range range2 = Range.of((-511L));
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(454L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem.values();
      Range range3 = Range.of((-126L));
      Range range4 = range2.intersection(range3);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      
      List<Range> list0 = range1.complement(range3);
      //  // Unstable assertion: assertEquals(2, list0.size());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.282951286680582
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854775807L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Object object0 = new Object();
      Range.Builder range_Builder3 = range_Builder1.shift((-4238L));
      range_Builder3.contractEnd(9223372036854775807L);
      Range.Builder range_Builder4 = new Range.Builder(range1);
      Range.Builder range_Builder5 = new Range.Builder(range0);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertSame(range2, range1);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.4591536601454047
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of(2378L, 2378L);
      Range range1 = Range.ofLength(255L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range2 = Range.of(2378L);
      Long long0 = new Long(1312L);
      range1.forEach(consumer1);
      Range range3 = range1.intersection(range2);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      //  // Unstable assertion: assertSame(range2, range0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.023347743183168
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3390L), (-3390L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 3663L, 3663L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem2);
      assertEquals((-3391L), long0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.128044921185588
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-3390L), 562L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 380L, 562L);
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.0140772805713656
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 2147483647L;
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      range_Builder3.build();
      range_Builder2.build();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, (-768L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -768 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.2164243998894584
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder2 = range_Builder0.contractBegin(9223372036854775807L);
      range_Builder1.contractBegin(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range_Builder2.shift(9223372036854775807L);
      Range.Builder range_Builder3 = range_Builder1.expandBegin(9223372036854775807L);
      Range.Builder range_Builder4 = range_Builder1.contractBegin(9223372036854775807L);
      assertSame(range_Builder4, range_Builder3);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.2314414197376555
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.of((-128L));
      Range.of((-4708L));
      Range.of((-128L));
      Long long0 = new Long(9223372036854775807L);
      Range.of((-2485L), 4294967295L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }
}
