/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 11:56:29 GMT 2020
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.Delayed;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import javax.management.remote.JMXPrincipal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.gds.GDS;
import org.firebirdsql.gds.IscDbHandle;
import org.firebirdsql.gds.XSQLDA;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.AbstractIscTrHandle;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.jni.isc_blob_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_db_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_tr_handle_impl;
import org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl;
import org.firebirdsql.jdbc.DummyCallableStatementMetaData;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBFetcher;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.firebirdsql.jdbc.field.FBBlobField;
import org.firebirdsql.jdbc.field.FBCachedBlobField;
import org.firebirdsql.jdbc.field.FBCachedLongVarCharField;
import org.firebirdsql.jdbc.field.FBLongVarCharField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setSelectCount(2234);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      isc_stmt_handle_impl0.unregisterTransaction();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-114);
      isc_stmt_handle_impl0.setAllRowsFetched(true);
      isc_stmt_handle_impl0.statement = isc_stmt_handle_impl0.statement;
      isc_stmt_handle_impl0.setStatementType((byte)0);
      isc_stmt_handle_impl0.setExecutionPlan((String) null);
      isc_stmt_handle_impl0.setRsr_id((byte) (-114));
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      isc_stmt_handle_impl0.removeRows();
      isc_stmt_handle_impl0.registerTransaction(isc_tr_handle_impl0);
      XSQLDA xSQLDA0 = new XSQLDA(0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 5;
      intArray0[2] = 6;
      intArray0[3] = 4;
      intArray0[5] = 0;
      xSQLDA0.sqln = (int) (byte) (-114);
      xSQLDA0.ioLength = intArray0;
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      isc_stmt_handle_impl0.unregisterTransaction();
      isc_tr_handle_impl0.forgetResultSets();
      isc_stmt_handle_impl0.setExecutionPlan((String) null);
      isc_stmt_handle_impl0.unregisterTransaction();
      isc_stmt_handle_impl0.setExecutionPlan((String) null);
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      isc_stmt_handle_impl1.getRsr_rdb();
      isc_blob_handle_impl0.setDb((isc_db_handle_impl) null);
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl1);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((GDSHelper) null, 1, 3, isc_stmt_handle_impl0, (FBObjectListener.FetcherListener) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.462183341863959
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.removeExtensionParams();
      databaseParameterBufferImp0.deepCopy();
      databaseParameterBufferImp0.removeExtensionParams();
      DummyCallableStatementMetaData dummyCallableStatementMetaData0 = new DummyCallableStatementMetaData();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher1.setFetchSize(400);
      fBCachedFetcher1.isLast();
      fBCachedFetcher0.last();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher1.absolute(102);
      fBCachedFetcher1.getFetchSize();
      fBCachedFetcher0.first();
      fBCachedFetcher1.relative(400);
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.last();
      fBCachedFetcher1.getRowNum();
      // Undeclared exception!
      try { 
        fBCachedFetcher1.updateRow((byte[][]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.statement = isc_stmt_handle_impl0.statement;
      isc_stmt_handle_impl0.getRsr_rdb();
      isc_stmt_handle_impl0.setRsr_rdb((org.firebirdsql.gds.impl.wire.isc_db_handle_impl) null);
      isc_stmt_handle_impl0.setStatementType((byte)116);
      isc_stmt_handle_impl0.setStatementType((byte)116);
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.getTr();
      isc_stmt_handle_impl0.registerTransaction((AbstractIscTrHandle) null);
      XSQLDA xSQLDA0 = new XSQLDA(0);
      xSQLDA0.sqln = (int) (byte)116;
      xSQLDA0.sqld = 4;
      xSQLDA0.sqln = 4;
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      isc_stmt_handle_impl0.setRsr_rdb((org.firebirdsql.gds.impl.wire.isc_db_handle_impl) null);
      xSQLDA0.sqld = 5;
      isc_stmt_handle_impl0.setExecutionPlan((String) null);
      isc_stmt_handle_impl0.unregisterTransaction();
      isc_stmt_handle_impl0.setExecutionPlan((String) null);
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = (int) (byte)116;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 5;
      intArray0[5] = 0;
      intArray0[6] = 5;
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      isc_blob_handle_impl1.getDb();
      isc_blob_handle_impl1.setDb((isc_db_handle_impl) null);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((GDSHelper) null, 116, (-1161), isc_stmt_handle_impl0, (FBObjectListener.FetcherListener) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setSelectCount(2234);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      isc_stmt_handle_impl0.unregisterTransaction();
      byte[] byteArray0 = new byte[8];
      isc_stmt_handle_impl0.statement = isc_stmt_handle_impl0.statement;
      isc_stmt_handle_impl0.setStatementType((byte)0);
      isc_stmt_handle_impl0.setExecutionPlan((String) null);
      isc_stmt_handle_impl0.setRsr_id((byte)0);
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      isc_stmt_handle_impl0.removeRows();
      isc_stmt_handle_impl0.registerTransaction(isc_tr_handle_impl0);
      XSQLDA xSQLDA0 = new XSQLDA(0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 5;
      intArray0[2] = 6;
      intArray0[3] = 4;
      intArray0[5] = 0;
      xSQLDA0.sqln = (int) (byte)0;
      xSQLDA0.ioLength = intArray0;
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      isc_stmt_handle_impl0.unregisterTransaction();
      isc_tr_handle_impl0.forgetResultSets();
      isc_stmt_handle_impl0.setExecutionPlan((String) null);
      isc_stmt_handle_impl0.unregisterTransaction();
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl1);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((GDSHelper) null, 0, 3, isc_stmt_handle_impl0, (FBObjectListener.FetcherListener) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.statement = isc_stmt_handle_impl0.statement;
      isc_stmt_handle_impl0.getRsr_rdb();
      isc_stmt_handle_impl0.setRsr_rdb((org.firebirdsql.gds.impl.wire.isc_db_handle_impl) null);
      isc_stmt_handle_impl0.setStatementType((byte) (-111));
      isc_stmt_handle_impl0.setExecutionPlan((String) null);
      isc_stmt_handle_impl0.setStatementType((byte) (-111));
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.getTr();
      isc_stmt_handle_impl0.registerTransaction((AbstractIscTrHandle) null);
      XSQLDA xSQLDA0 = new XSQLDA(0);
      xSQLDA0.sqln = (int) (byte) (-111);
      xSQLDA0.sqld = 4;
      xSQLDA0.sqln = 6;
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      isc_stmt_handle_impl0.setRsr_rdb((org.firebirdsql.gds.impl.wire.isc_db_handle_impl) null);
      xSQLDA0.sqld = 5;
      isc_stmt_handle_impl0.setExecutionPlan((String) null);
      isc_stmt_handle_impl0.unregisterTransaction();
      isc_stmt_handle_impl0.setExecutionPlan((String) null);
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = (int) (byte) (-111);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 5;
      intArray0[5] = 0;
      intArray0[6] = 5;
      xSQLDA0.ioLength = intArray0;
      xSQLDA0.sqld = 4;
      FileSystemHandling.shouldAllThrowIOExceptions();
      isc_stmt_handle_impl0.setUpdateCount(6);
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      isc_blob_handle_impl1.getDb();
      isc_blob_handle_impl0.setDb((isc_db_handle_impl) null);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((GDSHelper) null, (-1), (-1), isc_stmt_handle_impl0, (FBObjectListener.FetcherListener) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setDeleteCount(108);
      isc_stmt_handle_impl0.setSelectCount(108);
      isc_stmt_handle_impl0.unregisterTransaction();
      isc_stmt_handle_impl0.setAllRowsFetched(true);
      isc_stmt_handle_impl0.setExecutionPlan("rbD&^-uQ<;D4~");
      isc_stmt_handle_impl0.setRsr_id((-620));
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      isc_stmt_handle_impl0.removeRows();
      isc_stmt_handle_impl0.registerTransaction(isc_tr_handle_impl0);
      XSQLDA xSQLDA0 = new XSQLDA(2);
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      isc_stmt_handle_impl0.unregisterTransaction();
      isc_tr_handle_impl0.forgetResultSets();
      isc_stmt_handle_impl0.setExecutionPlan("rbD&^-uQ<;D4~");
      isc_stmt_handle_impl0.unregisterTransaction();
      isc_stmt_handle_impl0.setExecutionPlan("rbD&^-uQ<;D4~");
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      isc_stmt_handle_impl1.getRsr_rdb();
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((GDSHelper) null, (-2611), 4, isc_stmt_handle_impl0, (FBObjectListener.FetcherListener) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.field.FBField", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1403895206310386
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<FBLongVarCharField, byte[][]> function0 = (Function<FBLongVarCharField, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = fBResultSet0.row;
      unaryOperator0.compose((Function<? super FBCachedLongVarCharField, ? extends byte[][]>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, FBCachedBlobField> function1 = (Function<Object, FBCachedBlobField>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function1).apply(any());
      Function<Object, FBBlobField> function2 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function1);
      Function<Object, FBBlobField> function3 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      function2.compose((Function<? super Delayed, ?>) function3);
      Function<Object, FBBlobField> function4 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      UnaryOperator<Delayed> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Delayed> function5 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function6 = unaryOperator2.compose((Function<? super Object, ? extends Delayed>) function5);
      function4.andThen((Function<? super FBBlobField, ? extends Delayed>) function6);
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function7);
      Function.identity();
      function4.andThen((Function<? super FBBlobField, ? extends String>) function8);
      unaryOperator0.apply((byte[][]) null);
      Function<Object, FBBlobField> function9 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function4);
      function4.apply(linkedList0);
      function9.apply(function4);
      Function<Object, InputStream> function10 = (Function<Object, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super FBLongVarCharField, ?>) function4);
      unaryOperator0.andThen((Function<? super byte[][], ? extends InputStream>) function10);
      unaryOperator0.andThen((Function<? super byte[][], ? extends FBBlobField>) function9);
      linkedList0.add((byte[][]) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      fBCachedFetcher0.afterLast();
      fBCachedFetcher0.next();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      fBCachedFetcher0.previous();
      boolean boolean0 = fBCachedFetcher0.previous();
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<FBLongVarCharField, byte[][]> function0 = (Function<FBLongVarCharField, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.apply((byte[][]) null);
      Function<FBCachedLongVarCharField, byte[][]> function1 = unaryOperator0.compose((Function<? super FBCachedLongVarCharField, ? extends byte[][]>) function0);
      byte[][] byteArray0 = fBResultSet0.row;
      UnaryOperator<byte[][]> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply((byte[][]) null);
      linkedList0.replaceAll(unaryOperator1);
      UnaryOperator<byte[][]> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      unaryOperator2.apply((byte[][]) null);
      unaryOperator1.compose((Function<? super FBCachedLongVarCharField, ? extends byte[][]>) function1);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super byte[][], ? extends Integer>) function2);
      linkedList0.addFirst((byte[][]) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.push((byte[][]) null);
      linkedList1.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      boolean boolean0 = fBCachedFetcher0.absolute((-1));
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.451390040276498
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp1 = (DatabaseParameterBufferImp)databaseParameterBufferImp0.removeExtensionParams();
      databaseParameterBufferImp0.deepCopy();
      databaseParameterBufferImp1.removeExtensionParams();
      DummyCallableStatementMetaData dummyCallableStatementMetaData0 = new DummyCallableStatementMetaData();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      byte[][] byteArray0 = new byte[7][6];
      fBCachedFetcher0.insertRow(byteArray0);
      fBCachedFetcher0.setFetchSize((-880));
      boolean boolean0 = fBCachedFetcher0.isLast();
      fBCachedFetcher0.last();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.absolute(102);
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.first();
      fBCachedFetcher0.relative((-880));
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.last();
      fBCachedFetcher0.getRowNum();
      assertEquals((-880), fBCachedFetcher0.getFetchSize());
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean1 = fBCachedFetcher1.previous();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0140355237092673
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DummyCallableStatementMetaData dummyCallableStatementMetaData0 = new DummyCallableStatementMetaData();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      linkedList0.add((byte[][]) null);
      linkedList0.replaceAll(unaryOperator0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.deleteRow();
      // Undeclared exception!
      try { 
        linkedList0.set(520, (byte[][]) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 520, Size: 3
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8711604142318063
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<FBLongVarCharField, byte[][]> function0 = (Function<FBLongVarCharField, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = fBResultSet0.row;
      unaryOperator0.compose((Function<? super FBCachedLongVarCharField, ? extends byte[][]>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, FBCachedBlobField> function1 = (Function<Object, FBCachedBlobField>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function1).apply(any());
      Function<Object, FBBlobField> function2 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function1);
      Function<Object, FBBlobField> function3 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      Function<Object, FBBlobField> function4 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function6 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function7 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function6);
      function2.andThen((Function<? super FBBlobField, ? extends String>) function7);
      unaryOperator1.compose((Function<? super FBCachedBlobField, ?>) function7);
      Function<Object, FBBlobField> function8 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function4);
      function8.apply(function3);
      linkedList0.add((byte[][]) null);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      function2.apply(function8);
      Function<Object, InputStream> function9 = (Function<Object, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super byte[][], ? extends InputStream>) function9);
      Function<byte[][], FBBlobField> function10 = (Function<byte[][], FBBlobField>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super byte[][], ? extends FBBlobField>) function10);
      linkedList0.add((byte[][]) null);
      linkedList0.replaceAll(unaryOperator0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      fBCachedFetcher0.deleteRow();
      System.setCurrentTimeMillis((-32768L));
      fBCachedFetcher0.deleteRow();
      System.setCurrentTimeMillis(0L);
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9085352816435597
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<FBLongVarCharField, byte[][]> function0 = (Function<FBLongVarCharField, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, JMXPrincipal> function1 = (Function<Object, JMXPrincipal>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Delayed> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, Delayed> function2 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.compose((Function<? super Object, ? extends Delayed>) function2);
      Function.identity();
      Function<Object, JMXPrincipal> function3 = (Function<Object, JMXPrincipal>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function5 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      Function<String, String> function6 = Function.identity();
      function5.andThen((Function<? super String, ? extends String>) function6);
      Function.identity();
      Function.identity();
      Function<Object, InputStream> function7 = (Function<Object, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super byte[][], ? extends InputStream>) function7);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9913464134109882
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      databaseParameterBufferImp0.removeExtensionParams();
      GDSHelper gDSHelper0 = new GDSHelper((GDS) null, databaseParameterBufferImp0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[0][6];
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher1.next();
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher1.isBeforeFirst();
      byte[][] byteArrayArray0 = null;
      fBCachedFetcher1.insertRow((byte[][]) null);
      fBCachedFetcher1.isLast();
      fBCachedFetcher1.next();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper((GDS) null, databaseParameterBuffer0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[13][8];
      byteArray0[0] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[1] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[2] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[3] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[4] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[5] = gDSHelper0.BLOB_LENGTH_REQUEST;
      linkedList0.add(byteArray0);
      linkedList0.add(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0[2]);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList2);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = fBCachedFetcher0.isLast();
      boolean boolean1 = fBCachedFetcher0.isFirst();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.230923730266658
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DummyCallableStatementMetaData dummyCallableStatementMetaData0 = new DummyCallableStatementMetaData();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.last();
      fBCachedFetcher0.isFirst();
      boolean boolean0 = fBCachedFetcher0.previous();
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8407487285692812
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<FBLongVarCharField, byte[][]> function0 = (Function<FBLongVarCharField, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = fBResultSet0.row;
      unaryOperator0.compose((Function<? super FBCachedLongVarCharField, ? extends byte[][]>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, FBCachedBlobField> function1 = (Function<Object, FBCachedBlobField>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function1).apply(any());
      Function<Object, FBBlobField> function2 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function1);
      Function<Object, FBBlobField> function3 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      function2.compose((Function<? super Delayed, ?>) function3);
      Function<Object, FBBlobField> function4 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      UnaryOperator<Delayed> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Delayed> function5 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function6 = unaryOperator2.compose((Function<? super Object, ? extends Delayed>) function5);
      function4.andThen((Function<? super FBBlobField, ? extends Delayed>) function6);
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function7);
      function4.andThen((Function<? super FBBlobField, ? extends String>) function8);
      Function<Object, FBBlobField> function9 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function4);
      function4.apply(linkedList0);
      function9.apply(function4);
      Function<Object, InputStream> function10 = (Function<Object, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super FBLongVarCharField, ?>) function4);
      unaryOperator0.andThen((Function<? super byte[][], ? extends InputStream>) function10);
      unaryOperator0.andThen((Function<? super byte[][], ? extends FBBlobField>) function9);
      linkedList0.add((byte[][]) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      fBCachedFetcher0.next();
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      fBCachedFetcher0.previous();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      fBCachedFetcher0.previous();
      boolean boolean0 = fBCachedFetcher0.previous();
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<FBLongVarCharField, byte[][]> function0 = (Function<FBLongVarCharField, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = fBResultSet0.row;
      Function<FBCachedLongVarCharField, byte[][]> function1 = unaryOperator0.compose((Function<? super FBCachedLongVarCharField, ? extends byte[][]>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, FBCachedBlobField> function2 = (Function<Object, FBCachedBlobField>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function2).apply(any());
      Function<Object, FBBlobField> function3 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function3);
      Function<Object, FBBlobField> function4 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function3);
      UnaryOperator<Delayed> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Delayed> function5 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function6 = unaryOperator2.compose((Function<? super Object, ? extends Delayed>) function5);
      function4.andThen((Function<? super FBBlobField, ? extends Delayed>) function6);
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function7);
      function4.andThen((Function<? super FBBlobField, ? extends String>) function8);
      unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function4);
      function4.apply(linkedList0);
      unaryOperator0.compose((Function<? super FBCachedLongVarCharField, ? extends byte[][]>) function1);
      Function<Object, Integer> function9 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super byte[][], ? extends Integer>) function9);
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.push((byte[][]) null);
      UnaryOperator.identity();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.add((byte[][]) null);
      boolean boolean0 = fBCachedFetcher0.previous();
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.803719377768875
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<FBLongVarCharField, byte[][]> function0 = (Function<FBLongVarCharField, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = fBResultSet0.row;
      unaryOperator0.compose((Function<? super FBCachedLongVarCharField, ? extends byte[][]>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, FBCachedBlobField> function1 = (Function<Object, FBCachedBlobField>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function1).apply(any());
      Function<Object, FBBlobField> function2 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function1);
      Function<Object, FBBlobField> function3 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      Function<Object, FBBlobField> function4 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function6 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function7 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function6);
      function2.andThen((Function<? super FBBlobField, ? extends String>) function7);
      Function<Object, FBBlobField> function8 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function4);
      function8.apply(function3);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      function2.apply(function8);
      Function<Object, InputStream> function9 = (Function<Object, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super byte[][], ? extends InputStream>) function9);
      Function<byte[][], FBBlobField> function10 = (Function<byte[][], FBBlobField>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super byte[][], ? extends FBBlobField>) function10);
      linkedList0.add((byte[][]) null);
      linkedList0.replaceAll(unaryOperator0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      fBCachedFetcher0.deleteRow();
      System.setCurrentTimeMillis((-32768L));
      fBCachedFetcher0.deleteRow();
      System.setCurrentTimeMillis(0L);
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertTrue(fBCachedFetcher0.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.042592104175594
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<FBLongVarCharField, byte[][]> function0 = (Function<FBLongVarCharField, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.apply((byte[][]) null);
      unaryOperator0.compose((Function<? super FBCachedLongVarCharField, ? extends byte[][]>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, FBBlobField> function1 = (Function<Object, FBBlobField>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function1).apply(any());
      Function<Object, FBBlobField> function2 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function1);
      Function<Object, FBBlobField> function3 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      Function<Object, FBBlobField> function4 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function3);
      Function<Object, FBBlobField> function5 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function4);
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function7 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function6);
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function7);
      unaryOperator0.apply((byte[][]) null);
      function3.andThen((Function<? super FBBlobField, ? extends String>) function7);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      function3.apply(function8);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("DELETE");
      function5.apply(unaryOperator2);
      Function<byte[][], MockFileInputStream> function9 = (Function<byte[][], MockFileInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super byte[][], ? extends InputStream>) function9);
      unaryOperator0.andThen((Function<? super byte[][], ? extends FBBlobField>) function4);
      linkedList0.add((byte[][]) null);
      UnaryOperator<byte[][]> unaryOperator3 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator3);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.next();
      fBCachedFetcher0.insertRow((byte[][]) null);
      boolean boolean0 = fBCachedFetcher0.relative((-1));
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<FBLongVarCharField, byte[][]> function0 = (Function<FBLongVarCharField, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = fBResultSet0.row;
      Function<FBCachedLongVarCharField, byte[][]> function1 = unaryOperator0.compose((Function<? super FBCachedLongVarCharField, ? extends byte[][]>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, FBCachedBlobField> function2 = (Function<Object, FBCachedBlobField>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function2).apply(any());
      Function<Object, FBBlobField> function3 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function3);
      Function<Object, FBBlobField> function4 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function3);
      UnaryOperator<Delayed> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Delayed> function5 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function6 = unaryOperator2.compose((Function<? super Object, ? extends Delayed>) function5);
      function4.andThen((Function<? super FBBlobField, ? extends Delayed>) function6);
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function7);
      function4.andThen((Function<? super FBBlobField, ? extends String>) function8);
      unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function4);
      function4.apply(linkedList0);
      unaryOperator0.compose((Function<? super FBCachedLongVarCharField, ? extends byte[][]>) function1);
      Function<Object, Integer> function9 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super byte[][], ? extends Integer>) function9);
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.push((byte[][]) null);
      UnaryOperator.identity();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      boolean boolean0 = fBCachedFetcher0.absolute(403);
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.clone();
      Function<FBLongVarCharField, byte[][]> function0 = (Function<FBLongVarCharField, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = fBResultSet0.row;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, FBCachedBlobField> function1 = (Function<Object, FBCachedBlobField>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, FBBlobField> function2 = unaryOperator0.andThen((Function<? super Object, ? extends FBBlobField>) function1);
      Function<Object, FBBlobField> function3 = unaryOperator0.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      function2.compose((Function<? super Delayed, ?>) function3);
      Function<Object, FBBlobField> function4 = unaryOperator0.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      UnaryOperator<Delayed> unaryOperator1 = UnaryOperator.identity();
      Integer integer0 = new Integer(1755);
      Integer integer1 = new Integer(1755);
      Function<Object, Delayed> function5 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function6 = unaryOperator1.compose((Function<? super Object, ? extends Delayed>) function5);
      Function.identity();
      Function<Object, JMXPrincipal> function7 = (Function<Object, JMXPrincipal>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.andThen((Function<? super FBBlobField, ? extends JMXPrincipal>) function7);
      function4.andThen((Function<? super FBBlobField, ? extends Delayed>) function6);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function9 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function8);
      Function.identity();
      function4.andThen((Function<? super FBBlobField, ? extends String>) function9);
      linkedList0.push((byte[][]) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.spliterator();
      linkedList1.add((byte[][]) null);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBResultSet0.getRow());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4142790651247086
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<FBLongVarCharField, byte[][]> function0 = (Function<FBLongVarCharField, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = fBResultSet0.row;
      unaryOperator0.compose((Function<? super FBCachedLongVarCharField, ? extends byte[][]>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, FBCachedBlobField> function1 = (Function<Object, FBCachedBlobField>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, FBBlobField> function2 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function1);
      unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      Function<Object, FBBlobField> function3 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      UnaryOperator<Delayed> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Delayed> function4 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function5 = unaryOperator2.compose((Function<? super Object, ? extends Delayed>) function4);
      function3.andThen((Function<? super FBBlobField, ? extends Delayed>) function5);
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function7 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function6);
      function3.andThen((Function<? super FBBlobField, ? extends String>) function7);
      unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function3);
      function3.apply(linkedList0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList1.push((byte[][]) null);
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      linkedList5.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      linkedList5.spliterator();
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      fBCachedFetcher0.relative((-2041));
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      isc_stmt_handle_impl0.unregisterTransaction();
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-114);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      byteArray0[4] = (byte) (-10);
      isc_stmt_handle_impl0.unregisterTransaction();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d-o");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((List<byte[][]>) null, (FBObjectListener.FetcherListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9085352816435597
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      databaseParameterBuffer0.deepCopy();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper((GDS) null, databaseParameterBuffer0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][4];
      byteArray0[0] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[1] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[2] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[3] = gDSHelper0.BLOB_LENGTH_REQUEST;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      databaseParameterBuffer0.deepCopy();
      fBCachedFetcher0.updateRow((byte[][]) null);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      fBCachedFetcher1.next();
      boolean boolean0 = fBCachedFetcher0.isAfterLast();
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[][] byteArray0 = new byte[4][8];
      byteArray0[0] = null;
      byteArray0[1] = null;
      byteArray0[2] = null;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte) (-112);
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte)24;
      byteArray1[4] = (byte)10;
      byteArray1[5] = (byte)91;
      byteArray1[6] = (byte) (-53);
      byteArray1[7] = (byte)1;
      byteArray0[3] = byteArray1;
      isc_stmt_handle_impl.printRow(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      isc_stmt_handle_impl0.unregisterTransaction();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      linkedList0.pollFirst();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      try { 
        fBCachedFetcher0.absolute((-1));
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.711845135233912
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      linkedList0.clone();
      Function<FBLongVarCharField, byte[][]> function0 = (Function<FBLongVarCharField, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = fBResultSet0.row;
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, FBCachedBlobField> function1 = (Function<Object, FBCachedBlobField>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, FBBlobField> function2 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function1);
      Function<Object, FBBlobField> function3 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      function2.compose((Function<? super Delayed, ?>) function3);
      Function<Object, FBBlobField> function4 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      UnaryOperator<Delayed> unaryOperator2 = UnaryOperator.identity();
      Integer integer0 = new Integer(1755);
      Integer integer1 = new Integer(1755);
      UnaryOperator.identity();
      Function<Object, Delayed> function5 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function6 = unaryOperator2.compose((Function<? super Object, ? extends Delayed>) function5);
      Function.identity();
      Function<Object, JMXPrincipal> function7 = (Function<Object, JMXPrincipal>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.andThen((Function<? super FBBlobField, ? extends JMXPrincipal>) function7);
      Function<Object, Delayed> function8 = function4.andThen((Function<? super FBBlobField, ? extends Delayed>) function6);
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function10 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function9);
      Function<String, String> function11 = Function.identity();
      Function<Object, String> function12 = function10.andThen((Function<? super String, ? extends String>) function11);
      function3.andThen((Function<? super FBBlobField, ? extends String>) function12);
      Function<Object, FBBlobField> function13 = unaryOperator1.andThen((Function<? super Object, ? extends FBBlobField>) function2);
      function13.apply(unaryOperator1);
      unaryOperator1.compose((Function<? super FBLongVarCharField, ?>) function8);
      Function<Object, MockFileInputStream> function14 = (Function<Object, MockFileInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super byte[][], ? extends InputStream>) function14);
      unaryOperator0.andThen((Function<? super byte[][], ? extends FBBlobField>) function13);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      byte[][] byteArray1 = new byte[8][7];
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)16;
      byteArray2[1] = (byte)56;
      byteArray2[2] = (byte)46;
      byteArray2[3] = (byte)59;
      byteArray2[4] = (byte)81;
      byteArray2[5] = (byte)61;
      byteArray2[6] = (byte)126;
      byteArray2[7] = (byte) (-127);
      byteArray1[0] = byteArray2;
      byte[] byteArray3 = new byte[0];
      byteArray1[1] = byteArray3;
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)61;
      byteArray4[1] = (byte)59;
      byteArray1[2] = byteArray4;
      byte[] byteArray5 = new byte[0];
      byteArray1[3] = byteArray5;
      byte[] byteArray6 = new byte[4];
      byteArray6[0] = (byte)46;
      byteArray6[1] = (byte) (-127);
      byteArray6[2] = (byte)61;
      byteArray6[3] = (byte)59;
      byteArray1[4] = byteArray6;
      byte[] byteArray7 = new byte[3];
      byteArray7[0] = (byte)59;
      byteArray7[1] = (byte)123;
      byteArray7[2] = (byte)126;
      byteArray1[5] = byteArray7;
      byte[] byteArray8 = new byte[4];
      byteArray8[0] = (byte)126;
      byteArray8[1] = (byte)16;
      byteArray8[2] = (byte)81;
      byteArray8[3] = (byte)61;
      byteArray1[6] = byteArray8;
      byte[] byteArray9 = new byte[6];
      byteArray9[0] = (byte)61;
      byteArray9[1] = (byte)16;
      byteArray9[2] = (byte)126;
      byteArray9[3] = (byte) (-99);
      byteArray9[4] = (byte)123;
      byteArray9[5] = (byte)46;
      byteArray1[7] = byteArray9;
      fBCachedFetcher0.insertRow(byteArray1);
      assertFalse(fBCachedFetcher0.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isAfterLast();
      byte[][] byteArray0 = new byte[3][5];
      fBCachedFetcher0.setFetchSize(674);
      byte[] byteArray1 = new byte[4];
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray2 = new byte[2][4];
      byteArray2[1] = byteArray1;
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      FBCachedFetcher fBCachedFetcher2 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher2.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.874640740535752
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      DummyCallableStatementMetaData dummyCallableStatementMetaData0 = new DummyCallableStatementMetaData();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DummyCallableStatementMetaData dummyCallableStatementMetaData1 = new DummyCallableStatementMetaData();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator1 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[0][4];
      linkedList1.add(byteArray0);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList1.listIterator();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.afterLast();
      assertEquals(2, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.003930858659659
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.removeExtensionParams();
      DummyCallableStatementMetaData dummyCallableStatementMetaData0 = new DummyCallableStatementMetaData();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      UnaryOperator.identity();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.isBeforeFirst();
      byte[][] byteArray0 = new byte[1][9];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte) (-38);
      byteArray0[0] = byteArray1;
      fBCachedFetcher0.insertRow(byteArray0);
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.next();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4681399390162087
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isAfterLast();
      byte[][] byteArray0 = new byte[3][5];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      linkedList0.poll();
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray2 = new byte[2][4];
      byteArray2[0] = byteArray1;
      Predicate<byte[][]> predicate0 = Predicate.isEqual((Object) linkedList0);
      linkedList0.offer(byteArray2);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("+MW6~Z");
      jMXPrincipal0.getName();
      jMXPrincipal0.getName();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jMXPrincipal0);
      predicate0.or(predicate1);
      linkedList0.removeIf(predicate0);
      byteArray2[1] = byteArray1;
      fBCachedFetcher1.isBeforeFirst();
      // Undeclared exception!
      try { 
        fBCachedFetcher1.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp2 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp3 = (DatabaseParameterBufferImp)databaseParameterBufferImp1.deepCopy();
      DatabaseParameterBufferImp databaseParameterBufferImp4 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp5 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp6 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp7 = (DatabaseParameterBufferImp)databaseParameterBufferImp3.removeExtensionParams();
      DatabaseParameterBufferImp databaseParameterBufferImp8 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp9 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp10 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp11 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp12 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp13 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp7.removeExtensionParams();
      DatabaseParameterBufferImp databaseParameterBufferImp14 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp11.removeExtensionParams();
      DatabaseParameterBufferImp databaseParameterBufferImp15 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp16 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp17 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp18 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp19 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp20 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp21 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp22 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp23 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp24 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp11.deepCopy();
      DatabaseParameterBufferImp databaseParameterBufferImp25 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp26 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp27 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp28 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp12.deepCopy();
      DatabaseParameterBufferImp databaseParameterBufferImp29 = new DatabaseParameterBufferImp();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-114);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "os.arch");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "os.arch");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray1 = new byte[4][5];
      byteArray1[0] = null;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-114);
      linkedList0.add(byteArray1);
      byteArray2[1] = (byte) (-114);
      byteArray2[2] = (byte) (-114);
      byteArray2[3] = (byte) (-114);
      byteArray2[4] = (byte) (-114);
      byteArray1[3] = byteArray2;
      linkedList0.addFirst(byteArray1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setSelectCount(2234);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      isc_stmt_handle_impl0.unregisterTransaction();
      byte[] byteArray0 = new byte[8];
      isc_stmt_handle_impl0.statement = isc_stmt_handle_impl0.statement;
      isc_stmt_handle_impl0.setStatementType((byte)0);
      isc_stmt_handle_impl0.setExecutionPlan((String) null);
      isc_stmt_handle_impl0.setRsr_id((byte)0);
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      isc_stmt_handle_impl0.removeRows();
      isc_stmt_handle_impl0.registerTransaction(isc_tr_handle_impl0);
      XSQLDA xSQLDA0 = new XSQLDA(0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[3] = 4;
      intArray0[3] = 0;
      xSQLDA0.sqln = (int) (byte)0;
      xSQLDA0.ioLength = intArray0;
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      isc_stmt_handle_impl0.unregisterTransaction();
      isc_tr_handle_impl0.forgetResultSets();
      isc_stmt_handle_impl0.unregisterTransaction();
      isc_stmt_handle_impl0.setExecutionPlan((String) null);
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.relative(0);
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.close();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      DummyCallableStatementMetaData dummyCallableStatementMetaData0 = new DummyCallableStatementMetaData();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DummyCallableStatementMetaData dummyCallableStatementMetaData1 = new DummyCallableStatementMetaData();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator1 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isEmpty();
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[1][6];
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      linkedList4.add(byteArray0);
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      linkedList6.poll();
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList8 = new LinkedList<byte[][]>();
      linkedList8.add(byteArray0);
      linkedList3.containsAll(linkedList2);
      LinkedList<byte[][]> linkedList9 = new LinkedList<byte[][]>();
      linkedList1.add(byteArray0);
      linkedList4.add((byte[][]) null);
      LinkedList<byte[][]> linkedList10 = new LinkedList<byte[][]>();
      linkedList9.removeAll(linkedList6);
      linkedList9.add((byte[][]) null);
      linkedList7.clone();
      linkedList7.add((byte[][]) null);
      linkedList9.addFirst(byteArray0);
      LinkedList<byte[][]> linkedList11 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList12 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList13 = new LinkedList<byte[][]>();
      linkedList10.push((byte[][]) null);
      UnaryOperator.identity();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList12, (FBObjectListener.FetcherListener) null);
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      LinkedList<byte[][]> linkedList14 = new LinkedList<byte[][]>();
      linkedList1.add((byte[][]) null);
      fBCachedFetcher0.beforeFirst();
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[1][6];
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList2.offer(byteArray0);
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      linkedList4.add(byteArray0);
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      byte[][] byteArray1 = linkedList0.poll();
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      linkedList4.add(byteArray1);
      linkedList6.containsAll(linkedList4);
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      linkedList3.add(byteArray0);
      linkedList6.add(byteArray0);
      LinkedList<byte[][]> linkedList8 = new LinkedList<byte[][]>();
      linkedList8.removeAll(linkedList1);
      linkedList0.add(byteArray1);
      linkedList7.clone();
      linkedList8.add(byteArray0);
      linkedList3.addFirst(byteArray1);
      LinkedList<byte[][]> linkedList9 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList10 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList11 = new LinkedList<byte[][]>();
      linkedList3.push((byte[][]) null);
      UnaryOperator.identity();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList8, (FBObjectListener.FetcherListener) null);
      LinkedList<byte[][]> linkedList12 = new LinkedList<byte[][]>();
      linkedList0.add(byteArray1);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.4142790651247086
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[1][6];
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList2.offer(byteArray0);
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      linkedList4.add(byteArray0);
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      byte[][] byteArray1 = linkedList0.poll();
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      linkedList4.add(byteArray1);
      linkedList6.containsAll(linkedList4);
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      linkedList3.add(byteArray0);
      linkedList6.add(byteArray0);
      LinkedList<byte[][]> linkedList8 = new LinkedList<byte[][]>();
      linkedList8.removeAll(linkedList1);
      linkedList6.removeAll(linkedList8);
      linkedList0.add(byteArray1);
      linkedList7.clone();
      linkedList8.add(byteArray0);
      linkedList3.addFirst(byteArray1);
      LinkedList<byte[][]> linkedList9 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList10 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList11 = new LinkedList<byte[][]>();
      linkedList9.add(byteArray0);
      linkedList5.add(byteArray0);
      LinkedList<byte[][]> linkedList12 = new LinkedList<byte[][]>();
      linkedList9.add((byte[][]) null);
      linkedList4.add((byte[][]) null);
      LinkedList<byte[][]> linkedList13 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative((-1445));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[1][6];
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList2.offer(byteArray0);
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      linkedList4.add(byteArray0);
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      byte[][] byteArray1 = linkedList0.poll();
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      linkedList4.containsAll(linkedList6);
      linkedList4.add(byteArray1);
      linkedList6.containsAll(linkedList4);
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      linkedList3.add(byteArray0);
      linkedList6.add(byteArray0);
      LinkedList<byte[][]> linkedList8 = new LinkedList<byte[][]>();
      linkedList8.removeAll(linkedList1);
      linkedList6.removeAll(linkedList8);
      linkedList7.clone();
      linkedList8.add(byteArray0);
      linkedList3.addFirst(byteArray1);
      LinkedList<byte[][]> linkedList9 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList10 = new LinkedList<byte[][]>();
      linkedList3.push((byte[][]) null);
      UnaryOperator.identity();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList8, (FBObjectListener.FetcherListener) null);
      LinkedList<byte[][]> linkedList11 = new LinkedList<byte[][]>();
      linkedList0.add(byteArray1);
      linkedList8.removeLastOccurrence(linkedList1);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute(403);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp2 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp3 = (DatabaseParameterBufferImp)databaseParameterBufferImp1.deepCopy();
      DatabaseParameterBufferImp databaseParameterBufferImp4 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp5 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp6 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp7 = (DatabaseParameterBufferImp)databaseParameterBufferImp3.removeExtensionParams();
      databaseParameterBufferImp1.deepCopy();
      DatabaseParameterBufferImp databaseParameterBufferImp8 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp9 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp10 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp1.deepCopy();
      DatabaseParameterBufferImp databaseParameterBufferImp11 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp12 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp13 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp14 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp15 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp16 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp17 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp18 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp2.deepCopy();
      DatabaseParameterBufferImp databaseParameterBufferImp19 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp20 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp21 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp22 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp1.deepCopy();
      DatabaseParameterBufferImp databaseParameterBufferImp23 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp7.deepCopy();
      DatabaseParameterBufferImp databaseParameterBufferImp24 = new DatabaseParameterBufferImp();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.push((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      linkedList0.add((byte[][]) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute(403);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[16][6];
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList2.offer(byteArray0);
      byte[][] byteArray1 = new byte[6][8];
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)62;
      byteArray1[0] = byteArray2;
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)62;
      byteArray3[1] = (byte)62;
      byteArray3[2] = (byte)62;
      byteArray1[1] = byteArray3;
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte)62;
      byteArray1[2] = byteArray3;
      byte[] byteArray5 = new byte[2];
      byteArray5[0] = (byte)62;
      byteArray5[1] = (byte)62;
      byteArray1[3] = byteArray5;
      byte[] byteArray6 = new byte[6];
      byteArray6[0] = (byte)62;
      byteArray6[1] = (byte)62;
      byteArray6[2] = (byte)110;
      byteArray6[3] = (byte)62;
      byteArray6[4] = (byte)62;
      byteArray6[5] = (byte)62;
      byteArray1[4] = byteArray6;
      byte[] byteArray7 = new byte[3];
      byteArray7[0] = (byte)110;
      byteArray7[1] = (byte)110;
      byteArray7[2] = (byte)110;
      byteArray1[5] = byteArray7;
      linkedList2.add(byteArray1);
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      linkedList4.add(byteArray0);
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      byte[][] byteArray8 = linkedList0.poll();
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      linkedList4.add(byteArray8);
      linkedList6.containsAll(linkedList4);
      linkedList3.addAll((Collection<? extends byte[][]>) linkedList2);
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      linkedList3.add(byteArray0);
      linkedList6.add(byteArray0);
      LinkedList<byte[][]> linkedList8 = new LinkedList<byte[][]>();
      linkedList8.removeAll(linkedList1);
      linkedList6.add(byteArray0);
      linkedList1.clone();
      LinkedList<byte[][]> linkedList9 = new LinkedList<byte[][]>();
      linkedList4.add(byteArray0);
      linkedList6.addFirst(byteArray0);
      LinkedList<byte[][]> linkedList10 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList11 = new LinkedList<byte[][]>();
      linkedList6.add(byteArray8);
      LinkedList<byte[][]> linkedList12 = new LinkedList<byte[][]>();
      linkedList11.push(byteArray8);
      linkedList7.push(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList3, (FBObjectListener.FetcherListener) null);
      linkedList6.add(byteArray0);
      linkedList1.removeLastOccurrence(linkedList6);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute(403);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[16][6];
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList2.offer(byteArray0);
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      linkedList4.add(byteArray0);
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      byte[][] byteArray1 = linkedList0.poll();
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      linkedList4.add(byteArray1);
      linkedList6.containsAll(linkedList4);
      linkedList3.addAll((Collection<? extends byte[][]>) linkedList2);
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      linkedList3.add(byteArray0);
      linkedList6.add(byteArray0);
      LinkedList<byte[][]> linkedList8 = new LinkedList<byte[][]>();
      linkedList6.add(byteArray0);
      LinkedList<Integer> linkedList9 = new LinkedList<Integer>();
      LinkedList<JMXPrincipal> linkedList10 = new LinkedList<JMXPrincipal>();
      LinkedList<byte[][]> linkedList11 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList12 = new LinkedList<byte[][]>();
      linkedList12.add(byteArray1);
      linkedList4.addFirst(byteArray0);
      LinkedList<byte[][]> linkedList13 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList14 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList15 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList16 = new LinkedList<byte[][]>();
      linkedList4.add(byteArray0);
      linkedList4.spliterator();
      linkedList15.add(byteArray0);
      linkedList7.add(byteArray1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList12, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isEmpty();
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[16][6];
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList2.offer(byteArray0);
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      linkedList4.add(byteArray0);
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      byte[][] byteArray1 = linkedList0.poll();
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      linkedList4.add(byteArray1);
      linkedList6.containsAll(linkedList4);
      linkedList3.addAll((Collection<? extends byte[][]>) linkedList2);
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      linkedList3.add(byteArray0);
      linkedList6.add(byteArray0);
      LinkedList<byte[][]> linkedList8 = new LinkedList<byte[][]>();
      linkedList8.removeAll(linkedList1);
      linkedList6.add(byteArray0);
      LinkedList<Integer> linkedList9 = new LinkedList<Integer>();
      linkedList4.clone();
      LinkedList<byte[][]> linkedList10 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList11 = new LinkedList<byte[][]>();
      linkedList11.add(byteArray1);
      linkedList4.addFirst(byteArray0);
      LinkedList<byte[][]> linkedList12 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList13 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList14 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList15 = new LinkedList<byte[][]>();
      linkedList4.add(byteArray0);
      linkedList4.spliterator();
      linkedList14.add(byteArray0);
      linkedList7.add(byteArray1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList11, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isEmpty();
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[22][6];
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList2.offer(byteArray0);
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      linkedList4.add(byteArray0);
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      linkedList5.poll();
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      linkedList6.containsAll(linkedList4);
      linkedList5.addAll((Collection<? extends byte[][]>) linkedList2);
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      linkedList3.add(byteArray0);
      linkedList6.add(byteArray0);
      LinkedList<byte[][]> linkedList8 = new LinkedList<byte[][]>();
      linkedList3.offer((byte[][]) null);
      linkedList8.removeAll(linkedList1);
      linkedList6.add(byteArray0);
      linkedList4.pop();
      LinkedList<String> linkedList9 = new LinkedList<String>();
      LinkedList<byte[][]> linkedList10 = new LinkedList<byte[][]>();
      linkedList2.addFirst(byteArray0);
      LinkedList<byte[][]> linkedList11 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList12 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList13 = new LinkedList<byte[][]>();
      linkedList4.push((byte[][]) null);
      LinkedList<byte[][]> linkedList14 = new LinkedList<byte[][]>();
      linkedList11.add(byteArray0);
      linkedList5.spliterator();
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList15 = new LinkedList<byte[][]>();
      linkedList11.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList10, (FBObjectListener.FetcherListener) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList3, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher1.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp2 = new DatabaseParameterBufferImp();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[1][9];
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>(linkedList0);
      linkedList1.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-114);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "os.arch");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "os.arch");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray1 = new byte[4][5];
      byteArray1[0] = byteArray0;
      linkedList0.spliterator();
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-114);
      byteArray2[1] = (byte) (-114);
      byteArray2[2] = (byte) (-114);
      byteArray2[3] = (byte) (-114);
      byteArray2[4] = (byte) (-114);
      byteArray1[3] = byteArray2;
      linkedList0.addFirst(byteArray1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5403058252265167
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DummyCallableStatementMetaData dummyCallableStatementMetaData0 = new DummyCallableStatementMetaData();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DummyCallableStatementMetaData dummyCallableStatementMetaData1 = new DummyCallableStatementMetaData();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator1 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.afterLast();
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-114);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "os.arch");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "os.arch");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray1 = new byte[4][5];
      byteArray1[0] = null;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-114);
      byteArray2[1] = (byte) (-114);
      byteArray2[2] = (byte) (-114);
      byteArray2[3] = (byte) (-114);
      byteArray2[4] = (byte) (-114);
      byteArray1[3] = byteArray2;
      linkedList0.addFirst(byteArray1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      DummyCallableStatementMetaData dummyCallableStatementMetaData0 = new DummyCallableStatementMetaData();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DummyCallableStatementMetaData dummyCallableStatementMetaData1 = new DummyCallableStatementMetaData();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator1 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.unregisterTransaction();
      isc_stmt_handle_impl0.setAllRowsFetched(false);
      isc_stmt_handle_impl0.statement = isc_stmt_handle_impl0.statement;
      isc_stmt_handle_impl0.getRsr_rdb();
      isc_stmt_handle_impl0.setRsr_rdb((org.firebirdsql.gds.impl.wire.isc_db_handle_impl) null);
      isc_stmt_handle_impl0.setStatementType((byte) (-111));
      isc_stmt_handle_impl0.setExecutionPlan((String) null);
      isc_stmt_handle_impl0.setStatementType((byte) (-111));
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.getTr();
      isc_stmt_handle_impl0.removeRows();
      isc_stmt_handle_impl0.registerTransaction((AbstractIscTrHandle) null);
      XSQLDA xSQLDA0 = new XSQLDA(0);
      xSQLDA0.sqln = (int) (byte) (-111);
      xSQLDA0.sqld = 6;
      xSQLDA0.sqln = 6;
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      isc_stmt_handle_impl0.setRsr_rdb((org.firebirdsql.gds.impl.wire.isc_db_handle_impl) null);
      xSQLDA0.sqld = 5;
      isc_stmt_handle_impl0.setExecutionPlan((String) null);
      isc_stmt_handle_impl0.unregisterTransaction();
      isc_stmt_handle_impl0.setExecutionPlan((String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^s.J:X]4o");
      isc_stmt_handle_impl0.setUpdateCount(6);
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      isc_blob_handle_impl1.getDb();
      isc_blob_handle_impl0.setDb((isc_db_handle_impl) null);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((GDSHelper) null, (-1), (-1), isc_stmt_handle_impl0, (FBObjectListener.FetcherListener) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }
}
