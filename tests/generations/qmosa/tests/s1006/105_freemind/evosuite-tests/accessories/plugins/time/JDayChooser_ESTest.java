/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 19:52:54 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import freemind.modes.mindmapmode.MindMapMode;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.PopupMenu;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.PrintStream;
import java.text.ChoiceFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.help.ForwardAction;
import javax.help.JHelpContentViewer;
import javax.help.plaf.basic.BasicContentViewerUI;
import javax.swing.AbstractButton;
import javax.swing.Box;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFormattedTextField;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicToolBarUI;
import javax.swing.plaf.metal.MetalComboBoxUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.text.AsyncBoxView;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.JTextComponent;
import javax.swing.text.LabelView;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.xalan.processor.ProcessorImport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0989296412568947
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initialized = false;
      jDayChooser0.setDayBordersVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Stack<String> stack0 = new Stack<String>();
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatter) null);
      jFormattedTextField0.setDoubleBuffered(false);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jFormattedTextField0.new AccessibleJTextComponent();
      JPanel jPanel0 = new JPanel();
      assertFalse(jPanel0.isFocusTraversalPolicySet());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1816207917145363
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange("y", (-755.5F), (float) 1L);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      jDayChooser0.setMaxDayCharacters(2);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2022960485657013
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(1300L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 4035.618F;
      floatArray0[1] = (float) 1300L;
      floatArray0[2] = (float) 1300L;
      floatArray0[3] = (float) 1300L;
      floatArray0[4] = (float) 1300L;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) 1300L;
      systemColor0.getComponents(floatArray0);
      Color.getColor("day");
      jTextPane0.getMinimumSize();
      Dimension dimension0 = jTextPane0.getPreferredScrollableViewportSize();
      jTextPane0.getCaretPosition();
      defaultStyledDocument0.getUndoableEditListeners();
      jDayChooser0.setMinimumSize(dimension0);
      dimension0.width = 320;
      jDayChooser0.drawWeeks();
      jDayChooser0.setMonth(320);
      jDayChooser0.getDay();
      jDayChooser0.setMaxDayCharacters(4);
      DefaultEditorKit.CopyAction defaultEditorKit_CopyAction0 = new DefaultEditorKit.CopyAction();
      ActionEvent actionEvent0 = new ActionEvent(defaultEditorKit_CopyAction0, 1357, "", 4, 320);
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.APPLICATION_MODAL;
      ActionEvent actionEvent1 = new ActionEvent(dialog_ModalityType0, 42, "");
      actionEvent1.paramString();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.text.DefaultEditorKit$CopyAction cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2523551991239104
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      JButton jButton0 = new JButton("pKt^Rc");
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getTextNonSelectionColor();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      jTable0.getSelectionBackground();
      jDayChooser0.setMonth(307);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JPanel jPanel0 = new JPanel();
      jDayChooser1.setEnabled(false);
      jDayChooser1.setFocus();
      // Undeclared exception!
      try { 
        jDayChooser1.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1816371972687603
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Box.createGlue();
      jDayChooser0.setDay(1104);
      jDayChooser0.getInsets();
      MenuSelectionManager.defaultManager();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d-o [\"zBE0");
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      MockDate mockDate0 = new MockDate(728L);
      jDayChooser0.setSelectableDateRange(date0, mockDate0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = AbstractButton.ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getTextNonSelectionColor();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.206339187140408
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mnFA7PP}5I`a0SkvE<");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FreeMind.app/Contents/Resources/Java/");
      JDayChooser jDayChooser0 = new JDayChooser();
      StyleContext.getDefaultStyleContext();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      defaultStyledDocument0.getCharacterElement(18);
      Element element0 = defaultStyledDocument0.getBidiRootElement();
      LabelView labelView0 = new LabelView(element0);
      labelView0.getFont();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setMonth(18);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3184632850753837
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(1104);
      Insets insets0 = new Insets(1104, 1104, 1104, 1104);
      MenuSelectionManager.defaultManager();
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setDoubleBuffered(false);
      jDayChooser0.setFocus();
      jDayChooser0.setMaxDayCharacters(2000);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMonth(1104);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser1.setMaxDayCharacters((-1));
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getSelectedDay();
      jDayChooser0.setFocus();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Stack<String> stack0 = new Stack<String>();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1581386552881403
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Box.createGlue();
      jDayChooser0.setDay(1104);
      jDayChooser0.getInsets();
      jDayChooser0.firePropertyChange("8^S.8M", 2201.0F, (float) (-2));
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.setDay(0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.215646445472817
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = AbstractButton.ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      menuSelectionManager1.setSelectedPath((MenuElement[]) null);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPopupMenu0, 27, 27, 586, 38, 'n', (MenuElement[]) null, menuSelectionManager1);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setMonth(1918);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JPanel jPanel0 = new JPanel();
      assertFalse(jPanel0.isFocusCycleRoot());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.2404634190850943
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = AbstractButton.ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      menuSelectionManager1.setSelectedPath((MenuElement[]) null);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPopupMenu0, 27, 27, 586, 38, 'n', (MenuElement[]) null, menuSelectionManager1);
      jPopupMenu0.transferFocus();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.contains(38, 586);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setMonth(38);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "West");
      Color color0 = Color.cyan;
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      Locale locale0 = jMonthChooser0.getLocale();
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      ActionEvent actionEvent0 = new ActionEvent(calendar0, 44, "day", (-570L), 44);
      actionEvent0.setSource((Object) null);
      actionEvent0.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      JButton jButton0 = new JButton("pKt^Rc");
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 47, "O[");
      Object object1 = new Object();
      actionEvent0.paramString();
      actionEvent0.paramString();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"pKt^Rc\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1070155606793213
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.weekdayForeground;
      jDayChooser0.firePropertyChange("}hHxej[o|FrMT.oM[", 950.133F, 1897.0F);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      jDayChooser0.setMaxDayCharacters(2);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2297488881270033
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(6, 48, 48, 48, 6);
      jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jDayChooser0.getSelectedDay();
      jDayChooser0.setMinSelectableDate((Date) null);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMonth(722);
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      
      jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1700300170400846
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      jDayChooser0.setForeground(color0);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Locale locale0 = jDayChooser0.getLocale();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.167881841697888
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fieldset");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JiBX_bindingFactory.getInstance();
      jDayChooser0.updateUI();
      jDayChooser0.setEnabled(true);
      jDayChooser0.invalidate();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 822);
      DefaultEditorKit.CopyAction defaultEditorKit_CopyAction0 = new DefaultEditorKit.CopyAction();
      focusEvent0.setSource(defaultEditorKit_CopyAction0);
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2255741091275336
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(278);
      Insets insets0 = jDayChooser0.getInsets();
      insets0.set(278, 278, 278, 1766);
      jDayChooser0.firePropertyChange("8^S.8M", (float) 278, (float) 278);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setDoubleBuffered(false);
      jDayChooser0.setFocus();
      jDayChooser0.setMaxDayCharacters(12);
      jDayChooser0.setMonth(27);
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2021778473985765
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getSundayForeground();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      mockSimpleDateFormat0.getTimeZone();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2704;
      doubleArray0[1] = (double) 2704;
      doubleArray0[3] = (double) 2704;
      doubleArray0[3] = (double) 2704;
      doubleArray0[4] = (double) 2704;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      Color color0 = Color.green;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDecorationBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mnFA7PP}5I`a0SkvE<");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mnFA7PP}5I`a0SkvE<");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mnFA7PP}5I`a0SkvE<");
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte) (-110);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      StyleContext.getDefaultStyleContext();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      defaultStyledDocument0.getParagraphElement(14);
      defaultStyledDocument0.getCharacterElement(18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Element element0 = defaultStyledDocument0.getBidiRootElement();
      LabelView labelView0 = new LabelView(element0);
      labelView0.isStrikeThrough();
      Font font0 = labelView0.getFont();
      font0.canDisplay('%');
      jDayChooser0.setFont(font0);
      JPanel jPanel0 = new JPanel();
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.132643849015092
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mnFAP}5I`a0SkvE<");
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3jUWIh-I8RLi8C-@");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Color color0 = Color.cyan;
      Color.getColor("30", color0);
      Color color1 = Color.BLUE;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.05861803958271
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Color color0 = Color.lightGray;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.271977382599404
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Component component0 = Box.createGlue();
      jDayChooser0.add(component0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jDayChooser0.createVolatileImage(0, 0);
      jDayChooser0.setDayBordersVisible(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getDisabledIcon();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      defaultTreeCellRenderer0.setLeafIcon((Icon) null);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getSundayForeground();
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 878, 0L, 48, (-600), 'd');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMonth(13);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.23080938526805
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getLocale();
      int int0 = 507;
      jDayChooser0.isFocusable();
      MockDate mockDate0 = new MockDate(964, 964, 964, 964, 507);
      jDayChooser0.setMaxDayCharacters(507);
      int int1 = 2162;
      jDayChooser0.isDecorationBackgroundVisible();
      int int2 = (-100);
      jDayChooser0.initDecorations();
      char char0 = '~';
      MenuElement[] menuElementArray0 = new MenuElement[3];
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem0;
      MindMapMode mindMapMode0 = new MindMapMode();
      PopupMenu popupMenu0 = null;
      try {
        popupMenu0 = new PopupMenu("WrBw,V");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      JButton jButton0 = new JButton("pKt^Rc");
      JButton jButton1 = new JButton("f[ZF/q5|n!");
      ActionEvent actionEvent0 = new ActionEvent("f[ZF/q5|n!", 3, "YC9')\"A3Ua[=");
      Object object1 = new Object();
      actionEvent0.setSource(object0);
      actionEvent0.paramString();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2412887691219403
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      JButton jButton0 = new JButton("pKt^Rc");
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      JTextField jTextField0 = new JTextField("O[");
      MenuElement[] menuElementArray0 = new MenuElement[8];
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      menuElementArray0[2] = (MenuElement) jPopupMenu0;
      menuElementArray0[3] = (MenuElement) jPopupMenu0;
      menuElementArray0[4] = (MenuElement) jPopupMenu0;
      menuElementArray0[5] = (MenuElement) jPopupMenu0;
      menuElementArray0[6] = (MenuElement) jPopupMenu0;
      menuElementArray0[7] = (MenuElement) jPopupMenu0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jTextField0, 586, 47, 47, (-460), '>', menuElementArray0, menuSelectionManager0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setMonth(328);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JPanel jPanel0 = new JPanel();
      assertFalse(jPanel0.isFocusCycleRoot());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.254485192625149
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3675, 0L, 20, 0, 'C');
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day", false);
      JRadioButtonMenuItem jRadioButtonMenuItem1 = new JRadioButtonMenuItem("day");
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[2];
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem1;
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jRadioButtonMenuItem1, 5, 333L, 15, 20, 'C', menuElementArray0, menuSelectionManager0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser1.setMonthChooser(jMonthChooser0);
      jDayChooser1.setMaxDayCharacters(9);
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = AbstractButton.ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      menuSelectionManager1.setSelectedPath((MenuElement[]) null);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      defaultStyledDocument0.getBidiRootElement();
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      int int0 = SwingConstants.PREVIOUS;
      defaultStyledDocument0.getUndoableEditListeners();
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.164847049148182
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mnFA7PP}5I`a0SkvE<");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mnFA7PP}5I`a0SkvE<");
      JTableHeader jTableHeader0 = new JTableHeader();
      KeyEvent keyEvent0 = new KeyEvent(jTableHeader0, 3287, 3287, (-3517), (-2618), 'w');
      MockDate mockDate0 = new MockDate((-2342), 3287, (-3517), 1549, (-2618));
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-2342));
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setMonth(1549);
      jDayChooser0.setMonth(6);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2000817895580993
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-2128));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      Locale locale0 = Locale.KOREA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      ForwardAction forwardAction0 = new ForwardAction(mockGregorianCalendar0);
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      jDayChooser0.setWeekdayForeground((Color) null);
      jDayChooser0.drawDays();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.1609595917354776
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jDayChooser0.init();
      MockDate mockDate0 = new MockDate(964, 964, 964, 964, 964);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.09185472800677
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Component component0 = Box.createGlue();
      jDayChooser0.setDay(1104);
      jDayChooser0.repaint(1104, 0, 0, 1751474532);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jDayChooser0.setLocale(locale0);
      int int0 = 22;
      MockDate mockDate0 = new MockDate(3, 1981, 22, 22, 0);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      HierarchyBoundsListener hierarchyBoundsListener3 = AWTEventMulticaster.add(hierarchyBoundsListener2, (HierarchyBoundsListener) null);
      HierarchyBoundsListener hierarchyBoundsListener4 = AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener3);
      AWTEventMulticaster.remove(hierarchyBoundsListener3, hierarchyBoundsListener4);
      jDayChooser0.contains((-1906), 5);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(component0, 145, 145, 5, 1104, 'n', (-1995));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.2547931540957737
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = AbstractButton.ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      menuSelectionManager1.setSelectedPath((MenuElement[]) null);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPopupMenu0, 27, 27, 586, 38, 'n', (MenuElement[]) null, menuSelectionManager1);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setMonth(1918);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMonth(1918);
      jDayChooser1.getDay();
      jDayChooser1.setMaxSelectableDate((Date) null);
      ProcessorImport processorImport0 = new ProcessorImport();
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(processorImport0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1509516053141597
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.repaint(4456, 4456, (-3120), 563);
      jDayChooser0.addListeners(0);
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.4056136485847346
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getBackground();
      jDayChooser0.getFocusListeners();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getSundayForeground();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2380, (-1752), 34, 34, (-1075));
      jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jDayChooser0.getSelectedDay();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 5, (-3517), (-2140), 'c');
      MenuElement[] menuElementArray0 = new MenuElement[2];
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day", false);
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      JRadioButtonMenuItem jRadioButtonMenuItem1 = new JRadioButtonMenuItem("day");
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem1;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 5, 1920L, 0, 13, 'c', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.setKeyCode(0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setMonth(1046);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JButton jButton0 = new JButton("Metal");
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      jDayChooser0.setLayout(metalComboBoxUI_MetalComboBoxLayoutManager0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      defaultTableModel0.addColumn((Object) color0, (Vector) null);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      SystemColor systemColor0 = SystemColor.controlText;
      jDayChooser0.setForeground(color0);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.2021264500326914
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = AbstractButton.ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rolloverSelectedIcon");
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.minSelectableDate;
      Date date1 = jDayChooser0.defaultMinSelectableDate;
      GraphicContext graphicContext0 = new GraphicContext();
      graphicContext0.getColor();
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      basicToolBarUI0.getDockingColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.133742703431037
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Component component0 = Box.createGlue();
      jDayChooser0.add(component0);
      jDayChooser0.createVolatileImage(0, 0);
      jDayChooser0.setDayBordersVisible(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getDisabledIcon();
      defaultTreeCellRenderer0.setLeafIcon((Icon) null);
      Color color0 = defaultTreeCellRenderer0.getTextSelectionColor();
      Color.getColor("Dialog Plain 11", color0);
      Color color1 = color0.darker();
      jDayChooser0.setSundayForeground(color1);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      TimeZone timeZone0 = TimeZone.getTimeZone("JDayChooser");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      jDayChooser0.setCalendar(calendar0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0966040333564617
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.minSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setMinSelectableDate(date1);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1677452551206233
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f3j3&+!!pDH%p");
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3jUWIh-I8RLi8C-@");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Color color0 = Color.cyan;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#UZ7-Y%\"v:$lW");
      JDayChooser jDayChooser0 = new JDayChooser();
      MockFile mockFile0 = new MockFile("f3j3&+!!pDH%p");
      MockFile mockFile1 = new MockFile(mockFile0, "_\"MgbePYuu^sG");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Locale locale0 = Locale.GERMAN;
      mockFile1.getAbsoluteFile();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "3jUWIh-I8RLi8C-@", objectArray0);
      jDayChooser0.list(printStream0);
      assertEquals(23408L, mockFile1.length());
      
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2358379389334586
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getSundayForeground();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2704;
      doubleArray0[1] = (double) 2704;
      doubleArray0[2] = (double) 2704;
      doubleArray0[3] = (double) 2704;
      doubleArray0[4] = (double) 2704;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      mockSimpleDateFormat0.setNumberFormat(choiceFormat0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2704, false, jDayChooser0);
      Component component0 = focusEvent0.getOppositeComponent();
      focusEvent0.setSource(component0);
      focusEvent0.getOppositeComponent();
      focusEvent0.getOppositeComponent();
      focusEvent0.setSource(date1);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setEnabled(false);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(2704);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0587048806759154
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mnFA7PP}5I`a0SkvE<");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'ly\"2gOKC4&|}op");
      MockDate mockDate0 = new MockDate(386, (-1), 386, 25165824, 1311);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JPanel jPanel0 = new JPanel();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.2496525879491536
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Box.createGlue();
      jDayChooser0.setDay(1104);
      jDayChooser0.getInsets();
      MenuSelectionManager.defaultManager();
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setDoubleBuffered(false);
      jDayChooser1.getActionMap();
      jDayChooser1.setFocus();
      jDayChooser1.setMaxDayCharacters(2000);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setMonth(1104);
      jDayChooser1.getMaxDayCharacters();
      jDayChooser0.setDay(8944);
      Date date0 = jDayChooser1.maxSelectableDate;
      jDayChooser1.setMaxSelectableDate(date0);
      jDayChooser2.setDayBordersVisible(false);
      assertFalse(jDayChooser2.isDayBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1656232229640757
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      SystemColor systemColor0 = SystemColor.control;
      Color.getColor("Windows");
      systemColor0.getColorSpace();
      jDayChooser0.setWeekdayForeground(systemColor0);
      assertEquals(14, jDayChooser0.getDay());
      
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setDay(3558);
      jDayChooser0.setMonth(1);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0919032994006477
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize(0, 0);
      jDayChooser0.drawDays();
      Color color0 = Color.lightGray;
      jDayChooser0.decorationBackgroundColor = color0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      Color.getColor((String) null, 0);
      jDayChooser0.setDay(90);
      jDayChooser0.setMonth(63735);
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1105790055458042
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize(0, 0);
      jDayChooser0.drawDays();
      Color color0 = Color.lightGray;
      jDayChooser0.decorationBackgroundColor = color0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setDay(90);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setWeekOfYearVisible(false);
      jDayChooser1.init();
      assertFalse(jDayChooser1.isWeekOfYearVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1699680061509725
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 56;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1348), (-1348), 56, 0, 'v', 0);
      KeyEvent.getKeyModifiersText((-1348));
      InputEvent.getModifiersExText(0);
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.keyTyped(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      String string0 = "";
      JYearChooser jYearChooser0 = new JYearChooser();
      JSpinner jSpinner0 = jYearChooser0.spinner;
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jSpinner0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      JSpinner.ListEditor jSpinner_ListEditor0 = null;
      try {
        jSpinner_ListEditor0 = new JSpinner.ListEditor(jSpinner0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // model not a SpinnerListModel
         //
         verifyException("javax.swing.JSpinner$ListEditor", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.2543532534479716
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Box.createGlue();
      jDayChooser0.setDay(1104);
      jDayChooser0.getInsets();
      MenuSelectionManager.defaultManager();
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setDoubleBuffered(false);
      jDayChooser1.setFocus();
      jDayChooser1.setMaxDayCharacters(2000);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setMonth(1104);
      jDayChooser1.getMaxDayCharacters();
      jDayChooser2.setMaxDayCharacters((-1));
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(6, 48, 48, 48, 6);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jDayChooser0.getSelectedDay();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3517), 0, (-3517), 13, '~');
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day", false);
      JRadioButtonMenuItem jRadioButtonMenuItem1 = new JRadioButtonMenuItem("day");
      Stack<String> stack0 = new Stack<String>();
      JTable jTable0 = new JTable(stack0, stack0);
      Rectangle rectangle0 = jTable0.getCellRect((-1348), 13, true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.scrollRectToVisible(rectangle0);
      jDayChooser_DecoratorButton0.getDisabledIcon();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.1247934888088933
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getPropertyChangeListeners("o^");
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.1608966978625985
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mnFA7PP}5I`a0SkvE<");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mnFA7PP}5I`a0SkvE<");
      JTableHeader jTableHeader0 = new JTableHeader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5");
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.minSelectableDate;
      Date date1 = jDayChooser0.defaultMinSelectableDate;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date2 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setSelectableDateRange(date2, date2);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.212323078652402
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Box.createGlue();
      jDayChooser0.setDay(1104);
      jDayChooser0.getInsets();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-716L), 0, 34, ')', 0);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.1345967642426418
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      JDayChooser jDayChooser0 = new JDayChooser();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.setMonth((-445));
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMonth(18);
      assertEquals(1, jDayChooser1.getDay());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.2507331678339964
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = AbstractButton.ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      menuSelectionManager1.setSelectedPath((MenuElement[]) null);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPopupMenu0, 27, 27, 586, 38, 'n', (MenuElement[]) null, menuSelectionManager1);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      jDayChooser0.getSelectedDay();
      jDayChooser0.selectedDay = null;
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener2);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setDay(33);
      jDayChooser0.getDayPanel();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.24025919318805
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.requestFocus();
      jDayChooser0.getSelectedDay();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setDay(27);
      jDayChooser0.setMonth((-1854));
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(27, jDayChooser0.getDay());
      assertEquals(31, int0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.170005734881401
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear((-3510));
      jDayChooser0.getWeekdayForeground();
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-3510);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-3510);
      floatArray0[4] = (float) (-3510);
      floatArray0[5] = (float) 0;
      Color.RGBtoHSB(0, 0, 0, floatArray0);
      jDayChooser0.getDaysInMonth();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JHelpContentViewer jHelpContentViewer0 = new JHelpContentViewer();
      BasicContentViewerUI basicContentViewerUI0 = new BasicContentViewerUI(jHelpContentViewer0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getCharacterElement((-2317));
      AsyncBoxView asyncBoxView0 = new AsyncBoxView(element0, 0);
      // Undeclared exception!
      try { 
        asyncBoxView0.getGraphics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.View", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.list();
      jYearChooser0.getLocale();
      jDayChooser0.setYearChooser(jYearChooser0);
      int int0 = 1602;
      jDayChooser0.getUIClassID();
      // Undeclared exception!
      try { 
        jDayChooser0.setFocusTraversalKeys(1602, (Set<? extends AWTKeyStroke>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid focus traversal key identifier
         //
         verifyException("java.awt.Container", e);
      }
  }
}
