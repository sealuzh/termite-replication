/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 20:19:58 GMT 2019
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.gargoylesoftware.base.resource.jdbc.CallableStatementWrapper;
import com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper;
import java.awt.AWTEventMulticaster;
import java.awt.Button;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.awt.event.MouseWheelListener;
import java.awt.geom.Rectangle2D;
import java.net.MalformedURLException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.border.SoftBevelBorder;
import javax.swing.plaf.basic.BasicCheckBoxUI;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.metal.MetalPopupMenuSeparatorUI;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultTreeCellRenderer;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAlias;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.client.util.ApplicationFileWrappersImpl;
import net.sourceforge.squirrel_sql.fw.id.IntegerIdentifier;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.IndexInfo;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriver;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverPropertyCollection;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[8];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte)91;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[0] = "LMid7a#(6Y";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OG6N) *w");
      stringArray0[0] = "Z<T-)b%KrIVA[sL";
      JOptionPane jOptionPane0 = new JOptionPane();
      byte[] byteArray1 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z<T-)b%KrIVA[sL");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, "LMid7a#(6Y");
      // Undeclared exception!
      try { 
        DBUtil.getColumnNames((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[6];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertEquals(6, list0.size());
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(" schema = ", "ItBQYcyPQfK;5[U-%iE", "5AOz.{zvj", "'n", (-2), " schema = ", 40000, 40000, 3339, 8300, "ItBQYcyPQfK;5[U-%iE", " does not ", (-2), (-2), ";6PHz ");
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("DBUtil.error.bindblobfailure", ";6PHz ", " schema = ", "/Wd", (-2), "us-Q%gD(tu*9b", 1007, 3339, 1007, (-2262), "C5]25~%]3p`<[yD`", (String) null, 1003, (-1747), " schema = ");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.USER;
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[1];
      tableColumnInfoArray0[0] = tableColumnInfo1;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("/Wd", string0);
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>();
      String string0 = "e?_thR";
      String string1 = "DBUtil.info.bindblobmem";
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("e?_thR", "DBUtil.info.bindblobmem", "e?_thR");
      vector0.add((IDatabaseObjectInfo) databaseObjectInfo0);
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList(vector0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MetalPopupMenuSeparatorUI metalPopupMenuSeparatorUI0 = new MetalPopupMenuSeparatorUI();
      boolean boolean0 = DBUtil.typesAreEquivalent((-7), (-7));
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultIcon();
      Stack<ITableInfo> stack0 = new Stack<ITableInfo>();
      Stack<IDatabaseObjectInfo> stack1 = new Stack<IDatabaseObjectInfo>();
      stack1.setSize(3);
      List<ITableInfo> list0 = DBUtil.convertObjectToTableList(stack1);
      assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MetalPopupMenuSeparatorUI metalPopupMenuSeparatorUI0 = new MetalPopupMenuSeparatorUI();
      boolean boolean0 = DBUtil.typesAreEquivalent((-7), 17);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MetalPopupMenuSeparatorUI metalPopupMenuSeparatorUI0 = new MetalPopupMenuSeparatorUI();
      boolean boolean0 = DBUtil.typesAreEquivalent((-7), 16);
      boolean boolean1 = DBUtil.typesAreEquivalent(2, 2936);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      boolean boolean0 = DBUtil.typesAreEquivalent(16, (-2134));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(16, (-7));
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MetalPopupMenuSeparatorUI metalPopupMenuSeparatorUI0 = new MetalPopupMenuSeparatorUI();
      MetalPopupMenuSeparatorUI metalPopupMenuSeparatorUI1 = new MetalPopupMenuSeparatorUI();
      boolean boolean0 = DBUtil.typesAreEquivalent(16, 34);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("DBUtil.info.bindclobmem", "DBUtil.info.bindclobmem", "*.V,O|", "DBUtil.info.bindclobmem", 2004, "DBUtil.info.bindclobmem", 2006, (-5355), 2006, 323, "DBUtil.info.bindclobmem", (String) null, 2004, 1, "DBUtil.info.bindclobmem");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("baseDataSetViewerDestination.warning");
      DatabaseObjectType.createNewDatabaseObjectType(";4", (Icon) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-45);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-4);
      int int0 = DBUtil.replaceDistinctDataType(2004, tableColumnInfo0, (ISession) null);
      assertEquals(2004, int0);
      
      DatabaseObjectType.createNewDatabaseObjectType("", (Icon) null);
      System.setCurrentTimeMillis(323);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("DBUtil.info.bindclobmem", (String) null, "e3", "ItBQYcyPQfK;5[U-%iE", 3339, "DBUtil.info.bindclobmem", 8300, 40000, 44, 1752, " schema = ", "5AOz.{zvj", 5, 8300, "5AOz.{zvj");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[4];
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("2(F,:/Z|pp5US", "DBUtil.info.bindclobmem", (String) null, "varchar2($l char)", (-3), "#uzM;{mh48A(%", 3339, 44, 44, (-1047), "E|#~!>Shx~E4^2*7(", "DBUtil.info.bindclobmem", 44, (-1047), "us-Q%gD(tu*9b");
      tableColumnInfoArray0[0] = tableColumnInfo1;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      tableColumnInfoArray0[2] = tableColumnInfo0;
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.USER;
      tableColumnInfoArray0[3] = tableColumnInfo0;
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")");
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.add((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      defaultTreeCellRenderer0.addMouseListener(defaultCaret0);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.BEST_ROW_ID;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) null);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "2(F,:/Z|pp5US";
      stringArray0[0] = "Z<T-)b%KrIVA[sL";
      JOptionPane jOptionPane0 = new JOptionPane();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, "2(F,:/Z|pp5US");
      // Undeclared exception!
      try { 
        DBUtil.getColumnCount((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo((String) null, (String) null, (String) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SCHEMA;
      DatabaseObjectType.createNewDatabaseObjectType(":*D?,UH9!%Ko]");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SEQUENCE;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      String string0 = DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      assertNull(string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getPKColumnString((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MouseListener mouseListener0 = AWTEventMulticaster.add((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      defaultTreeCellRenderer0.addMouseListener(mouseListener0);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.BEST_ROW_ID;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBUtil.validateColumnNames((ITableInfo) null, dBCopyPlugin0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(" to 128.", " from ", " from ", "delete from RDB$GENERATORS where RDB$GENERATOR_NAME = '", 1772, " schema=", (-1), (-2105376123), (-585), 2, " that matched ", "ZX+$'p", 0, 58, "delete from RDB$GENERATORS where RDB$GENERATOR_NAME = '");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.INDEX_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      Icon icon0 = databaseObjectType0.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType(" that matched ", icon0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.TABLE;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.PRIMARY_KEY;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.INDEX_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.createNewDatabaseObjectType("Null 'dataset' argument.");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType4);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      TableColumnInfo tableColumnInfo1 = null;
      // Undeclared exception!
      try { 
        DBUtil.isBinaryType((TableColumnInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte)91;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OG6N) *w");
      stringArray0[0] = "Z<T-)b%KrIVA[sL";
      JOptionPane jOptionPane0 = new JOptionPane();
      byte[] byteArray1 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      // Undeclared exception!
      try { 
        DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, (-1150));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[0];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JOptionPane jOptionPane0 = new JOptionPane();
      JRootPane jRootPane0 = new JRootPane();
      jRootPane0.getFocusTraversalPolicy();
      JLayeredPane jLayeredPane0 = jRootPane0.getLayeredPane();
      jLayeredPane0.isValidateRoot();
      jRootPane0.setInheritsPopupMenu(false);
      jLayeredPane0.setDebugGraphicsOptions(65535);
      JScrollPane jScrollPane0 = new JScrollPane();
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate((ISQLConnection) null, "YQW+0,h]a`Vm(:B", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.PRIMARY_KEY;
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultIcon();
      DatabaseObjectType.createNewDatabaseObjectType("select seq_name from iisequence", (Icon) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getClosedIcon();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Blobs are not cacheable", "Blobs are not cacheable", "org.hibernate.type.DateType", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 905, "Length function is null for dialect=", (-2661), (-645), 2004, 0, (String) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 1073741823, 740, "2(F,:/Z|pp5US");
      Integer integer0 = new Integer(0);
      int int0 = DBUtil.replaceDistinctDataType(0, tableColumnInfo0, (ISession) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "fJ#pSHI0#q|F2m", "fJ#pSHI0#q|F2m");
      // Undeclared exception!
      try { 
        DBUtil.tableHasPrimaryKey((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Could not instantiate configurator [", "%}o0W%V=^>ka]", "qv?K6g$bU|n", "dVSpzb", 3346, "dVSpzb", 20, 23001, 304, 3346, "=TtVd!Wpzy.bU/m", (String) null, 1930, 3540, "qv?K6g$bU|n");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.PRIMARY_KEY;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType.createNewDatabaseObjectType("71_Ak");
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.PRIMARY_KEY;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JOptionPane jOptionPane0 = new JOptionPane();
      jOptionPane0.getBorder();
      JRootPane jRootPane0 = new JRootPane();
      jRootPane0.repaint();
      JLayeredPane jLayeredPane0 = jRootPane0.getLayeredPane();
      jLayeredPane0.invalidate();
      jRootPane0.setDoubleBuffered(true);
      JInternalFrame jInternalFrame0 = jOptionPane0.createInternalFrame(jLayeredPane0, "S~;]OTs*-Td8HJs>uJ");
      jRootPane0.getInputVerifier();
      jInternalFrame0.getFrameIcon();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "EDITWHERECOL_PREFERENCES";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "F,<|7]q";
      stringArray0[5] = "";
      stringArray0[6] = "EDITWHERECOL_PREFERENCES";
      stringArray0[7] = "kfN?AS!?kDza.j";
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JOptionPane jOptionPane0 = new JOptionPane();
      Box.createHorizontalBox();
      JRootPane jRootPane0 = new JRootPane();
      jRootPane0.getCursor();
      jRootPane0.getLayeredPane();
      jRootPane0.getFocusListeners();
      jRootPane0.getLayeredPane();
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList((IDatabaseObjectInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getPluginsUserSettingsDirectory();
      applicationFileWrappersImpl0.getExecutionLogFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.unload();
      applicationFileWrappersImpl2.getEditWhereColsFile();
      applicationFileWrappersImpl0.getUserPreferencesFile();
      applicationFileWrappersImpl2.getFAQFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getUserSettingsDirectory();
      applicationFileWrappersImpl2.getSquirrelHomeDir();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-111);
      byte byte0 = (byte)45;
      byteArray0[3] = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      dBCopyPlugin0.getWebSite();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "[;[a", "[4@dU.&h");
      // Undeclared exception!
      try { 
        DBUtil.getColumnName((ISQLConnection) null, (ITableInfo) null, 1231);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getSelectQuery(dBCopyPlugin0, "DBUtil.info.bindclobmem", (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8997313334935368
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Length function is null for dialect=", (String) null, "71_Ak", "org.hibernate.type.DateType", 0, "", 0, 91, 0, 91, (String) null, "org.hibernate.type.DateType", 0, 0, ")2PT+kva ah_GgG2;");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.PRIMARY_KEY;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getClosedIcon();
      DatabaseObjectType.createNewDatabaseObjectType(" ALTER COLUMN ", icon0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBUtil.isBinaryType(tableColumnInfo0);
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[7];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo(")2PT+kva ah_GgG2;", "", (String) null, (String) null, 2005, (String) null, 91, 827, 827, 2005, ")2PT+kva ah_GgG2;", "org.hibernate.type.DateType", 0, 1748, " in schema ");
      tableColumnInfoArray0[2] = tableColumnInfo1;
      tableColumnInfoArray0[3] = tableColumnInfo0;
      tableColumnInfoArray0[4] = tableColumnInfo0;
      tableColumnInfoArray0[5] = tableColumnInfo0;
      tableColumnInfoArray0[6] = tableColumnInfo0;
      DBUtil.getColumnList(tableColumnInfoArray0);
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo1);
      LinkedList<IDatabaseObjectInfo> linkedList0 = new LinkedList<IDatabaseObjectInfo>();
      DBUtil.convertObjectToTableList(linkedList0);
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList(tableColumnInfoArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<ITableInfo> linkedList0 = new LinkedList<ITableInfo>();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "c_I=`!-jDrj6");
      linkedList0.add((ITableInfo) null);
      List<IDatabaseObjectInfo> list0 = DBUtil.convertTableToObjectList(linkedList0);
      assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2(F,:/Z|pp5US");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sourceforge.squirrel_sql.fw.resources.LibraryResources");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sourceforge.squirrel_sql.fw.resources.LibraryResources");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.setSourceSession((ISession) null);
      dBCopyPlugin0.getDestSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("fixCase: unexpected exception: ", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "w:w=%U*^^nO>,n", "w:w=%U*^^nO>,n", 0, "net.sourceforge.squirrel_sql.fw.resources.LibraryResources", 0, 5145, 5145, (-6699), "e*", "Skipping FK (", 1814, 2467, "S:~v@6He\\B6B%;7}N4");
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      SQLDriver sQLDriver0 = new SQLDriver();
      assertNull(sQLDriver0.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DBUtil.typesAreEquivalent((-4299), 1007);
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier((-3761));
      // Undeclared exception!
      try { 
        integerIdentifier0.setString("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(3, (-3));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ST'q[+}6h");
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getDefaultClosedIcon();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      Stack<ITableInfo> stack0 = new Stack<ITableInfo>();
      // Undeclared exception!
      try { 
        DBUtil.convertTableToObjectList((List<ITableInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2(F,:/Z|pp5US");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2(F,:/Z|pp5US");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      doReturn((DatabaseObjectType) null).when(foreignKeyInfo0).getDatabaseObjectType();
      // Undeclared exception!
      try { 
        DBUtil.getSchemaNameFromDbObject(foreignKeyInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(" in schema ", "%startswith", "%startswith", "%startswith", 2005, "%startswith", 2005, 2005, (-5), Integer.MIN_VALUE, "({zhe\"MwWVG5(r", "({zhe\"MwWVG5(r", Integer.MIN_VALUE, (-188), "%startswith");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[7];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      tableColumnInfoArray0[2] = tableColumnInfo0;
      tableColumnInfoArray0[3] = tableColumnInfo0;
      tableColumnInfoArray0[4] = tableColumnInfo0;
      tableColumnInfoArray0[5] = tableColumnInfo0;
      tableColumnInfoArray0[6] = tableColumnInfo0;
      DBUtil.getColumnList(tableColumnInfoArray0);
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      String string0 = "=%.|1!Ly/";
      // Undeclared exception!
      try { 
        DBUtil.getColumnSql(dBCopyPlugin0, tableColumnInfo0, "=%.|1!Ly/", "({zhe\"MwWVG5(r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo((String) null, (String) null, (String) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SCHEMA;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SEQUENCE;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      String string0 = DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      assertNull(string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      basicCheckBoxUI1.getDefaultIcon();
      JRadioButton jRadioButton0 = new JRadioButton((Icon) null, false);
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(8300);
      Insets insets0 = softBevelBorder0.getBorderInsets((Component) jRadioButton0);
      softBevelBorder0.getBorderInsets((Component) jRadioButton0, insets0);
      jRadioButton0.setBorder(softBevelBorder0);
      jRadioButton0.getHierarchyListeners();
      basicCheckBoxUI1.getAccessibleChildrenCount(jRadioButton0);
      Box box0 = new Box(0);
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      box0.removeFocusListener(basicComboBoxEditor_UIResource0);
      Dimension dimension0 = box0.getMinimumSize();
      jRadioButton0.setMaximumSize(dimension0);
      jRadioButton0.isBorderPainted();
      MetalPopupMenuSeparatorUI metalPopupMenuSeparatorUI0 = new MetalPopupMenuSeparatorUI();
      metalPopupMenuSeparatorUI0.getBaseline(jRadioButton0, 121, 8300);
      metalPopupMenuSeparatorUI0.getPreferredSize(jRadioButton0);
      basicCheckBoxUI1.getBaselineResizeBehavior(jRadioButton0);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getInsertSQL(dBCopyPlugin0, "biMW84I:~", (ITableInfo) null, 1107);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2(F,:/Z|pp5US");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$[QQ$L9{g&gNYQI<\"A");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Pl AM44\"){2C,u");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[1];
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("9X{", "Pl AM44\"){2C,u", "71_Ak", "(xAZN2bc&kSc>UU", (-1448), (String) null, 1331, (-958), (-237), (byte) (-76), "float(15)", "$[QQ$L9{g&gNYQI<\"A", (-1), 1032, "$[QQ$L9{g&gNYQI<\"A");
      // Undeclared exception!
      try { 
        DBUtil.getColumnList(tableColumnInfoArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo(" left outer join ", "/home/ubuntu/termite/projects/102_squirrel-sql/plugins/dbcopy.jar", (String) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("/home/ubuntu/termite/projects/102_squirrel-sql/plugins/dbcopy.jar");
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType(" left outer join ");
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultLeafIcon();
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.UDT_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("/home/ubuntu/termite/projects/102_squirrel-sql/plugins/dbcopy.jar", icon0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      JComponent.getDefaultLocale();
      DatabaseObjectType.createNewDatabaseObjectType("&31%X&Cw>}c1rl:c= ", icon0);
      DatabaseObjectType.createNewDatabaseObjectType(" left outer join ");
      JInternalFrame jInternalFrame0 = new JInternalFrame(" that matched ", false, true, false, false);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.CATALOG;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(databaseObjectInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Box.createHorizontalBox();
      JRootPane jRootPane0 = new JRootPane();
      DBUtil dBUtil0 = new DBUtil();
      jRootPane0.getInputVerifier();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      // Undeclared exception!
      try { 
        DBUtil.sanityCheckPreferences((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBUtil.typesAreEquivalent(3, 3);
      String string0 = "sOs|suBVib=!5(Ct>M";
      JInternalFrame jInternalFrame0 = new JInternalFrame("sOs|suBVib=!5(Ct>M", false);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.height = (double) 3;
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      Rectangle2D.intersect(rectangle2D_Double0, rectangle0, rectangle0);
      rectangle0.setFrameFromCenter((double) 3, 208.1652971, (-3625.4), 0.0);
      jInternalFrame0.scrollRectToVisible(rectangle0);
      jInternalFrame0.list();
      ImageIcon imageIcon0 = new ImageIcon("sOs|suBVib=!5(Ct>M");
      String string1 = "\"SEQ-INCR\", ";
      String string2 = null;
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      basicCheckBoxUI1.getDefaultIcon();
      JRadioButton jRadioButton0 = new JRadioButton((Icon) null, false);
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(8300);
      softBevelBorder0.getBaselineResizeBehavior(jRadioButton0);
      Insets insets0 = softBevelBorder0.getBorderInsets((Component) jRadioButton0);
      softBevelBorder0.getBorderInsets((Component) jRadioButton0, insets0);
      basicCheckBoxUI1.getAccessibleChildrenCount(jRadioButton0);
      Box box0 = new Box(0);
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      box0.removeFocusListener(basicComboBoxEditor_UIResource0);
      Dimension dimension0 = box0.getMinimumSize();
      jRadioButton0.setMaximumSize(dimension0);
      jRadioButton0.isBorderPainted();
      MetalPopupMenuSeparatorUI metalPopupMenuSeparatorUI0 = new MetalPopupMenuSeparatorUI();
      dBCopyPlugin0.getSourceSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Application.splash.loadplugintime", ":fxFmq1.`", "):", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 1856, "DBUtil.error.firebirdcommit", (-2178), 3, (-2394), 93, "DBUtil.error.firebirdcommit", "`e*", 1777, 0, "WT+C.jXI=w&aC/+&");
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      SQLDriver sQLDriver0 = new SQLDriver();
      assertFalse(sQLDriver0.isJDBCDriverClassLoaded());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getSourceSession();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      dBCopyPlugin2.setSourceSession((ISession) null);
      dBCopyPlugin2.getSourceSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("DBUtil.error.firebirdcommit", "OM*{P", "`e*", "F&6Lb|OuvY +", 1777, ">^(p", 506, 1662, 1108, 1777, "org.hibernate.dialect.TypeNames", "Kbj^2c'\nvf((", (-1496), 1108, "18C|'O<L@sKaie");
      // Undeclared exception!
      try { 
        DBUtil.replaceOtherDataType((TableColumnInfo) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JOptionPane jOptionPane0 = new JOptionPane();
      JRootPane jRootPane0 = new JRootPane();
      jRootPane0.setInheritsPopupMenu(false);
      jRootPane0.setFocusable(false);
      jRootPane0.getInputVerifier();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getPluginUserSettingsFolder();
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      String string0 = DBUtil.fixCase((ISession) null, "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JOptionPane jOptionPane0 = new JOptionPane();
      JRootPane jRootPane0 = new JRootPane();
      JLayeredPane jLayeredPane0 = jRootPane0.getLayeredPane();
      jRootPane0.setInheritsPopupMenu(false);
      jRootPane0.setFocusable(false);
      jRootPane0.getInputVerifier();
      jLayeredPane0.getAlignmentY();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      String string0 = DBUtil.fixCase((ISession) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      basicCheckBoxUI1.getDefaultIcon();
      JRadioButton jRadioButton0 = new JRadioButton((Icon) null, false);
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(8300);
      softBevelBorder0.getBorderInsets((Component) jRadioButton0);
      Insets insets0 = new Insets(3, 3, 3, 3);
      basicCheckBoxUI1.getAccessibleChildrenCount(jRadioButton0);
      Box box0 = new Box(0);
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      box0.removeFocusListener(basicComboBoxEditor_UIResource0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, "call identity()", "(", (String) null, (-265), "r&lrS+DG(e", 3, 3, 1532, 3, (String) null, "zQh%s6jG", 0, 1532, "Application.splash.createSessionManager");
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getMaxColumnLengthSQL((ISession) null, tableColumnInfo0, "2(F,:/Z|pp5US", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      ConnectionWrapper connectionWrapper0 = null;
      try {
        connectionWrapper0 = new ConnectionWrapper((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.add((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      ArrayList<ITableInfo> arrayList1 = new ArrayList<ITableInfo>();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "XRI8_S", "P f$ghM{^GQ]");
      // Undeclared exception!
      try { 
        DBUtil.getForeignKeySQL(dBCopyPlugin0, (ITableInfo) null, arrayList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<ITableInfo> linkedList0 = new LinkedList<ITableInfo>();
      LinkedHashSet<IndexInfo> linkedHashSet0 = new LinkedHashSet<IndexInfo>();
      linkedHashSet0.spliterator();
      linkedList0.removeAll(linkedHashSet0);
      linkedList0.iterator();
      DBUtil.convertTableToObjectList(linkedList0);
      System.setCurrentTimeMillis(60000L);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2(F,:/Z|pp5US");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$[QQ$L9{g&gNYQI<\"A");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-76);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, "S-?=#o $]", "locate(?1, ?2)", "S-?=#o $]", (-237), "(ExAZN2bc&kSc>US", 40000, 1331, (-1994091956), 2, "N", "create temporary table if not exists", (-189), (-635), "r'Zx!.K\"4s$6Yce1*");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      int int0 = DBUtil.replaceDistinctDataType((-635), tableColumnInfo0, (ISession) null);
      assertEquals((-635), int0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.sameDatabaseType((ISession) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.remove(mouseWheelListener0, (MouseWheelListener) null);
      AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener1);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      defaultTreeCellRenderer0.addMouseWheelListener((MouseWheelListener) null);
      defaultTreeCellRenderer0.getDefaultLeafIcon();
      MetalPopupMenuSeparatorUI metalPopupMenuSeparatorUI0 = new MetalPopupMenuSeparatorUI();
      MetalPopupMenuSeparatorUI metalPopupMenuSeparatorUI1 = new MetalPopupMenuSeparatorUI();
      metalPopupMenuSeparatorUI1.getPreferredSize(defaultTreeCellRenderer0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Null 'dataset' argument.", (String) null, "", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-482), ":Kn},4qg3\"t", 604, 4, 4, (-482), "%$<PLx`]'[vC6@G", "<N D", 476, (-482), "select count(*) from ");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      DBUtil.typesAreEquivalent(2498, (-1764));
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      try { 
        MockURL.URL("'4;#$vR26zPu,b", "(", "(");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: '4;#$vr26zpu,b
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "2,:/Z|pp5US";
      stringArray0[1] = "Z<T-)b%KrIVA[sL";
      stringArray0[2] = "org.hibernte.lob.ReaderInputStream";
      JOptionPane jOptionPane0 = new JOptionPane();
      Box.createHorizontalBox();
      JRootPane jRootPane0 = new JRootPane();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke((-1510), 875);
      jRootPane0.unregisterKeyboardAction(keyStroke0);
      jRootPane0.grabFocus();
      JLayeredPane jLayeredPane0 = jRootPane0.getLayeredPane();
      jOptionPane0.createInternalFrame(jLayeredPane0, "org.hibernte.lob.ReaderInputStream");
      boolean boolean0 = DBUtil.typesAreEquivalent(151, 875);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DBUtil.typesAreEquivalent(1493, (-1994091956));
      // Undeclared exception!
      try { 
        MockURL.URL((String) null, "C`E|w9", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DBUtil.typesAreEquivalent(1493, 1493);
      // Undeclared exception!
      try { 
        MockURL.URL((String) null, "C`E|w9", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DBUtil.typesAreEquivalent(2, 2);
      String string0 = null;
      Button button0 = null;
      try {
        button0 = new Button("]}");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.add((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getWebSite();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "1.2", "http://www.squirrelsql.org");
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList((List<IDatabaseObjectInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[6] = "r&lrS+DG(e";
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin0, (ITableInfo) null, stringArray0[0], "RsiYI_>{@vo(#h4", stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = null;
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      HierarchyBoundsListener hierarchyBoundsListener1 = null;
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.isKeyword((ISession) null, "[;[a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DBUtil.setLastStatement("");
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.unload();
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl5 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl5.getUserSettingsDirectory();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "jS", (String) null, "r'pS~gGo!p\"RhL", 2822, "r'pS~gGo!p\"RhL", (-42), 5964, 2822, (-42), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "r'pS~gGo!p\"RhL", (-42), (-156), (String) null);
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("r'pS~gGo!p\"RhL", "_Gn", "jS", "Index 'series' out of range.", 2, " DROP NOT NULL", (-2135), (-42), 8300, 3434, "rxcx=t?1", "D:o:Q?j.n5\" hG3u", 3434, 2, "r'pS~gGo!p\"RhL");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[0];
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JRootPane jRootPane0 = new JRootPane();
      KeyStroke.getKeyStroke(2050, 2050);
      jRootPane0.grabFocus();
      JLayeredPane jLayeredPane0 = jRootPane0.getLayeredPane();
      ActionMap actionMap0 = new ActionMap();
      actionMap0.getParent();
      jLayeredPane0.setActionMap((ActionMap) null);
      jLayeredPane0.updateUI();
      jLayeredPane0.setToolTipText("2,:/Z|pp5US");
      jLayeredPane0.isOptimizedDrawingEnabled();
      jLayeredPane0.firePropertyChange("epm?Q<&iSZk<R:T^7oe", 'K', 'S');
      jRootPane0.getLayeredPane();
      // Undeclared exception!
      try { 
        DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DBUtil.getLastStatement();
      CallableStatementWrapper callableStatementWrapper0 = null;
      try {
        callableStatementWrapper0 = new CallableStatementWrapper((CallableStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("?", "?", "-%)ge0L[#!O", "-%)ge0L[#!O", (-2442), "?", (-2442), (-1114), 12, 12, "?", "2(F,:/Z|pp5US", (-2442), 12, (String) null);
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      CallableStatement callableStatement0 = null;
      CallableStatementWrapper callableStatementWrapper0 = null;
      try {
        callableStatementWrapper0 = new CallableStatementWrapper((CallableStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("org.hibernate.type.AbstractCharArrayType", "org.hibernate.type.AbstractCharArrayType", "~b#A>KK`XR']Z|gma5]", "utc_date", 1007, " schema=", (-175), 768, (-1360), (-1074), "tP<B6, 4\"5raT!:8[4", "Ez5< tceVC| AN+02(O", (-1360), (-175), "~b#A>KK`XR']Z|gma5]");
      dBCopyPlugin0.getSourceSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      try { 
        MockURL.URL("'4;#$vR26zPu,b", "(", "(");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: '4;#$vr26zpu,b
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "g";
      // Undeclared exception!
      try { 
        DBUtil.executeQuery((ISession) null, "g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("?&X5ux/", "?&X5ux/", "?&X5ux/");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("T4r7{/W3qY");
      DatabaseObjectType.createNewDatabaseObjectType("T4r7{/W3qY");
      DatabaseObjectType.createNewDatabaseObjectType("T4r7{/W3qY");
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer1.getDefaultLeafIcon();
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDT_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("Sil,*aE8ap", icon0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      JComponent.getDefaultLocale();
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType("XJ(}k4ti&dV", icon0);
      DatabaseObjectType.createNewDatabaseObjectType((String) null);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      JInternalFrame jInternalFrame0 = new JInternalFrame((String) null, false, false, false, true);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.CATALOG;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(databaseObjectInfo0, (SchemaInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-42);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)70;
      byte byte0 = (byte)2;
      byteArray0[5] = (byte)2;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = "ELETE FOM ";
      String string1 = "hdXCX7z3th-&|;F";
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DBUtil.tableHasForeignKey("ELETE FOM ", "hdXCX7z3th-&|;F", "ELETE FOM ", foreignKeyInfo0, dBCopyPlugin0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = DBUtil.getLastStatementValues();
      assertNull(string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DBUtil.setLastStatementValues("@Du");
      DBUtil.getLastStatementValues();
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(0);
      SQLAlias sQLAlias0 = new SQLAlias(integerIdentifier0);
      sQLAlias0.getDriverPropertiesClone();
      SQLDriver sQLDriver0 = new SQLDriver();
      // Undeclared exception!
      try { 
        DBUtil.dropTable("@Du", "_", (String) null, (ISession) null, true, (-1153));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JOptionPane jOptionPane0 = new JOptionPane();
      Box.createHorizontalBox();
      JRootPane jRootPane0 = new JRootPane();
      jRootPane0.getCursor();
      jRootPane0.getLayeredPane();
      jRootPane0.getFocusListeners();
      // Undeclared exception!
      try { 
        DBUtil.deleteDataInExistingTable((ISession) null, "Z<T-)b%KrIVA[sL", "org.hibernte.lob.ReaderInputStream", "2,:/Z|pp5US");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getTables((ISession) null, "quote_literal", "}Xfwz&z&4jQS", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      // Undeclared exception!
      try { 
        DBUtil.getTableInfo((ISession) null, "org.hibernate.lob.ReaderInputStream", "pX>f1hgbLR7F^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JRootPane jRootPane0 = new JRootPane();
      jRootPane0.grabFocus();
      JLayeredPane jLayeredPane0 = new JLayeredPane();
      ActionMap actionMap0 = new ActionMap();
      actionMap0.getParent();
      jLayeredPane0.setActionMap((ActionMap) null);
      jLayeredPane0.updateUI();
      jLayeredPane0.getInputContext();
      JLayeredPane jLayeredPane1 = new JLayeredPane();
      jLayeredPane1.isOptimizedDrawingEnabled();
      // Undeclared exception!
      try { 
        DBUtil.fixCase((ISession) null, "V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DatabaseObjectType.createNewDatabaseObjectType("*.V,O|");
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getUpdateDirectory();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getLibraryDirectory();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl3.getSquirrelHomeDir();
      applicationFileWrappersImpl3.getLicenceFile();
      applicationFileWrappersImpl3.getDatabaseAliasesFile();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl4.getSQuirrelJarFile();
      applicationFileWrappersImpl4.getQuickStartGuideFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl5 = new ApplicationFileWrappersImpl();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl1);
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.checkKeyword((ISession) null, "V:_0ro]P", "DBUtil.error.tablenotfound");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getPluginsUserSettingsDirectory();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getLibraryDirectory();
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      dBCopyPlugin0.unload();
      ApplicationFileWrappersImpl applicationFileWrappersImpl5 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl6 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl6.getQuickStartGuideFile();
      applicationFileWrappersImpl6.getQuickStartGuideFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl7 = new ApplicationFileWrappersImpl();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "2,:/Z|pp5US", "Ml|$^\u001C_tMC2G", "2,:/Z|pp5US", 1111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JOptionPane jOptionPane0 = new JOptionPane();
      jOptionPane0.getBorder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, "Index ", "(%`<lIpwGx:H", "Index ", 2295);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }
}
