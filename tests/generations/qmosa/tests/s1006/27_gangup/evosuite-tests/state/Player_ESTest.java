/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 11:14:31 GMT 2020
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(25329);
      byte[] byteArray0 = player0.pack();
      player0.setZ(25329);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      player0.setX((-1871.01F));
      player0.gangStrength();
      player0.getX();
      float float0 = player0.getX();
      assertEquals(25329.0F, player0.getZ(), 0.01F);
      assertEquals((-1871.01F), float0, 0.01F);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player((-2202), (String) null, (String) null, (-2202));
      Party party0 = null;
      byte[] byteArray0 = new byte[6];
      player0.gangStrength();
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-45);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 30135);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7184734013300127
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(0);
      Player player1 = new Player(0, "s%xD", 984);
      byte[] byteArray0 = player1.pack();
      player1.setZ(0);
      player1.setJoinOK(player0, true);
      player1.setX((-1948.95F));
      Player player2 = new Player();
      player2.unpack(byteArray0);
      player1.isJoinOK(player2, false);
      player2.getZ();
      Object object0 = new Object();
      Player player3 = new Player(0, "GEA[,", 2317);
      player0.getIP();
      player1.setDead((-1L));
      System.setCurrentTimeMillis((short)4919);
      player2.isJoinOK(player1, false);
      player1.getTimeOfDeath();
      boolean boolean0 = player3.isJoinOK(player1, false);
      assertEquals((-1948.95F), player1.getX(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player();
      player0.getPictureId();
      Player player1 = new Player(0, (String) null, "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", (-2974), (short)4919);
      player0.isJoinOK(player1, true);
      player0.getZ();
      Object object0 = new Object();
      Player player2 = new Player((-2974), (String) null, 4919);
      player1.getIP();
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player();
      Locale locale0 = Locale.KOREA;
      Predicate<Locale.LanguageRange> predicate0 = Predicate.isEqual((Object) player0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) locale0);
      locale0.getUnicodeLocaleKeys();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate2);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      Predicate<Object> predicate7 = predicate3.or(predicate1);
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate7.or(predicate3);
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate<Object> predicate11 = predicate10.or(predicate3);
      Predicate<Object> predicate12 = predicate2.or(predicate10);
      Predicate<Object> predicate13 = predicate8.and(predicate11);
      predicate10.and(predicate13);
      predicate7.and(predicate5);
      predicate12.or(predicate7);
      predicate2.and(predicate12);
      predicate2.or(predicate1);
      Predicate<Object> predicate14 = predicate9.negate();
      Predicate<Locale.LanguageRange> predicate15 = predicate0.and(predicate14);
      predicate15.negate();
      predicate15.and(predicate5);
      predicate7.and(predicate1);
      predicate1.negate();
      Predicate.isEqual((Object) predicate5);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      predicate15.and(predicate14);
      predicate0.and(predicate4);
      Player player1 = new Player((short)4919);
      player1.setJoinOK(player0, true);
      player1.isJoinOK(player0, true);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player((-103), "", 5083);
      Player player1 = new Player((byte) (-103), "d)20_ga", "", (short)4919, 5083);
      player0.setJoinOK(player1, true);
      player0.isJoinOK(player1, false);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        mockFile0.createNewFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = Locale.PRC;
      locale1.getUnicodeLocaleAttributes();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale locale2 = Locale.KOREAN;
      Locale locale3 = Locale.UK;
      locale1.getDisplayCountry(locale3);
      Locale locale4 = Locale.CHINESE;
      Locale locale5 = Locale.JAPANESE;
      locale5.getUnicodeLocaleKeys();
      locale1.getDisplayName(locale5);
      Locale locale6 = Locale.JAPANESE;
      locale3.getDisplayVariant(locale2);
      locale6.hasExtensions();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale locale7 = Locale.ROOT;
      linkedList4.remove((Object) locale7);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList3, locale_FilteringMode0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList4, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList3, locale_FilteringMode2);
      Player player0 = new Player(17605, "China", 2593);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("]5^6%U{ z");
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "state.Party";
      objectArray0[1] = (Object) ">{L\u0001$J";
      Object object0 = new Object();
      locale0.hasExtensions();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "Ma{qDn{ryr8#]PjI";
      Object object1 = new Object();
      Object object2 = new Object();
      Player player0 = new Player((-103), (String) null, (-103));
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.83412587655526
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(0);
      Player player1 = new Player(0, "state.Player$JoinInfo", (-103));
      byte[] byteArray0 = new byte[2];
      player0.next = (Party) player1;
      player0.boss = (Party) player1;
      byte[] byteArray1 = player1.pack();
      byteArray0[0] = (byte)98;
      player1.setZ(0.0F);
      byteArray0[1] = (byte) (-10);
      player0.setJoinOK(player1, false);
      player0.setX(0.2F);
      player1.unpack(byteArray0);
      player0.isJoinOK(player1, true);
      player1.getZ();
      Object object0 = new Object();
      Player player2 = new Player(2993, "GEA[,", "GEA[,", (short)4919, (-103));
      player0.unpack(byteArray1);
      player2.getStrength();
      player2.pack();
      player0.setJoinOK(player2, false);
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      Player player3 = new Player(0);
      player2.reset(false);
      player3.setJoinOK(player1, false);
      player2.type();
      player3.getX();
      boolean boolean0 = player1.isJoinOK(player3, true);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player();
      Locale locale0 = Locale.FRANCE;
      Predicate<Locale.LanguageRange> predicate0 = Predicate.isEqual((Object) player0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) locale0);
      locale0.getUnicodeLocaleKeys();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      predicate3.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      Predicate<Object> predicate5 = predicate3.and(predicate4);
      Predicate<Object> predicate6 = predicate3.or(predicate1);
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate<Object> predicate8 = predicate6.or(predicate3);
      Predicate<Object> predicate9 = predicate5.negate();
      Predicate<Object> predicate10 = predicate9.or(predicate3);
      Predicate<Object> predicate11 = predicate8.or(predicate1);
      predicate11.and(predicate5);
      Predicate<Object> predicate12 = predicate5.or(predicate7);
      Predicate<Object> predicate13 = predicate10.negate();
      Predicate<Object> predicate14 = predicate12.and(predicate13);
      predicate1.or(predicate12);
      predicate12.negate();
      Predicate<Object> predicate15 = predicate13.and(predicate5);
      Predicate<Locale.LanguageRange> predicate16 = predicate0.and(predicate15);
      Predicate<Locale.LanguageRange> predicate17 = predicate16.negate();
      predicate16.and(predicate7);
      predicate14.negate();
      Predicate.isEqual((Object) predicate17);
      Predicate.isEqual((Object) predicate16);
      Predicate<Locale.LanguageRange> predicate18 = predicate17.and(predicate8);
      predicate18.and(predicate13);
      byte[] byteArray0 = player0.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Player player0 = new Player((-4361), "3J7!", "Ns5Avo o4SD", (-1272), (-1272));
      int int0 = player0.gangStrength();
      assertEquals("3J7!", player0.getIP());
      assertEquals((-1272), player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals((-1272), int0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player(910, (String) null, (String) null, (byte)5, 197);
      Player player1 = new Player((byte)0, "", "", 617, (short)4919);
      player1.reset(false);
      player0.remove(player1);
      player0.gangStrength();
      player0.boss = null;
      player0.setDead(1L);
      player0.setDead(1L);
      player0.remove((Party) null);
      player0.getPictureId();
      player0.toString();
      player0.getTimeOfDeath();
      player0.gangStrength();
      assertTrue(player0.isDead());
      
      int int0 = player1.gangStrength();
      assertEquals(4919, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = (-103);
      Player player0 = new Player((-103));
      String string0 = "MV{qDn{ryr8\\#]PjI";
      String string1 = "";
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, (short)4919);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5796246736085746
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(0);
      Player player1 = new Player(0, "state.Player$JoinInfo", (-103));
      byte[] byteArray0 = new byte[2];
      player0.boss = (Party) player1;
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-10);
      player0.setJoinOK(player1, false);
      player1.unpack(byteArray0);
      player0.isJoinOK(player1, true);
      player1.getZ();
      player1.gangStrength();
      player0.getPictureId();
      player0.setDead((long) 0, true);
      player0.unpack(byteArray0);
      player0.isJoinOK(player1, false);
      player1.setX(0);
      player0.getZ();
      Object object0 = new Object();
      player1.prev = (Party) player0;
      Player player2 = new Player((-2296), "", 1260);
      player2.setY((-1041.0F));
      player0.getIP();
      float float0 = player2.getY();
      assertEquals((-1041.0F), float0, 0.01F);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player(0);
      Player player1 = new Player(0, "state.Player$JoinInfo", (-103));
      String string0 = "state.Player$JoinInfo";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player2 = new Player((-103), "N\r", 745);
      player2.pack();
      player2.getZ();
      player1.gangStrength();
      player2.getPictureId();
      player1.getX();
      player1.pack();
      Locale locale0 = new Locale("N\r", "state.Player$JoinInfo", "x0kR8'r3CBomvJE{?l");
      URI uRI0 = MockURI.URI("state.Party");
      URI uRI1 = MockURI.aFileURI;
      MockURI.resolve(uRI1, uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      MockFile mockFile1 = new MockFile("state.Party", "state.Player$JoinInfo");
      try { 
        MockFile.createTempFile("state.Player$JoinInfo", "B+&iqE-;&", (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player((-103));
      String string0 = "_W^/j$R30";
      Player player1 = new Player((-103), "_W^/j$R30", "_W^/j$R30", (-103), (-103));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player2 = new Player((short)4919, "state.Plaer$JoinInfo", (-1));
      player1.getZ();
      player0.gangStrength();
      player2.getPictureId();
      player1.getX();
      player2.pack();
      String string1 = "<Q<quek#v[R4wo3W";
      Locale locale0 = new Locale("_W^/j$R30", "<Q<quek#v[R4wo3W", "5S@O");
      String string2 = "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ";
      try { 
        MockURI.URI("_W^/j$R30");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 2: _W^/j$R30
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("]5^6%U{ z");
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "stat=e.Party";
      objectArray0[1] = (Object) ">{L\u0001$J";
      objectArray0[1] = (Object) locale0;
      Locale locale1 = Locale.US;
      locale0.getDisplayVariant(locale1);
      Object object0 = new Object();
      locale0.hasExtensions();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "Ma{qDn{ryr8#]PjI";
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[7] = (Object) "_W^/j$R30";
      Player player0 = new Player(4, "stat=e.Party", (-1));
      player0.reset(false);
      player0.type();
      Player player1 = new Player((short)4919, ">{L\u0001$J", "_W^/j$R30", 4, (-1));
      player0.getX();
      player1.setY(4);
      player0.getStrength();
      player1.getY();
      boolean boolean0 = player1.isJoinOK(player0, false);
      assertEquals(4.0F, player1.getY(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(1681L);
      System.setCurrentTimeMillis(1681L);
      Player player0 = new Player();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Player player0 = new Player((-1), ".*[.]class$", (-103));
      byte[] byteArray0 = player0.pack();
      Player player1 = new Player((byte)98, "K$9tN(Z}nY5vn", "", 3298, 3298);
      player0.setJoinOK(player1, false);
      player0.setX(0.2F);
      player0.unpack(byteArray0);
      Player player2 = new Player(1);
      player2.isJoinOK(player0, true);
      player0.getZ();
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      Object object0 = new Object();
      Player player3 = new Player((short)4919, "Player.unpack(): *** WARNING *** data is not of proper type!", 3298);
      player2.getIP();
      float float0 = player1.getY();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.488327743368588
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player(0);
      Player player1 = new Player(0, "state.Player$JoinInfo", (-103));
      byte[] byteArray0 = player0.pack();
      player0.setJoinOK(player1, true);
      player1.setX((byte)98);
      player0.unpack(byteArray0);
      player0.isJoinOK(player1, false);
      player1.getZ();
      Player player2 = new Player((short)4919, "state.Player$JoinInfo", (-1554));
      player2.getIP();
      System.setCurrentTimeMillis((byte)98);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player((-2177), "", "", (-1506), 166);
      player0.getIP();
      assertEquals(166, player0.getStrength());
      assertEquals((-1506), player0.getPictureId());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player((-2202), (String) null, (String) null, (-2202));
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "`WM";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`WM");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-103);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player(1535, "t4", (byte) (-30));
      String string1 = "oA.;o] FN8x<=x";
      Player player1 = null;
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Player player0 = new Player();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      filterOutputStream0.close();
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      player0.pack(dataOutputStream0);
      assertEquals(29, byteArrayOutputStream0.size());
      assertEquals("\u00137\uFFFD\u0000\u0001\u0000\u0000A \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bPlayer-1", byteArrayOutputStream0.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.488327743368588
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player((-103));
      player0.setZ((byte) (-103));
      Player player1 = new Player((-1), "oA.;o] FN8x<=x", "oA.;o] FN8x<=x", (-2511), (byte)98);
      player0.setJoinOK(player1, false);
      player1.setX(0.0F);
      player0.isJoinOK(player1, false);
      player0.getZ();
      Object object0 = new Object();
      System.setCurrentTimeMillis((-2511));
      MockFile mockFile0 = new MockFile("p^7M|m", "");
      player1.setConnected(false);
      MockFile mockFile1 = new MockFile("oA.;o] FN8x<=x", "p^7M|m");
      File file0 = mockFile1.getAbsoluteFile();
      mockFile1.getAbsoluteFile();
      file0.setWritable(true);
      file0.setExecutable(false, false);
      MockFile mockFile2 = new MockFile(mockFile1, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis((byte)98);
      player1.pack();
      MockFile mockFile3 = null;
      try {
        mockFile3 = new MockFile("H%>N;^l(]", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player(3456);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4Y");
      byte[] byteArray0 = player0.pack();
      player0.setMoney(4255.8984F);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      player0.getMoney();
      player0.setMoney(3456);
      System.setCurrentTimeMillis(3456);
      System.setCurrentTimeMillis((-737L));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player(2896, (String) null, 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      player0.id = (-1090);
      player0.unpack(dataInputStream0);
      player0.setMoney(0);
      player0.isDead();
      player0.reset(false);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream1);
      assertFalse(boolean0);
      
      player0.getName();
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Player player0 = new Player((-1182), "", (String) null, (-1182), 4919);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(4919, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertFalse(boolean0);
      assertEquals((-1182), player0.getPictureId());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player((-2202), (String) null, (String) null, (-2202));
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5400363038209806
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player(0, "state.Player$JoinInfo", "state.Player$JoinInfo", 170, 0);
      player0.pack();
      player0.getZ();
      player0.gangStrength();
      player0.getPictureId();
      Player player1 = new Player((byte) (-10), "state.Player$JoinInfo", 1187);
      player1.setX(0);
      player1.getX();
      player1.pack();
      assertEquals(0.0F, player1.getX(), 0.01F);
      
      player0.getStrength();
      player0.type();
      float float0 = player0.getX();
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player(5, "gui.ModuleBrowserDialog$ModuleFilter", " k:2Yudw[)=n__s", 5, 5);
      int int0 = player0.gangStrength();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(5, int0);
      assertEquals(5, player0.getPictureId());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player(1, "", 1);
      player0.setDead();
      player0.setDead(0L, true);
      player0.setDead((-1260L), true);
      boolean boolean0 = player0.isDead();
      assertEquals((-1260L), player0.getTimeOfDeath());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "state.Player$JoinInfo";
      Player player0 = new Player(0, "state.Player$JoinInfo", (-103));
      player0.pack();
      Party party0 = new Party();
      player0.head = party0;
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player((-847), "r#K:Ahd ,tH", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", (-847), 1670);
      player0.pack();
      System.setCurrentTimeMillis((-847));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = Locale.PRC;
      locale1.getUnicodeLocaleAttributes();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale locale2 = Locale.KOREAN;
      Locale locale3 = Locale.UK;
      locale1.getDisplayCountry(locale3);
      Locale locale4 = Locale.CHINESE;
      Locale locale5 = Locale.JAPANESE;
      locale5.getUnicodeLocaleKeys();
      locale1.getDisplayName(locale5);
      Locale locale6 = Locale.JAPANESE;
      locale3.getDisplayVariant(locale2);
      locale6.hasExtensions();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale locale7 = Locale.ROOT;
      linkedList4.remove((Object) locale7);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList3, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList4, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList3, locale_FilteringMode2);
      Player player0 = new Player(17605, "China", 2593);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(boolean0);
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals(2593, player0.getPictureId());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = Locale.PRC;
      locale1.getUnicodeLocaleAttributes();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale locale2 = Locale.KOREAN;
      Locale locale3 = Locale.KOREA;
      locale1.getDisplayCountry(locale3);
      Locale locale4 = Locale.CHINESE;
      Locale locale5 = Locale.JAPANESE;
      locale1.getDisplayName(locale5);
      Locale locale6 = Locale.JAPANESE;
      locale3.getDisplayVariant(locale2);
      locale6.hasExtensions();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList3, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList4, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList3, locale_FilteringMode2);
      Player player0 = new Player(17605, "\uC911\uAD6D", 2593);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-70);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player(3127, "", 3127);
      player0.setConnected(false);
      player0.setDead();
      player0.isConnected();
      player0.getName();
      player0.setConnected(false);
      player0.setConnected(false);
      player0.setDead();
      player0.setZ(10.0F);
      player0.setDead((-2092L), false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-41);
      player0.setConnected(false);
      player0.unpack(byteArray0);
      float float0 = player0.getZ();
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player(0, "", 2404);
      player0.getSubparty();
      Player player1 = new Player((short)4919);
      player1.gangStrength();
      player0.boss = (Party) player1;
      player0.setMoney(0.2F);
      player1.setConnected(false);
      player0.getY();
      player0.toString();
      player0.gangStrength();
      player0.toString();
      player0.getName();
      player1.setJoinOK(player0, false);
      assertEquals(0.2F, player0.getMoney(), 0.01F);
      
      player1.gangStrength();
      player1.setConnected(false);
      int int0 = player1.getStrength();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player((-327), "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", (-327));
      Party party0 = new Party();
      player0.head = party0;
      player0.toString();
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals((-327), player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ");
      Player player0 = new Player(5, "|7QT-JVmUdu", "g8#x4rB0l%O5F", 16, 16);
      PipedInputStream pipedInputStream0 = new PipedInputStream(16);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      player0.getName();
      System.setCurrentTimeMillis(5);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player(2330, "~]LQ^w>i>9um", "0.0.0.0", 2330, 1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      player0.unpack(byteArray0);
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(2330, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("~]LQ^w>i>9um", player0.getIP());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player(2959, "", "JM%;OSZ;Mxbsi}L=(i", 2959, 2959);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      player0.unpack(byteArray0);
      assertEquals("", player0.getIP());
      assertFalse(player0.isDead());
      assertEquals(2959, player0.getStrength());
      assertEquals(2959, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      System.setCurrentTimeMillis(5198L);
      Player player0 = new Player();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertFalse(boolean0);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertEquals("Player-1", player0.toString());
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "module.ModuleBrowserDialog$ModuleFilter");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player(1126, "", "", (-677));
      int int0 = player0.gangStrength();
      assertEquals((-677), player0.getPictureId());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player(1116);
      player0.setDead();
      player0.getSubparty();
      long long0 = player0.getTimeOfDeath();
      assertEquals(1392409281320L, long0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player(3456);
      player0.setZ(3456);
      player0.setY((-293.574F));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0.0.0.0", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Party party0 = new Party();
      Player player0 = new Player((-144), "B~Lz`/ bO147Q&]]p", "}22+Dmn", 1);
      int int0 = player0.getStrength();
      assertEquals(1, player0.getPictureId());
      assertEquals(1, int0);
      assertFalse(player0.isDead());
      assertEquals("B~Lz`/ bO147Q&]]p", player0.getIP());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Player player0 = new Player();
      Locale locale0 = Locale.KOREA;
      Predicate<Locale.LanguageRange> predicate0 = Predicate.isEqual((Object) player0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) locale0);
      locale0.getUnicodeLocaleKeys();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate4.or(predicate3);
      Predicate<Object> predicate5 = predicate3.and(predicate2);
      Predicate<Locale.LanguageRange> predicate6 = predicate0.negate();
      predicate0.or(predicate6);
      Predicate<Object> predicate7 = predicate3.negate();
      predicate2.or(predicate4);
      Predicate<Object> predicate8 = predicate3.or(predicate1);
      Predicate<Object> predicate9 = predicate1.negate();
      predicate9.test(predicate1);
      Predicate<Object> predicate10 = predicate8.or(predicate3);
      Predicate<Object> predicate11 = predicate7.negate();
      Predicate<Object> predicate12 = predicate11.or(predicate3);
      Predicate<Object> predicate13 = predicate2.or(predicate11);
      Predicate<Object> predicate14 = predicate9.and(predicate12);
      predicate11.and(predicate14);
      predicate8.and(predicate5);
      Predicate<Object> predicate15 = predicate3.or(predicate1);
      predicate13.or(predicate15);
      predicate2.and(predicate13);
      predicate2.or(predicate1);
      predicate5.or(predicate13);
      Predicate<Object> predicate16 = predicate10.negate();
      Predicate<Locale.LanguageRange> predicate17 = predicate0.and(predicate16);
      Predicate.isEqual((Object) predicate12);
      predicate17.negate();
      predicate17.and(predicate5);
      predicate8.and(predicate1);
      predicate1.negate();
      Predicate.isEqual((Object) predicate5);
      Object object0 = new Object();
      Player player1 = new Player();
      long long0 = player0.getTimeOfDeath();
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals(0L, long0);
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals("Player-1", player0.getName());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      System.setCurrentTimeMillis(5177L);
      Player player0 = new Player();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      boolean boolean0 = player0.isConnected();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals("Player-1", player0.getName());
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(boolean0);
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Player player0 = new Player((-2202), (String) null, (String) null, (-2202));
      Player player1 = new Player();
      player0.reset(false);
      player0.setJoinOK(player1, true);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-1052));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1052
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Player player0 = new Player((-1612), "EZWxV%gZ}^Pd", (-1612));
      player0.setDead();
      player0.isDead();
      player0.setMoney((-1612));
      player0.reset(false);
      player0.head = (Party) player0;
      player0.setDead((long) (-1612));
      player0.getMoney();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[8];
      player0.reset(true);
      player0.getMoney();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream1);
      pipedOutputStream1.write(byteArray0);
      pipedOutputStream1.write(byteArray0);
      pipedOutputStream0.write(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      player0.unpack(dataInputStream1);
      player0.reset(false);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.7709738809556863
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Player player0 = new Player(0);
      Player player1 = new Player(0, "state.Player$JoinInfo", (-103));
      byte[] byteArray0 = new byte[2];
      player0.next = (Party) player1;
      player0.boss = (Party) player1;
      player1.pack();
      byteArray0[0] = (byte)98;
      player1.setZ((-4.725363F));
      byteArray0[1] = (byte) (-10);
      player0.setJoinOK(player1, true);
      player0.setX(0.2F);
      player1.unpack(byteArray0);
      player0.isJoinOK(player1, true);
      player1.getZ();
      Object object0 = new Object();
      Player player2 = new Player((-1), "GEA[,", (-2572));
      player1.getIP();
      Player player3 = new Player(258, "drf5z$.-SM>", "\"8", (-2572));
      player3.reset(true);
      player2.type();
      float float0 = player1.getX();
      assertEquals((-4.725363F), player1.getZ(), 0.01F);
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Player player0 = new Player();
      player0.setMoney((-2202));
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-1052));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1052
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.2102535776209735
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player((-103));
      Player player1 = new Player((-1), "oA.;o] FN8x<=x", "oA.;o] FN8x<=x", (-2511), (byte)98);
      player0.setJoinOK(player1, false);
      player1.setX(0.0F);
      player0.isJoinOK(player1, false);
      player0.getZ();
      Object object0 = new Object();
      System.setCurrentTimeMillis((-2511));
      MockFile mockFile0 = new MockFile("p^7M|m", "");
      player1.setConnected(false);
      MockFile mockFile1 = new MockFile("oA.;o] FN8x<=x", "p^7M|m");
      File file0 = mockFile1.getAbsoluteFile();
      mockFile1.getAbsoluteFile();
      file0.setWritable(true);
      file0.setExecutable(false, false);
      MockFile mockFile2 = new MockFile(mockFile1, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis((byte)98);
      MockFile mockFile3 = null;
      try {
        mockFile3 = new MockFile("H%>N;^l(]", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }
}
