/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 19:26:26 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3795025181054235
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player((-625), (String) null, 2064);
      Player player1 = new Player((-625));
      player1.add(player0);
      System.setCurrentTimeMillis((short)4919);
      System.setCurrentTimeMillis(2064);
      player0.setJoinOK(player1, true);
      player0.isJoinOK(player0, false);
      System.setCurrentTimeMillis(15001L);
      player0.isJoinOK(player1, false);
      player1.setJoinOK(player0, true);
      player0.setJoinOK(player1, true);
      System.setCurrentTimeMillis(30001L);
      Player player2 = new Player((-625), (String) null, (String) null, (-2766));
      player0.isJoinOK(player2, true);
      // Undeclared exception!
      try { 
        player2.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player(1, "+9#JmbMn#k|", 1786);
      Player player1 = new Player(2514, "{Ow1a4tSIpH~0;a<t", 1892);
      player0.add(player1);
      System.setCurrentTimeMillis(2514);
      player1.setJoinOK(player0, true);
      player1.isJoinOK(player0, false);
      System.setCurrentTimeMillis(1392409296320L);
      player1.isJoinOK(player0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 2514);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4687044989586093
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(0);
      byte[] byteArray0 = player0.pack();
      player0.gangStrength();
      Party party0 = player0.head;
      player0.remove((Party) null);
      player0.setConnected(false);
      player0.setY(0);
      player0.getIP();
      player0.setDead((long) 0);
      player0.setMoney(1528.2786F);
      player0.getPictureId();
      player0.getX();
      player0.getTimeOfDeath();
      Player player1 = new Player(0, "0.0.0.0", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 1);
      player0.getZ();
      player0.setJoinOK(player1, false);
      player1.isJoinOK(player0, false);
      player0.getTimeOfDeath();
      player1.setConnected(true);
      Player player2 = new Player();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1985), (short)4919);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        player2.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((-2760));
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX(0.0F);
      Player player1 = new Player();
      player0.id = (-312);
      player0.isJoinOK(player1, true);
      float float0 = player0.getX();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0558584483706284
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player(5);
      player0.setZ(5);
      player0.getZ();
      player0.getZ();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player1 = new Player(2, "8(Arp", "state.Player$JoinInfo", 18698, 2009);
      player1.add(player0);
      player0.reset(false);
      player1.setDead((long) 18698);
      player0.isJoinOK(player1, true);
      player0.type();
      player1.type();
      player1.pack();
      player1.pack();
      player1.prev = (Party) player0;
      player0.type();
      player1.type();
      player1.type();
      player1.pack();
      Player player2 = new Player(2009, "~NY\"q:p", "", (short)4919);
      player1.isJoinOK(player2, false);
      assertTrue(player1.isDead());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.576534609090467
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Player player0 = new Player(990, (String) null, 26);
      assertEquals(0.0F, player0.getY(), 0.01F);
      
      player0.setY((-1.0F));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Player player1 = new Player((short)4919, (String) null, "", (-3690));
      player0.setJoinOK(player1, false);
      player0.isJoinOK(player1, false);
      System.setCurrentTimeMillis(1392409296320L);
      player0.getX();
      System.setCurrentTimeMillis((short)4919);
      player1.getIP();
      assertEquals(10.0F, player1.getX(), 0.01F);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 2514;
      Player player0 = new Player(2054);
      Player player1 = new Player(2054, (String) null, 2054);
      player0.add(player1);
      System.setCurrentTimeMillis((-13L));
      player0.setJoinOK(player1, false);
      System.setCurrentTimeMillis((short)4919);
      player0.isJoinOK(player1, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = null;
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.69674006410746
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(2054, (String) null, 1);
      Player player1 = new Player((short)4919, (String) null, (String) null, 1);
      player0.add(player1);
      player1.setJoinOK(player0, true);
      player1.isJoinOK(player0, true);
      System.setCurrentTimeMillis(2054);
      player1.toString();
      player1.isDead();
      player1.getY();
      Player player2 = new Player((short)4919);
      player2.setY((short)4919);
      Player player3 = new Player(1, (String) null, (String) null, 5);
      player3.setJoinOK(player2, false);
      assertEquals(4919.0F, player2.getY(), 0.01F);
      assertEquals("Player4919", player2.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Party party0 = new Party();
      Player player0 = new Player(Integer.MAX_VALUE, "", "module.ModuleBrowserDialog$ModuleFilter", Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4712620437156425
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player(3456, "", "", 3456, (-1316));
      Player player2 = new Player((-1316), "", "", (short)4919);
      byte[] byteArray0 = player1.pack();
      player2.unpack(byteArray0);
      player2.isJoinOK(player0, true);
      player1.getZ();
      player2.gangStrength();
      player0.getPictureId();
      player2.setDead((long) (-1316), false);
      player0.getX();
      player1.pack();
      Player player3 = new Player((-1515), "*`SS+2", "AWz", (-94), (-1316));
      player2.remove(player3);
      player1.getStrength();
      player2.setJoinOK(player1, true);
      player1.reset(true);
      player2.type();
      assertEquals((-1316L), player2.getTimeOfDeath());
      
      player0.getX();
      int int0 = player0.getStrength();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.417645625673435
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(3456, "", (-1316));
      player0.gangStrength();
      Party party0 = player0.head;
      player0.remove((Party) null);
      player0.setConnected(false);
      player0.setY(1);
      player0.getIP();
      player0.setDead((-2415L));
      Player player1 = new Player(1028, "", "0.0.0.0", (-977));
      player1.setMoney((short)4919);
      player1.getPictureId();
      player1.getX();
      player1.getTimeOfDeath();
      Player player2 = new Player(4400, "", (String) null, 1028, (-977));
      player2.getZ();
      player2.setJoinOK(player1, false);
      player0.isJoinOK(player1, false);
      player0.getTimeOfDeath();
      player0.setConnected(false);
      assertFalse(player0.isConnected());
      
      Player player3 = new Player();
      System.setCurrentTimeMillis(3456);
      float float0 = player2.getX();
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.4840387820081857
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player(0);
      byte[] byteArray0 = player0.pack();
      player0.gangStrength();
      player0.setConnected(false);
      player0.setY(1528.2786F);
      player0.getIP();
      player0.setDead((long) 0);
      player0.setMoney(561.7067F);
      player0.getPictureId();
      player0.getX();
      player0.getTimeOfDeath();
      player0.getX();
      player0.getTimeOfDeath();
      Player player1 = new Player(0, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "0.0.0.0", 0, (-2011));
      player1.getZ();
      player0.setJoinOK(player1, true);
      player0.isJoinOK(player1, false);
      player0.getTimeOfDeath();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      Player player2 = new Player((-918), "0.0.0.0", 1);
      player2.setConnected(false);
      Player player3 = new Player();
      player3.isJoinOK(player1, false);
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis((short)4919);
      File file0 = MockFile.createTempFile("Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "");
      try { 
        MockFile.createTempFile("state.Player", "", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.241028319059176
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "bmV");
      Player player0 = new Player(1, "bmV", "+P{&{B2q6L%Yo0)!", (-1), 0);
      player0.getTimeOfDeath();
      Player player1 = new Player(0, "7_z", "+P{&{B2q6L%Yo0)!", (-1064), (-1064));
      player1.setY(1);
      player0.setMoney(0);
      player0.getX();
      player0.getStrength();
      Player player2 = new Player();
      player2.isJoinOK(player0, false);
      player1.pack();
      player0.getZ();
      player2.getStrength();
      player0.gangStrength();
      player2.gangStrength();
      int int0 = player1.type();
      assertEquals(1.0F, player1.getY(), 0.01F);
      assertEquals(5, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player(2054, (String) null, 1);
      Player player1 = new Player(2054, "state.Player", 2054);
      player0.add(player1);
      player0.gangStrength();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.close();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(sequenceInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Party party0 = new Party();
      Player player0 = new Player();
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.196631411912473
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player(3456, "", "", 3456, (-1316));
      player0.setY(0.0F);
      player0.getIP();
      player0.setMoney((-5038.389F));
      player0.getPictureId();
      player0.getX();
      player0.getTimeOfDeath();
      Player player1 = new Player((short)4919, "", "", 3019, 1379);
      player1.getZ();
      player1.setJoinOK(player0, true);
      player1.isJoinOK(player0, false);
      player0.getTimeOfDeath();
      player0.setConnected(false);
      assertEquals((-5038.389F), player0.getMoney(), 0.01F);
      
      Player player2 = new Player();
      float float0 = player2.getX();
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player(0, "Mag8T/'ZA6b,ET", (-1113));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player(1505);
      Player player1 = new Player((-2482), " l<]C.9[", 1478);
      byte[] byteArray0 = player1.pack();
      byte byte0 = (byte) (-10);
      player0.unpack(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";b$x!4h9R^x~!v*O", false);
      player1.remove(player0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        bufferedOutputStream0.write(byteArray0, 15667, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = "";
      Player player0 = new Player(1516);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.36167219648624
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player();
      player0.type();
      Party party0 = new Party();
      party0.head = (Party) player0;
      party0.next = (Party) player0;
      player0.prev = party0;
      player0.gangStrength();
      Player player1 = new Player();
      player1.setZ(5);
      player1.pack();
      player0.setJoinOK(player1, false);
      player0.setDead();
      int int0 = Packable.GAME_EVENT;
      player0.setY(0.0F);
      byte[] byteArray0 = player0.pack();
      player0.type();
      player0.unpack(byteArray0);
      party0.getSubparty();
      player0.getName();
      player0.getPictureId();
      boolean boolean0 = player1.isDead();
      assertEquals(5.0F, player1.getZ(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 2064;
      Player player0 = new Player(2064, (String) null, 1);
      System.setCurrentTimeMillis(1);
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4466856169199285
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-39);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player(1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Player player1 = new Player(1, (String) null, (String) null, (-1339));
      player0.setJoinOK(player1, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)125;
      byteArray1[1] = (byte)125;
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte) (-86);
      player1.unpack(byteArray1);
      player0.isJoinOK(player1, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      File file0 = MockFile.createTempFile("@TG", "0.0.0.0");
      try { 
        MockFile.createTempFile("[3>m@4phmU.2", "[3>m@4phmU.2", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player();
      player0.setX((-2011));
      System.setCurrentTimeMillis(0);
      float float0 = player0.getX();
      assertEquals((-2011.0F), float0, 0.01F);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.059354619737041
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Player player0 = new Player(990, "8c&|EJ\"5\f)zF7fx", (-1316));
      Player player1 = new Player(990, "", 990);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      Player player2 = new Player((short)4919, "8Qcfw%#", (-3863));
      player0.setJoinOK(player2, true);
      player1.isJoinOK(player2, true);
      System.setCurrentTimeMillis(990);
      boolean boolean0 = player0.isJoinOK(player2, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player(3456);
      player0.setMoney(0.1F);
      player0.getMoney();
      player0.setMoney(1571.59F);
      System.setCurrentTimeMillis(0L);
      Player player1 = new Player((-1316), "", "", 3156, (-393));
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(1571.59F, player0.getMoney(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player(2896, (String) null, 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      player0.id = (-1090);
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.setMoney(0);
      player0.isBoss();
      player0.reset(true);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream1);
      assertFalse(boolean0);
      
      player0.getName();
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player(3434, "", 3434);
      PipedInputStream pipedInputStream0 = new PipedInputStream((short)4919);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      player0.unpack(dataInputStream0);
      List<Locale.LanguageRange> list0 = null;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      // Undeclared exception!
      try { 
        Locale.filter((List<Locale.LanguageRange>) null, (Collection<Locale>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player(3456, "", (-1276));
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream1.available();
      sequenceInputStream1.available();
      sequenceInputStream0.close();
      player0.pack();
      // Undeclared exception!
      try { 
        player0.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(1, " ", 1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) " ";
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) mockPrintStream0;
      objectArray1[1] = (Object) mockPrintStream0;
      objectArray1[2] = (Object) " ";
      objectArray1[3] = object2;
      objectArray1[4] = (Object) " ";
      objectArray1[5] = object0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      player0.pack();
      player0.pack();
      player0.pack(dataOutputStream0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.4522469794234416
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[3] = (byte)125;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-23);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Player player0 = new Player(10, (String) null, 1763);
      Player player1 = new Player(10, "*vB{Ift,AmFr$:>'3q", (byte)125);
      Player player2 = new Player(246, (String) null, "", 246, (byte)0);
      player2.setJoinOK(player1, false);
      boolean boolean0 = player2.isJoinOK(player1, false);
      assertEquals(125, player1.getPictureId());
      assertTrue(boolean0);
      assertEquals("0.0.0.0", player1.getIP());
      
      int int0 = player2.gangStrength();
      assertEquals(0L, player2.getTimeOfDeath());
      assertTrue(player2.isConnected());
      assertEquals(0.0F, player2.getY(), 0.01F);
      assertEquals(10.0F, player2.getX(), 0.01F);
      assertFalse(player2.isDead());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.421284995138365
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player(0);
      player0.gangStrength();
      Party party0 = player0.head;
      player0.remove((Party) null);
      player0.setConnected(false);
      player0.setY(1528.2786F);
      player0.getIP();
      player0.setDead((long) 0);
      player0.setMoney(540.88214F);
      player0.getPictureId();
      player0.getX();
      player0.getTimeOfDeath();
      Player player1 = new Player(0, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (short)4919, 0);
      player0.prev = (Party) player1;
      player0.getZ();
      player0.setJoinOK(player0, false);
      player0.isJoinOK(player0, false);
      player1.getTimeOfDeath();
      player1.setConnected(false);
      player0.isDead();
      player0.getY();
      System.setCurrentTimeMillis(1671L);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.127429422638514
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player((-35));
      Player player1 = new Player((short)4919, "state.Player$JoinInfo", "state.Player$JoinInfo", (-103));
      byte[] byteArray0 = new byte[2];
      player0.boss = (Party) player1;
      player1.pack();
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-10);
      player1.unpack(byteArray0);
      player1.getZ();
      player0.getPictureId();
      player0.getX();
      player1.pack();
      player0.setY((-1142.26F));
      player1.remove(player0);
      Player player2 = new Player(0, "state.Player$JoinInfo", "", (-1742));
      player2.isDead();
      player0.getY();
      player0.head = (Party) player2;
      Player player3 = new Player((short)4919);
      player3.isJoinOK(player0, false);
      assertEquals((-1142.26F), player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Player.unpack(): *** WARNING *** data is not of proper type!");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-105);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player(2, ";aZBo(s8 ", 2);
      player0.gangStrength();
      Player player1 = new Player();
      player1.getSubparty();
      player0.setJoinOK(player1, true);
      Party party0 = new Party(3127);
      party0.next = (Party) player0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      player0.add(party0);
      player0.setZ((-1932.3F));
      player1.getSubparty();
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player(5, "", 252);
      player0.toString();
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(252, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player();
      player0.getSubparty();
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.setMoney((-1163));
      player0.getMoney();
      player0.setMoney(259.94153F);
      Player player1 = new Player(3, "p3PK}7P<4XcRQ'\u0001aS^", "module.ModuleBrowserDialog$ModuleFilter", (-1), (-4041));
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      player1.unpack(dataInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(sequenceInputStream0);
      player1.unpack(dataInputStream0);
      float float0 = Player.TOLERANCE;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("module.ModuleBrowserDialog$ModuleFilter", "p3PK}7P<4XcRQ'\u0001aS^");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // p3PK}7P<4XcRQ'\u0001aS^
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7853437136837007
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player(3456, "", 3456);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      System.setCurrentTimeMillis(1668L);
      Player player1 = new Player((-1), "", (-1));
      player0.setJoinOK(player1, false);
      player1.isJoinOK(player0, false);
      System.setCurrentTimeMillis(3456);
      Player player2 = new Player((-1), "1E*fNGR>&0", "1E*fNGR>&0", 1149, 2147483646);
      player2.isConnected();
      player2.pack();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UVleG%EVjR.<hk");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      Enumeration<InputStream> enumeration1 = null;
      SequenceInputStream sequenceInputStream1 = null;
      try {
        sequenceInputStream1 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.196422294125466
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player(2704, "&Fqd", "&Fqd", 2127, 2704);
      player0.setDead();
      player0.setZ(2704);
      player0.getX();
      player0.getMoney();
      Player player1 = new Player((short)4919, "&Fqd", "&Fqd", 0);
      player0.next = (Party) player1;
      Party party0 = player0.gangBoss();
      player0.next = party0;
      Player player2 = new Player(195);
      player0.setJoinOK(player2, true);
      player0.setMoney(2127);
      player0.getMoney();
      player2.isJoinOK(player0, true);
      player0.getTimeOfDeath();
      player2.setZ(560.0F);
      assertEquals(560.0F, player2.getZ(), 0.01F);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Party party0 = new Party();
      Player player0 = new Player(25334);
      player0.gangStrength();
      int int0 = player0.gangStrength();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, int0);
      assertFalse(player0.isDead());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player25334", player0.toString());
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player(3434, "", 3434);
      Party party0 = player0.next;
      player0.add((Party) null);
      player0.setZ(3434);
      List<Locale.LanguageRange> list0 = null;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      // Undeclared exception!
      try { 
        Locale.filter((List<Locale.LanguageRange>) null, (Collection<Locale>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3039214422364647
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player(4919, "gui.ModuleBrowserDialog$ModuleFilter", "", 4919, 4919);
      player0.setMoney(4919);
      byte[] byteArray0 = player0.pack();
      Player player1 = new Player(0, "g!", "gui.ModuleBrowserDialog$ModuleFilter", 4919, (short)4919);
      player1.unpack(byteArray0);
      player0.setZ((-1881.32F));
      player0.gangStrength();
      player0.getY();
      Party party0 = player1.boss;
      player1.setMoney(0.2F);
      player1.getStrength();
      player0.add(player1);
      player1.setMoney(0.0F);
      player1.add(player0);
      player0.type();
      player1.pack();
      player0.getZ();
      player1.setX(0.0F);
      assertEquals("", player1.toString());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1279462185041473
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player(3127, "", 3127);
      player0.setConnected(false);
      player0.setDead();
      player0.isConnected();
      player0.getName();
      player0.setConnected(false);
      player0.setConnected(false);
      player0.setDead((-1L), false);
      player0.setDead();
      player0.setDead((-2092L), false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-41);
      player0.setConnected(false);
      player0.unpack(byteArray0);
      player0.getZ();
      player0.pack();
      float float0 = player0.getX();
      assertEquals((-2092L), player0.getTimeOfDeath());
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player(807, "module.ModuleBrowserDialog$ModuleFilter", 1429);
      int int0 = player0.type();
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(5, int0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(1429, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "";
      Player player0 = new Player(3456, "", (-1276));
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      player0.setDead();
      String string1 = "0.0.0.0";
      Party party0 = new Party(3456);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("0.0.0.0", 1033);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=1033.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player(807, "module.ModuleBrowserDialog$ModuleFilter", 1429);
      player0.setDead((long) 1429, true);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale locale0 = new Locale("H|31xh?22mV7w.uwc7Z", "aHCqpS`[$,9'1");
      linkedList0.add(locale0);
      List<Locale.LanguageRange> list0 = null;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      // Undeclared exception!
      try { 
        Locale.filter((List<Locale.LanguageRange>) null, (Collection<Locale>) linkedList0, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player(0, "state.Player$JoinInfo", (-103));
      float float0 = player0.getMoney();
      assertEquals((-103), player0.getPictureId());
      assertEquals(0.0F, float0, 0.01F);
      
      Player player1 = new Player((-103));
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(1, player1.getStrength());
      assertTrue(player1.isConnected());
      assertEquals("Player-103", player1.toString());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(0, player1.getPictureId());
      assertFalse(player1.isDead());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player();
      player0.reset(false);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertEquals("Player-1", player0.toString());
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-781);
      Player player0 = new Player((-3217), "", "", (-781), (-3217));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)79;
      player0.unpack(byteArray0);
      Object object0 = new Object();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }
}
