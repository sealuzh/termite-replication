/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 19:58:27 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.SystemFlavorMap;
import java.awt.dnd.DropTarget;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.function.Consumer;
import java.util.function.Predicate;
import javax.swing.JColorChooser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASEvaluation;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.CorrelationAttributeEval;
import weka.attributeSelection.GainRatioAttributeEval;
import weka.attributeSelection.InfoGainAttributeEval;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.net.estimate.BayesNetEstimator;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.functions.supportVector.Puk;
import weka.classifiers.functions.supportVector.StringKernel;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.KStar;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.PART;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.EM;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CheckOptionHandler;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.Version;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.estimators.NormalEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3109290309357107
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      testInstances0.getWords();
      Utils.log2 = (double) (-1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) (-1);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 98.0;
      doubleArray1[2] = (-2139.7858);
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, Double.NaN);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray1, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2372;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      doubleArray0[1] = (double) 2372;
      evaluation0.m_MarginCounts = doubleArray0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2372);
      MockRandom mockRandom0 = new MockRandom((-2932L));
      mockRandom0.nextBoolean();
      Vote vote0 = new Vote();
      mockRandom0.nextInt();
      mockRandom0.ints();
      Classifier[] classifierArray0 = new Classifier[2];
      SGD sGD0 = new SGD();
      classifierArray0[0] = (Classifier) sGD0;
      classifierArray0[1] = (Classifier) vote0;
      vote0.setClassifiers(classifierArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@data";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "";
      Evaluation.main(stringArray0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8854417069511678
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Capabilities capabilities0 = naiveBayesMultinomial0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      BayesNet bayesNet0 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      bayesNet0.setEstimator(bayesNetEstimator0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Evaluation.getGlobalInfo(additiveRegression0);
      Instances instances0 = testInstances0.generate("P`QL/-c*2++NRtcIZ*");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costMatrix0.toString();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate(1);
      MockRandom mockRandom1 = new MockRandom(1);
      XML xML0 = new XML();
      xML0.getHeader();
      StringKernel stringKernel0 = new StringKernel();
      testInstances0.setClassType(400);
      stringKernel0.getCapabilities();
      PART pART0 = new PART();
      Capabilities capabilities1 = pART0.getCapabilities();
      capabilities1.getAttributeCapabilities();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6544832365976596
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Instances instances0 = testInstances0.generate("\tUse unsmoothed predictions");
      testInstances0.setNumNominalValues(3);
      Evaluation evaluation0 = new Evaluation(instances0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      double double0 = evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.numInstances();
      assertNotEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      SGDText sGDText0 = new SGDText();
      RandomTree randomTree0 = new RandomTree();
      Capabilities capabilities0 = randomTree0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("@data");
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      attributeSelectedClassifier0.getEvaluator();
      SystemInUtil.addInputLine("getSearchAlgorithm");
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("first");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.truePositiveRate(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9301253237687943
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      BayesNet bayesNet0 = new BayesNet();
      KStar kStar0 = new KStar();
      Evaluation.getGlobalInfo(kStar0);
      Instances instances1 = new Instances(instances0, (-1));
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.m_SumClassPredicted;
      evaluation0.sizeOfPredictedRegions();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFMeasure();
      evaluation0.weightedAreaUnderROC();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.setNumericPriorsFromBuffer();
      try { 
        evaluation1.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6663317712332457
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      BayesNet bayesNet0 = new BayesNet();
      testInstances0.generate("O*PZ|:L4D$o^[s");
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID(7, (char[]) null, 411);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0771709399717957
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate("a@>:oY,~#/4LX");
      testInstances0.setNumNominalValues(4);
      Evaluation evaluation0 = new Evaluation(instances0);
      StringSelection stringSelection0 = new StringSelection("@relation");
      evaluation0.m_SumKBInfo = (-2.0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      evaluation0.weightedFalseNegativeRate();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(2, charArray0, 1483);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.309895733981484
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate("bo;9L,WcE");
      testInstances0.setNumNominalValues((-2));
      instances1.deleteStringAttributes();
      Evaluation evaluation1 = new Evaluation(instances1);
      StringSelection stringSelection0 = new StringSelection(".arff");
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.incorrect();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.010495732888103
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFEntropyGain();
      evaluation1.SFPriorEntropy();
      evaluation0.matthewsCorrelationCoefficient(478);
      textDirectoryLoader0.setRetrieval(1);
      evaluation1.SFSchemeEntropy();
      evaluation0.kappa();
      // Undeclared exception!
      try { 
        evaluation1.updateMargins((double[]) null, 1, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1132084237667748
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      MockFile mockFile0 = new MockFile(".arff");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 0.0;
      doubleArray0[2] = (double) 1;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/DatabaseUtils.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "SupportVectorMachineModel");
      doubleArray0[4] = (double) 2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.toMatrixString("INPROCEEDINGS");
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      
      double double1 = evaluation0.avgCost();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.504071238728226
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_Unclassified;
      testInstances0.setNumNominalValues(10000);
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 19;
      intArray0[3] = 102;
      evaluation0.m_MinTarget = (-161.8215);
      intArray0[5] = (-1);
      intArray0[6] = 102;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NEGATIVE_INFINITY, doubleArray0, intArray0, 19);
      double double2 = evaluation0.errorRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      double double3 = evaluation0.numTrueNegatives(0);
      double double4 = evaluation0.numFalseNegatives(8);
      assertEquals(double4, double3, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      SGDText sGDText0 = new SGDText();
      sGDText0.setOutputProbsForSVM(true);
      sGDText0.getStopwords();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      evaluation0.m_NumClasses = 1;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (double) (byte)2;
      evaluation0.m_SumPriorEntropy = 0.0;
      doubleArray0[5] = (-1.0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), doubleArray0);
      binarySparseInstance0.setWeight(2602.48461797329);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      // Undeclared exception!
      try { 
        evaluation0.weightedMatthewsCorrelation();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6147430575290254
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance(1483);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.setWeight(1147.21772415204);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation1.confusionMatrix();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5807632027305556
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "enumerateMeasures");
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      BayesNet bayesNet0 = new BayesNet();
      String string0 = Evaluation.getGlobalInfo(bayesNet0);
      assertEquals("\nSynopsis for weka.classifiers.bayes.BayesNet:\n\nBayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", string0);
      
      testInstances0.generate(" ");
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      testInstances0.setNumRelationalString(2);
      evaluation0.m_ClassIsNominal = false;
      instances0.listIterator();
      evaluation0.correlationCoefficient();
      double double0 = evaluation0.correlationCoefficient();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.relativeAbsoluteError();
      evaluation0.falseNegativeRate(2414);
      instances0.delete(2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      double double1 = evaluation0.m_SumClassPredicted;
      double double2 = evaluation0.m_SumClass;
      double double3 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double3, double0, 0.01);
      
      LogitBoost logitBoost0 = new LogitBoost();
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.933171331038418
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "enumerateMeasures");
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      BayesNet bayesNet0 = new BayesNet();
      Evaluation.getGlobalInfo(bayesNet0);
      testInstances0.generate(" ");
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      int int0 = 2;
      testInstances0.setNumRelationalString(2);
      evaluation0.m_ClassIsNominal = false;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setDebug(false);
      CostMatrix costMatrix0 = new CostMatrix(2);
      costMatrix0.toString();
      MockRandom mockRandom0 = new MockRandom();
      SGDText sGDText0 = new SGDText();
      sGDText0.reset();
      int int1 = (-2140);
      evaluation0.numTrueNegatives(200);
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0217381854666385
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      BayesNet bayesNet0 = new BayesNet();
      String string0 = Evaluation.getGlobalInfo(bayesNet0);
      assertEquals("\nSynopsis for weka.classifiers.bayes.BayesNet:\n\nBayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", string0);
      
      testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costMatrix0.toString();
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.trueNegativeRate(2);
      MockRandom mockRandom1 = new MockRandom(2);
      XML xML0 = new XML();
      xML0.getHeader();
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      double double1 = evaluation0.numFalsePositives(124);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.540008643219812
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_Unclassified;
      testInstances0.setNumNominalValues(10000);
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 19;
      intArray0[2] = 10000;
      intArray0[3] = 102;
      intArray0[4] = 19;
      evaluation0.m_MinTarget = (-161.8215);
      intArray0[5] = (-1);
      intArray0[6] = 102;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NEGATIVE_INFINITY, doubleArray0, intArray0, 19);
      double double2 = evaluation0.errorRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      double double3 = evaluation0.numTrueNegatives(19);
      double double4 = evaluation0.numFalseNegatives(8);
      assertEquals(0.0, double4, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.9999683577390484
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2372;
      doubleArray0[1] = (double) 2372;
      evaluation0.m_MarginCounts = doubleArray0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2372);
      MockRandom mockRandom0 = new MockRandom((-2932L));
      Vote vote0 = new Vote();
      Classifier[] classifierArray0 = new Classifier[2];
      SGD sGD0 = new SGD();
      classifierArray0[0] = (Classifier) sGD0;
      classifierArray0[1] = (Classifier) vote0;
      vote0.setClassifiers(classifierArray0);
      evaluation0.falsePositiveRate(4256);
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9907867545761528
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      SMOreg sMOreg0 = new SMOreg();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) randomSubSpace0, instances0, 2147483645, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.486476853275102
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Capabilities capabilities0 = naiveBayesMultinomial0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("weka/core/Capabilities.props");
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      attributeSelectedClassifier0.getCapabilities();
      attributeSelectedClassifier0.getEvaluator();
      SystemInUtil.addInputLine(" ");
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7948087879920713
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Evaluation.main(stringArray0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      SMOreg sMOreg0 = new SMOreg();
      Evaluation evaluation0 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance(2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double double0 = evaluation0.m_TotalCoverage;
      double double1 = evaluation0.SFEntropyGain();
      double double2 = evaluation0.SFPriorEntropy();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = evaluation0.matthewsCorrelationCoefficient(4256);
      assertNotEquals(double4, double3, 0.01);
      
      evaluation0.SFSchemeEntropy();
      double double5 = evaluation0.numTruePositives(0);
      assertEquals(double5, double4, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.33733840539277
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      SMOreg sMOreg0 = new SMOreg();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.falseNegativeRate(1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      double double0 = evaluation0.numFalsePositives(0);
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.recall(2865);
      assertEquals(0.0, evaluation1.SFSchemeEntropy(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.178235655793613
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      IBk iBk0 = new IBk();
      Capabilities capabilities0 = iBk0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("Zu;x82x]RxW)");
      testInstances0.setNumNominalValues(802);
      Evaluation evaluation0 = new Evaluation(instances0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedFalseNegativeRate();
      double double1 = evaluation1.weightedRecall();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      int int0 = 2303;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2303);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, binarySparseInstance0, 0.75);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9364315453702714
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@data";
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumErr;
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      capabilities0.disable(capabilities_Capability0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation1 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance(1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double double1 = evaluation0.m_TotalCoverage;
      double double2 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.SFPriorEntropy();
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = evaluation0.matthewsCorrelationCoefficient(4256);
      assertEquals(double5, double2, 0.01);
      
      double double6 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double6, 0.01);
      
      double double7 = evaluation0.unclassified();
      assertEquals(0.0, double7, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7378105042846332
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      SGDText sGDText0 = new SGDText();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte)2;
      Evaluation evaluation0 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance(507);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.SFEntropyGain();
      double double1 = evaluation0.SFPriorEntropy();
      double double2 = evaluation0.unweightedMicroFmeasure();
      double double3 = evaluation0.matthewsCorrelationCoefficient((byte) (-33));
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      
      evaluation0.SFSchemeEntropy();
      double double4 = evaluation0.numTruePositives(4256);
      assertNotEquals(double4, double2, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9231420468119156
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      MockFile mockFile0 = new MockFile(".arff");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance((byte)2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double double0 = evaluation0.m_MinTarget;
      evaluation0.SFEntropyGain();
      evaluation0.SFPriorEntropy();
      evaluation0.matthewsCorrelationCoefficient(4256);
      evaluation0.SFSchemeEntropy();
      evaluation0.kappa();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 98;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (double) 4256;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 10.0;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 98, 20.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 98
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.451920750018101
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      SGDText sGDText0 = new SGDText();
      sGDText0.setOutputProbsForSVM(true);
      sGDText0.getStopwords();
      byte[] byteArray0 = new byte[8];
      sGDText0.setNormalizeDocLength(true);
      byteArray0[0] = (byte)2;
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double[] doubleArray0 = new double[6];
      SelectedTag selectedTag0 = new SelectedTag(1, sGDText0.TAGS_SELECTION);
      doubleArray0[0] = (double) 0;
      double double0 = evaluation0.SFEntropyGain();
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(double1, double0, 0.01);
      
      double double2 = new Float((double) (byte)2);
      textDirectoryLoader0.setRetrieval(0);
      double double3 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double3, 0.01);
      
      evaluation0.kappa();
      evaluation0.updateMargins(doubleArray0, (byte)2, 0.0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.0938191343238723
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Capabilities capabilities0 = naiveBayesMultinomial0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      ASEvaluation aSEvaluation0 = attributeSelectedClassifier0.getEvaluator();
      ((CfsSubsetEval) aSEvaluation0).toString();
      ASEvaluation.runEvaluator(aSEvaluation0, testInstances0.DEFAULT_WORDS);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      correlationAttributeEval0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMacroFmeasure();
      double double1 = evaluation0.weightedFalsePositiveRate();
      double double2 = evaluation0.weightedFMeasure();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double4, double1, 0.01);
      
      double double5 = evaluation0.correct();
      assertNotEquals(double5, double3, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.777819508039033
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 688.0;
      doubleArray0[1] = 688.0;
      doubleArray0[2] = 169.203248271;
      doubleArray0[3] = 688.0;
      DenseInstance denseInstance0 = new DenseInstance(688.0, doubleArray0);
      instances0.add((Instance) denseInstance0);
      textDirectoryLoader0.setOutputFilename(true);
      SGDText sGDText0 = new SGDText();
      sGDText0.setOutputProbsForSVM(true);
      MockFile mockFile0 = new MockFile(".arff");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      SGDText sGDText0 = new SGDText();
      sGDText0.setOutputProbsForSVM(true);
      sGDText0.getStopwords();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (double) (byte)2;
      doubleArray0[5] = (-1.0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), doubleArray0);
      binarySparseInstance0.setWeight(2602.48461797329);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) inputMappedClassifier0, (Instance) binarySparseInstance0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("toXMLBIF03");
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/DatabaseUtils.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "getMinWordFrequency");
      capabilities0.toSource("2`y_tCP8y%?");
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1.7976931348623157E308));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      SGDText sGDText0 = new SGDText();
      sGDText0.setOutputProbsForSVM(true);
      MockFile mockFile0 = new MockFile(".arff");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance((byte)2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double double0 = evaluation0.m_MinTarget;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4256;
      doubleArray0[1] = 0.0;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3710103400849258
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "enumerateMeasures");
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(false);
      SGDText sGDText0 = new SGDText();
      sGDText0.setOutputProbsForSVM(false);
      SGDText sGDText1 = new SGDText();
      sGDText1.getStopwords();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costMatrix0.toMatlab();
      costMatrix0.normalize();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.41465548222593
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-numera.teMeasureT");
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      BayesNet bayesNet0 = new BayesNet();
      instances0.parallelStream();
      testInstances0.generate(" ");
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      int int0 = 2;
      testInstances0.setNumRelationalString(2);
      evaluation0.m_ClassIsNominal = false;
      instances0.listIterator();
      evaluation0.correlationCoefficient();
      evaluation0.correlationCoefficient();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.relativeAbsoluteError();
      evaluation0.falseNegativeRate(2414);
      int int1 = 39;
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.m_ClassIsNominal = false;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      testInstances0.setNumString(14);
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      testInstances1.setNumNominalValues(450);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-1646), true, false);
      testInstances1.setNumInstances(1682);
      testInstances1.setNumRelationalNominalValues(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        evaluation0.toMatrixString("weka/core/Capabilities.props");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9516142204669782
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumSchemeEntropy;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      double double1 = Evaluation.MIN_SF_PROB;
      testInstances0.setNumString(0);
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      assertTrue(boolean0);
      
      testInstances0.setNumNominalValues(10021);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-1333), true, false);
      testInstances0.setNumInstances((-2025));
      testInstances0.setNumRelationalNominalValues((-1333));
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = evaluation0.toMatrixString("threshold-file");
      assertEquals("threshold-file\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
      
      evaluation0.getHeader();
      assertEquals(1.0, evaluation0.kappa(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8415551209673362
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = false;
      evaluation0.m_ClassIsNominal = false;
      evaluation0.m_ClassIsNominal = false;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      double double0 = evaluation0.m_SumPredicted;
      evaluation0.setPriors(instances0);
      evaluation0.errorRate();
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      sGDText0.setOutputProbsForSVM(false);
      sGDText0.getStopwords();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      String string0 = costMatrix0.toMatlab();
      costMatrix0.normalize();
      String[] stringArray0 = new String[5];
      stringArray0[1] = stringArray0[0];
      costSensitiveClassifier0.setDebug(true);
      sGDText0.getLossFunction();
      stringArray0[2] = "getGlobalBlend";
      costMatrix0.toString();
      MockRandom mockRandom0 = new MockRandom();
      sGDText0.reset();
      mockRandom0.ints(0L, (-2140), 16);
      ZeroR zeroR0 = new ZeroR();
      String string1 = Evaluation.wekaStaticWrapper(zeroR0, "digraph CobwebTree {\n");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.2286345447741205
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate("bo;9L,WcE");
      testInstances1.setNumRelationalDate(5);
      testInstances0.setNumNominalValues((-2));
      Evaluation evaluation1 = new Evaluation(instances1);
      StringSelection stringSelection0 = new StringSelection(".arff");
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      double double1 = evaluation1.m_SumPriorEntropy;
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@data";
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      adaBoostM1_0.setNumIterations(1);
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      capabilities0.disable(capabilities_Capability0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities1 = regressionByDiscretization0.getCapabilities();
      capabilities1.disableAllAttributes();
      capabilities1.and(capabilities0);
      Integer integer0 = new Integer(1);
      Evaluation evaluation0 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance(3612);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      evaluation0.meanAbsoluteError();
      evaluation0.SFEntropyGain();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      try { 
        linearNNSearch0.nearestNeighbour(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.LinearNNSearch", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      MockFile mockFile0 = new MockFile(".arff");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@");
      CostMatrix costMatrix0 = new CostMatrix((byte)2);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(112);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 112
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0855534299454406
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".bsi";
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(3422);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(19, false, false);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-472));
      evaluation0.errorRate();
      evaluation0.toClassDetailsString("VQbZ7ThFy%lo");
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      sparseInstance0.toStringNoWeight((-2));
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.361145246685684
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@data";
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalseNegatives(2);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 2;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      gaussianProcesses0.m_L = gaussianProcesses0.m_L;
      gaussianProcesses0.getFilterType();
      evaluation0.toMatrixString();
      double double0 = evaluation0.SFMeanSchemeEntropy();
      double double1 = evaluation0.truePositiveRate(13);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.rootMeanSquaredError();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6773247707389238
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      textDirectoryLoader0.setOutputFilename(true);
      SGDText sGDText0 = new SGDText();
      sGDText0.toString();
      sGDText0.setOutputProbsForSVM(true);
      sGDText0.getStopwords();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      instances0.numDistinctValues(1);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      costMatrix1.toMatlab();
      CostMatrix costMatrix2 = costSensitiveClassifier1.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      costMatrix2.normalize();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix2);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.440769675320202
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2181);
      double double0 = evaluation0.m_SumClass;
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      evaluation0.fMeasure(1730);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2181;
      doubleArray0[1] = 0.0;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.737034994463945
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.m_ClassIsNominal = false;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      double double0 = evaluation0.m_SumPredicted;
      evaluation0.setPriors(instances0);
      double double1 = evaluation0.errorRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DenseInstance denseInstance0 = new DenseInstance(20);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double double2 = evaluation0.m_MinTarget;
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.SFEntropyGain();
      double double4 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double4, 0.01);
      
      double double5 = evaluation0.m_SumPredicted;
      double double6 = evaluation0.matthewsCorrelationCoefficient((-2));
      assertEquals(0.0, double6, 0.01);
      assertEquals(double6, double3, 0.01);
      
      double double7 = evaluation0.SFSchemeEntropy();
      assertNotEquals(double7, double1, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double7, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9471865956069645
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@data";
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumErr;
      textDirectoryLoader0.listOptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      adaBoostM1_0.getOptions();
      capabilities0.disable(capabilities_Capability0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities1 = regressionByDiscretization0.getCapabilities();
      capabilities1.and(capabilities0);
      double double1 = evaluation0.m_SumClassPredicted;
      Integer integer0 = new Integer(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance(3612);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      evaluation1.addNumericTrainClass(1.0001, (-3267.6131686));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      evaluation1.setPriors(instances0);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5884672563391373
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Instances instances1 = testInstances0.generate("8");
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.m_SumSchemeEntropy;
      testInstances0.setClassType(807);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      double double1 = Evaluation.MIN_SF_PROB;
      int int0 = 0;
      testInstances0.setNumString(0);
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      testInstances0.setNumNominalValues(1520);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-4163), true, false);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.evaluationForSingleInstance((Classifier) simpleLogistic0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      testInstances0.getWords();
      Utils.log2 = (double) (-1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, (double[]) null, 10.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8466435205545344
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = true;
      evaluation0.m_ClassIsNominal = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Evaluation evaluation1 = new Evaluation(instances0);
      testInstances0.setNumNominal((-670));
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[3];
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0, intArray0, (-1));
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.6301077378184234
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = true;
      evaluation0.m_ClassIsNominal = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kbQ~;tSO<*8^~Tim");
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      evaluation0.setPriors(instances0);
      evaluation1.errorRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[][] doubleArray0 = new double[9][4];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      evaluation1.precision(0);
      evaluation0.toMatrixString();
      evaluation1.weightedTrueNegativeRate();
      Evaluation.makeOptionString((Classifier) null, true);
      JSONLoader jSONLoader0 = new JSONLoader();
      try { 
        jSONLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.028380855958322
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance(1404);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      evaluation0.weightedTrueNegativeRate();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.setBIFFile((String) null);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) bayesNet0, (Instances) null, (-1), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.337827080898473
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      double double0 = evaluation0.weightedFalsePositiveRate();
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.trueNegativeRate((-31));
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.0945267584667024
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.m_ClassIsNominal = false;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      evaluation0.setPriors(instances0);
      double double1 = evaluation0.m_SumAbsErr;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      AllFilter allFilter0 = new AllFilter();
      StringSelection stringSelection0 = new StringSelection("SE;Hz[`LOAH#3G");
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      double double2 = evaluation0.m_MinTarget;
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.weightedTruePositiveRate();
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.68410383649883
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumSchemeEntropy;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      double double1 = Evaluation.MIN_SF_PROB;
      testInstances0.setNumString(0);
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      testInstances0.setNumNominalValues(10021);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-1333), true, false);
      testInstances0.setNumInstances((-2025));
      testInstances0.setNumRelationalNominalValues((-1333));
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        evaluation0.recall(111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 111
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.1995219101255112
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)116;
      byteArray1[1] = (byte) (-54);
      byteArray1[2] = (byte) (-49);
      byteArray0[4] = (byte) (-54);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".arff";
      stringArray0[2] = ".arff";
      stringArray0[3] = ".arff";
      stringArray0[4] = ".bsi";
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      CoverTree coverTree0 = new CoverTree();
      MultiScheme multiScheme0 = new MultiScheme();
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, false);
      RandomTree randomTree0 = new RandomTree();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)116);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double double1 = evaluation0.weightedTruePositiveRate();
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.5574502480119636
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(2181);
      evaluation0.fMeasure(1730);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      KDTree kDTree0 = new KDTree();
      textDirectoryLoader0.reset();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances0);
      predicate0.test(gaussianProcesses0);
      instances0.removeIf(predicate0);
      AllFilter allFilter0 = new AllFilter();
      try { 
        evaluation0.evaluateModel((Classifier) gaussianProcesses0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6828558067063368
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      byte byte0 = (byte) (-54);
      SGDText sGDText0 = new SGDText();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-54);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate(20);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8279497666790334
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Capabilities capabilities0 = naiveBayesMultinomial0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("weka/core/Capabilities.props");
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      attributeSelectedClassifier0.getEvaluator();
      SystemInUtil.addInputLine(" ");
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      SGDText sGDText0 = new SGDText();
      sGDText0.setOutputProbsForSVM(true);
      MockFile mockFile0 = new MockFile(".arff");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setIgnoreCaseForNames(true);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      binarySparseInstance0.setWeight(1240.0435248610304);
      try { 
        evaluation0.evaluateModelOnce((Classifier) gaussianProcesses0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.251928710333044
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      SGDText sGDText0 = new SGDText();
      sGDText0.setOutputProbsForSVM(true);
      sGDText0.getStopwords();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      Evaluation.makeOptionString(sGDText0, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setIgnoreCaseForNames(true);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (double) (byte)2;
      doubleArray0[5] = (-1.0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), doubleArray0);
      boolean boolean0 = false;
      binarySparseInstance0.setWeight(2602.48461797329);
      try { 
        evaluation0.evaluateModelOnce((Classifier) inputMappedClassifier0, (Instance) binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.677018125225026
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(false);
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file1 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      file0.renameTo(file1);
      textDirectoryLoader0.setSource(file0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(0);
      evaluation0.fMeasure((-364));
      KDTree kDTree0 = new KDTree();
      evaluation0.numTruePositives(3);
      textDirectoryLoader0.reset();
      try { 
        evaluation0.evaluateModel((Classifier) sGDText0, instances0, (Object[]) sGDText0.TAGS_SELECTION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.2643679206824285
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(false);
      SGDText sGDText0 = new SGDText();
      sGDText0.setOutputProbsForSVM(false);
      sGDText0.getStopwords();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      Evaluation.makeOptionString(multiClassClassifier0, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      double double1 = evaluation0.m_SumClass;
      evaluation0.toSummaryString("@relation", false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = 0.0;
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 1;
      intArray0[2] = 3;
      intArray0[3] = 3;
      instances0.compactify();
      intArray0[4] = 3;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1832.7023037634199), doubleArray0, intArray0, 3237);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.3112881430321695
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      textDirectoryLoader0.setSource(file0);
      double double0 = evaluation0.numFalseNegatives(2205);
      assertEquals(0.0, double0, 0.01);
      
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      double double1 = evaluation0.falsePositiveRate(2205);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.SFPriorEntropy();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.3936571033892298
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@data";
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.numFalseNegatives(2);
      assertEquals(0.0, double0, 0.01);
      
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 2;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      gaussianProcesses0.m_L = gaussianProcesses0.m_L;
      gaussianProcesses0.getFilterType();
      double double1 = evaluation0.falsePositiveRate(6);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.toMatrixString();
      double double2 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double2, 0.01);
      
      evaluation0.truePositiveRate(13);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      evaluation0.pctIncorrect();
      ConverterUtils.DataSource converterUtils_DataSource0 = null;
      try {
        converterUtils_DataSource0 = new ConverterUtils.DataSource("getSearchAlgorithm");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class weka.core.converters.ConverterUtils
         //
         verifyException("weka.core.converters.ConverterUtils$DataSource", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.0120895698602608
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      SGDText sGDText0 = new SGDText();
      sGDText0.setUseWordFrequencies(true);
      sGDText0.setOutputProbsForSVM(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (-2.0);
      doubleArray0[6] = (double) (byte)2;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = 1.0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      evaluation0.priorEntropy();
      evaluation0.priorEntropy();
      evaluation0.SFPriorEntropy();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.493030913320673
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      evaluation0.weightedAreaUnderPRC();
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      SGDText sGDText0 = new SGDText();
      sGDText0.setLNorm(1329.106);
      sGDText0.setOutputProbsForSVM(true);
      sGDText0.getStopwords();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costMatrix0.initialize();
      costMatrix0.toMatlab();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalsePositives(2637);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.precision(759);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.0423569973977633
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-33);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      correlationAttributeEval0.listOptions();
      correlationAttributeEval0.setOutputDetailedInfo(true);
      ASEvaluation.runEvaluator(correlationAttributeEval0, testInstances0.DEFAULT_WORDS);
      correlationAttributeEval0.getCapabilities();
      correlationAttributeEval0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      CoverTree coverTree0 = new CoverTree();
      MultiScheme multiScheme0 = new MultiScheme();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      RandomTree randomTree0 = new RandomTree();
      evaluation0.m_SumAbsErr = (double) (byte) (-54);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(7);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double double0 = (-2993.0);
      try { 
        evaluation0.evaluateModelOnce((double[]) null, (Instance) binarySparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.8564909139241832
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-2);
      int int0 = 18;
      SparseInstance sparseInstance0 = new SparseInstance(1404);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      sparseInstance1.toStringNoWeight(1572);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.134631643813234
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      SGDText sGDText0 = new SGDText();
      sGDText0.setOutputProbsForSVM(true);
      MockFile mockFile0 = new MockFile(".arff");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.m_SumClassPredicted = (double) (byte)2;
      Instance instance0 = BallNode.calcCentroidPivot(89, (-1995440801), (int[]) null, instances0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      SGDText sGDText0 = new SGDText();
      sGDText0.setUseWordFrequencies(true);
      sGDText0.setOutputProbsForSVM(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[5] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      sparseInstance1.toStringNoWeight((-1));
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.4707550656397284
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-33);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      correlationAttributeEval0.listOptions();
      ASEvaluation.runEvaluator(correlationAttributeEval0, testInstances0.DEFAULT_WORDS);
      correlationAttributeEval0.getCapabilities();
      correlationAttributeEval0.getCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(491);
      evaluation0.toMatrixString();
      evaluation0.SFMeanSchemeEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalsePositives(3);
      // Undeclared exception!
      try { 
        evaluation1.fMeasure(20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.454277666056865
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".arff";
      stringArray0[2] = ".bsi";
      BinarySparseInstance.main(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedMatthewsCorrelation();
      StringSelection stringSelection0 = new StringSelection(" ");
      SystemFlavorMap.decodeDataFlavor(".bsi");
      JColorChooser jColorChooser0 = new JColorChooser();
      DropTarget dropTarget0 = null;
      try {
        dropTarget0 = new DropTarget();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DropTarget", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.31128814303217
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[5];
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "cy");
      byteArray0[0] = (byte) (-33);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)116;
      byteArray1[1] = (byte) (-54);
      byteArray1[2] = (byte) (-49);
      byteArray0[4] = (byte) (-54);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".arff";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".arff";
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(13);
      binarySparseInstance0.setWeight((-2011.6044));
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.confusionMatrix();
      evaluation0.weightedAreaUnderPRC();
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.527330700975537
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[7];
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("UNKNOWN_MODEL");
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("@relation");
      testInstances1.toString();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      MockRandom mockRandom0 = new MockRandom(1);
      try { 
        evaluation0.crossValidateModel((Classifier) multiClassClassifierUpdateable0, instances0, 4, (Random) mockRandom0, (Object[]) testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Capabilities capabilities0 = naiveBayesMultinomial0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      attributeSelectedClassifier0.getEvaluator();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      gainRatioAttributeEval0.getCapabilities();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities1 = wrapperSubsetEval0.getCapabilities();
      Capabilities capabilities2 = capabilities1.getAttributeCapabilities();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      infoGainAttributeEval0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      capabilities2.disableDependency(capabilities_Capability0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(9);
      org.evosuite.runtime.Random.setNextRandom(713);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "U~igR{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      SGDText sGDText0 = new SGDText();
      sGDText0.setOutputProbsForSVM(true);
      sGDText0.getStopwords();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costMatrix0.toMatlab();
      costMatrix0.normalize();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".arff";
      stringArray0[1] = "SELECT ";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "Py";
      stringArray0[4] = "[0.0]";
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel(".cost", instances0, 1, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .cost
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      J48 j48_0 = new J48();
      String[] stringArray0 = new String[19];
      stringArray0[0] = "makeCosies";
      stringArray0[1] = "makeCosies";
      stringArray0[2] = "makeCosies";
      stringArray0[3] = "makeCosies";
      stringArray0[4] = "makeCosies";
      stringArray0[0] = "makeCosies";
      try { 
        Evaluation.evaluateModel((Classifier) multiClassClassifier0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.636638945204742
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = true;
      evaluation0.m_ClassIsNominal = false;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      MockRandom mockRandom0 = new MockRandom(2);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      testInstances0.setNumNominal(2);
      gaussianProcesses0.getFilterType();
      double double0 = evaluation0.falsePositiveRate(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.9251636117493551
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalseNegatives(1);
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = 'p';
      charArray0[2] = 'N';
      charArray0[3] = 'V';
      String string0 = evaluation0.num2ShortID(131, charArray0, 131);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals("                                                                                                                               *NVV", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.7296749876251232
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      instances0.toSummaryString();
      evaluation0.m_ClassIsNominal = false;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      evaluation0.setPriors(instances0);
      double double1 = evaluation1.m_SumAbsErr;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AllFilter allFilter0 = new AllFilter();
      StringSelection stringSelection0 = new StringSelection("\tis missing");
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      double double2 = evaluation0.m_MinTarget;
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OneR oneR0 = new OneR();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "  con. (ID:weight): ";
      stringArray0[1] = "\n=== Evaluation Cost Matrix ===\n\n";
      stringArray0[2] = "1.%so[";
      stringArray0[3] = "%/jV]zl_?fGbQ2";
      stringArray0[4] = "5p lPdfsF0";
      stringArray0[5] = "help";
      stringArray0[6] = "F&FTxa,@3*'jmB[";
      stringArray0[7] = "makeCopies";
      try { 
        Evaluation.evaluateModel((Classifier) oneR0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.OneR:
         // 
         // -B <minimum bucket size>
         // \tThe minimum number of objects in a bucket (default: 6).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      J48 j48_0 = new J48();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "  con. (ID:weight): ";
      stringArray0[1] = "makeCopies";
      j48_0.setCollapseTree(false);
      stringArray0[2] = "makeCopies";
      stringArray0[3] = "makeCopies";
      try { 
        Evaluation.evaluateModel((Classifier) j48_0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.trees.J48:
         // 
         // -U
         // \tUse unpruned tree.
         // -O
         // \tDo not collapse tree.
         // -C <pruning confidence>
         // \tSet confidence threshold for pruning.
         // \t(default 0.25)
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // \t(default 2)
         // -R
         // \tUse reduced error pruning.
         // -N <number of folds>
         // \tSet number of folds for reduced error
         // \tpruning. One fold is used as pruning set.
         // \t(default 3)
         // -B
         // \tUse binary splits only.
         // -S
         // \tDon't perform subtree raising.
         // -L
         // \tDo not clean up after the tree has been built.
         // -A
         // \tLaplace smoothing for predicted probabilities.
         // -J
         // \tDo not use MDL correction for info gain on numeric attributes.
         // -Q <seed>
         // \tSeed for random data shuffling (default 1).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.9799151714181009
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "getNrOfParents";
      stringArray0[1] = "    return toString();\n";
      stringArray0[2] = "enumerateMeasures";
      stringArray0[3] = "w#[KF@?aI[";
      stringArray0[4] = "debugTipText";
      stringArray0[5] = "hSWbjSZ+TnV3AxD.N-q";
      stringArray0[6] = "graphType";
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.3450363141108999
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = 'X';
      charArray0[2] = '|';
      charArray0[3] = 'Z';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1), charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      multiClassClassifier0.getCapabilities();
      LogitBoost logitBoost0 = new LogitBoost();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "DdDN3B82$<P@h].{";
      logitBoost0.setOptions(stringArray0);
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "p");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2372;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      doubleArray0[1] = (double) 2372;
      evaluation0.m_MarginCounts = doubleArray0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2372);
      MockRandom mockRandom0 = new MockRandom((-2932L));
      Vote vote0 = new Vote();
      mockRandom0.nextInt();
      mockRandom0.ints();
      Classifier[] classifierArray0 = new Classifier[2];
      SGD sGD0 = new SGD();
      classifierArray0[0] = (Classifier) sGD0;
      classifierArray0[1] = (Classifier) vote0;
      vote0.setClassifiers(classifierArray0);
      try { 
        evaluation0.crossValidateModel((Classifier) vote0, instances0, 2, (Random) mockRandom0, (Object[]) sGD0.TAGS_SELECTION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2372;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      doubleArray0[1] = (double) 2372;
      evaluation0.m_MarginCounts = doubleArray0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2372);
      MockRandom mockRandom0 = new MockRandom((-2932L));
      Vote vote0 = new Vote();
      int int0 = new Integer(3);
      mockRandom0.ints();
      SGD sGD0 = new SGD();
      Object[] objectArray0 = new Object[6];
      try { 
        evaluation0.crossValidateModel((Classifier) vote0, instances0, 2, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.510766958610196
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Instances instances1 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.m_SumSchemeEntropy;
      testInstances0.setClassType(807);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      double double1 = Evaluation.MIN_SF_PROB;
      EM eM0 = new EM();
      Capabilities capabilities0 = eM0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setNumNominal(110);
      testInstances0.assign(testInstances1);
      testInstances0.setNumString(0);
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      assertTrue(boolean0);
      
      testInstances0.setNumNominalValues(1520);
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities1 = stringKernel0.getCapabilities();
      capabilities1.getAttributeCapabilities();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      double double2 = evaluation0.numFalsePositives(110);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      evaluation0.rootMeanPriorSquaredError();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.1171019303194956
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      SGDText sGDText0 = new SGDText();
      sGDText0.setUseWordFrequencies(true);
      sGDText0.setOutputProbsForSVM(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[5] = (double) 2;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (-2.0);
      doubleArray0[6] = (double) (byte)2;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = 1.0;
      instances0.toString();
      Evaluation evaluation1 = new Evaluation(instances0);
      Version.MAJOR = 0;
      evaluation1.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation1.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation1.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.2501822480105407
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Instances instances1 = testInstances0.generate("debugTipText");
      instances1.toArray();
      Evaluation.handleCostOption((String) null, 2267);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      MockRandom mockRandom0 = new MockRandom(120L);
      evaluation0.numFalseNegatives(20);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      gaussianProcesses0.getFilterType();
      evaluation0.setDiscardPredictions(false);
      double double0 = evaluation0.falsePositiveRate(0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toMatrixString();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      SGDText sGDText0 = new SGDText();
      sGDText0.getStopwords();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 2;
      gainRatioAttributeEval0.postProcess(intArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      capabilities1.disableDependency(capabilities_Capability0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(1);
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.5378004650639632
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      double double1 = evaluation0.m_Unclassified;
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      testInstances0.setNumNominalValues(10000);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(19, true, true);
      SGDText sGDText0 = new SGDText();
      sGDText0.setOutputProbsForSVM(true);
      MockFile mockFile0 = new MockFile("XxD");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      evaluation0.getRevision();
      costMatrix0.normalize();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.3208119525559794
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      attributeSelectedClassifier0.getEvaluator();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.toString();
      ASEvaluation.runEvaluator(cfsSubsetEval0, (String[]) null);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      CorrelationAttributeEval correlationAttributeEval1 = new CorrelationAttributeEval();
      correlationAttributeEval0.getCapabilities();
      CorrelationAttributeEval correlationAttributeEval2 = new CorrelationAttributeEval();
      CorrelationAttributeEval correlationAttributeEval3 = new CorrelationAttributeEval();
      correlationAttributeEval3.getCapabilities();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.areaUnderROC(112);
      evaluation0.pctCorrect();
      MockRandom mockRandom0 = new MockRandom();
      NormalEstimator normalEstimator0 = new NormalEstimator(1718.27165);
      NormalEstimator normalEstimator1 = new NormalEstimator(1718.27165);
      Capabilities capabilities0 = normalEstimator1.getCapabilities();
      capabilities0.getAttributeCapabilities();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      evaluation1.SFPriorEntropy();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      ConverterUtils.DataSource converterUtils_DataSource0 = null;
      try {
        converterUtils_DataSource0 = new ConverterUtils.DataSource("weka/core/Capabilities.props");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class weka.core.converters.ConverterUtils
         //
         verifyException("weka.core.converters.ConverterUtils$DataSource", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.81428097880601
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.toSummaryString(false);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.092883882347058
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1738);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.051951499141551
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = true;
      evaluation0.m_ClassIsNominal = false;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      MockRandom mockRandom0 = new MockRandom(2);
      evaluation1.numFalseNegatives((-2));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      evaluation1.m_Header = instances1;
      evaluation1.setDiscardPredictions(true);
      double double0 = evaluation1.falsePositiveRate(2);
      assertTrue(evaluation1.getDiscardPredictions());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.7389896102893403
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2372;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      doubleArray0[1] = (double) 2372;
      evaluation0.m_MarginCounts = doubleArray0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2372);
      MockRandom mockRandom0 = new MockRandom((-2932L));
      Vote vote0 = new Vote();
      mockRandom0.nextInt();
      mockRandom0.ints();
      Classifier[] classifierArray0 = new Classifier[2];
      SGD sGD0 = new SGD();
      classifierArray0[0] = (Classifier) sGD0;
      classifierArray0[1] = (Classifier) vote0;
      vote0.setClassifiers(classifierArray0);
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) vote0, instances0, 2, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.677018125225026
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(false);
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file1 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      file0.renameTo(file1);
      textDirectoryLoader0.setSource(file0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(0);
      evaluation0.fMeasure((-364));
      KDTree kDTree0 = new KDTree();
      evaluation0.numTruePositives(3);
      textDirectoryLoader0.reset();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      Capabilities capabilities0 = multiClassClassifier0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("   */\n", arrayList0, 3);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.5884672563391373
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      testInstances0.getOptions();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.totalCost();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      MockFile mockFile0 = new MockFile(".arff");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 0.0;
      doubleArray0[2] = (double) 1;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/DatabaseUtils.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "SupportVectorMachineModel");
      doubleArray0[4] = (double) 2;
      doubleArray0[8] = 1.0;
      SparseInstance sparseInstance0 = new SparseInstance((-2660.6844883763), doubleArray0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, sparseInstance0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.71865608748038
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Instances instances1 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.m_SumSchemeEntropy;
      testInstances0.setClassType(807);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      double double1 = Evaluation.MIN_SF_PROB;
      EM eM0 = new EM();
      Capabilities capabilities0 = eM0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      Evaluation evaluation1 = new Evaluation(instances1);
      double double2 = evaluation0.m_SumPredicted;
      evaluation0.setPriors(instances1);
      double double3 = evaluation1.m_SumAbsErr;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AllFilter allFilter0 = new AllFilter();
      StringSelection stringSelection0 = new StringSelection("Bg:->yi%qC{1k");
      evaluation1.addNumericTrainClass((-1148.69), 807);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      double double4 = evaluation1.m_MinTarget;
      assertEquals((-1148.69), double4, 0.01);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@data";
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.equals((Object) null);
      evaluation0.weightedMatthewsCorrelation();
      StringSelection stringSelection0 = new StringSelection(".arff");
      JColorChooser jColorChooser0 = new JColorChooser();
      DropTarget dropTarget0 = null;
      try {
        dropTarget0 = new DropTarget();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DropTarget", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      naiveBayesMultinomial0.getCapabilities();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      sGDText1.getStopwords();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities1 = infoGainAttributeEval0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      capabilities1.disableDependency(capabilities_Capability0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(0);
      org.evosuite.runtime.Random.setNextRandom(0);
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.8913741235084864
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      boolean boolean0 = false;
      textDirectoryLoader0.setDebug(false);
      BinarySparseInstance.main(testInstances0.DEFAULT_WORDS);
      evaluation0.SFMeanPriorEntropy();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      evaluation0.areaUnderROC((-2));
      testInstances0.setNumRelationalDate(9);
      double[] doubleArray0 = evaluation0.makeDistribution(1.0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5.3, doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.setClassValue("NI#b<+:X]NjQI=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.3109290309357102
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Capabilities capabilities0 = naiveBayesMultinomial0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      ASEvaluation aSEvaluation0 = attributeSelectedClassifier0.getEvaluator();
      ((CfsSubsetEval) aSEvaluation0).toString();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(454);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce(0.0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.1401683622755248
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = true;
      evaluation0.m_ClassIsNominal = false;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.m_ComplexityStatisticsAvailable = true;
      double double0 = evaluation1.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      
      double double1 = evaluation0.numFalseNegatives(14);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = evaluation0.makeDistribution(300.0);
      assertArrayEquals(new double[] {300.0, 0.0}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      SGDText sGDText0 = new SGDText();
      sGDText0.setUseWordFrequencies(true);
      sGDText0.setOutputProbsForSVM(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (-2.0);
      doubleArray0[6] = (double) (byte)2;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = 1.0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnce(5.70001, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(12);
      MockRandom mockRandom0 = new MockRandom(4256);
      Vote vote0 = new Vote();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@relation");
      textDirectoryLoader0.setDebug(true);
      Instances instances0 = textDirectoryLoader0.getStructure();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.0760891679690494
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString("@relation");
      assertEquals("@relation\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-49);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalseNegatives((-2183));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      evaluation0.falsePositiveRate(891);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = true;
      evaluation0.m_ClassIsNominal = false;
      evaluation0.correlationCoefficient();
      try { 
        evaluation0.toClassDetailsString("measureTreeSize");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("XxD");
      Instances instances0 = testInstances0.generate("debugTipText");
      Evaluation.handleCostOption((String) null, (-2));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("no-cv");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "dURR!\"9S\u0006-~k");
      Evaluation evaluation0 = new Evaluation(instances0);
      Version.MAJOR = (-2);
      double double0 = evaluation0.errorRate();
      double double1 = new Integer((-1));
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.512450879249128
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.numFalseNegatives(2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.507305136385497
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      instances0.resample(mockRandom0);
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.1316962334187357
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Capabilities capabilities0 = naiveBayesMultinomial0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      ASEvaluation aSEvaluation0 = attributeSelectedClassifier0.getEvaluator();
      ((CfsSubsetEval) aSEvaluation0).toString();
      ASEvaluation.runEvaluator(aSEvaluation0, testInstances0.DEFAULT_WORDS);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      correlationAttributeEval0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.weightedFMeasure();
      evaluation0.weightedAreaUnderROC();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) attributeSelectedClassifier0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.1782139529530196
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.pctUnclassified();
      evaluation0.equals(instances0);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(0, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-2112.71918678);
      DenseInstance denseInstance0 = new DenseInstance((-655.0), doubleArray0);
      denseInstance0.setDataset(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) simpleLogistic0, (Instance) denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.SimpleLogistic", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.2206707943846333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      evaluation0.KBRelativeInformation();
      evaluation0.pctUnclassified();
      evaluation0.equals(instances0);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(0, true, false);
      try { 
        Evaluation.handleCostOption("@data", 99);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctUnclassified();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      evaluation0.equals(checkOptionHandler0);
      double double0 = (-655.0);
      SparseInstance sparseInstance0 = null;
      SparseInstance sparseInstance1 = null;
      try {
        sparseInstance1 = new SparseInstance((SparseInstance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      MockFile mockFile0 = new MockFile(".arff");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      AbstractClassifier.makeCopy(gaussianProcesses0);
      doubleArray0[2] = 0.0;
      doubleArray0[2] = (double) 1;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/DatabaseUtils.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "SupportVectorMachineModel");
      doubleArray0[4] = (double) 2;
      doubleArray0[8] = 1.0;
      SparseInstance sparseInstance0 = new SparseInstance((-2660.6844883763), doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) gaussianProcesses0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(12);
      MockRandom mockRandom0 = new MockRandom(4256);
      Vote vote0 = new Vote();
      textDirectoryLoader0.setDebug(true);
      textDirectoryLoader0.getStructure();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) randomSubSpace0, (Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "$Revision: 9122 $";
      stringArray0[1] = "E|";
      stringArray0[2] = "E|";
      stringArray0[3] = "E|";
      stringArray0[4] = "C2t- ";
      stringArray0[5] = "E|";
      stringArray0[6] = "E|";
      stringArray0[7] = "setNoise";
      try { 
        Evaluation.evaluateModel("E|", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name E|.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      J48 j48_0 = new J48();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "  con. (ID:weight): ";
      Evaluation.main(stringArray0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      assertEquals(".m", matlabLoader0.getFileExtension());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 23;
      Instances instances0 = new Instances("attributes", arrayList0, 23);
      CostMatrix costMatrix0 = new CostMatrix(23);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      evaluation0.useNoPriors();
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.precision(2320);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.useNoPriors();
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.9775005220767727
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.KBRelativeInformation();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      double double0 = Evaluation.MIN_SF_PROB;
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      testInstances0.setNumNominalValues(10000);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      int[] intArray0 = new int[7];
      intArray0[0] = 10000;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[4] = 19;
      intArray0[5] = (-1);
      testInstances0.setNumRelationalNominalValues((-1));
      intArray0[0] = (-1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double1 = new Float((double) (-1));
      assertEquals((-1.0F), double1, 0.01);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[3];
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 2;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 2;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 2;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      gaussianProcesses0.m_L = gaussianProcesses0.m_L;
      gaussianProcesses0.getFilterType();
      org.evosuite.runtime.Random.setNextRandom(2);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }
}
