/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 21:12:24 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.estimate.BayesNetEstimator;
import weka.classifiers.bayes.net.search.SearchAlgorithm;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.unsupervised.attribute.Remove;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance((-997.3594), doubleArray0);
      denseInstance0.setWeight(22.0);
      int[] intArray0 = new int[7];
      intArray0[0] = 78;
      intArray0[1] = 78;
      intArray0[2] = 78;
      intArray0[3] = 78;
      intArray0[4] = 78;
      intArray0[5] = 78;
      intArray0[6] = 78;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3400.79752174216), intArray0, 2145748144);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-963.38551331), intArray0, 69);
      binarySparseInstance0.dataset();
      JRip jRip1 = new JRip();
      AbstractClassifier.makeCopy(jRip1);
      jRip1.setDebug(true);
      try { 
        jRip1.rulesetForOneClass(201.07654, (Instances) null, 78, (-2043.418407229601));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.304704691639832
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Mb", arrayList1, 1393);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("Mb", instances0, 1393);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 1393;
      doubleArray0[4] = (double) 2;
      doubleArray0[0] = (double) 4;
      arrayList1.add(attribute0);
      DenseInstance denseInstance0 = new DenseInstance(3);
      instances0.add((Instance) denseInstance0);
      Instances instances1 = new Instances((String) null, arrayList1, 3);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 1, 1.0);
      Attribute attribute1 = new Attribute("real", arrayList0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      arrayList1.add(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute1);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator1 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator2 = new BayesNetEstimator();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.setEstimator(bayesNetEstimator2);
      BayesNetEstimator bayesNetEstimator3 = new BayesNetEstimator();
      bayesNet0.getEstimator();
      bayesNet0.setEstimator(bayesNetEstimator0);
      BayesNet bayesNet1 = new BayesNet();
      jRip0.seedTipText();
      boolean boolean0 = jRip_NumericAntd0.covers(denseInstance0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7039917864324616
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Mb", arrayList1, 1393);
      JRip jRip0 = new JRip();
      Utils.SMALL = (double) 1393;
      Attribute attribute0 = new Attribute("Mb", instances0, 1393);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1393;
      doubleArray0[2] = (double) 1393;
      doubleArray0[4] = (double) 2;
      doubleArray0[0] = (double) 4;
      arrayList1.add(attribute0);
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      instances0.add((Instance) denseInstance0);
      JRip jRip1 = new JRip();
      Instances instances1 = new Instances((String) null, arrayList1, 3);
      JRip jRip2 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 1, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(":}", arrayList1, 1410);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute(":}", instances0, 1410);
      arrayList1.add(attribute0);
      Instances instances1 = new Instances(instances0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 1, 1.0);
      Attribute attribute1 = new Attribute("@relation", instances0);
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.measureExtraArcs();
      bayesNet0.getEstimator();
      BayesNet bayesNet2 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator1 = new BayesNetEstimator();
      BayesNet bayesNet3 = new BayesNet();
      BayesNetEstimator bayesNetEstimator2 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator3 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator4 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator5 = new BayesNetEstimator();
      BayesNet bayesNet4 = new BayesNet();
      bayesNet0.setEstimator(bayesNetEstimator4);
      BayesNetEstimator bayesNetEstimator6 = new BayesNetEstimator();
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      bayesNet6.getEstimator();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0063211141067647
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Mb", arrayList0, 1393);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("Mb", instances0, 1393);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 1393;
      doubleArray0[4] = (double) 2;
      doubleArray0[0] = (double) 4;
      arrayList0.add(attribute0);
      DenseInstance denseInstance0 = new DenseInstance(3);
      instances0.add((Instance) denseInstance0);
      Instances instances1 = new Instances((String) null, arrayList0, 3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 1, 0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.measureExtraArcs();
      bayesNet0.getCapabilities();
      BayesNetEstimator bayesNetEstimator0 = bayesNet0.getEstimator();
      BayesNet bayesNet2 = new BayesNet();
      BayesNetEstimator bayesNetEstimator1 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator2 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator3 = new BayesNetEstimator();
      BayesNet bayesNet3 = new BayesNet();
      bayesNet2.setEstimator(bayesNetEstimator0);
      BayesNetEstimator bayesNetEstimator4 = new BayesNetEstimator();
      BayesNet bayesNet4 = new BayesNet();
      bayesNet4.getEstimator();
      BayesNet bayesNet5 = new BayesNet();
      bayesNet3.getEstimator();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 1.0, 2);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList1, 2);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", instances0);
      Attribute attribute1 = new Attribute("@end", 3);
      arrayList1.add(attribute1);
      double[] doubleArray0 = new double[1];
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      String[] stringArray0 = new String[9];
      inputMappedClassifier0.setTrim(false);
      stringArray0[0] = "@attribute";
      stringArray0[1] = "string";
      stringArray0[2] = "^*a,)(,#]SV{X^XaZ";
      stringArray0[3] = "numeric";
      stringArray0[4] = "relational";
      stringArray0[5] = "relational";
      stringArray0[6] = "@end";
      stringArray0[7] = "real";
      stringArray0[8] = "";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      instances1.deleteWithMissing(attribute0);
      instances1.add((Instance) denseInstance0);
      Attribute attribute2 = new Attribute("d!Wpzy", 2020);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Consumer<Attribute> consumer0 = (Consumer<Attribute>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList1.forEach(consumer0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList1, 2);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", instances0);
      Attribute attribute1 = new Attribute("@end", 3);
      arrayList1.add(attribute1);
      double[] doubleArray0 = new double[1];
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@attribute";
      stringArray0[1] = "string";
      stringArray0[2] = "string";
      stringArray0[3] = "numeric";
      stringArray0[4] = "relational";
      stringArray0[5] = "relational";
      stringArray0[6] = "@end";
      stringArray0[7] = "real";
      stringArray0[8] = "";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      instances1.deleteWithMissing(attribute0);
      instances1.add((Instance) denseInstance0);
      Attribute attribute2 = new Attribute("d!Wpzy", 2020);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Consumer<Attribute> consumer0 = (Consumer<Attribute>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList1.forEach(consumer0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8720520186532996
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList1, 2);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", instances0);
      Attribute attribute1 = new Attribute("@end", 3);
      arrayList1.add(attribute1);
      double[] doubleArray0 = new double[1];
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@attribute";
      stringArray0[1] = "string";
      stringArray0[2] = "^*a,)(,#]SV{X^XaZ";
      stringArray0[3] = "numeric";
      stringArray0[4] = "relational";
      stringArray0[5] = "relational";
      stringArray0[6] = "@end";
      jRip0.setUsePruning(false);
      Attribute attribute2 = new Attribute("", instances0);
      attribute2.copy();
      DecisionTable decisionTable0 = new DecisionTable();
      instances0.toString();
      Instances instances2 = new Instances(instances1);
      try { 
        jRip0.rulesetForOneClass(2, instances1, 0.001, (-6427.154343130532));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5553670932326975
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      jRip0.setOptions((String[]) null);
      jRip0.minNoTipText();
      jRip0.getFolds();
      jRip0.toString();
      jRip0.enumerateMeasures();
      System.setCurrentTimeMillis(4628L);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      IBk iBk0 = new IBk(500);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 4628L;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 500;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 3;
      iBk0.pruneToK((Instances) null, doubleArray0, (-1337));
      try { 
        jRip0.rulesetForOneClass((-1.0), (Instances) null, 187.298792, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList1, 2);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", instances0);
      Attribute attribute1 = new Attribute("@end", 3);
      arrayList1.add(attribute1);
      double[] doubleArray0 = new double[1];
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@attribute";
      stringArray0[1] = "string";
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "string";
      stringArray1[1] = "numeric";
      stringArray1[2] = "@relation";
      stringArray1[3] = "@attribute";
      stringArray1[4] = "@data";
      stringArray1[5] = "@end";
      AbstractClassifier.runClassifier(multiClassClassifierUpdateable0, stringArray1);
      instances0.deleteWithMissing(attribute1);
      instances0.add((Instance) denseInstance0);
      Attribute attribute2 = new Attribute((String) null, 1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute2);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Consumer<Attribute> consumer0 = (Consumer<Attribute>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList1.forEach(consumer0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances1, true);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Mb", arrayList1, 938);
      arrayList0.add("");
      JRip jRip1 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute(".arff", arrayList0, protectedProperties0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 938;
      doubleArray0[2] = (double) 938;
      doubleArray0[0] = (double) 4;
      doubleArray0[4] = (double) 2;
      doubleArray0[0] = (double) 4;
      arrayList1.add(attribute0);
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      instances0.add((Instance) denseInstance0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      JRip jRip2 = new JRip();
      Attribute attribute1 = new Attribute(" <= ", 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute1);
      Consumer<Attribute> consumer0 = (Consumer<Attribute>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList1.forEach(consumer0);
      instances0.add((Instance) denseInstance0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      JRip.NominalAntd jRip_NominalAntd1 = jRip2.new NominalAntd(attribute0);
      jRip_NominalAntd1.accu = 0.0;
      // Undeclared exception!
      try { 
        jRip_NominalAntd1.splitData(instances0, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Mb", arrayList1, 936);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("Mb", instances0, 936);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[4] = (double) 2;
      doubleArray0[0] = (double) 4;
      arrayList1.add(attribute0);
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      instances0.add((Instance) denseInstance0);
      attribute0.setStringValue("date");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Attribute attribute1 = new Attribute("relational", 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "numeric";
      stringArray0[1] = "integer";
      stringArray0[2] = "numeric";
      Attribute.main(stringArray0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      attribute1.indexOfValue("integer");
      arrayList2.add(attribute0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList2.forEach(consumer1);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 2, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Mb", arrayList1, 1394);
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(2.0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1208.4745;
      doubleArray1[1] = (double) 78;
      DenseInstance denseInstance1 = new DenseInstance(78, doubleArray1);
      denseInstance1.setWeight(1268.6113186399);
      int[] intArray0 = new int[5];
      intArray0[0] = 77;
      intArray0[1] = 1394;
      intArray0[2] = 78;
      intArray0[3] = 123;
      intArray0[4] = 78;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1208.4745, intArray0, 77);
      binarySparseInstance0.dataset();
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      protectedProperties2.elements();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties4);
      protectedProperties2.propertyNames();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties2);
      int[] intArray0 = new int[1];
      intArray0[0] = 77;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-849.176904179263), intArray0, 77);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("00h5d", arrayList0, 77);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      ClassOrder classOrder0 = new ClassOrder();
      assertEquals("Specify the class order after the filtering", classOrder0.classOrderTipText());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4642567260559776
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("Shrinkage arameter (use small value lCke 0.1 &o]reduce overfitting).");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("AdaBoostM1: Base classifiers and their weights: \n\n", arrayList1, 2);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@data", instances0);
      RuleStats ruleStats0 = new RuleStats();
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[12];
      doubleArray2[0] = (double) 4;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 1;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 0.3;
      doubleArray4[1] = (double) 2;
      doubleArray4[3] = (double) 1;
      doubleArray4[4] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (double) 1;
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = (double) 2;
      doubleArray5[3] = (double) 3;
      doubleArray5[4] = 1.0;
      doubleArray5[5] = (double) 1;
      doubleArray5[6] = (double) 2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = 314.916;
      doubleArray7[2] = (double) 2;
      doubleArray7[3] = (double) 0;
      doubleArray7[4] = (double) 1;
      doubleArray7[5] = (double) 2;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = (double) 2;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[9];
      doubleArray9[0] = (double) 0;
      doubleArray9[1] = (double) 0;
      doubleArray9[2] = (double) 2;
      doubleArray9[3] = (double) 1;
      doubleArray9[4] = (double) 4;
      doubleArray9[5] = (double) 2;
      doubleArray9[6] = 1671.155036;
      doubleArray9[7] = 0.3;
      doubleArray9[8] = 1098.4218535127818;
      doubleArray0[8] = doubleArray9;
      ruleStats0.countData(1, instances0, doubleArray0);
      attribute0.equals(ruleStats0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Attribute attribute1 = new Attribute("AdaBoostM1: Base classifiers and their weights: \n\n", arrayList0);
      attribute1.enumerateValues();
      arrayList1.add(attribute1);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd1.splitData(instances1, 3, 2);
      ClassOrder classOrder0 = new ClassOrder();
      classOrder0.getOptions();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Mb", arrayList1, 1393);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("Mb", instances0, 1393);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1393;
      doubleArray0[4] = (double) 2;
      doubleArray0[0] = (double) 4;
      arrayList1.add(attribute0);
      Instances instances1 = new Instances((String) null, arrayList1, 3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances1, 4, 4.0);
      Attribute attribute1 = new Attribute("@relation", instances0);
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.measureExtraArcs();
      bayesNet0.getEstimator();
      BayesNet bayesNet2 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator1 = new BayesNetEstimator();
      BayesNet bayesNet3 = new BayesNet();
      BayesNetEstimator bayesNetEstimator2 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator3 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator4 = new BayesNetEstimator();
      bayesNet0.measureExtraArcs();
      BayesNet bayesNet4 = new BayesNet();
      bayesNet3.setEstimator((BayesNetEstimator) null);
      BayesNetEstimator bayesNetEstimator5 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator6 = bayesNet2.getEstimator();
      bayesNet0.setEstimator(bayesNetEstimator6);
      BayesNet bayesNet5 = new BayesNet();
      assertFalse(bayesNet5.getDebug());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Attribute attribute0 = new Attribute("ability");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale locale0 = new Locale("real");
      locale0.getUnicodeLocaleAttributes();
      arrayList0.add("\tSet the number of runs of\n\toptimizations. (Default: 2)");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      jRip0.setFolds((-502));
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.covers((Instance) null);
      int int0 = jRip0.getFolds();
      assertEquals((-502), int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      BiFunction<Object, Object, RuleStats> biFunction0 = (BiFunction<Object, Object, RuleStats>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties4.computeIfPresent(protectedProperties10, biFunction0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties2);
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      Properties properties6 = new Properties(protectedProperties13);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(properties2);
      Properties properties7 = new Properties();
      ProtectedProperties protectedProperties16 = new ProtectedProperties(properties5);
      Properties properties8 = new Properties();
      ProtectedProperties protectedProperties17 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@,;.be/'Ydcx'e");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(" => @,;.be/'Ydcx'e=", string0);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList1, 6);
      jRip_NominalAntd0.splitData(instances0, 4, 0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.9594045983154567
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (-997.3594);
      doubleArray0[1] = (-997.3594);
      doubleArray0[2] = (-997.3594);
      doubleArray0[3] = (-997.3594);
      doubleArray0[4] = (-997.3594);
      doubleArray0[5] = (-997.3594);
      DenseInstance denseInstance0 = new DenseInstance((-997.3594), doubleArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eh?82WfTK");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("eh?82WfTK");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      attribute0.copy();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip0.rulesetForOneClass(360.151, (Instances) null, (-1886.50680377777), 64.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.237278262262586
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H/*1oI0%#");
      Attribute attribute0 = new Attribute("H/*1oI0%#", (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attribute0.formatDate(6.7);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3251.22183822);
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      attribute0.copy();
      DecisionTable decisionTable0 = new DecisionTable();
      jRip0.getRevision();
      jRip0.getOptions();
      Instances instances0 = decisionTable0.m_theInstances;
      try { 
        jRip0.rulesetForOneClass(4, (Instances) null, 4, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n*** Optimizaton: run #");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`S+O#%71l;");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`S+O#%71l;");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("`S+O#%71l;");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)7;
      byteArray0[2] = (byte)7;
      int[] intArray0 = new int[2];
      intArray0[0] = (-336);
      intArray0[1] = (int) (byte)7;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)7, intArray0, 1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4399.486707935404, intArray0, 1);
      binarySparseInstance1.dataset();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(4);
      System.setCurrentTimeMillis(47L);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties8);
      protectedProperties9.clone();
      BiFunction<Object, Object, RuleStats> biFunction0 = (BiFunction<Object, Object, RuleStats>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties1.computeIfPresent(protectedProperties9, biFunction0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties2);
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      Properties properties6 = new Properties(protectedProperties12);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(properties2);
      Properties properties7 = new Properties();
      ProtectedProperties protectedProperties15 = new ProtectedProperties(properties5);
      Properties properties8 = new Properties();
      ProtectedProperties protectedProperties16 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@,;.be/'Ydcx'e");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.toString(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 8);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassOrder classOrder0 = new ClassOrder();
      JRip jRip0 = new JRip();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      AbstractClassifier.makeCopies(adaBoostM1_0, 2);
      AbstractClassifier.makeCopy(adaBoostM1_0);
      int int0 = jRip0.getOptimizations();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, int0);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.304704691639832
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n*** ptmizaton: run #");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n*** ptmizaton: run #");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n*** ptmizaton: run #");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("XS+O#%71l;");
      byte[] byteArray0 = new byte[5];
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.iterator();
      arrayList0.parallelStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      JRip jRip0 = new JRip();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = jRip0.foldsTipText();
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertNotSame(jRip_NumericAntd0, jRip_NumericAntd1);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(boolean0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 78;
      intArray0[1] = 78;
      intArray0[2] = 1;
      intArray0[4] = 78;
      intArray0[5] = 78;
      intArray0[6] = 78;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 77);
      binarySparseInstance0.dataset();
      try { 
        jRip0.rulesetForOneClass((-530.7650341879265), (Instances) null, Double.NaN, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2261289670319746
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Mb", arrayList1, 1393);
      JRip jRip0 = new JRip();
      Utils.SMALL = (double) 1393;
      Attribute attribute0 = new Attribute("Mb", instances0, 1393);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 1393;
      doubleArray0[4] = (double) 2;
      doubleArray0[0] = (double) 4;
      arrayList1.add(attribute0);
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      JRip jRip1 = new JRip();
      Instances instances1 = new Instances((String) null, arrayList1, 3);
      JRip jRip2 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 1, 1.0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      Attribute attribute1 = new Attribute("real", arrayList0);
      attribute1.enumerateValues();
      arrayList1.add(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = jRip2.new NominalAntd(attribute1);
      StringReader stringReader0 = new StringReader("'@FdkS)w@U)IF;");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0, 78);
      Instances instances2 = null;
      try {
        instances2 = new Instances(bufferedReader1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[@FdkS)w@U)IF;], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Mb", arrayList1, 936);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("Mb", instances0, 936);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[4] = (double) 2;
      doubleArray0[0] = (double) 4;
      arrayList1.add(attribute0);
      attribute0.setStringValue("ib6^fSjzn'~XzZ]E|=");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList1.forEach(consumer0);
      Attribute attribute1 = new Attribute("relational", 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      attribute1.indexOfValue("integer");
      arrayList2.add(attribute0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList2.forEach(consumer1);
      jRip_NominalAntd0.splitData(instances0, 2, 4);
      Attribute attribute2 = new Attribute("real", (String) null, 2);
      arrayList1.add(attribute2);
      jRip_NominalAntd0.getRevision();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(69);
      assertEquals(69, binarySparseInstance0.numAttributes());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0714137841699203
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.5;
      String[] stringArray0 = jRip0.getOptions();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet0.measureExtraArcs();
      bayesNet0.measureExtraArcs();
      bayesNet0.getEstimator();
      BayesNet bayesNet2 = new BayesNet();
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      bayesNet1.setSearchAlgorithm(searchAlgorithm0);
      bayesNet0.getEstimator();
      BayesNet bayesNet3 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      bayesNet1.getEstimator();
      BayesNet bayesNet4 = new BayesNet();
      BayesNetEstimator bayesNetEstimator1 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator2 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator3 = new BayesNetEstimator();
      Attribute attribute0 = new Attribute("<IiBMp##*Kp");
      JRip jRip1 = new JRip();
      JRip jRip2 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip2.new NumericAntd(attribute0);
      jRip0.setOptions(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      BayesNet bayesNet5 = new BayesNet();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.getUsePruning();
      assertFalse(jRip0.getUsePruning());
      
      CoverTree coverTree0 = new CoverTree();
      ClassOrder classOrder0 = new ClassOrder();
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.132999251994992
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      jRip0.setUsePruning(true);
      jRip0.globalInfo();
      jRip0.getOptions();
      jRip0.getCheckErrorRate();
      CoverTree coverTree0 = new CoverTree();
      ClassOrder classOrder0 = new ClassOrder();
      ClassOrder classOrder1 = new ClassOrder();
      ClassOrder classOrder2 = new ClassOrder();
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      bayesNet0.measureExtraArcs();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = bayesNet2.getEstimator();
      BayesNet bayesNet6 = new BayesNet();
      BayesNetEstimator bayesNetEstimator1 = new BayesNetEstimator();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      bayesNet5.setEstimator(bayesNetEstimator0);
      BayesNet bayesNet9 = new BayesNet();
      Attribute attribute0 = new Attribute("@relation", 81);
      double double0 = jRip_RipperRule0.getConsequent();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=wZ]iR9 %.");
      JRip jRip0 = new JRip();
      jRip0.getDebug();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setUsePruning(false);
      SparseInstance sparseInstance0 = new SparseInstance(1534);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance1);
      jRip_RipperRule0.covers(binarySparseInstance0);
      jRip0.foldsTipText();
      System.setCurrentTimeMillis(1L);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("=wZ]iR9 %.", list0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAccu();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      Attribute attribute0 = new Attribute("JRIP: No model built yet.");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1056.743688169556;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.5;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 2.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      jRip_NominalAntd0.getAttr();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Z>M])g:;X";
      stringArray0[1] = "";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(":}", arrayList1, 1410);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute(":}", instances0, 1410);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jRip0.getUsePruning();
      Instances instances1 = new Instances(instances0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 1, 1.0);
      Attribute attribute1 = new Attribute("@relation", instances0);
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.measureExtraArcs();
      bayesNet0.getEstimator();
      BayesNet bayesNet2 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator1 = new BayesNetEstimator();
      BayesNet bayesNet3 = new BayesNet();
      BayesNetEstimator bayesNetEstimator2 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator3 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator4 = new BayesNetEstimator();
      BayesNet bayesNet4 = new BayesNet();
      bayesNet3.setEstimator((BayesNetEstimator) null);
      BayesNetEstimator bayesNetEstimator5 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator6 = bayesNet2.getEstimator();
      bayesNet0.setEstimator(bayesNetEstimator6);
      BayesNet bayesNet5 = new BayesNet();
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet5.BIFFileTipText());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CoverTree coverTree0 = new CoverTree();
      String string0 = "KdLei9fKEk\"ZQ{";
      String string1 = ",^Cw;w61PE?";
      StringReader stringReader0 = new StringReader(",^Cw;w61PE?");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      JRip jRip0 = new JRip();
      jRip0.getSeed();
      BufferedReader bufferedReader1 = new BufferedReader(stringReader0, 18);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(stringReader0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",^Cw;w61PE?\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n*** ptmizaton: run #");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B3Wf!S");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XS+O#%71l;");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n*** ptmizaton: run #");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("B3Wf!S");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XS+O#%71l;");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(17);
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[0] = (byte) (-33);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = jRip0.getRevision();
      assertEquals("8118", string0);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean1 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("ability");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("]nWhfP}.$;#@?fQ");
      arrayList0.parallelStream();
      arrayList0.add("\tSet the number of runs of\n\toptimizations. (Default: 2)");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      String string0 = jRip0.usePruningTipText();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals("Whether pruning is performed.", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n*** ptmizaton: run #");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n*** ptmizaton: run #");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XS+O#%71l;");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.clear();
      arrayList0.iterator();
      arrayList0.parallelStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XS+O#%71l;");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(17);
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[0] = (byte) (-33);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = jRip0.debugTipText();
      assertFalse(jRip0.getDebug());
      assertEquals("Whether debug information is output to the console.", string0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n*** ptmizaton: run #");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n*** ptmizaton: run #");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n*** ptmizaton: run #");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("XS+O#%71l;");
      byte[] byteArray0 = new byte[5];
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.iterator();
      arrayList0.parallelStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      JRip jRip0 = new JRip();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.measureExtraArcs();
      bayesNet0.measureExtraArcs();
      BayesNet bayesNet2 = new BayesNet();
      bayesNet1.getEstimator();
      BayesNet bayesNet3 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      BayesNet bayesNet4 = new BayesNet();
      bayesNet4.getEstimator();
      BayesNet bayesNet5 = new BayesNet();
      JRip jRip0 = new JRip();
      BayesNet bayesNet6 = new BayesNet();
      AbstractClassifier.makeCopy(bayesNet0);
      bayesNet6.measureDivergence();
      BayesNetEstimator bayesNetEstimator1 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator2 = bayesNet6.getEstimator();
      BayesNetEstimator bayesNetEstimator3 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator4 = new BayesNetEstimator();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      bayesNet1.setEstimator(bayesNetEstimator2);
      BayesNetEstimator bayesNetEstimator5 = new BayesNetEstimator();
      bayesNet3.getEstimator();
      bayesNet8.setEstimator(bayesNetEstimator1);
      BayesNet bayesNet10 = new BayesNet();
      jRip0.getTechnicalInformation();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "Q*Yr;";
      stringArray0[2] = "";
      jRip0.setMinNo((-868.1330611104155));
      jRip0.getMinNo();
      jRip0.enumerateMeasures();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "", 124);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      attribute0.copy();
      attribute0.equals((Object) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.getRevision();
      jRip0.optimizationsTipText();
      Instance instance0 = null;
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("C=$.qYXiD");
      jRip0.globalInfo();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("C=$.qYXiD <= NaN", string0);
      
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      JRip jRip2 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string1 = jRip_NumericAntd0.getRevision();
      assertEquals("8118", string1);
      
      String string2 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string2);
      
      double double0 = jRip_NominalAntd0.getCover();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(jRip1.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip1.getFolds());
      assertEquals(2, jRip1.getOptimizations());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      double[] doubleArray0 = new double[1];
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.getEstimator();
      BayesNet bayesNet1 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator1 = bayesNet1.getEstimator();
      bayesNet1.setEstimator(bayesNetEstimator1);
      BayesNet bayesNet2 = new BayesNet();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      bayesNet1.measureDivergence();
      boolean boolean0 = jRip_RipperRule0.covers((Instance) null);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(boolean0);
      
      BayesNetEstimator bayesNetEstimator2 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator3 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator4 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator5 = new BayesNetEstimator();
      BayesNet bayesNet3 = new BayesNet();
      BayesNetEstimator bayesNetEstimator6 = new BayesNetEstimator();
      bayesNet2.setEstimator(bayesNetEstimator1);
      BayesNet bayesNet4 = new BayesNet();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals("8118", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4940355237092673
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("FMMMoPX,");
      jRip0.globalInfo();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip0.setOptions((String[]) null);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      jRip_NumericAntd0.getSplitPoint();
      Instances instances0 = decisionTable0.m_dtInstances;
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.384415616105067
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("", (-45));
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(" => =", string0);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-45), doubleArray0);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd2 = jRip0.new NominalAntd(attribute0);
      String string1 = jRip_NominalAntd2.toString();
      assertEquals(" = ", string1);
      
      boolean boolean0 = jRip_NominalAntd2.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd2.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd2.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd2.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd2.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(boolean0);
      assertEquals(0.0, jRip_NominalAntd2.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("QkpGDN@rB-cH}", arrayList0, protectedProperties1);
      attribute0.copy("QkpGDN@rB-cH}");
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList0, locale_FilteringMode0);
      attribute0.copy();
      arrayList1.add((Locale.LanguageRange) null);
      Attribute attribute1 = new Attribute("string", list0, (-59));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd0.getAccuRate();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("OK", arrayList0, (-2017));
      Attribute attribute1 = attribute0.copy("OK");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      double double0 = jRip_NominalAntd0.getAttrValue();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5333444197896682
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("zWP-#oV|Q4dE#<");
      arrayList0.add("+");
      arrayList0.add("\nGrowing and pruning a new rule ...");
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      jRip0.setOptions(stringArray0);
      CoverTree coverTree0 = new CoverTree();
      StringReader stringReader0 = new StringReader("2bWUG;shXk");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0, 3417);
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader1);
      BufferedReader bufferedReader3 = new BufferedReader(bufferedReader0);
      BufferedReader bufferedReader4 = new BufferedReader(bufferedReader0);
      BufferedReader bufferedReader5 = new BufferedReader(bufferedReader4);
      BufferedReader bufferedReader6 = new BufferedReader(bufferedReader5, 2313);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(bufferedReader0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2bWUG;shXk\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n*** Optimizaton: run #");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`S+O#%71l;");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`S+O#%71l;");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("The default DL = ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lF#c4W]43Q9");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("The default DL = ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The default DL =  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      JRip jRip0 = new JRip();
      Utils.SMALL = 3262.3622226;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      double double0 = jRip_NumericAntd0.getMaxInfoGain();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(0.0, double0, 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n*** Optimizaton: run #");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`S+O#%71l;");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`S+O#%71l;");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("`S+O#%71l;");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[2] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "real");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "63-76");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "string";
      JRip.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3251.22183822);
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable1.m_theInstances;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1.0);
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(jRip0.getUsePruning());
      assertEquals(1.0, jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      bayesNet3.measureExtraArcs();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      BayesNet bayesNet6 = new BayesNet();
      bayesNet6.setSearchAlgorithm(searchAlgorithm0);
      bayesNet4.getEstimator();
      BayesNet bayesNet7 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      bayesNet5.measureExtraArcs();
      bayesNet1.getEstimator();
      BayesNet bayesNet8 = new BayesNet();
      BayesNetEstimator bayesNetEstimator1 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator2 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator3 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator4 = new BayesNetEstimator();
      bayesNet2.setEstimator(bayesNetEstimator4);
      SMOreg sMOreg0 = new SMOreg();
      AbstractClassifier.makeCopy(bayesNet0);
      BayesNet bayesNet9 = new BayesNet();
      StringReader stringReader0 = new StringReader("8118");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1972);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Line 1: expected number of columns
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      properties1.clone();
      protectedProperties0.keySet();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties4);
      properties1.stringPropertyNames();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties14);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties18);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties21 = new ProtectedProperties(protectedProperties19);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Object object0 = jRip_RipperRule0.copy();
      // Undeclared exception!
      try { 
        protectedProperties9.put("V</l", object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ProtectedProperties cannot be modified!
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", protectedProperties3);
      Attribute attribute1 = attribute0.copy("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      Object object0 = jRip_NominalAntd0.copy();
      // Undeclared exception!
      try { 
        protectedProperties9.put("", object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ProtectedProperties cannot be modified!
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n*** Optimization: run #");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("`S+O#%71l;");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("]nWhfP}.$;#@?fQ");
      arrayList0.parallelStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      properties1.clone();
      protectedProperties0.keySet();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties4);
      properties1.stringPropertyNames();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties14);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties18);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties21 = new ProtectedProperties(protectedProperties19);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      ProtectedProperties protectedProperties22 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties23 = new ProtectedProperties(protectedProperties15);
      Attribute attribute0 = new Attribute("`e?kJ4_%=k[O}dm4=", arrayList1, protectedProperties7);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("`e?kJ4_%=k[O}dm4= <= NaN", string0);
      
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties1);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 10.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      jRip0.setCheckErrorRate(true);
      stringArray0[1] = "\"";
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.measureExtraArcs();
      bayesNet1.measureExtraArcs();
      BayesNet bayesNet2 = new BayesNet();
      bayesNet2.getEstimator();
      BayesNet bayesNet3 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      BayesNet bayesNet4 = new BayesNet();
      bayesNet4.getEstimator();
      bayesNet4.m_Distributions = null;
      BayesNet bayesNet5 = new BayesNet();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BayesNet bayesNet6 = new BayesNet();
      AbstractClassifier.makeCopy(bayesNet5);
      bayesNet5.measureDivergence();
      boolean boolean0 = jRip_RipperRule0.covers((Instance) null);
      assertTrue(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      BayesNetEstimator bayesNetEstimator1 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator2 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator3 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator4 = new BayesNetEstimator();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      BayesNetEstimator bayesNetEstimator5 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator6 = new BayesNetEstimator();
      BayesNet bayesNet10 = new BayesNet();
      bayesNet10.setEstimator(bayesNetEstimator4);
      SMOreg sMOreg0 = new SMOreg();
      AbstractClassifier.makeCopy(bayesNet4);
      BayesNet bayesNet11 = new BayesNet();
      String string0 = jRip0.optimizationsTipText();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals("The number of optimization runs.", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      protectedProperties4.stringPropertyNames();
      protectedProperties2.elements();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties4);
      protectedProperties2.propertyNames();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties2);
      int[] intArray0 = new int[1];
      intArray0[0] = 77;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-849.176904179263), intArray0, 77);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("00h5d", arrayList0, 77);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      ClassOrder classOrder0 = new ClassOrder();
      assertEquals("Specify the seed of randomization of the class order", classOrder0.seedTipText());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-2955.0099989504356);
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      AbstractClassifier.runClassifier(classifier0, stringArray0);
      jRip0.setMinNo(0.0);
      jRip0.getMinNo();
      jRip0.enumerateMeasures();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      Remove remove0 = new Remove();
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 5;
      intArray0[3] = 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, intArray0, 4);
      decisionTable0.m_delTransform = remove0;
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      properties1.clear();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      JRip jRip0 = new JRip();
      assertEquals(1L, jRip0.getSeed());
      
      jRip0.setSeed(2L);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Locale locale0 = Locale.CANADA;
      protectedProperties0.replace((Object) locale0, (Object) jRip0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("QkpGDN@rB-cH}", arrayList0, protectedProperties1);
      attribute0.copy("QkpGDN@rB-cH}");
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      BiFunction<Object, Object, Instance> biFunction0 = (BiFunction<Object, Object, Instance>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties1.merge(protectedProperties0, "QkpGDN@rB-cH}", biFunction0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList0, locale_FilteringMode0);
      Attribute attribute1 = new Attribute("string", list0, (-59));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      double double0 = jRip_NumericAntd0.getAccuRate();
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertFalse(boolean0);
      assertEquals(3, jRip0.getFolds());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Mb", arrayList1, 1393);
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1393;
      doubleArray0[1] = 21.5;
      doubleArray0[2] = 21.5;
      doubleArray0[3] = 21.5;
      doubleArray0[4] = 21.5;
      doubleArray0[5] = 21.5;
      doubleArray0[6] = (double) 1393;
      DenseInstance denseInstance0 = new DenseInstance(21.5, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(930.3477833662793, doubleArray0);
      denseInstance1.setWeight(4.0);
      int[] intArray0 = new int[4];
      intArray0[0] = 78;
      intArray0[1] = 78;
      intArray0[2] = 78;
      intArray0[3] = 77;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(78, intArray0, 78);
      binarySparseInstance0.dataset();
      try { 
        jRip0.rulesetForOneClass(902.9978862, instances0, (-1627.82189427553), 21.5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Attribute attribute0 = new Attribute("cvI");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("\tSet the number of runs of\n\toptimizations. (Default: 2)");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\tSet the number of runs of\n\toptimizations. (Default: 2)", arrayList1, 4);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances1, (-3251.22183822), 2);
      jRip_NumericAntd0.toString();
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Mb", arrayList1, 936);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("Mb", instances0, 936);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[4] = (double) 2;
      doubleArray0[0] = (double) 4;
      arrayList1.add(attribute0);
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      instances0.add((Instance) denseInstance0);
      attribute0.setStringValue("ib6^fSjpfn'~XzZ]E|=");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList1.forEach(consumer0);
      Attribute attribute1 = new Attribute("relational", 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "numeric";
      stringArray0[1] = "integer";
      stringArray0[2] = "numeric";
      Attribute.main(stringArray0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      attribute1.indexOfValue("integer");
      arrayList2.add(attribute0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList2.forEach(consumer1);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 2, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.measureExtraArcs();
      bayesNet0.getEstimator();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "50X><";
      stringArray0[1] = ":}";
      stringArray0[2] = ":}";
      stringArray0[3] = ":}";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator1 = new BayesNetEstimator();
      BayesNet bayesNet2 = new BayesNet();
      BayesNetEstimator bayesNetEstimator2 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator3 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator4 = new BayesNetEstimator();
      BayesNet bayesNet3 = new BayesNet();
      BayesNetEstimator bayesNetEstimator5 = new BayesNetEstimator();
      bayesNet1.setEstimator(bayesNetEstimator5);
      BayesNetEstimator bayesNetEstimator6 = new BayesNetEstimator();
      BayesNet bayesNet4 = new BayesNet();
      bayesNet4.measureBDeuScore();
      BayesNet bayesNet5 = new BayesNet();
      bayesNet4.setEstimator(bayesNetEstimator2);
      BayesNet bayesNet6 = new BayesNet();
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.measureExtraArcs();
      bayesNet1.measureExtraArcs();
      BayesNet bayesNet2 = new BayesNet();
      bayesNet2.getEstimator();
      BayesNet bayesNet3 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      BayesNet bayesNet4 = new BayesNet();
      bayesNet4.getEstimator();
      BayesNet bayesNet5 = new BayesNet();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BayesNet bayesNet6 = new BayesNet();
      AbstractClassifier.makeCopy(bayesNet5);
      bayesNet5.measureDivergence();
      boolean boolean0 = jRip_RipperRule0.covers((Instance) null);
      assertTrue(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      BayesNetEstimator bayesNetEstimator1 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator2 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator3 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator4 = new BayesNetEstimator();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      bayesNet2.setEstimator(bayesNetEstimator0);
      BayesNetEstimator bayesNetEstimator5 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator6 = bayesNet1.getEstimator();
      bayesNet4.setEstimator(bayesNetEstimator6);
      BayesNet bayesNet10 = new BayesNet();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties2);
      int[] intArray0 = new int[6];
      intArray0[0] = 77;
      intArray0[1] = 77;
      intArray0[2] = (-535);
      intArray0[3] = (-59);
      intArray0[4] = 77;
      intArray0[5] = 3270;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-59), intArray0, 70);
      Attribute attribute0 = new Attribute("0ec@");
      JRip jRip0 = new JRip();
      binarySparseInstance0.isMissing(1220);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      jRip0.listOptions();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.measureExtraArcs();
      bayesNet0.measureExtraArcs();
      AbstractClassifier.makeCopy(bayesNet0);
      bayesNet1.getEstimator();
      BayesNet bayesNet2 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      BayesNet bayesNet3 = new BayesNet();
      BayesNetEstimator bayesNetEstimator1 = bayesNet3.getEstimator();
      bayesNet0.setEstimator(bayesNetEstimator1);
      BayesNet bayesNet4 = new BayesNet();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BayesNet bayesNet5 = new BayesNet();
      bayesNet5.measureDivergence();
      jRip_RipperRule0.covers((Instance) null);
      BayesNetEstimator bayesNetEstimator2 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator3 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator4 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator5 = new BayesNetEstimator();
      BayesNet bayesNet6 = new BayesNet();
      BayesNetEstimator bayesNetEstimator6 = new BayesNetEstimator();
      BayesNetEstimator bayesNetEstimator7 = new BayesNetEstimator();
      bayesNet5.setEstimator(bayesNetEstimator7);
      BayesNet bayesNet7 = new BayesNet();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n*** Optimization: run #");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList0.add("B3f!S");
      arrayList0.parallelStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("G*pkOVb_&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // G*pkOVb_& not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      protectedProperties0.keySet();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties4);
      properties1.stringPropertyNames();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties14);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties18);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties21 = new ProtectedProperties(protectedProperties19);
      arrayList0.add("Should never happen: repDLin optmz. stage NaN or infinite!");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Should never happen: repDLin optmz. stage NaN or infinite!";
      stringArray0[1] = "Should never happen: repDLin optmz. stage NaN or infinite!";
      stringArray0[2] = "Should never happen: repDLin optmz. stage NaN or infinite!";
      stringArray0[3] = "Should never happen: repDLin optmz. stage NaN or infinite!";
      stringArray0[4] = "Should never happen: repDLin optmz. stage NaN or infinite!";
      stringArray0[5] = "Should never happen: repDLin optmz. stage NaN or infinite!";
      stringArray0[6] = "Should never happen: repDLin optmz. stage NaN or infinite!";
      stringArray0[7] = "Should never happen: repDLin optmz. stage NaN or infinite!";
      stringArray0[8] = "Should never happen: repDLin optmz. stage NaN or infinite!";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      ProtectedProperties protectedProperties22 = new ProtectedProperties(protectedProperties19);
      ProtectedProperties protectedProperties23 = new ProtectedProperties(protectedProperties22);
      JRip jRip1 = new JRip();
      try { 
        jRip1.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.checkErrorRateTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      Remove remove0 = new Remove();
      BallTree ballTree0 = new BallTree();
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.setSearchAlgorithm(searchAlgorithm0);
      BayesNet bayesNet1 = new BayesNet();
      bayesNet0.measureExtraArcs();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      SearchAlgorithm searchAlgorithm1 = new SearchAlgorithm();
      BayesNet bayesNet4 = new BayesNet();
      bayesNet3.setSearchAlgorithm(searchAlgorithm1);
      BayesNet bayesNet5 = new BayesNet();
      bayesNet5.getEstimator();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      try { 
        bayesNet7.estimateCPTs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.estimate.SimpleEstimator", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cvI");
      Attribute attribute0 = new Attribute("cvI");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.removeFirstOccurrence(attribute0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("\tSet the number of runs of\n\toptimizations. (Default: 2)");
      linkedList0.removeAll(arrayList0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList1);
      JRip jRip0 = new JRip();
      double double0 = jRip0.getMinNo();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      BiFunction<Object, Object, RuleStats> biFunction0 = (BiFunction<Object, Object, RuleStats>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties4.computeIfPresent(protectedProperties10, biFunction0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties2);
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      Properties properties6 = new Properties();
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(properties2);
      Properties properties7 = new Properties();
      ProtectedProperties protectedProperties16 = new ProtectedProperties(properties5);
      Properties properties8 = new Properties();
      ProtectedProperties protectedProperties17 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@,;.be/'Ydcx'e");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(" => @,;.be/'Ydcx'e=", string0);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList1, 6);
      jRip_NominalAntd0.splitData(instances0, 4, 0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Attribute attribute0 = new Attribute("");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0);
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      protectedProperties0.keySet();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties4);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties14);
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties7);
      arrayList0.add("");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties18);
      Attribute attribute0 = new Attribute("`R9Epkayp@eU-=M[dX", arrayList0, protectedProperties18);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 1, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n*** Optimizaton: run #");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`S+O#%71l;");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B3f!S");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`S+O#%71l;");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("`S+O#%71l;");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)9;
      byteArray0[2] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n*** Optimizaton: run #");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`S+O#%71l;");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-9));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }
}
