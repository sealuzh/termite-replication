/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 22:04:16 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URI;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.SAXParseException;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.net.BIFReader;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.trees.REPTree;
import weka.core.AllJavadoc;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.EuclideanDistance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.OptionHandlerJavadoc;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TestInstances;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.TopDownConstructor;
import weka.core.stemmers.IteratedLovinsStemmer;
import weka.core.stemmers.LovinsStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.118514383949668
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.setPeriodicPruning(11);
      naiveBayesMultinomialText0.getStopwords();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc3 = new OptionHandlerJavadoc();
      optionHandlerJavadoc3.generate();
      OptionHandlerJavadoc optionHandlerJavadoc4 = new OptionHandlerJavadoc();
      naiveBayesMultinomialText0.getOptions();
      OptionHandlerJavadoc optionHandlerJavadoc5 = new OptionHandlerJavadoc();
      optionHandlerJavadoc5.setSilent(false);
      optionHandlerJavadoc3.setClassname("<!-- options-end -->");
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getStemmer();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("<!-- options-end -->");
      inputMappedClassifier0.getModelHeader(instances0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0, intArray0, (-3644));
      naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
      assertEquals(11, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3173538666078555
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.setPeriodicPruning(11);
      naiveBayesMultinomialText0.getStopwords();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc3 = new OptionHandlerJavadoc();
      optionHandlerJavadoc3.generate();
      OptionHandlerJavadoc optionHandlerJavadoc4 = new OptionHandlerJavadoc();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      optionHandlerJavadoc1.setUseStars(false);
      optionHandlerJavadoc1.setSilent(false);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText1.m_tokenizer;
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) wordTokenizer0;
      optionHandlerJavadoc3.setClassname("<!-- options-end -->");
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getStemmer();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.getOptions();
      naiveBayesMultinomialText1.setOptions(stringArray0);
      boolean boolean0 = naiveBayesMultinomialText0.getUseStopList();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.043250449897999
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setLNorm((-1746.6122257698285));
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getLNorm();
      Instances instances0 = naiveBayesMultinomialText0.m_data;
      Instances instances1 = null;
      try {
        instances1 = new Instances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.230265232675139
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("If true then documeKt length is normalized according to the settings for norm and lnorm");
      String[] stringArray0 = new String[3];
      stringArray0[2] = "If true then documeKt length is normalized according to the settings for norm and lnorm";
      stringArray0[1] = "If true then documeKt length is normalized according to the settings for norm and lnorm";
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(stringArray0[0]);
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.generate();
      TestInstances testInstances2 = new TestInstances();
      testInstances0.generate("If true then documeKt length is normalized according to the settings for norm and lnorm");
      testInstances2.setMultiInstance(true);
      testInstances0.getData();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      naiveBayesMultinomialText0.debugTipText();
      System.setCurrentTimeMillis(0L);
      double[] doubleArray0 = new double[1];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      doubleArray0[0] = (double) (-1);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, true);
      intArray0[2] = (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0, intArray0, (-1));
      double[] doubleArray1 = naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertArrayEquals(new double[] {0.5454545454545454, 0.4545454545454546}, doubleArray1, 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      OptionHandlerJavadoc[] optionHandlerJavadocArray0 = new OptionHandlerJavadoc[6];
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[0] = optionHandlerJavadoc0;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("cQGy%", arrayList0, 865);
      Attribute attribute0 = new Attribute(".arff");
      Attribute attribute1 = attribute0.copy("Z%/E,qXaL$4Jy");
      arrayList0.add(attribute1);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) vector0);
      Attribute attribute2 = new Attribute("@attribute", list0);
      arrayList0.add(attribute1);
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc3 = new OptionHandlerJavadoc();
      optionHandlerJavadoc3.setSilent(true);
      OptionHandlerJavadoc optionHandlerJavadoc4 = new OptionHandlerJavadoc();
      optionHandlerJavadoc4.setClassname("");
      optionHandlerJavadoc1.setSilent(true);
      optionHandlerJavadoc3.setClassname("7H`GA");
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("fDO+sk)PeYff");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.getData();
      testInstances1.generate();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7518685126965625
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.globalInfo();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification");
      naiveBayesMultinomialText0.setNorm((-2592.215726208));
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.globalInfo();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification");
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.getNorm();
      MockFile mockFile0 = new MockFile("Normal Distribution. Mean = ", "The file containing the stopwords (if this is a directory then the default ones are used).");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      System.setCurrentTimeMillis(0L);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      try { 
        inputMappedClassifier0.constructMappedInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getLNorm();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[1] = "-";
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.m_stopwordsFile = file0;
      stringArray0[2] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[3] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[4] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[5] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[6] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[7] = "If true then document length is normalized according to the settings for norm and lnorm";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(0);
      Instances instances0 = naiveBayesMultinomialText0.m_data;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) vector0);
      Attribute attribute0 = new Attribute(".bsi", list0);
      arrayList0.add(attribute0);
      OptionHandlerJavadoc[] optionHandlerJavadocArray0 = new OptionHandlerJavadoc[6];
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[0] = optionHandlerJavadoc0;
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[1] = optionHandlerJavadoc1;
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      optionHandlerJavadoc2.setSilent(true);
      optionHandlerJavadoc2.setClassname("@data");
      optionHandlerJavadocArray0[2] = optionHandlerJavadoc2;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("@data");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.getData();
      Instances instances1 = testInstances0.generate();
      DenseInstance denseInstance0 = new DenseInstance(1);
      instances1.add((Instance) denseInstance0);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.31256258775114
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string0);
      
      int[] intArray0 = new int[7];
      intArray0[1] = 20;
      intArray0[2] = 20;
      intArray0[3] = 24;
      intArray0[4] = 20;
      intArray0[5] = 20;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-945), intArray0, 20);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("Cannot find minimum -- too many interations!");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("If true then document length is normalized according to the settings for norm and lnorm");
      naiveBayesMultinomialText0.m_stopwordsFile = (File) mockFile0;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText1.setOptions(stringArray0);
      assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText1.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
      assertEquals(14, stringArray0.length);
      assertFalse(naiveBayesMultinomialText1.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.195315165445874
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      OptionHandlerJavadoc[] optionHandlerJavadocArray0 = new OptionHandlerJavadoc[6];
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[0] = optionHandlerJavadoc0;
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[1] = optionHandlerJavadoc0;
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc3 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc4 = new OptionHandlerJavadoc();
      optionHandlerJavadoc3.setSilent(false);
      OptionHandlerJavadoc optionHandlerJavadoc5 = new OptionHandlerJavadoc();
      optionHandlerJavadoc3.setClassname("<!-- options-end -->");
      optionHandlerJavadoc5.setSilent(true);
      TestInstances testInstances0 = new TestInstances();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.getData();
      testInstances1.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setStopwords((File) null);
      String[] stringArray0 = naiveBayesMultinomialText1.getOptions();
      assertEquals(12, stringArray0.length);
      
      naiveBayesMultinomialText0.setOptions(testInstances1.DEFAULT_WORDS);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7228120764467145
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("kernelMatrix.matrix/How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances0How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      naiveBayesMultinomialText0.m_lnorm = 1923.39100718;
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) iteratedLovinsStemmer0;
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setLNorm(1923.39100718);
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.periodicPruningTipText();
      iteratedLovinsStemmer0.globalInfo();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      File file1 = MockFile.createTempFile("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", "How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", file0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("kernelMatrix.matrix");
      FileSystemHandling.createFolder(evoSuiteFile1);
      iteratedLovinsStemmer0.toString();
      naiveBayesMultinomialText0.setStopwords(file1);
      naiveBayesMultinomialText0.useStopListTipText();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      naiveBayesMultinomialText0.LNormTipText();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.218770771174388
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("If true then document length is normalized according to the settings for norm and lnorm");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jV\"RI{0Of)if5f)72U");
      testInstances0.setRelationalClassFormat(instances0);
      Instances instances1 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      LinkedHashMap<AllJavadoc, NGramTokenizer> linkedHashMap0 = new LinkedHashMap<AllJavadoc, NGramTokenizer>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedHashMap0);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances1);
      predicate0.test(euclideanDistance0);
      instances1.removeIf(predicate0);
      Instances instances2 = new Instances(instances1, 1236);
      REPTree rEPTree0 = new REPTree();
      Capabilities capabilities0 = rEPTree0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.getData();
      instances0.deleteStringAttributes();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      System.setCurrentTimeMillis(8L);
      testInstances2.setWordSeparators("0g<e)We`no<Y");
      testInstances2.setNumRelationalNumeric(12);
      SnowballStemmer snowballStemmer1 = new SnowballStemmer();
      System.setCurrentTimeMillis(42L);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2724363572567254
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0E-6), intArray0, (-945));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.find();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) vector0);
      Attribute attribute0 = new Attribute("7e", vector0);
      binarySparseInstance0.value(attribute0);
      binarySparseInstance0.toStringNoWeight();
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 3;
      intArray1[2] = (-5426);
      intArray1[3] = 2;
      intArray1[4] = 2;
      intArray1[5] = 2;
      intArray1[6] = (-945);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-1.0), intArray1, 2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(12, stringArray0.length);
      
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(12, stringArray1.length);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.listOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.setNorm((-3439.846350726167));
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getStopwords();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3439.846350726167);
      SparseInstance sparseInstance0 = new SparseInstance((-3439.846350726167), doubleArray0);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals((-3439.846350726167), naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3.0);
      doubleArray0[1] = 890.0398163892;
      doubleArray0[2] = 890.0398163892;
      doubleArray0[3] = 890.0398163892;
      doubleArray0[4] = 890.0398163892;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(890.0398163892, doubleArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[7];
      naiveBayesMultinomialText0.m_periodicP = 1024;
      doubleArray0[0] = (-4208.5516979);
      doubleArray0[1] = (-4383.774976709);
      Stopwords stopwords0 = new Stopwords();
      naiveBayesMultinomialText0.m_stopwords = stopwords0;
      doubleArray0[2] = 1812.3994235;
      stopwords0.toString();
      doubleArray0[3] = 22.0;
      doubleArray0[4] = 1551.61;
      stopwords0.remove("\tThe stemmering algorihtm (classname plus parameters) to use.");
      naiveBayesMultinomialText0.setPeriodicPruning(68);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-37.0);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.LNormTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.218736967976606
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("If true then document length is normalized according to the settings for norm and lnorm");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jV\"RI{0Of)if5f)72U");
      testInstances0.setRelationalClassFormat(instances0);
      Instances instances1 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances1);
      instances1.removeIf(predicate0);
      Instances instances2 = new Instances(instances0, 1236);
      testInstances0.getRelationalClassFormat();
      instances1.deleteStringAttributes();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.toString();
      System.setCurrentTimeMillis(2744L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 4.0;
      doubleArray0[2] = (double) (-1);
      testInstances1.setWordSeparators("V*$(bTb");
      doubleArray0[3] = 4.0;
      testInstances1.setNumRelationalNumeric(13);
      doubleArray0[4] = (double) 0;
      doubleArray0[6] = (double) (-2);
      SnowballStemmer snowballStemmer1 = new SnowballStemmer();
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.314898769050031
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(0);
      arrayList0.trimToSize();
      Instances instances0 = new Instances("", arrayList0, 865);
      OptionHandlerJavadoc[] optionHandlerJavadocArray0 = new OptionHandlerJavadoc[6];
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[0] = optionHandlerJavadoc0;
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[1] = optionHandlerJavadoc1;
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      optionHandlerJavadoc2.setClassname("@data");
      optionHandlerJavadocArray0[2] = optionHandlerJavadoc2;
      naiveBayesMultinomialText0.setNorm(0.0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(1343);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      naiveBayesMultinomialText0.setMinWordFrequency(0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText1.getOptions();
      naiveBayesMultinomialText1.setOptions(stringArray0);
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      boolean boolean0 = true;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer(":YIkS''gQ2%&K");
      snowballStemmer0.getStemmer();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String[] stringArray0 = new String[1];
      SnowballStemmer.main(stringArray0);
      stringArray0[0] = "org.tartarus.snowball.ext";
      snowballStemmer0.getRevision();
      SnowballStemmer.main(stringArray0);
      snowballStemmer0.getRevision();
      naiveBayesMultinomialText0.m_t = (-37.0);
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.setPeriodicPruning(121);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.tokenizerTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.setPeriodicPruning(20);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.getStopwords();
      naiveBayesMultinomialText1.tokenizerTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7228120764467145
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lnorm = 1923.39100718;
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) iteratedLovinsStemmer0;
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setLNorm(1923.39100718);
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.periodicPruningTipText();
      iteratedLovinsStemmer0.globalInfo();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      File file1 = MockFile.createTempFile("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", "How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("kernelMatrix.matrix");
      FileSystemHandling.createFolder(evoSuiteFile0);
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.setStopwords(file1);
      naiveBayesMultinomialText0.useStopListTipText();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[0];
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.setPeriodicPruning((-633));
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getStopwords();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.tokenizerTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText1.useStopListTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText1.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(10000);
      Instances instances0 = new Instances(")", arrayList0, 865);
      Attribute attribute0 = new Attribute((String) null);
      attribute0.copy("@data");
      arrayList0.add(attribute0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Attribute attribute1 = new Attribute("real", instances0, 10000);
      arrayList0.add(attribute1);
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      optionHandlerJavadoc0.setSilent(true);
      OptionHandlerJavadoc optionHandlerJavadoc3 = new OptionHandlerJavadoc();
      optionHandlerJavadoc3.setClassname((String) null);
      optionHandlerJavadoc0.setSilent(true);
      optionHandlerJavadoc0.setClassname("}143U.S1:<_");
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("i]8/C{gOUrwB");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      testInstances2.getData();
      testInstances1.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.818371704803573
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning(1260);
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      naiveBayesMultinomialText0.setNorm(0.0);
      naiveBayesMultinomialText0.setLNorm((-1.0));
      naiveBayesMultinomialText0.getUseStopList();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-652.7529440079699);
      doubleArray0[1] = (double) 1260;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.7976931348623157E308);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1045.407, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(0);
      Instances instances0 = new Instances("", arrayList0, 865);
      OptionHandlerJavadoc[] optionHandlerJavadocArray0 = new OptionHandlerJavadoc[6];
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[1] = optionHandlerJavadoc0;
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[2] = optionHandlerJavadoc1;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".bsi";
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      Environment environment0 = Environment.getSystemWide();
      inputMappedClassifier1.setEnvironment(environment0);
      Instances instances1 = inputMappedClassifier1.getModelHeader(instances0);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_stemmer = null;
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      
      naiveBayesMultinomialText0.pruneDictionary();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1375.668);
      doubleArray0[1] = (-1375.668);
      doubleArray0[2] = (-1375.668);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1899);
      intArray0[1] = 857;
      intArray0[2] = 2004318071;
      intArray0[3] = 0;
      intArray0[4] = 193;
      intArray0[5] = 0;
      intArray0[6] = (-438);
      SparseInstance sparseInstance0 = new SparseInstance((-1375.668), doubleArray0, intArray0, (-3054));
      naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, false);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = (-1953.114966871);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "6tSnpw=D22dy|";
      stringArray0[1] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[2] = "Advances in Kernel Methods - Support Vector Learning";
      stringArray0[3] = "Don't output a report of model-to-input mappings.";
      stringArray0[4] = "!NG~jDC+a0i&WeUyeOF";
      stringArray0[5] = "";
      stringArray0[6] = "<_j#:bq&fdmiYpF";
      stringArray0[7] = "#!\"DWQOsi!b";
      NaiveBayesMultinomialText.main(stringArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8164590628390678
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.setUseStopList(true);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3075.702768, doubleArray0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2488368957567872
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(0.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Y=?JCH~$/ivvl");
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      FileSystemHandling.createFolder(evoSuiteFile0);
      naiveBayesMultinomialText0.m_leplace = 0.0;
      naiveBayesMultinomialText0.setMinWordFrequency((-1044.994146));
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setUseStopList(true);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText0.getOptions();
      assertEquals((-1044.994146), naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc3 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc4 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc5 = new OptionHandlerJavadoc();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom();
      OptionHandlerJavadoc[] optionHandlerJavadocArray0 = new OptionHandlerJavadoc[5];
      OptionHandlerJavadoc optionHandlerJavadoc6 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[0] = optionHandlerJavadoc6;
      optionHandlerJavadocArray0[1] = optionHandlerJavadoc3;
      optionHandlerJavadocArray0[2] = optionHandlerJavadoc1;
      optionHandlerJavadocArray0[3] = optionHandlerJavadoc4;
      optionHandlerJavadocArray0[4] = optionHandlerJavadoc2;
      naiveBayesMultinomialText0.setPeriodicPruning(1);
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertEquals(1, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(3.0, double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.27074168136349
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(0.0);
      naiveBayesMultinomialText0.m_leplace = 0.0;
      naiveBayesMultinomialText0.setMinWordFrequency((-1044.994146));
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setUseStopList(true);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      naiveBayesMultinomialText0.setPeriodicPruning(3);
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertEquals(0.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals((-1044.994146), double0, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      String string0 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string0);
      
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getUseStopList();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      BallTree ballTree0 = new BallTree();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-0.37872186480557224), intArray0, (-945));
      binarySparseInstance0.deleteAttributeAt(2013265920);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("7e", arrayList0);
      binarySparseInstance0.value(attribute0);
      double[] doubleArray0 = new double[6];
      arrayList0.spliterator();
      binarySparseInstance0.s_numericAfterDecimalPoint = binarySparseInstance0.s_numericAfterDecimalPoint;
      doubleArray0[1] = 0.0;
      doubleArray0[1] = (-0.37872186480557224);
      doubleArray0[3] = (double) 1;
      doubleArray0[1] = (-0.37872186480557224);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "The file containing the stopwords (if this is a directory then the default ones are used).");
      doubleArray0[5] = (double) 0;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1826);
      Random.setNextRandom(0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) binarySparseInstance1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.049357538804166
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lnorm = 1923.39100718;
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setLNorm(1923.39100718);
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.periodicPruningTipText();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      File file1 = MockFile.createTempFile("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", "How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("kernelMatrix.matrix");
      FileSystemHandling.createFolder(evoSuiteFile0);
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.setStopwords(file1);
      naiveBayesMultinomialText0.useStopListTipText();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.4435896416877303
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(0.0);
      boolean boolean0 = true;
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.m_leplace = 0.0;
      naiveBayesMultinomialText0.setMinWordFrequency((-1044.994146));
      naiveBayesMultinomialText0.getStemmer();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("[InputMappedClassifier] No model available!");
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      naiveBayesMultinomialText0.buildClassifier(instances1);
      BallNode ballNode0 = null;
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      try { 
        topDownConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.4267173502315558
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("Gk");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      String[] stringArray0 = Locale.getISOCountries();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.1946531330062844
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OptionHandlerJavadoc[] optionHandlerJavadocArray0 = new OptionHandlerJavadoc[6];
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[0] = optionHandlerJavadoc0;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc3 = new OptionHandlerJavadoc();
      optionHandlerJavadoc0.setClassname("<!-- options-end -->");
      OptionHandlerJavadoc optionHandlerJavadoc4 = new OptionHandlerJavadoc();
      optionHandlerJavadoc0.generateHelp();
      String[] stringArray0 = optionHandlerJavadoc1.getOptions();
      OptionHandlerJavadoc optionHandlerJavadoc5 = new OptionHandlerJavadoc();
      optionHandlerJavadoc5.generate();
      OptionHandlerJavadoc optionHandlerJavadoc6 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc7 = new OptionHandlerJavadoc();
      optionHandlerJavadoc3.setClassname("OptionHandlerJavadoc Options:\n\n-W <classname>\n\tThe class to load.\n-nostars\n\tSuppresses the '*' in the Javadoc.\n-dir <dir>\n\tThe directory above the package hierarchy of the class.\n-silent\n\tSuppresses printing in the console.\n-noprolog\n\tSuppresses the 'Valid options are...' prolog in the Javadoc.\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionHandlerJavadoc optionHandlerJavadoc8 = new OptionHandlerJavadoc();
      optionHandlerJavadoc7.setSilent(false);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.2698986887396755
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(0);
      Instances instances0 = new Instances("", arrayList0, 865);
      OptionHandlerJavadoc[] optionHandlerJavadocArray0 = new OptionHandlerJavadoc[6];
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[0] = optionHandlerJavadoc0;
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      naiveBayesMultinomialText0.setNorm((-37.0));
      assertEquals((-37.0), naiveBayesMultinomialText0.getNorm(), 0.01);
      
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.m_normalize = true;
      String[] stringArray0 = naiveBayesMultinomialText1.getOptions();
      naiveBayesMultinomialText1.setOptions(stringArray0);
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0E-6), intArray0, (-945));
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("If true then document length is normalized according to the settings for norm and lnorm");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[1] = "org.tartarus.snowball.ext";
      stringArray0[2] = "org.tartarus.snowball";
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0E-6), intArray0, (-945));
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("If true then document length is normalized according to the settings for norm and lnorm");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[1] = "org.tartarus.snowball.ext";
      stringArray0[2] = "org.tartarus.snowball";
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("org.tartarus.snowball.ext");
      TestInstances testInstances2 = new TestInstances();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      testInstances2.setHandler(votedPerceptron0);
      Instances instances1 = new Instances(instances0);
      testInstances2.generate();
      testInstances2.setRelationalClassFormat(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0E-6);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3075.702768, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1053;
      intArray0[3] = 1;
      intArray0[4] = 1;
      SparseInstance sparseInstance0 = new SparseInstance((-806.2147355515658), doubleArray0, intArray0, 1);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.108872968847436
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      naiveBayesMultinomialText0.reset();
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      optionHandlerJavadoc1.setClassname("Correlation attribute evaluator has not been built yet.");
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc3 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc4 = new OptionHandlerJavadoc();
      optionHandlerJavadoc1.setClassname("<!-- options-end -->");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add((Attribute) null);
      OptionHandlerJavadoc optionHandlerJavadoc5 = new OptionHandlerJavadoc();
      optionHandlerJavadoc4.setSilent(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      OptionHandlerJavadoc optionHandlerJavadoc6 = new OptionHandlerJavadoc();
      optionHandlerJavadoc2.setClassname("<!-- options-end -->");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("<!-- options-end -->");
      TestInstances testInstances1 = new TestInstances();
      testInstances1.getData();
      testInstances0.getRelationalClassFormat();
      testInstances0.getData();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BallTree ballTree0 = new BallTree();
      assertEquals("Whether to calculate performance statistics for the NN search or not", ballTree0.measurePerformanceTipText());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Random.setNextRandom(87);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getTokenizer();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.3674724429174536
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.LNormTipText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      File file1 = MockFile.createTempFile("If true then document length is normalized according to the settings for norm and lnorm", "size", file0);
      MockFile mockFile0 = new MockFile("If true then document length is normalized according to the settings for norm and lnorm");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.getDebug();
      naiveBayesMultinomialText0.setStopwords(file1);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A.write(Writer)\n";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "\t";
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.setMinWordFrequency(2.0);
      Stopwords stopwords0 = naiveBayesMultinomialText0.m_stopwords;
      naiveBayesMultinomialText0.m_stopwords = null;
      naiveBayesMultinomialText0.listOptions();
      BIFReader bIFReader0 = new BIFReader();
      try { 
        bIFReader0.processString("Iu^t\"P>5Rd");
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.2698986887396755
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(0);
      Instances instances0 = new Instances("", arrayList0, 865);
      OptionHandlerJavadoc[] optionHandlerJavadocArray0 = new OptionHandlerJavadoc[6];
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[0] = optionHandlerJavadoc0;
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      naiveBayesMultinomialText0.setNorm((-37.0));
      assertEquals((-37.0), naiveBayesMultinomialText0.getNorm(), 0.01);
      
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(865);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.m_normalize = true;
      String[] stringArray0 = naiveBayesMultinomialText1.getOptions();
      naiveBayesMultinomialText1.setOptions(stringArray0);
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.108064289718111
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.minWordFrequencyTipText();
      naiveBayesMultinomialText1.normalizeDocLengthTipText();
      System.setCurrentTimeMillis(1L);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.269394275120508
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OptionHandlerJavadoc[] optionHandlerJavadocArray0 = new OptionHandlerJavadoc[6];
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[0] = optionHandlerJavadoc0;
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc3 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc4 = new OptionHandlerJavadoc();
      optionHandlerJavadoc1.setClassname("<!-- options-end -->");
      OptionHandlerJavadoc optionHandlerJavadoc5 = new OptionHandlerJavadoc();
      optionHandlerJavadoc0.generateHelp();
      optionHandlerJavadoc2.getOptions();
      OptionHandlerJavadoc optionHandlerJavadoc6 = new OptionHandlerJavadoc();
      optionHandlerJavadoc6.generate();
      OptionHandlerJavadoc optionHandlerJavadoc7 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc8 = new OptionHandlerJavadoc();
      optionHandlerJavadoc8.setSilent(false);
      optionHandlerJavadoc2.setClassname("<!-- options-end -->");
      FileSystemHandling.shouldAllThrowIOExceptions();
      optionHandlerJavadoc8.setSilent(true);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRelationalClassFormat();
      testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      System.setCurrentTimeMillis(1110L);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setMinWordFrequency(1.0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      String string0 = naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals("The tokenizing algorithm to use on the strings.", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "buQ*pn`J<qb<IMN)y";
      stringArray0[1] = "Covariance ";
      naiveBayesMultinomialText0.m_useStopList = false;
      stringArray0[2] = "-M";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -M option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t&y765r");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      int int0 = (-672);
      naiveBayesMultinomialText0.setPeriodicPruning((-672));
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.stemmerTipText();
      URI uRI0 = MockURI.create("t&y765r");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.738840717855686
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Aq3lAr^B,E#;Ll#t");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.m_normalize = false;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(12, stringArray0.length);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[0];
      String[] stringArray0 = new String[3];
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = 1417.222397407889;
      naiveBayesMultinomialText0.setLNorm((-420.8191127047));
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      assertEquals((-420.8191127047), naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Set splitting criterion based on the residuals of LogitBoost. There are two possible splitting criteria for LMT: the default is to use the C4.5 splitting criterion that uses information gain on the class variable. The other splitting criterion tries to improve the purity in the residuals produces when fitting the logistic regression functions. The choice of the splitting criterion does not usually affect classification accuracy much, but can produce different trees.";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "0p";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      String string0 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals("If true, ignores all words that are on the stoplist.", string0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.5149606890054548
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning((-1607));
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getUseStopList();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-stopwords <file>";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "uUVFnc8fkV`!p";
      stringArray0[7] = "";
      stringArray0[8] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals((-1607), naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      int int0 = 11;
      naiveBayesMultinomialText0.setPeriodicPruning(11);
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3075.702768;
      doubleArray0[1] = 3075.702768;
      doubleArray0[2] = (double) 11;
      doubleArray0[3] = 3075.702768;
      doubleArray0[4] = (double) 11;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(11, doubleArray0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[0];
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("If true then document length is normalized according to the settings for norm and lno5m");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "If true then document length is normalized according to the settings for norm and lno5m";
      stringArray0[1] = "org.tartarus.snowball.ext";
      stringArray0[2] = "org.tartarus.snowball";
      SnowballStemmer snowballStemmer1 = new SnowballStemmer("org.tartarus.snowball");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Locale.getISOCountries();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "org.tartarus.snowball.ext";
      stringArray1[1] = "Gk";
      stringArray1[2] = "org.tartarus.snowball.ext";
      stringArray1[3] = "Gk";
      String[] stringArray2 = new String[9];
      stringArray2[0] = "org.tartarus.snowball";
      stringArray2[1] = "org.tartarus.snowball.ext";
      stringArray2[2] = "Gk";
      stringArray2[3] = "org.tartarus.snowball.ext";
      stringArray2[4] = "6B;xdDXm~RJ{c;";
      stringArray2[6] = "org.tartarus.snowball";
      stringArray2[7] = "org.tartarus.snowball";
      stringArray2[8] = "org.tartarus.snowball";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
