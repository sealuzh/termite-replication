/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 21:08:49 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.091939703917201
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<SparseInstance> linkedList2 = new LinkedList<SparseInstance>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "first-last");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Locale locale0 = Locale.JAPANESE;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Filter said collect output", protectedProperties0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList1, 1949);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)83;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      instances0.removeIf(predicate2);
      Instances instances1 = new Instances("-M", arrayList1, 2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.299575310275414
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale.getISOLanguages();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      linkedList0.toArray();
      Locale locale0 = Locale.ROOT;
      linkedList1.add(locale0);
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("first-last");
      linkedList1.removeAll(linkedList0);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      LinkedList<SparseInstance> linkedList4 = new LinkedList<SparseInstance>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.add(locale_LanguageRange0);
      linkedList5.add(locale_LanguageRange0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("first-last", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      properties0.clone();
      Instances instances0 = new Instances("first-last", arrayList0, 0);
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      discretize0.setInputFormat(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis((-1038L));
      discretize0.calculateCutPoints();
      discretize0.findNumBins(0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0536197126405917
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale.getISOLanguages();
      Locale locale0 = Locale.CHINA;
      Locale locale1 = locale0.stripExtensions();
      Locale.getISOLanguages();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      locale1.getExtensionKeys();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Make resulting attributes binary.");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Filter said collect output", protectedProperties0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("real", arrayList1, 0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) set0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      predicate2.or(predicate3);
      instances0.removeIf(predicate2);
      properties0.put(locale1, linkedList0);
      arrayList1.iterator();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.input((Instance) null);
      double[][] doubleArray0 = new double[0][3];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0791393753387
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale.getISOLanguages();
      Locale locale0 = Locale.PRC;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.CANADA_FRENCH;
      Locale.getISOLanguages();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      locale1.getExtensionKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      linkedList1.addAll((Collection<? extends Locale>) list0);
      linkedList1.add(locale1);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode1);
      Attribute attribute0 = new Attribute("Filter said collect output", list1, protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) set0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      instances0.removeIf(predicate2);
      properties0.put(locale1, linkedList1);
      arrayList0.iterator();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.input((Instance) null);
      assertFalse(discretize0.isNewBatch());
      
      discretize0.batchFinished();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2717988127198767
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale.getISOLanguages();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.TAIWAN;
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("first-last");
      linkedList1.removeAll(linkedList0);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add(locale_LanguageRange0);
      linkedList1.add(locale0);
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<SparseInstance> linkedList5 = new LinkedList<SparseInstance>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      linkedList6.add(locale_LanguageRange0);
      linkedList6.add(locale_LanguageRange0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      LinkedList<String> linkedList7 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("first-last", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("first-last", arrayList0, 0);
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.m_UseBinNumbers = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis((-1038L));
      discretize0.calculateCutPoints();
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 0;
      doubleArray0[5] = (double) (-1038L);
      SparseInstance sparseInstance0 = new SparseInstance((-1038L), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-5582));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5582
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.090414326151398
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale.getISOLanguages();
      Locale locale0 = Locale.PRC;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.CANADA_FRENCH;
      Locale.getISOLanguages();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("firt-last");
      locale1.getExtensionKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      linkedList1.addAll((Collection<? extends Locale>) list0);
      linkedList0.add(locale_LanguageRange0);
      linkedList1.add(locale1);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      locale_LanguageRange0.getRange();
      linkedList0.add(locale_LanguageRange0);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.add(locale_LanguageRange0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode1);
      Attribute attribute0 = new Attribute("Filter said collect output", list1, protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      properties0.put(locale1, linkedList1);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      Instance instance0 = null;
      discretize0.getUseEqualFrequency();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'Filter said collect output' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.062590917023656
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale.getISOLanguages();
      Locale locale0 = Locale.PRC;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.CANADA_FRENCH;
      Locale.getISOLanguages();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("firt-last");
      locale1.getExtensionKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      linkedList1.addAll((Collection<? extends Locale>) list0);
      linkedList0.add(locale_LanguageRange0);
      linkedList1.add(locale1);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      locale_LanguageRange0.getRange();
      linkedList0.add(locale_LanguageRange0);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.add(locale_LanguageRange0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      protectedProperties0.entrySet();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode1);
      Attribute attribute0 = new Attribute("Filter said collect output", list1, protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      properties0.put(locale1, linkedList1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.input((Instance) null);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(true);
      discretize0.setMakeBinary(true);
      discretize0.getMakeBinary();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 1;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Instances instances0 = new Instances("O", arrayList0, 1);
      discretize0.setOutputFormat();
      Discretize discretize1 = new Discretize();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1025959429841774
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale.getISOLanguages();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      linkedList0.toArray();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("first-last");
      linkedList1.removeAll(linkedList0);
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("first-last");
      Locale locale0 = Locale.GERMANY;
      locale0.getExtensionKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode1);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      linkedList1.addAll((Collection<? extends Locale>) list0);
      linkedList0.add(locale_LanguageRange0);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      locale_LanguageRange0.getRange();
      linkedList0.add(locale_LanguageRange1);
      linkedList0.add(locale_LanguageRange0);
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set1, locale_FilteringMode2);
      Attribute attribute0 = new Attribute("%%[DefaultPackageManager] downloaded ", list1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("%%[DefaultPackageManager] downloaded ", arrayList0, 3);
      Attribute attribute1 = new Attribute("Go=v&d!]vr`k|[%JOf", list1, 2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2347976094737034
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale.getISOLanguages();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.TAIWAN;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("first-last");
      linkedList0.add(locale_LanguageRange0);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("first-last");
      linkedList2.removeAll(linkedList0);
      LinkedList<Object> linkedList3 = new LinkedList<Object>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      linkedList1.add(locale_LanguageRange1);
      linkedList2.add(locale0);
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      LinkedList<SparseInstance> linkedList6 = new LinkedList<SparseInstance>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      linkedList7.add(locale_LanguageRange1);
      linkedList7.add(locale_LanguageRange1);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      LinkedList<String> linkedList8 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("first-last", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("first-last", arrayList1, 0);
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      discretize0.setInputFormat(instances0);
      System.setCurrentTimeMillis(0L);
      discretize0.calculateCutPoints();
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 0;
      doubleArray0[5] = (double) 0L;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4428352147175594
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale.getISOLanguages();
      Locale locale0 = Locale.PRC;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.TAIWAN;
      Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("first-last");
      locale0.getDisplayScript();
      linkedList2.removeAll(linkedList0);
      LinkedList<Object> linkedList3 = new LinkedList<Object>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      linkedList1.add(locale_LanguageRange0);
      linkedList2.add(locale1);
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      LinkedList<SparseInstance> linkedList6 = new LinkedList<SparseInstance>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      linkedList7.add(locale_LanguageRange0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("Filter said collect output", list0, protectedProperties0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.add(attribute0);
      Instances instances0 = new Instances("real", arrayList2, 0);
      Discretize discretize0 = new Discretize();
      discretize0.setBins(1);
      discretize0.setInputFormat(instances0);
      System.setCurrentTimeMillis(828L);
      Locale.getISOLanguages();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2414456828156455
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale.getISOLanguages();
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      locale1.getExtensionKeys();
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList0, locale_FilteringMode0);
      Locale.lookup(linkedList0, list0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      LinkedList<SparseInstance> linkedList3 = new LinkedList<SparseInstance>();
      linkedList1.add((Locale.LanguageRange) null);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("jr0J&!P%o/_:~8?AY m", list1, protectedProperties0);
      linkedList0.add((Locale.LanguageRange) null);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("string", arrayList1, 2);
      Discretize discretize0 = new Discretize();
      arrayList1.add(attribute0);
      Discretize discretize1 = new Discretize();
      assertFalse(discretize1.getMakeBinary());
      
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis(3L);
      Locale.getISOLanguages();
      discretize0.calculateCutPoints();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.47940938044539
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale.getISOLanguages();
      Locale locale0 = Locale.PRC;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.TAIWAN;
      String[] stringArray0 = Locale.getISOLanguages();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("firt-last");
      LinkedList<Object> linkedList3 = new LinkedList<Object>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      locale1.getExtensionKeys();
      linkedList1.add(locale_LanguageRange0);
      linkedList2.add(locale1);
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      LinkedList<SparseInstance> linkedList6 = new LinkedList<SparseInstance>();
      locale_LanguageRange0.getRange();
      linkedList1.add(locale_LanguageRange0);
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      linkedList7.add(locale_LanguageRange0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("Filter said collect output", list0, protectedProperties0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.add(attribute0);
      Instances instances0 = new Instances("real", arrayList2, 0);
      properties0.put(locale1, linkedList2);
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.input((Instance) null);
      assertFalse(discretize0.isNewBatch());
      
      Filter.runFilter(discretize0, stringArray0);
      discretize0.batchFinished();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0469246737911044
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale.getISOLanguages();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      linkedList0.toArray();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("first-last");
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<SparseInstance> linkedList5 = new LinkedList<SparseInstance>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      linkedList6.add(locale_LanguageRange0);
      linkedList6.add(locale_LanguageRange0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("first-last", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      properties0.clone();
      Instances instances0 = new Instances("first-last", arrayList0, 0);
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = true;
      Discretize discretize1 = new Discretize();
      discretize0.setInputFormat(instances0);
      System.setCurrentTimeMillis((-1038L));
      discretize0.calculateCutPoints();
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance((-1038L), doubleArray0);
      Discretize discretize2 = new Discretize();
      discretize2.setInputFormat(instances0);
      discretize2.batchFinished();
      // Undeclared exception!
      try { 
        discretize1.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5719579500515657
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize("-B");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-B";
      stringArray0[1] = "-B";
      discretize0.m_FindNumBins = false;
      stringArray0[2] = "-B";
      stringArray0[3] = "-B";
      stringArray0[4] = "-B";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-B\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.019447472619771
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale.getISOLanguages();
      Locale locale0 = Locale.PRC;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = locale0.stripExtensions();
      Locale.getISOLanguages();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      locale1.getExtensionKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      linkedList1.addAll((Collection<? extends Locale>) list0);
      linkedList1.add(locale1);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Filter said collect output", protectedProperties0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("real", arrayList1, 0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) set0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      instances0.removeIf(predicate2);
      properties0.put(locale1, linkedList1);
      arrayList1.iterator();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.input((Instance) null);
      discretize0.batchFinished();
      Random.setNextRandom((-2063));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale.getISOLanguages();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.TAIWAN;
      Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      linkedList2.removeAll(linkedList0);
      LinkedList<Object> linkedList3 = new LinkedList<Object>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      LinkedList<SparseInstance> linkedList6 = new LinkedList<SparseInstance>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      Locale.getISOLanguages();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      LinkedList<String> linkedList8 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("Filter said collect output", linkedList8, protectedProperties0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.add(attribute0);
      Instances instances0 = new Instances("real", arrayList2, 0);
      Discretize discretize0 = new Discretize("Filter said collect output");
      Discretize discretize1 = new Discretize();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at Filter said collect output
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.384415616105067
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("O");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.setMakeBinary(false);
      discretize0.setMakeBinary(true);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      discretize0.setAttributeIndices("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      discretize0.getMakeBinary();
      discretize0.m_NumBins = 66;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 1;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", arrayList1, protectedProperties0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("O", arrayList0, 1);
      Discretize discretize1 = new Discretize();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setBins((-2013265917));
      discretize0.m_MakeBinary = false;
      discretize0.getAttributeIndices();
      discretize0.useEqualFrequencyTipText();
      discretize0.getBins();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2215523079930732
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      discretize0.getMakeBinary();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 1;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Instances instances0 = new Instances("O", arrayList0, 1);
      Discretize discretize1 = new Discretize();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7985346891265666
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize("M");
      discretize0.m_UseBinNumbers = true;
      discretize0.getOptions();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      Random.setNextRandom((-1824));
      discretize0.useEqualFrequencyTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = true;
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      discretize0.getOptions();
      StringReader stringReader0 = new StringReader("nrWu#");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[nrWu#], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 193.54869203780993;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      double[][] doubleArray1 = new double[12][5];
      doubleArray1[4] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      arrayList0.listIterator();
      arrayList0.add("Unary class");
      Attribute attribute0 = new Attribute("O", arrayList0, (-138));
      attribute0.toString();
      arrayList0.add("-Y");
      arrayList0.add("@end");
      attribute0.addStringValue("Unary class");
      arrayList0.add("integer");
      Attribute attribute1 = new Attribute("@attribute", 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "date";
      attribute1.isInRange(0.0);
      attribute1.value(1);
      attribute1.enumerateValues();
      attribute0.indexOfValue("relational");
      attribute0.toString();
      arrayList0.add("@end");
      double[] doubleArray2 = discretize0.getCutPoints(2);
      assertFalse(discretize0.getUseEqualFrequency());
      assertNotNull(doubleArray2);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2611883523040466
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_t]");
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "first-last");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YC;0G");
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "YC;0G";
      stringArray0[1] = "YC;0G";
      stringArray0[2] = "YC;0G";
      stringArray0[3] = "YC;0G";
      stringArray0[4] = "\n\nProxy-Data:\n";
      stringArray0[5] = "YC;0G";
      discretize0.getOptions();
      discretize0.setFindNumBins(true);
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      discretize0.setUseEqualFrequency(true);
      int int0 = (-108);
      discretize0.getBinRangesString((-108));
      discretize0.getInvertSelection();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-108));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2220206466431898
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "V";
      stringArray0[1] = "FINEST";
      stringArray0[2] = "W,~0v[HAwX{FDV5Ht`";
      stringArray0[3] = "@JpHaVwbAuh";
      stringArray0[4] = "";
      discretize0.getOptions();
      stringArray0[5] = "\"2c6[:J~o%3Hr";
      stringArray0[6] = "j,D:vO.";
      stringArray0[7] = "b=f*7-PlR%'IpCXZMB";
      stringArray0[8] = "-O";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.getBins();
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Discretize discretize0 = new Discretize("");
      discretize0.getOptions();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      AllFilter allFilter2 = new AllFilter();
      AllFilter allFilter3 = new AllFilter();
      AllFilter allFilter4 = new AllFilter();
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ntf*lg");
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale.getISOLanguages();
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      locale1.getExtensionKeys();
      Locale locale2 = Locale.ITALY;
      locale2.getUnicodeLocaleKeys();
      Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("first-last");
      linkedList2.clone();
      Locale locale3 = Locale.ITALY;
      Locale.LanguageRange.parse("first-last");
      linkedList1.add(locale_LanguageRange0);
      linkedList2.add(locale2);
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      Locale locale4 = Locale.GERMANY;
      locale4.getDisplayCountry();
      linkedList0.push((Locale.LanguageRange) null);
      Locale locale5 = new Locale("first-last");
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.add(locale_LanguageRange0);
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("first-last", 0.0);
      Locale.LanguageRange locale_LanguageRange2 = new Locale.LanguageRange("Germany", 0.0);
      linkedList3.addLast(locale_LanguageRange2);
      locale_LanguageRange1.getWeight();
      Locale.LanguageRange locale_LanguageRange3 = new Locale.LanguageRange("first-last", 0.0);
      linkedList1.add(locale_LanguageRange1);
      Locale locale6 = new Locale("first-last", "first-last", "first-last");
      Discretize discretize0 = new Discretize();
      Filter filter0 = Filter.makeCopy(discretize0);
      Random.setNextRandom((-1));
      try { 
        filter0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getFindNumBins();
      StringReader stringReader0 = new StringReader("nrWu#");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[nrWu#], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      discretize0.isNewBatch();
      double[] doubleArray0 = new double[3];
      Locale locale0 = Locale.CHINA;
      SparseInstance sparseInstance0 = new SparseInstance(195.33537341, doubleArray0);
      sparseInstance0.isMissing(1284);
      sparseInstance0.setValue(1284, (double) 1284);
      discretize0.getFindNumBins();
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      MockRandom mockRandom0 = new MockRandom();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(linkedList0);
      arrayList1.containsAll(linkedList0);
      Object[] objectArray0 = new Object[7];
      mockRandom0.nextLong();
      objectArray0[0] = (Object) arrayList1;
      objectArray0[2] = (Object) arrayList1;
      objectArray0[3] = (Object) mockRandom0;
      objectArray0[4] = (Object) mockRandom0;
      objectArray0[5] = (Object) arrayList1;
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ZK";
      stringArray0[1] = "-R <col1,col2-col4,...>";
      stringArray0[2] = "8yc4iD^=";
      stringArray0[3] = " | ";
      stringArray0[4] = "TF7";
      stringArray0[5] = "KcSG3@";
      stringArray0[6] = "Z:NFD<Ob";
      Random.setNextRandom(390);
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      double[][] doubleArray0 = new double[7][5];
      discretize0.m_CutPoints = doubleArray0;
      arrayList0.add("Unfry class");
      Attribute attribute0 = new Attribute("O", arrayList0, (-138));
      attribute0.toString();
      attribute0.enumerateValues();
      arrayList0.add("@end");
      arrayList0.add("@end");
      attribute0.addStringValue("Unfry class");
      arrayList0.add("integer");
      arrayList0.add("*O4;{ySh6");
      Attribute attribute1 = new Attribute("@attribute", 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      attribute1.indexOfValue("numeric");
      String[] stringArray0 = new String[9];
      attribute1.equalsMsg("@attribute O {'Unfry class'}");
      Attribute.typeToString(0);
      stringArray0[0] = "date";
      attribute1.toString();
      attribute1.isInRange(0.0);
      attribute1.value(0);
      attribute1.value(1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("string", "@end", true);
      attribute0.indexOfValue("relational");
      attribute0.toString();
      arrayList0.add("@end");
      arrayList0.add("relational");
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9778643962668734
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize("O");
      discretize0.getOptions();
      discretize0.setMakeBinary(true);
      discretize0.setAttributeIndices("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O";
      discretize0.getBinRangesString(66);
      stringArray0[2] = "O";
      Discretize.main(stringArray0);
      discretize0.setAttributeIndices("first-last");
      discretize0.getMakeBinary();
      discretize0.m_NumBins = 66;
      discretize0.getCutPoints(75);
      Discretize discretize1 = new Discretize();
      discretize0.getOptions();
      discretize1.m_UseEqualFrequency = true;
      discretize1.getUseEqualFrequency();
      // Undeclared exception!
      try { 
        discretize1.calculateCutPointsByEqualWidthBinning(1276);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("O");
      SparseInstance sparseInstance0 = new SparseInstance(0);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      Discretize discretize0 = new Discretize("O");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      sparseInstance0.mergeInstance(denseInstance0);
      doubleArray0[8] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2087);
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices(".Y4qtrUXYM.ZySF");
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ZK";
      stringArray0[1] = "-R <col1,col2-col4,...>";
      stringArray0[2] = "8yc4iD^=";
      stringArray0[3] = " | ";
      stringArray0[4] = "TF7";
      stringArray0[5] = "KcSG3@";
      stringArray0[6] = "Z:NFD<Ob";
      stringArray0[7] = "-R";
      stringArray0[8] = "Not enough training instances with class labels (required: ";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2058985383966134
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize("O");
      String[] stringArray0 = discretize0.getOptions();
      StringReader stringReader0 = new StringReader("O");
      SparseInstance sparseInstance0 = new SparseInstance(5);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      Discretize discretize1 = new Discretize("oV");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 5;
      denseInstance0.mergeInstance(sparseInstance0);
      doubleArray0[7] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      doubleArray0[8] = (double) 5;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(5, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2087);
      Filter.runFilter(discretize1, stringArray0);
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals(10, discretize1.getBins());
      assertEquals(6, stringArray0.length);
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      discretize0.getCapabilities();
      int int0 = 1416;
      boolean boolean0 = discretize0.m_UseEqualFrequency;
      StringReader stringReader0 = new StringReader("G-ZDqEaep;:");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[G-ZDqEaep;:], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = false;
      discretize0.m_UseEqualFrequency = false;
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1565.8872;
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals(1565.8872, double0, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize("6(=:{8D+s0gEqA2<1~");
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "`'ZQJ";
      stringArray0[1] = "RiZb1QLFPe\"aH,";
      stringArray0[2] = "6hKVxY_7`O2@";
      stringArray0[3] = "!UAi[V6Uc65YnDNq}W3";
      stringArray0[4] = "No source has been specified";
      stringArray0[5] = "xpu!^qvu_T";
      stringArray0[6] = "~);J";
      stringArray0[7] = "S~9ZD=9$ ";
      stringArray0[8] = "probToLogOdds: probability must be in [0,1] ";
      discretize0.setOptions(stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseBinNumbers = true;
      discretize0.m_ClassIndex = 0;
      discretize0.getCutPoints(3);
      discretize0.getUseBinNumbers();
      discretize0.setOutputFormat();
      String[] stringArray0 = new String[0];
      discretize0.getBinRangesString(3);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(44);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance2.setWeight(0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[4];
      binarySparseInstance2.s_numericAfterDecimalPoint = 0;
      doubleArray0[1] = (double) 44;
      binarySparseInstance2.s_numericAfterDecimalPoint = 0;
      binarySparseInstance0.setMissing(0);
      doubleArray0[3] = (double) 0;
      int[] intArray0 = new int[9];
      intArray0[0] = 2338;
      intArray0[1] = 0;
      binarySparseInstance1.toString();
      binarySparseInstance1.toString((-1073741822));
      intArray0[5] = 0;
      intArray0[6] = 44;
      intArray0[8] = 0;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0, intArray0, 0);
      Discretize discretize0 = new Discretize("7?l56");
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = (-1073741822);
      intArray0[2] = 70;
      intArray0[3] = (-2565);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      intArray0[4] = 48;
      intArray0[5] = (-2717);
      intArray0[6] = 2840;
      discretize0.setAttributeIndicesArray(intArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 193.54869203780993;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-138));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(66);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(66);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(44);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(79);
      integerArray0[4] = integer4;
      int int0 = 4;
      Integer integer5 = new Integer(4);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(44);
      Integer integer8 = new Integer(int0);
      integerArray0[8] = integer8;
      arrayList0.toArray(integerArray0);
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[4] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      arrayList0.listIterator();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "Unary class";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "b[3(sVN\"Mt5i4&LLa{";
      stringArray0[2] = "o#a";
      stringArray0[3] = "i(/ax#rvW";
      stringArray0[4] = "i(/ax#rvW";
      stringArray0[5] = "P";
      stringArray0[6] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      stringArray0[8] = "'";
      Filter.runFilter(discretize0, stringArray0);
      String string0 = discretize0.useBinNumbersTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize("O");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      discretize0.setMakeBinary(true);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      discretize0.getMakeBinary();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Discretize discretize1 = new Discretize();
      discretize1.setDesiredWeightOfInstancesPerInterval(1891.694294865957);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize("* filters multiple rows");
      discretize0.listOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.useEqualFrequencyTipText();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      AllFilter allFilter2 = new AllFilter();
      AllFilter allFilter3 = new AllFilter();
      AllFilter allFilter4 = new AllFilter();
      AllFilter allFilter5 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter4.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ZK";
      stringArray0[1] = "ZK";
      stringArray0[2] = "8yc4iD^=";
      stringArray0[3] = " | ";
      stringArray0[4] = "TF7";
      stringArray0[5] = "KcSG3@";
      stringArray0[6] = "Z:NFD<Ob";
      stringArray0[7] = "aSp1{07]V8'w";
      stringArray0[8] = "Not enough training instances with class labels (required: ";
      String string0 = discretize0.findNumBinsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5137815842823215
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("YG)Ak6");
      double[][] doubleArray0 = new double[7][5];
      discretize0.m_CutPoints = doubleArray0;
      arrayList0.add("Unary class");
      Attribute attribute0 = new Attribute("YG)Ak6", arrayList0, (-138));
      attribute0.toString();
      arrayList0.add("@end");
      arrayList0.add("@end");
      attribute0.addStringValue("Unary class");
      arrayList0.add("integer");
      Attribute attribute1 = new Attribute("@attribute", 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      attribute1.indexOfValue("numeric");
      String[] stringArray0 = new String[9];
      Attribute.typeToString(4);
      attribute0.equalsMsg("YG)Ak6");
      stringArray0[0] = "date";
      attribute1.toString();
      arrayList0.add("real");
      arrayList0.add("P");
      attribute1.isInRange(0.0);
      attribute1.value((-5));
      Attribute attribute2 = new Attribute("relational", 1);
      attribute1.value(1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("relational", "@end", true);
      attribute0.indexOfValue("relational");
      attribute1.indexOfValue("Min index (doubles): ");
      attribute0.toString();
      arrayList0.add("@attribute");
      discretize0.getBinRangesString(4);
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("{2qvYEux)Q.2^*J#(", arrayList0, 32);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      Instances instances1 = instances0.resample(mockRandom0);
      instances0.retainAll(instances1);
      instances1.setRelationName("hVRKP");
      instances0.enumerateAttributes();
      arrayList0.clone();
      SystemInUtil.addInputLine("@relation");
      Discretize discretize0 = new Discretize("@data");
      Random.setNextRandom(32);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("{2qvYEux)Q.2^*J#(", arrayList0, 32);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      instances0.retainAll(instances0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      instances0.resampleWithWeights((java.util.Random) mockRandom0, booleanArray0);
      instances0.setRelationName("hVRKP");
      instances0.enumerateAttributes();
      arrayList0.clone();
      SystemInUtil.addInputLine("@relation");
      Discretize discretize0 = new Discretize("@data");
      Random.setNextRandom(32);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCapabilities();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 44;
      int[] intArray0 = new int[9];
      intArray0[0] = 2338;
      intArray0[6] = 44;
      Discretize discretize0 = new Discretize("7?l56");
      discretize0.setInvertSelection(false);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.globalInfo();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      AllFilter allFilter2 = new AllFilter();
      AllFilter allFilter3 = new AllFilter();
      AllFilter allFilter4 = new AllFilter();
      AllFilter allFilter5 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter4.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 193.54869203780993;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Integer integer0 = new Integer((-138));
      Integer integer1 = new Integer((-138));
      Integer integer2 = new Integer((-138));
      Integer integer3 = new Integer(14);
      Integer integer4 = new Integer((-138));
      Integer integer5 = new Integer(2834);
      Integer integer6 = new Integer(12);
      Integer integer7 = new Integer(44);
      Integer integer8 = new Integer((-138));
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer7;
      Integer integer9 = new Integer(200);
      integerArray0[1] = integer9;
      integerArray0[2] = integer2;
      integerArray0[3] = integer3;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      arrayList1.toArray(integerArray0);
      arrayList0.listIterator();
      String[] stringArray0 = new String[0];
      Filter.runFilter(discretize0, stringArray0);
      discretize0.setOutputFormat();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      AllFilter allFilter0 = new AllFilter();
      Discretize discretize0 = new Discretize("-F");
      discretize0.invertSelectionTipText();
      AllFilter allFilter1 = new AllFilter();
      AllFilter allFilter2 = new AllFilter();
      AllFilter allFilter3 = new AllFilter();
      AllFilter allFilter4 = new AllFilter();
      AllFilter allFilter5 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter4.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleKeys();
      String[] stringArray0 = Locale.getISOLanguages();
      locale0.getUnicodeLocaleKeys();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale locale1 = new Locale("MinimumNumberInstancesTest");
      Locale locale2 = Locale.FRANCE;
      Locale locale3 = Locale.CHINA;
      Locale.getISOCountries();
      locale2.getDisplayCountry();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      locale2.getScript();
      locale1.getDisplayVariant(locale3);
      Locale.getISOCountries();
      Locale locale4 = Locale.FRENCH;
      Locale locale5 = Locale.FRENCH;
      Locale.setDefault(locale3);
      Locale locale6 = Locale.JAPAN;
      locale6.getDisplayLanguage();
      Discretize discretize0 = new Discretize();
      Filter.runFilter(discretize0, stringArray0);
      boolean boolean0 = discretize0.getInvertSelection();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      String string0 = discretize0.binsTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins((-1724));
      discretize0.setIgnoreClass(false);
      String[] stringArray0 = null;
      try { 
        Filter.filterFile(discretize0, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 193.54869203780993;
      discretize0.setUseBinNumbers(false);
      Locale locale0 = Locale.ENGLISH;
      locale0.getUnicodeLocaleKeys();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      double[][] doubleArray1 = new double[12][5];
      doubleArray1[4] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      arrayList0.listIterator();
      discretize0.getUseBinNumbers();
      Attribute attribute0 = new Attribute("O", arrayList0, (-138));
      arrayList0.add("NI");
      arrayList0.add("@end");
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter1.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8|<|i.gf@n?";
      stringArray0[1] = "8|<|i.gf@n?";
      stringArray0[2] = "jw";
      stringArray0[3] = "8|<|i.gf@n?";
      stringArray0[4] = "8|<|i.gf@n?";
      stringArray0[5] = "8|<|i.gf@n?";
      stringArray0[6] = "8|<|i.gf@n?";
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getRevision();
      assertEquals("8964", string0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("YG)Ak6");
      double[][] doubleArray0 = new double[7][5];
      discretize0.m_CutPoints = doubleArray0;
      arrayList0.add("Unary class");
      String[] stringArray0 = new String[9];
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Discretize discretize1 = new Discretize();
      System.setCurrentTimeMillis(0L);
      discretize1.makeBinaryTipText();
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Discretize.main(stringArray0);
      SparseInstance sparseInstance0 = new SparseInstance(25);
      sparseInstance0.copy();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 2697.615825687593;
      doubleArray0[3] = 2697.615825687593;
      doubleArray0[4] = (double) 25;
      SparseInstance sparseInstance1 = new SparseInstance(0, doubleArray0);
      assertEquals(3, sparseInstance1.numValues());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(44);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance2.setWeight(638.6);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(sparseInstance0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 44;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      int[] intArray0 = new int[9];
      intArray0[0] = 2338;
      intArray0[1] = 0;
      intArray0[2] = 44;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 44;
      intArray0[7] = 44;
      intArray0[8] = 0;
      SparseInstance sparseInstance1 = new SparseInstance(0, doubleArray0, intArray0, 1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(sparseInstance1);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance3);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(2338);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nb");
      Discretize discretize0 = new Discretize("!VGU0a^9");
      String[] stringArray0 = new String[0];
      Filter.runFilter(discretize0, stringArray0);
      String string0 = discretize0.getAttributeIndices();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("!VGU0a^9", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Discretize discretize0 = new Discretize("O");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      discretize0.getMakeBinary();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Discretize discretize1 = new Discretize();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nrWu#");
      Discretize discretize0 = new Discretize("nrWu#");
      discretize0.binsTipText();
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[nrWu#], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Discretize discretize0 = new Discretize("6(=:{8D+s0gEqA2<1~");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-1879048189));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
