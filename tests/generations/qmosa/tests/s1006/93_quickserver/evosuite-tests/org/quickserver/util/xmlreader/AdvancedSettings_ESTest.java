/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 21:59:59 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      int int0 = advancedSettings0.getBacklog();
      assertEquals((-1), advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(402);
      int int0 = advancedSettings0.getBacklog();
      assertEquals(402, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(65536);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier("Vs(^0XP[m/^}0*X");
      assertEquals(0, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(35);
      advancedSettings0.setClientIdentifier("<");
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals("<", advancedSettings0.getClientIdentifier());
      assertEquals(35, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.086481414279282
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(2212);
      advancedSettings0.setMaxThreadsForNioWrite(2212);
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setPerformancePreferencesBandwidth((-1980));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setPerformancePreferencesBandwidth(801);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getBacklog();
      advancedSettings0.setByteBufferSize((-1980));
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketTrafficClass("org.quikserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketSendBufferSize();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(2212, advancedSettings0.getByteBufferSize());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-3466));
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals((-3466), int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(1299);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(1299, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.6066383364465304
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setClientSocketReceiveBufferSize(30);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.toXML("");
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setPerformancePreferencesConnectionTime(3118);
      advancedSettings0.setSocketLinger(3118);
      advancedSettings0.setSocketLinger(2526);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize(3118);
      advancedSettings0.setClientSocketSendBufferSize(2526);
      advancedSettings0.toXML("ol8vy%S>%VcAwr[");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesConnectionTime(519);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("=C,6|9");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("=C,6|9");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // =C,6|9
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.204648430173869
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(3118);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setByteBufferSize(2526);
      advancedSettings0.setSocketLinger(2526);
      advancedSettings0.getCharset();
      advancedSettings0.setPerformancePreferencesConnectionTime(519);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketTrafficClass("</socket-linger>\n");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getCharset();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(2526);
      advancedSettings1.setPerformancePreferencesConnectionTime(9);
      advancedSettings1.setCharset("ISO-8859-1");
      advancedSettings1.setCharset("");
      advancedSettings1.setClientSocketReceiveBufferSize(519);
      advancedSettings1.setDebugNonBlockingMode(true);
      advancedSettings0.setClientIdentifier("");
      int int0 = advancedSettings1.getClientSocketSendBufferSize();
      assertEquals(519, advancedSettings1.getClientSocketReceiveBufferSize());
      assertEquals(2526, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3273610261779543
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      assertFalse(advancedSettings1.getClientSocketTcpNoDelay());
      
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.toXML("CU/HuTcaHn~` @1");
      assertTrue(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.855868606181163
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-2628));
      advancedSettings0.setClientSocketTrafficClass("tz$-&<21B&koVZ-O");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("Z");
      advancedSettings0.setMaxThreadsForNioWrite((-22));
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientIdentifier("Z");
      advancedSettings0.setClientSocketTrafficClass("N=MqX!3<");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-3039));
      advancedSettings0.setClientIdentifier("6oCH&BR]0*1^<");
      advancedSettings1.setClientIdentifier("+2:(DyVw,v*Ba3Vu");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings1.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      assertEquals((-22), advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-598));
      advancedSettings0.setClientSocketSendBufferSize(3663);
      advancedSettings0.setByteBufferSize((-598));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals((-598), advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9887745165614437
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("C@$e1fODy#n!:9C");
      advancedSettings0.setClientIdentifier("5FV");
      advancedSettings0.setClientIdentifier("'IfxgV&'Jrg?y");
      advancedSettings0.setClientIdentifier("\t<client-iHdenVie*r>");
      advancedSettings0.setClientIdentifier("M5[wC' 1");
      advancedSettings0.setClientIdentifier("=XMgv}(n{dv>r");
      advancedSettings0.setClientIdentifier("</client-socket-traffic-class>\n");
      advancedSettings0.setClientIdentifier("=XMgv}(n{dv>r");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("\t<client-socket-receive-buffer-size>");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("\t<client-identifier>");
      advancedSettings0.setClientIdentifier("\t<client-socket-receive-buffer-size>");
      advancedSettings0.setClientIdentifier(",9R!uTI");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("^g2my! 3s");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals("^g2my! 3s", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(1030);
      advancedSettings0.getPerformancePreferencesBandwidth();
      int int0 = advancedSettings0.getBacklog();
      assertEquals(1030, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.222825537591552
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setClientSocketReceiveBufferSize(237);
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setClientSocketTrafficClass("hC5l<;4SZ_!&mNt0`");
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setCharset("");
      assertEquals(1, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientIdentifier("!n;xn");
      advancedSettings0.getClientIdentifier();
      assertEquals("!n;xn", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertFalse(boolean0);
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.437913861070388
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(925);
      advancedSettings0.setClientSocketReceiveBufferSize(3398);
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setByteBufferSize((-3466));
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.toXML("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      assertEquals(10, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-1382));
      advancedSettings0.setByteBufferSize((-3466));
      advancedSettings0.setClientSocketSendBufferSize((-1566));
      advancedSettings0.setClientSocketReceiveBufferSize((-1566));
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals((-1566), int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.048820325203473
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals((-1), advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      String string0 = "</charset>\n";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</charset>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </charset>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, int0);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.5371281747722687
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.toXML((String) null);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketTrafficClass();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-1));
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.4372008485926697
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("K)=v");
      advancedSettings0.setClientSocketSendBufferSize((-1566));
      advancedSettings0.setClientSocketReceiveBufferSize((-1566));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.toXML("K)=v");
      assertEquals((-1566), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.266952855425168
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-1));
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }
}
