/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 19:50:19 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.util.xmlreader.AccessConstraintConfig;
import org.quickserver.util.xmlreader.QSAdminServerConfig;
import org.quickserver.util.xmlreader.QuickServerConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.052128844641025
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      theClient0.toString();
      quickServer0.setClientCommandHandler((String) null);
      QSAdminServerConfig qSAdminServerConfig0 = new QSAdminServerConfig();
      qSAdminServerConfig0.setMaxConnectionMsg((String) null);
      quickServer0.setBasicConfig(qSAdminServerConfig0);
      qSAdminServerConfig0.setName("");
      quickServer0.makeServerSocket();
      qSAdminServerConfig0.toXML((String) null);
      theClient0.setServer(quickServer0);
      quickServer0.setBasicConfig(qSAdminServerConfig0);
      theClient0.setClientData((ClientData) null);
      theClient0.getAuthenticator();
      theClient0.setClientData((ClientData) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getServer();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      System.setCurrentTimeMillis(243L);
      theClient0.getClientBinaryHandler();
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0567526361500623
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(380);
      theClient0.getClientObjectHandler();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getAuthenticator();
      QuickServer quickServer0 = new QuickServer();
      quickServer0.getAccessConstraintConfig();
      quickServer0.setAccessConstraintConfig((AccessConstraintConfig) null);
      quickServer0.setRawCommunicationMaxLength(0);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      theClient0.getAuthenticator();
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getAuthenticator();
      theClient0.getClientBinaryHandler();
      theClient0.getClientWriteHandler();
      theClient0.getServer();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocketChannel();
      theClient0.getClientBinaryHandler();
      theClient0.getSocketChannel();
      theClient0.toString();
      theClient0.getSocketChannel();
      System.setCurrentTimeMillis(460L);
      theClient0.getSocketChannel();
      theClient0.getSocketChannel();
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocket();
      theClient0.getSocketChannel();
      System.setCurrentTimeMillis(380);
      theClient0.getAuthenticator();
      theClient0.getSocket();
      theClient0.getAuthenticator();
      assertEquals(380, theClient0.getTimeout());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7853437136837007
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("SYZ#TU", 852);
      quickServer0.setRawCommunicationMaxLength((-1468));
      quickServer0.setMaxAuthTry(852);
      theClient0.setServer(quickServer0);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      theClient0.getAuthenticator();
      theClient0.getClientExtendedEventHandler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      System.setCurrentTimeMillis((-1468));
      theClient0.getClientBinaryHandler();
      System.setCurrentTimeMillis(852);
      theClient0.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      System.setCurrentTimeMillis(852);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      System.setCurrentTimeMillis((-1468));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.6275577079926418
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)71;
      byteArray0[3] = (byte) (-1);
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient1.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(0L);
      QuickServer quickServer0 = new QuickServer("");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("Closing ClientHandler pool.", 201);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(1012);
      blockingClientHandler0.getClientData();
      assertEquals("<ClientHandler-Pool#1012-ID:1>", blockingClientHandler0.getName());
      
      theClient1.setClientData((ClientData) null);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      quickServer0.run();
      theClient0.setServer(quickServer0);
      QuickServer quickServer1 = new QuickServer();
      theClient1.getClientAuthenticationHandler();
      theClient1.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getAuthenticator();
      theClient0.getServer();
      theClient1.getClientBinaryHandler();
      theClient1.getServer();
      theClient1.getClientExtendedEventHandler();
      theClient1.getAuthenticator();
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.19741190322987
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getServer();
      theClient0.getSocket();
      theClient0.getAuthenticator();
      theClient0.getSocket();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: null}", string0);
      
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientEvent();
      theClient0.getSocket();
      theClient0.getClientExtendedEventHandler();
      System.setCurrentTimeMillis((-2563L));
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.getSocket();
      theClient0.getClientExtendedEventHandler();
      System.setCurrentTimeMillis(1463L);
      theClient0.getAuthenticator();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.198616238838059
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-16L));
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.setMaxConnectionMsg("");
      theClient0.toString();
      SocketChannel.open();
      theClient0.getAuthenticator();
      theClient0.getClientExtendedEventHandler();
      theClient0.getAuthenticator();
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(0);
      assertEquals("<ClientHandler-Pool#0-ID:1>", blockingClientHandler0.getName());
      
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.toString();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientWriteHandler();
      theClient0.toString();
      theClient0.getClientBinaryHandler();
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getSocket();
      theClient0.getSocket();
      theClient0.getClientObjectHandler();
      theClient0.toString();
      theClient0.getMaxConnectionMsg();
      theClient0.getAuthenticator();
      System.setCurrentTimeMillis(850L);
      theClient0.getServer();
      System.setCurrentTimeMillis(850L);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getRemoteSocketAddress();
      theClient0.setSocket(mockSocket0);
      theClient0.getClientBinaryHandler();
      theClient0.getSocketChannel();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocket();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("].]9st5ZaoW)KGA", 181);
      Proxy proxy0 = new Proxy(proxy_Type0, inetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      mockSocket0.setPerformancePreferences((-1), 181, 181);
      theClient0.setSocket(mockSocket0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      
      mockSocket0.getChannel();
      theClient0.getSocketChannel();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[8];
      theClient0.setMaxAuthTryMsg("UY8l|Y+aG{O{H*<1Pcn");
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      theClient0.getMaxAuthTryMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4882695869868265
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("");
      theClient0.setTimeout(0);
      theClient0.toString();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.toString();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getClientEvent();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      TheClient theClient1 = new TheClient();
      TheClient theClient2 = new TheClient();
      theClient1.getMaxConnectionMsg();
      theClient2.getClientExtendedEventHandler();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient2.getSocket();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientEventHandler();
      theClient0.setTrusted(false);
      assertEquals(0, theClient0.getTimeout());
      assertFalse(theClient0.getTrusted());
      
      TheClient theClient3 = new TheClient();
      theClient3.getClientExtendedEventHandler();
      theClient3.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.getSocket();
      theClient2.getClientExtendedEventHandler();
      String string0 = theClient3.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient1.getAuthenticator();
      theClient3.getAuthenticator();
      theClient1.getClientObjectHandler();
      System.setCurrentTimeMillis(0L);
      theClient2.getClientBinaryHandler();
      theClient2.getClientObjectHandler();
      assertTrue(theClient2.getCommunicationLogging());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.193764486816496
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(83);
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setTrusted(true);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getMaxConnectionMsg();
      QuickServer quickServer0 = new QuickServer((String) null, 83);
      theClient0.getSocket();
      theClient0.getClientObjectHandler();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getMaxAuthTry();
      theClient0.getMaxConnectionMsg();
      theClient0.getClientEvent();
      theClient0.getClientWriteHandler();
      assertEquals(83, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout((-2478));
      Data data0 = new Data();
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.setMaxConnectionMsg("2*c(");
      data0.setLastAsked("U)$g<wn");
      data0.setLastAsked("2*c(");
      byteArray0[4] = (byte) (-87);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-87);
      data0.setPassword(byteArray1);
      byteArray0[5] = (byte) (-108);
      data0.setPassword(byteArray0);
      theClient0.getMaxConnectionMsg();
      assertEquals((-2478), theClient0.getTimeout());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockInetAddress.getLocalHost();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("\t<bind-address>", 32);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-5472));
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.getClientExtendedEventHandler();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals((-5472), int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientCommandHandler();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientData();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      Logger logger0 = Logger.getAnonymousLogger();
      quickServer0.setAppLogger(logger0);
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      quickServer0.initService(quickServerConfig0);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("'><I9%Ye=t\"");
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4866413644630816
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setMaxConnectionMsg("Z_UoQ1zR");
      theClient0.getClientCommandHandler();
      TheClient theClient1 = new TheClient();
      defaultClientEventHandler0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      defaultClientEventHandler0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      
      theClient0.getMaxConnectionMsg();
      theClient0.getMaxConnectionMsg();
      theClient0.getSocket();
      theClient1.toString();
      theClient1.getClientEventHandler();
      theClient0.setTrusted(true);
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.getMaxAuthTry();
      ClientEvent clientEvent0 = theClient0.getClientEvent();
      theClient0.setClientEvent(clientEvent0);
      theClient0.getTrusted();
      theClient0.toString();
      System.setCurrentTimeMillis((-1L));
      theClient0.getClientBinaryHandler();
      assertTrue(theClient0.getTrusted());
      
      theClient1.getClientAuthenticationHandler();
      theClient1.getClientExtendedEventHandler();
      theClient1.getClientWriteHandler();
      theClient1.getClientObjectHandler();
      assertEquals(0, theClient1.getMaxAuthTry());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3797334600238247
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-55);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      theClient0.toString();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setTimeout((byte) (-4));
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setCommunicationLogging(false);
      theClient0.getCommunicationLogging();
      theClient0.getClientData();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientData();
      theClient0.getClientBinaryHandler();
      theClient0.getTrusted();
      theClient0.getClientCommandHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientWriteHandler();
      theClient0.getSocket();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      assertEquals((-4), theClient0.getTimeout());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      SocketChannel socketChannel0 = SocketChannel.open();
      theClient0.setSocketChannel(socketChannel0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-17);
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte)0;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "/object-pool/byte-buffer-object-pool");
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout((-924));
      int int0 = theClient0.getTimeout();
      assertEquals((-924), int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg(">G5>c4[~MC:mT^");
      theClient0.getTimeoutMsg();
      System.setCurrentTimeMillis((-19));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setTimeout(1802);
      theClient0.getTimeout();
      theClient0.getClientAuthenticationHandler();
      assertEquals(1802, theClient0.getTimeout());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setTimeoutMsg("");
      theClient0.getTimeoutMsg();
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      commandHandler0.closingConnection(blockingClientHandler0);
      assertEquals("<ClientHandler-Pool#-1-ID:1>", blockingClientHandler0.getName());
      
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getCommunicationLogging();
      System.setCurrentTimeMillis(0L);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = null;
      TheClient theClient0 = new TheClient();
      theClient0.getTimeoutMsg();
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          TheClient theClient0 = new TheClient();
          theClient0.getMaxAuthTryMsg();
          SocketChannel socketChannel0 = SocketChannel.open();
          Proxy proxy0 = Proxy.NO_PROXY;
          MockSocket mockSocket0 = new MockSocket(proxy0);
          mockSocket0.getRemoteSocketAddress();
          // Undeclared exception!
          try { 
            socketChannel0.bind((SocketAddress) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"localhost:0\" \"listen,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkListen(SecurityManager.java:1131)
             // sun.nio.ch.SocketChannelImpl.bind(SocketChannelImpl.java:582)
             // sun.reflect.GeneratedMethodAccessor66.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
