/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 01:56:00 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      DefaultNucleotideCodec.valueOf("INSTANCE");
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (long) (byte)0, (long) (byte)0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("?+6y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ?+6y into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)48;
      byte byte0 = (byte)73;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.399997617440439
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      Integer integer0 = new Integer(638);
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getGapOffsets(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray1, (byte)0);
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      defaultNucleotideCodec1.toString(byteArray0);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-104);
      byteArray2[6] = (byte) (-104);
      byteArray2[7] = (byte)0;
      byteArray2[8] = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.decode(byteArray0, 4294967295L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483645
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.473419060992075
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(956);
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray0, 642);
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 2040);
      assertEquals(2040, int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec3.toString(byteArray0);
      assertEquals("NVDBRSK", string0);
      
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec4.getGappedOffsetFor(byteArray0, 2040);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec5.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Gap;
      byte[] byteArray2 = defaultNucleotideCodec6.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec7.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      int int2 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, 2144143860);
      assertEquals(8, byteArray1.length);
      assertTrue(int2 == int1);
      
      List<Integer> list0 = defaultNucleotideCodec7.getGapOffsets(byteArray2);
      assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9258637628751876
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 9;
      Integer integer0 = new Integer(9);
      Nucleotide nucleotide1 = Nucleotide.Guanine;
      nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.324434690275377
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Strong;
      nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      nucleotide0.getAllPossibleAmbiguities();
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      String string0 = defaultNucleotideCodec1.toString(byteArray1);
      assertEquals("S", string0);
      
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.isGap(byteArray1, (-2412));
      int int0 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, (-2412));
      assertEquals(2, int0);
      
      String string1 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("CG", string1);
      assertEquals(5, byteArray0.length);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7846193848206715
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-50);
      Range range0 = Range.ofLength((byte)0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0, range0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(628, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.237888261836881
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte) (-1);
      Nucleotide nucleotide0 = Nucleotide.Weak;
      defaultNucleotideCodec0.encode(nucleotide0);
      Byte byte0 = new Byte((byte)110);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide2 = Nucleotide.Gap;
      byte[] byteArray1 = defaultNucleotideCodec1.encode(nucleotide2);
      defaultNucleotideCodec0.toString(byteArray1);
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide3 = Nucleotide.Adenine;
      defaultNucleotideCodec0.encode(nucleotide3);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte) (-79);
      byteArray2[6] = (byte) (-1);
      byteArray2[7] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.047707978151193
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((int) (byte)0, iterator0);
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)3);
      assertEquals(3, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.812328619861991
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-58);
      byte byte0 = (byte) (-110);
      byteArray0[5] = (byte) (-110);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(1952257861, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2894013230781436
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Nucleotide nucleotide1 = Nucleotide.Gap;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, (-252));
      assertEquals(0, int0);
      
      Nucleotide nucleotide2 = Nucleotide.Gap;
      nucleotide2.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide3 = Nucleotide.Gap;
      byte[] byteArray2 = defaultNucleotideCodec2.encode(nucleotide3);
      String string0 = defaultNucleotideCodec1.toString(byteArray2);
      assertEquals("-", string0);
      
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec3.getNumberOfGaps(byteArray2);
      assertEquals(1, int1);
      
      int int2 = defaultNucleotideCodec3.getNumberOfGapsUntil(byteArray1, 0);
      assertEquals(1, int2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3738232735453977
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Purine;
      linkedList0.add(nucleotide0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-64)}, byteArray1);
      
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 642);
      assertEquals(642, int0);
      
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      nucleotide1.getAllPossibleAmbiguities();
      Nucleotide nucleotide2 = Nucleotide.Gap;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide2);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray2, 642);
      nucleotide2.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec1.toString(byteArray2);
      assertEquals("-", string0);
      
      int int1 = defaultNucleotideCodec0.getNumberOfGaps(byteArray2);
      assertEquals(1, int1);
      assertEquals(5, byteArray2.length);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.324248290276829
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Purine;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-2139559353));
      linkedList0.add(nucleotide0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-64)}, byteArray1);
      
      int int0 = new Integer(642);
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      nucleotide1.getAllPossibleAmbiguities();
      Nucleotide nucleotide2 = Nucleotide.Gap;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide2);
      int int1 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray2, 642);
      assertEquals(1, int1);
      
      nucleotide2.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec1.toString(byteArray2);
      assertEquals("-", string0);
      
      int int2 = defaultNucleotideCodec0.getNumberOfGaps(byteArray2);
      assertEquals(1, int2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.5872830548620738
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-24);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      defaultNucleotideCodec0.isGap(byteArray0, 483);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (byte) (-1));
      assertFalse(boolean0);
      
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 255);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec1.getUngappedLength(byteArray0);
      assertEquals((-6144L), long0);
      
      int int0 = defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 255);
      assertEquals(0, int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec3.getUngappedOffsetFor(byteArray0, (byte) (-1));
      assertEquals((-1), int1);
      
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = defaultNucleotideCodec4.decode(byteArray0, 1L);
      assertEquals(Nucleotide.Unknown, nucleotide0);
      
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec4.getGapOffsets(byteArray0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec2.iterator(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec2.encode((int) (byte) (-1), iterator0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)0}, byteArray1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte) (-8);
      byte byte0 = (byte) (-105);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(12, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte) (-1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1060));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-8);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (byte) (-8));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte)0, (long) (byte)0);
      List<Range> list0 = range0.split(504L);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 514L;
      long long1 = (-2435L);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (byte)0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byte byte0 = (byte) (-10);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode((byte[]) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-93);
      byte byte0 = (byte)71;
      byteArray0[1] = (byte)71;
      byte byte1 = (byte)125;
      byteArray0[2] = (byte)125;
      byte byte2 = (byte) (-25);
      byteArray0[3] = (byte) (-25);
      byte byte3 = (byte)64;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-53);
      byte byte4 = (byte) (-106);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5792955958112014
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)123;
      byte byte0 = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.40254232901456
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.40254232901456
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)23;
      byte byte1 = (byte)6;
      byte byte2 = (byte) (-1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-93);
      byte byte0 = (byte)71;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-53);
      byte byte1 = (byte) (-106);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, 642);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.385517388964126
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 2040);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      defaultNucleotideCodec0.decode(byteArray0, 0L);
      DefaultNucleotideCodec[] defaultNucleotideCodecArray0 = DefaultNucleotideCodec.values();
      assertEquals(1, defaultNucleotideCodecArray0.length);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 688L);
      Range range1 = Range.of((-2549L), (-2443L));
      range0.isSubRangeOf(range1);
      defaultNucleotideCodec0.iterator(byteArray0, range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9991450160162882
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(75, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.128928752370633
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer(638);
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      long long0 = new Integer(638);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode(4, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.341242239203533
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte) (-1);
      byte byte1 = (byte)6;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, 65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-5);
      byteArray0[0] = (byte) (-5);
      byte byte1 = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-5);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.484664192569499
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer(956);
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 179;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 179);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getGappedOffsetFor(byteArray0, 179);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec4.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Purine;
      defaultNucleotideCodec6.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec7.iterator(byteArray1, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.4855371590639836
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = new Integer((-2694));
      Integer integer1 = new Integer((-2694));
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray0, (-3));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, 1165);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getUngappedLength(byteArray0);
      defaultNucleotideCodec3.getGappedOffsetFor(byteArray0, (-262));
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getUngappedOffsetFor(byteArray0, 8);
      defaultNucleotideCodec4.getUngappedOffsetFor(byteArray0, (-64));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec4.decode(byteArray0, (-64));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -64
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.400344526816758
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte byte0 = (byte)19;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)19;
      byteArray0[1] = (byte)19;
      byte byte1 = (byte)3;
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)3);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      // Undeclared exception!
      try { 
        linkedList0.listIterator((int) (byte)3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.754627133386218
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)86;
      byteArray1[3] = (byte) (-6);
      byteArray1[4] = (byte) (-80);
      byteArray1[5] = (byte) (-86);
      byteArray1[6] = (byte)4;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte) (-2);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (byte)0);
      byteArray0[0] = (byte)87;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)87);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.63421384561801
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)24;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-1));
      byteArray0[5] = (byte)43;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-3106));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)30;
      byteArray1[1] = (byte)106;
      byteArray1[2] = (byte) (-79);
      byteArray1[3] = (byte)106;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer(642);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-3517));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.decode(byteArray0, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 0 corresponds to encodedIndex 4  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.40254232901456
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte byte0 = (byte)6;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.4125876522655534
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte) (-1);
      byte byte1 = (byte)6;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.360950150688853
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer(956);
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 2040);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, 6);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, 2040);
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, (-64));
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 2040);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("I!;'x;]rB^<RI&wHN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.I!;'x;]rB^<RI&wHN
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.265908610586213
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      int int0 = 2040;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, 2040);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray1, 103L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 103 corresponds to encodedIndex 55  encodedglyph length is 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.4286687697449683
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)58;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 8);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-120);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (byte) (-120));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-65);
      Range range0 = Range.of((long) (byte) (-30), 1337L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-83);
      byteArray0[8] = (byte)1;
      Range range0 = Range.of((long) (byte)92, 687L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 50
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.624945863276291
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-47);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.804959633741802
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-5);
      byte byte0 = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)12;
      byte byte1 = (byte)6;
      byteArray0[5] = (byte)6;
      byte byte2 = (byte) (-27);
      byteArray0[6] = (byte) (-27);
      byte byte3 = (byte)68;
      byteArray0[7] = (byte)68;
      byteArray0[8] = (byte)77;
      defaultNucleotideCodec0.decode(byteArray0, 4L);
      byte[] byteArray1 = new byte[7];
      byte byte4 = (byte)17;
      byteArray1[0] = (byte)17;
      byte byte5 = (byte) (-11);
      byteArray1[1] = (byte) (-11);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)17;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.5065595170407526
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      int int0 = 0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-18);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      defaultNucleotideCodec0.isGap(byteArray0, 13);
      int int0 = (-2);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-2));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("Q89G\"'Jh5Qp0e[A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.Q89G\"'Jh5Qp0e[A
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte)68;
      byteArray0[8] = (byte)77;
      defaultNucleotideCodec0.decode(byteArray0, 4L);
      byte[] byteArray1 = new byte[7];
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      byteArray1[0] = (byte)17;
      byteArray1[1] = (byte) (-11);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)17;
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-5);
      byteArray0[5] = (byte)6;
      byteArray0[7] = (byte)68;
      byteArray0[8] = (byte)77;
      byte byte0 = (byte)17;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.192759744268683
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Integer integer0 = new Integer(956);
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray0, (-4905));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)6;
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte)6;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)7, (byte) (-9), (byte)104, (byte) (-53), (byte)80}, byteArray2);
      
      Nucleotide nucleotide1 = Nucleotide.Guanine;
      defaultNucleotideCodec0.encode(nucleotide1);
      Nucleotide nucleotide2 = Nucleotide.Keto;
      Set<Nucleotide> set1 = nucleotide2.getBasesFor();
      byte[] byteArray3 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)46}, byteArray3);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte)0, (long) (byte)0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 514L;
      long long1 = (-2435L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem3);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      int int0 = 0;
      ListIterator<Nucleotide> listIterator0 = linkedList0.listIterator(0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-742), (Iterator<Nucleotide>) listIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte byte0 = (byte) (-1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byte byte1 = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[4] = (byte) (-1);
      int int0 = 483;
      defaultNucleotideCodec0.isGap(byteArray0, 483);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.0063738408520737
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[1] = (byte) (-55);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (-3072));
      nucleotide0.getAllPossibleAmbiguities();
      Nucleotide nucleotide1 = Nucleotide.Thymine;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      String string0 = defaultNucleotideCodec0.toString(byteArray2);
      assertEquals("T", string0);
      
      int int1 = defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2146431475L, 2146431475L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Range range0 = Range.ofLength(5335L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 5334 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.4225179916756616
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 688L);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      long long0 = (-2549L);
      Range range1 = Range.of((-2549L), (-2443L));
      range0.isSubRangeOf(range1);
      range1.iterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (-1550));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.4337150271040935
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)6;
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byte[] byteArray1 = new byte[20];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)6;
      byteArray1[5] = (byte)6;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, 371);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (byte)0);
      int int1 = new Byte((byte) (-1));
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.562200162369491
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)61;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byte[] byteArray1 = new byte[8];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (byte)0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte)0, (long) (byte)0);
      String string0 = " 92M;!q1[k}LH7;";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem3);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 514L, (-2435L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.5362920280640653
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)3);
      int int0 = 483;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 483);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-55);
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)89;
      byte byte1 = (byte)16;
      byteArray0[2] = (byte)16;
      byte byte2 = (byte)10;
      byteArray0[3] = (byte)10;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte) (-55));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -55
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)3);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      // Undeclared exception!
      try { 
        linkedList0.listIterator(6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(1, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.4772236470708995
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)7, (byte) (-9), (byte) (-104), (byte) (-85), (byte)48}, byteArray0);
      
      Nucleotide nucleotide1 = Nucleotide.Unknown;
      Set<Nucleotide> set1 = nucleotide1.getAllPossibleAmbiguities();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>(set1);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      assertEquals(4, byteArray1.length);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte)23, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor((byte[]) null, 3147);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte) (-2);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-22);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-95);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[8] = (byte)50;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte)46);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 46 corresponds to encodedIndex 27  encodedglyph length is 9
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }
}
