/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 09 22:39:49 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0042649337335225
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = 23L;
      Range range0 = Range.of(23L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 23L, 23L);
      range1.getLength();
      range0.equals(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 1L, 255L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0388845844217593
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 4294967295L, 4294967295L);
      range0.equals((Object) null);
      long long1 = 0L;
      // Undeclared exception!
      try { 
        Range.of(1924L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.178624913410437
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(range_CoordinateSystem0, 384L, 9223372036854775807L);
      Range.ofLength(255L);
      range0.equals(consumer0);
      Range.ofLength(384L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(255L);
      Range.Builder range_Builder0 = new Range.Builder(384L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.4533104827891257
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(65535L);
      Range.of(1046L);
      Range.Builder range_Builder0 = new Range.Builder(65535L, 9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1057L);
      Range range2 = range_Builder0.build();
      range1.getLength();
      Range.Builder range_Builder2 = range_Builder1.contractEnd(2147483647L);
      range2.equals(range0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range_Builder2.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer1);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.572803045355459
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of((-2147483648L));
      Range range2 = Range.of(9223372036854775680L);
      Range.Builder range_Builder0 = new Range.Builder((-1042L), 65535L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1042L));
      range_Builder1.contractBegin((-1042L));
      range_Builder1.build();
      range1.getLength();
      range0.complement(range2);
      range_Builder0.copy();
      Range range3 = Range.of(65535L);
      // Undeclared exception!
      try { 
        range3.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2190493619686493
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of((-10L));
      Range range1 = Range.of((-10L), (-10L));
      range0.equals(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-10L), 255L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2729L;
      Range.of(range_CoordinateSystem1, (-10L), 2729L);
      Range.of((-10L));
      Range.of((-10L));
      long long1 = (-2882L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2147481507L, (-2882L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3666043988116257
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.startsBefore(range1);
      Range.of(2147483647L, 2147483647L);
      range1.spliterator();
      Range range2 = Range.ofLength(2147483647L);
      range1.equals(range2);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractBegin((-762L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-1102L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9345355966688094
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(9223372036854775785L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      int int0 = 1;
      range0.isSubRangeOf(range0);
      range0.getEnd();
      range0.endsBefore(range0);
      linkedList0.subList(1, 1);
      linkedList0.addFirst((Range) null);
      linkedList0.add(range0);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The second parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.5797813131447853
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range1 = Range.ofLength(32767L);
      Object object0 = new Object();
      range0.equals(object0);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      
      Range range2 = Range.ofLength(1057L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range3 = Range.of(32767L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range2);
      Range range4 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder0.contractBegin(255L);
      range4.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.Builder range_Builder4 = new Range.Builder((-1L), 32767L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder3);
      Range.of(255L);
      Range range5 = range1.intersection(range3);
      //  // Unstable assertion: assertNotSame(range3, range5);
      //  // Unstable assertion: assertTrue(range5.equals((Object)range3));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1383958373376384
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(23L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Object object0 = new Object();
      Range range1 = Range.of(23L);
      boolean boolean0 = range1.intersects(range1);
      assertTrue(boolean0);
      
      Range.of(23L);
      Range range2 = Range.ofLength(23L);
      range0.equals(range2);
      Range.Comparators.values();
      Range range3 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range3.getEnd(range_CoordinateSystem0);
      assertEquals(2L, long0);
      
      Range range4 = Range.ofLength(1L);
      Range range5 = range0.intersection(range4);
      assertFalse(range4.equals((Object)range2));
      assertNotSame(range4, range2);
      assertSame(range0, range1);
      assertTrue(range5.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.076484080611719
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775784L), (-9223372036854775784L));
      Long long0 = new Long((-9223372036854775784L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 4294967295L, 4294967295L);
      range0.equals(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 533L, (-155L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1364212951596695
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of((-15L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-15L), (-15L));
      range0.equals(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-15L), 255L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2729L;
      Range.of(range_CoordinateSystem2, (-15L), 2729L);
      Range.of((-15L));
      Range.of((-15L));
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-2882L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 2147481507L, (-2882L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3824846452052397
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Long long1 = new Long((-592L));
      Object object0 = new Object();
      Long.getLong("");
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = 2576L;
      Range range1 = Range.of(range_CoordinateSystem1, (-2147483648L), 2576L);
      range1.complement(range0);
      long long3 = (-348L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-348L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3642629177098557
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(1057L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1057L, 1057L);
      range1.getLength();
      range0.equals(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 873L, 1057L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-247L));
      range_Builder0.build();
      Range.ofLength(1057L);
      Range.of(919L);
      Range.Builder range_Builder2 = new Range.Builder(1881L);
      range_Builder1.build();
      range_Builder1.copy();
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7782254130184443
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(9223372036854775785L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      int int0 = 1;
      linkedList0.add(range0);
      range0.getEnd();
      linkedList0.offerFirst(range0);
      List<Range> list0 = linkedList0.subList(1, 1);
      linkedList0.addFirst((Range) null);
      linkedList0.add(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.345377145648029
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 384L, 4294967300L);
      Range range1 = Range.ofLength(255L);
      range0.equals(consumer0);
      Range.ofLength(384L);
      Range.of(255L);
      Range.Builder range_Builder0 = new Range.Builder(4294967300L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(255L);
      Range.Builder range_Builder3 = new Range.Builder();
      long long0 = (-32768L);
      range_Builder3.contractBegin((-32768L));
      range1.spliterator();
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(680L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.5111818429743846
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range.Builder range_Builder2 = range_Builder0.shift(761L);
      range_Builder0.expandEnd(4294967295L);
      Range.Builder range_Builder3 = range_Builder2.contractBegin(761L);
      Range range0 = range_Builder3.build();
      Long long0 = new Long(1L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("&jJyS=(-~N{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse &jJyS=(-~N{ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.607779776269669
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.ofLength(65535L);
      Range.of(65535L);
      Range range0 = Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(1046L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1046L);
      range_Builder1.build();
      Range.of((-32768L), 65535L);
      Range.of(1L);
      Range range1 = Range.of(9223372036854775806L);
      Range.ofLength(1L);
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.6750976142222886
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 7841L, 7841L);
      Range range1 = Range.ofLength(7841L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.complement(range1);
      range0.forEach(consumer0);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      range0.equals((Object) null);
      Range range2 = Range.of(648L);
      range1.equals(range_CoordinateSystem0);
      range1.spliterator();
      Range.Comparators.values();
      Range.of((-352L));
      List<Range> list0 = range1.complement(range2);
      assertFalse(list0.contains(range1));
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.6883592138527073
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), 873L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(825L);
      Range range0 = range_Builder0.build();
      range_Builder1.expandBegin(825L);
      Range.Builder range_Builder2 = range_Builder0.contractBegin((-773L));
      Range range1 = range_Builder1.build();
      Range range2 = Range.ofLength(127L);
      range1.getLength();
      range1.complement(range0);
      Range.Builder range_Builder3 = new Range.Builder(873L);
      range_Builder2.copy();
      Range range3 = Range.of(127L);
      Range.of(0L);
      range3.intersection(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.403055215229171
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(1057L);
      long long0 = (-36L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 2997L;
      Range range1 = Range.of(range_CoordinateSystem0, 2997L, 9223372036854775424L);
      range1.startsBefore(range0);
      Range range2 = Range.of((-999L), 32767L);
      range1.isSubRangeOf(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775424L, (-999L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1000 would make range [9223372036854775423 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1455791620619658
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.startsBefore(range1);
      range0.isSubRangeOf(range0);
      range0.equals(range1);
      Range range2 = Range.of(2147483647L);
      range2.equals((Object) null);
      Range.of(9223372036854773614L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("max cluster distance can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.max cluster distance can not be negative
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.5155824384103576
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals("");
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range1);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3923468875425122
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 4294967295L, 4294967295L);
      range0.equals(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-2524L));
      range0.equals((Object) null);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range2 = range_Builder1.build();
      range1.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range range3 = range1.intersection(range2);
      List<Range> list0 = range1.complement(range3);
      List<Range> list1 = range2.complementFrom(list0);
      List<Range> list2 = range2.complementFrom(list1);
      range2.complementFrom(list2);
      Range range4 = range0.asRange();
      range3.asRange();
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertSame(range2, range4);
      //  // Unstable assertion: assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.7407586377255666
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long((-475L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals(range0);
      Range range1 = Range.of(range_CoordinateSystem0, 539L, 9223372036854775807L);
      Range range2 = Range.of(range_CoordinateSystem1, (-2066L), (-475L));
      Range range3 = range2.intersection(range1);
      String string0 = range3.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/SB", string0);
      
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Range.of(900L);
      Range range4 = Range.ofLength(4012L);
      Range range5 = Range.parseRange("[ 0 .. 0 ]/SB");
      assertFalse(range5.isEmpty());
      assertNotSame(range5, range4);
      
      Range range6 = Range.of(9223372036854775807L);
      assertFalse(range6.equals((Object)range0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.4305035093914538
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((-773L), (-773L));
      range0.equals("");
      Range range1 = Range.of((-1428L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(1558L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range3 = Range.of(1558L);
      Range range4 = range1.intersection(range3);
      assertSame(range4, range2);
      assertTrue(range4.isEmpty());
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.654359118112437
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483648L), 2147483647L);
      range0.startsBefore(range1);
      range0.isSubRangeOf(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 1L, 1L);
      range0.startsBefore(range3);
      range2.getLength();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range0.getEnd();
      range_Builder0.expandBegin((-2147483648L));
      Range range4 = Range.ofLength(1L);
      range4.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange("M,=m=Yxi&(o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse M,=m=Yxi&(o into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1096996737706277
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.startsBefore(range1);
      range0.isSubRangeOf(range0);
      range0.startsBefore(range1);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2147483647L, 125L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.498296241485682
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      range1.startsBefore(range0);
      range1.isSubRangeOf(range0);
      range0.equals("ss.,(");
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-2147483648L), 1300L);
      Range.of(1L);
      Range.of((-2147483648L));
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 657L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.208750099004093
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.startsBefore(range1);
      range0.isSubRangeOf(range0);
      range1.endsBefore(range1);
      range0.equals(range1);
      long long0 = 9223372036854775807L;
      Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.627055682392135
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.ofLength(1057L);
      Range range1 = Range.of(1057L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of((-36L), 1057L);
      range1.toString();
      boolean boolean0 = range3.endsBefore(range1);
      String string0 = range3.toString();
      assertEquals("[ -36 .. 1057 ]/0B", string0);
      
      range1.intersects(range3);
      String string1 = range1.toString();
      assertEquals("[ 1057 .. 1057 ]/0B", string1);
      
      String string2 = range0.toString();
      assertEquals("[ 0 .. 1056 ]/0B", string2);
      
      Range range4 = Range.of(2L);
      range2.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2147483648L), 1022L);
      Range range5 = Range.of((-1458L));
      boolean boolean1 = range0.equals(range_Builder0);
      assertFalse(boolean1);
      
      boolean boolean2 = range2.isEmpty();
      assertFalse(boolean2 == boolean0);
      
      Range range6 = range3.intersection(range4);
      assertFalse(range6.isEmpty());
      
      range5.asRange();
      Range range7 = range3.intersection(range1);
      assertFalse(range7.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.430043127855944
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.ofLength(1057L);
      Range range1 = Range.of(1057L);
      Range range2 = range1.intersection(range0);
      range2.startsBefore(range0);
      range0.isSubRangeOf(range1);
      range2.endsBefore(range1);
      Range range3 = Range.ofLength(4294967295L);
      range3.equals(range2);
      long long0 = 127L;
      // Undeclared exception!
      try { 
        Range.of(127L, (-2252L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.190275024255759
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775785L);
      long long0 = 9223372036854775807L;
      Range.ofLength(127L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(1057L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2096L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.2319436199137477
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 9223372036854775807L);
      Long long0 = new Long(1634L);
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1988L), 1634L);
      Long long1 = new Long(9223372036854775807L);
      range1.equals(long1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 1L, 9223372036854775807L);
      long long2 = 255L;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem3, 2147483647L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem4, 255L, (-4797L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.6744634647477836
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 153L);
      Range range1 = Range.of(1057L);
      boolean boolean0 = range0.startsBefore(range1);
      Range range2 = Range.ofLength(9223372036854775807L);
      boolean boolean1 = range0.intersects(range2);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      range0.split(9223372036854775807L);
      Range range3 = Range.of(65535L);
      Range range4 = Range.of(1L);
      boolean boolean2 = range0.isSubRangeOf(range2);
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      range_Builder0.contractBegin(1057L);
      Range range5 = range_Builder0.build();
      range3.getLength();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.shift(1L);
      range_Builder1.expandEnd(1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range6 = Range.of(range_CoordinateSystem1, 1L, 9223372036854775807L);
      boolean boolean3 = range3.startsBefore(range4);
      //  // Unstable assertion: assertFalse(boolean3 == boolean2);
      
      long long0 = range3.getLength();
      //  // Unstable assertion: assertEquals(1L, long0);
      
      Object object0 = new Object();
      Range.Builder range_Builder2 = new Range.Builder(1L, 1L);
      Range.Builder range_Builder3 = new Range.Builder(range1);
      List<Range> list0 = range1.complement(range5);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      
      List<Range> list1 = range0.split(1L);
      List<Range> list2 = range3.complementFrom(list1);
      //  // Unstable assertion: assertTrue(list2.contains(range4));
      //  // Unstable assertion: assertTrue(list1.contains(range4));
      
      range4.asRange();
      boolean boolean4 = range6.isSubRangeOf(range3);
      //  // Unstable assertion: assertFalse(boolean4 == boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9364272168250984
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(23L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Object object0 = new Object();
      Range range1 = Range.of(23L);
      range1.equals(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(23L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1689L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.541347282444172
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(23L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      Range range2 = Range.ofLength(127L);
      range2.equals(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1375L));
      range_Builder1.build();
      Range range3 = Range.ofLength(23L);
      Range range4 = range1.intersection(range3);
      Range.Builder range_Builder2 = range_Builder0.contractBegin(127L);
      range_Builder2.contractBegin(127L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range4.forEach(consumer1);
      range4.intersection(range2);
      Range range5 = Range.of(3124L);
      assertFalse(range5.equals((Object)range2));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.042077724643845
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = 23L;
      Range range0 = Range.of(23L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Object object0 = new Object();
      Range range1 = Range.of(127L);
      range1.equals(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      long long1 = (-1508L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1508L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.871649625135927
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 4487L;
      long long1 = (-1564L);
      Range range0 = Range.ofLength(4487L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.4313171237619096
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-5L);
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), 127L);
      range0.equals((Object) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range.of(127L);
      Long long1 = new Long((-473L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-473L), 3629L);
      Range.of(9223372034707292161L);
      long long2 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 2147483647L, 9223372036854775807L);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem2, 838L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.249005655821443
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1057L;
      Range range0 = Range.of(range_CoordinateSystem0, 1057L, 1057L);
      Range range1 = Range.of(1057L);
      range1.intersection(range0);
      long long1 = (-43L);
      Range range2 = Range.of(1057L);
      range1.equals(range2);
      Consumer<Long> consumer0 = null;
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.530545029549035
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-22L);
      Range.of(range_CoordinateSystem0, (-22L), 127L);
      Range range0 = Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(65535L);
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      range_Builder0.contractBegin(1057L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.ofLength(9223372036854775807L);
      range0.intersection(range1);
      Range.of(127L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1481L, 22L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7949796238706957
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = 28L;
      Long long1 = new Long(28L);
      Object object0 = new Object();
      long long2 = (-128L);
      Range range0 = Range.of((-128L));
      range0.equals(long1);
      Consumer<Object> consumer0 = null;
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.649838133766776
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(65535L);
      Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(1046L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1046L);
      Range range2 = range_Builder1.build();
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      long long0 = range1.getLength();
      //  // Unstable assertion: assertEquals(1L, long0);
      
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      range_Builder1.copy();
      Range.of(2147483647L);
      Range range3 = Range.of(1L);
      Range.ofLength(1L);
      Range range4 = range3.intersection(range0);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.585413855680918
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = 65535L;
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of((-2147483648L));
      Range range2 = Range.of(9223372036854775680L);
      long long1 = (-1042L);
      Range.Builder range_Builder0 = new Range.Builder((-1042L), 65535L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1042L));
      range_Builder1.contractBegin((-1042L));
      range_Builder1.build();
      range1.getLength();
      range0.complement(range2);
      range_Builder0.copy();
      Range.of(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854709216L, (-2147483648L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483649 would make range [9223372036854709215 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.3231224381431255
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(1057L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(range_CoordinateSystem0, (-21L), (-21L));
      Long long0 = new Long(1057L);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-21L), (-21L));
      Range.of(1057L, 4294968018L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294968018L, 580L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.5257039542076276
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(385L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 386 .. 386 ]/RB", string0);
      
      Range range1 = Range.of(385L);
      Range range2 = Range.of(385L, 385L);
      range2.toString();
      boolean boolean0 = range0.endsBefore(range1);
      range1.toString();
      boolean boolean1 = range1.intersects(range0);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      range1.toString();
      range0.toString();
      Range range3 = Range.of(1L);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      
      List<Range> list0 = range2.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range4 = Range.parseRange("[ 385 .. 385 ]/0B", range_CoordinateSystem1);
      List<Range> list1 = range4.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertEquals(2, list1.size());
      
      Range range5 = range4.asRange();
      boolean boolean2 = range5.intersects(range2);
      //  // Unstable assertion: assertFalse(boolean2);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0443902281158373
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775784L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.of(17451981148257742L, 2442L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1038298935873976
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(1L, 487L);
      range0.equals((Object) null);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-2457L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.9042160517045548
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Long long0 = new Long((-1247L));
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 9223372036854775284L;
      long long2 = (-3827L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775284L, (-3827L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3828 would make range [9223372036854775284 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.231786817840204
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, (-1247L), 0L);
      Long long1 = new Long((-1247L));
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      Range.of(899L, 4294968058L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2534L, 2509L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.4673924917020575
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-1217L));
      long long0 = 127L;
      Range range1 = Range.of(127L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.startsBefore(range0);
      long long1 = 4294967295L;
      Range range2 = Range.of(range_CoordinateSystem0, 384L, 4294967295L);
      range0.startsBefore(range1);
      Range.ofLength(255L);
      range0.endsBefore(range2);
      long long2 = 1023L;
      Range range3 = Range.of(127L);
      range3.split(384L);
      range_CoordinateSystem0.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.347400004717329
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1057L);
      Range range1 = Range.of(1057L);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(1057L);
      Long long0 = new Long(4294967295L);
      Long.divideUnsigned(4294967295L, 1057L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.endsBefore(range0);
      range0.toString(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1057L, 1057L);
      Range.Builder range_Builder1 = new Range.Builder(1057L, 4063356L);
      long long1 = 8L;
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder0.expandEnd(8L);
      Range.of(8L);
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.5662821977740693
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(65535L);
      Range range2 = Range.of(1046L);
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = new Range.Builder(range2);
      Range range3 = range_Builder0.build();
      range1.getLength();
      range0.complement(range3);
      Range.ofLength(1046L);
      range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(1L);
      Range.Builder range_Builder3 = new Range.Builder(65535L, 65535L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder4.contractBegin(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.4000276150464805
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(1057L, 1057L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long(1057L);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.of(1057L, 4294968058L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294968058L, 580L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.4984247755664217
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1057L, 1057L);
      Range range0 = Range.of(1057L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1057L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2729L;
      range0.isSubRangeOf(range1);
      Range.of(range_CoordinateSystem2, 2729L, 2729L);
      Range.of(4294967295L);
      Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem3, 255L, 1057L);
      Range.of(range_CoordinateSystem1, 1057L, 4294967295L);
      range2.intersection(range0);
      Range.of(2729L, 2147481507L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("^pL2J:o_12p#sD7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.^pL2J:o_12p#sD7
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.5880477239815494
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.of(1057L);
      long long0 = 255L;
      Range.of(255L, 2147481085L);
      Range.of((-1L), 2147481085L);
      Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1057L, 1057L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 1057L, 2147481085L);
      Range.of(1057L);
      Range.of(255L);
      long long1 = (-1240L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1240L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.285572879143115
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(3134L);
      Range.of(range_CoordinateSystem0, 3134L, 9223372036854775806L);
      Range.of(125L, 6262L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 64478L, (-43L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.180840071286157
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(1057L, 1057L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(range_CoordinateSystem0, 1057L, 1057L);
      Long long0 = new Long(1057L);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 1057L, 1057L);
      Range.of(1346L, 1346L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 4294968058L, 4294968058L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294968058L, 1057L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.3188011449799055
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.ofLength(1057L);
      Range range1 = Range.of(1057L);
      Range range2 = range1.intersection(range0);
      long long0 = 4294967295L;
      range2.startsBefore(range0);
      range0.isSubRangeOf(range1);
      range2.endsBefore(range1);
      Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-1574L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1574L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.242253380977717
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.ofLength(65535L);
      Range.of(65535L);
      Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(1046L);
      range_Builder0.contractBegin(1046L);
      Range.of(65535L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.4796438370638185
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1057L, 1057L);
      Range range1 = Range.of(1057L);
      range1.intersection(range0);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 1057L, 1057L);
      Range range2 = Range.of(range_CoordinateSystem0, (-43L), (-43L));
      Long long0 = new Long((-1335L));
      Long.divideUnsigned((-4122L), (-43L));
      Long.compareUnsigned((-3819L), (-1970L));
      Long.getLong("", long0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.equals(long0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, (-4400L), 1057L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.432781366940464
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Long long0 = new Long((-1247L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-4176L), 0L);
      long long1 = 4294968058L;
      Range.Builder range_Builder0 = new Range.Builder((-1247L), 386L);
      range_Builder0.contractBegin(0L);
      Range.of((-856L));
      Range.Builder range_Builder1 = range_Builder0.expandBegin(4294968058L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(386L);
      range_Builder2.build();
      range_Builder1.copy();
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-221L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.030879450076976
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(65535L);
      Range range2 = Range.of(1046L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      Range range3 = Range.of(1022L);
      assertNotSame(range3, range2);
      
      Range range4 = Range.ofLength(1170L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.932712267596788
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Range.of(65535L);
      Range.of(1046L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.5240790043391628
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      long long0 = (-2147483648L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483648L), 2147483647L);
      range0.startsBefore(range1);
      range0.isSubRangeOf(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 1L, 1L);
      range0.startsBefore(range3);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 723L;
      Range.of(range_CoordinateSystem2, 723L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.of(153L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.1628462044577894
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.of(4134L);
      Range.of((-2147483648L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(256L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.5379088601649435
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(65535L);
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range range1 = range_Builder0.build();
      range_Builder0.contractBegin(1057L);
      range_Builder0.expandBegin(1057L);
      Range.of(1395L, 65535L);
      range1.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range1.forEach(consumer0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.1829170467218675
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = 0L;
      Long long1 = new Long((-1247L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-4176L), 0L);
      Range.of((-4176L), 4294968058L);
      // Undeclared exception!
      try { 
        Range.ofLength((-4176L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.819398855207259
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range_Builder0.shift(1057L);
      long long0 = (-9223372036854709227L);
      Range.of(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(1815L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854774753 would make range [1057 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.9911460217996484
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 4294967295L, 4294967295L);
      range0.equals(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 533L, (-155L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.5910265259416008
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-2147483648L), 65535L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, 1L, 0L);
      Range range2 = Range.of(108L);
      Range range3 = Range.of(0L);
      range3.isSubRangeOf(range2);
      Range range4 = Range.ofLength(592L);
      Range.of(range_CoordinateSystem0, (-32768L), 2918L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        range4.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.2717329771816086
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), 0L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem3);
      long long1 = (-2517L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2517L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.811419498301342
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(28L);
      Object object0 = new Object();
      Range range0 = Range.of(127L);
      Object object1 = new Object();
      range0.equals(object1);
      Range.of(28L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("\"XVo2qF;,9p@/}x}4{1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.\"XVo2qF;,9p@/}x}4{1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.058090416881859
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.startsBefore(range1);
      range1.startsBefore(range0);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1L, (-32511L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.5221581589189777
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.startsBefore(range1);
      range0.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-1L), (-1L));
      range0.startsBefore(range2);
      Range.ofLength(255L);
      Range range3 = Range.of(1022L);
      range3.intersects(range0);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("AP-e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.AP-e
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.691885204723673
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1057L;
      Range range0 = Range.of(range_CoordinateSystem0, 1057L, 1057L);
      Range range1 = Range.of(1057L);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 1057L, 1057L);
      Range.of(range_CoordinateSystem0, (-43L), (-43L));
      Long long1 = new Long((-1335L));
      Long.divideUnsigned((-4122L), (-43L));
      Range.of(1057L, 9223372034707292161L);
      Range.of((-1335L), 127L);
      Range.of(255L);
      range0.intersects(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-2050L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.607744503129454
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(65535L);
      Range range2 = Range.of(1046L);
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1057L);
      Range range3 = range_Builder0.build();
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      List<Range> list0 = range0.complement(range3);
      assertEquals(2, list0.size());
      
      range_Builder1.copy();
      Range range4 = Range.of(1L);
      assertFalse(range4.isEmpty());
      
      Range range5 = Range.of(1022L);
      Range.ofLength(1170L);
      Range range6 = range3.intersection(range5);
      assertNotSame(range5, range2);
      assertTrue(range6.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.522206823612911
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-26L), 127L);
      long long0 = 65535L;
      Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.ofLength(9223372036854775807L);
      Range.ofLength(591L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.619927911804227
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(65535L);
      Range range2 = Range.of(1046L);
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1057L);
      Range range3 = range_Builder0.build();
      range_Builder0.contractEnd(1046L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      List<Range> list0 = range0.complement(range3);
      assertEquals(2, list0.size());
      
      range_Builder1.copy();
      Range range4 = Range.of(1L);
      Range range5 = Range.of(1022L);
      Range range6 = Range.ofLength(1170L);
      boolean boolean0 = range6.intersects(range4);
      assertTrue(boolean0);
      
      Range range7 = range3.intersection(range5);
      assertTrue(range7.isEmpty());
      assertNotSame(range5, range2);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.027935882920479
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Range.of(65535L);
      Range.of(1046L);
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1057L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.1096996737706277
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.startsBefore(range1);
      range0.isSubRangeOf(range0);
      range1.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 125L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2147483647L, 125L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.609917503623439
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range range1 = Range.of((-2041L));
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      Range.of(524L);
      Range range2 = Range.ofLength(4294967295L);
      assertFalse(range2.isEmpty());
      
      range1.intersection(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.0979446749710853
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = 385L;
      Range range0 = Range.of(385L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      long long1 = 607L;
      Range.ofLength(607L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 385L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.5084309920825194
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.ofLength(1057L);
      Range range1 = Range.of(1057L);
      Range range2 = range1.intersection(range0);
      range2.startsBefore(range0);
      range0.isSubRangeOf(range1);
      range2.endsBefore(range1);
      range2.equals(range2);
      long long0 = 127L;
      Range.of(127L, 4294967295L);
      long long1 = (-1412L);
      long long2 = 2373L;
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("1A/VwGQO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.1A/VwGQO
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.1525008974259787
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = (-784L);
      Range range0 = Range.of((-784L), (-784L));
      String string0 = "";
      range0.equals("");
      Range range1 = Range.of((-784L));
      range1.equals(range0);
      Long long1 = new Long((-784L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = 816L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 816L, (-784L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.13083061147669
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.of(65535L);
      Range.of(1046L);
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      range_Builder0.shift(9223372036854775807L);
      long long0 = (-9223372036854709227L);
      Range.of(415L);
      Range.Builder range_Builder1 = new Range.Builder(580L);
      range_Builder1.build();
      range_Builder0.copy();
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-3596L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.898615675842681
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.of(1057L);
      Range.of(1437L);
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1061L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.1149637175914746
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range0.getLength();
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.ofLength(2147483647L);
      range0.equals((Object) null);
      long long0 = 108L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 565L, 108L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.2811601791458496
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1057L, 1057L);
      Range range1 = Range.of(1057L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1481L), 1057L);
      Range.of(range_CoordinateSystem1, (-1481L), 1057L);
      Long long0 = new Long(4134L);
      Long.divideUnsigned((-3569L), (-359L));
      Long.compareUnsigned((-1970L), 4134L);
      Long.getLong((String) null, long0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      Range range3 = Range.of(range_CoordinateSystem0, 1057L, 4134L);
      assertNotSame(range3, range2);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.30283373418881
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(1057L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.ofLength(1057L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.intersects(range0);
      Range.ofLength(0L);
      Range range1 = Range.of((-1301L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.445168006232741
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.of(4134L);
      Range range0 = Range.of(216L, 4134L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-1056L), 2147483647L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1056L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.864738512190568
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = 1057L;
      Range.of(1057L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.967867468534036
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 9960L;
      Range range0 = Range.of(range_CoordinateSystem0, (-1567L), 9960L);
      Range range1 = null;
      range0.getEnd();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.745894157753561
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483648L), 2147483647L);
      range0.startsBefore(range1);
      boolean boolean0 = range0.isSubRangeOf(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 1L, 1L);
      range0.startsBefore(range3);
      assertFalse(range3.isEmpty());
      
      Range.ofLength(255L);
      boolean boolean1 = range0.endsBefore(range2);
      assertFalse(boolean1);
      
      Range range4 = Range.of(1022L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 1209L, 2147483647L);
      Range range5 = range2.intersection(range1);
      boolean boolean2 = range4.startsBefore(range1);
      assertFalse(boolean2 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem3, 22L, 1209L);
      Range.of(22L);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range5.toString(range_CoordinateSystem4);
      assertTrue(range1.isEmpty());
      assertEquals("[ 2147483648 .. 2147483647 ]/RB", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.391006095326402
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1057L;
      Range range0 = Range.ofLength(1057L);
      Range range1 = Range.of(1057L);
      range1.intersection(range0);
      long long1 = (-43L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-43L), (-43L));
      Long long2 = new Long((-1335L));
      Long.divideUnsigned((-4122L), (-43L));
      Long.getLong("", long2);
      range2.equals(long2);
      long long3 = (-128L);
      range2.getEnd();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-4400L), (-4780L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.0979446749710853
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(1818L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.ofLength(1038L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 65535L, 1819L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.9194648563790726
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      range0.getBegin();
      Range range1 = Range.of(65535L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.4945857140307814
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3455L, 3455L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(3455L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 255L);
      range0.intersection(range2);
      range1.forEach(consumer0);
      long long0 = 0L;
      Range.of(0L);
      range2.getBegin();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("$Rr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.$Rr
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.102810808027111
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(1057L);
      long long0 = (-43L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 1057L, 1057L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1362L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.640929525339774
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.ofLength(1057L);
      Range.ofLength(9223372036854775807L);
      Range range0 = Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(1057L, 9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-128L));
      Range.Builder range_Builder2 = range_Builder1.contractBegin(716L);
      Range range1 = range_Builder1.build();
      range0.getLength();
      range0.complement(range1);
      range_Builder2.copy();
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.4410279561534085
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1057L, 1057L);
      Range range1 = Range.of(1057L);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 1057L, 1057L);
      Long long0 = new Long((-1335L));
      Long.divideUnsigned((-4122L), (-43L));
      Long.compareUnsigned(0L, (-1970L));
      Long.getLong("", long0);
      Range.of(range_CoordinateSystem0, (-1335L), 1057L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, (-1L), 246L);
      range1.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.305690248803824
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1057L, 1057L);
      Range range1 = Range.of(1057L);
      range1.intersection(range0);
      long long0 = (-43L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 1057L, 1057L);
      Range range3 = Range.of(range_CoordinateSystem0, (-43L), (-43L));
      Long long1 = new Long((-1335L));
      long long2 = (-4122L);
      Long.divideUnsigned((-4122L), (-43L));
      range2.intersection(range3);
      // Undeclared exception!
      try { 
        range2.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.547300187890762
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(255L);
      Range range0 = range_Builder0.build();
      long long0 = range0.getLength();
      //  // Unstable assertion: assertEquals(0L, long0);
      
      Range range1 = Range.of((-1089L));
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      range_Builder1.copy();
      Range.of((-1089L));
      Range range2 = Range.of(4294967295L);
      Range.ofLength(4294967295L);
      range2.intersection(range0);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      //  // Unstable assertion: assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.436146486512663
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1057L);
      range0.toString(range_CoordinateSystem0);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(32767L, 32767L);
      range0.toString();
      Range range2 = Range.of(0L, 2506L);
      range2.toString();
      range0.startsBefore(range2);
      range0.isSubRangeOf(range2);
      range0.endsBefore(range0);
      range0.toString();
      range0.intersects(range1);
      range0.toString();
      range1.toString();
      Range.of(1041L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-427L), (-1L));
      Range.Builder range_Builder1 = range_Builder0.shift((-9223372036854775808L));
      range_Builder1.expandEnd(3662L);
      Range.parseRange("[ 0 .. 1057 ]/SB");
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854772148 would make range [9223372036854775381 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.418292789786298
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.ofLength(27L);
      List<Range> list0 = range0.split(27L);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 27L, 27L);
      range1.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.ofLength(3398L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1L, (-5L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.54738294600759
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(757L);
      Range range1 = Range.ofLength(1191L);
      Range range2 = Range.of(2801L);
      Range range3 = Range.of(1024L);
      List<Range> list0 = range3.complement(range2);
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range1.complementFrom(list1);
      range2.complementFrom(list2);
      range0.getLength();
      range0.split(1L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.3775198497877357
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = 3450L;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long1 = 0L;
      long long2 = 255L;
      Range range0 = Range.of(0L, 3450L);
      range0.split(3450L);
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 255L);
      long long3 = 34L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 3450L, 34L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.4016755911412266
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(1057L, 1057L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.of(1346L, 1346L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 128L, 4294968058L);
      Range.ofLength(1346L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("_B7KY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem._B7KY
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.6558235873577165
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(65535L);
      Range range2 = Range.of((-32768L));
      range2.split(3241L);
      Range.Builder range_Builder0 = new Range.Builder(1046L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1046L);
      Range range3 = Range.of(65535L);
      range_Builder1.expandBegin(65535L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getLength();
      range3.complement(range1);
      range_Builder1.copy();
      Range.of(65535L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2391L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.4151643486179784
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(1057L);
      Range range1 = Range.of(1057L);
      Range range2 = range1.intersection(range0);
      Range.ofLength(1057L);
      Range range3 = Range.of(1057L);
      Range.of(1046L);
      Range.Builder range_Builder0 = new Range.Builder(2076L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1057L);
      Range range4 = range_Builder0.build();
      range1.getLength();
      List<Range> list0 = range2.complement(range3);
      range_Builder1.copy();
      Range.of(2076L);
      Range.of(1046L);
      range4.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.ofLength((-579L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.302411587842056
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Long long0 = new Long(28L);
      Object object0 = new Object();
      Range range0 = Range.of((-128L));
      Range.Comparators.values();
      Range range1 = Range.of((-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.isEmpty());
      
      range1.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.8647385121905677
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(4134L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.8314802400679735
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2L, long0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.4725216474366247
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.of(range_CoordinateSystem0, (-2147483648L), 2147483647L);
      range1.toString();
      Range.of((-6177L), 2506L);
      range1.startsBefore(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("[ 2147483647 .. 2147483646 ]/0B", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.2428333685034016
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.of((-2147483648L), (-2147483648L));
      long long0 = new Long((-2147483648L));
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), 0L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.4062720836029823
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1057L;
      Range range0 = Range.ofLength(1057L);
      Range range1 = Range.of(1057L, 1057L);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 1057L, 1057L);
      Range range3 = Range.of(1057L, 1057L);
      long long1 = (-1335L);
      Long long2 = new Long((-1335L));
      long long3 = new Long(1057L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range3.isEmpty();
      range_CoordinateSystem0.toString();
      range2.endsBefore(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(1057L, (-4122L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.7100747670814207
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(65535L);
      Range.ofLength(4524L);
      Range range2 = Range.of(1046L);
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1057L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      List<Range> list0 = range0.complement(range2);
      assertEquals(2, list0.size());
      
      range1.iterator();
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range range3 = Range.of(1L);
      assertFalse(range3.isEmpty());
      
      range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder1.contractBegin(1022L);
      Range range4 = range1.intersection(range0);
      assertSame(range4, range1);
      assertNotSame(range4, range2);
      
      Range range5 = Range.of((-1403L));
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.4062720836029823
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1057L);
      Range range1 = Range.of(1057L);
      Range range2 = range1.intersection(range0);
      Range.of(1057L);
      Long long0 = new Long(4294967295L);
      Long.divideUnsigned(4294967295L, 1057L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.endsBefore(range0);
      range1.toString();
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1057L, 1057L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(1057L, 4063356L);
      long long1 = 8L;
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder4 = range_Builder0.expandEnd(8L);
      // Undeclared exception!
      try { 
        range_Builder4.contractBegin(1057L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.5356774678290086
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of((-765L), (-765L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals("");
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(3327L);
      Range range1 = Range.of((-765L));
      //  // Unstable assertion: assertSame(range1, range0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.12862094998063
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.ofLength(7841L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.ofLength(4014L);
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 4014L);
      Range.ofLength(7841L);
      Range.ofLength(2918L);
      Range range3 = range1.intersection(range2);
      assertFalse(range3.isEmpty());
      assertSame(range3, range1);
      assertNotSame(range3, range0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.6184779376639438
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1057L, 1057L);
      Range range1 = Range.of(1057L);
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertNotSame(range2, range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 1057L, 1057L);
      Range.of(range_CoordinateSystem0, (-43L), (-43L));
      Long long0 = new Long((-1335L));
      Long.divideUnsigned((-4122L), (-43L));
      Long.compareUnsigned((-3819L), (-1970L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, 255L, 2163L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range range4 = Range.of(range_CoordinateSystem3, (-1970L), (long) (-1));
      Range range5 = range0.intersection(range4);
      //  // Unstable assertion: assertNotSame(range0, range1);
      //  // Unstable assertion: assertTrue(range5.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Range.CoordinateSystem.values();
      Range range6 = Range.of(range_CoordinateSystem0, 255L, 3017L);
      //  // Unstable assertion: assertFalse(range6.isEmpty());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.831480240067973
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(127L);
      // Undeclared exception!
      try { 
        range0.split((-2202L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.3332424119187376
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(1057L, 1057L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long(1057L);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.of(1346L, 1346L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 128L, 4294968058L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294968058L, 128L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-1L));
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.5306029021144254
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(65535L);
      Range range2 = Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(1046L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1046L);
      Range.of(65535L);
      range_Builder1.expandBegin(65535L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range3 = Range.of((-32768L));
      Range.Builder range_Builder2 = new Range.Builder(65535L);
      range_Builder0.build();
      range_Builder0.copy();
      Range.Builder range_Builder3 = new Range.Builder(127L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      Range range4 = Range.of(1046L);
      assertNotSame(range4, range1);
      
      Range range5 = range2.intersection(range3);
      assertSame(range5, range2);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.6901496096763973
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.of(65535L);
      Range.of(1046L);
      Range.Builder range_Builder0 = new Range.Builder(65535L, 9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(1057L);
      range_Builder1.contractBegin((-128L));
      Range range1 = Range.of((-128L));
      Range.Builder range_Builder2 = new Range.Builder(range1);
      range_Builder2.expandBegin((-1016L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-2319L));
      Range.Builder range_Builder3 = new Range.Builder(9223372036854775807L);
      Range range2 = range_Builder0.build();
      assertFalse(range2.equals((Object)range0));
      
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      range_Builder4.copy();
      Range.Builder range_Builder5 = new Range.Builder(32767L);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder5);
      Range.of((-128L));
      Range range3 = range0.intersection(range1);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.2773363635869
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2918L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.573035578671474
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = 1057L;
      Range range0 = Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1057L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder0.copy();
      range_Builder2.shift(2147483646L);
      range_Builder3.expandEnd((-3173L));
      range_Builder1.contractBegin(1657L);
      Range range1 = range_Builder1.build();
      Long long1 = new Long(1657L);
      Range.ofLength(1587L);
      range0.complement(range1);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.3114234446919735
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem.valueOf("RESIDUE_BASED");
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder0.expandBegin(1L);
      Range.Builder range_Builder3 = range_Builder0.contractBegin(1L);
      range_Builder3.expandBegin(1L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder1);
      // Undeclared exception!
      try { 
        Range.parseRange("RESIDUE_BASED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse RESIDUE_BASED into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("m^0]^$sq0y+#Y75nctn", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse m^0]^$sq0y+#Y75nctn into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.9216576564967065
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(1046L);
      range_Builder0.contractBegin(1046L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.104074021530186
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.of(1046L);
      Range.Builder range_Builder0 = new Range.Builder(1046L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1046L);
      Range.Builder range_Builder2 = new Range.Builder(1046L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      assertEquals("SB", range_CoordinateSystem0.getAbbreviatedName());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.446956808874632
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-765L), (-765L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1L);
      range1.startsBefore(range0);
      Range range2 = Range.ofLength(0L);
      Range range3 = null;
      // Undeclared exception!
      try { 
        range2.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.1096996737706273
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.startsBefore(range1);
      range0.isSubRangeOf(range0);
      range1.endsBefore(range1);
      range0.startsBefore(range0);
      long long0 = 9223372036854775807L;
      Range.of(2147483647L);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.R
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.4245290302808593
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = 255L;
      Range.ofLength(255L);
      Range range0 = Range.of(255L);
      long long1 = 1046L;
      long long2 = (-32768L);
      Range.of((-4174L));
      Range.Builder range_Builder0 = new Range.Builder(5054L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-4174L));
      Range.of(1046L);
      Range.Builder range_Builder2 = new Range.Builder(4294967294L);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range_Builder0.build();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder5 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder4.contractBegin(9223372036854774752L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.1690299195060385
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 4294967295L, 4294967295L);
      long long0 = 2147483647L;
      Range.of(range_CoordinateSystem0, 255L, 2147483647L);
      Range.of(539L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("W2@ssO8}|S'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.W2@ssO8}|S'
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.1064271929195773
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long((-9223372036854775784L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 0L;
      Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.of(range_CoordinateSystem0, (-9223372036854775784L), (-252L));
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("0!F'0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.0!F'0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.9042160517045548
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-9L), 254L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("'bWSvGGW/1?HW_@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.'bWSvGGW/1?HW_@
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.3271745891760456
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = 2147483647L;
      Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 2147483647L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.8892064343995214
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Long long0 = new Long(645L);
      Object object0 = new Object();
      Range range0 = Range.of(1048L);
      Range range1 = Range.of(129L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.060287092608695
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Long long0 = new Long((-8L));
      Long long1 = new Long((-8L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-8L), (-8L));
      Range range1 = Range.of((-8L));
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.0046103094784424
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Long long0 = new Long(28L);
      Object object0 = new Object();
      Range.of(28L);
      Range range0 = Range.of((-554L));
      assertFalse(range0.isEmpty());
  }
}
