/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 01:38:21 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=4.063167980387097
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1L), 230L);
      Long long0 = new Long(1336L);
      range1.equals(long0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      linkedList0.add(range2);
      Range range3 = Range.of(range_CoordinateSystem1, (-3915L), 230L);
      range3.toString();
      range2.equals(range3);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.copy();
      range0.isSubRangeOf(range1);
      Range range4 = range3.asRange();
      range3.isSubRangeOf(range0);
      range1.isSubRangeOf(range2);
      range1.complement(range4);
      Range.of((-1823L));
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.830963358560973
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range.of((-2086L));
      Range.ofLength(9223372036854775807L);
      range0.spliterator();
      Long.min((-2086L), 9223372034707292161L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-29L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-2437L), (-2437L));
      Range range1 = Range.of(9223372036854775807L);
      range1.equals((Object) null);
      long long1 = (-1524L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-37L), (-1524L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5792456275764026
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.ofLength(0L);
      range1.getEnd();
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 0 .. 1 ]/SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 0 .. 1 ]/SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.450484430713592
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of((-2147483632L));
      long long0 = (-1311L);
      Long long1 = new Long((-1311L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Long.sum(0L, (-2147483632L));
      long long2 = 675L;
      range0.equals((Object) null);
      long long3 = (-486L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 93L, (-486L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=4.285861511991544
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of((-2086L));
      Range range2 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.intersects(range2);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range range3 = Range.of(9223372034707292161L);
      range0.isSubRangeOf(range2);
      List<Range> list0 = range2.complement(range2);
      range0.isEmpty();
      range0.toString();
      range0.intersects(range1);
      String string0 = range2.toString();
      //  // Unstable assertion: assertEquals("[ 0 .. 9223372036854775806 ]/0B", string0);
      
      String string1 = range1.toString();
      //  // Unstable assertion: assertEquals("[ -2086 .. -2086 ]/0B", string1);
      
      Range range4 = Range.of((-32768L));
      range4.startsBefore(range2);
      Long long0 = new Long(9223372034707292161L);
      Range range5 = Range.of((-4886L), 2147483647L);
      range4.complement(range0);
      Range range6 = Range.of(2147483647L);
      range2.intersects(range4);
      range5.isSubRangeOf(range4);
      List<Range> list1 = range2.complement(range3);
      //  // Unstable assertion: assertTrue(list1.contains(range2));
      
      Range range7 = Range.of(2147483647L);
      range6.complementFrom(list0);
      //  // Unstable assertion: assertEquals(0, list0.size());
      
      Range range8 = range7.asRange();
      //  // Unstable assertion: assertFalse(range8.isEmpty());
      
      String string2 = range5.toString();
      //  // Unstable assertion: assertEquals("[ -4886 .. 2147483647 ]/0B", string2);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list2 = range5.complement(range2);
      //  // Unstable assertion: assertEquals(1, list2.size());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.9364316600503706
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), (-5L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      range0.equals((Object) null);
      long long0 = (-1168L);
      Long long1 = new Long((-1168L));
      Object object1 = new Object();
      Range range1 = Range.of(range_CoordinateSystem0, (-4170L), 127L);
      Range range2 = Range.of(688L);
      Range range3 = range1.intersection(range2);
      range3.complement(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("&3MFak%_8l2]d+T-P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.&3MFak%_8l2]d+T-P
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=4.1898373572004335
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.ofLength(3L);
      List<Range> list0 = range0.split(3L);
      List<Range> list1 = range0.complementFrom(list0);
      Range range1 = Range.ofLength(3L);
      Range range2 = Range.ofLength(360L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range2.isSubRangeOf(range1);
      range2.endsBefore(range1);
      range1.toString();
      range0.startsBefore(range2);
      range1.toString();
      Range range3 = Range.ofLength(3L);
      range2.getLength();
      Range range4 = Range.of(360L, 4294967294L);
      Range range5 = Range.of(4294967294L, 4294967294L);
      range5.complement(range1);
      Range.parseRange("[ 0 .. 2 ]/0B");
      range1.intersects(range3);
      range3.spliterator();
      range1.complement(range5);
      Range.of(3L);
      range1.complementFrom(list1);
      range4.equals((Object) null);
      range3.complement(range1);
      Range.of(360L);
      Range.of(360L);
      long long0 = (-2135L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2135L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.792363193543783
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = 2147483647L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.of(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range1.complement(range0);
      range0.equals(range_CoordinateSystem0);
      Range.of(range_CoordinateSystem0, 1L, 1L);
      range1.intersection(range0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2147483647L, (-549L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.180487497438595
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.ofLength(3L);
      Range range1 = Range.of(3L, 3L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      boolean boolean0 = range2.equals(range1);
      Range range3 = Range.of((-4396L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = range3.startsBefore(range1);
      range_Builder1.expandEnd(2094L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean2 = range3.equals(object1);
      assertFalse(boolean2 == boolean1);
      
      List<Range> list0 = range2.complement(range1);
      Range.of(3L);
      Range range4 = range1.intersection(range0);
      boolean boolean3 = range4.isSubRangeOf(range1);
      assertFalse(boolean3 == boolean0);
      
      Long long0 = Long.getLong((String) null, 9223372036854775807L);
      range2.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range5 = Range.of(range_CoordinateSystem0, (-1202L), 1L);
      List<Range> list1 = range1.complement(range5);
      assertFalse(list1.isEmpty());
      
      Range.of(2094L);
      List<Range> list2 = range1.complementFrom(list0);
      assertTrue(list2.contains(range4));
      
      Range range6 = range3.asRange();
      assertFalse(range6.isEmpty());
      
      range2.complementFrom(list0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=4.063824517981415
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = 2147483647L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      long long1 = 1L;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      range1.complement(range0);
      Range range2 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range2.complement(range0);
      range0.equals(range_CoordinateSystem0);
      Range range3 = range2.intersection(range1);
      Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = 4294967295L;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem1, 1L, 4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(range3);
      Range.Builder range_Builder3 = range_Builder2.copy();
      range_Builder0.expandEnd(2147483647L);
      long long3 = 666L;
      range_Builder3.shift(1401L);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(range_CoordinateSystem0, 666L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=4.003634137223629
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = 1398L;
      Range range0 = Range.ofLength(1398L);
      long long1 = 1209L;
      List<Range> list0 = range0.split(1209L);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.of(255L, (-1948L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.7271297354130954
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of((-4225L), (-4225L));
      range0.spliterator();
      long long0 = 323L;
      Long long1 = new Long(323L);
      range0.intersects(range0);
      Range range1 = Range.of(9223372036854774758L);
      Range.of(9223372036854774758L);
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4225 would make range [9223372036854774758 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-1L);
      long long1 = (-676L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-1L), (-676L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.265789928066268
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 3455L, 3455L);
      Range.Builder range_Builder0 = new Range.Builder(3455L, 3455L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long0 = (-544L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((Range.CoordinateSystem) null, (-544L), 3455L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.9488775815508874
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 131L;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), 131L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(131L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = 4560L;
      Range.of(range_CoordinateSystem1, (-5L), 4560L);
      range2.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      long long3 = 9223372036854775807L;
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem4, (-5L), 4560L);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-17L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -17 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.838209140341357
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.ofLength(3L);
      List<Range> list0 = range0.split(3L);
      range0.complementFrom(list0);
      Range range1 = Range.of(3L, 3L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 385L, 2147483647L);
      range2.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2147483647L, 3L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.312778700525052
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Long long0 = new Long(1452L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 2544L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 284L, 9223372036854775807L);
      range0.equals(range_CoordinateSystem0);
      long long2 = 4294967295L;
      Long long3 = new Long(4294967295L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2658098229970447
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Long long0 = new Long(1452L);
      Long.min((-1335L), 1452L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 284L, 9223372036854775807L);
      range0.equals(range_CoordinateSystem0);
      long long1 = 93L;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854775807L, 2544L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3753446567056598
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), (-5L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = 9223372036854775807L;
      Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-5L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4200723410773386
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.608572247974511
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-5L), 127L);
      long long0 = 1057L;
      long long1 = 9223372036854775807L;
      Range.ofLength(9223372036854775807L);
      Range.of(range_CoordinateSystem0, (-1663L), 32767L);
      long long2 = 9223372036854775681L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.ofLength((-5L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=4.004805295902999
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1L), 230L);
      Long long0 = new Long(1336L);
      range1.equals(long0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-3915L), (-469L));
      range3.toString();
      range2.equals(range3);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.copy();
      range0.isSubRangeOf(range1);
      range3.asRange();
      range3.isSubRangeOf(range0);
      Range range4 = Range.ofLength(1336L);
      range4.intersects(range3);
      range4.intersection(range0);
      range2.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.774575863709936
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = 2147483647L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-786L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(range_CoordinateSystem0, (-3243L), 1580L);
      range0.complement(range1);
      range0.equals(range1);
      String string0 = "BB&i5$X2p@*";
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1L, (-786L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.8958494403414283
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(1057L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 230L, 1057L);
      Long long0 = new Long((-469L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, 1L, 2365L);
      range2.equals(range0);
      Range range3 = Range.of(range_CoordinateSystem1, (-1L), 0L);
      range1.intersection(range3);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Range range4 = range2.intersection(range3);
      range4.complement(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("s<U(kapBg_N3[ F?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.s<U(kapBg_N3[ F?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.6147023754188763
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-128L);
      Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4044L, 4044L);
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      long long1 = (-31L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.439933762811385
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      long long0 = (-1311L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Long.sum(0L, (-2147483648L));
      long long1 = 675L;
      long long2 = (-486L);
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 93L, (-486L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.808303290454969
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = 127L;
      Range range0 = Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.ofLength(0L);
      range2.equals(range3);
      // Undeclared exception!
      try { 
        Range.ofLength((-2084L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=4.144627179165502
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), 127L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.intersects(range1);
      Range range2 = Range.of(65535L);
      range0.isSubRangeOf(range1);
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      range_Builder0.contractBegin(1057L);
      Range range3 = range_Builder0.build();
      range2.getLength();
      range1.complement(range3);
      Range.of((-4123L));
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      // Undeclared exception!
      try { 
        range1.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.444840809021155
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), 127L);
      Long long0 = new Long(255L);
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1042L, 1042L);
      Range.Builder range_Builder2 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.parseRange("F:pdP})x1Zm13", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse F:pdP})x1Zm13 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.756821933863067
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-915L), 2147483647L);
      Range.of(range_CoordinateSystem0, 1L, 1L);
      Range.of(192L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem2, 4294967295L, (-306L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.5603588599657883
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, 0L, 4294967295L);
      Range.of(range_CoordinateSystem0, (-707L), 0L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem3);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("length can not be less than 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.length can not be less than 0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.868705041574118
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-5L);
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), 131L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(131L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = 4560L;
      Range.of(range_CoordinateSystem1, (-5L), 4560L);
      range1.forEach(consumer0);
      long long3 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-2226L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.289520432159408
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), (-5L));
      long long0 = 9223372036854775807L;
      range0.equals(range_CoordinateSystem0);
      Long long1 = new Long(230L);
      Object object0 = new Object();
      long long2 = (-916L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 19L, (-171L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=4.017405178587806
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Long long0 = new Long(9223372036854774129L);
      Object object0 = new Object();
      long long1 = (-916L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-128L), 1L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, 1L, 0L);
      range1.intersection(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.60712042605272
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      long long0 = (-31L);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder3.build();
      range_Builder2.contractBegin((-128L));
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.7605283134443557
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 1L, 9223372034707292162L);
      Range.of((-325L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem2, 4044L, 2185L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.768494171594523
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-5L), (-5L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.equals(range_CoordinateSystem0);
      range0.intersection(range0);
      Range.of((-325L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem1, 4044L, 2185L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=4.050857973774844
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of((-2086L));
      Range range2 = Range.ofLength(9223372036854775807L);
      range0.intersects(range2);
      Range range3 = Range.of(9223372034707292161L);
      range0.isSubRangeOf(range2);
      range2.complement(range2);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      range2.complement(range1);
      Range range4 = Range.of((-2452L), (-1L));
      range4.intersection(range3);
      range2.complement(range3);
      Range.Builder range_Builder2 = new Range.Builder(370L);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.618631486611457
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.ofLength(3455L);
      String string0 = null;
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3455L, 3455L);
      range0.intersection(range1);
      long long0 = 840L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, 840L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.880157923846018
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 2802L, 2802L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 2802L, 2802L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem3);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 65535L;
      Range.of(range_CoordinateSystem4, (-2626L), 65535L);
      Range.of(255L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-1L), 0L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("cluster distance can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.cluster distance can not be negative
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=4.208018939285798
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(3455L);
      Range range1 = Range.of((-3975L));
      range0.complement(range1);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 3455L, 3455L);
      range0.intersection(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long(255L);
      range3.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem1.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder1.copy();
      range_Builder2.expandEnd((-1172L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, (-1172L), 3455L);
      long long1 = 9223372036854775681L;
      Range.of(255L);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(range_CoordinateSystem3, 255L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=4.160334174277895
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of((-2086L));
      Range range2 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.intersects(range2);
      assertTrue(boolean0);
      
      Range range3 = Range.of(9223372034707292161L);
      range0.isSubRangeOf(range2);
      List<Range> list0 = range2.complement(range2);
      assertEquals(0, list0.size());
      
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range4 = range_Builder0.build();
      range4.startsBefore(range3);
      range_Builder0.expandEnd(9223372036854775807L);
      Object object0 = new Object();
      range4.equals(object0);
      List<Range> list1 = range1.complement(range2);
      assertTrue(list1.contains(range1));
      
      Range range5 = Range.of((-3832L));
      Range.of((-3832L));
      range1.intersection(range3);
      Range range6 = Range.ofLength(127L);
      range6.isSubRangeOf(range2);
      range5.equals((Object) null);
      Range range7 = Range.of((-1L));
      assertFalse(range7.isEmpty());
      
      range0.asRange();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.50357262141774
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1022L, 1022L);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(65535L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.8148023189696896
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-128L), (-31L));
      Range.CoordinateSystem.values();
      Range.of((-32768L), (-505L));
      long long0 = (-574L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, (-84L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.380727541159777
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 8L, 230L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 8L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.489706533523888
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 230L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 0L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1608L;
      range_CoordinateSystem0.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=4.351682982195166
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1057L);
      range0.toString(range_CoordinateSystem0);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(32767L, 32767L);
      Range range2 = Range.of((-3L), 65531L);
      range0.startsBefore(range2);
      range0.isSubRangeOf(range2);
      range0.endsBefore(range0);
      range0.intersects(range1);
      range0.toString();
      range1.toString();
      Range range3 = Range.of(1049L);
      range3.startsBefore(range1);
      Long long0 = new Long(1049L);
      Range range4 = Range.of((-3L), 1049L);
      range4.intersects(range2);
      range0.complement(range4);
      Range.of((-3L));
      Range range5 = Range.of(0L);
      range2.intersects(range3);
      Range.parseRange("[ 32767 .. 32767 ]/0B", range_CoordinateSystem0);
      range3.isSubRangeOf(range3);
      List<Range> list0 = range1.complement(range5);
      Range.of(32767L);
      Range range6 = Range.ofLength(9223372036854775807L);
      range6.complementFrom(list0);
      Range range7 = range2.asRange();
      range7.toString();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=4.246274213358761
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.ofLength(3455L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3455L, 3455L);
      Range range2 = range0.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range3 = Range.of(3455L);
      Range.ofLength(9223372036854775807L);
      range1.intersects(range2);
      Range range4 = Range.of((-1275L));
      range4.complement(range2);
      List<Range> list0 = range4.split(2147483647L);
      Range range5 = Range.of((-1275L));
      range5.complementFrom(list0);
      range3.isSubRangeOf(range1);
      range5.complement(range2);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1275L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.4986644884181803
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), (-5L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range1.intersects(range0);
      long long0 = (-325L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-325L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -325 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, (-694L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -695 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.2920801934328736
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Long long0 = new Long(230L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-916L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, (-732L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -733 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.71666030023133
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-5L);
      Range range0 = Range.of((-5L), (-5L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long1 = 2544L;
      Range range1 = Range.of(range_CoordinateSystem0, 2544L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem1, 9223372036854775807L, (-5L));
      Range.Builder range_Builder3 = new Range.Builder(range1);
      range_Builder3.copy();
      range_Builder0.shift(65531L);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range_Builder4.build();
      range_Builder1.contractBegin(65531L);
      Range.Builder range_Builder5 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range_Builder5.contractBegin(3814L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=4.066218993478766
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(3455L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3455L, 3455L);
      range0.intersection(range1);
      range1.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(3455L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 3455L, 3455L);
      Range.Builder range_Builder4 = new Range.Builder(range_CoordinateSystem0, 3455L, 3455L);
      range_Builder4.expandEnd((-544L));
      range_Builder4.expandEnd(779L);
      Range.Builder range_Builder5 = range_Builder3.contractEnd((-4294967290L));
      range_Builder3.contractEnd(779L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder6 = new Range.Builder(range_CoordinateSystem1, (-544L), 17L);
      range_Builder6.copy();
      range_Builder5.build();
      Range.Builder range_Builder7 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder8 = new Range.Builder(range1);
      range_Builder3.expandBegin((-4294967290L));
      Range.Builder range_Builder9 = new Range.Builder(9223372036854773898L);
      range_Builder6.build();
      Range.Builder range_Builder10 = new Range.Builder(1851L);
      Range.Builder range_Builder11 = null;
      try {
        range_Builder11 = new Range.Builder(2147483647L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=4.190885097557675
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of((-2086L));
      long long0 = 9223372036854775807L;
      Range range2 = Range.ofLength(9223372036854775807L);
      range0.spliterator();
      range0.intersects(range2);
      Range range3 = Range.of(9223372034707292161L);
      range0.isSubRangeOf(range2);
      range2.complement(range2);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range4 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      range1.endsBefore(range2);
      range_Builder0.expandEnd(9223372036854775807L);
      Object object0 = new Object();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      range4.equals(object0);
      range4.complement(range0);
      Range.of(9223372034707292161L);
      range2.intersection(range3);
      range1.isSubRangeOf(range2);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder3.expandBegin((-2086L));
      Range.Builder range_Builder4 = new Range.Builder(range2);
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(range_Builder3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.8024185305769325
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), (-5L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long((-5L));
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-5L), 4560L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 9223372036854775807L, 1641L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.792660576520096
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), 127L);
      long long0 = 1057L;
      Range.ofLength(65535L);
      Range range1 = Range.of(range_CoordinateSystem0, 1057L, 1057L);
      range1.intersection(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 65535L, 583L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.243220592448142
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), (-5L));
      range0.equals(range_CoordinateSystem0);
      Long long0 = new Long(230L);
      Object object0 = new Object();
      long long1 = (-916L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-167L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.214702317496564
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Long long0 = new Long(1452L);
      Long.min((-1335L), 1452L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775768L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372032559808512L, (-1088L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.89364147463386
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.ofLength(3455L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3455L, 3455L);
      range0.intersection(range1);
      long long0 = range1.getLength();
      assertEquals(0L, long0);
      
      range1.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem1, 1L, 1L);
      range_Builder1.build();
      Range.Builder range_Builder3 = new Range.Builder(range1);
      range_Builder3.shift(1803L);
      Range.Builder range_Builder4 = new Range.Builder();
      Range range2 = range_Builder1.build();
      assertTrue(range2.isEmpty());
      
      Range range3 = range_Builder3.build();
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.8487805611385064
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(3455L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3455L, 3455L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(3455L, 3455L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 3455L, 3455L);
      Range.Builder range_Builder4 = range_Builder2.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_Builder1.expandEnd((-544L));
      Range.Builder range_Builder5 = new Range.Builder(range_CoordinateSystem1, (-544L), (-544L));
      range_Builder0.expandBegin((-1770L));
      Range.Builder range_Builder6 = new Range.Builder(range2);
      range_Builder4.expandBegin((-1770L));
      Range.Builder range_Builder7 = null;
      try {
        range_Builder7 = new Range.Builder((-1590L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.2684214914498164
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(4294967295L, 4294967295L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.9765717303814108
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(3L);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertSame(range2, range0);
      
      Long long0 = new Long(3L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.of((-1L));
      Range range3 = range_Builder1.build();
      //  // Unstable assertion: assertTrue(range3.isEmpty());
      
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(range0);
      Range.Builder range_Builder5 = range_Builder2.shift(3639L);
      Range.Builder range_Builder6 = new Range.Builder();
      Range range4 = range_Builder5.build();
      //  // Unstable assertion: assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=4.1639987463872625
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of((-2086L));
      Range range2 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.intersects(range2);
      Range range3 = Range.of(9223372034707292161L);
      range0.isSubRangeOf(range2);
      List<Range> list0 = range2.complement(range2);
      assertTrue(list0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range4 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      boolean boolean1 = range4.startsBefore(range3);
      assertTrue(boolean1 == boolean0);
      
      range_Builder0.expandEnd(9223372036854775807L);
      Object object0 = new Object();
      range4.equals(object0);
      range2.complement(range1);
      Range range5 = Range.of((-2086L));
      Range range6 = range5.intersection(range3);
      range3.isSubRangeOf(range0);
      range4.equals(range3);
      List<Range> list1 = range0.complement(range1);
      Range.of(127L);
      List<Range> list2 = range6.split(9223372034707292161L);
      range5.complementFrom(list2);
      range6.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list3 = range3.complementFrom(linkedList0);
      assertFalse(list3.equals((Object)list1));
      assertFalse(list3.equals((Object)list2));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.5443401007973625
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = (-4123L);
      Range range0 = Range.ofLength(1039L);
      Range.Builder range_Builder0 = new Range.Builder(1039L, 1039L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      range0.getLength();
      Range.Builder range_Builder2 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.898748842667964
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(3L);
      List<Range> list0 = range0.split(3L);
      range0.complementFrom(list0);
      Range range1 = Range.of(3L, 3L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 385L;
      Range.ofLength(385L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      long long1 = (-815L);
      range_Builder1.expandBegin((-815L));
      range_Builder0.copy();
      long long2 = (-2378L);
      range_Builder1.expandEnd((-2378L));
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.577766355287399
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.of((-2147483648L));
      Long long0 = new Long((-1311L));
      Long.sum(0L, (-2147483648L));
      Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-1020L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 838L, (-1311L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.3190462245423604
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2802L;
      Range.of(range_CoordinateSystem2, 2802L, 2802L);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 2802L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.5838860896859583
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-5L);
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), 127L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.intersects(range1);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 9223372036854775807L, 9223372036854775807L);
      long long1 = 1057L;
      long long2 = (-952L);
      range2.getBegin();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1057L, (-952L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.387044812969802
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 230L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 0L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = 3L;
      Range range0 = Range.ofLength(3L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.470334150816219
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      long long0 = 2802L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-4229L), 2802L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, 0L, 255L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem3);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("C\"2X8/nn'*)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.C\"2X8/nn'*)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.9515103632650046
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4044L, 4044L);
      Range range1 = range_Builder0.build();
      range_Builder0.copy();
      range0.intersection(range1);
      Range.of((-128L));
      Range range2 = Range.of(3639L);
      range2.intersection(range1);
      range2.intersection(range1);
      long long0 = (-174L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range_Builder1.contractEnd((-174L));
      range0.forEach(consumer0);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem1, 3639L, 1877L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=4.017524854574354
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1L), 230L);
      Range range3 = range2.intersection(range0);
      Long long0 = new Long((-719L));
      boolean boolean0 = range3.equals(range_Builder0);
      assertFalse(range3.isEmpty());
      assertFalse(boolean0);
      
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.copy();
      Range range4 = Range.of(0L, 230L);
      range_Builder1.copy();
      Range.of((-1L));
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      range_Builder0.shift(494L);
      assertSame(range0, range1);
      assertNotSame(range0, range4);
      
      Range.Builder range_Builder5 = new Range.Builder();
      Range range5 = range_Builder5.build();
      assertTrue(range5.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=4.084110974765891
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.ofLength(1039L);
      range0.spliterator();
      Range range1 = Range.ofLength(65535L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1039L);
      range_Builder1.contractEnd(1756L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.build();
      Long long0 = new Long(1039L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = Range.of((-2358L), 230L);
      Range range3 = range0.intersection(range2);
      assertFalse(range3.isEmpty());
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range1));
      assertEquals(1, list0.size());
      
      Range.Builder range_Builder3 = new Range.Builder(65535L);
      Range.CoordinateSystem.values();
      Range range4 = Range.ofLength(193L);
      assertNotSame(range4, range0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=4.134745356355851
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of((-2086L));
      Range range2 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.intersects(range2);
      assertTrue(boolean0);
      
      Range range3 = Range.of(9223372034707292161L);
      range0.isSubRangeOf(range2);
      List<Range> list0 = range2.complement(range2);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range4 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      range4.startsBefore(range3);
      range_Builder0.expandEnd(9223372036854775807L);
      Object object0 = new Object();
      range4.equals(object0);
      List<Range> list1 = range2.complement(range1);
      Range range5 = Range.of((-2086L));
      range5.intersection(range3);
      range3.isSubRangeOf(range0);
      boolean boolean1 = range4.equals(range3);
      assertFalse(boolean1);
      
      range0.complement(range1);
      Range range6 = Range.of(127L);
      List<Range> list2 = range0.complementFrom(list1);
      assertFalse(range1.isEmpty());
      assertEquals(2, list2.size());
      
      Range range7 = range6.asRange();
      range7.complementFrom(list0);
      assertEquals(0, list0.size());
      assertFalse(range6.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=4.330499984680778
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1057L);
      range0.toString(range_CoordinateSystem0);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(32767L, 32767L);
      range0.toString();
      Range range2 = Range.of((-37L), 65531L);
      range0.startsBefore(range2);
      boolean boolean0 = range0.isSubRangeOf(range2);
      boolean boolean1 = range0.endsBefore(range0);
      assertFalse(boolean1 == boolean0);
      
      range0.toString();
      boolean boolean2 = range0.intersects(range1);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 1056 ]/0B", string0);
      
      range1.toString();
      Range range3 = Range.of(1049L);
      boolean boolean3 = range3.startsBefore(range1);
      assertTrue(boolean3);
      
      Long long0 = new Long(1049L);
      Range range4 = Range.of((-37L), 1049L);
      boolean boolean4 = range4.intersects(range2);
      assertFalse(boolean4 == boolean2);
      
      List<Range> list0 = new LinkedList<Range>();
      Range.of((-37L));
      Range range5 = Range.of(0L);
      range2.intersects(range3);
      range3.isSubRangeOf(range3);
      List<Range> list1 = range1.complement(range5);
      Range.of(32767L);
      Range range6 = Range.ofLength(9223372036854775807L);
      List<Range> list2 = range6.complementFrom(list1);
      assertFalse(list2.equals((Object)list1));
      assertEquals(0, list2.size());
      
      Range range7 = range2.asRange();
      String string1 = range7.toString();
      assertEquals("[ -37 .. 65531 ]/0B", string1);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range8 = Range.of(9223372036854775807L);
      List<Range> list3 = range0.complement(range8);
      assertTrue(list3.contains(range0));
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.562260808279929
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.ofLength(3L);
      Range.ofLength(3L);
      Range range0 = Range.ofLength(360L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-1L), 0L);
      range_Builder0.expandEnd(32767L);
      long long1 = 9223372034707292161L;
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.6997398471999534
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder3.build();
      range_Builder2.contractBegin((-128L));
      Range.Builder range_Builder4 = new Range.Builder(range0);
      Range.Builder range_Builder5 = range_Builder3.contractBegin((-9223372036854765795L));
      range_Builder3.expandBegin(2L);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder7 = new Range.Builder(range_Builder3);
      range_Builder0.expandBegin((-1L));
      Range.Builder range_Builder8 = new Range.Builder(2L);
      Range range1 = range_Builder5.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.3951251426136455
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = 0L;
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 230L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 230L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 255L, 2543L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.980534621327022
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(385L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range2 = Range.of(385L);
      range2.getLength();
      Range range3 = Range.of(385L, 2147483647L);
      range1.intersection(range3);
      range3.getLength();
      Range range4 = Range.ofLength(1L);
      range0.intersection(range4);
      Range range5 = Range.of(2147483263L);
      assertFalse(range5.equals((Object)range4));
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.1968824804758986
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = 1039L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1039L, 1039L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.711019125637687
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(3455L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3455L, 3455L);
      Range range2 = range0.intersection(range1);
      range1.equals(range2);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(3455L, (-1140L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.8869582350108143
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-3933L);
      Range range0 = Range.of((-3933L));
      Range range1 = Range.of((-3933L));
      range0.complement(range1);
      Range range2 = Range.of((-3933L));
      range1.equals(range0);
      range2.endsBefore(range0);
      range2.toString();
      range2.intersects(range2);
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("number of entries must be >=0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse number of entries must be >=0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.781672104633019
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of((-544L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 675L, 675L);
      range0.intersection(range1);
      range0.equals(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.copy();
      range_Builder1.copy();
      long long0 = 9223372034707292161L;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem0, (-2147483648L), 9223372034707292161L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.7566502732495883
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4044L, 4044L);
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-31L), 3639L);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.Builder range_Builder3 = range_Builder1.shift((-31L));
      range_Builder3.build();
      Range.Builder range_Builder4 = range_Builder2.contractBegin((-128L));
      range_Builder4.expandBegin(1550L);
      Range.Builder range_Builder5 = new Range.Builder(range0);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder3);
      range_Builder5.expandBegin(911L);
      Range.Builder range_Builder7 = new Range.Builder(1L);
      Range range1 = range_Builder1.build();
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.563812396729307
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.of(3455L);
      Range.Builder range_Builder0 = new Range.Builder(3455L, 3455L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range.Builder range_Builder3 = range_Builder2.copy();
      range_Builder1.expandEnd((-544L));
      long long0 = (-1770L);
      range_Builder0.expandBegin((-1770L));
      Range.Builder range_Builder4 = range_Builder3.expandBegin((-1770L));
      // Undeclared exception!
      try { 
        range_Builder4.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.650891844035851
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder3.build();
      range_Builder2.contractBegin((-128L));
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range_Builder3.contractBegin((-9223372036854765795L));
      range_Builder3.expandBegin((-31L));
      Range.Builder range_Builder5 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder3);
      long long0 = (-1L);
      Range.Builder range_Builder7 = null;
      try {
        range_Builder7 = new Range.Builder((-31L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.444804331278198
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L));
      long long1 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Long.sum(0L, (-2147483648L));
      long long2 = 675L;
      range0.intersects(range0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 93L, (-486L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.9141292394472074
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(385L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.ofLength(385L);
      range1.intersects(range0);
      Range range2 = Range.of(900L);
      range0.isSubRangeOf(range2);
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(20L);
      range_Builder1.build();
      range0.getLength();
      range0.complement(range2);
      Range.of(685L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder0.copy();
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, 2009L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.618911314364203
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(2986L);
      Long long0 = new Long((-1335L));
      long long1 = 229L;
      Long.min(1L, 229L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = (-29L);
      Range.of(range_CoordinateSystem0, (-29L), 2544L);
      range0.equals(long0);
      long long3 = (-455L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 93L, (-455L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.75655774982394
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1964L), 0L);
      Range range1 = Range.of((-1964L));
      range1.intersection(range0);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.expandBegin((-1964L));
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(range_Builder2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.1786334995603744
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-5L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=4.1512312004937595
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of((-2086L));
      Range range2 = Range.ofLength(9223372036854775807L);
      range0.intersects(range2);
      Range range3 = Range.of(9223372034707292161L);
      range0.isSubRangeOf(range2);
      range2.complement(range2);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range4 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      range4.startsBefore(range3);
      range_Builder0.expandEnd(9223372036854775807L);
      Object object0 = new Object();
      range4.equals(object0);
      range1.complement(range2);
      Range range5 = Range.of((-3832L));
      Range.of((-3832L));
      range1.intersection(range3);
      Range range6 = Range.ofLength(127L);
      range6.isSubRangeOf(range2);
      range5.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.5038164856151877
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1039L, 1039L);
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.of((-128L));
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem1);
      assertEquals((-127L), long0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.911470523342115
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), (-5L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, (-5L), 4560L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem4, 1641L, 9223372036854775782L);
      Range.CoordinateSystem.values();
      Range.ofLength(9223372036854775807L);
      Range.of(range_CoordinateSystem3, (-2123L), (-574L));
      Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem5 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem5, (-574L), 226L);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.5595910641709176
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), (-5L));
      range0.endsBefore(range0);
      Long long0 = new Long(230L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-916L), 2147483647L);
      range0.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854775807L, (-732L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -733 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.6698967982703055
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = 8L;
      Range range0 = Range.ofLength(8L);
      Range range1 = Range.of(1L, 8L);
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range1.endsBefore(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-1374L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.4713768965765306
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = 1039L;
      long long1 = 65535L;
      Range range0 = Range.ofLength(1039L);
      range0.spliterator();
      Range range1 = Range.ofLength(1039L);
      range1.equals(range0);
      range1.getBegin();
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(1756L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.750337548041413
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-5L), (-5L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775807L), (-9223372036854775807L));
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin();
      long long0 = (-325L);
      range0.intersection(range0);
      Range.of((-325L));
      long long1 = 4044L;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, (-9223372036854775808L), (-9223372036854775808L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=4.089195745489632
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(3455L);
      Range range1 = Range.of(3455L);
      Range range2 = range0.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range3 = Range.of(3455L);
      Range.ofLength(9223372036854775784L);
      range1.intersects(range2);
      Range range4 = Range.of((-1275L));
      range4.split(2147483647L);
      Range range5 = Range.of((-1275L));
      range3.isSubRangeOf(range1);
      range5.complement(range2);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1275L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=4.094180435053037
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range.of((-2086L));
      Range range1 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.intersects(range1);
      range0.split(9223372036854775807L);
      Range range2 = Range.of(9223372034707292161L);
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertTrue(boolean1 == boolean0);
      
      range1.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range3 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range4 = range_Builder0.build();
      List<Range> list0 = range1.complement(range4);
      Range.Builder range_Builder2 = new Range.Builder(range2);
      Range.Builder range_Builder3 = new Range.Builder(range2);
      range_Builder3.shift((-1L));
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder1.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list1 = range1.complementFrom(linkedList0);
      assertSame(range1, range3);
      assertTrue(list1.equals((Object)list0));
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.3954151629096496
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Object object0 = new Object();
      Range range0 = Range.of(range_CoordinateSystem0, (-2L), (-2L));
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.of(range_CoordinateSystem0, (-5L), (-2L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.846780544563628
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.ofLength(3L);
      List<Range> list0 = range0.split(3L);
      range0.complementFrom(list0);
      Range range1 = Range.of(3L, 3L);
      long long0 = 385L;
      Range.ofLength(385L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      range_Builder1.expandBegin((-815L));
      range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder1.expandEnd((-2378L));
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=4.104793566257718
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of((-2086L));
      Range range2 = Range.ofLength(9223372036854775807L);
      range0.intersects(range2);
      Range range3 = Range.of(1L);
      range0.isSubRangeOf(range2);
      range3.split(1L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range4 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      range2.complement(range1);
      Range.of((-2086L));
      range3.isSubRangeOf(range0);
      range4.equals(range3);
      List<Range> list0 = range4.complement(range1);
      Range.of((-1290L));
      Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range5 = Range.of(range_CoordinateSystem0, 127L, 9223372036854775807L);
      range5.complementFrom(list0);
      range1.asRange();
      // Undeclared exception!
      try { 
        Range.ofLength((-497L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.416377943264486
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483639L, 2147483639L);
      long long0 = 1L;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range1.complement(range0);
      long long1 = (-1170L);
      String string0 = "BB&i5$X2p@*";
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1L, (-1170L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=4.072084533687593
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of(127L);
      Range range2 = Range.ofLength(127L);
      boolean boolean0 = range0.intersects(range2);
      Range range3 = Range.of((-2651L));
      boolean boolean1 = range0.isSubRangeOf(range2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      List<Range> list0 = range1.complement(range3);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range4 = Range.of(9223372036854775807L);
      Range.of((-2651L), 3372L);
      List<Range> list1 = range4.complement(range0);
      Range range5 = Range.of(2147483647L);
      assertFalse(range5.isEmpty());
      
      range2.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertFalse(range3.isEmpty());
      
      Range range6 = range0.asRange();
      List<Range> list2 = range6.complementFrom(list1);
      assertSame(range6, range1);
      assertFalse(list2.contains(range5));
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.6917275745266185
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = (-9223372036854775780L);
      Range range0 = Range.of((-9223372036854775780L), (-9223372036854775780L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-1882L);
      Range range1 = Range.of(range_CoordinateSystem1, (-9223372036854775780L), (-1882L));
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      long long2 = (-1L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 255L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.4438912689444763
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483588L, 2147483588L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 2147483588L, 2147483588L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 2147483588L, 2147483588L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem3);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem4, 4061L, 2147483588L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=4.091298394776224
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.ofLength(3L);
      Range range1 = Range.ofLength(3L);
      Range range2 = Range.ofLength(360L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range2.isSubRangeOf(range1);
      range2.endsBefore(range1);
      range1.toString();
      range0.startsBefore(range2);
      range1.toString();
      Range range3 = Range.ofLength(3L);
      range3.complement(range1);
      range2.getLength();
      Range.of(360L, 4294967294L);
      Range range4 = Range.of(4294967294L, 4294967294L);
      range4.complement(range1);
      Range.parseRange("[ 0 .. 2 ]/0B");
      range1.intersects(range3);
      range3.spliterator();
      range1.complement(range4);
      Range range5 = Range.of(3L);
      range0.asRange();
      range2.isSubRangeOf(range1);
      Range range6 = Range.ofLength(3L);
      range5.intersection(range6);
      // Undeclared exception!
      try { 
        Range.ofLength((-2502L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.9786439711946806
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(3455L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3455L, 3455L);
      range0.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Long long0 = new Long(0L);
      Long.divideUnsigned(52L, (-4122L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long1 = new Long((-128L));
      range1.equals(long1);
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder1.shift((-2650L));
      range_Builder2.build();
      String string0 = "OW 9h9Yo|)j[";
      // Undeclared exception!
      try { 
        Range.parseRange("OW 9h9Yo|)j[", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse OW 9h9Yo|)j[ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=4.116096817569834
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range.of((-2086L));
      Range range1 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      range0.split(9223372036854775807L);
      Range range2 = Range.of(9223372034707292161L);
      range0.isSubRangeOf(range1);
      range1.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range3 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range4 = range_Builder0.build();
      List<Range> list0 = range1.complement(range4);
      assertSame(range4, range3);
      assertTrue(list0.isEmpty());
      
      Range.Builder range_Builder2 = new Range.Builder(range2);
      Range.Builder range_Builder3 = new Range.Builder(range2);
      range_Builder3.shift((-1L));
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder1.build();
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=4.122409831472502
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of((-2086L));
      Range range2 = Range.ofLength(9223372036854775807L);
      range0.intersects(range2);
      Range.of(9223372034707292161L);
      range0.isSubRangeOf(range2);
      range2.complement(range2);
      range0.isEmpty();
      range0.toString();
      range0.intersects(range1);
      range2.toString();
      range1.toString();
      Range range3 = Range.of((-2086L));
      range3.startsBefore(range2);
      Long long0 = new Long(9223372034707292161L);
      Range.of((-4886L), 2147483647L);
      range3.complement(range0);
      Range.of(2147483647L);
      range2.intersects(range3);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=4.007533471006754
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.ofLength(3L);
      Range range1 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.intersection(range0);
      Long long0 = new Long(3L);
      range1.equals(long0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.of((-1L));
      range_Builder2.copy();
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = range_Builder1.copy();
      range_Builder4.build();
      long long1 = 1L;
      Range.Builder range_Builder5 = new Range.Builder(range_CoordinateSystem0, 1L, 2147483647L);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder5);
      range_Builder6.expandBegin(3L);
      Range.Builder range_Builder7 = new Range.Builder(range0);
      range_Builder2.expandBegin((-882L));
      Range.Builder range_Builder8 = null;
      try {
        range_Builder8 = new Range.Builder((-2141L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.5097290005467063
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = 1057L;
      Range range0 = Range.ofLength(1057L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      long long1 = 2147483647L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 2147483647L, 4294967295L);
      Range.of(254L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Null Range used in intersection operation.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Null Range used in intersection operation.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.675909259964052
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), 131L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(131L);
      range0.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-5L), 4560L);
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854775807L, 1641L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.718172909531973
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.ofLength(3455L);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 1L, 1L);
      range_Builder1.expandBegin(3639L);
      Range.Builder range_Builder3 = new Range.Builder();
      Range range1 = range_Builder1.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.7035034111440064
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = (-1217L);
      Range range0 = Range.of((-1217L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.startsBefore(range0);
      Range.of(range_CoordinateSystem0, 384L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-1217L), (-1217L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 9223372036854773302L;
      Range.of(range_CoordinateSystem2, 4294967295L, 9223372036854773302L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 4294967295L, 9223372036854773302L);
      Range.of((-128L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem3, (-128L), (-533L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.92041402585924
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.ofLength(3L);
      Range range1 = Range.of(3L, 3L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-1L), 2735L);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(2938L);
      Range.Builder range_Builder3 = range_Builder1.contractEnd(255L);
      Range.Builder range_Builder4 = new Range.Builder(255L, 9223372034707292161L);
      Range.Builder range_Builder5 = new Range.Builder(range_CoordinateSystem0, 2268L, 9223372034707292161L);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder7 = range_Builder3.shift(255L);
      Range.Builder range_Builder8 = new Range.Builder();
      range_Builder7.expandBegin((-312L));
      Range.Builder range_Builder9 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder10 = new Range.Builder(range_Builder2);
      range_Builder8.expandBegin(3L);
      Range.Builder range_Builder11 = new Range.Builder(3L);
      Range range3 = range_Builder8.build();
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.210580958169718
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 40L, 40L);
      long long0 = 9223372036854775807L;
      range0.equals(range_CoordinateSystem0);
      Long long1 = new Long(230L);
      Object object0 = new Object();
      long long2 = (-916L);
      long long3 = 0L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-167L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.5575621675072426
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(1L, 0L);
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-1374L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      // Undeclared exception!
      try { 
        range0.split((-2202L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.5279317589864574
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.ofLength(6L);
      range0.split(6L);
      Long long0 = new Long((-838L));
      Long long1 = new Long((-32768L));
      Range.Builder range_Builder0 = new Range.Builder((-9223372036854775808L), (-1335L));
      range_Builder0.expandBegin((-838L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2544L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.6698639556637103
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = (-5L);
      Range range0 = Range.of((-5L));
      Object object0 = new Object();
      Long long1 = new Long((-5L));
      Object object1 = new Object();
      Range range1 = Range.of((-5L));
      Range range2 = range0.intersection(range1);
      range2.complement(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("nF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.nF
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.8306634197024656
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), (-5L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, (-5L), 4560L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem4, 1641L, 9223372036854775769L);
      Range.CoordinateSystem.values();
      Range.of(range_CoordinateSystem2, 1641L, 9223372036854775807L);
      Range.of(range_CoordinateSystem3, (-2123L), (-574L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.expandBegin(1L);
      Range.Builder range_Builder2 = range_Builder0.contractBegin(1L);
      range_Builder2.expandEnd((-1760L));
      range_Builder2.expandBegin(1L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.3891606676489054
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.263155040283282
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-5L);
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), (-5L));
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=4.183945846989845
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of((-2093L));
      long long0 = 9223372036854775807L;
      Range range2 = Range.ofLength(9223372036854775807L);
      range1.spliterator();
      range0.intersects(range2);
      Range range3 = Range.of(9223372034707292161L);
      range1.endsBefore(range0);
      range2.complement(range2);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range4 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      range1.endsBefore(range2);
      range_Builder0.expandEnd(9223372036854775807L);
      Object object0 = new Object();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      range4.isEmpty();
      List<Range> list0 = new LinkedList<Range>();
      Range.of(9223372034707292161L);
      range2.intersection(range3);
      range3.startsBefore(range4);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder3.expandBegin((-2093L));
      Range.Builder range_Builder4 = new Range.Builder(range2);
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(range_Builder3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.516742115162948
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.ofLength(3L);
      Range range0 = Range.ofLength(3L);
      long long0 = 360L;
      Range.ofLength(360L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      range_Builder0.copy();
      long long1 = (-31L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem0, 360L, 3L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.142623311874872
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range.of(range_CoordinateSystem0, 211L, 211L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 230L, 211L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.2433546687129593
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.244897741295102
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), (-5L));
      long long0 = 9223372036854775807L;
      range0.isSubRangeOf(range0);
      Long long1 = new Long(230L);
      Object object0 = new Object();
      long long2 = (-916L);
      long long3 = 0L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-973L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.3203691289568624
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.6662455206837965
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.of(0L, 0L);
      Object object0 = new Object();
      long long0 = (-1L);
      Range.of((-1180L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
