/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 09 22:59:33 GMT 2020
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.OutputStream;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import java.util.function.Predicate;
import javax.management.remote.JMXPrincipal;
import javax.security.auth.Subject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.gds.XSQLDA;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.AbstractIscTrHandle;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.gds.impl.wire.XdrOutputStream;
import org.firebirdsql.gds.impl.wire.isc_db_handle_impl;
import org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.AbstractStatement;
import org.firebirdsql.jdbc.DummyCallableStatementMetaData;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.firebirdsql.jdbc.field.FBBlobField;
import org.firebirdsql.jdbc.field.FBCachedLongVarCharField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9513496062520654
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.removeExtensionParams();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl1.ensureCapacity(16384);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      databaseParameterBufferImp0.deepCopy();
      byte[][] byteArray0 = new byte[8][1];
      byteArray0[0] = gDSHelper0.BLOB_LENGTH_REQUEST;
      isc_stmt_handle_impl0.getTransaction();
      gDSHelper0.setCurrentTrHandle((AbstractIscTrHandle) null);
      byteArray0[1] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-70);
      byteArray1[1] = (byte) (-84);
      byteArray0[2] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[0] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[4] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[5] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[6] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[7] = gDSHelper0.BLOB_LENGTH_REQUEST;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.absolute(701);
      assertEquals(1, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      SynchronousQueue<String> synchronousQueue1 = new SynchronousQueue<String>();
      synchronousQueue0.spliterator();
      SynchronousQueue<String> synchronousQueue2 = new SynchronousQueue<String>();
      linkedList0.iterator();
      synchronousQueue2.toArray();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("N", 2004);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SynchronousQueue<String> synchronousQueue3 = new SynchronousQueue<String>();
      SynchronousQueue<FBBlobField> synchronousQueue4 = new SynchronousQueue<FBBlobField>();
      LinkedHashSet<JMXPrincipal> linkedHashSet0 = new LinkedHashSet<JMXPrincipal>();
      Class<FBCachedLongVarCharField> class0 = FBCachedLongVarCharField.class;
      fBResultSet0.isWrapperFor(class0);
      SynchronousQueue<FBBlobField> synchronousQueue5 = new SynchronousQueue<FBBlobField>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      XSQLDA xSQLDA0 = new XSQLDA(47);
      xSQLDA0.sqlvar = xSQLVARArray0;
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      xSQLDA0.sqlvar = fBResultSet0.xsqlvars;
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.deepCopy();
      XSQLDA xSQLDA1 = new XSQLDA(0);
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA1);
      fBCachedFetcher0.next();
      FBCachedFetcher fBCachedFetcher1 = null;
      try {
        fBCachedFetcher1 = new FBCachedFetcher((GDSHelper) null, 1681, 0, isc_stmt_handle_impl0, fBResultSet0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3760552852604169
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      synchronousQueue0.containsAll(linkedList0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      synchronousQueue0.poll(0L, timeUnit0);
      SynchronousQueue<String> synchronousQueue1 = new SynchronousQueue<String>();
      synchronousQueue0.spliterator();
      SynchronousQueue<String> synchronousQueue2 = new SynchronousQueue<String>();
      linkedList0.iterator();
      synchronousQueue2.toArray();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("N", 2004);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SynchronousQueue<String> synchronousQueue3 = new SynchronousQueue<String>();
      SynchronousQueue<FBBlobField> synchronousQueue4 = new SynchronousQueue<FBBlobField>();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal(",39kGgb5#Xl3q");
      SynchronousQueue<FBBlobField> synchronousQueue5 = new SynchronousQueue<FBBlobField>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.first();
      XSQLDA xSQLDA0 = new XSQLDA(38);
      xSQLDA0.sqlvar = xSQLVARArray0;
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      FBCachedFetcher fBCachedFetcher1 = null;
      try {
        fBCachedFetcher1 = new FBCachedFetcher((GDSHelper) null, 0, (-98), isc_stmt_handle_impl0, fBResultSet0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      synchronousQueue0.containsAll(linkedList0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      synchronousQueue0.poll(0L, timeUnit0);
      SynchronousQueue<String> synchronousQueue1 = new SynchronousQueue<String>();
      synchronousQueue0.spliterator();
      SynchronousQueue<String> synchronousQueue2 = new SynchronousQueue<String>();
      linkedList0.iterator();
      synchronousQueue2.toArray();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("N", 2004);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SynchronousQueue<String> synchronousQueue3 = new SynchronousQueue<String>();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("", 1998);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      SynchronousQueue<FBBlobField> synchronousQueue4 = new SynchronousQueue<FBBlobField>();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal(",39kGgb5#Xl3q");
      SynchronousQueue<FBBlobField> synchronousQueue5 = new SynchronousQueue<FBBlobField>();
      XSQLDA xSQLDA0 = new XSQLDA(38);
      xSQLDA0.sqlvar = xSQLVARArray0;
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      isc_stmt_handle_impl0.removeRows();
      xSQLDA0.sqln = xSQLDA0.sqln;
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((GDSHelper) null, 335544328, 335544328, isc_stmt_handle_impl0, fBResultSet0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.897367567113771
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      SynchronousQueue<String> synchronousQueue1 = new SynchronousQueue<String>();
      SynchronousQueue<String> synchronousQueue2 = new SynchronousQueue<String>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add((byte[][]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)8;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      linkedList2.add((byte[][]) null);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList2.add((byte[][]) null);
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, fBResultSet0);
      fBCachedFetcher0.absolute(210);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.relative((byte)8);
      boolean boolean0 = fBCachedFetcher0.last();
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp2 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp3 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp4 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp5 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.deepCopy();
      DatabaseParameterBufferImp databaseParameterBufferImp6 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp7 = new DatabaseParameterBufferImp();
      databaseParameterBuffer0.deepCopy();
      DatabaseParameterBufferImp databaseParameterBufferImp8 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp9 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp10 = new DatabaseParameterBufferImp();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      Subject subject0 = new Subject();
      subject0.toString();
      isc_stmt_handle_impl0.ensureCapacity(2344);
      DatabaseParameterBufferImp databaseParameterBufferImp11 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.deepCopy();
      XSQLDA xSQLDA0 = new XSQLDA(2344);
      isc_stmt_handle_impl0.setOutSqlda(xSQLDA0);
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      javaGDSImpl0.createDatabaseParameterBuffer();
      javaGDSImpl0.newTransactionParameterBuffer();
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((GDSHelper) null, 1226, 2344, isc_stmt_handle_impl0, (FBObjectListener.FetcherListener) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.field.FBField", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      SynchronousQueue<String> synchronousQueue1 = new SynchronousQueue<String>();
      SynchronousQueue<String> synchronousQueue2 = new SynchronousQueue<String>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add((byte[][]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)8;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList2.add((byte[][]) null);
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, fBResultSet0);
      fBCachedFetcher0.absolute(210);
      fBCachedFetcher0.previous();
      boolean boolean0 = fBCachedFetcher0.relative((byte)8);
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8397895868412517
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.removeExtensionParams();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      Subject subject0 = new Subject();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      Class<Integer> class0 = Integer.class;
      subject0.getPrivateCredentials(class0);
      isc_stmt_handle_impl1.setInsertCount(3599);
      isc_stmt_handle_impl1.ensureCapacity(16384);
      Class<byte[][]> class1 = byte[][].class;
      subject0.getPublicCredentials(class1);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      databaseParameterBufferImp0.deepCopy();
      byte[][] byteArray0 = new byte[8][1];
      byteArray0[0] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[1] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-70);
      byteArray1[1] = (byte) (-84);
      byteArray0[2] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[0] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[4] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[5] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[6] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[7] = gDSHelper0.BLOB_LENGTH_REQUEST;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.042592104175594
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      LinkedBlockingQueue<Object> linkedBlockingQueue0 = new LinkedBlockingQueue<Object>();
      synchronousQueue0.drainTo((Collection<? super String>) linkedBlockingQueue0);
      SynchronousQueue<String> synchronousQueue1 = new SynchronousQueue<String>();
      SynchronousQueue<String> synchronousQueue2 = new SynchronousQueue<String>();
      SynchronousQueue<String> synchronousQueue3 = new SynchronousQueue<String>();
      linkedList0.iterator();
      synchronousQueue0.toArray();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("N", 2004);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SynchronousQueue<String> synchronousQueue4 = new SynchronousQueue<String>();
      linkedList0.offerFirst((byte[][]) null);
      SynchronousQueue<FBBlobField> synchronousQueue5 = new SynchronousQueue<FBBlobField>();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal(",");
      SynchronousQueue<FBBlobField> synchronousQueue6 = new SynchronousQueue<FBBlobField>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.absolute(2085);
      fBCachedFetcher0.insertRow((byte[][]) null);
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      SynchronousQueue<String> synchronousQueue1 = new SynchronousQueue<String>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList1);
      LinkedBlockingQueue<Object> linkedBlockingQueue0 = new LinkedBlockingQueue<Object>(synchronousQueue0);
      SynchronousQueue<String> synchronousQueue2 = new SynchronousQueue<String>();
      SynchronousQueue<FBBlobField> synchronousQueue3 = new SynchronousQueue<FBBlobField>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.ensureCapacity(2071);
      isc_stmt_handle_impl0.ensureCapacity((-1));
      Subject subject0 = new Subject();
      Class<byte[][]> class0 = byte[][].class;
      subject0.getPublicCredentials(class0);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>(linkedList1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher1.relative(1);
      System.setCurrentTimeMillis(9223372036854775807L);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("[NULL Xid]", 12345);
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "org.firebirdsql.gds.impl.wire.XdrOutputStream");
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      JMXPrincipal jMXPrincipal1 = new JMXPrincipal("O");
      jMXPrincipal1.toString();
      jMXPrincipal1.getName();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      jMXPrincipal1.getName();
      jMXPrincipal1.toString();
      jMXPrincipal1.equals((Object) null);
      JMXPrincipal jMXPrincipal2 = new JMXPrincipal("&Ahlou@K!`t");
      JMXPrincipal jMXPrincipal3 = new JMXPrincipal("&Ahlou@K!`t");
      jMXPrincipal3.equals("O");
      jMXPrincipal1.toString();
      jMXPrincipal3.getName();
      jMXPrincipal3.getName();
      jMXPrincipal3.getName();
      jMXPrincipal3.toString();
      jMXPrincipal1.toString();
      jMXPrincipal3.getName();
      jMXPrincipal3.getName();
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.getRowNum();
      boolean boolean0 = fBCachedFetcher0.next();
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList1);
      LinkedBlockingQueue<Object> linkedBlockingQueue0 = new LinkedBlockingQueue<Object>(synchronousQueue0);
      SynchronousQueue<String> synchronousQueue1 = new SynchronousQueue<String>();
      SynchronousQueue<FBBlobField> synchronousQueue2 = new SynchronousQueue<FBBlobField>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.ensureCapacity(2071);
      isc_stmt_handle_impl0.ensureCapacity((-1));
      Subject subject0 = new Subject();
      Class<byte[][]> class0 = byte[][].class;
      subject0.getPublicCredentials(class0);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>(linkedList1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher1.relative(1);
      System.setCurrentTimeMillis(9223372036854775807L);
      boolean boolean0 = fBCachedFetcher1.absolute(1);
      assertTrue(fBCachedFetcher1.isFirst());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[0][9];
      linkedList0.add(byteArray0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      linkedList0.removeAll(synchronousQueue0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList1);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList3.add((byte[][]) null);
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      linkedList4.iterator();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList4, fBResultSet1);
      fBCachedFetcher0.insertRow(byteArray0);
      boolean boolean0 = fBCachedFetcher0.isFirst();
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8989267893363289
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.removeExtensionParams();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      Subject subject0 = new Subject();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl1.ensureCapacity(16384);
      Class<byte[][]> class0 = byte[][].class;
      subject0.getPublicCredentials(class0);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      databaseParameterBufferImp0.deepCopy();
      byte[][] byteArray0 = new byte[8][1];
      byteArray0[0] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[1] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-70);
      byteArray1[1] = (byte) (-84);
      byteArray0[2] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[3] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[4] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[5] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[6] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[7] = gDSHelper0.BLOB_LENGTH_REQUEST;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.next();
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8711604142318066
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DummyCallableStatementMetaData dummyCallableStatementMetaData0 = new DummyCallableStatementMetaData();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator1 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator(internalTransactionCoordinator_MetaDataTransactionCoordinator1);
      InternalTransactionCoordinator internalTransactionCoordinator1 = new InternalTransactionCoordinator(internalTransactionCoordinator_MetaDataTransactionCoordinator0);
      internalTransactionCoordinator1.statementCompleted((AbstractStatement) null, true);
      internalTransactionCoordinator1.getConnection();
      internalTransactionCoordinator_MetaDataTransactionCoordinator1.executionStarted((AbstractStatement) null);
      internalTransactionCoordinator_MetaDataTransactionCoordinator0.connection = null;
      Predicate<byte[][]> predicate0 = Predicate.isEqual((Object) internalTransactionCoordinator_MetaDataTransactionCoordinator0);
      Predicate<byte[][]> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      predicate0.or(predicate1);
      Predicate.isEqual((Object) internalTransactionCoordinator0);
      predicate1.negate();
      predicate0.negate();
      linkedList0.removeIf(predicate0);
      linkedList0.add((byte[][]) null);
      linkedList0.add((byte[][]) null);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.next();
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null, (Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(102, threadFactory0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = new byte[7][0];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte) (-112);
      linkedList0.add(byteArray0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      scheduledThreadPoolExecutor0.schedule(callable0, 1L, timeUnit0);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "SSQ~cO[xxiv\"0XR");
      MockThread.dumpStack();
      MockThread.getAllStackTraces();
      Thread[] threadArray0 = new Thread[26];
      threadArray0[0] = (Thread) mockThread1;
      threadArray0[1] = (Thread) mockThread1;
      threadArray0[2] = (Thread) mockThread1;
      threadArray0[3] = (Thread) mockThread1;
      MockThread mockThread2 = new MockThread("SSQ~cO[xxiv\"0XR");
      threadArray0[4] = (Thread) mockThread2;
      threadArray0[13] = (Thread) mockThread0;
      threadArray0[6] = (Thread) mockThread1;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread3 = new MockThread(threadGroup0, threadArray0[2]);
      MockThread mockThread4 = new MockThread(mockThread3, "");
      threadArray0[7] = (Thread) mockThread4;
      threadArray0[8] = (Thread) mockThread4;
      MockThread.enumerate(threadArray0);
      MockThread.getDefaultUncaughtExceptionHandler();
      mockThread0.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      scheduledThreadPoolExecutor0.schedule((Runnable) mockThread1, (long) (byte)55, timeUnit1);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((List<byte[][]>) null, (FBObjectListener.FetcherListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null, (Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(102, threadFactory0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = new byte[7][0];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte)55;
      linkedList0.add(byteArray0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      scheduledThreadPoolExecutor0.schedule(callable0, (long) 52, timeUnit1);
      MockThread mockThread0 = new MockThread("");
      MockThread mockThread1 = new MockThread(mockThread0, "J");
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) mockThread1, (long) (byte) (-112), timeUnit0);
      linkedList0.add(byteArray0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) scheduledFuture0);
      Thread[] threadArray0 = new Thread[2];
      threadArray0[0] = (Thread) mockThread1;
      threadArray0[1] = (Thread) mockThread1;
      MockThread.enumerate(threadArray0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.or(predicate0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      System.setCurrentTimeMillis((byte) (-112));
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6151195500604119
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)46;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)100;
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add((byte[][]) null);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      Predicate<byte[][]> predicate0 = Predicate.isEqual((Object) linkedList1);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      delayQueue0.poll((long) (byte)0, timeUnit0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate.isEqual((Object) linkedList1);
      Predicate<Object> predicate3 = predicate2.or(predicate2);
      predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate0.or(predicate4);
      Predicate<byte[][]> predicate5 = predicate0.negate();
      linkedList2.removeIf(predicate5);
      linkedList2.add((byte[][]) null);
      linkedList2.add((byte[][]) null);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) linkedList1);
      Predicate<Object> predicate7 = predicate6.negate();
      predicate7.and(predicate6);
      Predicate<Object> predicate8 = predicate7.or(predicate6);
      Predicate<Object> predicate9 = predicate8.or(predicate7);
      predicate9.test(predicate8);
      linkedList1.removeIf(predicate9);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, fBResultSet0);
      fBCachedFetcher0.first();
      Subject subject0 = new Subject();
      boolean boolean0 = fBCachedFetcher0.last();
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.711845135233912
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("[NULL Xid]", 12345);
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "org.firebirdsql.gds.impl.wire.XdrOutputStream");
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      JMXPrincipal jMXPrincipal1 = new JMXPrincipal("O");
      jMXPrincipal1.toString();
      jMXPrincipal1.getName();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      jMXPrincipal1.getName();
      jMXPrincipal1.toString();
      jMXPrincipal1.equals((Object) null);
      JMXPrincipal jMXPrincipal2 = new JMXPrincipal("&Ahlou@K!`t");
      JMXPrincipal jMXPrincipal3 = new JMXPrincipal("&Ahlou@K!`t");
      jMXPrincipal3.equals("O");
      jMXPrincipal1.toString();
      jMXPrincipal3.getName();
      jMXPrincipal3.getName();
      jMXPrincipal3.getName();
      jMXPrincipal3.toString();
      jMXPrincipal1.toString();
      jMXPrincipal3.getName();
      jMXPrincipal3.getName();
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8945141848289304
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[0][9];
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList2.add(byteArray0);
      linkedList1.add(byteArray0);
      linkedList1.remove();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, fBResultSet0);
      fBCachedFetcher0.relative(0);
      fBCachedFetcher0.updateRow(byteArray0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.updateRow(byteArray0);
      assertEquals(1, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0592293789763123
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBuffer0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, gDSHelper0.BLOB_LENGTH_REQUEST);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][2];
      byteArray0[0] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[1] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[2] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[3] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[4] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[5] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[6] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[7] = gDSHelper0.BLOB_LENGTH_REQUEST;
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.relative(16384);
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.absolute(16384);
      fBCachedFetcher0.updateRow((byte[][]) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4142790651247086
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.iterator();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2946, threadFactory0);
      linkedList0.add((byte[][]) null);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor((byte)55);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      scheduledThreadPoolExecutor1.schedule(callable0, 0L, timeUnit1);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "You cannot position to the row 0 with absolute() method.");
      scheduledThreadPoolExecutor1.schedule((Runnable) mockThread0, 0L, timeUnit0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-112);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)52, (byte)52);
      Predicate.isEqual((Object) byteArrayInputStream0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.relative((-2050));
      System.setCurrentTimeMillis((-128L));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DummyCallableStatementMetaData dummyCallableStatementMetaData0 = new DummyCallableStatementMetaData();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator1 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator(internalTransactionCoordinator_MetaDataTransactionCoordinator1);
      InternalTransactionCoordinator internalTransactionCoordinator1 = new InternalTransactionCoordinator(internalTransactionCoordinator_MetaDataTransactionCoordinator0);
      internalTransactionCoordinator1.getConnection();
      internalTransactionCoordinator_MetaDataTransactionCoordinator1.executionStarted((AbstractStatement) null);
      internalTransactionCoordinator_MetaDataTransactionCoordinator0.connection = null;
      Predicate.isEqual((Object) internalTransactionCoordinator0);
      internalTransactionCoordinator1.statementCompleted((AbstractStatement) null, true);
      linkedList0.add((byte[][]) null);
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.previous();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBuffer0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      Subject subject0 = new Subject();
      isc_stmt_handle_impl0.ensureCapacity(2371);
      Class<byte[][]> class0 = byte[][].class;
      Set<byte[][]> set0 = subject0.getPublicCredentials(class0);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>(set0);
      byte[][] byteArray0 = new byte[5][1];
      byteArray0[0] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[1] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[2] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[3] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[4] = gDSHelper0.BLOB_LENGTH_REQUEST;
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.next();
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9085352816435601
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.iterator();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "0g;xB@A$Z");
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[3][4];
      fBCachedFetcher0.setFetchSize((-2507));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)31;
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isFirst();
      // Undeclared exception!
      try { 
        fBCachedFetcher1.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 75);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      byte[][] byteArray0 = new byte[7][6];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)26;
      byteArray1[1] = (byte) (-52);
      byteArray1[2] = (byte) (-58);
      byteArray1[3] = (byte)53;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-58);
      byteArray2[1] = (byte) (-52);
      byteArray2[2] = (byte) (-52);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte) (-58);
      byteArray3[1] = (byte)26;
      byteArray3[2] = (byte)26;
      byteArray3[3] = (byte) (-17);
      byteArray3[4] = (byte)53;
      byteArray3[5] = (byte)53;
      byteArray3[6] = (byte)53;
      byteArray3[7] = (byte)26;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)53;
      byteArray4[1] = (byte)26;
      byteArray4[2] = (byte) (-17);
      byteArray4[3] = (byte)53;
      byteArray4[4] = (byte) (-6);
      byteArray4[5] = (byte) (-52);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[5];
      byteArray5[0] = (byte)53;
      byteArray5[1] = (byte)89;
      byteArray5[2] = (byte) (-58);
      byteArray5[3] = (byte) (-2);
      byteArray5[4] = (byte) (-58);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[1];
      byteArray6[0] = (byte) (-2);
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[1];
      byteArray7[0] = (byte)53;
      byteArray0[6] = byteArray7;
      linkedList0.add(byteArray0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "0g;xB@A$Z");
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(139, threadFactory0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = new byte[9][0];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte) (-112);
      linkedList0.add(byteArray0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      scheduledThreadPoolExecutor0.schedule(callable0, 1L, timeUnit0);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread();
      MockThread.dumpStack();
      MockThread.getAllStackTraces();
      Thread[] threadArray0 = new Thread[9];
      threadArray0[0] = (Thread) mockThread1;
      threadArray0[1] = (Thread) mockThread1;
      threadArray0[1] = (Thread) mockThread1;
      threadArray0[3] = (Thread) mockThread1;
      MockThread mockThread2 = new MockThread();
      MockThread.enumerate(threadArray0);
      MockThread.reset();
      threadArray0[4] = (Thread) mockThread2;
      threadArray0[5] = (Thread) mockThread0;
      threadArray0[6] = (Thread) mockThread1;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      XSQLDA xSQLDA0 = new XSQLDA(1501);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl1.setOutSqlda(xSQLDA0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null, (Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(65535, threadFactory0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)55;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      scheduledThreadPoolExecutor0.schedule(callable0, (long) 52, timeUnit0);
      MockThread mockThread0 = new MockThread("px");
      Thread[] threadArray0 = new Thread[3];
      Thread thread0 = MockThread.currentThread();
      threadArray0[0] = (Thread) mockThread0;
      threadArray0[1] = (Thread) mockThread0;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup0, thread0);
      mockThread1.getStackTrace();
      MockThread.dumpStack();
      threadArray0[2] = (Thread) mockThread1;
      MockThread.enumerate(threadArray0);
      MockThread mockThread2 = new MockThread(mockThread0, "J");
      MockThread.getDefaultUncaughtExceptionHandler();
      mockThread0.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      Thread[] threadArray1 = new Thread[6];
      scheduledThreadPoolExecutor0.schedule((Runnable) mockThread0, (long) (byte)55, timeUnit0);
      MockThread.getDefaultUncaughtExceptionHandler();
      MockThread mockThread3 = new MockThread((ThreadGroup) null, mockThread0, "px", (byte)55);
      MockThread.interrupted();
      MockThread.setDefaultUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      MockThread mockThread4 = new MockThread((ThreadGroup) null, mockThread3, "");
      mockThread4.getUncaughtExceptionHandler();
      MockThread.enumerate(threadArray1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isEmpty();
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp1 = (DatabaseParameterBufferImp)databaseParameterBufferImp0.removeExtensionParams();
      databaseParameterBufferImp1.removeExtensionParams();
      DatabaseParameterBufferImp databaseParameterBufferImp2 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp3 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp4 = (DatabaseParameterBufferImp)databaseParameterBufferImp3.removeExtensionParams();
      DatabaseParameterBufferImp databaseParameterBufferImp5 = (DatabaseParameterBufferImp)databaseParameterBufferImp1.deepCopy();
      DatabaseParameterBufferImp databaseParameterBufferImp6 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp7 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp8 = (DatabaseParameterBufferImp)databaseParameterBufferImp4.deepCopy();
      DatabaseParameterBufferImp databaseParameterBufferImp9 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp10 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp11 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp12 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp4.deepCopy();
      DatabaseParameterBufferImp databaseParameterBufferImp13 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp14 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp15 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp16 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp17 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp18 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp8.removeExtensionParams();
      DatabaseParameterBufferImp databaseParameterBufferImp19 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp20 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp21 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp22 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp23 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp24 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp5.removeExtensionParams();
      databaseParameterBufferImp7.deepCopy();
      DatabaseParameterBufferImp databaseParameterBufferImp25 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp26 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp13.deepCopy();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[5][4];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)18;
      byteArray1[1] = (byte) (-77);
      byteArray1[2] = (byte) (-42);
      byteArray1[3] = (byte)15;
      byteArray1[4] = (byte)17;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)100;
      byteArray1[7] = (byte)12;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)15;
      byteArray3[1] = (byte)12;
      byteArray3[2] = (byte)12;
      byteArray3[3] = (byte)17;
      byteArray3[4] = (byte) (-77);
      byteArray3[5] = (byte)18;
      byteArray3[6] = (byte) (-77);
      byteArray3[7] = (byte)18;
      byteArray3[8] = (byte)15;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte)12;
      byteArray4[1] = (byte) (-42);
      byteArray4[2] = (byte)17;
      byteArray4[3] = (byte)18;
      byteArray4[4] = (byte)17;
      byteArray4[5] = (byte)12;
      byteArray4[6] = (byte)15;
      byteArray4[7] = (byte)100;
      byteArray4[8] = (byte)100;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[8];
      byteArray5[0] = (byte)17;
      byteArray5[1] = (byte) (-77);
      byteArray5[2] = (byte)17;
      byteArray5[3] = (byte)115;
      byteArray5[4] = (byte)0;
      byteArray5[5] = (byte)12;
      byteArray5[6] = (byte)18;
      byteArray5[7] = (byte)17;
      byteArray0[4] = byteArray5;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isEmpty();
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null, (Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(102, threadFactory0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)55;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      scheduledThreadPoolExecutor0.schedule(callable0, (long) 52, timeUnit0);
      MockThread mockThread0 = new MockThread("px");
      Thread[] threadArray0 = new Thread[3];
      Thread thread0 = MockThread.currentThread();
      threadArray0[0] = (Thread) mockThread0;
      threadArray0[1] = (Thread) mockThread0;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup0, thread0);
      mockThread1.getStackTrace();
      threadArray0[2] = (Thread) mockThread1;
      MockThread.enumerate(threadArray0);
      MockThread mockThread2 = new MockThread(mockThread0, "J");
      MockThread.getDefaultUncaughtExceptionHandler();
      mockThread0.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      Thread[] threadArray1 = new Thread[6];
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      scheduledThreadPoolExecutor0.schedule((Runnable) mockThread0, (long) (byte)55, timeUnit1);
      MockThread.getDefaultUncaughtExceptionHandler();
      MockThread mockThread3 = new MockThread((ThreadGroup) null, mockThread0, "px", (byte)55);
      byte[][] byteArray1 = new byte[4][0];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      byteArray1[3] = byteArray0;
      linkedList0.add(byteArray1);
      MockThread.interrupted();
      MockThread mockThread4 = new MockThread((ThreadGroup) null, mockThread3, "");
      mockThread4.getUncaughtExceptionHandler();
      MockThread.enumerate(threadArray1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.next();
      assertFalse(boolean0);
      
      byte[][] byteArray0 = new byte[2][8];
      byte[] byteArray1 = new byte[6];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean1 = fBCachedFetcher0.isLast();
      boolean boolean2 = fBCachedFetcher1.isBeforeFirst();
      assertFalse(fBCachedFetcher1.isLast());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4142790651247086
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[0][1];
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute((-213));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.next();
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[0];
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isLast();
      boolean boolean1 = fBCachedFetcher1.isBeforeFirst();
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = fBCachedFetcher0.next();
      assertFalse(boolean2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7201934592198251
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "j8|yiH;rC_9jbdz");
      byte[][] byteArray0 = new byte[0][9];
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      linkedList0.add(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)96;
      byteArray1[1] = (byte)96;
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte)100;
      byteArray1[4] = (byte)100;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray1);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      fBCachedFetcher0.updateRow(byteArray0);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3579778549873243
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null, (Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(102, threadFactory0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = new byte[7][0];
      byte[] byteArray1 = new byte[8];
      byteArray1[6] = (byte) (-112);
      byteArray1[1] = (byte)55;
      linkedList0.add(byteArray0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      scheduledThreadPoolExecutor0.schedule(callable0, (long) 52, timeUnit1);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "J");
      MockThread.dumpStack();
      MockThread.getAllStackTraces();
      MockThread.getDefaultUncaughtExceptionHandler();
      mockThread1.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) mockThread1, (long) (byte)0, timeUnit0);
      Predicate.isEqual((Object) scheduledFuture0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      int int0 = 583;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative((byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.getRowNum();
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9826232826520047
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.firebirdsql.jdbc.FBCachedFetcher$1", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-111);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.afterLast();
      fBCachedFetcher0.isAfterLast();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[0][9];
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-32);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null, (Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(65535, threadFactory0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)55;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      scheduledThreadPoolExecutor0.schedule(callable0, (long) 52, timeUnit0);
      MockThread mockThread0 = new MockThread("px");
      Thread[] threadArray0 = new Thread[3];
      Thread thread0 = MockThread.currentThread();
      threadArray0[0] = (Thread) mockThread0;
      threadArray0[1] = (Thread) mockThread0;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup0, thread0);
      mockThread1.getStackTrace();
      MockThread.dumpStack();
      threadArray0[2] = (Thread) mockThread1;
      MockThread.enumerate(threadArray0);
      MockThread mockThread2 = new MockThread(mockThread0, "J");
      MockThread.getDefaultUncaughtExceptionHandler();
      mockThread0.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      Thread[] threadArray1 = new Thread[6];
      scheduledThreadPoolExecutor0.schedule((Runnable) mockThread0, (long) (byte)55, timeUnit0);
      MockThread.getDefaultUncaughtExceptionHandler();
      MockThread mockThread3 = new MockThread((ThreadGroup) null, mockThread0, "px", (byte)55);
      MockThread.interrupted();
      MockThread.setDefaultUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      MockThread mockThread4 = new MockThread((ThreadGroup) null, mockThread3, "J");
      MockThread.dumpStack();
      mockThread4.getUncaughtExceptionHandler();
      MockThread.enumerate(threadArray1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.relative(6);
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, int0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8848713335781606
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DummyCallableStatementMetaData dummyCallableStatementMetaData0 = new DummyCallableStatementMetaData();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator1 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator(internalTransactionCoordinator_MetaDataTransactionCoordinator1);
      InternalTransactionCoordinator internalTransactionCoordinator1 = new InternalTransactionCoordinator(internalTransactionCoordinator_MetaDataTransactionCoordinator0);
      internalTransactionCoordinator1.statementCompleted((AbstractStatement) null, true);
      internalTransactionCoordinator1.getConnection();
      internalTransactionCoordinator_MetaDataTransactionCoordinator1.executionStarted((AbstractStatement) null);
      internalTransactionCoordinator_MetaDataTransactionCoordinator0.executionStarted((AbstractStatement) null);
      internalTransactionCoordinator_MetaDataTransactionCoordinator0.connection = null;
      internalTransactionCoordinator0.statementCompleted((AbstractStatement) null);
      Predicate<byte[][]> predicate0 = Predicate.isEqual((Object) internalTransactionCoordinator_MetaDataTransactionCoordinator0);
      Predicate<byte[][]> predicate1 = predicate0.negate();
      predicate0.negate();
      Predicate.isEqual((Object) internalTransactionCoordinator0);
      predicate1.negate();
      predicate1.negate();
      linkedList0.removeIf(predicate0);
      linkedList0.add((byte[][]) null);
      linkedList0.add((byte[][]) null);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.close();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      assertFalse(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.absolute((-213));
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      FBConnectionProperties fBConnectionProperties1 = new FBConnectionProperties();
      FBManagedConnection fBManagedConnection0 = null;
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection((FBManagedConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBuffer0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      LinkedHashSet<byte[][]> linkedHashSet0 = new LinkedHashSet<byte[][]>();
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream((OutputStream) null);
      isc_db_handle_impl0.out = xdrOutputStream0;
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>(linkedHashSet0);
      byte[][] byteArray0 = new byte[8][3];
      byteArray0[0] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)9;
      byteArray0[1] = byteArray1;
      byteArray0[2] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[3] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)9;
      byteArray0[4] = byteArray2;
      byteArray0[5] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[6] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[7] = gDSHelper0.BLOB_LENGTH_REQUEST;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBuffer0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.beforeFirst();
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp1 = (DatabaseParameterBufferImp)databaseParameterBufferImp0.removeExtensionParams();
      databaseParameterBufferImp1.removeExtensionParams();
      DatabaseParameterBufferImp databaseParameterBufferImp2 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp3 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp4 = (DatabaseParameterBufferImp)databaseParameterBufferImp3.removeExtensionParams();
      DatabaseParameterBufferImp databaseParameterBufferImp5 = (DatabaseParameterBufferImp)databaseParameterBufferImp1.deepCopy();
      DatabaseParameterBufferImp databaseParameterBufferImp6 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp7 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp8 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp9 = (DatabaseParameterBufferImp)databaseParameterBufferImp4.deepCopy();
      DatabaseParameterBufferImp databaseParameterBufferImp10 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp11 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp12 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp13 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp4.deepCopy();
      DatabaseParameterBufferImp databaseParameterBufferImp14 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp15 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp16 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp17 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp18 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp19 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp20 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp9.removeExtensionParams();
      DatabaseParameterBufferImp databaseParameterBufferImp21 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp22 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp23 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp24 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp25 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp5.removeExtensionParams();
      DatabaseParameterBufferImp databaseParameterBufferImp26 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp27 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp28 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp29 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp14.deepCopy();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertTrue(fBCachedFetcher0.isEmpty());
      
      boolean boolean0 = fBCachedFetcher0.last();
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4941751382893083
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[3][4];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)31;
      byteArray1[1] = (byte)43;
      byteArray1[2] = (byte)111;
      byteArray1[3] = (byte)100;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)43;
      byteArray2[1] = (byte)100;
      byteArray2[2] = (byte)111;
      byteArray2[3] = (byte)43;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray1);
      byteArray2[4] = (byte)43;
      byteArray2[6] = (byte)100;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)43;
      byteArray3[1] = (byte)100;
      byteArray3[2] = (byte)31;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      byteArray3[3] = (byte)31;
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      byteArray0[2] = byteArray3;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null, (Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(102, threadFactory0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = new byte[7][0];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte) (-112);
      linkedList0.add(byteArray0);
      long long0 = 1L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      scheduledThreadPoolExecutor0.schedule(callable0, 1L, timeUnit0);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "SSQ~cO[xxiv\"0XR");
      MockThread.dumpStack();
      MockThread.getAllStackTraces();
      Thread[] threadArray0 = new Thread[9];
      threadArray0[0] = (Thread) mockThread1;
      threadArray0[1] = (Thread) mockThread1;
      threadArray0[2] = (Thread) mockThread1;
      threadArray0[3] = (Thread) mockThread1;
      MockThread mockThread2 = new MockThread();
      threadArray0[4] = (Thread) mockThread2;
      threadArray0[5] = (Thread) mockThread0;
      threadArray0[6] = (Thread) mockThread1;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread3 = new MockThread(threadGroup0, threadArray0[2]);
      MockThread mockThread4 = new MockThread(mockThread3, "");
      threadArray0[7] = (Thread) mockThread4;
      threadArray0[8] = (Thread) mockThread0;
      MockThread.enumerate(threadArray0);
      MockThread.getDefaultUncaughtExceptionHandler();
      mockThread0.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      scheduledThreadPoolExecutor0.schedule((Runnable) mockThread1, (long) (byte)55, timeUnit1);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative((byte)52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7481554572476758
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("N", 2004);
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "org.firebirdsql.gds.impl.wire.XdrOutputStream");
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      JMXPrincipal jMXPrincipal1 = new JMXPrincipal("O");
      jMXPrincipal1.toString();
      jMXPrincipal1.getName();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      jMXPrincipal1.getName();
      jMXPrincipal1.toString();
      jMXPrincipal1.equals((Object) null);
      JMXPrincipal jMXPrincipal2 = new JMXPrincipal("&Ahlou@K!`t");
      JMXPrincipal jMXPrincipal3 = new JMXPrincipal("&Ahlou@K!`t");
      jMXPrincipal3.equals("O");
      jMXPrincipal3.toString();
      jMXPrincipal3.getName();
      jMXPrincipal3.getName();
      jMXPrincipal3.toString();
      jMXPrincipal1.toString();
      jMXPrincipal3.getName();
      jMXPrincipal3.getName();
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }
}
