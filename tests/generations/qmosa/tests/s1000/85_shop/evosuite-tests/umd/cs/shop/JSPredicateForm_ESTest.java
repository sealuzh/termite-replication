/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 01:37:14 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6872739312196838
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7I.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.whitespaceChars((-4), (-2));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer2.commentChar((-4));
      stringReader0.skip((-2));
      streamTokenizer2.ttype = streamTokenizer2.ttype;
      streamTokenizer2.pushBack();
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer1.whitespaceChars((-4), (-2));
      streamTokenizer2.ordinaryChar((-2));
      streamTokenizer0.nextToken();
      streamTokenizer1.lowerCaseMode(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.parseNumbers();
      streamTokenizer2.ttype = 73;
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer0.quoteChar(73);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer3.ttype = 73;
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer3.commentChar(73);
      streamTokenizer1.ordinaryChar(73);
      streamTokenizer3.resetSyntax();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm1.equals(jSPredicateForm0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      long long0 = 1L;
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSPredicateForm0);
      jSPredicateForm0.addAll((Collection) jSSubstitution0);
      long long1 = 0L;
      System.setCurrentTimeMillis((-466L));
      long long2 = (-1408L);
      System.setCurrentTimeMillis((-1408L));
      System.setCurrentTimeMillis(4563L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(rDb]+G");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 91;
      streamTokenizer0.nval = (double) 91;
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer2.parseNumbers();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.pushBack();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("()R)*");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis((-1584L));
      System.setCurrentTimeMillis((-1584L));
      System.setCurrentTimeMillis((-1584L));
      System.setCurrentTimeMillis((-1584L));
      System.setCurrentTimeMillis((-1584L));
      System.setCurrentTimeMillis((-1584L));
      System.setCurrentTimeMillis((-1584L));
      System.setCurrentTimeMillis((-1584L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1584L));
      System.setCurrentTimeMillis((-1408L));
      System.setCurrentTimeMillis(4563L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1408L));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(;%M$C<H?#PGxL");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1586L));
      jSPredicateForm0.setSize(1605);
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      long long0 = 1L;
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      long long1 = 1L;
      System.setCurrentTimeMillis(1L);
      long long2 = 0L;
      System.setCurrentTimeMillis((-1L));
      long long3 = (-1408L);
      System.setCurrentTimeMillis((-1408L));
      System.setCurrentTimeMillis(4563L);
      System.setCurrentTimeMillis((-13L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-13L));
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6Iv.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate5);
      predicate6.negate();
      predicate0.negate();
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = Predicate.isEqual((Object) jSTerm0);
      predicate4.negate();
      Predicate<Object> predicate9 = predicate2.and(predicate5);
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate10.or(predicate1);
      predicate0.or(predicate11);
      Predicate<String> predicate12 = predicate8.negate();
      predicate8.and(predicate6);
      Predicate<Object> predicate13 = predicate9.or(predicate2);
      Predicate<String> predicate14 = predicate8.or(predicate8);
      Predicate<String> predicate15 = Predicate.isEqual((Object) jSTerm0);
      predicate13.test(predicate15);
      predicate12.test("?");
      predicate8.negate();
      Predicate<String> predicate16 = predicate12.or(predicate12);
      predicate14.and(predicate8);
      Predicate<String> predicate17 = predicate16.negate();
      predicate17.and(predicate10);
      predicate17.and(predicate7);
      predicate8.negate();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Igp)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.interrogation = (-109741938);
      streamTokenizer0.commentChar(3);
      JSJshopVars.leftBrac = (-109741938);
      JSJshopVars.flagLevel = (-109741938);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      System.setCurrentTimeMillis(0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("Z;K2e(+@ $#Ii\"s97l!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSPredicateForm0.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement("Expecting Term");
      StringReader stringReader0 = new StringReader("Expecting Term");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSPredicateForm0.clonePF();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.014983339002437
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6Iv.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate5);
      predicate6.negate();
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate0.negate();
      Predicate<String> predicate9 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate10 = predicate4.negate();
      Predicate<Object> predicate11 = predicate2.and(predicate5);
      Predicate<Object> predicate12 = predicate11.negate();
      Predicate<Object> predicate13 = predicate12.or(predicate1);
      Predicate<Object> predicate14 = predicate0.or(predicate13);
      predicate9.negate();
      predicate9.and(predicate6);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      predicate14.test(jSPredicateForm0);
      Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate15 = predicate11.or(predicate2);
      predicate9.or(predicate9);
      predicate2.test(predicate9);
      predicate0.and(predicate14);
      predicate10.negate();
      predicate15.or(predicate2);
      predicate4.or(predicate8);
      predicate5.test(predicate12);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate8.and(predicate4);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      StringBuffer stringBuffer0 = jSPredicateForm1.toStr();
      assertEquals(9, stringBuffer0.length());
      
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      assertEquals(2, jSPredicateForm2.size());
      assertNotSame(jSPredicateForm0, jSPredicateForm2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function4 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function5 = unaryOperator1.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function6 = unaryOperator1.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function7 = unaryOperator1.compose((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function8 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function.identity();
      Function.identity();
      Function<Integer, String> function9 = function7.compose((Function<? super Integer, ?>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator0.compose((Function<? super Integer, ?>) function7);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function<String, String> function10 = Function.identity();
      Function<String, Integer> function11 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function8.andThen((Function<? super String, ? extends Integer>) function11);
      Function<Object, Object> function12 = Function.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super Object, ? extends String>) function6);
      Function<String, Integer> function13 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function10.andThen((Function<? super String, ? extends Integer>) function13);
      unaryOperator1.compose((Function<? super String, ? extends String>) function10);
      UnaryOperator.identity();
      UnaryOperator.identity();
      function5.compose((Function<? super Object, ?>) function12);
      function7.compose((Function<? super String, ?>) function2);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.apply(function9);
      unaryOperator3.compose((Function<? super String, ?>) function5);
      unaryOperator3.andThen((Function<? super Object, ?>) function5);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(uPN*b]kN");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9893921626120288
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Igp)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = (-109741925);
      JSJshopVars.leftBrac = (-109741925);
      JSJshopVars.flagLevel = (-109741925);
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      JSJshopVars.slash = (-109741925);
      JSJshopVars.dot = (-109741925);
      JSJshopVars.equalT = (-109741925);
      System.setCurrentTimeMillis((-109741925));
      jSPredicateForm0.add((Object) jSTerm1);
      System.setCurrentTimeMillis((-2823L));
      System.setCurrentTimeMillis((-109741925));
      System.setCurrentTimeMillis((-109741925));
      jSPredicateForm0.print();
      System.setCurrentTimeMillis((-109741925));
      jSTerm0.clonePF();
      JSJshopVars.plus = (-109741925);
      JSJshopVars.dot = (-109741925);
      JSJshopVars.lessT = (-109741925);
      JSJshopVars.equalT = (-109741925);
      System.setCurrentTimeMillis((-109741925));
      System.setCurrentTimeMillis((-109741925));
      jSTerm1.standarizerPredicateForm();
      JSJshopVars.backquote = 0;
      JSJshopVars.apostrophe = (-109741925);
      System.setCurrentTimeMillis((-109741925));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("D;I]cQi");
      jSPredicateForm0.spliterator();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Object object0 = jSPredicateForm0.clone();
      jSTerm0.add(object0);
      jSPredicateForm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6689526276132995
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6Iv.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate2.negate();
      predicate3.or(predicate4);
      jSSubstitution0.addAll((Collection) jSTerm0);
      predicate2.negate();
      predicate0.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      predicate4.test(jSTerm0);
      Predicate<String> predicate6 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate7 = predicate2.and(predicate4);
      predicate7.negate();
      Predicate<String> predicate8 = predicate6.negate();
      predicate7.or(predicate2);
      Predicate<String> predicate9 = predicate6.or(predicate6);
      Predicate<String> predicate10 = predicate8.or(predicate6);
      predicate10.test("?");
      predicate10.or(predicate8);
      predicate9.and(predicate10);
      predicate8.negate();
      predicate8.test("wuo>qir3bmpw");
      Predicate<String> predicate11 = predicate9.and(predicate2);
      predicate11.and(predicate5);
      predicate11.and(predicate8);
      jSSubstitution0.removeIf(predicate4);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertTrue(boolean0);
      
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
      assertEquals("[6.0, [6.0]]", jSPredicateForm1.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9675579937519339
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Igp)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      JSJshopVars.flagLevel = (-1720699463);
      jSTerm0.add((Object) jSTerm1);
      jSSubstitution1.assignFailure();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.add((Object) "L-;fDt&%lY*J,Zoy");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.add((Object) "7Igp)");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.removeAllElements();
      jSSubstitution1.instance(jSTerm1);
      jSTerm0.applySubstitutionPF(jSSubstitution4);
      jSSubstitution2.trimToSize();
      jSSubstitution1.assignFailure();
      jSTerm1.standarizerPredicateForm();
      jSTerm1.clonePF();
      JSJshopVars.percent = (-14482067);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution2);
      jSSubstitution6.cloneS();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      assertEquals(0, jSSubstitution7.size());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.9396996555132768
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7I.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.add((Object) "7I.");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.removeAllElements();
      JSTerm jSTerm2 = new JSTerm();
      jSSubstitution1.instance(jSTerm2);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution4);
      jSSubstitution2.trimToSize();
      jSSubstitution1.assignFailure();
      JSPredicateForm jSPredicateForm1 = jSTerm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSTerm1.clonePF();
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm1));
      
      JSPredicateForm jSPredicateForm3 = jSTerm1.applySubstitutionPF(jSSubstitution1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = jSTerm0.matches(jSPredicateForm3, jSSubstitution2);
      JSPredicateForm jSPredicateForm4 = jSTerm0.applySubstitutionPF(jSSubstitution6);
      assertFalse(jSSubstitution6.fail());
      assertNotSame(jSPredicateForm4, jSPredicateForm0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.setSize(488);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1479L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1586L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7I.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      jSTerm1.add((Object) "7I.");
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.525508403280262
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Igp)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.assignFailure();
      jSTerm1.isGround();
      jSTerm1.applySubstitutionPF((JSSubstitution) null);
      JSJshopVars.colon = (-62248083);
      jSTerm1.ensureCapacity(41);
      JSJshopVars.leftBrac = (-3);
      JSJshopVars.flagLevel = (-3);
      JSTerm jSTerm2 = null;
      jSTerm0.add((Object) null);
      jSSubstitution1.assignFailure();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSSubstitution2.containsAll(jSTerm0);
      System.setCurrentTimeMillis((-3));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Igp)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      int int0 = (-109741925);
      JSJshopVars.interrogation = (-109741925);
      JSJshopVars.leftBrac = (-109741925);
      JSJshopVars.flagLevel = (-109741925);
      JSJshopVars.slash = (-109741925);
      jSTerm1.isEmpty();
      jSTerm0.trimToSize();
      System.setCurrentTimeMillis((-2823L));
      System.setCurrentTimeMillis((-109741925));
      System.setCurrentTimeMillis((-109741925));
      System.setCurrentTimeMillis((-109741925));
      JSJshopVars.lessT = 0;
      JSJshopVars.equalT = (-1431655763);
      System.setCurrentTimeMillis((-109741925));
      System.setCurrentTimeMillis((-109741925));
      jSTerm1.add((Object) stringReader0);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-109741925));
      System.setCurrentTimeMillis((-109741925));
      System.setCurrentTimeMillis((-109741925));
      System.setCurrentTimeMillis((-109741925));
      // Undeclared exception!
      try { 
        jSTerm1.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.removeAllElements();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.trimToSize();
      jSSubstitution3.assignFailure();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      System.setCurrentTimeMillis(2486L);
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis(2486L);
      System.setCurrentTimeMillis(2486L);
      System.setCurrentTimeMillis((-11L));
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(1);
      jSTerm0.add((Object) integer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.8545607627328535
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Igp)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.assignFailure();
      jSTerm0.add((Object) "7Igp)");
      JSJshopVars.equalT = 3363;
      jSSubstitution1.containsAll(jSSubstitution0);
      Integer integer0 = new Integer(41);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.removeAllElements();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSSubstitution0.standarizerSubs();
      JSTerm jSTerm2 = jSSubstitution4.instance(jSTerm1);
      stringReader0.ready();
      jSSubstitution1.add((Object) jSSubstitution2);
      stringReader0.close();
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      jSTerm2.equals((JSPredicateForm) jSTerm1);
      jSTerm2.listIterator();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.clear();
      jSSubstitution5.add((Object) "qH,)U4I");
      jSSubstitution5.add((Object) "7Igp)");
      // Undeclared exception!
      try { 
        jSSubstitution5.subList(3363, (-317986229));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(3363) > toIndex(-317986229)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement("Operator name expected");
      jSPredicateForm0.print();
      System.setCurrentTimeMillis((-1622L));
      System.setCurrentTimeMillis((-1622L));
      System.setCurrentTimeMillis(2486L);
      System.setCurrentTimeMillis((-19L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-111L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2486L);
      System.setCurrentTimeMillis((-19L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2486L);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.156234939134731
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Igp)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.leftBrac = (-109741925);
      JSJshopVars.flagLevel = (-109741925);
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSTerm0.isEmpty();
      System.setCurrentTimeMillis((-109741925));
      System.setCurrentTimeMillis((-2862L));
      System.setCurrentTimeMillis(63);
      JSJshopVars.rightPar = (-109741925);
      JSJshopVars.greaterT = (-109741925);
      JSJshopVars.interrogation = (-109741925);
      System.setCurrentTimeMillis((-109741925));
      jSTerm0.clonePF();
      JSJshopVars.minus = (-109741925);
      streamTokenizer0.nval = (double) (-109741925);
      JSJshopVars.verticalL = 33;
      JSJshopVars.whiteSpace = (-109741925);
      System.setCurrentTimeMillis((-109741925));
      System.setCurrentTimeMillis((-109741925));
      System.setCurrentTimeMillis((-109741925));
      System.setCurrentTimeMillis((-109741925));
      System.setCurrentTimeMillis((-109741925));
      System.setCurrentTimeMillis((-109741925));
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      JSJshopVars.rightBrac = (-109741925);
      JSJshopVars.lessT = (-109741925);
      JSJshopVars.apostrophe = (-109741925);
      JSJshopVars.flagLevel = 41;
      System.setCurrentTimeMillis(41);
      System.setCurrentTimeMillis(33);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSPredicateForm0);
      assertFalse(jSSubstitution1.fail());
      
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis((-1586L));
      jSPredicateForm0.add((Object) "call");
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1479L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis(1L);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(6, stringBuffer0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer0 = new Integer((-3364));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1865));
      UnaryOperator.identity();
      Integer integer3 = new Integer((-3364));
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer((-3364));
      Integer integer6 = new Integer(0);
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer7 = new Integer((-3364));
      unaryOperator0.apply(integer7);
      unaryOperator1.apply((Integer) null);
      unaryOperator2.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      UnaryOperator.identity();
      Integer integer8 = new Integer(0);
      Integer integer9 = new Integer((-3364));
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.apply((Integer) null);
      Integer integer10 = new Integer((-1439585372));
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer11 = new Integer((-1439585372));
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer12 = new Integer((-1439585372));
      UnaryOperator.identity();
      System.setCurrentTimeMillis((-3364));
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7I.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.whitespaceChars((-4), (-2));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer2.commentChar((-4));
      streamTokenizer2.ttype = streamTokenizer2.ttype;
      streamTokenizer2.pushBack();
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer1.whitespaceChars((-4), (-2));
      streamTokenizer2.ordinaryChar((-2));
      streamTokenizer0.nextToken();
      streamTokenizer1.lowerCaseMode(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.parseNumbers();
      streamTokenizer2.ttype = 73;
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer0.quoteChar(73);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer3.ttype = 73;
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer3.commentChar(73);
      streamTokenizer1.ordinaryChar(73);
      streamTokenizer3.resetSyntax();
      streamTokenizer1.ordinaryChars(73, 73);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      System.setCurrentTimeMillis(1L);
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0UBWbRV4T\"^");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = (-1433955981);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.nval = 0.0;
      streamTokenizer1.ordinaryChars((-3), (-1));
      streamTokenizer1.pushBack();
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.whitespaceChars((-3), (-4));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.nextToken();
      streamTokenizer1.ttype = (-1);
      streamTokenizer2.lowerCaseMode(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.whitespaceChars((-1), (-1083026940));
      streamTokenizer3.quoteChar((-3923));
      streamTokenizer3.whitespaceChars((-1), 32);
      streamTokenizer1.ordinaryChars((-1), 37);
      streamTokenizer3.pushBack();
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer3.resetSyntax();
      streamTokenizer0.ordinaryChars((-399), (-1));
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis(916L);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "7Igp)";
      StringReader stringReader0 = new StringReader("7Igp)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.assignFailure();
      int int0 = 3363;
      jSSubstitution1.containsAll(jSSubstitution0);
      stringReader0.reset();
      jSTerm0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.removeAllElements();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = jSSubstitution0.standarizerSubs();
      JSTerm jSTerm1 = jSSubstitution5.instance(jSTerm0);
      stringReader0.ready();
      jSSubstitution5.removeAllElements();
      jSSubstitution1.add((Object) jSSubstitution3);
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function4 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function5 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function6 = unaryOperator1.compose((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function7 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function.identity();
      Function.identity();
      function6.compose((Function<? super Integer, ?>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      Function.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) function6);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function<String, String> function8 = Function.identity();
      function6.compose((Function<? super String, ?>) function2);
      function7.compose((Function<? super Integer, ?>) function1);
      Function<String, Integer> function9 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function7.andThen((Function<? super String, ? extends Integer>) function9);
      Function.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super Object, ? extends String>) function5);
      Function<String, Integer> function10 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function8.andThen((Function<? super String, ? extends Integer>) function10);
      unaryOperator1.compose((Function<? super String, ? extends String>) function8);
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("(uPN*b]kN");
      StringReader stringReader1 = new StringReader("(;%M$C<H?#PGxL");
      stringReader1.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.quoteChar((-34862631));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      StringReader stringReader0 = new StringReader("7I.");
      unaryOperator1.andThen((Function<? super Integer, ?>) unaryOperator0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      unaryOperator2.apply(jSTerm0);
      unaryOperator3.andThen((Function<? super Integer, ?>) unaryOperator1);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ?>) unaryOperator2);
      unaryOperator2.andThen((Function<? super Object, ?>) unaryOperator5);
      UnaryOperator.identity();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7I.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer2.commentChar((-4));
      streamTokenizer2.ttype = (-4);
      streamTokenizer0.pushBack();
      streamTokenizer2.quoteChar((-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.parseNumbers();
      streamTokenizer2.ttype = 55;
      streamTokenizer0.whitespaceChars(55, (-4));
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer0.quoteChar(55);
      streamTokenizer2.ttype = (-4);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.ordinaryChar(55);
      streamTokenizer3.resetSyntax();
      streamTokenizer1.ordinaryChars(55, 55);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.addElement(jSTerm0);
      System.setCurrentTimeMillis(0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm2);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      SystemInUtil.addInputLine("bZR<OB{Qk+y");
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function4 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function5 = unaryOperator1.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function6 = unaryOperator1.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function7 = unaryOperator1.compose((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function8 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function.identity();
      Function.identity();
      Function<Integer, String> function9 = function7.compose((Function<? super Integer, ?>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator0.compose((Function<? super Integer, ?>) function7);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function<String, String> function10 = Function.identity();
      Function<String, Integer> function11 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function8.andThen((Function<? super String, ? extends Integer>) function11);
      Function<Object, Object> function12 = Function.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super Object, ? extends String>) function6);
      Function<String, Integer> function13 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function10.andThen((Function<? super String, ? extends Integer>) function13);
      unaryOperator1.compose((Function<? super String, ? extends String>) function10);
      UnaryOperator.identity();
      function5.compose((Function<? super Object, ?>) function12);
      function7.compose((Function<? super String, ?>) function2);
      unaryOperator0.apply(function9);
      unaryOperator0.compose((Function<? super String, ?>) function5);
      unaryOperator0.andThen((Function<? super Object, ?>) function5);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis(1683L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-2468L));
      System.setCurrentTimeMillis((-2468L));
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(1683L);
      System.setCurrentTimeMillis((-2468L));
      System.setCurrentTimeMillis(593L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1634L);
      System.setCurrentTimeMillis(570L);
      System.setCurrentTimeMillis((-2468L));
      System.setCurrentTimeMillis((-1114L));
      System.setCurrentTimeMillis(593L);
      System.setCurrentTimeMillis(1634L);
      System.setCurrentTimeMillis((-2468L));
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Integer integer0 = new Integer((-3364));
      Integer integer1 = new Integer((-319352257));
      unaryOperator2.apply(integer1);
      Integer integer2 = new Integer(0);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.apply((Integer) null);
      unaryOperator3.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.apply(integer0);
      Integer integer3 = new Integer((-3364));
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator6 = UnaryOperator.identity();
      Integer integer4 = new Integer(0);
      UnaryOperator.identity();
      Integer integer5 = new Integer((-1439585386));
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer6 = new Integer(0);
      UnaryOperator.identity();
      unaryOperator6.andThen((Function<? super Integer, ?>) unaryOperator5);
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ?>) unaryOperator7);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Integer integer0 = new Integer((-3364));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1855));
      UnaryOperator.identity();
      Integer integer3 = new Integer((-3364));
      Integer integer4 = new Integer(0);
      unaryOperator2.apply(integer4);
      Integer integer5 = new Integer(0);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.apply((Integer) null);
      unaryOperator3.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      UnaryOperator.identity();
      Integer integer6 = new Integer(0);
      Integer integer7 = new Integer((-3364));
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.apply((Integer) null);
      Integer integer8 = new Integer((-1439585372));
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer9 = new Integer((-1439585372));
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer10 = new Integer((-1439585372));
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm((String) null);
      assertEquals(0, jSPredicateForm1.size());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Integer integer0 = new Integer((-3364));
      Integer integer1 = new Integer((-1847));
      Integer integer2 = new Integer((-3364));
      unaryOperator2.apply(integer1);
      Integer integer3 = new Integer(0);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.apply((Integer) null);
      unaryOperator3.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.apply(integer0);
      Integer integer4 = new Integer((-3364));
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator6 = UnaryOperator.identity();
      Integer integer5 = new Integer((-1439585372));
      UnaryOperator.identity();
      Integer integer6 = new Integer((-1439585372));
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer7 = new Integer((-1439585372));
      UnaryOperator.identity();
      unaryOperator6.andThen((Function<? super Integer, ?>) unaryOperator5);
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ?>) unaryOperator7);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Integer integer0 = new Integer((-3342));
      Integer integer1 = new Integer((-3342));
      Integer integer2 = new Integer((-319352257));
      unaryOperator2.apply(integer2);
      Integer integer3 = new Integer(0);
      unaryOperator2.apply(integer2);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.apply((Integer) null);
      unaryOperator3.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Integer integer4 = new Integer((-3342));
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator6 = UnaryOperator.identity();
      Integer integer5 = new Integer(0);
      UnaryOperator.identity();
      Integer integer6 = new Integer((-1439585386));
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator8 = UnaryOperator.identity();
      Integer integer7 = new Integer(0);
      UnaryOperator.identity();
      unaryOperator6.andThen((Function<? super Integer, ?>) unaryOperator5);
      UnaryOperator<Object> unaryOperator9 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ?>) unaryOperator9);
      unaryOperator8.andThen((Function<? super Object, ?>) unaryOperator7);
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm("FrWHG_&)C T3$k={W");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6868359830561608
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function4 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function5 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function6 = unaryOperator1.compose((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function7 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function.identity();
      Function.identity();
      Function<Integer, String> function8 = function6.compose((Function<? super Integer, ?>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      unaryOperator0.compose((Function<? super Integer, ?>) function6);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function<String, String> function9 = Function.identity();
      function6.compose((Function<? super String, ?>) function2);
      function7.compose((Function<? super Integer, ?>) function1);
      Function<String, Integer> function10 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function7.andThen((Function<? super String, ? extends Integer>) function10);
      Function<Object, Object> function11 = Function.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super Object, ? extends String>) function5);
      Function<String, Integer> function12 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function9.andThen((Function<? super String, ? extends Integer>) function12);
      unaryOperator1.compose((Function<? super String, ? extends String>) function9);
      UnaryOperator.identity();
      function4.compose((Function<? super Object, ?>) function11);
      function6.compose((Function<? super String, ?>) function2);
      unaryOperator0.apply(function8);
      unaryOperator0.compose((Function<? super String, ?>) function4);
      unaryOperator0.andThen((Function<? super Object, ?>) function4);
      StringReader stringReader0 = new StringReader("(uPN*b]kN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7I.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.assignFailure();
      jSSubstitution1.containsAll(jSTerm0);
      stringReader0.reset();
      jSTerm0.add((Object) jSSubstitution0);
      Object object0 = jSSubstitution1.clone();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.standarizerSubs();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      stringReader0.ready();
      jSSubstitution1.removeAllElements();
      Integer integer0 = new Integer((-4));
      jSSubstitution0.add((Object) integer0);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      jSTerm1.listIterator();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution3.removeElement(object0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.clear();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution7.add((Object) integer0);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution8.addAll((Collection) jSSubstitution3);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution9.add((Object) jSSubstitution6);
      // Undeclared exception!
      try { 
        jSSubstitution8.subList(1822, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1822) > toIndex(-2)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.3300185960211162
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.removeAllElements();
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-466L));
      System.setCurrentTimeMillis((-1408L));
      System.setCurrentTimeMillis(4563L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1408L));
      StringReader stringReader0 = new StringReader("(;%M$C<H?#PGxL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSPredicateForm0.equals((JSPredicateForm) null);
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1586L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-466L));
      System.setCurrentTimeMillis((-1408L));
      System.setCurrentTimeMillis(4563L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-4L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1408L));
      System.setCurrentTimeMillis((-2365L));
      System.setCurrentTimeMillis((-1754L));
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.clear();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
