/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 04:20:35 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.341530734095519
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("l&[");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "l&[");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.makeEval(true);
      StringReader stringReader1 = new StringReader("l&[");
      StringReader stringReader2 = new StringReader("j");
      StringReader stringReader3 = new StringReader("Q*R@Z1[TToS2");
      stringReader3.close();
      jSTerm0.print();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = '*';
      charArray0[2] = ']';
      charArray0[3] = 'P';
      charArray0[4] = '!';
      try { 
        stringReader3.read(charArray0, 40, 671);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.containsAll(jSSubstitution1);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution2.retainAll(jSSubstitution0);
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution8.sort(comparator0);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      Integer integer0 = new Integer((-959));
      jSSubstitution11.add((Object) null);
      jSSubstitution3.ensureCapacity(5125);
      StringReader stringReader0 = new StringReader("(IGhf=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.386731667385109
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.exclamation = (-3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.retainAll(jSSubstitution2);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution2.add((Object) jSTerm0);
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.containsAll(jSSubstitution2);
      jSSubstitution0.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution8.add((Object) jSSubstitution4);
      jSSubstitution8.retainAll(jSSubstitution5);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution8.sort(comparator0);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      Integer integer0 = new Integer((-959));
      jSSubstitution11.add((Object) integer0);
      jSSubstitution11.ensureCapacity((-3));
      jSTerm0.applySubstitutionT(jSSubstitution11);
      StringReader stringReader0 = new StringReader("(IGhf=");
      JSJshopVars.slash = (-3);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.546094409784336
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("list");
      Integer integer0 = new Integer((-1089));
      jSTerm0.add((Object) integer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.retainAll(jSSubstitution1);
      jSSubstitution2.add((Object) stringReader0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) null);
      jSSubstitution3.add((Object) jSTerm0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution2.containsAll(jSSubstitution1);
      jSSubstitution3.add((Object) jSSubstitution6);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      jSSubstitution3.sort(comparator0);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSSubstitution6.removeAllElements();
      jSSubstitution5.add((Object) "list");
      jSTerm1.isGround();
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      jSSubstitution6.add((Object) jSSubstitution12);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution11);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5449018039405673
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.retainAll(jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.listIterator();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSSubstitution4;
      objectArray0[2] = (Object) jSSubstitution1;
      Object object0 = jSTerm1.clone();
      jSSubstitution0.add(object0);
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution4.add((Object) jSSubstitution0);
      jSSubstitution2.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.containsAll(jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution10.sort(comparator0);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSSubstitution11.removeAllElements();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      jSSubstitution11.add((Object) jSSubstitution12);
      jSSubstitution11.add((Object) "ighfs0");
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSSubstitution10.iterator();
      jSSubstitution6.add((Object) jSSubstitution11);
      jSTerm2.applySubstitutionT(jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6632068071675246
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("F9b7)y92wZ*i&R&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<JSTerm> predicate1 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<JSTerm> predicate2 = predicate1.negate();
      Predicate<JSTerm> predicate3 = predicate1.or(predicate2);
      Predicate<JSTerm> predicate4 = predicate2.and(predicate1);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) "(Mlb1%~WDo");
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate5.and(predicate6);
      Predicate.isEqual((Object) predicate0);
      Predicate<JSTerm> predicate9 = predicate4.or(predicate3);
      Predicate<Object> predicate10 = predicate6.and(predicate8);
      predicate9.or(predicate10);
      predicate3.and(predicate6);
      predicate6.or(predicate7);
      jSTerm0.isGround();
      Predicate.isEqual((Object) null);
      jSTerm0.isVariable();
      Predicate<JSTerm> predicate11 = predicate3.and(predicate2);
      predicate9.negate();
      predicate1.test(jSTerm0);
      predicate2.and(predicate1);
      predicate6.or(predicate6);
      predicate4.or(predicate6);
      predicate11.negate();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm1.equals(jSTerm2);
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.586604703809603
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.exclamation = (-3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.retainAll(jSSubstitution2);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution2.add((Object) jSTerm0);
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.clear();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.containsAll(jSSubstitution2);
      jSSubstitution0.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution8.add((Object) jSSubstitution4);
      jSSubstitution8.retainAll(jSSubstitution5);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution8.sort(comparator0);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      Integer integer0 = new Integer((-959));
      jSSubstitution11.add((Object) integer0);
      jSSubstitution11.ensureCapacity((-3));
      jSTerm0.applySubstitutionT(jSSubstitution11);
      StringReader stringReader0 = new StringReader("(IGhf=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSJshopVars.slash = (-3);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.689469326768329
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F9b7)y92wZ*i&R&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("(Mb1%~WDo");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<JSTerm> predicate1 = Predicate.isEqual((Object) jSSubstitution0);
      streamTokenizer0.nextToken();
      Predicate<JSTerm> predicate2 = predicate1.negate();
      Predicate<JSTerm> predicate3 = predicate1.or(predicate2);
      predicate2.and(predicate1);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) "(Mb1%~WDo");
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      predicate2.negate();
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate.isEqual((Object) predicate0);
      predicate3.and(predicate5);
      Predicate<Object> predicate8 = predicate5.or(predicate6);
      predicate1.test(jSTerm0);
      Predicate<Object> predicate9 = predicate8.negate();
      jSTerm0.isGround();
      Predicate<JSTerm> predicate10 = predicate3.or(predicate9);
      Predicate<Object> predicate11 = predicate7.negate();
      predicate2.and(predicate11);
      jSSubstitution0.add((Object) jSTerm0);
      Predicate<JSTerm> predicate12 = predicate3.and(predicate2);
      predicate2.negate();
      predicate12.negate();
      predicate10.negate();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.toStr();
      jSTerm1.makeEval(true);
      System.setCurrentTimeMillis(0L);
      jSTerm1.call();
      jSTerm1.cloneT();
      assertTrue(jSTerm1.isEval());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.415565193303986
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) null);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution2.add((Object) null);
      jSSubstitution2.containsAll(jSTerm1);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution5.add((Object) jSSubstitution7);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution6.containsAll(jSSubstitution0);
      jSSubstitution3.add((Object) null);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution14.sort(comparator0);
      JSSubstitution jSSubstitution15 = new JSSubstitution();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1973154576217833
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F9b4L7)y92wzZ*i&R&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.quoteChar((-4));
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.markSupported();
      streamTokenizer1.wordChars((-4), (-4));
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.wordChars(46, (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer0.sval = null;
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.slashStarComments(true);
      System.setCurrentTimeMillis((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.resetSyntax();
      streamTokenizer4.eolIsSignificant(true);
      streamTokenizer4.ordinaryChar((-4));
      streamTokenizer4.ordinaryChars((-2210), (-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer4.nextToken();
      streamTokenizer6.parseNumbers();
      streamTokenizer6.sval = null;
      streamTokenizer4.eolIsSignificant(true);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars((-4), 1);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer2);
      JSJshopVars.plus = 46;
      jSTerm1.print();
      assertEquals(41, streamTokenizer2.ttype);
      assertFalse(jSTerm1.isConstant());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      String string0 = "l&t";
      StringReader stringReader0 = new StringReader("<");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) null);
      jSTerm0.standardizerTerm();
      StringReader stringReader1 = new StringReader("WAfJ[8/Y_hal");
      StringReader stringReader2 = new StringReader("<");
      stringReader2.close();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6466487230056184
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F9b4L7)y92wzZ*i&R&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.dot = (-4);
      stringReader0.markSupported();
      streamTokenizer1.wordChars(3, 3);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = null;
      streamTokenizer2.slashStarComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.slashStarComments(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.resetSyntax();
      streamTokenizer4.eolIsSignificant(true);
      streamTokenizer4.ordinaryChar((-4));
      streamTokenizer4.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.nval = (-1188.585347852377);
      streamTokenizer6.sval = null;
      streamTokenizer4.eolIsSignificant(true);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars((-4), 1);
      streamTokenizer3.wordChars((-4), (-4));
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1017936376773805
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("6k9(d]% wGw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSJshopVars.minus = (-4);
      StringReader stringReader1 = new StringReader(" :?t%o83felQ");
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer4.whitespaceChars((-21), (-1385));
      streamTokenizer4.lowerCaseMode(false);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-2159), (-4));
      streamTokenizer4.eolIsSignificant(false);
      JSJshopVars.greaterT = (-4);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.wordChars((-4), (-2));
      streamTokenizer5.ordinaryChar(807);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader1);
      streamTokenizer3.pushBack();
      streamTokenizer6.lowerCaseMode(false);
      streamTokenizer3.ordinaryChars((-268), (-1));
      streamTokenizer3.pushBack();
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      streamTokenizer8.wordChars((-4), (-4));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3115997768638543
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4730167231075413
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSSubstitution2;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) jSSubstitution2;
      jSTerm2.toArray(objectArray0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.removeAllElements();
      jSSubstitution4.containsAll(jSSubstitution0);
      jSSubstitution1.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution3.containsAll(jSSubstitution4);
      jSSubstitution2.add(objectArray0[3]);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.211581474704376
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?y97N]S=y>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("?y97N]S=y>");
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      jSSubstitution1.add((Object) "?y97N]S=y>");
      jSTerm1.matches(jSTerm0);
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      assertEquals(2, jSSubstitution1.size());
      
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = jSTerm1.isVariable();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3631322031433784
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "l&t";
      StringReader stringReader0 = new StringReader("l&t");
      jSTerm0.add((Object) null);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5506462116893918
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("list");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) "list");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution3);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      predicate0.and(predicate0);
      int int0 = 115;
      // Undeclared exception!
      try { 
        jSTerm2.elementAt(115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 115 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5056091725408716
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) "");
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.listIterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm0);
      jSSubstitution1.listIterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution3.add((Object) jSTerm1);
      StringReader stringReader0 = new StringReader("HcMO_");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.matches(jSTerm0, jSSubstitution6);
      StringReader stringReader1 = new StringReader("HcMO_");
      jSTerm0.isGround();
      assertTrue(jSTerm0.isConstant());
      
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = jSTerm2.cloneT();
      jSTerm4.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm4.isFunction());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.70431497296402
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("list");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) "list");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm2.matches(jSTerm0);
      jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0712898286031964
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(94);
      String string0 = "(Mlb1%~WDo";
      StringReader stringReader1 = new StringReader("(Mlb1%~WDo");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) "(Mlb1%~WDo");
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate.isEqual((Object) "(Mlb1%~WDo");
      jSSubstitution0.add((Object) jSSubstitution2);
      stringReader1.close();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F9b4L7)y92wzZ*i&R&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.dot = (-4);
      stringReader0.markSupported();
      streamTokenizer1.wordChars(3, 3);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-2), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.slashStarComments(true);
      System.setCurrentTimeMillis((-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer5);
      assertFalse(jSTerm1.isEval());
      
      streamTokenizer3.ordinaryChars(41, (-4));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer7.sval = null;
      streamTokenizer5.eolIsSignificant(true);
      streamTokenizer7.lowerCaseMode(false);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      streamTokenizer3.wordChars((-4), 1);
      JSTerm jSTerm2 = jSTerm0.parseList(streamTokenizer5);
      assertTrue(jSTerm2.isConstant());
      assertEquals("[nil]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5627370797056903
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution4);
      jSSubstitution1.containsAll(jSTerm1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution7.containsAll(jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution11.sort(comparator0);
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSSubstitution7.add((Object) jSSubstitution12);
      jSTerm2.applySubstitutionT(jSSubstitution11);
      jSTerm2.applySubstitutionT(jSSubstitution2);
      jSTerm2.applySubstitutionT(jSSubstitution7);
      jSTerm0.print();
      assertEquals("[[], [[]]]", jSTerm0.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.232026424989612
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) "");
      jSTerm0.setSize(126);
      StringReader stringReader0 = new StringReader("floor");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(126);
      jSTerm0.matches(jSTerm0);
      jSTerm0.matches(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      System.setCurrentTimeMillis(126);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isEmpty();
      jSTerm0.setSize(126);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.677143755181231
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.retainAll(jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution0);
      jSSubstitution2.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution5.containsAll(jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution10.sort(comparator0);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSSubstitution11.removeAllElements();
      jSSubstitution11.add((Object) "ighfs0");
      boolean boolean0 = jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSSubstitution6.add((Object) jSSubstitution11);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution10);
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution6);
      assertEquals(2, jSTerm4.size());
      
      boolean boolean1 = jSTerm3.equals(jSTerm1);
      assertTrue(jSTerm1.isFunction());
      assertFalse(boolean1 == boolean0);
      assertTrue(jSTerm2.isFunction());
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm3, jSTerm4);
      assertFalse(jSTerm3.isEval());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5060259771426154
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "?y97N]S=y>";
      StringReader stringReader0 = new StringReader("?y97N]S=y>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      JSTerm jSTerm2 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.175167483676205
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSJshopVars.backquote = (-11);
      jSTerm0.standardizerTerm();
      String string0 = "%B%%";
      StringReader stringReader0 = new StringReader("%B%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("l&[");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "l&[");
      jSTerm0.add((Object) stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.add((Object) stringReader0);
      jSSubstitution4.containsAll(jSSubstitution0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.add((Object) jSSubstitution5);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution6);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.677143755181231
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.retainAll(jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution0);
      jSSubstitution2.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution5.containsAll(jSSubstitution7);
      jSSubstitution1.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution11.sort(comparator0);
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      jSSubstitution7.add((Object) jSSubstitution12);
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      Integer integer0 = new Integer(0);
      jSSubstitution12.add((Object) integer0);
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      jSSubstitution13.add((Object) jSSubstitution12);
      jSSubstitution13.add((Object) jSSubstitution12);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm3.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1851L);
      jSTerm1.equals(jSTerm2);
      assertEquals("[[], [[]]]", jSTerm0.toString());
      assertNotSame(jSTerm0, jSTerm2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6191741382778435
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.retainAll(jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.listIterator();
      jSSubstitution4.ensureCapacity((-3));
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution4.add((Object) jSSubstitution0);
      jSSubstitution2.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.containsAll(jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution10.sort(comparator0);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSSubstitution11.removeAllElements();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      jSSubstitution11.add((Object) jSSubstitution12);
      jSSubstitution11.add((Object) "ighfs0");
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSSubstitution10.iterator();
      jSSubstitution6.add((Object) jSSubstitution11);
      jSTerm0.call();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution5);
      assertEquals("[[], [[]]]", jSTerm0.toString());
      assertNotSame(jSTerm2, jSTerm3);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4452136283636174
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h(}Y6QIz<6^G");
      stringReader0.read();
      stringReader0.markSupported();
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = '\'';
      charArray0[2] = '[';
      charArray0[3] = 'r';
      charArray0[4] = '<';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.parseNumbers();
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSTerm) null);
      jSTerm0.print();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.719873964366554
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?y97N]S=y>");
      jSTerm0.isEmpty();
      jSTerm0.add((Object) stringReader0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm4 = jSTerm3.cloneT();
      jSTerm4.lastElement();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<JSTerm> predicate2 = Predicate.isEqual((Object) jSSubstitution0);
      jSTerm3.clone();
      Predicate<JSTerm> predicate3 = Predicate.isEqual((Object) predicate1);
      Predicate<JSTerm> predicate4 = predicate3.and(predicate2);
      predicate4.or(predicate2);
      predicate3.negate();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm2.remove((-355));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -355
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5754411327079283
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.retainAll(jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution0);
      jSSubstitution2.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm1.isGround();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm2.remove((-1877));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1877
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.593066807736993
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.retainAll(jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.listIterator();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSSubstitution4;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSSubstitution1;
      jSSubstitution4.toArray(objectArray0);
      jSSubstitution4.ensureCapacity((-3));
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution4.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.containsAll(jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution9.sort(comparator0);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution10.removeAllElements();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSSubstitution10.add((Object) jSSubstitution11);
      jSSubstitution10.add((Object) "ighfs0");
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSSubstitution9.iterator();
      jSSubstitution6.add((Object) jSSubstitution10);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution2);
      jSTerm2.toStr();
      assertEquals("[[], [[]]]", jSTerm0.toString());
      assertNotSame(jSTerm2, jSTerm3);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.198557461680363
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4a-]pA}6PNwF[`[5B2.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      int int0 = 889;
      streamTokenizer0.ordinaryChars(889, 889);
      JSTerm jSTerm1 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      stringReader0.mark(889);
      streamTokenizer0.pushBack();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0681388586106157
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?y97N]S=y>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) stringReader0);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution1.containsAll(jSSubstitution7);
      Object object0 = new Object();
      jSTerm0.clone();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution6);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("mlb1");
      jSTerm0.isGround();
      jSTerm0.standardizerTerm();
      jSTerm2.cloneT();
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.applySubstitutionT(jSSubstitution5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.1179251883779973
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?y97N]S=y>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      jSTerm1.isGround();
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      JSTerm jSTerm2 = new JSTerm();
      Predicate<String> predicate5 = Predicate.isEqual((Object) jSTerm2);
      predicate5.negate();
      Predicate<String> predicate6 = predicate5.or(predicate0);
      predicate6.and(predicate3);
      predicate0.negate();
      Predicate<String> predicate7 = predicate6.or(predicate4);
      Predicate<String> predicate8 = predicate5.and(predicate4);
      predicate6.and(predicate7);
      predicate8.or(predicate1);
      predicate7.test((String) null);
      Predicate<JSTerm> predicate9 = Predicate.isEqual((Object) jSTerm2);
      Predicate<JSTerm> predicate10 = predicate9.negate();
      Predicate<JSTerm> predicate11 = predicate10.and(predicate4);
      Predicate<JSTerm> predicate12 = predicate10.or(predicate11);
      Predicate<JSTerm> predicate13 = predicate12.and(predicate1);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      predicate12.or(predicate3);
      predicate13.negate();
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.2498848252425834
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      String string0 = "";
      jSTerm0.add((Object) "");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.add((Object) "");
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.623717663816699
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm1);
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSJshopVars.exclamation = (-3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution2.add((Object) jSTerm0);
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.containsAll(jSSubstitution2);
      jSSubstitution0.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution5.add((Object) jSSubstitution4);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution4.sort(comparator0);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      Integer integer0 = new Integer((-959));
      jSSubstitution10.add((Object) integer0);
      jSSubstitution10.ensureCapacity((-3));
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution10);
      StringReader stringReader0 = new StringReader("(IGhf=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSJshopVars.slash = (-3);
      JSTerm jSTerm4 = jSTerm2.cloneT();
      // Undeclared exception!
      try { 
        jSTerm3.equals(jSTerm4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9983916035564593
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("F9b4L7)y92wzZ*i&R&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8742439786284155
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.iterator();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.toStr();
      jSTerm2.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm1.makeEval(true);
      jSSubstitution5.containsAll(jSSubstitution4);
      jSSubstitution4.add((Object) jSSubstitution5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution7);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution9);
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("(");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.nval = (double) (-4);
      jSTerm1.isGround();
      jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.206552161926179
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      String string0 = "";
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.VarCounter = 3449;
      jSSubstitution1.add((Object) jSPredicateForm0);
      jSSubstitution1.listIterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      System.setCurrentTimeMillis((-2392L));
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.567211071174541
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.retainAll(jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution0);
      jSSubstitution2.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm1.isFunction();
      jSSubstitution1.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution9.sort(comparator0);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution10.removeAllElements();
      jSSubstitution10.add((Object) "ighfs0");
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSSubstitution6.add((Object) jSSubstitution10);
      jSTerm2.applySubstitutionT(jSSubstitution9);
      jSTerm2.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution6);
      assertEquals("[[], [[]]]", jSTerm0.toString());
      assertNotSame(jSTerm2, jSTerm3);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.797126786655615
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F9b4L7)y92wzZ*i&R&");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.assignFailure();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution1.containsAll(jSSubstitution2);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution3);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isGround();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm3.applySubstitutionT(jSSubstitution6);
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution12);
      assertEquals("[F9b4L7, [(this Collection)]]", jSTerm0.toString());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8757610050257791
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lc$4jn8 /(@R`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.ensureCapacity(45);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("F9b4L7)y92wzZ*i&R&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.lowerCaseMode(false);
      StringReader stringReader1 = new StringReader("(Mlb1%~WDo");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) stringReader0);
      Predicate.isEqual((Object) streamTokenizer0);
      jSSubstitution2.add((Object) streamTokenizer1);
      stringReader0.close();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.dot = (-4);
      JSJshopVars.minus = (-4);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StringReader stringReader2 = new StringReader("xrct");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer4.pushBack();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.7397367240649393
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSJshopVars.exclamation = (-3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.retainAll(jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution0);
      jSSubstitution2.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.containsAll(jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution10.sort(comparator0);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSSubstitution11.removeAllElements();
      jSSubstitution11.add((Object) "ighfs0");
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSSubstitution6.add((Object) jSSubstitution11);
      jSTerm2.applySubstitutionT(jSSubstitution10);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution6);
      // Undeclared exception!
      try { 
        jSTerm3.matches(jSTerm4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6152804042395517
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?y97N]S=y>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      predicate3.test(jSTerm1);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      JSTerm jSTerm2 = new JSTerm();
      Predicate<String> predicate5 = Predicate.isEqual((Object) jSTerm2);
      Predicate<String> predicate6 = predicate5.negate();
      Predicate<String> predicate7 = Predicate.isEqual((Object) streamTokenizer0);
      Predicate<String> predicate8 = predicate5.or(predicate3);
      Predicate<String> predicate9 = predicate8.negate();
      Predicate<String> predicate10 = predicate9.or(predicate7);
      Predicate<Object> predicate11 = predicate4.and(predicate3);
      predicate5.or(predicate9);
      predicate10.and(predicate3);
      Predicate<String> predicate12 = predicate6.and(predicate7);
      predicate12.negate();
      predicate12.or(predicate1);
      predicate12.test((String) null);
      predicate11.or(predicate3);
      int int0 = 1373;
      jSTerm1.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.6022976004824194
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F9b4L7)y92wzZ*i&R&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.markSupported();
      streamTokenizer0.wordChars(3, 3);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.wordChars(46, (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = null;
      streamTokenizer1.slashStarComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.resetSyntax();
      streamTokenizer3.eolIsSignificant(true);
      streamTokenizer3.ordinaryChars((-2210), (-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.eolIsSignificant(true);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), 1);
      streamTokenizer2.wordChars((-4), (-2210));
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.matches(jSTerm2);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.5878861544337055
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("Y3*`$s\"[");
      stringReader1.close();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader2 = new StringReader("j");
      stringReader1.close();
      StringReader stringReader3 = new StringReader("");
      stringReader3.markSupported();
      stringReader2.skip(2529L);
      System.setCurrentTimeMillis(2529L);
      System.setCurrentTimeMillis(1L);
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm2, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3W4+S0b5x?)(2vYYQ9V");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-254), (-254));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.0129129456276953
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution2.add(object0);
      Object object1 = new Object();
      jSSubstitution2.add(object1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution1.containsAll(jSSubstitution4);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution3.sort(comparator0);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("qGBJSm\"OFi)0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution14 = jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSSubstitution14.fail());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.221085853013325
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1BV!I`58sTpSdUjO");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(39, 39);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      JSJshopVars.slash = (-1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("F9b7)y92wZ*i&R&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      Predicate<String> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<JSTerm> predicate1 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<JSTerm> predicate2 = predicate1.or(predicate1);
      Predicate<JSTerm> predicate3 = predicate1.and(predicate1);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate4.and(predicate5);
      Predicate.isEqual((Object) predicate0);
      Predicate<JSTerm> predicate8 = predicate3.or(predicate2);
      Predicate<Object> predicate9 = predicate5.and(predicate7);
      Predicate<Object> predicate10 = predicate9.or(predicate6);
      Predicate<Object> predicate11 = predicate6.and(predicate9);
      Predicate<JSTerm> predicate12 = predicate8.or(predicate9);
      predicate2.and(predicate5);
      predicate5.or(predicate6);
      Predicate<Object> predicate13 = Predicate.isEqual((Object) null);
      predicate13.test("F9b7)y92wZ*i&R&");
      Predicate<JSTerm> predicate14 = predicate2.and(predicate1);
      predicate12.negate();
      predicate1.and(predicate1);
      predicate1.or(predicate11);
      predicate5.or(predicate5);
      predicate1.or(predicate10);
      predicate14.negate();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.5464088661557995
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("failed substitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.call();
      streamTokenizer0.ordinaryChars(2123, 131);
      jSTerm0.makeVariable();
      streamTokenizer0.slashSlashComments(false);
      stringReader0.close();
      streamTokenizer0.lowerCaseMode(false);
      JSJshopVars.whiteSpace = 32;
      jSTerm0.equals(jSTerm0);
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.3786689223892137
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?y97N]S=y>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.isConstant());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      boolean boolean0 = jSTerm0.containsAll(jSSubstitution1);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("?y97N]S=y>");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm1.print();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm1, jSSubstitution1);
      assertEquals("[?%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSSubstitution2.fail());
      assertFalse(jSTerm2.isFunction());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.111933971421973
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("failed substitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars(2123, 131);
      jSTerm0.makeVariable();
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = new JSTerm();
      stringReader0.close();
      streamTokenizer0.lowerCaseMode(false);
      JSJshopVars.whiteSpace = 32;
      jSTerm0.equals(jSTerm1);
      jSTerm1.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.5351106257178073
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?y97N]S=y>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      predicate3.test(jSTerm1);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      JSTerm jSTerm2 = new JSTerm();
      Predicate<String> predicate5 = Predicate.isEqual((Object) jSTerm2);
      Predicate<String> predicate6 = predicate5.negate();
      predicate5.or(predicate0);
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<String> predicate8 = predicate5.and(predicate4);
      predicate8.or(predicate1);
      predicate7.test((String) null);
      Predicate<JSTerm> predicate9 = Predicate.isEqual((Object) jSTerm2);
      Predicate<JSTerm> predicate10 = predicate9.negate();
      Predicate<JSTerm> predicate11 = predicate10.and(predicate4);
      predicate10.or(predicate11);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      StringReader stringReader1 = new StringReader("");
      stringReader1.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis((-2304L));
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.482379614271534
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSSubstitution1.containsAll(jSTerm1);
      assertTrue(jSTerm1.isFunction());
      
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.containsAll(jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution10.sort(comparator0);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSSubstitution11.removeAllElements();
      jSSubstitution11.add((Object) "ighfs0");
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSSubstitution6.add((Object) jSSubstitution11);
      jSTerm2.applySubstitutionT(jSSubstitution10);
      jSTerm2.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution6);
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm2.isFunction());
      assertEquals(2, jSTerm3.size());
      assertNotSame(jSTerm3, jSTerm2);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(10, stringBuffer0.length());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.7791197804807115
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F9b4L7)y92wzZ*i&R&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.dot = (-4);
      stringReader0.markSupported();
      streamTokenizer1.wordChars((-4), (-4));
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = null;
      streamTokenizer2.slashStarComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.slashStarComments(true);
      System.setCurrentTimeMillis((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.resetSyntax();
      streamTokenizer4.eolIsSignificant(true);
      streamTokenizer4.ordinaryChar((-4));
      streamTokenizer4.ordinaryChars((-2210), (-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.sval = null;
      streamTokenizer4.eolIsSignificant(true);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars((-4), 1);
      jSTerm0.parseList(streamTokenizer2);
      streamTokenizer6.wordChars((-4), 1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F9b4L7)y92wzZ*i&R&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.dot = (-4);
      jSTerm0.isEmpty();
      streamTokenizer1.wordChars((-4), (-4));
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = null;
      streamTokenizer2.slashStarComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.slashStarComments(true);
      System.setCurrentTimeMillis((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer4.resetSyntax();
      streamTokenizer4.eolIsSignificant(true);
      streamTokenizer4.ordinaryChar((-4));
      streamTokenizer4.ordinaryChars((-2210), (-4));
      streamTokenizer1.ordinaryChar((-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer3.pushBack();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer6.resetSyntax();
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer6.wordChars((-2210), (-4));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.7863864225262938
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("list");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) "list");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.assignFailure();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution5.containsAll(jSSubstitution2);
      jSSubstitution1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = jSTerm0.matches(jSTerm1, jSSubstitution9);
      assertFalse(jSSubstitution10.fail());
      
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm2.isFunction());
      
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm3.makeFunction();
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm3, jSTerm1);
      
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution12);
      assertFalse(jSTerm4.isEval());
      assertTrue(jSTerm4.isFunction());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F9b4L7)y92wzZ*i&R&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.markSupported();
      streamTokenizer1.wordChars((-4), (-4));
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.wordChars(46, (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = null;
      streamTokenizer2.slashStarComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.slashStarComments(true);
      System.setCurrentTimeMillis((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.resetSyntax();
      streamTokenizer4.eolIsSignificant(true);
      streamTokenizer4.ordinaryChar((-4));
      streamTokenizer4.ordinaryChars((-2210), (-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.parseNumbers();
      streamTokenizer6.sval = null;
      streamTokenizer4.eolIsSignificant(true);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars((-4), 1);
      JSJshopVars.plus = 46;
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.450507848988659
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.0512005747025386
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("list");
      StringReader stringReader1 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution0);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.containsAll(jSSubstitution1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution8.trimToSize();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution8.sort(comparator0);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(IGhf=");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.4721339531216096
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSJshopVars.exclamation = (-3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.retainAll(jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution0);
      jSSubstitution2.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.containsAll(jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution10.sort(comparator0);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSSubstitution11.removeAllElements();
      jSSubstitution11.add((Object) "ighfs0");
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSSubstitution7.add((Object) jSSubstitution10);
      jSTerm2.applySubstitutionT(jSSubstitution10);
      jSTerm2.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution6);
      assertEquals("[[], [[]]]", jSTerm0.toString());
      assertTrue(jSTerm3.isEval());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis((-2304L));
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F9b4L7)y92wzZ*i&R&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.dot = (-4);
      stringReader0.markSupported();
      streamTokenizer1.wordChars(3, 3);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = null;
      streamTokenizer2.slashStarComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.slashStarComments(true);
      System.setCurrentTimeMillis((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.resetSyntax();
      streamTokenizer4.eolIsSignificant(true);
      streamTokenizer4.ordinaryChar((-4));
      streamTokenizer4.ordinaryChars((-2210), (-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.sval = null;
      streamTokenizer4.eolIsSignificant(true);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer3.wordChars((-4), (-2210));
      streamTokenizer5.wordChars((-4), (-4));
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1017936376773805
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("6k9(d]% wGw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSJshopVars.minus = (-4);
      StringReader stringReader1 = new StringReader(" :?t%o83felQ");
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.wordChars(3, 3);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer4.whitespaceChars((-21), (-1385));
      streamTokenizer4.lowerCaseMode(false);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-2159), (-4));
      streamTokenizer4.eolIsSignificant(false);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.wordChars((-4), (-2));
      streamTokenizer5.ordinaryChar(807);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader1);
      streamTokenizer3.pushBack();
      streamTokenizer6.lowerCaseMode(false);
      streamTokenizer3.ordinaryChars((-268), (-1));
      streamTokenizer3.pushBack();
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      streamTokenizer8.wordChars((-4), (-4));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSJshopVars.percent = 1907;
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm2.setElementAt(jSTerm1, 1046);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1046 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.725804457253506
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("F9b7)y92wZ*i&R&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("(Mb1%~WDo");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<JSTerm> predicate1 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<JSTerm> predicate2 = predicate1.negate();
      Predicate<JSTerm> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) stringReader0);
      predicate2.and(predicate1);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      predicate2.negate();
      Predicate<Object> predicate8 = predicate6.negate();
      predicate0.negate();
      Predicate.isEqual((Object) predicate0);
      predicate3.and(predicate6);
      Predicate<Object> predicate9 = predicate6.or(predicate7);
      Predicate<Object> predicate10 = predicate9.negate();
      jSTerm0.equals(jSTerm0);
      Predicate<JSTerm> predicate11 = predicate3.or(predicate10);
      Predicate<Object> predicate12 = predicate8.negate();
      jSSubstitution1.add((Object) predicate6);
      predicate2.and(predicate12);
      Predicate<JSTerm> predicate13 = predicate3.and(predicate2);
      predicate2.negate();
      predicate13.negate();
      predicate11.negate();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.makeEval(true);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm2 = jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E9H^&?\"puY{[{");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(69);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isVariable();
      assertEquals((-2), streamTokenizer0.ttype);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.964532803443662
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("6k9(d]% wGw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSJshopVars.minus = (-4);
      StringReader stringReader1 = new StringReader(" :?t%o83felQ");
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.wordChars(3, 3);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.lowerCaseMode(false);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.parseNumbers();
      stringReader1.reset();
      streamTokenizer0.ordinaryChars((-2159), (-4));
      streamTokenizer4.eolIsSignificant(true);
      JSJshopVars.greaterT = (-4);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.wordChars((-4), (-2));
      streamTokenizer5.ordinaryChar(807);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader1);
      streamTokenizer3.pushBack();
      streamTokenizer6.lowerCaseMode(false);
      streamTokenizer3.pushBack();
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader1);
      streamTokenizer6.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      streamTokenizer8.wordChars((-167229822), (-4));
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertEquals((-2), streamTokenizer1.ttype);
      assertTrue(jSTerm1.isConstant());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.makeConstant();
      boolean boolean0 = jSTerm0.isConstant();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(76);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.plus = (-2);
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      stringReader0.read(charArray0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.lowerCaseMode(false);
      jSTerm0.makeVariable();
      streamTokenizer0.ttype = 47;
      streamTokenizer0.whitespaceChars(47, 47);
      StringReader stringReader1 = new StringReader("&:#o");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
