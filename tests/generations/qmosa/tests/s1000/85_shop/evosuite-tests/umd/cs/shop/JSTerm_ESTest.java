/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 09 22:36:52 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.makeConstant();
      jSTerm0.isConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.377819508039033
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Undefined function to be evaluated  in Call statement");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution0.fail());
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "(>F4#3V`97^I";
      StringReader stringReader0 = new StringReader("(>F4#3V`97^I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      stringReader0.ready();
      streamTokenizer0.ordinaryChars((-4), 86);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1060030727171832
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      jSSubstitution0.add((Object) jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.add((Object) jSSubstitution0);
      jSTerm1.sort((Comparator) null);
      jSSubstitution0.toArray(objectArray0);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSTerm2);
      jSSubstitution1.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution3);
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm2.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.798652206252129
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.clone();
      jSSubstitution0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      jSTerm1.sort((Comparator) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      jSTerm1.addElement(objectArray0[1]);
      objectArray0[2] = object0;
      jSSubstitution0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7481554572476763
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "^P?ns`e<&[");
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) "min");
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9328065726143313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.add((Object) "6.0");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "6.0";
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "6.0";
      objectArray0[3] = (Object) jSSubstitution1;
      objectArray0[4] = (Object) streamTokenizer0;
      objectArray0[5] = (Object) "6.0";
      objectArray0[6] = (Object) jSSubstitution0;
      jSSubstitution0.toArray(objectArray0);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5576448781015415
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.quoteChar(49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.makeVariable();
      JSJshopVars.rightPar = 45;
      streamTokenizer0.whitespaceChars(45, 45);
      stringReader0.skip((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isVariable();
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-2));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      JSJshopVars.rightPar = 45;
      jSSubstitution0.add((Object) null);
      System.setCurrentTimeMillis((-2));
      jSSubstitution2.add((Object) jSTerm1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution3);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(2, 49);
      streamTokenizer1.ttype = (-2);
      streamTokenizer1.ordinaryChars((-2), (-42));
      System.setCurrentTimeMillis(0L);
      jSTerm1.isGround();
      System.setCurrentTimeMillis((-2));
      jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      streamTokenizer1.nval = (double) 45;
      jSTerm2.call();
      assertFalse(jSTerm0.isConstant());
      assertNotSame(jSTerm0, jSTerm2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.059858232615149
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "^P?ns`e<&[");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "min");
      predicate0.negate();
      jSTerm1.print();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "^P?ns`e<&[");
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      predicate0.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate3);
      Predicate<String> predicate5 = predicate0.or(predicate4);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate6 = Predicate.isEqual((Object) jSSubstitution0);
      predicate6.and(predicate3);
      predicate5.negate();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate0);
      predicate2.negate();
      predicate7.and(predicate1);
      predicate4.or(predicate3);
      Predicate<String> predicate8 = predicate0.or(predicate4);
      predicate6.negate();
      predicate6.test("min");
      jSTerm1.removeIf(predicate8);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("^P?ns`e<&[");
      StringReader stringReader1 = new StringReader("<");
      System.setCurrentTimeMillis((-1L));
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm2.add((Object) jSSubstitution3);
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      jSTerm0.standardizerTerm();
      String string0 = "min";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      predicate0.negate();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7986522062521288
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer(368);
      jSSubstitution0.add((Object) integer0);
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution1);
      JSJshopVars.verticalL = 368;
      jSTerm0.add((Object) jSSubstitution1);
      jSSubstitution2.clone();
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "B2_C3");
      jSTerm0.add((Object) "B2_C3");
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.retainAll(jSTerm0);
      jSTerm0.add((Object) jSSubstitution0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'a';
      charArray0[1] = 'Z';
      charArray0[4] = 'n';
      charArray0[5] = '4';
      char[] charArray1 = new char[5];
      charArray1[1] = '4';
      StringReader stringReader0 = new StringReader(")|&6PlxwLxtQ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("6.00");
      char[] charArray2 = new char[0];
      CharBuffer.wrap(charArray2);
      StringReader stringReader2 = new StringReader("baG?,ueGY@+2u");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader2);
      streamTokenizer1.slashSlashComments(true);
      jSTerm0.parseList(streamTokenizer1);
      assertEquals("[[]]", jSTerm0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9638289028849247
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.setSize(2469);
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.print();
      Object[] objectArray0 = new Object[0];
      jSSubstitution0.toArray(objectArray0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm2.isFunction());
      
      Object object0 = new Object();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      assertNotSame(jSTerm3, jSTerm1);
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm3.isFunction());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3114313374732374
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("t&~elC]5r)IkvF,@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader2 = new StringReader("call");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader2);
      stringReader0.skip((-4));
      char[] charArray0 = new char[14];
      charArray0[0] = 'a';
      charArray0[1] = 'U';
      CharBuffer.wrap(charArray0);
      StringReader stringReader3 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(false);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer6);
      assertEquals(5.0, streamTokenizer6.nval, 0.01);
      assertEquals("[., [telC]5r], [nil]]", jSTerm2.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8546526185598229
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.clone();
      jSSubstitution0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      jSTerm1.sort((Comparator) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = object0;
      jSSubstitution0.toArray(objectArray0);
      jSSubstitution0.add(object0);
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSTerm1.firstElement();
      jSSubstitution1.add((Object) jSSubstitution2);
      Object object1 = new Object();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.cloneT();
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      JSTerm jSTerm5 = jSTerm3.applySubstitutionT(jSSubstitution2);
      assertTrue(jSTerm0.equals((Object)jSTerm4));
      assertTrue(jSTerm5.isFunction());
      assertEquals(2, jSTerm5.size());
      assertTrue(jSTerm2.isFunction());
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.174308236115124
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.quoteChar(49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.makeVariable();
      JSJshopVars.rightPar = 47;
      streamTokenizer0.whitespaceChars(47, 47);
      stringReader0.skip((-2));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm2);
      predicate0.negate();
      jSTerm0.print();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      StringReader stringReader1 = new StringReader("6.0");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      String string0 = "? ";
      StringReader stringReader0 = new StringReader("? ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2154056750368065
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.plus = (-2);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.makeVariable();
      JSJshopVars.rightPar = 47;
      streamTokenizer0.whitespaceChars(47, 47);
      stringReader0.skip((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-2));
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.rightPar = 47;
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1682824501765625
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(": Error reading control parameters: ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("%");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.wordChars((-885), (-596));
      streamTokenizer1.ordinaryChars((-1612921304), 911);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader2 = new StringReader(": Error reading control parameters: ");
      StringReader stringReader3 = new StringReader("%");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader3);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.162225544921092
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate6.or(predicate2);
      Predicate<String> predicate8 = predicate6.and(predicate4);
      Predicate<String> predicate9 = predicate6.negate();
      Predicate<Object> predicate10 = Predicate.isEqual((Object) "<");
      Predicate<Object> predicate11 = predicate10.and(predicate1);
      predicate9.test("");
      Predicate<Object> predicate12 = predicate11.negate();
      predicate7.test("");
      predicate5.and(predicate2);
      Predicate<Object> predicate13 = predicate3.or(predicate12);
      predicate9.or(predicate10);
      predicate2.test(predicate12);
      Predicate<String> predicate14 = predicate8.negate();
      Predicate<Object> predicate15 = predicate1.negate();
      Predicate<String> predicate16 = predicate14.and(predicate15);
      Predicate<String> predicate17 = predicate16.negate();
      predicate7.or(predicate16);
      predicate4.or(predicate15);
      Predicate<Object> predicate18 = predicate1.and(predicate13);
      predicate16.or(predicate18);
      predicate17.negate();
      predicate17.negate();
      predicate16.negate();
      StringReader stringReader0 = new StringReader("%aY");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.798652206252129
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      jSSubstitution1.assignFailure();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSSubstitution1;
      jSSubstitution1.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2820479358238375
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "^P?ns`e<&[");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "min");
      Predicate<String> predicate1 = predicate0.negate();
      jSTerm0.print();
      Predicate<String> predicate2 = Predicate.isEqual((Object) "^P?ns`e<&[");
      Predicate<Object> predicate3 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.or(predicate4);
      predicate0.or(predicate5);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      jSTerm0.equals(jSTerm1);
      Predicate<String> predicate6 = predicate1.negate();
      predicate6.or(predicate0);
      Predicate.isEqual((Object) "uwf4");
      predicate0.test("min");
      predicate2.negate();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      predicate1.test(";~u(^re5,-H>t");
      jSTerm2.removeIf(predicate2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      StringReader stringReader0 = new StringReader("min");
      System.setCurrentTimeMillis((-1L));
      JSTerm jSTerm4 = jSTerm1.cloneT();
      JSTerm jSTerm5 = jSTerm1.call();
      jSTerm2.equals(jSTerm4);
      assertEquals("[^P?ns`e<&[]", jSTerm0.toString());
      
      jSTerm0.print();
      assertTrue(jSTerm0.equals((Object)jSTerm5));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9869667702348368
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      jSTerm0.add((Object) jSSubstitution1);
      Object[] objectArray0 = new Object[0];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.toArray(objectArray0);
      jSSubstitution0.add(object0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      jSSubstitution0.add((Object) jSTerm0);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9770061729088613
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "B2_C3");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      predicate1.or(predicate5);
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate6.and(predicate5);
      predicate8.test("_=tU@ MA'/-$GS$@yc");
      Predicate<String> predicate9 = predicate0.negate();
      predicate4.negate();
      predicate8.negate();
      predicate9.test("B2_C3");
      Predicate<Object> predicate10 = predicate4.negate();
      predicate7.test("B2_C3");
      Predicate<Object> predicate11 = predicate2.and(predicate5);
      Predicate<Object> predicate12 = predicate4.or(predicate10);
      Predicate<Object> predicate13 = predicate4.negate();
      Predicate<String> predicate14 = predicate7.and(predicate12);
      Predicate<String> predicate15 = predicate0.negate();
      Predicate<String> predicate16 = predicate14.negate();
      Predicate<String> predicate17 = predicate6.negate();
      predicate15.or(predicate11);
      Predicate<String> predicate18 = predicate9.negate();
      predicate9.negate();
      predicate16.test("B2_C3");
      predicate18.negate();
      predicate17.negate();
      predicate17.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate3.and(predicate13);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1240285072098826
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.clone();
      JSJshopVars.semicolon = (-3277);
      jSSubstitution0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      jSTerm1.sort((Comparator) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = object0;
      jSSubstitution0.toArray(objectArray0);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      jSSubstitution0.add(object0);
      Object object1 = jSTerm1.firstElement();
      jSSubstitution1.add(object1);
      assertFalse(jSTerm1.isConstant());
      
      Object object2 = new Object();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSJshopVars.backquote = 2734;
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      
      JSTerm jSTerm4 = jSTerm0.call();
      assertTrue(jSTerm4.equals((Object)jSTerm3));
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm0, jSTerm2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.798652206252129
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.standardizerTerm();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.172279987989589
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement(jSTerm1);
      Object object0 = new Object();
      jSTerm1.removeElement(object0);
      Object[] objectArray0 = new Object[0];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort((Comparator) null);
      jSSubstitution0.toArray(objectArray0);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution2);
      jSSubstitution3.add((Object) jSTerm0);
      Object object1 = new Object();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      assertEquals("[[], [[]], [[]]]", jSTerm0.toString());
      assertTrue(jSTerm0.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0330001999799117
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      jSTerm1.removeElement(object0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Bn");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<String> predicate6 = predicate5.and(predicate4);
      predicate6.test("Bn");
      predicate4.and(predicate3);
      Predicate<Object> predicate7 = predicate3.or(predicate4);
      Predicate<Object> predicate8 = predicate3.negate();
      Predicate<String> predicate9 = predicate6.and(predicate8);
      Predicate<String> predicate10 = predicate6.negate();
      predicate9.negate();
      Predicate<String> predicate11 = predicate10.negate();
      Predicate<String> predicate12 = predicate6.or(predicate3);
      predicate12.negate();
      Predicate<String> predicate13 = predicate11.negate();
      predicate13.test("Bn");
      predicate12.negate();
      predicate5.negate();
      predicate10.negate();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      predicate2.and(predicate7);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      Object object1 = new Object();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm1, jSTerm2);
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm3, jSTerm2);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, stringBuffer0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7481554572476763
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "k;P6a0IK+UP}UyS";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "k;P6a0IK+UP}UyS");
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSSubstitution3);
      jSSubstitution0.clone();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9826232826520047
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.quoteChar(49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.makeVariable();
      JSJshopVars.rightPar = (-2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.replaceAll(unaryOperator0);
      UnaryOperator<JSSubstitution> unaryOperator1 = UnaryOperator.identity();
      jSTerm1.removeAllElements();
      jSSubstitution0.replaceAll(unaryOperator1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(UwF4[#TVA9I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      streamTokenizer0.wordChars(40, 40);
      streamTokenizer0.ordinaryChars(44, 112);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar(40);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "(UwF4[#TVA9I";
      StringReader stringReader0 = new StringReader("(UwF4[#TVA9I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8288411561741995
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      JSJshopVars.lessT = 1;
      JSJshopVars.semicolon = (-3277);
      jSSubstitution0.add((Object) null);
      Object object0 = new Object();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSSubstitution0.replaceAll(unaryOperator0);
      jSTerm2.sort((Comparator) null);
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2769118619200004
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = 49;
      JSJshopVars.plus = (-2);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.makeVariable();
      JSJshopVars.rightPar = 47;
      stringReader0.skip((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Object object0 = jSTerm0.clone();
      jSSubstitution3.add(object0);
      System.setCurrentTimeMillis(49);
      jSTerm1.isGround();
      jSSubstitution2.add((Object) "2^rD2@N.Joo]");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm0, jSSubstitution1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1897070975426693
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      jSTerm1.removeElement(object0);
      Object[] objectArray0 = new Object[0];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.addAll((Collection) jSSubstitution1);
      jSTerm1.sort((Comparator) null);
      jSSubstitution0.toArray(objectArray0);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution2);
      jSSubstitution3.add((Object) jSTerm0);
      Object object1 = new Object();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1935496040981333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*@bdMla0qiVY");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("*@bdMla0qiVY");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 'a';
      charArray0[4] = 'M';
      charArray0[5] = 'W';
      charArray0[6] = 'd';
      stringReader0.skip((-4));
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader2 = new StringReader("$N;$:t5?ouZ+DW");
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer6.slashSlashComments(false);
      stringReader2.read(charBuffer0);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.309632530938063
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.isGround();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.matches(jSTerm2, jSSubstitution0);
      jSTerm4.makeConstant();
      jSTerm3.isGround();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm3.isGround();
      // Undeclared exception!
      try { 
        jSTerm3.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.056612568756882
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h0?");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      streamTokenizer0.whitespaceChars(42, 42);
      stringReader0.skip((-4L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      System.setCurrentTimeMillis((-4L));
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      System.setCurrentTimeMillis((-4L));
      jSSubstitution1.removeElements(jSSubstitution3);
      stringReader0.markSupported();
      jSSubstitution1.add((Object) "-");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.makeVariable();
      jSSubstitution1.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm1.isGround();
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm0.removeElement(jSSubstitution7);
      System.setCurrentTimeMillis(3311L);
      jSTerm1.isGround();
      System.setCurrentTimeMillis(0L);
      jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.951848439223888
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.isEmpty();
      jSTerm0.add((Object) "");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.retainAll(jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.semicolon = (-3277);
      jSSubstitution0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution1.add((Object) jSSubstitution0);
      Object object1 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1904890967623043
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSSubstitution1;
      objectArray0[2] = (Object) jSTerm1;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) jSSubstitution0;
      objectArray0[6] = (Object) jSTerm0;
      objectArray0[7] = (Object) jSSubstitution0;
      objectArray0[8] = (Object) jSTerm0;
      jSSubstitution1.toArray(objectArray0);
      jSSubstitution0.removeAllElements();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.022456924203762
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "B2_~3");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertTrue(jSTerm2.isFunction());
      
      JSJshopVars.coma = 91;
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSSubstitution0.replaceAll(unaryOperator0);
      jSTerm1.sort((Comparator) null);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      assertNotSame(jSTerm1, jSTerm2);
      
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isFunction());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5576448781015415
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.quoteChar(49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.makeVariable();
      streamTokenizer0.whitespaceChars((-2), (-2));
      stringReader0.skip((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-2));
      jSSubstitution0.add((Object) null);
      System.setCurrentTimeMillis((-2));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSSubstitution0.add((Object) "6.0");
      streamTokenizer1.wordChars(2, 49);
      streamTokenizer1.ttype = 49;
      jSTerm1.setSize(49);
      jSTerm1.toStr();
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.ordinaryChars((-2), (-42));
      System.setCurrentTimeMillis(0L);
      jSTerm1.isGround();
      System.setCurrentTimeMillis((-2));
      jSTerm0.standardizerTerm();
      jSTerm0.cloneT();
      streamTokenizer1.nval = (double) 41;
      jSTerm0.call();
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.2139177396663228
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(tL^TwM)y%mOT");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0888999753452235
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = ' ';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      charArray0[4] = '>';
      charArray0[5] = '';
      charArray0[6] = '7';
      stringReader0.read(charArray0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.stream();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0330001999799117
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k;P6a0IK+UP}UyS");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      System.setCurrentTimeMillis((-4L));
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.removeElements(jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.add((Object) ": Eror read$ng contol$parameWers: ");
      jSSubstitution5.iterator();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSSubstitution4.add((Object) jSSubstitution5);
      jSSubstitution4.setSize(1);
      jSSubstitution0.assignFailure();
      jSSubstitution1.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution9.fail());
      
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isConstant());
      
      JSTerm jSTerm3 = new JSTerm();
      System.setCurrentTimeMillis((-41L));
      JSTerm jSTerm4 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution12);
      boolean boolean0 = jSTerm4.equals(jSTerm1);
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isVariable());
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.616146505109641
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.isGround();
      jSTerm2.isFunction();
      jSTerm0.makeEval(true);
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.matches(jSTerm0, jSSubstitution1);
      jSTerm1.makeConstant();
      jSTerm0.isGround();
      jSTerm0.standardizerTerm();
      StringReader stringReader0 = new StringReader("2AVIWf]");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm6 = new JSTerm(streamTokenizer0);
      jSTerm6.spliterator();
      JSTerm jSTerm7 = new JSTerm();
      JSTerm jSTerm8 = new JSTerm(streamTokenizer0);
      jSTerm8.isFunction();
      jSTerm5.equals(jSTerm3);
      JSTerm jSTerm9 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm9.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6185347948400532
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.quoteChar(49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.makeVariable();
      JSJshopVars.rightPar = 47;
      streamTokenizer0.whitespaceChars(47, 47);
      stringReader0.skip((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-2));
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.rightPar = 47;
      jSSubstitution0.add((Object) null);
      System.setCurrentTimeMillis((-2));
      jSSubstitution1.add((Object) jSTerm1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution3);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-2), (-42));
      System.setCurrentTimeMillis(0L);
      jSTerm1.isGround();
      System.setCurrentTimeMillis((-2));
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      JSTerm jSTerm4 = jSTerm3.call();
      jSTerm4.print();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm3.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4978661367769954
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.quoteChar(49);
      streamTokenizer0.eolIsSignificant(true);
      JSJshopVars.rightPar = 45;
      streamTokenizer0.whitespaceChars(45, 45);
      stringReader0.skip((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElement(jSSubstitution1);
      System.setCurrentTimeMillis((-4));
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSJshopVars.rightPar = 45;
      jSSubstitution0.add((Object) null);
      System.setCurrentTimeMillis((-4));
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.ordinaryChars((-4), (-42));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-4));
      streamTokenizer1.nval = (double) 45;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(1, jSTerm1.size());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.11336892717262
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) "");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm1);
      assertFalse(jSSubstitution0.fail());
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSPredicateForm0);
      predicate1.test(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.or(predicate4);
      Predicate<String> predicate5 = predicate0.negate();
      Predicate<String> predicate6 = predicate5.or(predicate1);
      Predicate<String> predicate7 = predicate5.and(predicate4);
      Predicate<String> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate4.negate();
      Predicate<Object> predicate10 = predicate3.negate();
      predicate6.test("");
      Predicate<Object> predicate11 = predicate1.and(predicate4);
      predicate3.or(predicate10);
      predicate8.or(predicate9);
      predicate7.negate();
      predicate0.negate();
      predicate6.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      predicate4.and(predicate1);
      Predicate<Object> predicate12 = predicate4.and(predicate1);
      predicate12.or(predicate11);
      jSTerm1.removeIf(predicate2);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm4);
      assertTrue(jSTerm4.isFunction());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.sval = "Expecting elements of the list";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*@bdMlqiVY");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.skip((-5226L));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.quoteChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = new StringReader("&s2*q\"og>'3+[CB&T");
      StringReader stringReader3 = new StringReader("*@bdMlqiVY");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
      stringReader0.close();
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(1L);
      StringReader stringReader4 = new StringReader("UgP");
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader4);
      StringReader stringReader5 = new StringReader("uw");
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader5);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.02804676777597
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.quoteChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.makeVariable();
      JSJshopVars.rightPar = (-2);
      streamTokenizer0.whitespaceChars((-2), (-2));
      stringReader0.skip((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals(jSTerm0);
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-2));
      jSSubstitution0.add((Object) null);
      System.setCurrentTimeMillis((-2));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(2, (-2));
      streamTokenizer1.ttype = (-2);
      // Undeclared exception!
      try { 
        jSTerm1.setSize((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.4083433363467455
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.quoteChar(49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.makeVariable();
      JSJshopVars.rightPar = 45;
      streamTokenizer0.whitespaceChars(45, 45);
      stringReader0.skip((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-2));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.rightPar = 45;
      jSSubstitution0.add((Object) null);
      System.setCurrentTimeMillis((-2));
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution2);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(2, 49);
      System.setCurrentTimeMillis((-2));
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.removeElement(streamTokenizer0);
      jSTerm0.matches(jSTerm1, jSSubstitution3);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.call();
      System.setCurrentTimeMillis(49);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      JSTerm jSTerm4 = jSTerm3.call();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm4.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.913303656753166
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("failed substitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.sval = "failed substitution";
      streamTokenizer0.ordinaryChars(2123, 131);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      stringReader0.close();
      streamTokenizer0.wordChars(131, 1);
      streamTokenizer0.lowerCaseMode(false);
      JSJshopVars.whiteSpace = 32;
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.392804990760048
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h0?");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      streamTokenizer0.whitespaceChars(42, 42);
      stringReader0.skip((-4L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      System.setCurrentTimeMillis((-4L));
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      System.setCurrentTimeMillis((-4L));
      jSSubstitution1.removeElements(jSSubstitution3);
      stringReader0.markSupported();
      jSSubstitution1.add((Object) "-");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.makeVariable();
      jSSubstitution1.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm1.isGround();
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm0.removeElement(jSSubstitution7);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm1.standardizerTerm();
      jSTerm0.call();
      System.setCurrentTimeMillis(2L);
      jSTerm1.cloneT();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate6.or(predicate2);
      Predicate<String> predicate8 = predicate6.and(predicate4);
      Predicate<String> predicate9 = predicate6.negate();
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate10.and(predicate1);
      predicate9.test("");
      Predicate<Object> predicate12 = predicate11.negate();
      predicate7.test("");
      predicate5.and(predicate2);
      Predicate<Object> predicate13 = predicate3.or(predicate12);
      Predicate<Object> predicate14 = Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate15 = predicate9.or(predicate10);
      jSTerm0.isConstant();
      Predicate<String> predicate16 = predicate8.negate();
      Predicate<Object> predicate17 = predicate14.negate();
      Predicate<String> predicate18 = predicate16.and(predicate17);
      Predicate<String> predicate19 = predicate15.negate();
      Predicate<String> predicate20 = predicate7.or(predicate18);
      Predicate<Object> predicate21 = predicate4.or(predicate17);
      predicate1.and(predicate13);
      Predicate<String> predicate22 = predicate20.negate();
      predicate19.negate();
      predicate18.negate();
      predicate19.negate();
      predicate18.negate();
      predicate18.or(predicate19);
      predicate22.or(predicate4);
      predicate19.and(predicate2);
      predicate2.and(predicate21);
      Predicate<String> predicate23 = predicate9.negate();
      assertFalse(predicate23.equals((Object)predicate0));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.0488828279013447
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "B2_C3");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate0.and(predicate2);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate5);
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate7.or(predicate2);
      Predicate<String> predicate9 = predicate7.and(predicate5);
      Predicate<String> predicate10 = predicate0.negate();
      Predicate<Object> predicate11 = predicate4.negate();
      Predicate<String> predicate12 = predicate9.negate();
      predicate10.test("B2_C3");
      Predicate<Object> predicate13 = predicate4.negate();
      predicate2.and(predicate5);
      Predicate<Object> predicate14 = predicate4.or(predicate13);
      predicate4.negate();
      Predicate<String> predicate15 = predicate8.and(predicate14);
      predicate5.and(predicate11);
      Predicate<String> predicate16 = predicate10.negate();
      Predicate<String> predicate17 = predicate15.negate();
      Predicate<String> predicate18 = predicate12.or(predicate16);
      predicate12.negate();
      predicate17.negate();
      predicate16.test("B2_C3");
      boolean boolean0 = jSTerm1.isFunction();
      assertTrue(boolean0);
      
      predicate2.and(predicate1);
      predicate18.negate();
      predicate4.and(predicate6);
      predicate1.or(predicate11);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertTrue(jSTerm2.isFunction());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.061757322800503
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "B2_C3");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate5);
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate7.or(predicate2);
      Predicate<String> predicate9 = predicate7.and(predicate5);
      Predicate<String> predicate10 = predicate0.negate();
      Predicate<Object> predicate11 = predicate4.negate();
      Predicate<String> predicate12 = predicate9.negate();
      predicate10.test("B2_C3");
      Predicate<Object> predicate13 = predicate4.negate();
      jSTerm0.isFunction();
      predicate2.and(predicate5);
      Predicate<Object> predicate14 = predicate4.or(predicate13);
      predicate4.negate();
      Predicate<String> predicate15 = predicate8.and(predicate14);
      Predicate<String> predicate16 = predicate0.negate();
      Predicate<String> predicate17 = predicate15.negate();
      Predicate<String> predicate18 = predicate12.or(predicate16);
      predicate12.negate();
      predicate17.negate();
      predicate16.test("B2_C3");
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.and(predicate1);
      JSTerm jSTerm2 = new JSTerm();
      predicate4.and(predicate6);
      predicate1.or(predicate11);
      jSTerm0.removeIf(predicate18);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      assertTrue(jSTerm3.isFunction());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution1);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm4, jSTerm1);
      assertTrue(jSTerm4.isFunction());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*@bdMla0qiVY");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("*@bdMla0qiVY");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 'a';
      charArray0[4] = 'M';
      charArray0[5] = 'W';
      charArray0[6] = 'd';
      CharBuffer.wrap(charArray0);
      StringReader stringReader2 = new StringReader("$N;$:t5?ouZ+DW");
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertEquals("Expecting ", stringBuffer0.toString());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate6.or(predicate2);
      Predicate<String> predicate8 = predicate6.and(predicate4);
      Predicate<String> predicate9 = predicate6.negate();
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate10.and(predicate1);
      predicate9.test("w9,zaZ)/J1Kq");
      Predicate<Object> predicate12 = predicate11.negate();
      predicate7.test("w9,zaZ)/J1Kq");
      predicate5.and(predicate2);
      Predicate<Object> predicate13 = predicate3.or(predicate12);
      Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate14 = predicate9.or(predicate10);
      jSTerm0.isEmpty();
      Predicate<String> predicate15 = predicate8.negate();
      Predicate<Object> predicate16 = predicate4.negate();
      Predicate<String> predicate17 = predicate15.and(predicate16);
      Predicate<String> predicate18 = predicate14.negate();
      Predicate<String> predicate19 = predicate7.or(predicate17);
      predicate1.and(predicate13);
      predicate19.negate();
      predicate18.negate();
      predicate17.negate();
      predicate18.negate();
      predicate17.negate();
      StringReader stringReader0 = new StringReader("- ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate6.or(predicate2);
      Predicate<String> predicate8 = predicate6.and(predicate4);
      Predicate<String> predicate9 = predicate6.negate();
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate10.and(predicate1);
      predicate9.test("w9,zaZ)/J1Kq");
      Predicate<Object> predicate12 = predicate11.negate();
      predicate7.test("w9,zaZ)/J1Kq");
      predicate5.and(predicate2);
      Predicate<Object> predicate13 = predicate3.or(predicate12);
      Predicate<Object> predicate14 = Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate15 = predicate9.or(predicate10);
      jSTerm0.isEmpty();
      Predicate<String> predicate16 = predicate8.negate();
      Predicate<Object> predicate17 = predicate14.negate();
      Predicate<String> predicate18 = predicate16.and(predicate17);
      Predicate<String> predicate19 = predicate15.negate();
      Predicate<String> predicate20 = predicate7.or(predicate18);
      predicate1.and(predicate13);
      predicate20.negate();
      predicate19.negate();
      predicate18.negate();
      predicate19.negate();
      predicate18.negate();
      StringReader stringReader0 = new StringReader("- ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "P?ns`<&");
      predicate0.negate();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.9865302366210547
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      Object object0 = jSTerm1.clone();
      assertEquals("[[], [[]]]", jSTerm0.toString());
      
      jSSubstitution0.add(object0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[0];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort((Comparator) null);
      jSSubstitution0.toArray(objectArray0);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) jSTerm0);
      Object object2 = new Object();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm3.makeFunction();
      jSTerm3.cloneT();
      assertTrue(jSTerm0.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.162225544921092
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uwf");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(46, 86);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.ttype = 40;
      streamTokenizer0.whitespaceChars(40, (-3603));
      streamTokenizer0.pushBack();
      streamTokenizer1.quoteChar(127);
      streamTokenizer0.sval = null;
      streamTokenizer0.quoteChar(46);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("6.00");
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      CharBuffer.wrap(charArray0);
      StringReader stringReader2 = new StringReader("|q<VCRMH33{p] w");
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader1);
      streamTokenizer7.slashSlashComments(true);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K%$XZTDT>`i! S#r\"ZY");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.4287691203187398
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      jSSubstitution0.toArray(objectArray0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution2);
      StringReader stringReader0 = new StringReader("o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSTerm1, jSSubstitution3);
      assertTrue(jSSubstitution4.fail());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.equalT = 1810;
      JSJshopVars.lessT = 2;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(UF4#!V`97^I");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), 86);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.976266184526568
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      jSTerm2.makeEval(false);
      jSSubstitution0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      jSTerm1.sort((Comparator) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = object0;
      jSSubstitution0.toArray(objectArray0);
      jSTerm0.isGround();
      assertEquals("[[null], [[null]]]", jSTerm0.toString());
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add(object0);
      JSSubstitution jSSubstitution3 = (JSSubstitution)jSTerm1.firstElement();
      jSSubstitution1.add((Object) jSSubstitution3);
      Object object1 = new Object();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm3.applySubstitutionT(jSSubstitution2);
      assertTrue(jSTerm0.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k;P6a0IK+UP}UyS");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      System.setCurrentTimeMillis((-4L));
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.removeElements(jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.add((Object) ": Error reading control parameters: ");
      jSSubstitution5.iterator();
      boolean boolean0 = jSSubstitution4.add((Object) jSSubstitution5);
      jSSubstitution4.setSize(1);
      jSSubstitution0.assignFailure();
      jSSubstitution1.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      System.setCurrentTimeMillis((-4));
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      System.setCurrentTimeMillis(2L);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      System.setCurrentTimeMillis(600L);
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean1 = jSTerm0.isEval();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!e.xVtZ({zv7iR4z)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), 86);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate6.or(predicate2);
      Predicate<String> predicate8 = predicate6.and(predicate4);
      Predicate<String> predicate9 = predicate6.negate();
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate10.and(predicate1);
      predicate9.test("");
      Predicate<Object> predicate12 = predicate11.negate();
      predicate7.test("");
      predicate5.and(predicate2);
      predicate11.or(predicate1);
      predicate3.or(predicate12);
      Predicate<Object> predicate13 = Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate14 = predicate9.or(predicate10);
      predicate2.test(predicate12);
      Predicate<String> predicate15 = predicate8.negate();
      Predicate<Object> predicate16 = predicate13.negate();
      Predicate<String> predicate17 = predicate15.and(predicate16);
      predicate14.negate();
      predicate7.or(predicate17);
      predicate4.or(predicate16);
      StringReader stringReader0 = new StringReader("u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(UF4#!V`97^I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), 86);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = "(>F4#3V`97^I";
      StringReader stringReader0 = new StringReader("(>F4#3V`97^I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      stringReader0.ready();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(UF4#!V`97^I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 46;
      streamTokenizer0.ordinaryChars(46, 86);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      System.setCurrentTimeMillis(2084L);
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(UwF4[#TVA9I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(40, 40);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) stringReader0);
      StringReader stringReader1 = new StringReader("Xv_c6>{k}.gwXc['7w");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer0.quoteChar(834);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      stringReader1.ready();
      StringReader stringReader2 = new StringReader("u");
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      stringReader1.close();
      JSTerm jSTerm1 = new JSTerm();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      jSTerm0.call();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.4978661367769954
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate1.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate6.or(predicate2);
      Predicate<String> predicate8 = predicate6.and(predicate4);
      Predicate<String> predicate9 = predicate6.negate();
      Predicate<Object> predicate10 = Predicate.isEqual((Object) "<");
      predicate10.and(predicate1);
      predicate9.test("");
      Predicate<Object> predicate11 = predicate3.negate();
      predicate7.test("");
      predicate5.and(predicate2);
      predicate3.or(predicate11);
      predicate9.or(predicate10);
      predicate2.test(predicate11);
      Predicate<String> predicate12 = predicate8.negate();
      Predicate.isEqual((Object) "");
      Predicate<Object> predicate13 = predicate1.negate();
      Predicate<String> predicate14 = predicate12.and(predicate13);
      predicate14.negate();
      predicate7.or(predicate14);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      System.setCurrentTimeMillis(1L);
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.isConstant());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
