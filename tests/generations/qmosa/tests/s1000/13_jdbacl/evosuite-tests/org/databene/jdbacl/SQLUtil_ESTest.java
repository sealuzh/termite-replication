/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 02:14:46 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.time.ZoneId;
import java.time.temporal.TemporalAccessor;
import java.time.zone.ZoneRulesException;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Predicate;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.store.access.btree.BTreeController;
import org.apache.derby.impl.store.raw.xact.GlobalXactId;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.field.TypeConvertionException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(97, threadFactory0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      MockThread mockThread0 = new MockThread((Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Thread[] threadArray0 = new Thread[0];
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread0, scheduledThreadPoolExecutor0);
      mockThread0.setContextClassLoader(classLoader0);
      MockThread.enumerate(threadArray0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread0, scheduledThreadPoolExecutor0);
      MockThread mockThread1 = new MockThread();
      scheduledThreadPoolExecutor0.getThreadFactory();
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread1, scheduledThreadPoolExecutor0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread1, scheduledThreadPoolExecutor0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread1, scheduledThreadPoolExecutor0);
      MockThread.getDefaultUncaughtExceptionHandler();
      mockThread1.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      scheduledThreadPoolExecutor0.execute(mockThread1);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread1, scheduledThreadPoolExecutor0);
      scheduledThreadPoolExecutor0.setRejectedExecutionHandler(threadPoolExecutor_DiscardPolicy0);
      scheduledThreadPoolExecutor0.getPoolSize();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(T{mz$,-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (T{mz$,-
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5503563043733695
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.mutatesDataOrStructure("S.[yU");
      SQLUtil.mutatesDataOrStructure("S.[yU");
      SQLUtil.mutatesDataOrStructure("agogre");
      SQLUtil.mutatesDataOrStructure("exeD");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("l261oxKe&3x@eX");
      assertNull(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Random.setNextRandom((-2234));
      Random.setNextRandom((-2234));
      VersionNumber versionNumber0 = VersionNumber.valueOf("truncates.[yu");
      VersionNumber versionNumber1 = VersionNumber.valueOf("S.[yU");
      FileSystemHandling.shouldAllThrowIOExceptions();
      VersionNumber versionNumber2 = VersionNumber.valueOf("org.databene.jdbacl.SQLUtil");
      versionNumber2.compareTo(versionNumber1);
      versionNumber2.toString();
      VersionNumber versionNumber3 = VersionNumber.valueOf((String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("org.databene.jdbacl.SQLUtil", "S.[yU", versionNumber0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      Random.setNextRandom((-1717986916));
      Random.setNextRandom(1673);
      Random.setNextRandom((-276));
      VersionNumber.valueOf("S.[yU");
      String string0 = SQLUtil.substituteMarkers("", "l261oxKe&3x@eX", versionNumber3);
      assertEquals("", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2045080224515636
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.getInteger((String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBDataType dBDataType0 = DBDataType.getInstance((-2374), "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setDoc((String) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer.toUnsignedLong((-2374));
      String[] stringArray0 = new String[20];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      Integer.toUnsignedLong((-2374));
      stringArray0[4] = "";
      defaultDBColumn0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      SQLUtil.normalize(" : (3,3)", true);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-2374));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.353714757339867
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      System.setCurrentTimeMillis((-1465L));
      SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.reset();
      Locale.getISOCountries();
      constantActionActivation0.isSingleExecution();
      TableContainer tableContainer0 = new TableContainer("Yk\"*a9X0-nM'bHY");
      tableContainer0.getTable("*!");
      DBDataType dBDataType0 = DBDataType.getInstance(2147483645, "nI)Spc%^bD");
      Integer integer0 = new Integer(5);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("nI)Spc%^bD", (DBTable) null, dBDataType0, integer0, integer0);
      defaultDBColumn0.toString();
      Random.setNextRandom(48);
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      ConstantActionActivation constantActionActivation2 = new ConstantActionActivation();
      constantActionActivation2.getForCreateTable();
      ConstantActionActivation constantActionActivation3 = new ConstantActionActivation();
      ConstantActionActivation constantActionActivation4 = new ConstantActionActivation();
      constantActionActivation4.setSingleExecution();
      // Undeclared exception!
      try { 
        constantActionActivation0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1094574574708624
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Boolean boolean0 = new Boolean(" (");
      boolean boolean1 = SQLUtil.isProcedureCall("alter tablenclob");
      Boolean boolean2 = SQLUtil.mutatesStructure("executes.[yu");
      assertTrue(boolean2.equals((Object)boolean1));
      
      Integer integer0 = new Integer((-2050183287));
      Integer.min((-2050183287), (-2050183287));
      Integer.compareUnsigned(22025, (-2050183287));
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = Integer.getInteger("drop index", integer1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECD * FROM ");
      Integer.compareUnsigned((-2050183287), 57);
      DBDataType dBDataType0 = DBDataType.getInstance((-2050183287), "alter tablenclob");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tablenclob", defaultDBTable0, dBDataType0, integer2, integer1);
      String string0 = SQLUtil.normalize("executes.[yu", false);
      assertEquals("executes.[ yu", string0);
      
      Boolean.valueOf("create table ");
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      MockFileWriter mockFileWriter0 = new MockFileWriter("executes.[ yu");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("aJeAMnaJj3");
      boolean boolean3 = SQLUtil.isQuery("aJeAMnaJj3");
      assertFalse(boolean3);
      
      Locale locale0 = new Locale("SELECD * FROM ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("43X16.U");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      System.setCurrentTimeMillis((-2050183287));
      PipedWriter pipedWriter0 = new PipedWriter();
      String string1 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("AGoGREGABxIOV");
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = '\'';
      charArray0[2] = '\\';
      charArray0[3] = 'r';
      charArray0[4] = 'i';
      charArray0[5] = 'e';
      charArray0[6] = 'l';
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.chars();
      FromVTI fromVTI0 = new FromVTI();
      fromVTI0.getContextManager();
      BTreeController bTreeController0 = new BTreeController();
      bTreeController0.getXactMgr();
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      Locale locale0 = Locale.GERMANY;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":l2?");
      System.setCurrentTimeMillis(200L);
      PipedWriter pipedWriter0 = new PipedWriter();
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter session");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9976435342075187
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = "X^pu~i/2Stc4";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("DISTINCTSCAN", false, "X^pu~i/2Stc4", "SELECT * FROM ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.18980815585157
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBDataType dBDataType0 = DBDataType.getInstance((-2374), "aO");
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" REFERENCES ", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      defaultDBColumn0.setDoc((String) null);
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.parseColumnTypeAndSize(" REFERENCES  AO(3) NOT NULL");
      String[] stringArray0 = new String[20];
      stringArray0[0] = " REFERENCES ";
      stringArray0[1] = null;
      stringArray0[2] = " REFERENCES ";
      stringArray0[3] = " REFERENCES ";
      stringArray0[4] = "aO";
      Object[] objectArray0 = new Object[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[0] = (Object) " REFERENCES ";
      objectArray0[1] = (Object) "aO";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.203456186693981
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "MPuVxNq", true, (String[]) null);
      dBUniqueConstraint0.toString();
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("DISTINCTSCAN", false, dBUniqueConstraint0);
      dBUniqueIndex0.isIdentical(dBUniqueConstraint0);
      dBUniqueIndex0.isIdentical(dBUniqueConstraint0);
      dBUniqueIndex0.setName("Q[WL");
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1710, "U\"pzoLf3v|8");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|I[DPD+", dBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.596550072545664
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "select into";
      stringArray0[1] = "select into";
      MockFileWriter mockFileWriter0 = new MockFileWriter("create materialized view.m\"vajj<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select into");
      SQLUtil.isQuery("select into");
      Locale locale0 = Locale.GERMANY;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("select into");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(0L);
      PipedWriter pipedWriter0 = new PipedWriter();
      SQLUtil.mutatesDataOrStructure("UNIQUE ");
      defaultDBTable0.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.94379287118616
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("AGoGREGATIOV");
      assertFalse(boolean0);
      
      SQLUtil.isDML("AGoGREGATIOV");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "AGoGREGATIOV";
      stringArray0[1] = "AGoGREGATIOV";
      stringArray0[2] = "AGoGREGATIOV";
      String[] stringArray1 = new String[8];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray1[0] = "3Ry:hDOZr";
      stringArray0[2] = "Q+*i.I@BC|o-E(-T";
      stringArray1[2] = "Q+*i.I@BC|o-E(-T";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Q+*i.I@BC|o-E(-T", false, dBUniqueConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("AGoGREGATIOV", false, defaultDBTable0, (String[]) null, defaultDBTable0, stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      dBUniqueConstraint0.toString();
      PipedWriter pipedWriter0 = new PipedWriter();
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("~PjnaD7[|.GDZ+TmMy", false, dBUniqueConstraint0);
      dBUniqueIndex0.addColumnName("org.apache.derby.impl.sql.execute.HashTableResultSet");
      dBUniqueIndex0.getTable();
      dBUniqueConstraint0.equals("3Ry:hDOZr");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.mutatesStructure(",FIH");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("create");
      assertNull(boolean1);
      
      SQLUtil.isQuery("AGoGREGATIOV");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT create UNIQUE (AGoGREGATIOV, AGoGREGATIOV, Q+*i.I@BC|o-E(-T, org.apache.derby.impl.sql.execute.HashTableResultSet)", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8861418508003447
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)47;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">Z S}$TT!2fTi";
      stringArray0[1] = ">Z S}$TT!2fTi";
      stringArray0[2] = ">Z S}$TT!2fTi";
      stringArray0[3] = ">Z S}$TT!2fTi";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ">Z S}$TT!2fTi", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.mutatesStructure(">Z S}$TT!2fTi");
      Random.setNextRandom(3640);
      SQLUtil.mutatesDataOrStructure("U4[8kS^Ixd@]@)t");
      SQLUtil.isQuery("alter index");
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec1);
      Random.setNextRandom((byte)75);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6473557802413707
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnListWithTableName("3HLADgZ:_c\"-(#!LNK ", stringArray0);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      dynamicByteArrayOutputStream0.reset();
      dynamicByteArrayOutputStream0.setBeginPosition((byte) (-53));
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "(, , )";
      objectArray0[1] = (Object) stringArray0[1];
      objectArray0[2] = (Object) stringArray0[1];
      objectArray0[4] = (Object) "!h";
      objectArray0[5] = (Object) stringArray0[2];
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      SQLUtil.normalize("3HLADgZ:_c\"-(#!LNK .null, 3HLADgZ:_c\"-(#!LNK .null, 3HLADgZ:_c\"-(#!LNK .null", true);
      StringBuilder stringBuilder0 = new StringBuilder("!h");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("null = '(, , )' AND null = null AND null = null", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("setURL(String,URL)", stringBuilder1);
      assertEquals("!h and null = '(, , )' AND null = null AND null = null or setURL(String,URL)", stringBuilder1.toString());
      assertEquals("!h and null = '(, , )' AND null = null AND null = null or setURL(String,URL)", stringBuilder2.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.694323870102742
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      SQLUtil.isProcedureCall("alter tablenclob");
      SQLUtil.mutatesStructure("executes.[yu");
      Integer integer0 = new Integer((-2050183287));
      Integer.min((-2050183287), (-2050183287));
      Integer.compareUnsigned(22025, (-2050183287));
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = Integer.getInteger("drop index", integer1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("executes.[yu");
      Integer.compareUnsigned((-2050183287), 57);
      DBDataType dBDataType0 = DBDataType.getInstance((-2050183287), "alter tablenclob");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tablenclob", defaultDBTable0, dBDataType0, integer2, integer1);
      SQLUtil.removeComments("drop index");
      Boolean.valueOf("executes.[yu");
      Integer integer3 = new Integer(22025);
      MockFileWriter mockFileWriter0 = new MockFileWriter("drop index");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("aJeAMnaJV3");
      SQLUtil.isQuery("aJeAMnaJV3");
      Locale locale0 = Locale.UK;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("43X16.U");
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = 'o';
      mockPrintWriter1.print(charArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      PipedWriter pipedWriter0 = new PipedWriter();
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("executes.[yu");
      assertNull(boolean1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SQLUtil.isDDL("H;p&_]:DmyL");
      SQLUtil.renderColumnListWithTableName("H;p&_]:DmyL", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder("^/");
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'L';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.355785150714608
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "select into";
      stringArray0[1] = "select into";
      PipedWriter pipedWriter0 = new PipedWriter();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.18980815585157
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer0 = new Integer((byte) (-3));
      DBDataType dBDataType0 = DBDataType.getInstance((-2374), "aO");
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" REFERENCES ", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.parseColumnTypeAndSize(" REFERENCES  AO(-3) NULL");
      String[] stringArray0 = new String[20];
      stringArray0[0] = " REFERENCES ";
      stringArray0[1] = null;
      stringArray0[2] = " REFERENCES ";
      stringArray0[3] = " REFERENCES ";
      stringArray0[4] = "aO";
      Object[] objectArray0 = new Object[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[0] = (Object) " REFERENCES ";
      objectArray0[1] = (Object) "aO";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.18980815585157
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBDataType dBDataType0 = DBDataType.getInstance((-2374), "aO");
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("aO", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setDoc((String) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.parseColumnTypeAndSize("aO AO(3,3) NULL");
      String[] stringArray0 = new String[20];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "aO";
      Object[] objectArray0 = new Object[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[0] = (Object) "aO";
      objectArray0[1] = (Object) "aO";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0102426827342152
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-53);
      byteArray0[4] = (byte)8;
      defaultDBTable0.getIndex("updatedchp6{il as create materialized view on not.null = create materialized view.null and not.null = create materialized view.null and not.null = create materialized view.null and not.null = create materialized view.null and not.null = create materialized view.null and not.null = create materialized view.null");
      byteArray0[5] = (byte) (-16);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      MockFileWriter mockFileWriter0 = new MockFileWriter("delete", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("updatedchp6{il as create materialized view on not.null = create materialized view.null and not.null = create materialized view.null and not.null = create materialized view.null and not.null = create materialized view.null and not.null = create materialized view.null and not.null = create materialized view.null");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)8;
      Object object0 = new Object();
      objectArray0[1] = object0;
      mockPrintWriter0.printf("delete", objectArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      mockPrintWriter0.print((int) (byte)8);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("delete", false, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      NameSpec nameSpec2 = NameSpec.NEVER;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec2, mockPrintWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      System.setCurrentTimeMillis((-1458L));
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.whitespaceChars(1012, 1012);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.quoteChar((-1628044373));
      SQLUtil.renderNumber(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.ordinaryChars(32, (-157759411));
      Random.setNextRandom(543);
      Random.setNextRandom((-4));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLUtil.isQuery("select42y07");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = (-2067);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-2067));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6274261532274057
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedWriter pipedWriter0 = new PipedWriter();
      defaultDBTable1.getPrimaryKeyConstraint();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "y?!tp !2C,B$?";
      stringArray0[1] = "Yb$E";
      stringArray0[2] = "1";
      stringArray0[3] = "B}]K%p~^S/M![k1";
      stringArray0[4] = "select intoagogregatiov";
      stringArray0[5] = "ocqP}{$uL4?";
      SQLUtil.renderQuery(defaultDBTable2, stringArray0, stringArray0);
      String string0 = "selectreferences";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4801873885045245
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SQLUtil.isProcedureCall("AGoGREGATIOV");
      SQLUtil.isDML("AGoGREGATIOV");
      SQLUtil.isQuery("AGoGREGATIOV");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "AGoGREGATIOV";
      stringArray0[1] = "AGoGREGATIOV";
      stringArray0[2] = "AGoGREGATIOV";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "3Ry:hDOZr";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)63;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SQLUtil.mutatesStructure("3Ry:hDOZr");
      SQLUtil.mutatesDataOrStructure("o -C2uM^y2 h\"QX3n");
      SQLUtil.typeAndName(defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.4280225199202605
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, columnDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("UUIQD", "dFop moerialized view", versionNumber0);
      columnDescriptorList0.ensureCapacity(0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance((-1982292535), "UUIQD");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      Character character0 = new Character('&');
      columnDescriptorList0.add((Object) character0);
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SQLUtil.mutatesStructure("dFop moerialized view");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("o -C2uM^y2 h\"QX3n");
      assertNull(boolean0);
      
      SQLUtil.typeAndName(dBColumnArray0[0]);
      boolean boolean1 = SQLUtil.isDDL("drop index");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" DEFAULT ", 9);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBSchema dBSchema0 = new DBSchema(", ");
      DBPackage dBPackage0 = new DBPackage("!P/", dBSchema0);
      String string0 = SQLUtil.typeAndName(dBPackage0);
      assertNotNull(string0);
      assertEquals("null !P/", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4473182575772356
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.getInteger((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance((-2374), "aO");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("aO", (DBTable) null, dBDataType0, integer0, integer0);
      defaultDBColumn0.setDoc((String) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer.toUnsignedLong((-2374));
      String[] stringArray0 = new String[20];
      stringArray0[0] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      Integer.toUnsignedLong((-2374));
      stringArray0[4] = "aO";
      Object[] objectArray0 = new Object[6];
      SQLUtil.renderValue(defaultDBTable0);
      objectArray0[0] = (Object) "aO";
      objectArray0[1] = (Object) "aO";
      SQLUtil.normalize("create talei+e", true);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      vector0.removeIf(predicate3);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("[aO : AO(3,3)]", vector0.toString());
      assertEquals("aO", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Boolean boolean0 = new Boolean("alter tableselect intos.[yu");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      PipedWriter pipedWriter0 = new PipedWriter();
      Boolean boolean1 = SQLUtil.mutatesStructure("alter tableselect intos.[yu");
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean("alter tableselect intos.[yu");
      Boolean boolean3 = new Boolean((String) null);
      assertFalse(boolean3.equals((Object)boolean1));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.add((Object) "dt column");
      columnDescriptorList0.add((Object) "R");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("create materialized viewforeign key (, , select intoforeign key () references null(), ) references null(, , select intoforeign key () references null(), )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(97, threadFactory0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      MockThread mockThread0 = new MockThread();
      scheduledThreadPoolExecutor0.getThreadFactory();
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread0, scheduledThreadPoolExecutor0);
      scheduledThreadPoolExecutor0.execute(mockThread0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread0, scheduledThreadPoolExecutor0);
      scheduledThreadPoolExecutor0.setRejectedExecutionHandler(threadPoolExecutor_DiscardPolicy0);
      scheduledThreadPoolExecutor0.getPoolSize();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(T{mz$,-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (T{mz$,-
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7774503447663808
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Boolean boolean0 = new Boolean("2iQi&");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      PipedWriter pipedWriter0 = new PipedWriter();
      SQLUtil.mutatesStructure("create");
      Boolean boolean1 = new Boolean("6V(!6A");
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9770128063966104
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "AGoGREGATIOV";
      SQLUtil.isProcedureCall("AGoGREGATIOV");
      String string1 = "_D[!}*)V~";
      SQLUtil.normalize("_D[!}*)V~", false);
      SQLUtil.mutatesStructure("_D [ ! } *) V ~");
      SQLUtil.mutatesDataOrStructure("_D [ ! } *) V ~");
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("select intorl+;xtd\"ds$u*ap6id", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.648853725639435
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "DISTINCTSCAN", true, (String[]) null);
      String string0 = dBUniqueConstraint0.toString();
      assertEquals("CONSTRAINT DISTINCTSCAN UNIQUE ()", string0);
      
      dBUniqueConstraint0.setName("renameselect * from");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("DISTINCTSCAN", false, dBUniqueConstraint0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      MockFileWriter mockFileWriter0 = new MockFileWriter("DISTINCTSCAN");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CONSTRAINT DISTINCTSCAN UNIQUE ()");
      boolean boolean0 = SQLUtil.isQuery("DISTINCTSCAN");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("5V");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter1);
      System.setCurrentTimeMillis(0L);
      PipedWriter pipedWriter0 = new PipedWriter();
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("create unique index");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.542746016770894
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "&K4BTy[?7");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      defaultDBTable0.getComponents();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":ez2");
      String string0 = dBForeignKeyConstraint0.toString();
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
      
      PipedWriter pipedWriter1 = new PipedWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedWriter1);
      mockPrintWriter0.append('k');
      boolean boolean0 = SQLUtil.isQuery("h2.consoleStream");
      boolean boolean1 = SQLUtil.isDML(" 8K~k");
      assertTrue(boolean1 == boolean0);
      
      StringBuilder stringBuilder1 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.504237243966446
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLUtil.isProcedureCall("AGGREGATION");
      SQLUtil.isDML("AGGREGATION");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "AGGREGATION";
      stringArray0[1] = "AGGREGATION";
      stringArray0[2] = "AGGREGATION";
      String[] stringArray1 = new String[9];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray1[0] = "3Ry:hDOZBr";
      stringArray1[1] = "Q+*i.I@BC|o-E(-T";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "y=K9C3MniHmbK ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("nilulp^o|'ikk~5ib", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.antlr.runtime.ParserRuleReturnScope", true, dBTable0, stringArray1, dBTable0, stringArray1);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("callis :");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "call";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "@p>?Ady1j{aR", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(380);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("call", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder2.append((CharSequence) stringBuilder1, 380, (-1229));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 380, end -1229, s.length() 4
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Boolean boolean0 = new Boolean("alter tableselect intos.[yu");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      PipedWriter pipedWriter0 = new PipedWriter();
      Boolean boolean1 = new Boolean((String) null);
      Boolean.logicalOr(true, false);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, boolean1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.3065868781693233
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "S.[yU";
      Boolean.valueOf("S.[yU");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = Boolean.TRUE;
      SQLUtil.mutatesDataOrStructure("alter tablenclob");
      SQLUtil.mutatesDataOrStructure("agogre");
      String string1 = "a?Yexec";
      // Undeclared exception!
      try { 
        ZoneId.of("agogre");
        fail("Expecting exception: ZoneRulesException");
      
      } catch(ZoneRulesException e) {
         //
         // Unknown time-zone ID: agogre
         //
         verifyException("java.time.zone.ZoneRulesProvider", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3265171534282083
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      System.setCurrentTimeMillis(59L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "derby.storage.databaseEncryptionStatus";
      SQLUtil.renderColumnListWithTableName("derby.storage.databaseEncryptionStatus", stringArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "derby.storage.databaseEncryptionStatus.derby.storage.databaseEncryptionStatus";
      stringArray1[1] = "derby.storage.databaseEncryptionStatus";
      stringArray1[2] = "derby.storage.databaseEncryptionStatus";
      stringArray1[3] = "derby.storage.databaseEncryptionStatus";
      stringArray1[4] = "'Mg58Tp7Rbct|O7'l8x";
      stringArray1[5] = "derby.storage.databaseEncryptionStatus";
      stringArray1[6] = "derby.storage.databaseEncryptionStatus.derby.storage.databaseEncryptionStatus";
      String[] stringArray2 = new String[6];
      stringArray2[0] = "derby.storage.databaseEncryptionStatus";
      stringArray2[1] = "derby.storage.databaseEncryptionStatus";
      stringArray2[2] = "derby.storage.databaseEncryptionStatus";
      stringArray2[3] = "'Mg58Tp7Rbct|O7'l8x";
      stringArray2[4] = "derby.storage.databaseEncryptionStatus";
      stringArray2[5] = "delete";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("'Mg58Tp7Rbct|O7'l8x", stringArray1, "derby.storage.databaseEncryptionStatus.derby.storage.databaseEncryptionStatus", "delete", stringArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.772969799011699
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Al3{{~O|}.e\"#Ab";
      stringArray0[1] = "Al3{{~O|}.e\"#Ab";
      stringArray0[2] = "Al3{{~O|}.e\"#Ab";
      SQLUtil.renderColumnListWithTableName("Al3{{~O|}.e\"#Ab", stringArray0);
      SQLUtil.renderColumnListWithTableName("Al3{{~O|}.e\"#Ab", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, columnDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("Al3{{~O|}.e\"#Ab", "drop materialized view", versionNumber0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("drop index", 2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      defaultDatabase0.getTable("drop materialized view", false);
      columnDescriptorList0.ensureCapacity(0);
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType.getInstance((-1982292595), "Al3{{~O|}.e\"#Ab");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      String[] stringArray1 = new String[9];
      stringArray1[0] = "Al3{{~O|}.e\"#Ab";
      stringArray1[1] = "Al3{{~O|}.e\"#Ab.Al3{{~O|}.e\"#Ab, Al3{{~O|}.e\"#Ab.Al3{{~O|}.e\"#Ab, Al3{{~O|}.e\"#Ab.Al3{{~O|}.e\"#Ab";
      stringArray1[2] = "Al3{{~O|}.e\"#Ab";
      stringArray1[3] = "(Al3{{~O|}.e\"#Ab, Al3{{~O|}.e\"#Ab, Al3{{~O|}.e\"#Ab)";
      stringArray1[4] = "L}DJYM:5pU=~bagEUM";
      stringArray1[5] = "drop materialized view";
      stringArray1[6] = "1K&ZT";
      stringArray1[7] = "drop materialized view";
      stringArray1[8] = "Al3{{~O|}.e\"#Ab";
      SQLUtil.leftJoin("L}DJYM:5pU=~bagEUM", stringArray0, "L}DJYM:5pU=~bagEUM", "Al3{{~O|}.e\"#Ab", stringArray1);
      System.setCurrentTimeMillis((-1982292595));
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.2092072000627843
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      System.setCurrentTimeMillis((-1458L));
      Boolean boolean1 = new Boolean("DISTINCTSCAN");
      SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      Random.setNextRandom(1898);
      SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.148815922340797
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLUtil.isProcedureCall("AGGREGATION");
      SQLUtil.isDML("AGGREGATION");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "AGGREGATION";
      stringArray0[1] = "AGGREGATION";
      stringArray0[2] = "AGGREGATION";
      String[] stringArray1 = new String[9];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray1[0] = "3Ry:hDOZBr";
      stringArray1[1] = "Q+*i.I@BC|o-E(-T";
      stringArray1[2] = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("AGGREGATION", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("AGGREGATION", false, dBTable0, (String[]) null, dBTable0, stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("Q+*i.I@BC|o-E(-T");
      defaultDBTable1.getComponents();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("AGGREGATION");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedWriter0);
      mockPrintWriter1.append('q');
      SQLUtil.isQuery("=, 66Sf");
      SQLUtil.isDML("CLOB");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT AGGREGATION ", stringBuilder0.toString());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";2u");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      char char0 = 'n';
      char char1 = '_';
      char char2 = '*';
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec1);
      int int0 = 228;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(228, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 228
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("DISTINCTSCAN", (String[]) null, "MPuVxNq", "DISTINCTSCAN", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[11];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[5] = "ECB";
      stringArray1[6] = "";
      stringArray1[7] = "";
      SQLUtil.removeComments("");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      columnDescriptorList0.removeAll(linkedBlockingQueue0);
      BTreeController bTreeController0 = new BTreeController();
      bTreeController0.getXactMgr();
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getContextManager();
      GenericLanguageFactory genericLanguageFactory1 = new GenericLanguageFactory();
      GenericLanguageConnectionContext genericLanguageConnectionContext0 = null;
      try {
        genericLanguageConnectionContext0 = new GenericLanguageConnectionContext((ContextManager) null, (TransactionController) null, genericLanguageFactory1, genericLanguageConnectionFactory0, slaveDatabase0, "J+^XF{", (-388), "VDIQ>K", "O27,\"n9{|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.context.ContextImpl", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "&K4BTy[?7");
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      stringBuilder1.append(3656L);
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = '5';
      charArray0[2] = 'u';
      charArray0[3] = '4';
      charArray0[4] = '8';
      charArray0[5] = 'p';
      charArray0[6] = 'j';
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.3654597361104444
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "S.[yU";
      SQLUtil.isDML("S.[yU");
      DBConstraint dBConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "alter index";
      String string1 = "insert42y07";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter index", true, "alter index", "insert42y07");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("alter index", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder2 = stringBuilder0.append(642.31420772);
      StringBuilder stringBuilder3 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1, nameSpec0);
      String string2 = "42y07";
      String string3 = "MVZF8 f7";
      StringBuilder stringBuilder4 = stringBuilder1.append("MVZF8 f7");
      String string4 = "call";
      StringBuilder stringBuilder5 = stringBuilder4.append("call");
      StringBuilder stringBuilder6 = stringBuilder1.reverse();
      StringBuilder stringBuilder7 = new StringBuilder(stringBuilder2);
      StringBuilder stringBuilder8 = SQLUtil.addOptionalCondition("42y07", stringBuilder5);
      String string5 = "n<;Sm~`9oi\"3nmL*9";
      DBCatalog dBCatalog0 = new DBCatalog("n<;Sm~`9oi\"3nmL*9");
      StringBuilder stringBuilder9 = stringBuilder8.append((-627L));
      int int0 = 8;
      stringBuilder9.insert(8, (CharSequence) stringBuilder6);
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) stringBuilder3, (-75838333), 1045);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -75838333, end 1045, s.length() 146
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.3617945128069984
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execselecd");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "execselecd";
      stringArray0[1] = "execselecd";
      stringArray0[2] = "execselecd";
      stringArray0[3] = "execselecd";
      stringArray0[4] = "execselecd";
      stringArray0[5] = "execselecd";
      stringArray0[6] = "execselecd";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "execselecd", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "execselecd");
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      StringBuilder stringBuilder3 = stringBuilder2.append((-87487112));
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder4 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder3, nameSpec1);
      assertEquals("CONSTRAINT execselecd execselecdCONSTRAINT execselecd -87487112", stringBuilder2.toString());
      assertEquals("CONSTRAINT execselecd execselecdCONSTRAINT execselecd -87487112", stringBuilder4.toString());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("CREATE INDEX IF NOT EXISTS INFORMATION_SCHEMA.INDEX_LOB_MAP_DATA_LOB ON INFORMATION_SCHEMA.LOB_MAP(BLOCK, LOB)", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DBObject dBObject0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLUtil.isDML("truncatereferences");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "truncatereferences";
      stringArray0[1] = "truncatereferences";
      stringArray0[1] = "truncatereferences";
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.301695497874086
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "pKF{k";
      stringArray0[2] = "pKF{k";
      stringArray0[3] = "pKF{k";
      stringArray0[4] = "pKF{k";
      SQLUtil.mutatesDataOrStructure("truncate");
      SQLUtil.mutatesDataOrStructure("pKF{k");
      SQLUtil.mutatesDataOrStructure("selecd");
      Random.setNextRandom((-2234));
      Random.setNextRandom((-264274177));
      VersionNumber versionNumber0 = VersionNumber.valueOf("pKF{k");
      VersionNumber.valueOf("pKF{k");
      VersionNumber versionNumber1 = VersionNumber.valueOf("agogre");
      versionNumber1.toString();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("agogre", "create unique indexalter materialized view", versionNumber0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      Random.setNextRandom((-264274177));
      Random.setNextRandom(3557);
      Random.setNextRandom(12);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "2iQi&";
      StringBuilder stringBuilder0 = new StringBuilder("2iQi&");
      String string1 = "select intorl+;xtd\"ds$u*ap6id";
      SQLUtil.addOptionalCondition("select intorl+;xtd\"ds$u*ap6id", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt(4133);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4133
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.428860207414804
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "select into";
      stringArray0[1] = "select into";
      PipedWriter pipedWriter0 = new PipedWriter();
      String[] stringArray1 = new String[9];
      stringArray1[0] = "pQ37'cJ'CwK`'";
      stringArray1[1] = "select into";
      stringArray1[2] = "select into";
      stringArray1[3] = "Finalizing a Connection that was never closed:";
      stringArray1[4] = "select into";
      stringArray1[5] = "47G upho[9atsVg :N";
      stringArray1[6] = "select into";
      stringArray1[7] = "select into";
      DBCatalog dBCatalog0 = new DBCatalog("q");
      dBCatalog0.getSchema("alter materialized view");
      defaultDBTable0.isIdentical((DBObject) null);
      stringArray1[8] = "select into";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray1, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.quoteChar((-1628044373));
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.3128868859883003
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "MPuVxNq", true, (String[]) null);
      dBUniqueConstraint0.toString();
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("DISTINCTSCAN", false, dBUniqueConstraint0);
      dBUniqueIndex0.isIdentical(dBUniqueConstraint0);
      dBUniqueIndex0.isIdentical(dBUniqueConstraint0);
      dBUniqueIndex0.setName("_'Q[WL");
      dBUniqueIndex0.getTable();
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("create unique indexexecutes.[yu", (String[]) null, "create unique indexexecutes.[yu", "_'Q[WL", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Boolean boolean0 = new Boolean("S.[yU");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-1628044373);
      StringReader stringReader0 = new StringReader("S.[yU");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-1994420201));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "MPuV<Nq", true, (String[]) null);
      defaultDBTable0.setName("MPuV<Nq");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8618650377696493
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLUtil.isDDL("AGGREGATION");
      SQLUtil.isDML("AGGREGATION");
      String[] stringArray0 = new String[18];
      stringArray0[0] = "AGGREGATION";
      String string0 = "5iT8t:%g(+f-J5l:&HF";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "AGGREGATION";
      stringArray1[1] = "AGGREGATION";
      stringArray1[2] = "isc_info_ods_version:";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("isc_info_ods_version:", stringArray0, "5iT8t:%g(+f-J5l:&HF", "isc_info_ods_version:", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.renderColumnListWithTableName("setTypeMap(", stringArray0);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      dynamicByteArrayOutputStream0.reset();
      // Undeclared exception!
      try { 
        dynamicByteArrayOutputStream0.discardLeft((-1177));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.367420033319239
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[10];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      System.setCurrentTimeMillis(0L);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "aggregat", true, stringArray0);
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT aggregat PRIMARY KEY (, , , , , , , , , )", string0);
      
      dBPrimaryKeyConstraint0.addColumnName("truncatedelete from information_schema.lob_map where lob = ? as delete from information_schema.lob_map where lob = ? on");
      dBForeignKeyConstraint0.setDoc("aggregat");
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT aggregat UNIQUE (, , , , , , , , , , truncatedelete from information_schema.lob_map where lob = ? as delete from information_schema.lob_map where lob = ? on)", string1);
      
      String string2 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string2);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.2090584275903393
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "MPuVxNq", true, (String[]) null);
      String string0 = dBUniqueConstraint0.toString();
      assertEquals("CONSTRAINT MPuVxNq UNIQUE ()", string0);
      
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("DISTINCTSCAN", false, dBUniqueConstraint0);
      dBUniqueIndex0.setName("Q[WL");
      dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "eK53[sh4x?+}", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT eK53[sh4x?+} PRIMARY KEY ()", string1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "RememberBytesInputStream: reording: ";
      stringArray0[1] = "RememberBytesInputStream: reording: ";
      // Undeclared exception!
      try { 
        SQLUtil.join("RememberBytesInputStream: reording: ", "RememberBytesInputStream: reording: ", stringArray0, "RememberBytesInputStream: reording: ", "RememberBytesInputStream: reording: ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "org.apache.derby.impl.store.raw.xact.RowLockingRR";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , org.apache.derby.impl.store.raw.xact.RowLockingRR)", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"2Vgb}e";
      stringArray0[1] = "Z;kAh2shoV$~>!`,:";
      stringArray0[2] = "Z;kAh2shoV$~>!`,:";
      stringArray0[3] = "Z;kAh2shoV$~>!`,:";
      stringArray0[4] = "Z;kAh2shoV$~>!`,:";
      stringArray0[5] = "\"2Vgb}e";
      stringArray0[6] = "Z;kAh2shoV$~>!`,:";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "!?!_/u";
      // Undeclared exception!
      try { 
        SQLUtil.join("\"2Vgb}e", "Z;kAh2shoV$~>!`,:", stringArray0, "Z;kAh2shoV$~>!`,:", "\"2Vgb}e", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("EA*/Ue_)");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "EA*/Ue_)";
      stringArray0[1] = "L008";
      stringArray0[2] = "u94mcJ@z9.yo+g2{!:S";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("L008", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT L008 FOREIGN KEY (EA*/Ue_), L008, u94mcJ@z9.yo+g2{!:S) REFERENCES EA*/Ue_)(EA*/Ue_), L008, u94mcJ@z9.yo+g2{!:S)", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.6211272758470872
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SQLUtil.join(stringArray0[2], stringArray0[5], stringArray0, stringArray0[3], stringArray0[5], stringArray0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      columnDescriptorList0.removeAll(linkedBlockingQueue0);
      BTreeController bTreeController0 = new BTreeController();
      bTreeController0.getXactMgr();
      // Undeclared exception!
      try { 
        bTreeController0.reopen();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.store.access.btree.OpenBTree", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.4453455487120217
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("AGoGREGATIOV");
      assertFalse(boolean0);
      
      SQLUtil.isDML("AGoGREGATIOV");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "AGoGREGATIOV";
      stringArray0[1] = "AGoGREGATIOV";
      stringArray0[2] = "AGoGREGATIOV";
      String[] stringArray1 = new String[8];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray1[0] = "3Ry:hDOZBr";
      stringArray0[2] = "Q+*i.I@BC|o-E(-T";
      stringArray1[2] = "Q+*i.I@BC|o-E(-T";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Q+*i.I@BC|o-E(-T", false, dBUniqueConstraint0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("AGoGREGATIOV", false, defaultDBTable0, (String[]) null, defaultDBTable0, stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("~PjnaD7[|.GDZ+TmMy", false, dBUniqueConstraint0);
      dBUniqueIndex0.addColumnName("org.apache.derby.impl.sql.execute.HashTableResultSet");
      dBUniqueIndex0.getTable();
      dBUniqueConstraint0.equals("3Ry:hDOZBr");
      SQLUtil.mutatesStructure(",FIH");
      String string0 = SQLUtil.ownerDotComponent(dBUniqueIndex0);
      assertEquals("null.Q+*i.I@BC|o-E(-T", string0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("create");
      assertNull(boolean1);
      
      boolean boolean2 = SQLUtil.isQuery("*.]9}");
      assertFalse(boolean2);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NULL");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("delete", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Boolean.valueOf(false);
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals(" NULL", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "d;z&X?z";
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      int int0 = 1936;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("?n$FB", (DBTable) null, 1936, "UUID");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      StringBuilder stringBuilder1 = new StringBuilder(1936);
      StringBuilder stringBuilder2 = stringBuilder0.append("d;z&X?z");
      int int1 = 9;
      int int2 = (-361396028);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(1936, (CharSequence) "drop index", (-361396028), 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 1936
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance((-2374), "aO");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("aO", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setDoc((String) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer.toUnsignedLong((-2374));
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      vector0.removeIf(predicate3);
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("aO", "b63`7 )Jqk$0}6!-K.", (VersionNumber) null);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("create materialized view", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'create materialized view'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dFop moerialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      columnDescriptorList0.add((Object) null);
      columnDescriptorList0.ensureCapacity(0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance((-1982292535), "UUIQD");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop index", defaultDBTable0, dBDataType0, integer0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      defaultDBColumn0.equals("execute");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.setNullable(true);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) columnDescriptorList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate1.or(predicate3);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize(dBColumnArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, columnDescriptorList0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      columnDescriptorList0.add((Object) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("UUIQD", "dFop moerialized view", versionNumber0);
      defaultDatabase0.getTable("dFop moerialized view", false);
      columnDescriptorList0.ensureCapacity(0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance((-1982292535), "UUIQD");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop index", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setNullable(true);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.setNullable(true);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      defaultDBColumn0.getForeignKeyConstraint();
      char[] charArray0 = new char[5];
      charArray0[1] = '_';
      Boolean boolean0 = new Boolean("|}n{t[2h,)kqU8V1&");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.9548574219920236
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLUtil.isDML("S.[yU");
      SQLUtil.isDDL("S.[yU");
      SQLUtil.normalize("S.[yU", false);
      SQLUtil.mutatesStructure("S.[ yU");
      Random.setNextRandom((-3786));
      SQLUtil.mutatesDataOrStructure("S.[ yU");
      SQLUtil.isQuery("\u0002\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D\n%\u0001\uFFFF\u0005%\u0001\u01AD\u0002\uFFFF\u0003%\u0001\u01B1\u0002%\u0001\uFFFF\u0003%\u0001\u01B7\u0001%\u0002\uFFFF\u0001\u01B9\u0001%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001\u01BD\u0001\uFFFF\u0001\u01BE\u0001\uFFFF\u0002%\u0001\u01C1\u0001%\u0001\uFFFF\u0002%\u0001\u01C5\u0001%\u0001\uFFFF\u0002%\u0001\u01C9\u0001\uFFFF\u0001%\u0001\u01CB\u0001\u01CC\u0003%\u0001\u01D0\u0001%\u0001\u01D2\u0006%\u0001\uFFFF\u0002%\u0001\u01DB\u0001\uFFFF\u0001\u01DC\u0001\u01DD\u0002%\u0001\u01E0\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01E2\u0001%\u0001\u01E4\u0002\uFFFF\u0002%\u0001\uFFFF\u0003%\u0001\uFFFF\u0003%\u0001\uFFFF\u0001%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001\u01F1\u0001\uFFFF\u0001%\u0001\u01F3\u0001%\u0001\u01F5\u0004%\u0003\uFFFF\u0001%\u0001\u01FB\u0001\uFFFF\u0001\u01FC\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01FE\u0001%\u0001\u0200\u0001\u0201\u0002%\u0001\u0204\u0004%\u0001\u020A\u0001\uFFFF\u0001\u020B\u0001\uFFFF\u0001%\u0001\uFFFF\u0002%\u0001\u020F\u0002%\u0002\uFFFF\u0001\u0213\u0001\uFFFF\u0001\u0214\u0002\uFFFF\u0001\u0215\u0001\u0216\u0001\uFFFF\u0003%\u0001\u021A\u0001\u021B\u0002\uFFFF\u0001\u021C\u0001\u021D\u0001\u021E\u0001\uFFFF\u0001\u021F\u0001%\u0001\u0221\u0004\uFFFF\u0001\u0222\u0001%\u0001\u0224\u0006\uFFFF\u0001%\u0002\uFFFF\u0001\u0226\u0001\uFFFF\u0001\u0228\u0001\uFFFF\u0001\u0229\u0002\uFFFF");
      BTreeController bTreeController0 = new BTreeController();
      bTreeController0.getXactMgr();
      BasicDatabase basicDatabase0 = new BasicDatabase();
      assertEquals(2, basicDatabase0.getEngineType());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.725494483849698
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnListWithTableName("update", stringArray0);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      dynamicByteArrayOutputStream0.reset();
      dynamicByteArrayOutputStream0.setBeginPosition((byte) (-53));
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "(, , )";
      objectArray0[1] = (Object) stringArray0[1];
      objectArray0[2] = (Object) stringArray0[1];
      objectArray0[4] = (Object) "'hQ";
      objectArray0[5] = (Object) stringArray0[2];
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      SQLUtil.normalize("update.null, update.null, update.null", true);
      StringBuilder stringBuilder0 = new StringBuilder(30329);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("null = '(, , )' AND null = null AND null = null", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("setURL(String,URL)", stringBuilder1);
      assertEquals("null = '(, , )' AND null = null AND null = null or setURL(String,URL)", stringBuilder1.toString());
      assertEquals("null = '(, , )' AND null = null AND null = null or setURL(String,URL)", stringBuilder2.toString());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      vector0.removeIf(predicate3);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.3558258304206885
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select into", false, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "7AEIOUY8HW1BFPV2CGJKQSXZ3DT4L5MN6R", true, (String[]) null);
      dBPrimaryKeyConstraint0.toString();
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("7AEIOUY8HW1BFPV2CGJKQSXZ3DT4L5MN6R", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) dBTable0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "inner";
      objectArray0[4] = (Object) dBUniqueIndex0;
      objectArray0[5] = (Object) defaultDBTable0;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("ng;[>5+X");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.4793530122008116
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLUtil.normalize(" ", false);
      SQLUtil.isProcedureCall("`Y$\"^S|~}i");
      SQLUtil.mutatesStructure("`Y$\"^S|~}i");
      SQLUtil.isDML(" ");
      GlobalXactId globalXactId0 = new GlobalXactId();
      String string0 = null;
      SQLUtil.mutatesDataOrStructure("`Y$\"^S|~}i");
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("ljtS6w~Q)8i<##k&");
      DBSchema dBSchema0 = new DBSchema("ljtS6w~Q)8i<##k&", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ibL", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)8;
      byteArray0[3] = (byte)8;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      dynamicByteArrayOutputStream0.setPosition(1540);
      dynamicByteArrayOutputStream0.write(byteArray0);
      dynamicByteArrayOutputStream0.flush();
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream1 = new DynamicByteArrayOutputStream(dynamicByteArrayOutputStream0);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "GR3]T2jmz*DI5w/");
      dynamicByteArrayOutputStream1.setPosition(1540);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream2 = new DynamicByteArrayOutputStream(byteArray0);
      dynamicByteArrayOutputStream2.flush();
      dynamicByteArrayOutputStream2.reset();
      dynamicByteArrayOutputStream1.setBeginPosition((byte)0);
      SQLUtil.normalize("pJ!jp[+tb][/+ 'fUQ", false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ": x[BRu2OA{k'%jT4at");
      Boolean boolean1 = new Boolean("|}n{t[2h,)kqU8V1&");
      assertTrue(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-53);
      byteArray0[4] = (byte)8;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      String string0 = SQLUtil.normalize("GR3]T2jmYz*DI5w/", true);
      assertEquals("GR3 ] T2jmYz * DI5w /", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.9095922345133516
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLUtil.normalize("`$*-g9zZ7T`Z", false);
      String string0 = "`Y$\"^S|~}i";
      SQLUtil.isProcedureCall("`Y$\"^S|~}i");
      SQLUtil.mutatesStructure("`Y$\"^S|~}i");
      SQLUtil.mutatesDataOrStructure("`Y$\"^S|~}i");
      GlobalXactId globalXactId0 = new GlobalXactId();
      SQLUtil.isQuery("` $ * - g9zZ7T ` Z");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTransactionExecute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)8;
      byteArray0[3] = (byte)8;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      dynamicByteArrayOutputStream0.setPosition(1540);
      dynamicByteArrayOutputStream0.write(byteArray0);
      dynamicByteArrayOutputStream0.flush();
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream1 = new DynamicByteArrayOutputStream(dynamicByteArrayOutputStream0);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "GR3]T2jmz*DI5w/");
      dynamicByteArrayOutputStream1.setPosition(1540);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream2 = new DynamicByteArrayOutputStream(byteArray0);
      dynamicByteArrayOutputStream2.flush();
      dynamicByteArrayOutputStream2.reset();
      dynamicByteArrayOutputStream1.setBeginPosition((byte)0);
      SQLUtil.normalize("pJ!jp[+tb][/+ 'fUQ", true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ": x[BRu2OA{k'%jT4at");
      Boolean boolean1 = new Boolean("|}n{t[2h,)kqU8V1&");
      assertTrue(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Boolean boolean0 = new Boolean("AGoGREGABxIOV");
      SQLUtil.isDML("S.[yU");
      Random.setNextRandom((-3786));
      SQLUtil.isQuery("\u0002\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D\n%\u0001\uFFFF\u0005%\u0001\u01AD\u0002\uFFFF\u0003%\u0001\u01B1\u0002%\u0001\uFFFF\u0003%\u0001\u01B7\u0001%\u0002\uFFFF\u0001\u01B9\u0001%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001\u01BD\u0001\uFFFF\u0001\u01BE\u0001\uFFFF\u0002%\u0001\u01C1\u0001%\u0001\uFFFF\u0002%\u0001\u01C5\u0001%\u0001\uFFFF\u0002%\u0001\u01C9\u0001\uFFFF\u0001%\u0001\u01CB\u0001\u01CC\u0003%\u0001\u01D0\u0001%\u0001\u01D2\u0006%\u0001\uFFFF\u0002%\u0001\u01DB\u0001\uFFFF\u0001\u01DC\u0001\u01DD\u0002%\u0001\u01E0\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01E2\u0001%\u0001\u01E4\u0002\uFFFF\u0002%\u0001\uFFFF\u0003%\u0001\uFFFF\u0003%\u0001\uFFFF\u0001%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001\u01F1\u0001\uFFFF\u0001%\u0001\u01F3\u0001%\u0001\u01F5\u0004%\u0003\uFFFF\u0001%\u0001\u01FB\u0001\uFFFF\u0001\u01FC\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01FE\u0001%\u0001\u0200\u0001\u0201\u0002%\u0001\u0204\u0004%\u0001\u020A\u0001\uFFFF\u0001\u020B\u0001\uFFFF\u0001%\u0001\uFFFF\u0002%\u0001\u020F\u0002%\u0002\uFFFF\u0001\u0213\u0001\uFFFF\u0001\u0214\u0002\uFFFF\u0001\u0215\u0001\u0216\u0001\uFFFF\u0003%\u0001\u021A\u0001\u021B\u0002\uFFFF\u0001\u021C\u0001\u021D\u0001\u021E\u0001\uFFFF\u0001\u021F\u0001%\u0001\u0221\u0004\uFFFF\u0001\u0222\u0001%\u0001\u0224\u0006\uFFFF\u0001%\u0002\uFFFF\u0001\u0226\u0001\uFFFF\u0001\u0228\u0001\uFFFF\u0001\u0229\u0002\uFFFF");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCatalog dBCatalog0 = new DBCatalog("alter index_d [ ! } *) v ~");
      DBSchema dBSchema0 = new DBSchema("Nh)Y!&O1!c$7J?", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter index_d [ ! } *) v ~", dBSchema0);
      defaultDBTable0.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.8354271768554824
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "MPuVxNq", true, (String[]) null);
      String string0 = dBUniqueConstraint0.toString();
      assertEquals("CONSTRAINT MPuVxNq UNIQUE ()", string0);
      
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("DISTINCTSCAN", false, dBUniqueConstraint0);
      dBUniqueIndex0.isIdentical(dBUniqueConstraint0);
      dBUniqueIndex0.isIdentical(dBUniqueConstraint0);
      dBUniqueIndex0.setName("Q[WL");
      dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT MPuVxNq UNIQUE ()", string1);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      System.setCurrentTimeMillis((-1458L));
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.whitespaceChars(1012, 1012);
      streamTokenizer0.parseNumbers();
      String string0 = "aO";
      String string1 = "select into";
      DBDataType dBDataType0 = DBDataType.getInstance(41, "select into");
      dBDataType0.isNumber();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      Integer integer0 = Integer.getInteger("aO", 3723);
      Integer integer1 = new Integer(3723);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("aO", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.setDoc((String) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.8633654025102206
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = stringArray0[0];
      SQLUtil.renderColumnListWithTableName(stringArray0[1], stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.renderColumnListWithTableName("3HLADgZ:_c\"-(#!L`K ", stringArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "(, , )";
      objectArray0[1] = (Object) "setTypeMap(";
      objectArray0[2] = (Object) "null.null, null.null, null.null";
      objectArray0[4] = (Object) "'hQ";
      objectArray0[5] = (Object) stringArray0[2];
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      SQLUtil.renderValue("'hQ");
      StringBuilder stringBuilder0 = new StringBuilder(30329);
      SQLUtil.addRequiredCondition("null = '(, , )' AND null = 'setTypeMap(' AND null = 'null.null, null.null, null.null'", stringBuilder0);
      assertEquals("null = '(, , )' AND null = 'setTypeMap(' AND null = 'null.null, null.null, null.null'", stringBuilder0.toString());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(97, threadFactory0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      MockThread mockThread0 = new MockThread();
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread0, scheduledThreadPoolExecutor0);
      scheduledThreadPoolExecutor0.execute(mockThread0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread0, scheduledThreadPoolExecutor0);
      scheduledThreadPoolExecutor0.setRejectedExecutionHandler(threadPoolExecutor_DiscardPolicy0);
      scheduledThreadPoolExecutor0.getPoolSize();
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("+WwgUTcUDfwsUW");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "select into";
      stringArray0[1] = "select into";
      PipedWriter pipedWriter0 = new PipedWriter();
      Character character0 = Character.valueOf('m');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'m'", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "6QEu}";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String string0 = SQLUtil.innerJoin("", stringArray0, "", ", ", stringArray0);
      assertEquals(" as ,  on . = , . and .6QEu} = , .6QEu} and . = , . and . = , . and . = , . and . = , . and . = , . and . = , . and . = , .", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("=-xSTdxhHLBw+Q", "executeo -c2um^y2 h\"qx3n", "executeo -c2um^y2 h\"qx3n");
      assertEquals("=-xSTdxhHLBw+Q", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(97, threadFactory0);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "CSVWRITE");
      scheduledThreadPoolExecutor0.getPoolSize();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Thread[] threadArray0 = new Thread[9];
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread2 = new MockThread(threadGroup0, "callalter tablenclob");
      threadArray0[0] = (Thread) mockThread2;
      threadArray0[1] = (Thread) mockThread1;
      threadArray0[3] = (Thread) mockThread1;
      threadArray0[4] = (Thread) mockThread1;
      threadArray0[5] = (Thread) mockThread1;
      threadArray0[6] = (Thread) mockThread1;
      threadArray0[7] = (Thread) mockThread0;
      threadArray0[8] = (Thread) mockThread0;
      MockThread.enumerate(threadArray0);
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(mockThread1, 0L, 728L, timeUnit0);
      String string0 = SQLUtil.renderValue(scheduledFuture0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(97, threadFactory0);
      MockThread mockThread0 = new MockThread();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      mockThread0.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      MockThread mockThread1 = new MockThread(mockThread0, "CSVWRITE");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("CSVWRITE", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      System.setCurrentTimeMillis((-1458L));
      Boolean boolean1 = new Boolean("DISTINCTSCAN");
      Random.setNextRandom(2147483645);
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      System.setCurrentTimeMillis(2147483645);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("X", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "' has no foreign key ";
      stringArray0[1] = "3\"J)tNYB~?";
      stringArray0[2] = "drop index9999-12-20";
      stringArray0[3] = "update";
      stringArray0[4] = "BIT_LENGTH";
      stringArray0[5] = "|]F#(&,_[-Od|ol";
      stringArray0[6] = " REFERENCES ";
      stringArray0[7] = "2%V@D";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " REFERENCES ";
      objectArray0[1] = (Object) "|]F#(&,_[-Od|ol";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7W'1X[2r\\']5");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7W'1X[2r\\']5";
      stringArray0[1] = "7W'1X[2r\\']5";
      stringArray0[2] = "7W'1X[2r\\']5";
      stringArray0[3] = "7W'1X[2r\\']5";
      stringArray0[4] = "7W'1X[2r\\']5";
      stringArray0[5] = "";
      stringArray0[6] = "7W'1X[2r\\']5";
      stringArray0[7] = "7W'1X[2r\\']5";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "MPuVxNq", true, (String[]) null);
      String string0 = dBUniqueConstraint0.toString();
      assertEquals("CONSTRAINT MPuVxNq UNIQUE ()", string0);
      
      dBUniqueConstraint0.setDoc("executecreate");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("DISTINCTSCAN", false, dBUniqueConstraint0);
      dBUniqueIndex0.isIdentical(dBUniqueConstraint0);
      dBUniqueIndex0.isIdentical(dBUniqueConstraint0);
      dBUniqueIndex0.setName("Q[WL");
      dBUniqueIndex0.getTable();
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT MPuVxNq ", string1);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$bT+:J5t.;P";
      stringArray0[1] = "renamejava.vm.name";
      stringArray0[2] = "8i&w}W~gif*^Uv6";
      stringArray0[3] = ";a#aC*U(K";
      stringArray0[4] = "execjava.vm.name";
      stringArray0[5] = ")";
      stringArray0[6] = "A<`pf's5d~liZ.LY<'";
      stringArray0[7] = "Gqra+*8G^Bi^Jtp@7";
      stringArray0[8] = "java.vm.na";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.527689795539246
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLUtil.isQuery("alter table");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = " NULL";
      stringArray0[1] = "XMLCDATA";
      stringArray0[2] = " NULL";
      stringArray0[3] = "alter table";
      stringArray0[4] = "alter table";
      stringArray0[5] = "alter table";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" NULL", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.setOwner(defaultDBTable0);
      SQLUtil.renderQuery(defaultDBTable1, stringArray0, stringArray0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "deletefc`@ee9~y~<j=o";
      stringArray0[1] = "deletefc`@ee9~y~<j=o";
      stringArray0[2] = "kj:wfbvxk]g";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "kj:wfbvxk]g";
      stringArray1[1] = "kj:wfbvxk]g";
      stringArray1[2] = "kj:wfbvxk]g";
      String string0 = SQLUtil.join("kj:wfbvxk]g", "deletefc`@ee9~y~<j=o", stringArray0, "deletefc`@ee9~y~<j=o", "(@W&^.|=0J", stringArray1);
      assertEquals("kj:wfbvxk]g join deletefc`@ee9~y~<j=o as (@W&^.|=0J on deletefc`@ee9~y~<j=o.deletefc`@ee9~y~<j=o = (@W&^.|=0J.kj:wfbvxk]g and deletefc`@ee9~y~<j=o.deletefc`@ee9~y~<j=o = (@W&^.|=0J.kj:wfbvxk]g and deletefc`@ee9~y~<j=o.kj:wfbvxk]g = (@W&^.|=0J.kj:wfbvxk]g", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=*mgt;u^*";
      stringArray0[1] = "=*mgt;u^*";
      stringArray0[2] = "=*mgt;u^*";
      stringArray0[3] = "=*mgt;u^*";
      stringArray0[4] = "JB3YvK=Uoyc\"d>n";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "=*mgt;u^*";
      stringArray1[1] = "JB3YvK=Uoyc\"d>n";
      stringArray1[2] = "e6.,S|^_";
      stringArray1[3] = "JB3YvK=Uoyc\"d>n";
      stringArray1[4] = "JB3YvK=Uoyc\"d>n";
      stringArray1[5] = "=*mgt;u^*";
      String string0 = SQLUtil.innerJoin("=*mgt;u^*", stringArray0, "?9?@,0", "=*mgt;u^*", stringArray1);
      assertEquals("?9?@,0 as =*mgt;u^* on =*mgt;u^*.=*mgt;u^* = =*mgt;u^*.=*mgt;u^* and =*mgt;u^*.=*mgt;u^* = =*mgt;u^*.JB3YvK=Uoyc\"d>n and =*mgt;u^*.=*mgt;u^* = =*mgt;u^*.e6.,S|^_ and =*mgt;u^*.=*mgt;u^* = =*mgt;u^*.JB3YvK=Uoyc\"d>n and =*mgt;u^*.JB3YvK=Uoyc\"d>n = =*mgt;u^*.JB3YvK=Uoyc\"d>n", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L@=p0";
      stringArray0[1] = "l~ef!";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-52);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[2] = "|zpY/5{AP,%1!";
      stringArray0[3] = "l~ef!";
      String string0 = SQLUtil.leftJoin("[C2wu!f\"", stringArray0, "|zpY/5{AP,%1!", "alter tableh;p&_]:dmyl", stringArray0);
      assertEquals("left join |zpY/5{AP,%1! as alter tableh;p&_]:dmyl on [C2wu!f\".L@=p0 = alter tableh;p&_]:dmyl.L@=p0 and [C2wu!f\".l~ef! = alter tableh;p&_]:dmyl.l~ef! and [C2wu!f\".|zpY/5{AP,%1! = alter tableh;p&_]:dmyl.|zpY/5{AP,%1! and [C2wu!f\".l~ef! = alter tableh;p&_]:dmyl.l~ef!", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.3128868859883003
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter table", true, (String[]) null);
      String string0 = dBUniqueConstraint0.toString();
      assertEquals("CONSTRAINT \"alter table\" UNIQUE ()", string0);
      
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("DISTINCTSCAN", true, dBUniqueConstraint0);
      dBUniqueIndex0.isIdentical(dBUniqueConstraint0);
      dBUniqueIndex0.isIdentical(dBUniqueConstraint0);
      dBUniqueIndex0.setName("Q[WL");
      dBUniqueIndex0.getTable();
      VersionNumber versionNumber0 = VersionNumber.valueOf((String) null);
      VersionNumber.valueOf("#MoE");
      VersionNumber.valueOf("truncate");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("org.h2.command.ddl.AlterTableRenameColumn", "org.h2.command.ddl.AlterTableRenameColumn", versionNumber0);
      defaultDatabase0.setImportDate((Date) null);
      boolean boolean0 = SQLUtil.isDDL("alter indexalter tablenclob");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[2] = "pKF{k";
      stringArray0[3] = "pKF{k";
      stringArray0[4] = "pKF{k";
      SQLUtil.join("pKF{k", stringArray0[5], stringArray0, "pKF{k", stringArray0[5], stringArray0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[8];
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      xSQLVARArray0[0] = xSQLVAR1;
      XSQLVAR xSQLVAR2 = new XSQLVAR();
      xSQLVARArray0[1] = xSQLVAR2;
      XSQLVAR xSQLVAR3 = xSQLVAR0.deepCopy();
      xSQLVARArray0[2] = xSQLVAR3;
      XSQLVAR xSQLVAR4 = new XSQLVAR();
      xSQLVARArray0[3] = xSQLVAR4;
      XSQLVAR xSQLVAR5 = new XSQLVAR();
      XSQLVAR xSQLVAR6 = xSQLVAR5.deepCopy();
      xSQLVARArray0[4] = xSQLVAR6;
      XSQLVAR xSQLVAR7 = xSQLVAR4.deepCopy();
      xSQLVARArray0[5] = xSQLVAR7;
      XSQLVAR xSQLVAR8 = xSQLVAR7.deepCopy();
      xSQLVARArray0[6] = xSQLVAR8;
      XSQLVAR xSQLVAR9 = new XSQLVAR();
      xSQLVARArray0[7] = xSQLVAR9;
      ColumnDescriptorList columnDescriptorList1 = new ColumnDescriptorList();
      FBResultSet fBResultSet0 = null;
      try {
        fBResultSet0 = new FBResultSet(xSQLVARArray0, columnDescriptorList1);
        fail("Expecting exception: TypeConvertionException");
      
      } catch(Throwable e) {
         //
         // SQL type for this field is not yet supported.
         //
         verifyException("org.firebirdsql.jdbc.field.FBField", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.add((Object) "R");
      columnDescriptorList0.add((Object) "dt column");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.add((Object) null);
      columnDescriptorList0.iterator();
      columnDescriptorList0.add((Object) "^");
      columnDescriptorList0.add((Object) "dt column");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("RememberBytesInputStream:  recording: ");
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      ErrorMessages errorMessages0 = new ErrorMessages();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        constantActionActivation0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.301695497874086
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "pKF{k";
      stringArray0[2] = "pKF{k";
      stringArray0[3] = "pKF{k";
      stringArray0[4] = "pKF{k";
      SQLUtil.mutatesDataOrStructure("truncate");
      SQLUtil.mutatesDataOrStructure("pKF{k");
      SQLUtil.mutatesDataOrStructure("selecd");
      Locale locale0 = new Locale("truncate", "pKF{k");
      MockCalendar.getInstance(locale0);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      // Undeclared exception!
      try { 
        MockInstant.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "Fi.J.Eog~\"Fez%";
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("Fi.J.Eog~\"Fez%", "Fi.J.Eog~\"Fez%", (VersionNumber) null);
      String string1 = "update";
      defaultDatabase0.getTable("update", false);
      boolean boolean0 = false;
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) null, "update", false, "");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // owner is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }
}
