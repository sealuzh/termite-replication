/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 09 23:22:39 GMT 2020
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.ToIntFunction;
import java.util.stream.IntStream;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.monitor.FileMonitor;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.store.access.btree.BTreeController;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBIndex;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.hsqldb.rowio.RowOutputBase;
import org.hsqldb.rowio.RowOutputTextQuoted;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      assertNotNull(fBConnectionProperties0);
      assertNull(fBConnectionProperties0.getType());
      assertNull(fBConnectionProperties0.getTpbMapping());
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      FBConnectionProperties fBConnectionProperties1 = (FBConnectionProperties)fBConnectionProperties0.clone();
      assertNotSame(fBConnectionProperties0, fBConnectionProperties1);
      assertNotSame(fBConnectionProperties1, fBConnectionProperties0);
      assertNotNull(fBConnectionProperties1);
      assertNull(fBConnectionProperties0.getType());
      assertNull(fBConnectionProperties0.getTpbMapping());
      assertNull(fBConnectionProperties1.getTpbMapping());
      assertNull(fBConnectionProperties1.getType());
      assertTrue(fBConnectionProperties1.equals((Object)fBConnectionProperties0));
      
      boolean boolean0 = SQLUtil.isQuery("socketBufferSize");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.substituteMarkers("", "GKd[j4dch]", delayQueue0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "useStandardUdf";
      stringArray0[1] = ";u$~msU@~<z1.-{yFD0";
      stringArray0[2] = "type";
      stringArray0[3] = "";
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertNotNull(string1);
      assertEquals(4, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(useStandardUdf, ;u$~msU@~<z1.-{yFD0, type, )", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      assertNotNull(fBConnectionProperties0);
      assertNull(fBConnectionProperties0.getType());
      assertNull(fBConnectionProperties0.getTpbMapping());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      boolean boolean1 = SQLUtil.isQuery("socketBufferSize");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = SQLUtil.isProcedureCall("call");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "setBinaryStream(";
      boolean boolean0 = SQLUtil.isDML("setBinaryStream(");
      assertFalse(boolean0);
      
      String string1 = "org.apache.derby.impl.services.uuid.BasicUUID";
      boolean boolean1 = SQLUtil.isQuery("org.apache.derby.impl.services.uuid.BasicUUID");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = " DEFAULT ";
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure(" DEFAULT ");
      assertNull(boolean2);
      
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7W'1X[2r\\']5");
      assertNotNull(defaultDBTable0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("7W'1X[2r\\']5", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7W'1X[2r\\']5";
      stringArray0[1] = "7W'1X[2r\\']5";
      stringArray0[2] = "7W'1X[2r\\']5";
      String string0 = SQLUtil.removeComments("7W'1X[2r\\']5");
      assertNotNull(string0);
      assertEquals("7W'1X[2r\\']5", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertNotNull(string1);
      assertEquals(8, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(7W'1X[2r\\']5, 7W'1X[2r\\']5, 7W'1X[2r\\']5, , , , , )", string1);
      
      TableContainer tableContainer0 = new TableContainer("7W'1X[2r\\']5", defaultDBTable0);
      assertNotNull(tableContainer0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("7W'1X[2r\\']5", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(tableContainer0.getDoc());
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals("7W'1X[2r\\']5", tableContainer0.getName());
      
      DBTable dBTable0 = tableContainer0.getTable("alter table,");
      assertNull(dBTable0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("7W'1X[2r\\']5", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(tableContainer0.getDoc());
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals("7W'1X[2r\\']5", tableContainer0.getName());
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("<init>", defaultDBTable0, 2248, "89f^>sv%9&KcbT\"EE/?");
      assertNotNull(defaultDBColumn0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("7W'1X[2r\\']5", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("<init>", defaultDBColumn0.getName());
      assertFalse(defaultDBColumn0.isVersionColumn());
      assertEquals("column", defaultDBColumn0.getObjectType());
      assertTrue(defaultDBColumn0.isNullable());
      assertNull(defaultDBColumn0.getFractionDigits());
      assertNull(defaultDBColumn0.getSize());
      assertNull(defaultDBColumn0.getDoc());
      assertNull(defaultDBColumn0.getDefaultValue());
      
      StringBuilder stringBuilder0 = new StringBuilder("Y;$h:+;");
      assertNotNull(stringBuilder0);
      assertEquals("Y;$h:+;", stringBuilder0.toString());
      
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("7W'1X[2r\\']5", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("<init>", defaultDBColumn0.getName());
      assertFalse(defaultDBColumn0.isVersionColumn());
      assertEquals("column", defaultDBColumn0.getObjectType());
      assertTrue(defaultDBColumn0.isNullable());
      assertNull(defaultDBColumn0.getFractionDigits());
      assertNull(defaultDBColumn0.getSize());
      assertNull(defaultDBColumn0.getDoc());
      assertNull(defaultDBColumn0.getDefaultValue());
      assertEquals("Y;$h:+;89F^>SV%9&KCBT\"EE/?", stringBuilder0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      assertNotNull(fBConnectionProperties0);
      assertNull(fBConnectionProperties0.getType());
      assertNull(fBConnectionProperties0.getTpbMapping());
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(39);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      FileMonitor fileMonitor0 = new FileMonitor();
      assertNotNull(fileMonitor0);
      
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      
      Thread thread1 = fileMonitor0.getDaemonThread(thread0, "type", true);
      assertNotNull(thread1);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertTrue(thread1.isDaemon());
      assertFalse(thread1.isInterrupted());
      assertEquals(0, thread1.countStackFrames());
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(thread1, 65535L, 65535L, timeUnit0);
      assertNotNull(scheduledFuture0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertTrue(thread1.isDaemon());
      assertFalse(thread1.isInterrupted());
      assertEquals(0, thread1.countStackFrames());
      
      boolean boolean0 = delayQueue0.add((Delayed) scheduledFuture0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertTrue(thread1.isDaemon());
      assertFalse(thread1.isInterrupted());
      assertEquals(0, thread1.countStackFrames());
      assertTrue(boolean0);
      
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      Delayed delayed0 = delayQueue0.poll(2156L, timeUnit1);
      assertNotNull(delayed0);
      assertFalse(delayQueue0.contains(delayed0));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!,ii");
      assertNotNull(defaultDBTable0);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("!,ii", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("aC4'_8u:%", defaultDBTable0, 2853, "roleName");
      assertNotNull(defaultDBColumn0);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("!,ii", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertNull(defaultDBColumn0.getDoc());
      assertEquals("aC4'_8u:%", defaultDBColumn0.getName());
      assertFalse(defaultDBColumn0.isVersionColumn());
      assertTrue(defaultDBColumn0.isNullable());
      assertNull(defaultDBColumn0.getDefaultValue());
      assertNull(defaultDBColumn0.getSize());
      assertNull(defaultDBColumn0.getFractionDigits());
      assertEquals("column", defaultDBColumn0.getObjectType());
      
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertNotNull(string0);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("!,ii", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertNull(defaultDBColumn0.getDoc());
      assertEquals("aC4'_8u:%", defaultDBColumn0.getName());
      assertFalse(defaultDBColumn0.isVersionColumn());
      assertTrue(defaultDBColumn0.isNullable());
      assertNull(defaultDBColumn0.getDefaultValue());
      assertNull(defaultDBColumn0.getSize());
      assertNull(defaultDBColumn0.getFractionDigits());
      assertEquals("column", defaultDBColumn0.getObjectType());
      assertEquals("aC4'_8u:% ROLENAME NULL", string0);
      
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("p[PIN:k,*X[{LO*y#.", (String[]) null, "alter materialized view", "RNSx I8pL", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5607104090414068
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "AGGREGA8TION";
      stringArray0[1] = "AGGREGA8TION";
      stringArray0[2] = "AGGREGA8TION";
      stringArray0[3] = "AGGREGA8TION";
      stringArray0[4] = "AGGREGA8TION";
      stringArray0[5] = "AGGREGA8TION";
      stringArray0[6] = "~?hsAeb'tl5b";
      stringArray0[7] = "AGGREGA8TION";
      stringArray0[8] = "+LETd 5&=YUB.I;*";
      String string0 = SQLUtil.renderColumnListWithTableName("AGGREGA8TION", stringArray0);
      assertNotNull(string0);
      assertEquals(9, stringArray0.length);
      assertEquals("AGGREGA8TION.AGGREGA8TION, AGGREGA8TION.AGGREGA8TION, AGGREGA8TION.AGGREGA8TION, AGGREGA8TION.AGGREGA8TION, AGGREGA8TION.AGGREGA8TION, AGGREGA8TION.AGGREGA8TION, AGGREGA8TION.~?hsAeb'tl5b, AGGREGA8TION.AGGREGA8TION, AGGREGA8TION.+LETd 5&=YUB.I;*", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertNotNull(string1);
      assertEquals(9, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(AGGREGA8TION, AGGREGA8TION, AGGREGA8TION, AGGREGA8TION, AGGREGA8TION, AGGREGA8TION, ~?hsAeb'tl5b, AGGREGA8TION, +LETd 5&=YUB.I;*)", string1);
      
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("alter table,", compositeDBObject0);
      assertNotNull(tableContainer0);
      assertNull(tableContainer0.getDoc());
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals("alter table,", tableContainer0.getName());
      
      DBTable dBTable0 = tableContainer0.getTable("AGGREGA8TION");
      assertNull(dBTable0);
      assertNull(tableContainer0.getDoc());
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals("alter table,", tableContainer0.getName());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      assertNotNull(defaultDBTable0);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertNull(defaultDBTable0.getName());
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("AGGREGA8TION", defaultDBTable0, 4552, "Jd)CR9:5!:$");
      assertNotNull(defaultDBColumn0);
      assertNull(defaultDBColumn0.getDoc());
      assertNull(defaultDBColumn0.getDefaultValue());
      assertTrue(defaultDBColumn0.isNullable());
      assertNull(defaultDBColumn0.getFractionDigits());
      assertEquals("AGGREGA8TION", defaultDBColumn0.getName());
      assertFalse(defaultDBColumn0.isVersionColumn());
      assertEquals("column", defaultDBColumn0.getObjectType());
      assertNull(defaultDBColumn0.getSize());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertNull(defaultDBTable0.getName());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "AGGREGA8TION.AGGREGA8TION, AGGREGA8TION.AGGREGA8TION, AGGREGA8TION.AGGREGA8TION, AGGREGA8TION.AGGREGA8TION, AGGREGA8TION.AGGREGA8TION, AGGREGA8TION.AGGREGA8TION, AGGREGA8TION.~?hsAeb'tl5b, AGGREGA8TION.AGGREGA8TION, AGGREGA8TION.+LETd 5&=YUB.I;*";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "=?3,^I@Rd{H=5)A|#4";
      boolean boolean0 = SQLUtil.isProcedureCall("=?3,^I@Rd{H=5)A|#4");
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("=?3,^I@Rd{H=5)A|#4", stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("=?3,^I@Rd{H=5)A|#4", stringBuilder0.toString());
      assertEquals("=?3,^I@Rd{H=5)A|#4", stringBuilder1.toString());
      
      int int0 = 1;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        stringBuilder0.insert(1, charArray0, (-1081498388), (-1081498388));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // offset -1081498388, len -1081498388, str.length 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("2V");
      assertNull(boolean0);
      
      String string0 = "HpN-_'m|/*M2_3;}";
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("HpN-_'m|/*M2_3;}");
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = SQLUtil.isDML("c),%dGVK8G");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0854684353173742
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      assertNotNull(fBConnectionProperties0);
      assertNull(fBConnectionProperties0.getType());
      assertNull(fBConnectionProperties0.getTpbMapping());
      
      boolean boolean0 = SQLUtil.isDML("type");
      assertFalse(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("+SJ9E,{5;");
      assertNull(boolean1);
      
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("defaultIsolation");
      assertNull(boolean2);
      
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "useStandardUdf", fBConnectionProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      assertNotNull(fBConnectionProperties0);
      assertNull(fBConnectionProperties0.getType());
      assertNull(fBConnectionProperties0.getTpbMapping());
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(39);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      FileMonitor fileMonitor0 = new FileMonitor();
      assertNotNull(fileMonitor0);
      
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      
      boolean boolean0 = fBConnectionProperties0.isUseStreamBlobs();
      assertNull(fBConnectionProperties0.getType());
      assertNull(fBConnectionProperties0.getTpbMapping());
      assertFalse(boolean0);
      
      FileMonitor fileMonitor1 = new FileMonitor();
      assertNotNull(fileMonitor1);
      assertFalse(fileMonitor1.equals((Object)fileMonitor0));
      
      TableContainer tableContainer0 = new TableContainer("useTranslation");
      assertNotNull(tableContainer0);
      assertNull(tableContainer0.getDoc());
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals("useTranslation", tableContainer0.getName());
      
      DBTable dBTable0 = tableContainer0.getTable("password");
      assertNull(dBTable0);
      assertNull(tableContainer0.getDoc());
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals("useTranslation", tableContainer0.getName());
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("encoding", (DBTable) null, (-2463), "defaultIsolation");
      assertNotNull(defaultDBColumn0);
      assertNull(defaultDBColumn0.getDefaultValue());
      assertEquals("column", defaultDBColumn0.getObjectType());
      assertFalse(defaultDBColumn0.isVersionColumn());
      assertTrue(defaultDBColumn0.isNullable());
      assertNull(defaultDBColumn0.getFractionDigits());
      assertEquals("encoding", defaultDBColumn0.getName());
      assertNull(defaultDBColumn0.getSize());
      assertNull(defaultDBColumn0.getDoc());
      
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertNotNull(string0);
      assertNull(defaultDBColumn0.getDefaultValue());
      assertEquals("column", defaultDBColumn0.getObjectType());
      assertFalse(defaultDBColumn0.isVersionColumn());
      assertTrue(defaultDBColumn0.isNullable());
      assertNull(defaultDBColumn0.getFractionDigits());
      assertEquals("encoding", defaultDBColumn0.getName());
      assertNull(defaultDBColumn0.getSize());
      assertNull(defaultDBColumn0.getDoc());
      assertEquals("encoding DEFAULTISOLATION NULL", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9743147528693494
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = SQLUtil.isDDL("deletel)=5|$j)v");
      assertFalse(boolean0);
      
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      assertNotNull(integer1);
      assertEquals(3, (int)integer1);
      
      Integer integer2 = RawTransaction.COMMIT;
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "DI8TFYfe.WzF;/";
      stringArray0[2] = "deletel)=5|$j)v";
      stringArray0[3] = null;
      stringArray0[4] = "deletel)=5|$j)v";
      stringArray0[4] = "RZF";
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      StringBuilder stringBuilder0 = new StringBuilder(6);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      boolean boolean1 = SQLUtil.isQuery("selectx0x81.s");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7W'1X[2r\\']5");
      assertNotNull(defaultDBTable0);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("7W'1X[2r\\']5", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7W'1X[2r\\']5";
      stringArray0[1] = "7W'1X[2r\\']5";
      stringArray0[2] = "7W'1X[2r\\']5";
      stringArray0[3] = "7W'1X[2r\\']5";
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      StringBuilder stringBuilder0 = new StringBuilder(6);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^EI_'b64>Xmse&Z;X>w";
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-95);
      Integer integer0 = RawTransaction.COMMIT;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      assertEquals("(^EI_'b64>Xmse&Z;X>w, )", string0);
      
      String string1 = SQLUtil.join("ure;", "^EI_'b64>Xmse&Z;X>w", stringArray0, "yyyy-MM-dd'T'HH:mm:ss.SwS", "m08Cvsf", stringArray0);
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ure; join yyyy-MM-dd'T'HH:mm:ss.SwS as m08Cvsf on ^EI_'b64>Xmse&Z;X>w.^EI_'b64>Xmse&Z;X>w = m08Cvsf.^EI_'b64>Xmse&Z;X>w and ^EI_'b64>Xmse&Z;X>w.null = m08Cvsf.null", string1);
      
      System.setCurrentTimeMillis(598);
      TableContainer tableContainer0 = new TableContainer(">");
      assertNotNull(tableContainer0);
      assertNull(tableContainer0.getDoc());
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals(">", tableContainer0.getName());
      
      DBSchema dBSchema0 = tableContainer0.getSchema();
      assertNull(dBSchema0);
      assertNull(tableContainer0.getDoc());
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals(">", tableContainer0.getName());
      
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      assertNotNull(fBConnectionProperties0);
      assertNull(fBConnectionProperties0.getType());
      assertNull(fBConnectionProperties0.getTpbMapping());
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(39);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      FileMonitor fileMonitor0 = new FileMonitor();
      assertNotNull(fileMonitor0);
      
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(mockThread0, 65514L, 65514L, timeUnit0);
      assertNotNull(scheduledFuture0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      boolean boolean0 = delayQueue0.add((Delayed) scheduledFuture0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertTrue(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!M,ii");
      assertNotNull(defaultDBTable0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("!M,ii", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("aC4'_8u:%", defaultDBTable0, 2853, "roleName");
      assertNotNull(defaultDBColumn0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("!M,ii", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBColumn0.getDoc());
      assertEquals("aC4'_8u:%", defaultDBColumn0.getName());
      assertFalse(defaultDBColumn0.isVersionColumn());
      assertTrue(defaultDBColumn0.isNullable());
      assertNull(defaultDBColumn0.getDefaultValue());
      assertNull(defaultDBColumn0.getSize());
      assertNull(defaultDBColumn0.getFractionDigits());
      assertEquals("column", defaultDBColumn0.getObjectType());
      
      String[] stringArray0 = new String[1];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("derby.properties");
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "sqlDialect");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      stringArray0[0] = "defaultIsolation";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.impl.store.raw.data.EncryptData", true, stringArray0);
      assertNotNull(dBPrimaryKeyConstraint0);
      assertEquals(1, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("!M,ii", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("org.apache.derby.impl.store.raw.data.EncryptData", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("!M,ii", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("org.apache.derby.impl.store.raw.data.EncryptData", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertEquals("CONSTRAINT org.apache.derby.impl.store.raw.data.EncryptData PRIMARY KEY (defaultIsolation)", string0);
      
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("!M,ii");
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.138333059508028
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      assertNotNull(fBConnectionProperties0);
      assertNull(fBConnectionProperties0.getTpbMapping());
      assertNull(fBConnectionProperties0.getType());
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(39);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      FileMonitor fileMonitor0 = new FileMonitor();
      assertNotNull(fileMonitor0);
      
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      
      Thread thread1 = fileMonitor0.getDaemonThread(thread0, "type", true);
      assertNotNull(thread1);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertTrue(thread1.isDaemon());
      assertFalse(thread1.isInterrupted());
      assertEquals(0, thread1.countStackFrames());
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThreadGroup threadGroup0 = (ThreadGroup)thread1.getUncaughtExceptionHandler();
      assertNotNull(threadGroup0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertTrue(thread1.isDaemon());
      assertFalse(thread1.isInterrupted());
      assertEquals(0, thread1.countStackFrames());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      
      thread1.setUncaughtExceptionHandler(threadGroup0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertTrue(thread1.isDaemon());
      assertFalse(thread1.isInterrupted());
      assertEquals(0, thread1.countStackFrames());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(thread1, 65535L, 65535L, timeUnit0);
      assertNotNull(scheduledFuture0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertTrue(thread1.isDaemon());
      assertFalse(thread1.isInterrupted());
      assertEquals(0, thread1.countStackFrames());
      
      boolean boolean0 = delayQueue0.add((Delayed) scheduledFuture0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertTrue(thread1.isDaemon());
      assertFalse(thread1.isInterrupted());
      assertEquals(0, thread1.countStackFrames());
      assertTrue(boolean0);
      
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      Delayed delayed0 = delayQueue0.poll(2156L, timeUnit1);
      assertNotNull(delayed0);
      assertFalse(delayQueue0.contains(delayed0));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!,ii");
      assertNotNull(defaultDBTable0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("!,ii", defaultDBTable0.getName());
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("aC4'_8u:%", defaultDBTable0, 2853, "roleName");
      assertNotNull(defaultDBColumn0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("!,ii", defaultDBTable0.getName());
      assertEquals("aC4'_8u:%", defaultDBColumn0.getName());
      assertNull(defaultDBColumn0.getDoc());
      assertTrue(defaultDBColumn0.isNullable());
      assertNull(defaultDBColumn0.getFractionDigits());
      assertFalse(defaultDBColumn0.isVersionColumn());
      assertEquals("column", defaultDBColumn0.getObjectType());
      assertNull(defaultDBColumn0.getDefaultValue());
      assertNull(defaultDBColumn0.getSize());
      
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertNotNull(string0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("!,ii", defaultDBTable0.getName());
      assertEquals("aC4'_8u:%", defaultDBColumn0.getName());
      assertNull(defaultDBColumn0.getDoc());
      assertTrue(defaultDBColumn0.isNullable());
      assertNull(defaultDBColumn0.getFractionDigits());
      assertFalse(defaultDBColumn0.isVersionColumn());
      assertEquals("column", defaultDBColumn0.getObjectType());
      assertNull(defaultDBColumn0.getDefaultValue());
      assertNull(defaultDBColumn0.getSize());
      assertEquals("aC4'_8u:% ROLENAME NULL", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "isolation";
      stringArray0[1] = "blobBufferSize";
      stringArray0[2] = "roleName";
      stringArray0[3] = "timestampUsesLocalTimezone";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "database", true, stringArray0);
      assertNotNull(dBPrimaryKeyConstraint0);
      assertEquals(4, stringArray0.length);
      assertEquals("database", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("!,ii", defaultDBTable0.getName());
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertNotNull(string1);
      assertEquals(4, stringArray0.length);
      assertEquals("database", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("!,ii", defaultDBTable0.getName());
      assertFalse(string1.equals((Object)string0));
      assertEquals("CONSTRAINT database PRIMARY KEY (isolation, blobBufferSize, roleName, timestampUsesLocalTimezone)", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      assertNotNull(fBConnectionProperties0);
      assertNull(fBConnectionProperties0.getTpbMapping());
      assertNull(fBConnectionProperties0.getType());
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(39);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      FileMonitor fileMonitor0 = new FileMonitor();
      assertNotNull(fileMonitor0);
      
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      
      Thread thread1 = fileMonitor0.getDaemonThread(thread0, "type", true);
      assertNotNull(thread1);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(thread1.isInterrupted());
      assertEquals(0, thread1.countStackFrames());
      assertTrue(thread1.isDaemon());
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(thread1, 65535L, 65535L, timeUnit0);
      assertNotNull(scheduledFuture0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(thread1.isInterrupted());
      assertEquals(0, thread1.countStackFrames());
      assertTrue(thread1.isDaemon());
      
      boolean boolean0 = delayQueue0.add((Delayed) scheduledFuture0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(thread1.isInterrupted());
      assertEquals(0, thread1.countStackFrames());
      assertTrue(thread1.isDaemon());
      assertTrue(boolean0);
      
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      Delayed delayed0 = delayQueue0.poll(2156L, timeUnit1);
      assertNotNull(delayed0);
      assertFalse(delayQueue0.contains(delayed0));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      
      boolean boolean1 = fBConnectionProperties0.equals(delayed0);
      assertFalse(delayQueue0.contains(delayed0));
      assertNull(fBConnectionProperties0.getTpbMapping());
      assertNull(fBConnectionProperties0.getType());
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FBConnectionProperties fBConnectionProperties1 = new FBConnectionProperties();
      assertNotNull(fBConnectionProperties1);
      assertNull(fBConnectionProperties1.getTpbMapping());
      assertNull(fBConnectionProperties1.getType());
      assertTrue(fBConnectionProperties1.equals((Object)fBConnectionProperties0));
      
      Boolean boolean2 = new Boolean("useStandardUdf");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.464816384890813
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[0];
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      assertNotNull(integer1);
      assertEquals(3, (int)integer1);
      
      String string0 = "&)0g;q@BMJ";
      int int0 = 3;
      String string1 = "#~5]gx2h";
      DBCatalog dBCatalog0 = new DBCatalog();
      assertNotNull(dBCatalog0);
      assertEquals("catalog", dBCatalog0.getObjectType());
      assertNull(dBCatalog0.getName());
      assertNull(dBCatalog0.getDoc());
      
      DBSchema dBSchema0 = new DBSchema("#~5]gx2h", dBCatalog0);
      assertNotNull(dBSchema0);
      assertEquals("catalog", dBCatalog0.getObjectType());
      assertNull(dBCatalog0.getName());
      assertNull(dBCatalog0.getDoc());
      assertNull(dBSchema0.getDoc());
      assertEquals("schema", dBSchema0.getObjectType());
      assertEquals("#~5]gx2h", dBSchema0.getName());
      
      DBTable dBTable0 = dBSchema0.getTable("TeHv,");
      assertNull(dBTable0);
      assertEquals("catalog", dBCatalog0.getObjectType());
      assertNull(dBCatalog0.getName());
      assertNull(dBCatalog0.getDoc());
      assertNull(dBSchema0.getDoc());
      assertEquals("schema", dBSchema0.getObjectType());
      assertEquals("#~5]gx2h", dBSchema0.getName());
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",^U", (DBTable) null, 3, "TeHv,");
      assertNotNull(defaultDBColumn0);
      assertNull(defaultDBColumn0.getDefaultValue());
      assertFalse(defaultDBColumn0.isVersionColumn());
      assertTrue(defaultDBColumn0.isNullable());
      assertNull(defaultDBColumn0.getDoc());
      assertEquals(",^U", defaultDBColumn0.getName());
      assertNull(defaultDBColumn0.getFractionDigits());
      assertNull(defaultDBColumn0.getSize());
      assertEquals("column", defaultDBColumn0.getObjectType());
      
      String string2 = SQLUtil.removeComments("delete");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("delete", string2);
      
      boolean boolean0 = SQLUtil.isDML("delete");
      assertTrue(boolean0);
      
      String string3 = SQLUtil.join("c),%dGVK8G", "delete", stringArray0, (String) null, "9CdWr9T)Gx2", stringArray0);
      assertNotNull(string3);
      assertEquals(0, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("c),%dGVK8G join null as 9CdWr9T)Gx2 on ", string3);
      
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7W'1X[2r\\']5");
      assertNotNull(defaultDBTable0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("7W'1X[2r\\']5", defaultDBTable0.getName());
      
      boolean boolean0 = SQLUtil.isDDL("execjava.lang.object@2cf381d0");
      assertFalse(boolean0);
      
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      assertNotNull(fBConnectionProperties0);
      assertNull(fBConnectionProperties0.getType());
      assertNull(fBConnectionProperties0.getTpbMapping());
      
      boolean boolean1 = SQLUtil.isDML("insert");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("localEncoding");
      assertNull(boolean2);
      
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("type");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      assertNotNull(columnDescriptorList0);
      assertTrue(columnDescriptorList0.isEmpty());
      assertEquals(0, columnDescriptorList0.size());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DBDataType dBDataType0 = DBDataType.getInstance(100, "Al3{{~O|}.e\"#Ab");
      assertNotNull(dBDataType0);
      assertEquals(100, dBDataType0.getJdbcType());
      assertFalse(dBDataType0.isLOB());
      assertFalse(dBDataType0.isTemporal());
      assertEquals("AL3{{~O|}.E\"#AB", dBDataType0.getName());
      assertEquals("AL3{{~O|}.E\"#AB", dBDataType0.toString());
      
      GDSType gDSType0 = GDSType.getType("drop materialized view");
      assertNull(gDSType0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("inserti{ef#^1_wqs");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "^EI_'b64>Xmse&Z;X>w";
      stringArray0[0] = "^EI_'b64>Xmse&Z;X>w";
      stringArray0[1] = "Bylp(,m";
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(^EI_'b64>Xmse&Z;X>w, Bylp(,m)", string1);
      
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "Al3{{~O|}.e\"#Ab";
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("isc_info_sql_sub_type ", stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("isc_info_sql_sub_type ", stringBuilder0.toString());
      assertEquals("isc_info_sql_sub_type ", stringBuilder1.toString());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Al3{{~O|}.e\"#Ab", (DBSchema) null);
      assertNotNull(defaultDBTable0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("Al3{{~O|}.e\"#Ab", defaultDBTable0.getName());
      
      String[] stringArray0 = new String[0];
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("drop materialized view", false, defaultDBTable0, stringArray0);
      assertNotNull(dBNonUniqueIndex0);
      assertEquals(0, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("Al3{{~O|}.e\"#Ab", defaultDBTable0.getName());
      assertFalse(dBNonUniqueIndex0.isNameDeterministic());
      assertEquals("drop materialized view", dBNonUniqueIndex0.getName());
      assertEquals("index", dBNonUniqueIndex0.getObjectType());
      assertFalse(dBNonUniqueIndex0.isUnique());
      assertNull(dBNonUniqueIndex0.getDoc());
      
      DBDataType dBDataType0 = DBDataType.getInstance((-384), "");
      assertNotNull(dBDataType0);
      assertFalse(dBDataType0.isLOB());
      assertEquals((-384), dBDataType0.getJdbcType());
      assertEquals("", dBDataType0.getName());
      assertFalse(dBDataType0.isTemporal());
      assertEquals("", dBDataType0.toString());
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "isc_info_sql_sub_type ";
      stringArray1[1] = "drop materialized view";
      stringArray1[2] = "Al3{{~O|}.e\"#Ab";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray1);
      assertNotNull(dBPrimaryKeyConstraint0);
      assertEquals(3, stringArray1.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("Al3{{~O|}.e\"#Ab", defaultDBTable0.getName());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertNull(dBPrimaryKeyConstraint0.getName());
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("g_47}rSE", false, dBPrimaryKeyConstraint0);
      assertNotNull(dBUniqueIndex0);
      assertEquals(3, stringArray1.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("Al3{{~O|}.e\"#Ab", defaultDBTable0.getName());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertNull(dBPrimaryKeyConstraint0.getName());
      assertFalse(dBUniqueIndex0.isNameDeterministic());
      assertTrue(dBUniqueIndex0.isUnique());
      assertNull(dBUniqueIndex0.getDoc());
      assertEquals("g_47}rSE", dBUniqueIndex0.getName());
      assertEquals("index", dBUniqueIndex0.getObjectType());
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNull(dBUniqueConstraint0);
      assertEquals(0, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("Al3{{~O|}.e\"#Ab", defaultDBTable0.getName());
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string1);
      assertEquals(3, stringArray1.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("Al3{{~O|}.e\"#Ab", defaultDBTable0.getName());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertNull(dBPrimaryKeyConstraint0.getName());
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = SQLUtil.isDDL("deletel)=5|$j)v");
      assertFalse(boolean0);
      
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      assertNotNull(fBConnectionProperties0);
      assertNull(fBConnectionProperties0.getTpbMapping());
      assertNull(fBConnectionProperties0.getType());
      
      boolean boolean1 = SQLUtil.isDML("timestampUsesLocalTimezone");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean("userName");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = fBConnectionProperties0.isTimestampUsesLocalTimezone();
      assertNull(fBConnectionProperties0.getTpbMapping());
      assertNull(fBConnectionProperties0.getType());
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("isolation", compositeDBObject0);
      assertNotNull(tableContainer0);
      assertEquals("isolation", tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getDoc());
      
      DBSchema dBSchema0 = tableContainer0.getSchema();
      assertNull(dBSchema0);
      assertEquals("isolation", tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getDoc());
      
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1537419427010902
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "";
      stringArray0[0] = "";
      String string1 = "select";
      stringArray0[1] = "select";
      String string2 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" = '' AND select = 'select'", string2);
      
      String string3 = SQLUtil.renderColumnNames(stringArray0);
      assertNotNull(string3);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("(, select)", string3);
      
      String string4 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string4);
      
      boolean boolean0 = false;
      DBCatalog dBCatalog0 = new DBCatalog();
      assertNotNull(dBCatalog0);
      assertEquals("catalog", dBCatalog0.getObjectType());
      assertNull(dBCatalog0.getName());
      assertNull(dBCatalog0.getDoc());
      
      DBSchema dBSchema0 = new DBSchema("select", dBCatalog0);
      assertNotNull(dBSchema0);
      assertEquals("catalog", dBCatalog0.getObjectType());
      assertNull(dBCatalog0.getName());
      assertNull(dBCatalog0.getDoc());
      assertEquals("select", dBSchema0.getName());
      assertEquals("schema", dBSchema0.getObjectType());
      assertNull(dBSchema0.getDoc());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter table=?3,^i@rd{h=5)a|#4", dBSchema0);
      assertNotNull(defaultDBTable0);
      assertEquals("catalog", dBCatalog0.getObjectType());
      assertNull(dBCatalog0.getName());
      assertNull(dBCatalog0.getDoc());
      assertEquals("select", dBSchema0.getName());
      assertEquals("schema", dBSchema0.getObjectType());
      assertNull(dBSchema0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("alter table=?3,^i@rd{h=5)a|#4", defaultDBTable0.getName());
      
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-3980));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.490664754278907
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("java.lang.Object@40e9a196");
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("java.lang.Object@40e9a196", stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("java.lang.Object@40e9a196", (DBSchema) null);
      assertNotNull(defaultDBTable0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      
      String[] stringArray0 = new String[0];
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("java.lang.Object@40e9a196", true, defaultDBTable0, stringArray0);
      assertNotNull(dBNonUniqueIndex0);
      assertEquals(0, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertTrue(dBNonUniqueIndex0.isNameDeterministic());
      assertNull(dBNonUniqueIndex0.getDoc());
      assertEquals("index", dBNonUniqueIndex0.getObjectType());
      assertFalse(dBNonUniqueIndex0.isUnique());
      
      DBDataType dBDataType0 = DBDataType.getInstance((-384), "java.lang.Object@40e9a196");
      assertNotNull(dBDataType0);
      assertFalse(dBDataType0.isLOB());
      assertFalse(dBDataType0.isTemporal());
      assertEquals((-384), dBDataType0.getJdbcType());
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "java.lang.Object@40e9a196", true, stringArray0);
      assertNotNull(dBPrimaryKeyConstraint0);
      assertEquals(0, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBPrimaryKeyConstraint0);
      assertNotNull(dBUniqueIndex0);
      assertEquals(0, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertEquals("index", dBUniqueIndex0.getObjectType());
      assertNull(dBUniqueIndex0.getName());
      assertNull(dBUniqueIndex0.getDoc());
      assertTrue(dBUniqueIndex0.isNameDeterministic());
      assertTrue(dBUniqueIndex0.isUnique());
      
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      assertSame(dBUniqueConstraint0, dBPrimaryKeyConstraint0);
      assertNotNull(dBUniqueConstraint0);
      assertEquals(0, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertTrue(dBUniqueConstraint0.isNameDeterministic());
      assertNull(dBUniqueConstraint0.getDoc());
      
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertSame(dBUniqueConstraint0, dBPrimaryKeyConstraint0);
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertTrue(dBUniqueConstraint0.isNameDeterministic());
      assertNull(dBUniqueConstraint0.getDoc());
      assertFalse(string1.equals((Object)string0));
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = dBUniqueConstraint0.toString();
      assertSame(dBUniqueConstraint0, dBPrimaryKeyConstraint0);
      assertNotNull(string2);
      assertEquals(0, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertTrue(dBUniqueConstraint0.isNameDeterministic());
      assertNull(dBUniqueConstraint0.getDoc());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertSame(dBUniqueConstraint0, dBPrimaryKeyConstraint0);
      assertNotNull(string3);
      assertEquals(0, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertTrue(dBUniqueConstraint0.isNameDeterministic());
      assertNull(dBUniqueConstraint0.getDoc());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      assertSame(dBPrimaryKeyConstraint1, dBPrimaryKeyConstraint0);
      assertSame(dBPrimaryKeyConstraint1, dBUniqueConstraint0);
      assertNotNull(dBPrimaryKeyConstraint1);
      assertEquals("unique constraint", dBPrimaryKeyConstraint1.getObjectType());
      assertTrue(dBPrimaryKeyConstraint1.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint1.getDoc());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(dBPrimaryKeyConstraint0, dBPrimaryKeyConstraint1);
      assertSame(dBPrimaryKeyConstraint0, dBUniqueConstraint0);
      assertEquals(0, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder2 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec1);
      assertNotSame(nameSpec1, nameSpec0);
      assertNotSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertSame(dBUniqueConstraint0, dBPrimaryKeyConstraint1);
      assertSame(dBUniqueConstraint0, dBPrimaryKeyConstraint0);
      assertNotNull(stringBuilder2);
      assertEquals(0, stringArray0.length);
      assertEquals("", stringBuilder2.toString());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertTrue(dBUniqueConstraint0.isNameDeterministic());
      assertNull(dBUniqueConstraint0.getDoc());
      assertFalse(nameSpec1.equals((Object)nameSpec0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      
      boolean boolean1 = SQLUtil.isDML("CONSTRAINT java.lang.Object@40e9a196 UNIQUE ()");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      NameSpec nameSpec2 = NameSpec.ALWAYS;
      String string4 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec2);
      assertSame(nameSpec2, nameSpec0);
      assertNotSame(nameSpec2, nameSpec1);
      assertSame(dBPrimaryKeyConstraint0, dBPrimaryKeyConstraint1);
      assertSame(dBPrimaryKeyConstraint0, dBUniqueConstraint0);
      assertNotNull(string4);
      assertEquals(0, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertFalse(nameSpec2.equals((Object)nameSpec1));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CONSTRAINT java.lang.Object@40e9a196 UNIQUE ()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9743147528693494
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "Al3{{~O|}.e\"#Ab";
      String string0 = SQLUtil.renderColumnListWithTableName("Al3{{~O|}.e\"#Ab", stringArray0);
      assertNotNull(string0);
      assertEquals(3, stringArray0.length);
      assertEquals("Al3{{~O|}.e\"#Ab.null, Al3{{~O|}.e\"#Ab.null, Al3{{~O|}.e\"#Ab.Al3{{~O|}.e\"#Ab", string0);
      
      String string1 = "alter table,";
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertNotNull(string2);
      assertEquals(3, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("(, , Al3{{~O|}.e\"#Ab)", string2);
      
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("alter table,", compositeDBObject0);
      assertNotNull(tableContainer0);
      assertEquals("alter table,", tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getDoc());
      
      DBTable dBTable0 = tableContainer0.getTable("e@GCbw(WS}");
      assertNull(dBTable0);
      assertEquals("alter table,", tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getDoc());
      
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("Al3{{~O|}.e\"#Ab.null, Al3{{~O|}.e\"#Ab.null, Al3{{~O|}.e\"#Ab.Al3{{~O|}.e\"#Ab", (DBTable) null, 4552, "(, , Al3{{~O|}.e\"#Ab)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.2554823251787535
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("AGGREGA8TION");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "AGGREGA8TION";
      stringArray0[1] = "AGGREGA8TION";
      stringArray0[2] = "AGGREGA8TION";
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      boolean boolean2 = SQLUtil.isDDL("AGGREGA8TION");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      StringBuilder stringBuilder0 = new StringBuilder("6hE!(");
      assertNotNull(stringBuilder0);
      assertEquals("6hE!(", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "CT");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("6hE!(CT", stringBuilder0.toString());
      assertEquals("6hE!(CT", stringBuilder1.toString());
      
      IntStream intStream0 = stringBuilder0.codePoints();
      assertSame(stringBuilder0, stringBuilder1);
      assertNotNull(intStream0);
      assertEquals("6hE!(CT", stringBuilder0.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      assertEquals("TC(!Eh6", stringBuilder0.toString());
      assertEquals("TC(!Eh6", stringBuilder1.toString());
      assertEquals("TC(!Eh6", stringBuilder2.toString());
      
      StringBuilder stringBuilder3 = SQLUtil.addOptionalCondition("AGGREGA8TION", stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertNotNull(stringBuilder3);
      assertEquals("TC(!Eh6 or AGGREGA8TION", stringBuilder0.toString());
      assertEquals("TC(!Eh6 or AGGREGA8TION", stringBuilder1.toString());
      assertEquals("TC(!Eh6 or AGGREGA8TION", stringBuilder2.toString());
      assertEquals("TC(!Eh6 or AGGREGA8TION", stringBuilder3.toString());
      
      PipedWriter pipedWriter1 = new PipedWriter();
      assertNotNull(pipedWriter1);
      assertFalse(pipedWriter1.equals((Object)pipedWriter0));
      
      // Undeclared exception!
      try { 
        pipedWriter0.write("CT", 2, 1197);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "Al3{{~O|}.e\"#Ab";
      String string0 = SQLUtil.renderColumnListWithTableName("Al3{{~O|}.e\"#Ab", stringArray0);
      assertNotNull(string0);
      assertEquals(3, stringArray0.length);
      assertEquals("Al3{{~O|}.e\"#Ab.null, Al3{{~O|}.e\"#Ab.Al3{{~O|}.e\"#Ab, Al3{{~O|}.e\"#Ab.null", string0);
      
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(stringArray0[2], compositeDBObject0);
      assertNotNull(tableContainer0);
      assertEquals(3, stringArray0.length);
      assertNull(tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getDoc());
      
      DBTable dBTable0 = tableContainer0.getTable(stringArray0[0]);
      assertNull(dBTable0);
      assertEquals(3, stringArray0.length);
      assertNull(tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getDoc());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("storage_key", (DBTable) null, 34, "/(G.y}<>sJ7:9Ag");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: /(G.y}<>sJ7:9Ag
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "7W'1X[2r\\\\']5";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7W'1X[2r\\']5";
      stringArray0[1] = "7W'1X[2r\\']5";
      stringArray0[2] = "7W'1X[2r\\']5";
      String string1 = "/*";
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.2879134587877181
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = SQLUtil.isDDL("deletel)=5|$j)v");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderValue("deletel)=5|$j)v");
      assertNotNull(string0);
      assertEquals("'deletel)=5|$j)v'", string0);
      
      String string1 = SQLUtil.normalize("deletel)=5|$j)v", false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("deletel) = 5 | $ j) v", string1);
      
      boolean boolean1 = SQLUtil.isDDL(".\"");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = ".\"";
      String string2 = SQLUtil.join("'deletel)=5|$j)v'", "deletel) = 5 | $ j) v", stringArray0, "71|hj^'5~8m4y.-\u0003U*", "", stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string2);
      assertEquals(0, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("'deletel)=5|$j)v' join 71|hj^'5~8m4y.-\u0003U* as  on ", string2);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNotNull(defaultDBTable0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getName());
      
      String string3 = SQLUtil.substituteMarkers("deletel)=5|$j)v", "'deletel)=5|$j)v'", (Object) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("deletel)=5|$j)v", string3);
      
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("CLOB", stringArray1, "PROJECTION", "g-DO", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = stringArray0[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertNotNull(string0);
      assertEquals(6, stringArray0.length);
      assertEquals("(, , , , , )", string0);
      
      String string1 = SQLUtil.removeComments("(, , , , , )");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("(, , , , , )", string1);
      
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7W'1X[2r\\']5");
      assertNotNull(defaultDBTable0);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("7W'1X[2r\\']5", defaultDBTable0.getName());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)42;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-24), (byte) (-58), (byte) (-97), (byte)42}, byteArray0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7W'1X[2r\\']5";
      stringArray0[1] = "7W'1X[2r\\']5";
      stringArray0[2] = "7W'1X[2r\\']5";
      stringArray0[3] = "7W'1X[2r\\']5";
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.println(0.0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("7W'1X[2r\\']5", defaultDBTable0.getName());
      
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("7W'1X[2r\\']5", defaultDBTable0.getName());
      assertEquals("7W'1X[2r\\']5", string0);
      
      System.setCurrentTimeMillis((-1011L));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4451858789480823
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "UUID";
      stringArray0[1] = "Al3{{~O|}.e\"#Ab";
      stringArray0[2] = "Al3{{~O|}.e\"#Ab";
      String string0 = SQLUtil.renderColumnListWithTableName("Al3{{~O|}.e\"#Ab", stringArray0);
      assertNotNull(string0);
      assertEquals(3, stringArray0.length);
      assertEquals("Al3{{~O|}.e\"#Ab.UUID, Al3{{~O|}.e\"#Ab.Al3{{~O|}.e\"#Ab, Al3{{~O|}.e\"#Ab.Al3{{~O|}.e\"#Ab", string0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("Al3{{~O|}.e\"#Ab", stringArray0);
      assertNotNull(string1);
      assertEquals(3, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Al3{{~O|}.e\"#Ab.UUID, Al3{{~O|}.e\"#Ab.Al3{{~O|}.e\"#Ab, Al3{{~O|}.e\"#Ab.Al3{{~O|}.e\"#Ab", string1);
      
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertNotNull(string2);
      assertEquals(3, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("(UUID, Al3{{~O|}.e\"#Ab, Al3{{~O|}.e\"#Ab)", string2);
      
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      assertNotNull(columnDescriptorList0);
      assertTrue(columnDescriptorList0.isEmpty());
      assertEquals(0, columnDescriptorList0.size());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("Al3{{~O|}.e\"#Ab"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, arrayList0);
      assertNotNull(versionNumber0);
      assertFalse(arrayList0.contains("Al3{{~O|}.e\"#Ab"));
      assertTrue(columnDescriptorList0.isEmpty());
      assertEquals(0, columnDescriptorList0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      Character character0 = Character.valueOf('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNotNull(defaultDBTable0);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertNull(defaultDBTable0.getName());
      
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "`7`p!|K|}tzpF_", true, stringArray0);
      assertNotNull(dBUniqueConstraint0);
      assertEquals(3, stringArray0.length);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertNull(defaultDBTable0.getName());
      assertNull(dBUniqueConstraint0.getDoc());
      assertEquals("`7`p!|K|}tzpF_", dBUniqueConstraint0.getName());
      assertTrue(dBUniqueConstraint0.isNameDeterministic());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("UUID", true, dBUniqueConstraint0);
      assertNotNull(dBUniqueIndex0);
      assertEquals(3, stringArray0.length);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertNull(defaultDBTable0.getName());
      assertNull(dBUniqueConstraint0.getDoc());
      assertEquals("`7`p!|K|}tzpF_", dBUniqueConstraint0.getName());
      assertTrue(dBUniqueConstraint0.isNameDeterministic());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertTrue(dBUniqueIndex0.isUnique());
      assertNull(dBUniqueIndex0.getDoc());
      assertTrue(dBUniqueIndex0.isNameDeterministic());
      assertEquals("UUID", dBUniqueIndex0.getName());
      assertEquals("index", dBUniqueIndex0.getObjectType());
      
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      assertSame(defaultDBTable0, dBTable0);
      assertSame(dBTable0, defaultDBTable0);
      assertNotNull(dBTable0);
      assertEquals(3, stringArray0.length);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertNull(defaultDBTable0.getName());
      assertNull(dBUniqueConstraint0.getDoc());
      assertEquals("`7`p!|K|}tzpF_", dBUniqueConstraint0.getName());
      assertTrue(dBUniqueConstraint0.isNameDeterministic());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertTrue(dBUniqueIndex0.isUnique());
      assertNull(dBUniqueIndex0.getDoc());
      assertTrue(dBUniqueIndex0.isNameDeterministic());
      assertEquals("UUID", dBUniqueIndex0.getName());
      assertEquals("index", dBUniqueIndex0.getObjectType());
      assertEquals("table", dBTable0.getObjectType());
      assertNull(dBTable0.getName());
      assertNull(dBTable0.getDoc());
      
      int int0 = 465;
      DBDataType dBDataType0 = DBDataType.getInstance(465, "UUID");
      assertNotNull(dBDataType0);
      assertFalse(dBDataType0.isTemporal());
      assertFalse(dBDataType0.isLOB());
      assertEquals("UUID", dBDataType0.toString());
      assertEquals("UUID", dBDataType0.getName());
      assertEquals(465, dBDataType0.getJdbcType());
      
      Integer integer0 = new Integer(465);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(465, (int)integer0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete????", dBTable0, dBDataType0, integer0);
      assertNotNull(defaultDBColumn0);
      assertEquals(3, stringArray0.length);
      assertFalse(dBDataType0.isTemporal());
      assertFalse(dBDataType0.isLOB());
      assertEquals("UUID", dBDataType0.toString());
      assertEquals("UUID", dBDataType0.getName());
      assertEquals(465, dBDataType0.getJdbcType());
      assertEquals(465, (int)defaultDBColumn0.getSize());
      assertEquals("column", defaultDBColumn0.getObjectType());
      assertNull(defaultDBColumn0.getFractionDigits());
      assertEquals("delete????", defaultDBColumn0.getName());
      assertFalse(defaultDBColumn0.isVersionColumn());
      assertTrue(defaultDBColumn0.isNullable());
      assertNull(defaultDBColumn0.getDoc());
      assertNull(defaultDBColumn0.getDefaultValue());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertNull(defaultDBTable0.getName());
      assertNull(dBUniqueConstraint0.getDoc());
      assertEquals("`7`p!|K|}tzpF_", dBUniqueConstraint0.getName());
      assertTrue(dBUniqueConstraint0.isNameDeterministic());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertTrue(dBUniqueIndex0.isUnique());
      assertNull(dBUniqueIndex0.getDoc());
      assertTrue(dBUniqueIndex0.isNameDeterministic());
      assertEquals("UUID", dBUniqueIndex0.getName());
      assertEquals("index", dBUniqueIndex0.getObjectType());
      assertEquals("table", dBTable0.getObjectType());
      assertNull(dBTable0.getName());
      assertNull(dBTable0.getDoc());
      assertTrue(integer0.equals((Object)int0));
      
      String string3 = SQLUtil.substituteMarkers("sys", "Al3{{~O|}.e\"#Ab", defaultDBColumn0);
      assertSame(defaultDBTable0, dBTable0);
      assertSame(dBTable0, defaultDBTable0);
      assertNotNull(string3);
      assertEquals(3, stringArray0.length);
      assertFalse(dBDataType0.isTemporal());
      assertFalse(dBDataType0.isLOB());
      assertEquals("UUID", dBDataType0.toString());
      assertEquals("UUID", dBDataType0.getName());
      assertEquals(465, dBDataType0.getJdbcType());
      assertEquals(465, (int)defaultDBColumn0.getSize());
      assertEquals("column", defaultDBColumn0.getObjectType());
      assertNull(defaultDBColumn0.getFractionDigits());
      assertEquals("delete????", defaultDBColumn0.getName());
      assertFalse(defaultDBColumn0.isVersionColumn());
      assertTrue(defaultDBColumn0.isNullable());
      assertNull(defaultDBColumn0.getDoc());
      assertNull(defaultDBColumn0.getDefaultValue());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertNull(defaultDBTable0.getName());
      assertNull(dBUniqueConstraint0.getDoc());
      assertEquals("`7`p!|K|}tzpF_", dBUniqueConstraint0.getName());
      assertTrue(dBUniqueConstraint0.isNameDeterministic());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertTrue(dBUniqueIndex0.isUnique());
      assertNull(dBUniqueIndex0.getDoc());
      assertTrue(dBUniqueIndex0.isNameDeterministic());
      assertEquals("UUID", dBUniqueIndex0.getName());
      assertEquals("index", dBUniqueIndex0.getObjectType());
      assertEquals("table", dBTable0.getObjectType());
      assertNull(dBTable0.getName());
      assertNull(dBTable0.getDoc());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("sys", string3);
      
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      assertNotNull(fBConnectionProperties0);
      assertNull(fBConnectionProperties0.getTpbMapping());
      assertNull(fBConnectionProperties0.getType());
      
      boolean boolean0 = fBConnectionProperties0.isUseStandardUdf();
      assertNull(fBConnectionProperties0.getTpbMapping());
      assertNull(fBConnectionProperties0.getType());
      assertFalse(boolean0);
      
      DBDataType dBDataType1 = DBDataType.getInstance((-203), "drop materialized view");
      assertNotSame(dBDataType1, dBDataType0);
      assertNotNull(dBDataType1);
      assertFalse(dBDataType1.isTemporal());
      assertEquals((-203), dBDataType1.getJdbcType());
      assertEquals("DROP MATERIALIZED VIEW", dBDataType1.toString());
      assertEquals("DROP MATERIALIZED VIEW", dBDataType1.getName());
      assertFalse(dBDataType1.isLOB());
      assertFalse(dBDataType1.equals((Object)dBDataType0));
      
      fBConnectionProperties0.setBuffersNumber((-203));
      assertNull(fBConnectionProperties0.getTpbMapping());
      assertNull(fBConnectionProperties0.getType());
      
      GDSType gDSType0 = GDSType.getType("delete????");
      assertNull(gDSType0);
      
      FBManagedConnectionFactory fBManagedConnectionFactory0 = null;
      try {
        fBManagedConnectionFactory0 = new FBManagedConnectionFactory((GDSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jca.FBManagedConnectionFactory", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materializeM view");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isDDL("create materialized viewtimestampuseslocaltimezone");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      assertNotNull(columnDescriptorList0);
      assertEquals(0, columnDescriptorList0.size());
      assertTrue(columnDescriptorList0.isEmpty());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, arrayList0);
      assertNotNull(versionNumber0);
      assertEquals(0, columnDescriptorList0.size());
      assertTrue(columnDescriptorList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("drop materialized view", "drop materialized view", versionNumber0);
      assertNotNull(defaultDatabase0);
      assertFalse(arrayList0.contains("drop materialized view"));
      assertEquals(0, columnDescriptorList0.size());
      assertTrue(columnDescriptorList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(defaultDatabase0.isImportedSequences());
      assertFalse(defaultDatabase0.isImportedIndexes());
      assertEquals("drop materialized view", defaultDatabase0.getDatabaseProductName());
      assertFalse(defaultDatabase0.isImportedChecks());
      assertNull(defaultDatabase0.getUser());
      assertNull(defaultDatabase0.getTableInclusionPattern());
      assertFalse(defaultDatabase0.isImportedUKs());
      assertEquals("drop materialized view", defaultDatabase0.getName());
      assertNull(defaultDatabase0.getDoc());
      assertEquals("database", defaultDatabase0.getObjectType());
      assertNull(defaultDatabase0.getTableExclusionPattern());
      
      boolean boolean0 = SQLUtil.isDDL("drop materialized view");
      assertTrue(boolean0);
      
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      assertNotNull(fBConnectionProperties0);
      assertNull(fBConnectionProperties0.getType());
      assertNull(fBConnectionProperties0.getTpbMapping());
      
      boolean boolean1 = SQLUtil.isDML("drop index");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("drop materialized view");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "AGGREGA8TION";
      stringArray0[2] = stringArray0[1];
      // Undeclared exception!
      try { 
        SQLUtil.isQuery(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7W'1X[2r\\']5");
      assertNotNull(defaultDBTable0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("7W'1X[2r\\']5", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7W'1X[2r\\']5";
      stringArray0[1] = "7W'1X[2r\\']5";
      stringArray0[2] = "7W'1X[2r\\']5";
      stringArray0[3] = "7W'1X[2r\\']5";
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("7W'1X[2r\\']5");
      assertNotNull(defaultDBTable1);
      assertEquals("7W'1X[2r\\']5", defaultDBTable1.getName());
      assertNull(defaultDBTable1.getDoc());
      assertEquals("table", defaultDBTable1.getObjectType());
      assertTrue(defaultDBTable1.equals((Object)defaultDBTable0));
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "inner", true, stringArray0);
      assertNotNull(dBPrimaryKeyConstraint0);
      assertEquals(8, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("7W'1X[2r\\']5", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("inner", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertTrue(defaultDBTable0.equals((Object)defaultDBTable1));
      
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertEquals(8, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("7W'1X[2r\\']5", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("inner", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertTrue(defaultDBTable0.equals((Object)defaultDBTable1));
      
      dBPrimaryKeyConstraint0.setDoc("7W'1X[2r\\']5");
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertEquals(8, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("7W'1X[2r\\']5", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals("7W'1X[2r\\']5", dBPrimaryKeyConstraint0.getDoc());
      assertEquals("inner", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertTrue(defaultDBTable0.equals((Object)defaultDBTable1));
      
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("7W'1X[2r\\']5", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      assertNotNull(integer1);
      assertEquals(3, (int)integer1);
      
      Integer integer2 = RawTransaction.COMMIT;
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      
      DBSchema dBSchema0 = new DBSchema("m08Cvsf");
      assertNotNull(dBSchema0);
      assertNull(dBSchema0.getDoc());
      assertEquals("m08Cvsf", dBSchema0.getName());
      assertEquals("schema", dBSchema0.getObjectType());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("vHk6_", dBSchema0);
      assertNotNull(defaultDBTable0);
      assertNull(dBSchema0.getDoc());
      assertEquals("m08Cvsf", dBSchema0.getName());
      assertEquals("schema", dBSchema0.getObjectType());
      assertEquals("vHk6_", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "alter materia";
      stringArray0[1] = "alter materia";
      stringArray0[2] = "alter materia";
      stringArray0[3] = "alter materia";
      stringArray0[4] = "m08Cvsf";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "m08Cvsf", true, stringArray0);
      assertNotNull(dBPrimaryKeyConstraint0);
      assertEquals(5, stringArray0.length);
      assertNull(dBSchema0.getDoc());
      assertEquals("m08Cvsf", dBSchema0.getName());
      assertEquals("schema", dBSchema0.getObjectType());
      assertEquals("vHk6_", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("m08Cvsf", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertNotNull(string0);
      assertEquals(5, stringArray0.length);
      assertNull(dBSchema0.getDoc());
      assertEquals("m08Cvsf", dBSchema0.getName());
      assertEquals("schema", dBSchema0.getObjectType());
      assertEquals("vHk6_", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("m08Cvsf", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertEquals("CONSTRAINT m08Cvsf PRIMARY KEY (alter materia, alter materia, alter materia, alter materia, m08Cvsf)", string0);
      
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.9559838465843622
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("java.lang.Object@51a592b1");
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("java.lang.Object@51a592b1", stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.compile.TableOperatorNode", (DBSchema) null);
      assertNotNull(defaultDBTable0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      
      String[] stringArray0 = new String[0];
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("org.apache.derby.impl.sql.compile.TableOperatorNode", true, defaultDBTable0, stringArray0);
      assertNotNull(dBNonUniqueIndex0);
      assertEquals(0, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", dBNonUniqueIndex0.getName());
      assertFalse(dBNonUniqueIndex0.isUnique());
      assertEquals("index", dBNonUniqueIndex0.getObjectType());
      assertTrue(dBNonUniqueIndex0.isNameDeterministic());
      assertNull(dBNonUniqueIndex0.getDoc());
      
      defaultDBTable0.removeIndex(dBNonUniqueIndex0);
      assertEquals(0, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", dBNonUniqueIndex0.getName());
      assertFalse(dBNonUniqueIndex0.isUnique());
      assertEquals("index", dBNonUniqueIndex0.getObjectType());
      assertTrue(dBNonUniqueIndex0.isNameDeterministic());
      assertNull(dBNonUniqueIndex0.getDoc());
      
      DBDataType dBDataType0 = DBDataType.getInstance((-384), "org.apache.derby.impl.sql.compile.TableOperatorNode");
      assertNotNull(dBDataType0);
      assertFalse(dBDataType0.isTemporal());
      assertFalse(dBDataType0.isLOB());
      assertEquals("ORG.APACHE.DERBY.IMPL.SQL.COMPILE.TABLEOPERATORNODE", dBDataType0.getName());
      assertEquals("ORG.APACHE.DERBY.IMPL.SQL.COMPILE.TABLEOPERATORNODE", dBDataType0.toString());
      assertEquals((-384), dBDataType0.getJdbcType());
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.impl.sql.compile.TableOperatorNode", true, stringArray0);
      assertNotNull(dBPrimaryKeyConstraint0);
      assertEquals(0, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      assertNotNull(dBUniqueIndex0);
      assertEquals(0, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertNull(dBUniqueIndex0.getName());
      assertNull(dBUniqueIndex0.getDoc());
      assertEquals("index", dBUniqueIndex0.getObjectType());
      assertFalse(dBUniqueIndex0.isNameDeterministic());
      assertTrue(dBUniqueIndex0.isUnique());
      
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      assertSame(dBUniqueConstraint0, dBPrimaryKeyConstraint0);
      assertNotNull(dBUniqueConstraint0);
      assertEquals(0, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertTrue(dBUniqueConstraint0.isNameDeterministic());
      assertNull(dBUniqueConstraint0.getDoc());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", dBUniqueConstraint0.getName());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      
      String string1 = SQLUtil.join("AwGOp<GC_6#X'a", "org.apache.derby.impl.sql.compile.TableOperatorNode", stringArray0, "org.apache.derby.impl.sql.compile.TableOperatorNode", "hh=2G@A+/Z6", stringArray0);
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("AwGOp<GC_6#X'a join org.apache.derby.impl.sql.compile.TableOperatorNode as hh=2G@A+/Z6 on ", string1);
      
      Integer integer0 = RawTransaction.ABORT;
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("S", defaultDBTable0, dBDataType0, integer0, integer0);
      assertNotNull(defaultDBColumn0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertFalse(dBDataType0.isTemporal());
      assertFalse(dBDataType0.isLOB());
      assertEquals("ORG.APACHE.DERBY.IMPL.SQL.COMPILE.TABLEOPERATORNODE", dBDataType0.getName());
      assertEquals("ORG.APACHE.DERBY.IMPL.SQL.COMPILE.TABLEOPERATORNODE", dBDataType0.toString());
      assertEquals((-384), dBDataType0.getJdbcType());
      assertTrue(defaultDBColumn0.isNullable());
      assertEquals("column", defaultDBColumn0.getObjectType());
      assertEquals(1, (int)defaultDBColumn0.getFractionDigits());
      assertFalse(defaultDBColumn0.isVersionColumn());
      assertEquals("S", defaultDBColumn0.getName());
      assertNull(defaultDBColumn0.getDefaultValue());
      assertNull(defaultDBColumn0.getDoc());
      assertEquals(1, (int)defaultDBColumn0.getSize());
      
      String string2 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertNotNull(string2);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertFalse(dBDataType0.isTemporal());
      assertFalse(dBDataType0.isLOB());
      assertEquals("ORG.APACHE.DERBY.IMPL.SQL.COMPILE.TABLEOPERATORNODE", dBDataType0.getName());
      assertEquals("ORG.APACHE.DERBY.IMPL.SQL.COMPILE.TABLEOPERATORNODE", dBDataType0.toString());
      assertEquals((-384), dBDataType0.getJdbcType());
      assertTrue(defaultDBColumn0.isNullable());
      assertEquals("column", defaultDBColumn0.getObjectType());
      assertEquals(1, (int)defaultDBColumn0.getFractionDigits());
      assertFalse(defaultDBColumn0.isVersionColumn());
      assertEquals("S", defaultDBColumn0.getName());
      assertNull(defaultDBColumn0.getDefaultValue());
      assertNull(defaultDBColumn0.getDoc());
      assertEquals(1, (int)defaultDBColumn0.getSize());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ORG.APACHE.DERBY.IMPL.SQL.COMPILE.TABLEOPERATORNODE(1,1)", string2);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "S";
      stringArray1[1] = "java.lang.Object@51a592b1";
      stringArray1[2] = "java.lang.Object@51a592b1";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray1, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7242382202576145
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`bpt<Q%T.}mGV<z]]8,";
      stringArray0[1] = "\u0001y\u0003\uFFFF\u0001z";
      String string0 = SQLUtil.innerJoin("`bpt<Q%T.}mGV<z]]8,", stringArray0, "\u0001y\u0003\uFFFF\u0001z", "sJ*YFC#%P L09", stringArray0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      assertEquals("\u0001y\u0003\uFFFF\u0001z as sJ*YFC#%P L09 on `bpt<Q%T.}mGV<z]]8,.`bpt<Q%T.}mGV<z]]8, = sJ*YFC#%P L09.`bpt<Q%T.}mGV<z]]8, and `bpt<Q%T.}mGV<z]]8,.\u0001y\u0003\uFFFF\u0001z = sJ*YFC#%P L09.\u0001y\u0003\uFFFF\u0001z", string0);
      
      String string1 = SQLUtil.removeComments("\u0001y\u0003\uFFFF\u0001z");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0001y\u0003\uFFFF\u0001z", string1);
      
      boolean boolean1 = SQLUtil.isProcedureCall("drop table=*mgt;u^*]vy`0v");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view");
      assertNotNull(defaultDBTable0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "0s", false, stringArray0);
      assertNotNull(dBPrimaryKeyConstraint0);
      assertEquals(2, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("\u0001y\u0003\uFFFF\u0001z");
      assertNotNull(defaultDBTable1);
      assertEquals("\u0001y\u0003\uFFFF\u0001z", defaultDBTable1.getName());
      assertNull(defaultDBTable1.getDoc());
      assertEquals("table", defaultDBTable1.getObjectType());
      assertFalse(defaultDBTable1.equals((Object)defaultDBTable0));
      
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertEquals(2, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec1);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotSame(nameSpec1, nameSpec0);
      assertNull(stringBuilder0);
      assertEquals(2, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      assertFalse(nameSpec1.equals((Object)nameSpec0));
      
      String string2 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      assertEquals("unique constraint 0s", string2);
      
      String string3 = SQLUtil.typeAndName(defaultDBTable1);
      assertNotSame(defaultDBTable1, defaultDBTable0);
      assertNotNull(string3);
      assertEquals("\u0001y\u0003\uFFFF\u0001z", defaultDBTable1.getName());
      assertNull(defaultDBTable1.getDoc());
      assertEquals("table", defaultDBTable1.getObjectType());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(defaultDBTable1.equals((Object)defaultDBTable0));
      assertEquals("table \u0001y\u0003\uFFFF\u0001z", string3);
      
      String string4 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertNotNull(string4);
      assertEquals(2, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("`bpt<Q%T.}mGV<z]]8, = '`bpt<Q%T.}mGV<z]]8,' AND \u0001y\u0003\uFFFF\u0001z = '\u0001y\u0003\uFFFF\u0001z'", string4);
      
      StringBuilder stringBuilder1 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotSame(nameSpec0, nameSpec1);
      assertNotNull(stringBuilder1);
      assertEquals(2, stringArray0.length);
      assertEquals("", stringBuilder1.toString());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      assertFalse(nameSpec0.equals((Object)nameSpec1));
      
      NameSpec nameSpec2 = NameSpec.ALWAYS;
      String string5 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec2);
      assertNotSame(nameSpec2, nameSpec0);
      assertNotSame(nameSpec2, nameSpec1);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotNull(string5);
      assertEquals(2, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertFalse(nameSpec2.equals((Object)nameSpec0));
      assertFalse(nameSpec2.equals((Object)nameSpec1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      assertEquals("CONSTRAINT 0s PRIMARY KEY (`bpt<Q%T.}mGV<z]]8,, \u0001y\u0003\uFFFF\u0001z)", string5);
      
      NameSpec nameSpec3 = NameSpec.ALWAYS;
      String string6 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec3);
      assertNotSame(nameSpec3, nameSpec1);
      assertSame(nameSpec3, nameSpec2);
      assertNotSame(nameSpec3, nameSpec0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotNull(string6);
      assertEquals(2, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertFalse(nameSpec3.equals((Object)nameSpec1));
      assertFalse(nameSpec3.equals((Object)nameSpec0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      assertEquals("CONSTRAINT 0s UNIQUE (`bpt<Q%T.}mGV<z]]8,, \u0001y\u0003\uFFFF\u0001z)", string6);
      
      Boolean boolean3 = SQLUtil.mutatesDataOrStructure("&njGzr8");
      assertNull(boolean3);
      
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.642932267868898
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`bpt<Q%T.}mGV<z]]8,";
      stringArray0[1] = "\u0001y\u0003\uFFFF\u0001z";
      String string0 = SQLUtil.removeComments("\u0001y\u0003\uFFFF\u0001z");
      assertNotNull(string0);
      assertEquals("\u0001y\u0003\uFFFF\u0001z", string0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("drop table=*mgt;u^*]vy`0v");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view");
      assertNotNull(defaultDBTable0);
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "0s", false, stringArray0);
      assertNotNull(dBPrimaryKeyConstraint0);
      assertEquals(2, stringArray0.length);
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("\u0001y\u0003\uFFFF\u0001z");
      assertNotNull(defaultDBTable1);
      assertNull(defaultDBTable1.getDoc());
      assertEquals("table", defaultDBTable1.getObjectType());
      assertEquals("\u0001y\u0003\uFFFF\u0001z", defaultDBTable1.getName());
      assertFalse(defaultDBTable1.equals((Object)defaultDBTable0));
      
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertEquals(2, stringArray0.length);
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNull(stringBuilder0);
      assertEquals(2, stringArray0.length);
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      
      String string1 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("unique constraint 0s", string1);
      
      String string2 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotNull(string2);
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("table alter materialized view", string2);
      
      String string3 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertNotNull(string3);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("`bpt<Q%T.}mGV<z]]8, = '`bpt<Q%T.}mGV<z]]8,' AND \u0001y\u0003\uFFFF\u0001z = '\u0001y\u0003\uFFFF\u0001z'", string3);
      
      StringBuilder stringBuilder1 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotNull(stringBuilder1);
      assertEquals(2, stringArray0.length);
      assertEquals("", stringBuilder1.toString());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      
      String string4 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotNull(string4);
      assertEquals(2, stringArray0.length);
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      assertEquals("PRIMARY KEY (`bpt<Q%T.}mGV<z]]8,, \u0001y\u0003\uFFFF\u0001z)", string4);
      
      String string5 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotNull(string5);
      assertEquals(2, stringArray0.length);
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      assertEquals("UNIQUE (`bpt<Q%T.}mGV<z]]8,, \u0001y\u0003\uFFFF\u0001z)", string5);
      
      Boolean boolean3 = SQLUtil.mutatesDataOrStructure("unique constraint 0s");
      assertNull(boolean3);
      
      String string6 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotNull(string6);
      assertEquals(2, stringArray0.length);
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      assertEquals("unique constraint 0s", string6);
      
      String string7 = SQLUtil.join("table alter materialized view", "UNIQUE (`bpt<Q%T.}mGV<z]]8,, \u0001y\u0003\uFFFF\u0001z)", stringArray0, "`bpt<Q%T.}mGV<z]]8,", "O|1UPo4Pa[Y#lm", stringArray0);
      assertNotNull(string7);
      assertEquals(2, stringArray0.length);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("table alter materialized view join `bpt<Q%T.}mGV<z]]8, as O|1UPo4Pa[Y#lm on UNIQUE (`bpt<Q%T.}mGV<z]]8,, \u0001y\u0003\uFFFF\u0001z).`bpt<Q%T.}mGV<z]]8, = O|1UPo4Pa[Y#lm.`bpt<Q%T.}mGV<z]]8, and UNIQUE (`bpt<Q%T.}mGV<z]]8,, \u0001y\u0003\uFFFF\u0001z).\u0001y\u0003\uFFFF\u0001z = O|1UPo4Pa[Y#lm.\u0001y\u0003\uFFFF\u0001z", string7);
      
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      assertNotNull(dataDictionaryImpl0);
      assertEquals(0, dataDictionaryImpl0.getCollationTypeOfUserSchemas());
      assertEquals(0, dataDictionaryImpl0.getEngineType());
      assertEquals(0, dataDictionaryImpl0.getCacheMode());
      assertFalse(dataDictionaryImpl0.usesSqlAuthorization());
      assertNull(dataDictionaryImpl0.getAuthorizationDatabaseOwner());
      assertEquals(0, dataDictionaryImpl0.getCollationTypeOfSystemSchemas());
      assertFalse(dataDictionaryImpl0.readOnlyUpgrade);
      
      DataDescriptorGenerator dataDescriptorGenerator0 = new DataDescriptorGenerator(dataDictionaryImpl0);
      assertNotNull(dataDescriptorGenerator0);
      assertEquals(0, dataDictionaryImpl0.getCollationTypeOfUserSchemas());
      assertEquals(0, dataDictionaryImpl0.getEngineType());
      assertEquals(0, dataDictionaryImpl0.getCacheMode());
      assertFalse(dataDictionaryImpl0.usesSqlAuthorization());
      assertNull(dataDictionaryImpl0.getAuthorizationDatabaseOwner());
      assertEquals(0, dataDictionaryImpl0.getCollationTypeOfSystemSchemas());
      assertFalse(dataDictionaryImpl0.readOnlyUpgrade);
      
      BasicUUID basicUUID0 = new BasicUUID(604800L, 739L, 3549);
      assertNotNull(basicUUID0);
      assertEquals(131, basicUUID0.getTypeFormatId());
      
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, "`bpt<Q%T.}mGV<z]]8,", "`bpt<Q%T.}mGV<z]]8,", basicUUID0, true);
      assertNotNull(schemaDescriptor0);
      assertEquals(0, dataDictionaryImpl0.getCollationTypeOfUserSchemas());
      assertEquals(0, dataDictionaryImpl0.getEngineType());
      assertEquals(0, dataDictionaryImpl0.getCacheMode());
      assertFalse(dataDictionaryImpl0.usesSqlAuthorization());
      assertNull(dataDictionaryImpl0.getAuthorizationDatabaseOwner());
      assertEquals(0, dataDictionaryImpl0.getCollationTypeOfSystemSchemas());
      assertEquals(131, basicUUID0.getTypeFormatId());
      assertEquals("`bpt<Q%T.}mGV<z]]8,", schemaDescriptor0.getAuthorizationId());
      assertTrue(schemaDescriptor0.isPersistent());
      assertFalse(schemaDescriptor0.isSchemaWithGrantableRoutines());
      assertEquals("`bpt<Q%T.}mGV<z]]8,", schemaDescriptor0.getObjectName());
      assertEquals("`bpt<Q%T.}mGV<z]]8,", schemaDescriptor0.toString());
      assertFalse(schemaDescriptor0.isSYSIBM());
      assertEquals("Schema", schemaDescriptor0.getDescriptorType());
      assertEquals("`bpt<Q%T.}mGV<z]]8,", schemaDescriptor0.getSchemaName());
      assertEquals(0, schemaDescriptor0.getCollationType());
      assertTrue(schemaDescriptor0.isSystemSchema());
      assertEquals("Schema", schemaDescriptor0.getClassType());
      assertEquals("`bpt<Q%T.}mGV<z]]8,", schemaDescriptor0.getDescriptorName());
      assertFalse(dataDictionaryImpl0.readOnlyUpgrade);
      
      BTreeController bTreeController0 = new BTreeController();
      assertNotNull(bTreeController0);
      assertFalse(bTreeController0.isTableLocked());
      assertTrue(bTreeController0.isClosed());
      assertTrue(bTreeController0.isKeyed());
      assertEquals(0, bTreeController0.getLockLevel());
      assertFalse(bTreeController0.getHold());
      assertEquals(0, bTreeController0.getOpenMode());
      
      TransactionManager transactionManager0 = bTreeController0.getXactMgr();
      assertNull(transactionManager0);
      assertFalse(bTreeController0.isTableLocked());
      assertTrue(bTreeController0.isClosed());
      assertTrue(bTreeController0.isKeyed());
      assertEquals(0, bTreeController0.getLockLevel());
      assertFalse(bTreeController0.getHold());
      assertEquals(0, bTreeController0.getOpenMode());
      
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTableDescriptor("`bpt<Q%T.}mGV<z]]8,", schemaDescriptor0, (TransactionController) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3624474851916286
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`bpt<Q%T.}mGV<z]]8,";
      stringArray0[1] = "\u0001y\u0003\uFFFF\u0001z";
      String string0 = SQLUtil.innerJoin("`bpt<Q%T.}mGV<z]]8,", stringArray0, "\u0001y\u0003\uFFFF\u0001z", "sJ*YFC#%P L09", stringArray0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      assertEquals("\u0001y\u0003\uFFFF\u0001z as sJ*YFC#%P L09 on `bpt<Q%T.}mGV<z]]8,.`bpt<Q%T.}mGV<z]]8, = sJ*YFC#%P L09.`bpt<Q%T.}mGV<z]]8, and `bpt<Q%T.}mGV<z]]8,.\u0001y\u0003\uFFFF\u0001z = sJ*YFC#%P L09.\u0001y\u0003\uFFFF\u0001z", string0);
      
      String string1 = SQLUtil.removeComments("\u0001y\u0003\uFFFF\u0001z");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0001y\u0003\uFFFF\u0001z", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view");
      assertNotNull(defaultDBTable0);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "0s", true, stringArray0);
      assertNotNull(dBPrimaryKeyConstraint0);
      assertEquals(2, stringArray0.length);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("\u0001y\u0003\uFFFF\u0001z");
      assertNotNull(defaultDBTable1);
      assertEquals("\u0001y\u0003\uFFFF\u0001z", defaultDBTable1.getName());
      assertNull(defaultDBTable1.getDoc());
      assertEquals("table", defaultDBTable1.getObjectType());
      assertFalse(defaultDBTable1.equals((Object)defaultDBTable0));
      
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertEquals(2, stringArray0.length);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`bpt<Q%T.}mGV<z]]8,";
      stringArray0[1] = "\u0001y\u0003\uFFFF\u0001z";
      String string0 = SQLUtil.innerJoin("`bpt<Q%T.}mGV<z]]8,", stringArray0, "\u0001y\u0003\uFFFF\u0001z", "sJ*YFC#%P L09", stringArray0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      assertEquals("\u0001y\u0003\uFFFF\u0001z as sJ*YFC#%P L09 on `bpt<Q%T.}mGV<z]]8,.`bpt<Q%T.}mGV<z]]8, = sJ*YFC#%P L09.`bpt<Q%T.}mGV<z]]8, and `bpt<Q%T.}mGV<z]]8,.\u0001y\u0003\uFFFF\u0001z = sJ*YFC#%P L09.\u0001y\u0003\uFFFF\u0001z", string0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("drop table=*mgt;u^*]vy`0v");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view");
      assertNotNull(defaultDBTable0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "0s", false, stringArray0);
      assertNotNull(dBPrimaryKeyConstraint0);
      assertEquals(2, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("`bpt<Q%T.}mGV<z]]8,");
      assertNotNull(defaultDBTable1);
      assertEquals("table", defaultDBTable1.getObjectType());
      assertNull(defaultDBTable1.getDoc());
      assertEquals("`bpt<Q%T.}mGV<z]]8,", defaultDBTable1.getName());
      assertFalse(defaultDBTable1.equals((Object)defaultDBTable0));
      
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertEquals(2, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNull(stringBuilder0);
      assertEquals(2, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      
      String string1 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("unique constraint 0s", string1);
      
      String string2 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotNull(string2);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("table alter materialized view", string2);
      
      String string3 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertNotNull(string3);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("`bpt<Q%T.}mGV<z]]8, = '`bpt<Q%T.}mGV<z]]8,' AND \u0001y\u0003\uFFFF\u0001z = '\u0001y\u0003\uFFFF\u0001z'", string3);
      
      StringBuilder stringBuilder1 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotNull(stringBuilder1);
      assertEquals(2, stringArray0.length);
      assertEquals("", stringBuilder1.toString());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      
      String string4 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotNull(string4);
      assertEquals(2, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      assertEquals("PRIMARY KEY (`bpt<Q%T.}mGV<z]]8,, \u0001y\u0003\uFFFF\u0001z)", string4);
      
      String string5 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotNull(string5);
      assertEquals(2, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      assertEquals("UNIQUE (`bpt<Q%T.}mGV<z]]8,, \u0001y\u0003\uFFFF\u0001z)", string5);
      
      Boolean boolean3 = SQLUtil.mutatesDataOrStructure("unique constraint 0s");
      assertNull(boolean3);
      
      String string6 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotNull(string6);
      assertEquals(2, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("alter materialized view", defaultDBTable0.getName());
      assertEquals("0s", dBPrimaryKeyConstraint0.getName());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      assertEquals("unique constraint 0s", string6);
      
      String string7 = SQLUtil.join("table alter materialized view", "UNIQUE (`bpt<Q%T.}mGV<z]]8,, \u0001y\u0003\uFFFF\u0001z)", stringArray0, "`bpt<Q%T.}mGV<z]]8,", "O|1UPo4Pa[Y#lm", stringArray0);
      assertNotNull(string7);
      assertEquals(2, stringArray0.length);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("table alter materialized view join `bpt<Q%T.}mGV<z]]8, as O|1UPo4Pa[Y#lm on UNIQUE (`bpt<Q%T.}mGV<z]]8,, \u0001y\u0003\uFFFF\u0001z).`bpt<Q%T.}mGV<z]]8, = O|1UPo4Pa[Y#lm.`bpt<Q%T.}mGV<z]]8, and UNIQUE (`bpt<Q%T.}mGV<z]]8,, \u0001y\u0003\uFFFF\u0001z).\u0001y\u0003\uFFFF\u0001z = O|1UPo4Pa[Y#lm.\u0001y\u0003\uFFFF\u0001z", string7);
      
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      assertNotNull(dataDictionaryImpl0);
      assertEquals(0, dataDictionaryImpl0.getCollationTypeOfSystemSchemas());
      assertEquals(0, dataDictionaryImpl0.getCollationTypeOfUserSchemas());
      assertNull(dataDictionaryImpl0.getAuthorizationDatabaseOwner());
      assertEquals(0, dataDictionaryImpl0.getCacheMode());
      assertFalse(dataDictionaryImpl0.usesSqlAuthorization());
      assertEquals(0, dataDictionaryImpl0.getEngineType());
      assertFalse(dataDictionaryImpl0.readOnlyUpgrade);
      
      DataDescriptorGenerator dataDescriptorGenerator0 = new DataDescriptorGenerator(dataDictionaryImpl0);
      assertNotNull(dataDescriptorGenerator0);
      assertEquals(0, dataDictionaryImpl0.getCollationTypeOfSystemSchemas());
      assertEquals(0, dataDictionaryImpl0.getCollationTypeOfUserSchemas());
      assertNull(dataDictionaryImpl0.getAuthorizationDatabaseOwner());
      assertEquals(0, dataDictionaryImpl0.getCacheMode());
      assertFalse(dataDictionaryImpl0.usesSqlAuthorization());
      assertEquals(0, dataDictionaryImpl0.getEngineType());
      assertFalse(dataDictionaryImpl0.readOnlyUpgrade);
      
      BasicUUID basicUUID0 = new BasicUUID(604800L, 739L, 3549);
      assertNotNull(basicUUID0);
      assertEquals(131, basicUUID0.getTypeFormatId());
      
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, "\u0001y\u0003\uFFFF\u0001z as sJ*YFC#%P L09 on `bpt<Q%T.}mGV<z]]8,.`bpt<Q%T.}mGV<z]]8, = sJ*YFC#%P L09.`bpt<Q%T.}mGV<z]]8, and `bpt<Q%T.}mGV<z]]8,.\u0001y\u0003\uFFFF\u0001z = sJ*YFC#%P L09.\u0001y\u0003\uFFFF\u0001z", "`bpt<Q%T.}mGV<z]]8,", basicUUID0, true);
      assertNotNull(schemaDescriptor0);
      assertEquals(0, dataDictionaryImpl0.getCollationTypeOfSystemSchemas());
      assertEquals(0, dataDictionaryImpl0.getCollationTypeOfUserSchemas());
      assertNull(dataDictionaryImpl0.getAuthorizationDatabaseOwner());
      assertEquals(0, dataDictionaryImpl0.getCacheMode());
      assertFalse(dataDictionaryImpl0.usesSqlAuthorization());
      assertEquals(0, dataDictionaryImpl0.getEngineType());
      assertEquals(131, basicUUID0.getTypeFormatId());
      assertEquals("`bpt<Q%T.}mGV<z]]8,", schemaDescriptor0.getAuthorizationId());
      assertEquals("\u0001y\u0003\uFFFF\u0001z as sJ*YFC#%P L09 on `bpt<Q%T.}mGV<z]]8,.`bpt<Q%T.}mGV<z]]8, = sJ*YFC#%P L09.`bpt<Q%T.}mGV<z]]8, and `bpt<Q%T.}mGV<z]]8,.\u0001y\u0003\uFFFF\u0001z = sJ*YFC#%P L09.\u0001y\u0003\uFFFF\u0001z", schemaDescriptor0.toString());
      assertEquals("\u0001y\u0003\uFFFF\u0001z as sJ*YFC#%P L09 on `bpt<Q%T.}mGV<z]]8,.`bpt<Q%T.}mGV<z]]8, = sJ*YFC#%P L09.`bpt<Q%T.}mGV<z]]8, and `bpt<Q%T.}mGV<z]]8,.\u0001y\u0003\uFFFF\u0001z = sJ*YFC#%P L09.\u0001y\u0003\uFFFF\u0001z", schemaDescriptor0.getDescriptorName());
      assertFalse(schemaDescriptor0.isSchemaWithGrantableRoutines());
      assertEquals("Schema", schemaDescriptor0.getClassType());
      assertEquals("Schema", schemaDescriptor0.getDescriptorType());
      assertEquals(0, schemaDescriptor0.getCollationType());
      assertFalse(schemaDescriptor0.isSYSIBM());
      assertEquals("\u0001y\u0003\uFFFF\u0001z as sJ*YFC#%P L09 on `bpt<Q%T.}mGV<z]]8,.`bpt<Q%T.}mGV<z]]8, = sJ*YFC#%P L09.`bpt<Q%T.}mGV<z]]8, and `bpt<Q%T.}mGV<z]]8,.\u0001y\u0003\uFFFF\u0001z = sJ*YFC#%P L09.\u0001y\u0003\uFFFF\u0001z", schemaDescriptor0.getObjectName());
      assertEquals("\u0001y\u0003\uFFFF\u0001z as sJ*YFC#%P L09 on `bpt<Q%T.}mGV<z]]8,.`bpt<Q%T.}mGV<z]]8, = sJ*YFC#%P L09.`bpt<Q%T.}mGV<z]]8, and `bpt<Q%T.}mGV<z]]8,.\u0001y\u0003\uFFFF\u0001z = sJ*YFC#%P L09.\u0001y\u0003\uFFFF\u0001z", schemaDescriptor0.getSchemaName());
      assertTrue(schemaDescriptor0.isSystemSchema());
      assertTrue(schemaDescriptor0.isPersistent());
      assertFalse(dataDictionaryImpl0.readOnlyUpgrade);
      
      BTreeController bTreeController0 = new BTreeController();
      assertNotNull(bTreeController0);
      assertTrue(bTreeController0.isClosed());
      assertFalse(bTreeController0.getHold());
      assertFalse(bTreeController0.isTableLocked());
      assertTrue(bTreeController0.isKeyed());
      assertEquals(0, bTreeController0.getLockLevel());
      assertEquals(0, bTreeController0.getOpenMode());
      
      TransactionManager transactionManager0 = bTreeController0.getXactMgr();
      assertNull(transactionManager0);
      assertTrue(bTreeController0.isClosed());
      assertFalse(bTreeController0.getHold());
      assertFalse(bTreeController0.isTableLocked());
      assertTrue(bTreeController0.isKeyed());
      assertEquals(0, bTreeController0.getLockLevel());
      assertEquals(0, bTreeController0.getOpenMode());
      
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTableDescriptor("`bpt<Q%T.}mGV<z]]8,", schemaDescriptor0, (TransactionController) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0866739010750055
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("I{ef#^1_wqS");
      assertNull(boolean0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      System.setCurrentTimeMillis((-1500L));
      boolean boolean1 = SQLUtil.isProcedureCall("_e!eL<\u0005!");
      assertFalse(boolean1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNotNull(defaultDBTable0);
      assertNull(defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      
      String[] stringArray0 = new String[7];
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      stringArray0[0] = "_e!eL<\u0005!";
      stringArray0[1] = "_e!eL<\u0005!";
      stringArray0[2] = "_e!eL<\u0005!";
      stringArray0[3] = "_e!eL<\u0005!";
      stringArray0[4] = "_e!eL<\u0005!";
      stringArray0[5] = "I{ef#^1_wqS";
      int int0 = 4189;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "truncateunique constraint 0s", true, stringArray0);
      assertNotNull(dBUniqueConstraint0);
      assertEquals(7, stringArray0.length);
      assertNull(defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(dBUniqueConstraint0.getDoc());
      assertTrue(dBUniqueConstraint0.isNameDeterministic());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertEquals("truncateunique constraint 0s", dBUniqueConstraint0.getName());
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertNotNull(stringBuilder0);
      assertEquals(7, stringArray0.length);
      assertEquals("", stringBuilder0.toString());
      assertNull(defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(dBUniqueConstraint0.getDoc());
      assertTrue(dBUniqueConstraint0.isNameDeterministic());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertEquals("truncateunique constraint 0s", dBUniqueConstraint0.getName());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'O';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals(2, charArray0.length);
      assertEquals(7, stringArray0.length);
      assertEquals("\\O", stringBuilder0.toString());
      assertEquals("\\O", stringBuilder1.toString());
      assertNull(defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(dBUniqueConstraint0.getDoc());
      assertTrue(dBUniqueConstraint0.isNameDeterministic());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertEquals("truncateunique constraint 0s", dBUniqueConstraint0.getName());
      assertArrayEquals(new char[] {'\\', 'O'}, charArray0);
      
      StringBuilder stringBuilder2 = stringBuilder1.append(193.3660692);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      assertEquals(2, charArray0.length);
      assertEquals(7, stringArray0.length);
      assertEquals("\\O193.3660692", stringBuilder0.toString());
      assertEquals("\\O193.3660692", stringBuilder1.toString());
      assertNull(defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("\\O193.3660692", stringBuilder2.toString());
      assertNull(dBUniqueConstraint0.getDoc());
      assertTrue(dBUniqueConstraint0.isNameDeterministic());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertEquals("truncateunique constraint 0s", dBUniqueConstraint0.getName());
      assertArrayEquals(new char[] {'\\', 'O'}, charArray0);
      
      // Undeclared exception!
      try { 
        stringBuilder1.insert(4189, 0.0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4189
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.0866739010750055
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("AGGREGATION");
      assertFalse(boolean0);
      
      boolean boolean1 = SQLUtil.isDML("AGGREGATION");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[8];
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      assertNotNull(mockPrintWriter0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop index.\"", (DBSchema) null);
      assertNotNull(defaultDBTable0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("drop index.\"", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "g[UIx*F54", false, stringArray0);
      assertNotNull(dBUniqueConstraint0);
      assertEquals(8, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("drop index.\"", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertNull(dBUniqueConstraint0.getDoc());
      assertEquals("g[UIx*F54", dBUniqueConstraint0.getName());
      assertFalse(dBUniqueConstraint0.isNameDeterministic());
      
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("g[UIx*F54", true, dBUniqueConstraint0);
      assertNotNull(dBUniqueIndex0);
      assertEquals(8, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("drop index.\"", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertNull(dBUniqueConstraint0.getDoc());
      assertEquals("g[UIx*F54", dBUniqueConstraint0.getName());
      assertFalse(dBUniqueConstraint0.isNameDeterministic());
      assertTrue(dBUniqueIndex0.isNameDeterministic());
      assertNull(dBUniqueIndex0.getDoc());
      assertEquals("index", dBUniqueIndex0.getObjectType());
      assertEquals("g[UIx*F54", dBUniqueIndex0.getName());
      assertTrue(dBUniqueIndex0.isUnique());
      
      String string0 = dBUniqueConstraint0.toString();
      assertNotNull(string0);
      assertEquals(8, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("drop index.\"", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertNull(dBUniqueConstraint0.getDoc());
      assertEquals("g[UIx*F54", dBUniqueConstraint0.getName());
      assertFalse(dBUniqueConstraint0.isNameDeterministic());
      assertEquals("CONSTRAINT g[UIx*F54 UNIQUE (, , , , , , , )", string0);
      
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("inner", true, dBUniqueConstraint0);
      assertNotNull(dBUniqueIndex1);
      assertEquals(8, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("drop index.\"", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertNull(dBUniqueConstraint0.getDoc());
      assertEquals("g[UIx*F54", dBUniqueConstraint0.getName());
      assertFalse(dBUniqueConstraint0.isNameDeterministic());
      assertEquals("inner", dBUniqueIndex1.getName());
      assertTrue(dBUniqueIndex1.isUnique());
      assertEquals("index", dBUniqueIndex1.getObjectType());
      assertTrue(dBUniqueIndex1.isNameDeterministic());
      assertNull(dBUniqueIndex1.getDoc());
      assertFalse(dBUniqueIndex1.equals((Object)dBUniqueIndex0));
      
      DBTable dBTable0 = dBUniqueIndex1.getTable();
      assertSame(defaultDBTable0, dBTable0);
      assertNotSame(dBUniqueIndex1, dBUniqueIndex0);
      assertSame(dBTable0, defaultDBTable0);
      assertNotNull(dBTable0);
      assertEquals(8, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("drop index.\"", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertNull(dBUniqueConstraint0.getDoc());
      assertEquals("g[UIx*F54", dBUniqueConstraint0.getName());
      assertFalse(dBUniqueConstraint0.isNameDeterministic());
      assertEquals("inner", dBUniqueIndex1.getName());
      assertTrue(dBUniqueIndex1.isUnique());
      assertEquals("index", dBUniqueIndex1.getObjectType());
      assertTrue(dBUniqueIndex1.isNameDeterministic());
      assertNull(dBUniqueIndex1.getDoc());
      assertEquals("drop index.\"", dBTable0.getName());
      assertNull(dBTable0.getDoc());
      assertEquals("table", dBTable0.getObjectType());
      assertFalse(dBUniqueIndex1.equals((Object)dBUniqueIndex0));
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertSame(defaultDBTable0, dBTable0);
      assertNotSame(dBUniqueIndex1, dBUniqueIndex0);
      assertSame(dBTable0, defaultDBTable0);
      assertEquals(8, stringArray0.length);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("drop index.\"", defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertNull(dBUniqueConstraint0.getDoc());
      assertEquals("g[UIx*F54", dBUniqueConstraint0.getName());
      assertFalse(dBUniqueConstraint0.isNameDeterministic());
      assertEquals("inner", dBUniqueIndex1.getName());
      assertTrue(dBUniqueIndex1.isUnique());
      assertEquals("index", dBUniqueIndex1.getObjectType());
      assertTrue(dBUniqueIndex1.isNameDeterministic());
      assertNull(dBUniqueIndex1.getDoc());
      assertEquals("drop index.\"", dBTable0.getName());
      assertNull(dBTable0.getDoc());
      assertEquals("table", dBTable0.getObjectType());
      assertFalse(dBUniqueIndex1.equals((Object)dBUniqueIndex0));
      
      boolean boolean2 = SQLUtil.isQuery("drop index.\"");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "<missing EOF>";
      stringArray0[1] = "FUNCTION ";
      stringArray0[2] = "['jYf@sXv;";
      stringArray0[3] = "<missing EOF>";
      stringArray0[4] = "&^K{+%IW+hljS";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertNotNull(string0);
      assertEquals(5, stringArray0.length);
      assertEquals("(<missing EOF>, FUNCTION , ['jYf@sXv;, <missing EOF>, &^K{+%IW+hljS)", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNotNull(defaultDBTable0);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "insertconstraint java4lang.object@44443d95 unique ()", false, stringArray0);
      assertNotNull(dBUniqueConstraint0);
      assertEquals(5, stringArray0.length);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertFalse(dBUniqueConstraint0.isNameDeterministic());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertNull(dBUniqueConstraint0.getDoc());
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "&^K{+%IW+hljS");
      assertNotNull(stringBuilder0);
      assertEquals("&^K{+%IW+hljS", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("{_5I!_yet", stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("&^K{+%IW+hljS and {_5I!_yet", stringBuilder0.toString());
      assertEquals("&^K{+%IW+hljS and {_5I!_yet", stringBuilder1.toString());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      assertEquals(5, stringArray0.length);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertFalse(dBUniqueConstraint0.isNameDeterministic());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertNull(dBUniqueConstraint0.getDoc());
      assertEquals("&^K{+%IW+hljS and {_5I!_yet", stringBuilder0.toString());
      assertEquals("&^K{+%IW+hljS and {_5I!_yet", stringBuilder1.toString());
      assertEquals("&^K{+%IW+hljS and {_5I!_yet", stringBuilder2.toString());
      
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-1740730432), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1740730432
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "SYS";
      stringArray0[2] = "SYS";
      // Undeclared exception!
      try { 
        SQLUtil.isDDL(stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "UUID";
      stringArray0[1] = "Al3{{~O|}.e\"#Ab";
      stringArray0[2] = "Al3{{~O|}.e\"#Ab";
      String string0 = SQLUtil.renderColumnListWithTableName("Al3{{~O|}.e\"#Ab", stringArray0);
      assertNotNull(string0);
      assertEquals(3, stringArray0.length);
      assertEquals("Al3{{~O|}.e\"#Ab.UUID, Al3{{~O|}.e\"#Ab.Al3{{~O|}.e\"#Ab, Al3{{~O|}.e\"#Ab.Al3{{~O|}.e\"#Ab", string0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("Al3{{~O|}.e\"#Ab", stringArray0);
      assertNotNull(string1);
      assertEquals(3, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Al3{{~O|}.e\"#Ab.UUID, Al3{{~O|}.e\"#Ab.Al3{{~O|}.e\"#Ab, Al3{{~O|}.e\"#Ab.Al3{{~O|}.e\"#Ab", string1);
      
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertNotNull(string2);
      assertEquals(3, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("(UUID, Al3{{~O|}.e\"#Ab, Al3{{~O|}.e\"#Ab)", string2);
      
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      assertNotNull(columnDescriptorList0);
      assertEquals(0, columnDescriptorList0.size());
      assertTrue(columnDescriptorList0.isEmpty());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, arrayList0);
      assertNotNull(versionNumber0);
      assertFalse(arrayList0.contains(string0));
      assertEquals(0, columnDescriptorList0.size());
      assertTrue(columnDescriptorList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("(UUID, Al3{{~O|}.e\"#Ab, Al3{{~O|}.e\"#Ab)", compositeDBObject0);
      assertNotNull(tableContainer0);
      assertNull(tableContainer0.getDoc());
      assertEquals("(UUID, Al3{{~O|}.e\"#Ab, Al3{{~O|}.e\"#Ab)", tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      
      DBSchema dBSchema0 = tableContainer0.getSchema();
      assertNull(dBSchema0);
      assertNull(tableContainer0.getDoc());
      assertEquals("(UUID, Al3{{~O|}.e\"#Ab, Al3{{~O|}.e\"#Ab)", tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("UUID", (DBSchema) null);
      assertNotNull(defaultDBTable0);
      assertEquals("UUID", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      
      String string3 = tableContainer0.toString();
      assertNotNull(string3);
      assertNull(tableContainer0.getDoc());
      assertEquals("(UUID, Al3{{~O|}.e\"#Ab, Al3{{~O|}.e\"#Ab)", tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("(UUID, Al3{{~O|}.e\"#Ab, Al3{{~O|}.e\"#Ab)", string3);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = defaultDBTable0.getPrimaryKeyConstraint();
      assertNull(dBPrimaryKeyConstraint0);
      assertEquals("UUID", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      
      boolean boolean0 = columnDescriptorList0.add((Object) null);
      assertEquals(1, columnDescriptorList0.size());
      assertFalse(columnDescriptorList0.isEmpty());
      assertTrue(boolean0);
      
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("UUID", "drop materialized view", versionNumber0);
      assertNotNull(defaultDatabase0);
      assertFalse(arrayList0.contains(string0));
      assertEquals("UUID", defaultDatabase0.getName());
      assertEquals("drop materialized view", defaultDatabase0.getDatabaseProductName());
      assertFalse(defaultDatabase0.isImportedChecks());
      assertNull(defaultDatabase0.getTableExclusionPattern());
      assertEquals("database", defaultDatabase0.getObjectType());
      assertNull(defaultDatabase0.getDoc());
      assertFalse(defaultDatabase0.isImportedSequences());
      assertFalse(defaultDatabase0.isImportedIndexes());
      assertNull(defaultDatabase0.getTableInclusionPattern());
      assertFalse(defaultDatabase0.isImportedUKs());
      assertNull(defaultDatabase0.getUser());
      assertEquals(1, columnDescriptorList0.size());
      assertFalse(columnDescriptorList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DBTable dBTable0 = defaultDatabase0.getTable("drop materialized view", false);
      assertNull(dBTable0);
      assertFalse(arrayList0.contains(string0));
      assertEquals("UUID", defaultDatabase0.getName());
      assertEquals("drop materialized view", defaultDatabase0.getDatabaseProductName());
      assertFalse(defaultDatabase0.isImportedChecks());
      assertNull(defaultDatabase0.getTableExclusionPattern());
      assertEquals("database", defaultDatabase0.getObjectType());
      assertNull(defaultDatabase0.getDoc());
      assertFalse(defaultDatabase0.isImportedSequences());
      assertFalse(defaultDatabase0.isImportedIndexes());
      assertNull(defaultDatabase0.getTableInclusionPattern());
      assertFalse(defaultDatabase0.isImportedUKs());
      assertNull(defaultDatabase0.getUser());
      assertEquals(1, columnDescriptorList0.size());
      assertFalse(columnDescriptorList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(100, "Al3{{~O|}.e\"#Ab");
      assertNotNull(dBDataType0);
      assertEquals(100, dBDataType0.getJdbcType());
      assertFalse(dBDataType0.isLOB());
      assertFalse(dBDataType0.isTemporal());
      assertEquals("AL3{{~O|}.E\"#AB", dBDataType0.getName());
      assertEquals("AL3{{~O|}.E\"#AB", dBDataType0.toString());
      
      GDSType gDSType0 = GDSType.getType("drop materialized view");
      assertNull(gDSType0);
      
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = SQLUtil.isDML("c),%dGVK8G");
      assertFalse(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("execute");
      assertNull(boolean1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      assertNotNull(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      assertNotNull(fBConnectionProperties0);
      assertNull(fBConnectionProperties0.getType());
      assertNull(fBConnectionProperties0.getTpbMapping());
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "socketBufferSize";
      stringArray0[1] = "userName";
      stringArray0[2] = "sqlDialect";
      stringArray0[3] = "}@TE*)O`8/$<6D";
      stringArray0[4] = "defaultHoldable";
      stringArray0[5] = "b-tree leaf ";
      stringArray0[7] = "localEncoding";
      stringArray0[8] = "useStandardUdf";
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "sqlDialect";
      stringArray1[1] = "defaultIsolation";
      stringArray1[2] = "useTranslation";
      stringArray1[3] = "defaultHoldable";
      stringArray1[4] = "useStandardUdf";
      stringArray1[5] = "buffersNumber";
      stringArray1[6] = "5<O;\"g8y6BidsD<k";
      // Undeclared exception!
      try { 
        SQLUtil.join("password", "isolation", stringArray0, "localEncoding", "isolation", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      assertNotNull(integer1);
      assertEquals(3, (int)integer1);
      
      Integer integer2 = RawTransaction.COMMIT;
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertNotNull(string0);
      assertEquals("()", string0);
      
      // Undeclared exception!
      try { 
        SQLUtil.join("", "m08Cvsf", (String[]) null, "MwDC;0A99pf", "alter materia", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = SQLUtil.removeComments("=*mgT;u^*]VY`0v");
      assertNotNull(string0);
      assertEquals("=*mgT;u^*]VY`0v", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("=*mgT;u^*]VY`0v");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNotNull(defaultDBTable0);
      assertNull(defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      
      boolean boolean1 = SQLUtil.isDDL("=*mgT;u^*]VY`0v");
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "=*mgT;u^*]VY`0v";
      stringArray0[1] = "=*mgT;u^*]VY`0v";
      stringArray0[2] = "CLOB";
      stringArray0[3] = "=*mgT;u^*]VY`0v";
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertNotNull(string1);
      assertEquals(8, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(=*mgT;u^*]VY`0v, =*mgT;u^*]VY`0v, CLOB, =*mgT;u^*]VY`0v, , , , )", string1);
      
      String string2 = SQLUtil.removeComments("=*mgT;u^*]VY`0v");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("=*mgT;u^*]VY`0v", string2);
      
      String string3 = "create table ";
      Boolean boolean2 = SQLUtil.mutatesStructure("create table ");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      Boolean boolean3 = SQLUtil.mutatesStructure("execute");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6094379124341003
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNotNull(defaultDBTable0);
      assertNull(defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = defaultDBTable0.getPrimaryKeyConstraint();
      assertNull(dBPrimaryKeyConstraint0);
      assertNull(defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "s~{ 2^";
      stringArray0[2] = "s~{ 2^";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("s~{ 2^", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      assertNotNull(dBForeignKeyConstraint0);
      assertEquals(8, stringArray0.length);
      assertNull(defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("s~{ 2^", dBForeignKeyConstraint0.getName());
      assertEquals("foreign key constraint", dBForeignKeyConstraint0.getObjectType());
      assertNull(dBForeignKeyConstraint0.getDoc());
      assertTrue(dBForeignKeyConstraint0.isNameDeterministic());
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getUpdateRule());
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputTextQuoted rowOutputTextQuoted0 = new RowOutputTextQuoted("", "", "", true, "9!57Q&S{}Ya");
      assertNotNull(rowOutputTextQuoted0);
      assertEquals(0, rowOutputTextQuoted0.size());
      assertEquals(0, RowOutputBase.CACHED_ROW_160);
      assertEquals(1, RowOutputBase.CACHED_ROW_170);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputTextQuoted0, true);
      assertNotNull(mockPrintWriter0);
      assertEquals(0, RowOutputBase.CACHED_ROW_160);
      assertEquals(1, RowOutputBase.CACHED_ROW_170);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(0, rowOutputTextQuoted0.size());
      assertEquals(0, RowOutputBase.CACHED_ROW_160);
      assertEquals(1, RowOutputBase.CACHED_ROW_170);
      
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(8, stringArray0.length);
      assertNull(defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("s~{ 2^", dBForeignKeyConstraint0.getName());
      assertEquals("foreign key constraint", dBForeignKeyConstraint0.getObjectType());
      assertNull(dBForeignKeyConstraint0.getDoc());
      assertTrue(dBForeignKeyConstraint0.isNameDeterministic());
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getUpdateRule());
      assertEquals(22, rowOutputTextQuoted0.size());
      assertEquals(0, RowOutputBase.CACHED_ROW_160);
      assertEquals(1, RowOutputBase.CACHED_ROW_170);
      
      DBIndex dBIndex0 = defaultDBTable0.getIndex("");
      assertNull(dBIndex0);
      assertNull(defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      
      // Undeclared exception!
      try { 
        defaultDBTable0.removeIndex((DBIndex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.3331967142862475
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("java.lang.Object@403841ca");
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("java.lang.Object@403841ca", stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.compile.TableOperatorNode", (DBSchema) null);
      assertNotNull(defaultDBTable0);
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      
      String[] stringArray0 = new String[0];
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("org.apache.derby.impl.sql.compile.TableOperatorNode", true, defaultDBTable0, stringArray0);
      assertNotNull(dBNonUniqueIndex0);
      assertEquals(0, stringArray0.length);
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertTrue(dBNonUniqueIndex0.isNameDeterministic());
      assertEquals("index", dBNonUniqueIndex0.getObjectType());
      assertFalse(dBNonUniqueIndex0.isUnique());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", dBNonUniqueIndex0.getName());
      assertNull(dBNonUniqueIndex0.getDoc());
      
      defaultDBTable0.removeIndex(dBNonUniqueIndex0);
      assertEquals(0, stringArray0.length);
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertTrue(dBNonUniqueIndex0.isNameDeterministic());
      assertEquals("index", dBNonUniqueIndex0.getObjectType());
      assertFalse(dBNonUniqueIndex0.isUnique());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", dBNonUniqueIndex0.getName());
      assertNull(dBNonUniqueIndex0.getDoc());
      
      DBDataType dBDataType0 = DBDataType.getInstance((-384), "org.apache.derby.impl.sql.compile.TableOperatorNode");
      assertNotNull(dBDataType0);
      assertEquals((-384), dBDataType0.getJdbcType());
      assertEquals("ORG.APACHE.DERBY.IMPL.SQL.COMPILE.TABLEOPERATORNODE", dBDataType0.toString());
      assertFalse(dBDataType0.isLOB());
      assertFalse(dBDataType0.isTemporal());
      assertEquals("ORG.APACHE.DERBY.IMPL.SQL.COMPILE.TABLEOPERATORNODE", dBDataType0.getName());
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.impl.sql.compile.TableOperatorNode", true, stringArray0);
      assertNotNull(dBPrimaryKeyConstraint0);
      assertEquals(0, stringArray0.length);
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", dBPrimaryKeyConstraint0.getName());
      
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      assertNotNull(dBUniqueIndex0);
      assertEquals(0, stringArray0.length);
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", dBPrimaryKeyConstraint0.getName());
      assertEquals("index", dBUniqueIndex0.getObjectType());
      assertNull(dBUniqueIndex0.getName());
      assertNull(dBUniqueIndex0.getDoc());
      assertFalse(dBUniqueIndex0.isNameDeterministic());
      assertTrue(dBUniqueIndex0.isUnique());
      
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      assertEquals(0, stringArray0.length);
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", dBPrimaryKeyConstraint0.getName());
      
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      assertSame(dBUniqueConstraint0, dBPrimaryKeyConstraint0);
      assertNotNull(dBUniqueConstraint0);
      assertEquals(0, stringArray0.length);
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", dBUniqueConstraint0.getName());
      assertTrue(dBUniqueConstraint0.isNameDeterministic());
      assertNull(dBUniqueConstraint0.getDoc());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertSame(dBPrimaryKeyConstraint0, dBUniqueConstraint0);
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", dBPrimaryKeyConstraint0.getName());
      assertFalse(string1.equals((Object)string0));
      assertEquals("CONSTRAINT org.apache.derby.impl.sql.compile.TableOperatorNode ", string1);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertSame(dBUniqueConstraint0, dBPrimaryKeyConstraint0);
      assertNotNull(string2);
      assertEquals(0, stringArray0.length);
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", dBUniqueConstraint0.getName());
      assertTrue(dBUniqueConstraint0.isNameDeterministic());
      assertNull(dBUniqueConstraint0.getDoc());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("CONSTRAINT org.apache.derby.impl.sql.compile.TableOperatorNode UNIQUE ()", string2);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("CONSTRAINT org.apache.derby.impl.sql.compile.TableOperatorNode ");
      assertNotNull(defaultDBTable1);
      assertEquals("CONSTRAINT org.apache.derby.impl.sql.compile.TableOperatorNode ", defaultDBTable1.getName());
      assertNull(defaultDBTable1.getDoc());
      assertEquals("table", defaultDBTable1.getObjectType());
      assertFalse(defaultDBTable1.equals((Object)defaultDBTable0));
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable1.getPrimaryKeyConstraint();
      assertNotSame(defaultDBTable1, defaultDBTable0);
      assertNull(dBPrimaryKeyConstraint1);
      assertEquals("CONSTRAINT org.apache.derby.impl.sql.compile.TableOperatorNode ", defaultDBTable1.getName());
      assertNull(defaultDBTable1.getDoc());
      assertEquals("table", defaultDBTable1.getObjectType());
      assertFalse(defaultDBTable1.equals((Object)defaultDBTable0));
      
      String string3 = SQLUtil.renderValue((Object) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("null", string3);
      
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertSame(dBPrimaryKeyConstraint0, dBUniqueConstraint0);
      assertEquals(0, stringArray0.length);
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
      assertTrue(dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNull(dBPrimaryKeyConstraint0.getDoc());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", dBPrimaryKeyConstraint0.getName());
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Ff2v$U,yQ&E", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      assertNotNull(dBForeignKeyConstraint0);
      assertNull(dBForeignKeyConstraint0.getDoc());
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getUpdateRule());
      assertEquals("Ff2v$U,yQ&E", dBForeignKeyConstraint0.getName());
      assertEquals("foreign key constraint", dBForeignKeyConstraint0.getObjectType());
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
      assertFalse(dBForeignKeyConstraint0.isNameDeterministic());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string4 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec1);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotSame(nameSpec1, nameSpec0);
      assertNotNull(string4);
      assertNull(dBForeignKeyConstraint0.getDoc());
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getUpdateRule());
      assertEquals("Ff2v$U,yQ&E", dBForeignKeyConstraint0.getName());
      assertEquals("foreign key constraint", dBForeignKeyConstraint0.getObjectType());
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
      assertFalse(dBForeignKeyConstraint0.isNameDeterministic());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      assertFalse(nameSpec1.equals((Object)nameSpec0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("FOREIGN KEY () REFERENCES org.apache.derby.impl.sql.compile.TableOperatorNode()", string4);
      
      NameSpec nameSpec2 = NameSpec.NEVER;
      StringBuilder stringBuilder2 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec2);
      assertNotSame(defaultDBTable0, defaultDBTable1);
      assertNotSame(nameSpec2, nameSpec0);
      assertSame(nameSpec2, nameSpec1);
      assertNotSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertSame(dBUniqueConstraint0, dBPrimaryKeyConstraint0);
      assertNotNull(stringBuilder2);
      assertEquals(0, stringArray0.length);
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", defaultDBTable0.getName());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("", stringBuilder2.toString());
      assertEquals("org.apache.derby.impl.sql.compile.TableOperatorNode", dBUniqueConstraint0.getName());
      assertTrue(dBUniqueConstraint0.isNameDeterministic());
      assertNull(dBUniqueConstraint0.getDoc());
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
      assertFalse(defaultDBTable0.equals((Object)defaultDBTable1));
      assertFalse(nameSpec2.equals((Object)nameSpec0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      assertNotNull(defaultDBTable0);
      assertNull(defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBTable0.setOwner(compositeDBObject0);
      assertNull(defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      assertNotNull(dBForeignKeyConstraint0);
      assertEquals(1, stringArray0.length);
      assertNull(defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertNull(dBForeignKeyConstraint0.getName());
      assertEquals("foreign key constraint", dBForeignKeyConstraint0.getObjectType());
      assertNull(dBForeignKeyConstraint0.getDoc());
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getUpdateRule());
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
      assertFalse(dBForeignKeyConstraint0.isNameDeterministic());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-39);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-39), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-103);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-39), (byte) (-84), (byte)2, (byte) (-29), (byte) (-2), (byte) (-70), (byte) (-103)}, byteArray0);
      assertFalse(boolean1);
      
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      assertSame(dBForeignKeyConstraint1, dBForeignKeyConstraint0);
      assertNotNull(dBForeignKeyConstraint1);
      assertEquals(1, stringArray0.length);
      assertNull(defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("foreign key constraint", dBForeignKeyConstraint1.getObjectType());
      assertNull(dBForeignKeyConstraint1.getName());
      assertFalse(dBForeignKeyConstraint1.isNameDeterministic());
      assertNull(dBForeignKeyConstraint1.getDoc());
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint1.getUpdateRule());
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint1.getDeleteRule());
      
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      assertSame(dBForeignKeyConstraint0, dBForeignKeyConstraint1);
      assertEquals(1, stringArray0.length);
      assertNull(defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertNull(dBForeignKeyConstraint0.getName());
      assertEquals(FKChangeRule.SET_DEFAULT, dBForeignKeyConstraint0.getUpdateRule());
      assertEquals("foreign key constraint", dBForeignKeyConstraint0.getObjectType());
      assertNull(dBForeignKeyConstraint0.getDoc());
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
      assertFalse(dBForeignKeyConstraint0.isNameDeterministic());
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      boolean boolean2 = defaultDBTable0.equals(dBForeignKeyConstraint0);
      assertSame(dBForeignKeyConstraint0, dBForeignKeyConstraint1);
      assertEquals(1, stringArray0.length);
      assertNull(defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertNull(dBForeignKeyConstraint0.getName());
      assertEquals(FKChangeRule.SET_DEFAULT, dBForeignKeyConstraint0.getUpdateRule());
      assertEquals("foreign key constraint", dBForeignKeyConstraint0.getObjectType());
      assertNull(dBForeignKeyConstraint0.getDoc());
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
      assertFalse(dBForeignKeyConstraint0.isNameDeterministic());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertSame(dBForeignKeyConstraint0, dBForeignKeyConstraint1);
      assertNotNull(stringBuilder0);
      assertEquals(1, stringArray0.length);
      assertNull(defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertNull(dBForeignKeyConstraint0.getName());
      assertEquals(FKChangeRule.SET_DEFAULT, dBForeignKeyConstraint0.getUpdateRule());
      assertEquals("foreign key constraint", dBForeignKeyConstraint0.getObjectType());
      assertNull(dBForeignKeyConstraint0.getDoc());
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
      assertFalse(dBForeignKeyConstraint0.isNameDeterministic());
      assertEquals("", stringBuilder0.toString());
      
      String string0 = SQLUtil.ownerDotComponent(dBForeignKeyConstraint1);
      assertSame(dBForeignKeyConstraint1, dBForeignKeyConstraint0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertNull(defaultDBTable0.getName());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("foreign key constraint", dBForeignKeyConstraint1.getObjectType());
      assertEquals(FKChangeRule.SET_DEFAULT, dBForeignKeyConstraint1.getUpdateRule());
      assertNull(dBForeignKeyConstraint1.getName());
      assertFalse(dBForeignKeyConstraint1.isNameDeterministic());
      assertNull(dBForeignKeyConstraint1.getDoc());
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint1.getDeleteRule());
      assertEquals("null.null", string0);
      
      System.setCurrentTimeMillis(3600000L);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7W'1X[2r\\']5");
      assertNotNull(defaultDBTable0);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("7W'1X[2r\\']5", defaultDBTable0.getName());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7W'1X[2r\\']5";
      stringArray0[1] = "7W'1X[2r\\']5";
      stringArray0[2] = "7W'1X[2r\\']5";
      stringArray0[3] = "7W'1X[2r\\']5";
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      assertNotNull(mockPrintWriter0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = '';
      charArray0[2] = '\'';
      charArray0[3] = 'e';
      charArray0[4] = ')';
      mockPrintWriter0.write(charArray0, 1700, 335544374);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'#', '', '\'', 'e', ')'}, charArray0);
      
      DBDataType dBDataType0 = null;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("7W'1X[2r\\']5", defaultDBTable0, (DBDataType) null, (Integer) null);
      assertNotNull(defaultDBColumn0);
      assertNull(defaultDBColumn0.getFractionDigits());
      assertEquals("7W'1X[2r\\']5", defaultDBColumn0.getName());
      assertEquals("column", defaultDBColumn0.getObjectType());
      assertNull(defaultDBColumn0.getSize());
      assertNull(defaultDBColumn0.getDefaultValue());
      assertTrue(defaultDBColumn0.isNullable());
      assertNull(defaultDBColumn0.getDoc());
      assertFalse(defaultDBColumn0.isVersionColumn());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertEquals("7W'1X[2r\\']5", defaultDBTable0.getName());
      
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7565367399084861
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "deletel)=5|$j)v";
      boolean boolean0 = SQLUtil.isDDL("deletel)=5|$j)v");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = SQLUtil.innerJoin("", stringArray0, "", "drop materialized viewupdateasciistream(int, inputstream)", stringArray0);
      assertNotNull(string2);
      assertEquals(0, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" as drop materialized viewupdateasciistream(int, inputstream) on ", string2);
      
      boolean boolean2 = SQLUtil.isDDL(".\"");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = ".\"";
      String string3 = SQLUtil.join("", " as drop materialized viewupdateasciistream(int, inputstream) on ", stringArray0, "71|hj^'5~8m4y.-\u0003U*", "", stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string3);
      assertEquals(0, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("71|hj^'5~8m4y.-\u0003U* as  on ", string3);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNotNull(defaultDBTable0);
      assertEquals("table", defaultDBTable0.getObjectType());
      assertNull(defaultDBTable0.getDoc());
      assertNull(defaultDBTable0.getName());
      
      String string4 = SQLUtil.substituteMarkers("deletel)=5|$j)v", "", (Object) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("nulldnullenulllnullenulltnullenulllnull)null=null5null|null$nulljnull)nullvnull", string4);
      
      String string5 = "g\\-DO";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("CLOB", stringArray1, "PROJECTION", "g-DO", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1209503926735833
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("AGGREGA8TION");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      StringBuilder stringBuilder0 = new StringBuilder("AGGREGA8TION");
      assertNotNull(stringBuilder0);
      assertEquals("AGGREGA8TION", stringBuilder0.toString());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "AGGREGA8TION";
      stringArray0[1] = "\u0001\u0124";
      stringArray0[2] = "\u0001\u0124";
      stringArray0[3] = "AGGREGA8TION";
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "\u0001\u0124";
      stringArray1[1] = "..";
      stringArray1[2] = "eGb-qV8";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("..", stringArray0, "AGGREGA8TION", "org.apache.derby.impl.sql.execute.FKInfo", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.791759469228055
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = new Object();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.compile.TableOperatorNode", (DBSchema) null);
      String[] stringArray0 = new String[0];
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("org.apache.derby.impl.sql.compile.TableOperatorNode", true, defaultDBTable0, stringArray0);
      defaultDBTable0.removeIndex(dBNonUniqueIndex0);
      DBDataType dBDataType0 = DBDataType.getInstance((-384), "org.apache.derby.impl.sql.compile.TableOperatorNode");
      Integer integer0 = new Integer(45);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.impl.sql.compile.TableOperatorNode", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&)0g;q@BsJ", defaultDBTable0, dBDataType0, integer0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.renderColumnNames(stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      defaultDBColumn0.getForeignKeyConstraint();
      String string0 = "getCurrentRoleIdDelimited";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "Kx-;C9#R4}3\"!K^";
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = "^pEp\\ m6p}L5;Jn";
      boolean boolean0 = false;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("^pEp m6p}L5;Jn", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      Integer integer0 = RawTransaction.ABORT;
      String string1 = "D[L$H(}?t=LjiR|+e";
      String string2 = "create unique indexalter materialized view=*mgt;u^*]vy`0v";
      TableContainer tableContainer0 = new TableContainer("create unique indexalter materialized view=*mgt;u^*]vy`0v");
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.9229589236044156
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SYS";
      stringArray0[1] = "SYS";
      stringArray0[2] = "SYS";
      SQLUtil.renderColumnListWithTableName("SYS", stringArray0);
      String string0 = SQLUtil.renderColumnListWithTableName("SYS", stringArray0);
      assertEquals("SYS.SYS, SYS.SYS, SYS.SYS", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(SYS, SYS, SYS)", string1);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      TableContainer tableContainer0 = new TableContainer("SYS");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SYS.SYS, SYS.SYS, SYS.SYS", (DBSchema) null);
      defaultDBTable0.countProviders();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      String string2 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string2);
      assertEquals("table SYS.SYS, SYS.SYS, SYS.SYS", string2);
      
      String[] stringArray1 = new String[6];
      stringArray1[0] = "l)=5|$j)";
      stringArray1[1] = ":_MY6";
      stringArray1[2] = "SYS";
      stringArray1[3] = "SYS";
      stringArray1[4] = "table SYS.SYS, SYS.SYS, SYS.SYS";
      stringArray1[5] = "SYS.SYS, SYS.SYS, SYS.SYS";
      String string3 = SQLUtil.renderWhereClause(stringArray1, stringArray1);
      assertEquals("l)=5|$j) = 'l)=5|$j)' AND :_MY6 = ':_MY6' AND SYS = 'SYS' AND SYS = 'SYS' AND table SYS.SYS, SYS.SYS, SYS.SYS = 'table SYS.SYS, SYS.SYS, SYS.SYS' AND SYS.SYS, SYS.SYS, SYS.SYS = 'SYS.SYS, SYS.SYS, SYS.SYS'", string3);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "l)=5|$j) = 'l)=5|$j)' AND :_MY6 = ':_MY6' AND SYS = 'SYS' AND SYS = 'SYS' AND table SYS.SYS, SYS.SYS, SYS.SYS = 'table SYS.SYS, SYS.SYS, SYS.SYS' AND SYS.SYS, SYS.SYS, SYS.SYS = 'SYS.SYS, SYS.SYS, SYS.SYS'", true, stringArray0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"l)=5|$j) = 'l)=5|$j)' AND :_MY6 = ':_MY6' AND SYS = 'SYS' AND SYS = 'SYS' AND table SYS.SYS, SYS.SYS, SYS.SYS = 'table SYS.SYS, SYS.SYS, SYS.SYS' AND SYS.SYS, SYS.SYS, SYS.SYS = 'SYS.SYS, SYS.SYS, SYS.SYS'\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, arrayList0);
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-a!3 8SXixC", (DBSchema) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Al3{{~O|}.e\"#Ab", defaultDBTable0, 2209, "drop materialized view");
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      Integer integer0 = RawTransaction.COMMIT;
      SQLUtil.renderColumnNames((String[]) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray1 = new String[2];
      stringArray1[0] = "-a!3 8SXixC";
      stringArray1[1] = "drop materialized view";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "@2Qc|$V^{/", false, stringArray1);
      defaultDBTable1.removeUniqueConstraint(dBPrimaryKeyConstraint0);
      defaultDBTable0.getUniqueConstraint((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "c),%d\\GVK8G";
      String string1 = "CREATE INDEX";
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "UUID";
      stringArray0[1] = "SYS";
      stringArray0[2] = "SYS";
      SQLUtil.renderColumnListWithTableName("SYS", stringArray0);
      SQLUtil.renderColumnListWithTableName("SYS", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, arrayList0);
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("(UUID, SYS, SYS)", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      Boolean boolean0 = new Boolean("SYS");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("UUID", "drop materialized view", versionNumber0);
      arrayList0.add("drop materialized view");
      defaultDatabase0.getTable("drop materialized view", false);
      columnDescriptorList0.ensureCapacity(0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.toUnsignedString(0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1982292595), "UUID");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("UUID", defaultDBTable0, dBDataType0, integer0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBDataType.getInstance((-1003), "SYS.UUID, SYS.SYS, SYS.SYS");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      defaultDBColumn0.getForeignKeyConstraint();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("%_>+q1r*", "0");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 0
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.3406238221843698
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = SQLUtil.normalize("y8&1x6:_i|=G|3>+", false);
      assertEquals("y8 & 1x6 : _i | = G | 3 > +", string0);
      
      SQLUtil.mutatesStructure("");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?(xm`O^wG,&lH";
      stringArray0[1] = "y8 & 1x6 : _i | = G | 3 > +";
      stringArray0[2] = "y8 & 1x6 : _i | = G | 3 > +";
      String string1 = SQLUtil.renderColumnListWithTableName("?(xm`O^wG,&lH", stringArray0);
      assertEquals("?(xm`O^wG,&lH.?(xm`O^wG,&lH, ?(xm`O^wG,&lH.y8 & 1x6 : _i | = G | 3 > +, ?(xm`O^wG,&lH.y8 & 1x6 : _i | = G | 3 > +", string1);
      
      boolean boolean0 = SQLUtil.isDML("");
      Boolean boolean1 = SQLUtil.mutatesStructure("jo\"</a$ U-%!5Lp@");
      assertTrue(boolean1.equals((Object)boolean0));
      
      DBSchema dBSchema0 = new DBSchema("*=@H-");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("?3Ce", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      String string2 = SQLUtil.normalize("?(xm`O^wG,&lH.?(xm`O^wG,&lH, ?(xm`O^wG,&lH.y8 & 1x6 : _i | = G | 3 > +, ?(xm`O^wG,&lH.y8 & 1x6 : _i | = G | 3 > +", false);
      assertEquals("? (xm ` O ^ wG, & lH.? (xm ` O ^ wG, & lH, ? (xm ` O ^ wG, & lH.y8 & 1x6 : _i | = G | 3 > +, ? (xm ` O ^ wG, & lH.y8 & 1x6 : _i | = G | 3 > +", string2);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "nV,";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.normalize("nV,", true);
      String string1 = "[MY1$K'.}r*949ll";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "nV,");
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = '*';
      charArray0[2] = 'k';
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2915), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2915
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "Al3{{~O|}.e\"#Ab";
      String[] stringArray0 = new String[3];
      stringArray0[2] = "Al3{{~O|}.e\"#Ab";
      SQLUtil.renderColumnListWithTableName("Al3{{~O|}.e\"#Ab", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("(, , Al3{{~O|}.e\"#Ab)", "Al3{{~O|}.e\"#Ab.null, Al3{{~O|}.e\"#Ab.null, Al3{{~O|}.e\"#Ab.Al3{{~O|}.e\"#Ab", versionNumber0);
      defaultDatabase0.getTables(false);
      String string1 = "wai@q>6iFa";
      defaultDatabase0.getTable("wai@q>6iFa", false);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "";
      SQLUtil.removeComments("");
      SQLUtil.normalize("", true);
      DBSchema dBSchema0 = new DBSchema("");
      GDSType.getType("");
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      FBManagedConnectionFactory fBManagedConnectionFactory0 = null;
      try {
        fBManagedConnectionFactory0 = new FBManagedConnectionFactory((GDSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jca.FBManagedConnectionFactory", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, arrayList0);
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("Al3{{~O|}.e\"#Ab", "drop materialized view", versionNumber0);
      defaultDatabase0.getTable("drop materialized view", false);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance(100, "Al3{{~O|}.e\"#Ab");
      GDSType.getType("drop materialized view");
      String string0 = SQLUtil.normalize("Al3{{~O|}.e\"#Ab", false);
      assertEquals("Al3 { { ~ O | }.e \"#Ab\"", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.16302362949436594
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLUtil.removeComments("`$*-eg9&zZ7T`Z");
      SQLUtil.normalize("`$*-eg9&zZ7T`Z", true);
      DBSchema dBSchema0 = new DBSchema("`$*-eg9&zZ7T`Z");
      GDSType.getType("`$*-eg9&zZ7T`Z");
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      FBManagedConnectionFactory fBManagedConnectionFactory0 = null;
      try {
        fBManagedConnectionFactory0 = new FBManagedConnectionFactory((GDSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jca.FBManagedConnectionFactory", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[0];
      SQLUtil.normalize("lE#", true);
      StringBuilder stringBuilder0 = new StringBuilder(42);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "drop table=*mgt;u^*]vy`0v";
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      MockFile mockFile0 = new MockFile("drop table=*mgt;u^*]vy`0v");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      mockPrintWriter1.println(0.0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      VersionNumber versionNumber0 = VersionNumber.valueOf("vLgbO<s(vWmCy");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("alter table", "NcuVk9R`*zu4?G", versionNumber0);
      defaultDatabase0.getTable("vLgbO<s(vWmCy", false);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = new Boolean("deletel)=5|$j)v");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "DI8TFYfe.WzF;/";
      stringArray0[2] = "deletel)=5|$j)v";
      stringArray0[3] = null;
      stringArray0[4] = "deletel)=5|$j)v";
      stringArray0[4] = "RZF";
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDML(stringArray0[8]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      delayQueue0.poll(2156L, timeUnit0);
      fBConnectionProperties0.equals((Object) null);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("timestampUsesLocalTimezone");
      assertNull(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'PCTUSED'";
      stringArray0[1] = "illegal col";
      stringArray0[2] = "H";
      stringArray0[3] = "exec";
      stringArray0[4] = "create table";
      stringArray0[5] = "- ";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7W'1X[2r\\']5");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7W'1X[2r\\']5";
      stringArray0[1] = "7W'1X[2r\\']5";
      stringArray0[2] = "7W'1X[2r\\']5";
      stringArray0[3] = "7W'1X[2r\\']5";
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "7W'1X[2r\\']5";
      stringArray1[1] = "alter index&ips`9p";
      stringArray1[2] = "(*'WX^#28";
      stringArray1[3] = "F'G";
      stringArray1[4] = "m08Cvsf";
      stringArray1[5] = "alter index&ips`9p";
      stringArray1[6] = "7W'1X[2r\\']5";
      stringArray1[7] = "exec";
      stringArray1[8] = "7W'1X[2r\\']5";
      String string0 = SQLUtil.join("exec", "m08Cvsf", stringArray0, "alter index&ips`9p", "(*'WX^#28", stringArray1);
      assertEquals("exec join alter index&ips`9p as (*'WX^#28 on m08Cvsf.7W'1X[2r\\']5 = (*'WX^#28.7W'1X[2r\\']5 and m08Cvsf.7W'1X[2r\\']5 = (*'WX^#28.alter index&ips`9p and m08Cvsf.7W'1X[2r\\']5 = (*'WX^#28.(*'WX^#28 and m08Cvsf.7W'1X[2r\\']5 = (*'WX^#28.F'G and m08Cvsf.null = (*'WX^#28.m08Cvsf and m08Cvsf.null = (*'WX^#28.alter index&ips`9p and m08Cvsf.null = (*'WX^#28.7W'1X[2r\\']5 and m08Cvsf.null = (*'WX^#28.exec", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6188490916819118
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLUtil.isProcedureCall("AGGREGATION");
      SQLUtil.isDML("AGGREGATION");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "AGGREGATION";
      stringArray0[1] = "AGGREGATION";
      stringArray0[2] = "AGGREGATION";
      String string0 = "3Ry:hDOZBr";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "3Ry:hDOZBr";
      stringArray1[1] = "Q+*i.I@BC|o-E(-T";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "0W1#[f5.'yz/MItu1";
      stringArray1[6] = "AGGREGATION";
      stringArray1[7] = "3Ry:hDOZBr";
      stringArray1[8] = "3Ry:hDOZBr";
      SQLUtil.innerJoin("0W1#[f5.'yz/MItu1", stringArray0, "3Ry:hDOZBr", "", stringArray1);
      SQLUtil.renderColumnListWithTableName("0W1#[f5.'yz/MItu1", stringArray1);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      String string1 = ":Ai8]M_?&\\%7";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string2 = "further problems destroying connection: ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "further problems destroying connection: ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("3Ry:hDOZBr as  on 0W1#[f5.'yz/MItu1.AGGREGATION = .3Ry:hDOZBr and 0W1#[f5.'yz/MItu1.AGGREGATION = .Q+*i.I@BC|o-E(-T and 0W1#[f5.'yz/MItu1.AGGREGATION = .", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("4>HIQz+c,7<.7Rb ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.8200759753606213
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLUtil.isProcedureCall("AGGREGA8TION");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "AGGREGA8TION";
      stringArray0[1] = "AGGREGA8TION";
      stringArray0[2] = "AGGREGA8TION";
      PipedWriter pipedWriter0 = new PipedWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CBXl`V+8%Ke&rY7Ef[", (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "LCMP8l1~,}Ctw*", false, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select into", false, stringArray0);
      Integer integer0 = new Integer((-60615284));
      SQLUtil.substituteMarkers("drop table", "getArray(String)", integer0);
      SQLUtil.mutatesStructure("drop table");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.8200759753606213
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.removeComments("alter index");
      boolean boolean0 = SQLUtil.isDML("alter index");
      String string0 = SQLUtil.renderValue("alter index");
      assertEquals("'alter index'", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((float) 4552);
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5047882836811908
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("`$*-eg9&zZ7T`Z");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`$*-eg9&zZ7T`Z");
      GDSType.getType("`$*-eg9&zZ7T`Z");
      SQLUtil.mutatesStructure("`$*-eg9&zZ7T`Z");
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      FBManagedConnectionFactory fBManagedConnectionFactory0 = null;
      try {
        fBManagedConnectionFactory0 = new FBManagedConnectionFactory((GDSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jca.FBManagedConnectionFactory", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "7W'1X[2r\\']5";
      stringArray0[3] = "UUID";
      stringArray0[4] = "7W'1X[2r\\']5";
      stringArray0[5] = "CACHE_SIZE";
      stringArray0[6] = "7W'1X[2r\\']5";
      stringArray0[7] = "CACHE_SIZE";
      SQLUtil.renderColumnListWithTableName("CACHE_SIZE", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      TableContainer tableContainer0 = new TableContainer("CACHE_SIZE.null, CACHE_SIZE.7W'1X[2r\\']5, CACHE_SIZE.null, CACHE_SIZE.UUID, CACHE_SIZE.7W'1X[2r\\']5, CACHE_SIZE.CACHE_SIZE, CACHE_SIZE.7W'1X[2r\\']5, CACHE_SIZE.CACHE_SIZE", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getTable("7W'1X[2r\\']5");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Character character0 = Character.valueOf('o');
      Character.isSurrogate('J');
      Character.isSurrogate('o');
      SQLUtil.renderValue(character0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (double) 'o';
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      DBUniqueIndex dBUniqueIndex0 = null;
      try {
        dBUniqueIndex0 = new DBUniqueIndex("111", false, (DBUniqueConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueIndex", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "into";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[1] = "org.postgresql.jdbc4.Jdbc4Blob";
      stringArray0[2] = "alter table";
      stringArray0[3] = "";
      stringArray0[4] = "H";
      stringArray0[5] = "`e.q0p_>Kw42\"";
      stringArray0[6] = "";
      stringArray0[7] = "k1{-;L$";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE into = 'into' AND org.postgresql.jdbc4.Jdbc4Blob = 'org.postgresql.jdbc4.Jdbc4Blob' AND alter table = 'alter table' AND  = '' AND H = 'H' AND `e.q0p_>Kw42\" = '`e.q0p_>Kw42\"' AND  = '' AND k1{-;L$ = 'k1{-;L$'", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("insert", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'AqJ";
      stringArray0[1] = "?k::E*0I)+a{>~@";
      stringArray0[2] = "25S03";
      stringArray0[3] = "25S03";
      stringArray0[4] = "'AqJ";
      stringArray0[5] = "'AqJ";
      stringArray0[6] = "aggr";
      stringArray0[7] = "25S03";
      String string0 = SQLUtil.join("25S03", "'AqJ", stringArray0, "aggr", "create unique indexdeletel)=5|$j)v", stringArray0);
      assertEquals("25S03 join aggr as create unique indexdeletel)=5|$j)v on 'AqJ.'AqJ = create unique indexdeletel)=5|$j)v.'AqJ and 'AqJ.?k::E*0I)+a{>~@ = create unique indexdeletel)=5|$j)v.?k::E*0I)+a{>~@ and 'AqJ.25S03 = create unique indexdeletel)=5|$j)v.25S03 and 'AqJ.25S03 = create unique indexdeletel)=5|$j)v.25S03 and 'AqJ.'AqJ = create unique indexdeletel)=5|$j)v.'AqJ and 'AqJ.'AqJ = create unique indexdeletel)=5|$j)v.'AqJ and 'AqJ.aggr = create unique indexdeletel)=5|$j)v.aggr and 'AqJ.25S03 = create unique indexdeletel)=5|$j)v.25S03", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7W'1X[2r\\']5");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7W'1X[2r\\']5";
      stringArray0[1] = "7W'1X[2r\\']5";
      stringArray0[2] = "7W'1X[2r\\']5";
      stringArray0[3] = "7W'1X[2r\\']5";
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = '';
      charArray0[2] = '\'';
      charArray0[3] = 'e';
      charArray0[4] = ')';
      mockPrintWriter0.write(charArray0, 1700, 335544374);
      mockPrintWriter0.print('F');
      mockPrintWriter0.print("7W'1X[2r\\']5");
      mockPrintWriter0.println(0.0);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("(", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.join("fH8Q`r)41u[j]RXR-;<", "fH8Q`r)41u[j]RXR-;<", stringArray0, "", "fH8Q`r)41u[j]RXR-;<", stringArray0);
      String string0 = "drop table";
      String string1 = "/;";
      StringBuilder stringBuilder0 = new StringBuilder("/;");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("fH8Q`r)41u[j]RXR-;< join  as fH8Q`r)41u[j]RXR-;< on ", stringBuilder0);
      boolean boolean0 = true;
      StringBuilder stringBuilder2 = stringBuilder1.append(true);
      StringBuilder stringBuilder3 = new StringBuilder("/;");
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        stringBuilder2.append((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("java.lang.Object@5d5e2040", stringBuilder0);
      String[] stringArray0 = new String[0];
      Integer integer0 = new Integer(45);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.renderColumnNames(stringArray0);
      String string1 = SQLUtil.join("ure;", "&)0g;q@BsJ", stringArray0, "calljava.lang.object@b28981e", "execjava.lang.object@4886f045", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop indexupdateal3{{~o|}.e\"#ab");
      defaultDBTable0.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("info.VERSION_MAJOR", (String[]) null, "OgA`E)C!l`6", "info.VERSION_MAJOR", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.019814992492946
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop index");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "DATE";
      stringArray0[1] = "drop index";
      stringArray0[2] = "- 0";
      stringArray0[3] = "DATE";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "DATE", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("IDENTIFIER", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" as ", false, dBTable0, stringArray0, dBTable0, stringArray0);
      String string1 = SQLUtil.renderValue(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT \" as \" FOREIGN KEY (DATE, drop index, - 0, DATE) REFERENCES drop index(DATE, drop index, - 0, DATE)", string1);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.5832584594204768
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      mockPrintWriter0.print('9');
      mockPrintWriter0.print("create tableunique constraint 0s");
      mockPrintWriter0.println(0.0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized view");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "exec", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter materialized view", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", dBTable0.getObjectType());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(615L);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8uNjEXe5)4DWb%?wwez";
      stringArray0[1] = "8uNjEXe5)4DWb%?wwez";
      stringArray0[2] = "delete";
      stringArray0[3] = "8uNjEXe5)4DWb%?wwez";
      stringArray0[4] = "8uNjEXe5)4DWb%?wwez";
      stringArray0[5] = "8uNjEXe5)4DWb%?wwez";
      stringArray0[6] = "8uNjEXe5)4DWb%?wwez";
      String string0 = SQLUtil.leftJoin("8uNjEXe5)4DWb%?wwez", stringArray0, "delete", "delete", stringArray0);
      assertEquals("left join delete as delete on 8uNjEXe5)4DWb%?wwez.8uNjEXe5)4DWb%?wwez = delete.8uNjEXe5)4DWb%?wwez and 8uNjEXe5)4DWb%?wwez.8uNjEXe5)4DWb%?wwez = delete.8uNjEXe5)4DWb%?wwez and 8uNjEXe5)4DWb%?wwez.delete = delete.delete and 8uNjEXe5)4DWb%?wwez.8uNjEXe5)4DWb%?wwez = delete.8uNjEXe5)4DWb%?wwez and 8uNjEXe5)4DWb%?wwez.8uNjEXe5)4DWb%?wwez = delete.8uNjEXe5)4DWb%?wwez and 8uNjEXe5)4DWb%?wwez.8uNjEXe5)4DWb%?wwez = delete.8uNjEXe5)4DWb%?wwez and 8uNjEXe5)4DWb%?wwez.8uNjEXe5)4DWb%?wwez = delete.8uNjEXe5)4DWb%?wwez", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderColumnListWithTableName("TT*", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, arrayList0);
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      columnDescriptorList0.add((Object) "{Uco1&s?a{DbG<cVf`");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("TT*.null, TT*.null, TT*.null", "execdrop table=*mgt;u^*]vy`0v", versionNumber0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance((-718), "(, , )");
      GDSType.getType("vO");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "Al3{{~O|}.e\"#Ab";
      String string1 = "drop materialized view";
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      ArrayList<String> arrayList0 = new ConstraintDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, arrayList0);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator0 = Comparator.comparingInt((ToIntFunction<? super String>) toIntFunction0);
      columnDescriptorList0.sort(comparator0);
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("Al3{{~O|}.e\"#Ab", "drop materialized view", versionNumber0);
      defaultDatabase0.getTables(false);
      defaultDatabase0.getTable("drop materialized view", false);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      int int0 = 100;
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("I{ef#^1_wqS");
      assertNull(boolean0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      System.setCurrentTimeMillis((-1500L));
      boolean boolean1 = SQLUtil.isProcedureCall("_e!eL<\u0005!");
      assertFalse(boolean1);
      
      SQLUtil.isDML("I{ef#^1_wqS");
      Boolean boolean2 = SQLUtil.mutatesStructure("_e!eL<\u0005!");
      assertFalse(boolean2);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.7214023220140038
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      delayQueue0.poll(2156L, timeUnit0);
      fBConnectionProperties0.equals((Object) null);
      FBConnectionProperties fBConnectionProperties1 = new FBConnectionProperties();
      boolean boolean0 = new Boolean("useStandardUdf");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("selectprijary keP");
      assertFalse(boolean1);
      assertNotNull(boolean1);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "Fi.J.Eog~\"Fez%";
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("Fi.J.Eog~\"Fez%", "Fi.J.Eog~\"Fez%", (VersionNumber) null);
      String string1 = "update";
      defaultDatabase0.getTable("update", false);
      String string2 = "org.apache.derby.impl.store.access.btree.OpenBTree";
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) null, "org.apache.derby.impl.store.access.btree.OpenBTree", false, "");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // owner is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }
}
