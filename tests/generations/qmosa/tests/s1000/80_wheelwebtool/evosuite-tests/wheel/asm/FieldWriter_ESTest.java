/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 02:10:48 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Item;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5087115443129062
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Item item0 = new Item(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1432), "", "", "", "wheel.asm.ClassReader");
      String string0 = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = classWriter0.pool;
      fieldWriter0.put(byteVector1);
      byteVector0.length = 2;
      ByteVector byteVector2 = new ByteVector(861);
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter0.put(byteVector1);
      fieldWriter1.next = fieldWriter0;
      fieldWriter1.getSize();
      FieldWriter fieldWriter2 = classWriter0.firstField;
      fieldWriter2.getSize();
      fieldWriter0.visitAnnotation("", true);
      Attribute attribute0 = new Attribute("R|=@#3s3:");
      byteVector0.length = 65535;
      // Undeclared exception!
      try { 
        fieldWriter2.getSize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0108643020548935
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1023);
      classWriter0.index = (-382);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Synthetic", "Synthetic", "Synthetic", "Synthetic");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8945706855324711
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      String string0 = "wheel.asm.ClassReader";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "wheel.asm.ClassReader", "wheel.asm.ClassReader", "wheel.asm.ClassReader", "wheel.asm.ClassReader");
      String string1 = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteVector byteVector0 = new ByteVector(905);
      ByteVector byteVector1 = new ByteVector();
      fieldWriter0.put(byteVector1);
      byteVector1.length = 4799;
      MockFile mockFile0 = new MockFile("", "wheel.asm.ClassReader");
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ByteVector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.8945706855324711
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classWriter0.index = (-21);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "wheel.asm.ClassReader", "wheel.asm.ClassReader", "wheel.asm.ClassReader", "wheel.asm.ClassReader");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteVector byteVector0 = new ByteVector(905);
      fieldWriter0.put(byteVector0);
      byteVector0.putLong(620L);
      MockFile mockFile0 = new MockFile("", "wheel.asm.ClassReader");
      fieldWriter0.put(byteVector0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9859526183035509
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(14);
      Item item0 = classWriter0.newMethodItem("Synthetic", ">;", ">;", false);
      item0.strVal2 = null;
      classWriter0.version = (-1752);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-955), ";w#Ug<ui;v<A", "Synthetic", "", ";w#Ug<ui;v<A");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Item item1 = new Item(14, item0);
      fieldWriter0.getSize();
      classWriter0.newMethod(";w#Ug<ui;v<A", "", "", false);
      Attribute attribute0 = new Attribute("ConstantValue");
      assertFalse(attribute0.isCodeAttribute());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.8361623253853443
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1463), "wheel.asm.ClassReader", "wheel.asm.ClassReader", "wheel.asm.ClassReader", "wheel.asm.ClassReader");
      ByteVector byteVector0 = new ByteVector(861);
      ByteVector byteVector1 = byteVector0.putUTF8("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      byteVector0.putShort(853);
      stringArray0[4] = "wheel.asm.ClassReader";
      classWriter0.visit((-1463), 861, "wheel.asm.ClassReader", "", "", stringArray0);
      byteVector1.putInt((-448));
      fieldWriter0.put(byteVector1);
      MockFile mockFile0 = new MockFile("wheel.asm.ClassReader");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9859526183035509
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(172);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1785), "", "", "", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "wheel.asm.ClassReader";
      int int0 = (-1432);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1432), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "wheel.asm.ClassReader");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 861, "RuntimeInvisibleAnnotations", "wheel.asm.ClassReader", "", (Object) null);
      // Undeclared exception!
      try { 
        fieldWriter1.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4804779276453799
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassWriter classWriter0 = new ClassWriter(24);
      String string0 = "s";
      int int0 = (-955);
      String string1 = "iQ\\A8y^ ";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-955), "iQA8y^ ", "s", "s", "iQA8y^ ");
      fieldWriter0.visitAnnotation("s", true);
      fieldWriter0.getSize();
      classWriter0.newMethod("iQA8y^ ", "s", "s", true);
      ByteVector byteVector0 = new ByteVector();
      classWriter0.version = 48;
      byteVector0.put12(11, (-382));
      fieldWriter0.put(byteVector0);
      Item[] itemArray0 = new Item[5];
      Item item0 = null;
      try {
        item0 = new Item((-2265), (Item) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.8659992569610426
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1475));
      classWriter0.threshold = 2345;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3993);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 65535, "3_MFb]", "void", (String) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@75f3f3ee
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4815754199403024
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-955), "iQA8y4 ", "Synthetic", "", "iQA8y4 ");
      classWriter0.newClassItem("");
      fieldWriter0.visitAnnotation("The array of suffixes must not be null", false);
      fieldWriter0.getSize();
      classWriter0.newMethod("iQA8y4 ", "", "", true);
      classWriter0.version = 48;
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 24, "iQA8y4 ", "", "", "iQA8y4 ");
      ByteVector byteVector0 = classWriter0.pool;
      int int0 = (-847);
      byteVector0.put12((-847), 131072);
      Attribute attribute0 = new Attribute("Synthetic");
      fieldWriter0.visitAttribute(attribute0);
      FieldWriter fieldWriter2 = classWriter0.firstField;
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4453391923903318
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-955), "Ew#Ug<ui;vJ1", "Synthetic", "", "Ew#Ug<ui;vJ1");
      classWriter0.newClassItem("");
      fieldWriter0.getSize();
      classWriter0.newMethod("Ew#Ug<ui;vJ1", "", "", true);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put12(11, 36);
      classWriter0.version = 36;
      fieldWriter0.put(byteVector0);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 0, "Ew#Ug<ui;vJ1", "", "", "Ew#Ug<ui;vJ1");
      Attribute attribute0 = new Attribute("yD");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector2 = classWriter0.pool;
      fieldWriter1.put(byteVector0);
      byteVector2.put12((-6), 2);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(177);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 177, "", "", "dbZ9xS@i~zRluimj_", "y");
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = attribute0.next;
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      Label label0 = new Label();
      Label label1 = label0.successor;
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4973436666133983
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-955), "Ew#Ug<ui;vJ1", "Synthetic", "", "Ew#Ug<ui;vJ1");
      classWriter0.newClassItem("");
      fieldWriter0.visitAnnotation("The array of suffixes must not be null", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
      
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put12(131072, 48);
      classWriter0.version = 48;
      fieldWriter0.put(byteVector0);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 0, "Ew#Ug<ui;vJ1", "", "", "Ew#Ug<ui;vJ1");
      ByteVector byteVector2 = classWriter0.pool;
      ByteVector byteVector3 = classWriter0.pool;
      fieldWriter1.put(byteVector0);
      FieldWriter fieldWriter2 = classWriter0.lastField;
      fieldWriter0.put(byteVector1);
      ByteVector byteVector4 = byteVector1.put12((-1), 64581);
      fieldWriter1.getSize();
      fieldWriter0.getSize();
      fieldWriter1.put(byteVector3);
      fieldWriter2.getSize();
      fieldWriter2.put(byteVector4);
      fieldWriter2.getSize();
      fieldWriter1.put(byteVector3);
      fieldWriter2.getSize();
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(292, byteArray0.length);
      
      fieldWriter0.getSize();
      fieldWriter1.put(byteVector4);
      fieldWriter0.getSize();
      int int1 = fieldWriter2.getSize();
      assertEquals(24, int1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.605085464218198
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1016);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 170, "yw**1hOOM>;Cnw}88)o", "yw**1hOOM>;Cnw}88)o", "yw**1hOOM>;Cnw}88)o", "yw**1hOOM>;Cnw}88)o");
      ByteVector byteVector0 = new ByteVector(0);
      byteVector0.put11(1016, 1);
      fieldWriter0.put(byteVector0);
      ByteVector byteVector1 = byteVector0.putShort(0);
      byteVector0.put12(5278, 1);
      fieldWriter0.visitEnd();
      Attribute attribute0 = new Attribute("The FilenameFilter must not be null");
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-20);
      attribute0.value = byteArray0;
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-322), "yw**1hOOM>;Cnw}88)o", "The FilenameFilter must not be null", (String) null, "Synthetic");
      ByteVector byteVector2 = new ByteVector();
      byteVector1.putByte(1);
      fieldWriter1.put(byteVector0);
      ByteVector byteVector3 = new ByteVector();
      byteVector3.putShort(65535);
      fieldWriter0.put(byteVector3);
      fieldWriter0.visitAnnotation("s,", false);
      byteVector3.put12((byte) (-120), 2);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
      
      int int1 = fieldWriter1.getSize();
      assertEquals(28, int1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.8659992569610426
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1024);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1024, "RuntimeVisibleAnnotations", "D+$FquTbeSUh@&C+[?>", "", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put11(4157, (-1290));
      ByteVector byteVector2 = byteVector1.putInt(4);
      fieldWriter0.put(byteVector2);
      assertSame(byteVector2, byteVector0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 2, (String) null, "", "Deprecated", sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-47);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-113);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2823, (byte) (-101));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      bufferedInputStream0.read();
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 16777215, "c phCn0o*J|j*v]z~", "c phCn0o*J|j*v]z~", "c phCn0o*J|j*v]z~", dataInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.io.DataInputStream@40ef7435
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
