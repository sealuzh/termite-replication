/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 01:56:05 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8498600730641113
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Short short0 = new Short((short)43);
      Short.toUnsignedInt((short)35);
      Short.compare((short)43, (short)43);
      JSONObject.numberToString(short0);
      Short.compare((short)19, (short)44);
      Float float0 = new Float(1203.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(43);
      jSONObject0.put("java.lang.Short@0000000001", 43);
      jSONObject0.optDouble("java.lang.Short@0000000001");
      JSONObject jSONObject1 = jSONObject0.put("get", (double) (short)19);
      JSONObject jSONObject2 = jSONObject0.accumulate("{\n                                           \"java.lang.String@0000000003\": java.lang.Boolean@0000000004,\n                                           \"java.lang.String@0000000005\": java.lang.Boolean@0000000006,\n                                           \"java.lang.String@0000000007\": \"java.lang.Class@0000000008\"\n}", jSONObject1);
      try { 
        jSONObject2.getJSONArray("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.986247642191389
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("");
      jSONObject0.optBoolean("", true);
      JSONObject jSONObject1 = jSONObject0.put("", (-3553.366335420621));
      jSONObject1.toString(16);
      jSONObject1.optDouble("");
      jSONObject1.optDouble("KTXVb0lk?.", (-3553.366335420621));
      Boolean.compare(true, true);
      jSONObject1.optLong("KTXVb0lk?.", 0L);
      JSONObject jSONObject2 = jSONObject0.put("\"\"", (-1));
      jSONObject2.toJSONArray((JSONArray) null);
      jSONObject1.toString((-2177), 0);
      double double0 = new Double(0L);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5118264390899372
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Short.compare((short)3570, (short)3570);
      Short.compare((short)34, (short)3570);
      Float.min((short)34, (-3143.0F));
      Short.toUnsignedLong((short)34);
      Float.isFinite(0.0F);
      JSONObject.doubleToString((-1958.390501921));
      String string0 = "{Ue#^a\\Zp]$&]-Ect";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{Ue#^aZp]$&]-Ect");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 16 of {Ue#^aZp]$&]-Ect
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5764082587002846
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Long long0 = new Long((-5079L));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "($AwDj<ir)D2P1xmPR";
      stringArray0[1] = "pDoM)V2)g4H43*[";
      stringArray0[2] = "2Z:C;&}]|1;Q}b$#jH";
      stringArray0[3] = "JSON does not allow non-finite numbers.";
      stringArray0[4] = "wheel.json.JSONException";
      stringArray0[5] = "Expected '";
      stringArray0[6] = "false";
      stringArray0[7] = "r~;";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.toString(9, 9);
      jSONObject0.append("}~h<N", "wheel.json.JSONException");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("}~h<N");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.526586327807544
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-2467L));
      jSONArray0.optDouble((-54582745));
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.putOpt("get", "get");
      jSONObject0.optBoolean("get");
      jSONObject0.opt((String) null);
      Double.max((-1735.08761672), 0.0);
      String string0 = "/geti08ntern";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("/geti08ntern", (Collection) linkedList0);
      String string1 = "N7/Y%<Q%v#";
      jSONObject1.optDouble((String) null, Double.NaN);
      try { 
        jSONObject1.getInt("/geti08ntern");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/geti08ntern\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(1427);
      stringWriter0.write("{}");
      jSONObject0.write(stringWriter0);
      Integer integer0 = new Integer(1427);
      Integer integer1 = new Integer(675);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer2 = new Integer(13);
      Double double0 = new Double(13);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      HashMap<Double, Integer> hashMap2 = new HashMap<Double, Integer>();
      HashMap<Double, Integer> hashMap3 = new HashMap<Double, Integer>();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.back();
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.548591081103972
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("w@1VN% SyGC?=9cqH\"", stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate(".XGoNv4b} =Gj", ".XGoNv4b} =Gj");
      jSONObject0.isNull("iswait");
      Short short0 = new Short((short)47);
      jSONObject0.append("java.lang.Float@0000000001.", ".XGoNv4b} =Gj");
      jSONObject1.put("Gp2+B[V7,m.@W8 ", true);
      Long long0 = new Long((short)47);
      Float float0 = new Float((float) (-873));
      jSONObject0.append("java.lang.Float@0000000001.", float0);
      Short short1 = new Short((short)47);
      assertTrue(short1.equals((Object)short0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8133224558281076
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Float float0 = new Float(0.0F);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Double.max(1734.69, 1734.69);
      Integer integer0 = new Integer(10);
      Integer.getInteger("<'SY4", integer0);
      Integer.toUnsignedString(65);
      Double double0 = new Double(10);
      Integer.sum(10, (-3));
      Integer integer1 = new Integer(48);
      hashMap0.put(double0, integer1);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      Double.sum(1734.69, 1441.5984709617);
      Double.min(3176.2884709617, 0.0F);
      Double double1 = new Double(0.0F);
      Double.sum(10, 10);
      Integer integer2 = new Integer(10);
      Double.sum((-197.389325), (-1012.743342));
      hashMap1.put((Double) null, integer2);
      Double double2 = new Double(1734.69);
      hashMap0.putIfAbsent(double2, (Integer) null);
      Integer integer3 = new Integer(48);
      hashMap1.putAll(hashMap0);
      Double.max(7, 7);
      hashMap1.keySet();
      JSONObject.valueToString(hashMap1);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.076024715265868
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("");
      jSONObject0.optBoolean("", true);
      JSONObject jSONObject1 = jSONObject0.put("", (-3553.366335420621));
      jSONObject1.toString(16);
      jSONObject1.optDouble("KTXVb0lk?.", (-3553.366335420621));
      Boolean.compare(true, true);
      jSONObject1.optLong("KTXVb0lk?.", 0L);
      jSONObject0.put("KTXVb0lk?.", (-1));
      jSONObject1.toString((-2177), 0);
      jSONObject0.getDouble("KTXVb0lk?.");
      jSONObject0.getLong("");
      jSONObject1.optBoolean("KTXVb0lk?.");
      try { 
        jSONObject0.put((String) null, (-1205L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5916346835472512
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Short.compare((short)3570, (short)3570);
      short short1 = (short)34;
      Short.compare((short)34, (short)3570);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "";
      linkedList0.add("");
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optString("", "");
      JSONObject jSONObject2 = jSONObject0.put("", (Collection) null);
      jSONObject1.putOpt("isreplaceAll", jSONObject2);
      Integer integer0 = new Integer((short)3570);
      JSONObject.valueToString(integer0);
      try { 
        jSONObject0.getString("weel.json.JSONObject$Nul.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"weel.json.JSONObject$Nul.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0655030269126757
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("");
      jSONObject0.optBoolean("", true);
      JSONObject jSONObject1 = jSONObject0.put("", (-3553.366335420621));
      jSONObject1.getString("");
      jSONObject0.putOpt("", "java.lang.Double@0000000004");
      jSONObject1.optDouble("KTXVb0lk?.", (-3553.366335420621));
      jSONObject1.put("KTXVb0lk?.", (long) 16);
      Boolean.compare(true, true);
      jSONObject1.optLong("KTXVb0lk?.", 0L);
      jSONObject0.put("\"\"", (-1));
      jSONObject1.toString((-2177), 0);
      jSONObject0.getDouble("KTXVb0lk?.");
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.760598584079873
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("5");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5";
      stringArray0[1] = "w@1VN% SyGC?=9cqH\"";
      stringArray0[2] = "5";
      JSONObject jSONObject1 = new JSONObject("2", stringArray0);
      JSONObject jSONObject2 = jSONObject1.accumulate("\b", "2");
      jSONObject2.put("isaddFirst", 189);
      jSONObject2.isNull("isaddFirst");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Short short0 = new Short((short)90);
      JSONObject jSONObject3 = new JSONObject(short0, stringArray0);
      jSONObject0.append("=3E2n^[h+,jK", jSONObject3);
      jSONObject3.put("W-YD", true);
      Long long0 = new Long(189);
      Double double0 = new Double((short)90);
      jSONObject1.append("isiterator", double0);
      Short short1 = new Short((short)13);
      assertEquals((short)13, (short)short1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.412806572614331
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "*GIMSVm$A.mB)q~sSr";
      jSONObject0.put("*GIMSVm$A.mB)q~sSr", true);
      jSONObject0.getBoolean("*GIMSVm$A.mB)q~sSr");
      jSONObject0.getBoolean("*GIMSVm$A.mB)q~sSr");
      String string1 = null;
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8184506609563127
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      Object object0 = new Object();
      hashMap0.put((Short) null, object0);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.replaceAll(biFunction0);
      HashMap<Boolean, Boolean> hashMap1 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-2177), 222);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7540298966049588
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("m?O2[9mH#M=X:]B8AM");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("m?O2[9mH#M=X:]B8AM");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      String string0 = "min";
      linkedList3.add("min");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList2.add("m?O2[9mH#M=X:]B8AM");
      Float float0 = new Float((-1.0F));
      Boolean boolean0 = new Boolean("e}w@D`n{AX");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList5.addLast("hL}+sd#D");
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList6.add("*i+.TVmCrWAiaSL?&U");
      LinkedList<String> linkedList7 = new LinkedList<String>();
      LinkedList<String> linkedList8 = new LinkedList<String>();
      linkedList5.add("min");
      linkedList5.offerFirst("hL}+sd#D");
      Double double0 = new Double((-344.2596));
      Double double1 = new Double((-344.2596));
      JSONObject jSONObject0 = new JSONObject(double1);
      String string1 = null;
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4156882405761193
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Float float0 = new Float(0.0F);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Double double0 = new Double(0.0F);
      Double.max(1734.69, 1734.69);
      Integer integer0 = new Integer(10);
      Integer integer1 = Integer.getInteger("<'SY4", integer0);
      hashMap0.put(double0, integer1);
      Integer.toUnsignedString(65);
      Double double1 = new Double(10);
      Integer.sum(10, (-3));
      Integer integer2 = new Integer(48);
      hashMap0.put(double1, integer2);
      Integer.toUnsignedLong(160);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      Double.sum(1734.69, 1441.5984709617);
      Double.min(3176.2884709617, 0.0F);
      Double double2 = new Double(0.0F);
      Double.sum(10, 10);
      Integer integer3 = new Integer(10);
      hashMap1.put(double0, (Integer) null);
      Double.sum((-197.389325), (-1012.743342));
      Integer integer4 = new Integer(48);
      hashMap1.putAll(hashMap0);
      Double.max(160L, 160L);
      hashMap1.put(double2, (Integer) null);
      hashMap1.keySet();
      JSONObject.valueToString(hashMap1);
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.Double@0000000002\":null,\"java.lang.Double@0000000003\":java.lang.Integer@0000000004}");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4156882405761193
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = new Float(0.0F);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Double double0 = new Double(0.0F);
      Double.max(1734.69, 1734.69);
      Integer integer0 = new Integer(10);
      Integer integer1 = Integer.getInteger("<'SY4", integer0);
      hashMap0.put(double0, integer1);
      Integer.remainderUnsigned(10, 65);
      Integer.toUnsignedString(65);
      Double double1 = new Double(10);
      Integer.sum(10, 160);
      Integer integer2 = new Integer(38);
      hashMap0.put(double1, integer2);
      Double.sum(1734.69, 1441.5984709617);
      Double double2 = new Double(0.0F);
      Double.sum(10, 10);
      Integer integer3 = new Integer(10);
      hashMap0.put(double0, (Integer) null);
      Double.sum((-197.389325), (-1014.4415180076224));
      Integer integer4 = new Integer(38);
      hashMap0.putAll(hashMap0);
      Integer integer5 = new Integer((-3));
      hashMap0.put(double2, (Integer) null);
      hashMap0.keySet();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.Double@0000000002\":null,\"java.lang.Double@0000000003\":java.lang.Integer@0000000004}");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Y7u7x~JM;^\"g\u0007");
      jSONTokener0.nextClean();
      jSONTokener0.syntaxError("{Y7u7x~JM;^\"g\u0007");
      jSONTokener0.back();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {Y7u7x~JM;^\"g\u0007
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("mTO2[9mV#M=X:]B8AM");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("hL}+sd#D");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      Boolean boolean0 = new Boolean("2]+%l/0C*t@n ?l");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Double double0 = new Double(0.0);
      Integer integer0 = new Integer(8448);
      hashMap0.put(double0, integer0);
      hashMap0.keySet();
      JSONObject.valueToString(linkedList1);
      Short short0 = new Short((short)97);
      assertEquals((short)97, (short)short0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9214405419782552
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "X[PMk,";
      jSONObject0.accumulate("lifloa~tValue", (Object) null);
      try { 
        jSONObject0.getBoolean("lifloa~tValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lifloa~tValue\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5601507502065712
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Float float0 = new Float(0.0F);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Integer integer0 = new Integer(10);
      Integer.getInteger("<'SY4", integer0);
      Integer.getInteger("<'SY4");
      HashMap<Short, Object> hashMap1 = new HashMap<Short, Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      HashMap<Boolean, Boolean> hashMap2 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      JSONObject jSONObject1 = new JSONObject();
      String string0 = JSONObject.valueToString(hashMap1, 10, (-4151));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.667799812070994
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(";R{f%+5.9*(CU", (-1.0));
      Short short0 = new Short((short)183);
      JSONObject jSONObject2 = jSONObject1.append("wheel.json.JSONTokener", short0);
      jSONObject1.optBoolean("9");
      Long long0 = new Long((-107L));
      Long long1 = new Long(0L);
      Long.getLong("eq");
      jSONObject1.accumulate("~.g[Sb1-o^/7<LO;QCw", long1);
      Long.compare((-107L), (-107L));
      jSONObject2.accumulate("for", long0);
      jSONObject1.getJSONArray("wheel.json.JSONTokener");
      String string0 = JSONObject.numberToString(long0);
      Short short1 = new Short((short)121);
      jSONObject2.append(",\n", short1);
      Double double0 = new Double((-1049.57845012));
      Double.max((-1.0), 0L);
      String string1 = JSONObject.valueToString(double0, 1455, 0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1098227960130735
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float float0 = 0.0F;
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      BiFunction<Object, Object, Byte> biFunction0 = (BiFunction<Object, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "isfloatValue";
      Object object0 = new Object();
      jSONObject0.append("n3qt|*BI0qiZelM3. F", object0);
      Object object1 = new Object();
      jSONObject0.accumulate("n3qt|*BI0qiZelM3. F", "isfloatValue");
      try { 
        jSONObject0.getBoolean("n3qt|*BI0qiZelM3. F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"n3qt|*BI0qiZelM3. F\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.10447245914544
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Short.compare((short)3570, (short)3570);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("sp");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("] not found.");
      Double double0 = new Double(3023);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      hashMap0.keySet();
      JSONObject.valueToString(linkedList0);
      Short short1 = new Short((short)1);
      assertEquals((short)1, (short)short1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2929322920032833
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("qWaaXMfL'.wl", "X[PMk,");
      jSONObject1.remove("qWaaXMfL'.wl");
      jSONObject1.optInt("qWaaXMfL'.wl");
      try { 
        jSONObject0.getBoolean("qWaaXMfL'.wl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"qWaaXMfL'.wl\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.214935721779758
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("add");
      jSONObject0.accumulate("add", boolean0);
      Object object0 = JSONObject.NULL;
      jSONObject0.getBoolean("add");
      jSONObject0.putOpt("r/", "r/");
      JSONObject jSONObject1 = jSONObject0.accumulate("add", "add");
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      Integer integer0 = new Integer(92);
      Integer integer1 = new Integer((-1643));
      Integer integer2 = new Integer((-1643));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer3 = new Integer(124);
      Integer.divideUnsigned((-2657), (-2293));
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      HashMap<Double, Integer> hashMap2 = new HashMap<Double, Integer>();
      Double double0 = new Double((-1643));
      Integer integer4 = new Integer(857);
      hashMap1.replace(double0, integer3, integer4);
      Integer.getInteger("isintern", (-2293));
      Integer.compareUnsigned(120, (-997));
      hashMap1.put(double0, integer2);
      HashMap<Double, Integer> hashMap3 = new HashMap<Double, Integer>();
      Short short0 = new Short((short)32);
      assertEquals((short)32, (short)short0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9951990562363777
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(";R{f%+5.9*(CU", (-1.0));
      Short short0 = new Short((short)183);
      JSONObject jSONObject2 = jSONObject1.append("wheel.json.JSONTokener", short0);
      jSONObject1.optBoolean("9");
      Long long0 = new Long((-107L));
      Long long1 = new Long(0L);
      Long.getLong("eq");
      JSONObject jSONObject3 = jSONObject1.accumulate("~.g[Sb1-o^/7<LO;QCw", long1);
      Long.compare((-107L), (-107L));
      JSONObject jSONObject4 = jSONObject2.accumulate("for", long0);
      JSONObject.numberToString(long0);
      Short short1 = new Short((short)121);
      jSONObject3.optDouble("~.g[Sb1-o^/7<LO;QCw");
      jSONObject2.optLong("\r");
      jSONObject4.toString(4, 4);
      try { 
        jSONObject4.getDouble("[)YK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[)YK\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.080056919694302
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Object object0 = new Object();
      Object object1 = new Object();
      Float float1 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "zPP-5:A*";
      jSONObject0.isNull("zPP-5:A*");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject jSONObject1 = jSONObject0.append("zPP-5:A*", (Object) null);
      try { 
        jSONObject1.getDouble("zPP-5:A*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"zPP-5:A*\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "{";
      stringArray0[1] = "{";
      stringArray0[0] = "{";
      stringArray0[3] = "{";
      stringArray0[4] = "Fm&$$@F[-j9t2";
      stringArray0[5] = "{";
      stringArray0[6] = "{";
      JSONObject jSONObject0 = new JSONObject("{", stringArray0);
      try { 
        jSONObject0.put(stringArray0[2], 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.688946123179314
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("Cr& t*2Mig$/qBqVK");
      linkedList0.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Object object0 = new Object();
      Float float0 = new Float((-1.0F));
      Double double0 = new Double((-1.0F));
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "zPP-5:A*";
      Float.max(0.0F, 2772.0F);
      String string1 = "?/\"e`n{ps%]h+";
      String string2 = null;
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Integer integer0 = new Integer(567);
      Short.compare((short)125, (short)10);
      Float.min((short)125, (short)125);
      Short.toUnsignedLong((short)125);
      Float.isFinite((-2988.0F));
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5846022138265563
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-2467L));
      jSONArray0.optDouble((-54582745));
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.keys();
      jSONObject0.putOpt("get", "get");
      String string0 = null;
      jSONObject0.opt((String) null);
      Double.max((-1735.08761672), 0.0);
      String string1 = "geti08ntern";
      jSONObject0.optInt("geti08ntern", 268);
      jSONObject0.optBoolean((String) null);
      String string2 = "D";
      try { 
        jSONObject0.getDouble("D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"D\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Float float0 = new Float(0.0F);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Double double0 = new Double(0.0F);
      Integer integer0 = new Integer(10);
      Integer integer1 = Integer.getInteger("<'SY4", integer0);
      hashMap0.put(double0, integer1);
      BiFunction<Double, Integer, Integer> biFunction0 = (BiFunction<Double, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyDouble() , anyInt());
      hashMap0.replaceAll(biFunction0);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      Double double1 = new Double(0.0F);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("pus");
      linkedList0.offerFirst("get");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject("tm~E*^%(v__lwS");
      JSONObject jSONObject1 = jSONObject0.put("pus", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.351826166727274
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("");
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.put("2", (-3553.366335420621));
      jSONObject1.optDouble("ismin", (-3553.366335420621));
      Boolean.compare(false, true);
      jSONObject1.optLong("KTXVb0lk?.", 0L);
      JSONObject jSONObject2 = jSONObject0.put("", (Object) boolean0);
      jSONObject1.put("KTXVb0lk?.", (Object) "ismin");
      JSONObject.valueToString((Object) null, (-605), (-605));
      boolean boolean1 = jSONObject2.has("KTXVb0lk?.");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9409855560478324
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = new Object();
      Float float0 = new Float(0.0F);
      Float.max((-1.0F), 0.0F);
      JSONObject jSONObject0 = new JSONObject(object0);
      Float.max(0.0F, (-2993.12F));
      String string0 = "istoBinaryString";
      JSONObject jSONObject1 = jSONObject0.append("istoBinaryString", "zPP-5:A*");
      String string1 = "getgetInteger";
      try { 
        jSONObject1.put("zPP-5:A*", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.969318514940766
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Predicate<String> predicate0 = Predicate.isEqual((Object) "w@1VN% SyGC?=9cqH\"");
      Long long0 = new Long((short)3570);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) long0);
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Short short1 = new Short((short)3570);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate0.or(predicate3);
      Predicate<String> predicate4 = predicate0.and(predicate3);
      predicate4.negate();
      predicate4.or(predicate2);
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)51);
      JSONObject jSONObject1 = jSONObject0.putOpt("get", byte0);
      jSONObject1.optBoolean((String) null);
      jSONObject0.opt((String) null);
      double double0 = Double.max((short)3570, (-404.8));
      jSONObject0.optInt((String) null, (int) (short)3570);
      jSONObject0.optBoolean((String) null);
      double double1 = jSONObject1.getDouble("get");
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.3254063792043285
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Short, Object> hashMap1 = new HashMap<Short, Object>();
      BiFunction<Object, Object, Float> biFunction0 = (BiFunction<Object, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      HashMap<Boolean, Boolean> hashMap2 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = new Boolean("M@p|KbB,B t~");
      Boolean boolean1 = Boolean.TRUE;
      hashMap0.put(boolean1, "gettoString");
      hashMap2.put(boolean0, boolean0);
      hashMap2.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      JSONObject.valueToString(jSONObject1, (-2177), (-2177));
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.513427278037061
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(";R{f%+5.9*(CU", (-1.0));
      Short short0 = new Short((short)183);
      JSONObject jSONObject2 = jSONObject1.append("wheel.json.JSONTokener", short0);
      jSONObject1.optBoolean("9");
      Long long0 = new Long((-107L));
      Long long1 = new Long(0L);
      Long.getLong("eq");
      jSONObject1.accumulate("~.g[Sb1-o^/7<LO;QCw", long1);
      Long.compare((-107L), (-107L));
      jSONObject2.accumulate("for", long0);
      JSONObject.numberToString(long0);
      Short short1 = new Short((short)121);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      try { 
        jSONObject1.append(";R{f%+5.9*(CU", "eq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[;R{f%+5.9*(CU] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.4385301763062524
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Short short1 = new Short((short)3570);
      Float float0 = new Float((float) (short)3570);
      Float.max((-5302.0F), 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.max((-2993.12F), (-5302.0F));
      Float.max(0.0F, (-2993.12F));
      String string0 = "istoBinaryString";
      JSONObject jSONObject1 = jSONObject0.append("istoBinaryString", short0);
      // Undeclared exception!
      jSONObject1.toString((int) (short)3570);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2658687506796626
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.parallelStream();
      linkedList0.add("] is not a number.");
      linkedList0.spliterator();
      linkedList0.add("w<^DzU/G (O&");
      linkedList0.add("] is not a number.");
      linkedList0.add("[=Q.fvJKw{%<Ct9q");
      Short short0 = new Short((short)8192);
      linkedList0.removeLastOccurrence(short0);
      linkedList0.add("w<^DzU/G (O&");
      linkedList0.offerFirst("] is not a number.");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("] is not a number.");
      linkedList0.add("'~sN)O");
      Boolean boolean0 = new Boolean("w<^DzU/G (O&");
      linkedList0.add("Iwa");
      linkedList0.add("iscompare");
      linkedList0.add("Null key.");
      linkedList0.toArray();
      linkedList0.add("o:ctBK7TWHH\"`%C");
      Boolean.valueOf(true);
      String string0 = JSONObject.quote("w<^DzU/G (O&");
      assertEquals("\"w<^DzU/G (O&\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "o:ctBK7TWHH\"`%C");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.168747035969769
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("JSON does not allow non-finite numbers.", (-1182.8754648495542));
      String string0 = "";
      String string1 = "";
      int int0 = 65;
      jSONObject0.toString(65, 65);
      Short short0 = new Short((short)47);
      Short.toUnsignedLong((short)47);
      Short.toUnsignedInt((short)47);
      jSONObject0.put("", (Object) null);
      JSONObject.valueToString(short0);
      JSONObject jSONObject1 = jSONObject0.put("", 4071);
      Boolean.valueOf("");
      JSONObject.getNames((Object) "");
      jSONObject0.optBoolean("");
      jSONObject1.optLong("");
      jSONObject1.toString();
      String string2 = "\\t";
      jSONObject1.optInt("\t", (-1350));
      jSONObject0.opt("false");
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.pollFirst();
      linkedList1.clone();
      Predicate.isEqual((Object) "3570.00");
      JSONObject.quote("{Y7u7x~JM;^\"g\u0007");
      JSONTokener jSONTokener0 = new JSONTokener("|tQBe=}hQW");
      jSONTokener0.syntaxError("' and instead saw '");
      jSONTokener0.back();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |tQBe=}hQW
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.0826340968174133
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "mTO2[9mV#M=X:]B8AM";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Boolean boolean0 = new Boolean("{Y7u7x~JM;^\"g\u0007");
      linkedList0.pollFirst();
      JSONObject jSONObject0 = new JSONObject((Object) "val");
      String string1 = "wheel.json.JSONTokener";
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONTokener", (Object) null);
      try { 
        jSONObject1.put((String) null, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7630041293692704
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject((Object) "V X\"odbg");
      jSONObject0.optJSONArray("u0aiK(cO~x`bx7u;I&@");
      Boolean boolean0 = Boolean.FALSE;
      Float float1 = new Float(Double.NaN);
      try { 
        jSONObject0.put("V X\"odbg", (Object) float1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8672281377551623
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      jSONObject0.optJSONArray("");
      Integer integer0 = new Integer(125);
      Integer.getInteger("2", integer0);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Double double1 = new Double((-671.091));
      Integer integer1 = new Integer(10);
      hashMap0.put(double1, integer1);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      hashMap0.replaceAll(biFunction0);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      Double double2 = new Double((-177.946));
      Double.max(0.0, 125);
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(10);
      hashMap0.put(double2, integer3);
      hashMap0.keySet();
      Short short0 = new Short((short)2551);
      boolean boolean0 = jSONObject0.optBoolean("YVU)0Dc");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4027843721054105
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-2467L));
      jSONArray0.optDouble((-54582759));
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.putOpt("get", "get");
      jSONObject0.optBoolean("get");
      jSONObject0.opt((String) null);
      Double.max((-1735.08761672), 0.0);
      jSONObject0.optInt("/geti08ntern", 268);
      jSONObject0.optBoolean((String) null);
      try { 
        jSONObject0.getDouble("D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"D\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0115537715672924
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      short short0 = (short)3570;
      Short short1 = new Short((short)3570);
      Short short2 = new Short((short)3570);
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("IkGoouv^b1rmo$hK", jSONArray0);
      try { 
        jSONObject0.getBoolean("IkGoouv^b1rmo$hK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"IkGoouv^b1rmo$hK\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.291088974030933
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Short, String> hashMap0 = new HashMap<Short, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean(true);
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      Boolean boolean1 = Boolean.valueOf("getto/nsignedInt");
      hashMap1.put(boolean1, "gettoUnsignedInt");
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("gettoUnsignedInt", (Map) hashMap0);
      jSONObject1.toJSONArray((JSONArray) null);
      jSONObject1.put("getgetChars", 0L);
      try { 
        jSONObject0.getDouble("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.7250829733914482
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      BiFunction<Object, Object, Float> biFunction0 = (BiFunction<Object, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      HashMap<Boolean, Boolean> hashMap1 = new HashMap<Boolean, Boolean>();
      HashMap<Boolean, Boolean> hashMap2 = new HashMap<Boolean, Boolean>();
      hashMap2.clear();
      Collection<Boolean> collection0 = hashMap2.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      String string0 = JSONObject.valueToString(collection0, (-2177), (-2087));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      Object object0 = new Object();
      Object object1 = new Object();
      Float float1 = new Float((-1.0F));
      Float.min((-6205.388F), (-2490.01F));
      Float.sum(0.0F, 0.0F);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 2210, 160);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.10447245914544
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean0 = new Boolean("[u!]m)}cXa}`x");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.parallelStream();
      linkedList2.toArray();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList0.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      Float.isFinite((-1481.4583F));
      String string0 = JSONObject.valueToString(linkedList0, 3351, (-319));
      assertFalse(linkedList0.contains(string0));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Object object0 = JSONObject.NULL;
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate3.or(predicate2);
      Predicate<String> predicate5 = predicate4.negate();
      predicate3.and(predicate5);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) short0);
      Predicate<Object> predicate7 = predicate6.or(predicate6);
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate8.and(predicate7);
      predicate9.test(object0);
      Predicate<String> predicate10 = predicate3.or(predicate2);
      predicate10.and(predicate2);
      predicate8.and(predicate7);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      linkedList0.offerFirst((String) null);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject("s$");
      Float float0 = new Float(31.101378);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, float0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.193877669746141
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("add", "add");
      try { 
        jSONObject1.append("add", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[add] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.pollFirst();
      linkedList0.clone();
      Short short0 = new Short((short)1);
      Predicate.isEqual((Object) short0);
      JSONObject.valueToString((Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject0 = new JSONObject();
      Double.min(0.0, (-356.0));
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      hashMap0.putAll(hashMap1);
      Short short0 = new Short((short)8);
      assertEquals((short)8, (short)short0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.2584964219555754
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Short, Object> hashMap1 = new HashMap<Short, Object>();
      BiFunction<Object, Object, Float> biFunction0 = (BiFunction<Object, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      HashMap<Boolean, Boolean> hashMap2 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = new Boolean("va");
      BiFunction<Boolean, Object, Boolean> biFunction1 = (BiFunction<Boolean, Object, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(anyBoolean() , any());
      hashMap2.compute(boolean0, biFunction1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      linkedList0.offerFirst((String) null);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap1);
      Boolean.valueOf(true);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.513276309890401
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "V X\"odbg";
      stringArray0[1] = "V X\"odbg";
      stringArray0[2] = "V X\"odbg";
      JSONObject jSONObject0 = new JSONObject("toS", stringArray0);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      BiFunction<Double, Integer, Integer> biFunction0 = (BiFunction<Double, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      hashMap0.putAll(hashMap1);
      jSONObject0.has("null");
      JSONObject jSONObject1 = new JSONObject((Object) "d|1hkt9");
      // Undeclared exception!
      jSONObject1.toString(65, 4664);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.759100419284553
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("");
      JSONObject jSONObject1 = new JSONObject((Object) "2");
      jSONObject1.optDouble("KTXVb0lk?.", (-3553.366335420621));
      Boolean.compare(true, true);
      jSONObject1.optLong("KTXVb0lk?.", 0L);
      jSONObject0.put("\"\"", (-1));
      Double double0 = new Double(0);
      jSONObject1.toString((-2177), 0);
      try { 
        jSONObject0.getDouble("KTXVb0lk?.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"KTXVb0lk?.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.7489425918901973
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("Cr& t*2Mig$/qBqVK");
      linkedList0.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("ube?4P([");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      Boolean boolean0 = new Boolean("issubList");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList0.add("Expected a ',' or ']'");
      linkedList4.add((String) null);
      linkedList2.add("miy");
      Float float0 = new Float(1.0F);
      Boolean boolean1 = new Boolean("issubList");
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList1.addLast("ube?4P([");
      linkedList3.listIterator();
      String string0 = "\\u";
      linkedList3.offerFirst(string0);
      LinkedList<String> linkedList7 = new LinkedList<String>();
      LinkedList<String> linkedList8 = new LinkedList<String>();
      LinkedList<String> linkedList9 = new LinkedList<String>();
      linkedList3.add("Cr& t*2Mig$/qBqVK");
      linkedList0.offerFirst("ube?4P([");
      Double double0 = new Double((-10.018084147338078));
      Double double1 = new Double((-1.0F));
      JSONObject jSONObject0 = new JSONObject(linkedList6);
      jSONObject0.append("miy", linkedList8);
      Short short0 = new Short((short) (-1818));
      assertEquals((short) (-1818), (short)short0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Float float0 = new Float(1.0F);
      float float1 = new Float(1165.0F);
      Float.isFinite(1.0F);
      Float.isFinite(0.0F);
      String string0 = JSONObject.valueToString(float0, 615, 46);
      assertNotNull(string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("max");
      linkedList1.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList2.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList1.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList1.addAll((Collection<? extends String>) linkedList4);
      linkedList0.offerFirst("Cr& t*2Mig$/qBqVK");
      linkedList1.addLast("] is not a Boolean.");
      linkedList2.clear();
      linkedList4.add("isisNaN");
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList2.addAll((Collection<? extends String>) linkedList0);
      linkedList2.offerLast("isisNaN");
      linkedList1.add("e");
      Object object0 = JSONObject.NULL;
      linkedList2.removeLastOccurrence(object0);
      linkedList6.add("n+");
      linkedList6.addLast("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList6.add("isisNaN");
      LinkedList<String> linkedList8 = new LinkedList<String>();
      linkedList1.add("hL}+sd#D");
      linkedList4.offerFirst("Cr& t*2Mig$/qBqVK");
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Object object0 = JSONObject.NULL;
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate3.or(predicate2);
      Predicate<String> predicate5 = predicate4.negate();
      predicate3.and(predicate5);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) short0);
      Predicate<Object> predicate7 = predicate6.or(predicate6);
      Predicate<Object> predicate8 = predicate7.negate();
      predicate8.and(predicate6);
      Predicate<Object> predicate9 = predicate8.and(predicate7);
      predicate9.test(object0);
      Predicate<String> predicate10 = predicate3.or(predicate2);
      predicate10.and(predicate2);
      predicate8.and(predicate7);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      linkedList0.offerFirst((String) null);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject("s$");
      Boolean boolean0 = new Boolean(true);
      try { 
        jSONObject0.put((String) null, (Object) boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6522895046372623
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("[u!]m)}cXa}`x");
      linkedList1.add("nWs+G=Nd+>K=[");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.parallelStream();
      linkedList2.toArray();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList2.addLast((String) null);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList6.add("fI*_9UOw3Bh`z<3");
      linkedList5.poll();
      linkedList6.offerLast(" tc+QX)ZJuwrQ");
      linkedList6.add((String) null);
      linkedList1.pollLast();
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList5.addLast("[u!]m)}cXa}`x");
      LinkedList<String> linkedList8 = new LinkedList<String>();
      linkedList8.add("hL}+sd#D");
      LinkedList<String> linkedList9 = new LinkedList<String>();
      linkedList7.clear();
      linkedList1.removeLastOccurrence(" tc+QX)ZJuwrQ");
      linkedList5.addLast("hL}+sd#D");
      LinkedList<String> linkedList10 = new LinkedList<String>();
      linkedList7.add(": ");
      Float float0 = new Float((float) 4600L);
      JSONObject.quote("Null key.");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6770235741882256
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optDouble((-54582745), 0.0);
      jSONArray0.optDouble((-54582745));
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = null;
      Double.max((-1735.08761672), 0.0);
      int int0 = 268;
      Double.isFinite(1.0);
      String string1 = "getintern";
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.9961265703017723
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Short short0 = new Short((short) (-3674));
      Object object0 = JSONObject.NULL;
      Predicate<String> predicate0 = Predicate.isEqual((Object) "1D4i4_S=");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<String> predicate4 = predicate0.and(predicate3);
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate5.or(predicate1);
      Predicate<String> predicate7 = predicate0.negate();
      predicate4.and(predicate2);
      Object object1 = new Object();
      Predicate<Object> predicate8 = Predicate.isEqual(object1);
      predicate2.or(predicate8);
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate9.or(predicate8);
      predicate10.and(predicate3);
      predicate8.negate();
      predicate8.or(predicate10);
      predicate6.or(predicate7);
      predicate5.and(predicate6);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("istoString");
      linkedList0.add("1D4i4_S=");
      linkedList1.offerFirst("isfloatToIntBits");
      JSONObject jSONObject0 = new JSONObject(predicate7);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.922735094101528
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("");
      jSONObject0.optBoolean("", true);
      JSONObject jSONObject1 = jSONObject0.put("", (-3553.366335420621));
      jSONObject1.toString(16);
      jSONObject0.getInt("");
      jSONObject1.optDouble("KTXVb0lk?.", (-3553.366335420621));
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      Float.max((-825.75195F), 0.0F);
      jSONObject1.append("Y ;D@iQ", "M)B4FhP|");
      try { 
        jSONObject1.getJSONObject("zPP-5:A*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"zPP-5:A*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.0714688758357163
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("");
      jSONObject0.optBoolean("", true);
      JSONObject jSONObject1 = jSONObject0.put("", (-3553.366335420621));
      jSONObject1.optInt("");
      jSONObject1.toString(16);
      jSONObject1.optDouble("KTXVb0lk?.", (-3553.366335420621));
      Boolean.compare(true, true);
      jSONObject1.optLong("KTXVb0lk?.", 0L);
      String string0 = "\"\"";
      jSONObject0.put("\"\"", (-1));
      jSONObject1.toString((-2177), 0);
      Long long0 = new Long((-142L));
      JSONObject.valueToString(long0, 0, 16);
      try { 
        jSONObject0.getDouble("KTXVb0lk?.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"KTXVb0lk?.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.6306237913672668
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      BiFunction<Double, Object, Integer> biFunction0 = (BiFunction<Double, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      HashMap<Double, Integer> hashMap2 = new HashMap<Double, Integer>();
      hashMap0.putAll(hashMap2);
      jSONObject0.has("s$~dN1H^|(]M 5ur,");
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
      
      Short short0 = new Short((short)4290);
      Short short1 = new Short((short) (-1413));
      JSONObject jSONObject1 = jSONObject0.append("", "null");
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      
      jSONObject1.optJSONObject("");
      jSONObject0.optJSONObject("");
      long long0 = jSONObject0.optLong("QC''F_VDMeakba#eF", (long) (short)4290);
      assertEquals(4290L, long0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.8503189776933264
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Short short0 = new Short((short)8448);
      Short.toUnsignedInt((short)0);
      Short.compare((short)0, (short) (-281));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      jSONObject0.optInt("jo\"</a$ U-%!5Lp@", 0);
      jSONObject0.optBoolean("wheel.json.JSONArray");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      linkedList0.removeLastOccurrence(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("I@4P0", (Collection) linkedList0);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("I@4P0", (Map) hashMap0);
      JSONObject.getNames((Object) linkedList0);
      JSONObject.getNames((Object) "I@4P0");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject2.names();
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.getJSONObject("jo\"</a$ U-%!5Lp@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jo\\\"<\\/a$ U-%!5Lp@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.822805481651494
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("");
      JSONObject jSONObject1 = jSONObject0.put("2", (-3553.366335420621));
      jSONObject1.toString(16);
      jSONObject1.optDouble("KTXVb0lk?.", (-3553.366335420621));
      Boolean.compare(true, true);
      jSONObject1.optLong("KTXVb0lk?.", 0L);
      jSONObject1.toString((-2177), 0);
      try { 
        jSONObject0.getDouble("KTXVb0lk?.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"KTXVb0lk?.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.4831169874471346
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("isnames", "isnames");
      JSONObject.valueToString(jSONObject1, 70, 70);
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject2 = jSONObject0.put("isnames", (Map) hashMap0);
      jSONObject2.put("{\"java.lang.String@0000000003\": [\"java.lang.String@0000000003\"]}", false);
      jSONObject1.accumulate("r.V_d|.;lJ=A`", jSONObject2);
      assertEquals(3, jSONObject2.length());
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.527620187206256
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      Float float0 = new Float(0.0F);
      Float.isFinite(1642.8F);
      Object object1 = new Object();
      Object object2 = new Object();
      Float float1 = new Float(4274.952F);
      Float.sum(0.0F, (-1.0F));
      Byte byte0 = new Byte((byte) (-17));
      Byte.toUnsignedInt((byte)34);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toString();
      jSONObject0.toString(32);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.7453252132588983
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("m?O2[9mH#M=X:]B8AM");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("m?O2[9mH#M=X:]B8AM");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("min");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList2.add("m?O2[9mH#M=X:]B8AM");
      Float float0 = new Float((-1.0F));
      Boolean boolean0 = new Boolean("e}w@D`n{AX");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList5.addLast("hL}+sd#D");
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList6.add("*i+.TVmCrWAiaSL?&U");
      LinkedList<String> linkedList7 = new LinkedList<String>();
      LinkedList<String> linkedList8 = new LinkedList<String>();
      linkedList5.add("min");
      linkedList5.offerFirst("hL}+sd#D");
      Double double0 = new Double((-344.2596));
      Double double1 = new Double((-344.2596));
      JSONObject jSONObject0 = new JSONObject(double1);
      assertEquals(3, jSONObject0.length());
      
      Boolean.valueOf(true);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-435), (-435));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.074922034540723
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("");
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalOr(false, false);
      JSONObject jSONObject1 = jSONObject0.put("2", (-3553.366335420621));
      jSONObject1.optDouble("KTXVb0lk?.", (-3553.366335420621));
      Boolean.compare(false, true);
      jSONObject1.optLong("KTXVb0lk?.", (long) (-1));
      JSONObject jSONObject2 = jSONObject0.put("", (Object) boolean0);
      jSONObject2.toString((-3838));
      jSONObject0.optInt((String) null, 2296);
      String string0 = "iE3MH#";
      String string1 = "Expected a ':' after a key";
      jSONObject0.optString("{\n\"java.lang.String@0000000005\": java.lang.Boolean@0000000006,\n\"java.lang.String@0000000002\": java.lang.Double@0000000003\n}", (String) null);
      short short0 = (short)1483;
      Short short1 = new Short((short)1483);
      jSONObject1.putOpt("'", short1);
      Float float0 = new Float((double) 2296);
      JSONObject.valueToString(float0);
      try { 
        jSONObject0.getString("KTXVb0lk?.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"KTXVb0lk?.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Short.compare((short)3570, (short)3570);
      Short.compare((short)34, (short)3570);
      Float.min((-1969.57F), (-3143.0F));
      Short.toUnsignedLong((short)34);
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 32, (short)34);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Short short0 = new Short((short) (-1314));
      String[] stringArray0 = new String[4];
      Float.isFinite((-1487.0F));
      String string0 = JSONObject.valueToString(stringArray0[0], 3351, 65);
      JSONArray jSONArray0 = new JSONArray();
      String string1 = JSONObject.valueToString(jSONArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.031605686298219
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("");
      JSONObject jSONObject1 = jSONObject0.put("", (-3553.366335420621));
      jSONObject1.toString(16);
      Boolean.compare(true, true);
      jSONObject1.optLong("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}", 0L);
      String string0 = "\"\"";
      jSONObject0.put("\"\"", (-1));
      jSONObject0.getDouble("");
      jSONObject1.optBoolean("\"\"");
      try { 
        jSONObject0.put((String) null, (-1205L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.293704492775484
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      String string0 = "A=^@(X7";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("A=^@(X7", hashMap0);
      jSONObject1.optLong("java.lang.Short@0000000002.");
      String string1 = "&w";
      jSONObject1.optString("A=^@(X7", "&w");
      try { 
        jSONObject0.getJSONArray("java.util.HashMap@0000000006");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.util.HashMap@0000000006\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.163141638013601
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Object object0 = new Object();
      Float float0 = new Float(0.0F);
      Float.max((-1.0F), 0.0F);
      JSONObject jSONObject0 = new JSONObject(object0);
      Float.max(0.0F, (-2993.12F));
      JSONObject jSONObject1 = jSONObject0.append("istoBinaryString", "zPP-5:A*");
      jSONObject1.put("zPP-5:A*", false);
      jSONObject0.optString("zPP-5:A*");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.9128646770098026
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("m?O2[9mH#M=X:]B8AM");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("m?O2[9mH#M=X:]B8AM");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("hL}+sd#D");
      linkedList0.removeLastOccurrence(linkedList1);
      linkedList2.addLast("w~1z");
      linkedList0.add("k");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.add("get");
      linkedList4.offerFirst((String) null);
      Double double0 = new Double(0.0);
      JSONObject.valueToString(double0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean0 = jSONObject0.optBoolean("Null key.", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.9042552998214495
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "X[PMk,";
      String string1 = "ifloa~tValue";
      Object object0 = new Object();
      jSONObject0.accumulate("ifloa~tValue", "X[PMk,");
      try { 
        jSONObject0.getJSONArray("ifloa~tValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ifloa~tValue\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.324619696311217
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Byte byte0 = new Byte((byte)110);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      hashMap1.clear();
      Double double0 = new Double(Double.NaN);
      HashMap<Double, Integer> hashMap2 = new HashMap<Double, Integer>();
      HashMap<Double, Integer> hashMap3 = new HashMap<Double, Integer>();
      HashMap<Double, Integer> hashMap4 = new HashMap<Double, Integer>();
      hashMap2.putAll(hashMap3);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(5, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.228147049044204
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Boolean boolean0 = new Boolean("{Y7u7x~JM;^\"g\u0007");
      String string0 = JSONObject.quote("{Y7u7x~JM;^\"g\u0007");
      assertEquals("\"{Y7u7x~JM;^\\\"g\\u0007\"", string0);
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate2.and(predicate1);
      predicate2.negate();
      Predicate<String> predicate3 = predicate0.negate();
      Predicate<String> predicate4 = predicate3.and(predicate1);
      Predicate<Object> predicate5 = predicate1.and(predicate2);
      predicate4.or(predicate5);
      Predicate<String> predicate6 = predicate3.negate();
      predicate4.negate();
      linkedList0.removeIf(predicate6);
      Boolean boolean1 = new Boolean("isparseBoolean");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Boolean boolean2 = new Boolean(",:]}/\"[{;=#");
      JSONArray jSONArray0 = new JSONArray();
      String string1 = JSONObject.quote(";/|n4&gjyq,rL)");
      assertEquals("\";/|n4&gjyq,rL)\"", string1);
      
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      jSONObject0.toString(1634, 1634);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.7015068093160193
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("ajF#\"Y", hashMap0);
      jSONObject1.optDouble("ajF#\"Y");
      jSONObject0.get("ajF#\"Y");
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.8435921481713176
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("Cr& t*2Mig$/qBqVK");
      linkedList0.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("ub?}Dh([K");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Boolean boolean0 = new Boolean("hL}+sd#D");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList0.add("Expected a ',' or ']'");
      linkedList3.add((String) null);
      linkedList1.add("miy");
      Float float0 = new Float(1.0F);
      Boolean boolean1 = new Boolean("hL}+sd#D");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList5.removeLastOccurrence(linkedList3);
      linkedList2.listIterator();
      String string0 = "\\u";
      linkedList2.offerFirst(string0);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList3.add("ub?}Dh([K");
      LinkedList<String> linkedList7 = new LinkedList<String>();
      LinkedList<String> linkedList8 = new LinkedList<String>();
      linkedList2.add("Cr& t*2Mig$/qBqVK");
      linkedList0.offerFirst("ub?}Dh([K");
      Double double0 = new Double((-10.018084147338078));
      Double double1 = new Double((-1.0F));
      JSONObject jSONObject0 = new JSONObject(linkedList5);
      Short short0 = new Short((short) (-937));
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Short short1 = new Short((short)3570);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "w@1VN% SyGC?=9cqH\"";
      stringArray0[1] = "UncloGed comment";
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      Double.min((-1.0), (-1.0));
      HashMap<Double, Integer> hashMap2 = new HashMap<Double, Integer>();
      hashMap1.putAll(hashMap2);
      Short short2 = new Short((short)2070);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      try { 
        jSONObject0.getString("UncloGed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"UncloGed comment\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.1868601258864917
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("X[Pk,", "X[Pk,");
      boolean boolean0 = new Boolean("X[Pk,");
      jSONObject1.putOpt("|tS{6FH", (Object) null);
      Integer integer0 = new Integer(92);
      Integer integer1 = new Integer(124);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer2 = new Integer(2123);
      Integer integer3 = new Integer((-1345));
      Integer.divideUnsigned(1269, 61);
      Integer integer4 = new Integer(61);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      Double double0 = new Double(856.2548899762);
      Integer integer5 = new Integer(4124);
      Integer integer6 = new Integer(4124);
      hashMap1.replace(double0, integer5, integer6);
      Integer.getInteger("X[Pk,", 20);
      Integer.compareUnsigned(61, 124);
      Double double1 = new Double(0.0);
      Integer integer7 = new Integer(99);
      hashMap1.put(double1, integer7);
      Short short0 = new Short((short)44);
      assertEquals((short)44, (short)short0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.3560850098025568
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate2.negate();
      Predicate<String> predicate5 = predicate4.negate();
      predicate4.test("xm@+do");
      Predicate<String> predicate6 = predicate5.and(predicate0);
      predicate2.test("Unterminated string");
      Predicate<String> predicate7 = predicate3.and(predicate6);
      predicate3.and(predicate5);
      Byte byte0 = new Byte((byte)69);
      Predicate<String> predicate8 = predicate3.or(predicate2);
      predicate8.test("Unterminated string");
      predicate8.and(predicate2);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("istoBinaryString", predicate7);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      try { 
        jSONObject0.getJSONObject("istoBinaryString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoBinaryString\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.0467847382591398
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Short short0 = new Short((short)8448);
      Short.toUnsignedInt((short)0);
      Short.compare((short)0, (short) (-281));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      jSONObject0.optInt("jo\"</a$ U-%!5Lp@", 0);
      jSONObject0.optBoolean("wheel.json.JSONArray");
      Short.toUnsignedInt((short) (-281));
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      linkedList0.removeLastOccurrence(jSONArray0);
      try { 
        jSONObject0.getBoolean("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Integer integer0 = new Integer(551);
      Integer.min(551, 551);
      JSONObject.getNames((Object) integer0);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      JSONObject.getNames((Object) null);
      HashMap<Double, Integer> hashMap2 = new HashMap<Double, Integer>();
      HashMap<Double, Integer> hashMap3 = new HashMap<Double, Integer>();
      Double.min((-0.2965698750271374), 0.0);
      HashMap<Double, Integer> hashMap4 = new HashMap<Double, Integer>();
      hashMap3.putAll(hashMap4);
      Short short0 = new Short((short) (-2306));
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.958277627629083
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Object object0 = JSONObject.NULL;
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate3.or(predicate2);
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate3.and(predicate5);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) short0);
      Predicate<String> predicate8 = predicate0.negate();
      predicate4.or(predicate7);
      Predicate<Object> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate9.and(predicate7);
      predicate9.and(predicate10);
      predicate8.negate();
      Predicate<String> predicate11 = predicate8.negate();
      Predicate<Object> predicate12 = predicate7.or(predicate10);
      predicate8.negate();
      Short short1 = new Short((short)116);
      Short.toUnsignedInt((short) (-1970));
      predicate2.or(predicate10);
      predicate12.test(short1);
      Predicate<String> predicate13 = predicate8.or(predicate9);
      predicate2.negate();
      predicate7.negate();
      predicate3.test(":9^,^f>v5:,@gp':");
      predicate13.test(":9^,^f>v5:,@gp':");
      predicate10.negate();
      Predicate<String> predicate14 = predicate13.and(predicate11);
      Predicate<String> predicate15 = predicate14.or(predicate5);
      predicate15.and(predicate6);
      predicate12.and(predicate10);
      Float.isFinite((-2528.0F));
      String string0 = JSONObject.doubleToString((-18.902926912428374));
      assertEquals("-18.902926912428374", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Short.compare((short)3570, (short)3570);
      Short.compare((short)34, (short)3570);
      Float.min((short)34, (-3143.0F));
      Short.toUnsignedLong((short)34);
      Float.min((-3143.0F), 0);
      Short.toUnsignedLong((short)35);
      Float.isFinite(447.03268F);
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("m?O2[9mH#M=X:]B8AM");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("m?O2[9mH#M=X:]B8AM");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("hL}+sd#D");
      linkedList0.removeLastOccurrence(linkedList1);
      linkedList2.addLast("w~1z");
      linkedList0.add("\t");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      Float float0 = new Float(0.0);
      linkedList3.removeLastOccurrence(float0);
      linkedList0.addLast("m?O2[9mH#M=X:]B8AM");
      linkedList1.add("");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList3.add("\t");
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList6.offerFirst("\t");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Object object0 = JSONObject.NULL;
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate3.or(predicate2);
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate3.and(predicate5);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) short0);
      Predicate<String> predicate8 = predicate0.negate();
      Predicate<String> predicate9 = predicate4.or(predicate7);
      Predicate<Object> predicate10 = predicate7.negate();
      Predicate<Object> predicate11 = predicate10.and(predicate7);
      predicate10.and(predicate11);
      predicate8.negate();
      Predicate<String> predicate12 = predicate8.negate();
      Predicate<Object> predicate13 = predicate7.or(predicate11);
      Predicate<String> predicate14 = predicate9.negate();
      Short short1 = new Short((short)116);
      predicate14.negate();
      predicate13.test(short1);
      Predicate<String> predicate15 = predicate8.or(predicate10);
      predicate2.negate();
      predicate7.negate();
      predicate3.test(":9^,^f>v5:,@gp':");
      predicate15.test(":9^,^f>v5:,@gp':");
      predicate11.negate();
      Predicate<String> predicate16 = predicate15.and(predicate12);
      Predicate<String> predicate17 = predicate16.or(predicate5);
      predicate17.and(predicate6);
      predicate13.and(predicate11);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("sum");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.272831263397186
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Predicate<String> predicate0 = Predicate.isEqual((Object) "w@1VN% SyGC?=9cqH\"");
      Long long0 = new Long((short)3570);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) long0);
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Short short1 = new Short((short)3570);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate0.or(predicate3);
      Predicate<String> predicate4 = predicate0.and(predicate3);
      predicate4.negate();
      Predicate<String> predicate5 = predicate4.or(predicate2);
      Predicate<String> predicate6 = predicate5.negate();
      Float float0 = new Float((double) (short)3570);
      predicate6.test("w@1VN% SyGC?=9cqH\"");
      Short short2 = new Short((short)3570);
      Predicate.isEqual((Object) short2);
      predicate3.and(predicate1);
      JSONObject jSONObject0 = new JSONObject(predicate0);
      jSONObject0.opt("islistIterator");
      Double.max((short)3570, 1.0);
      jSONObject0.optInt("/geti08ntern", 268);
      jSONObject0.optBoolean("] is not a JSONObject.");
      try { 
        jSONObject0.getDouble("2Fn@p0]v#A\"lD?l`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2Fn@p0]v#A\\\"lD?l`\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.3956108515402867
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "get";
      jSONObject0.putOpt("get", "get");
      jSONObject0.optBoolean("get");
      jSONObject0.opt("get");
      jSONObject0.optInt("/geti08ntern", 268);
      jSONObject0.optBoolean("get");
      String string1 = "D";
      try { 
        jSONObject0.getDouble("D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"D\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0441857770863767
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Object object0 = JSONObject.NULL;
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate3.or(predicate2);
      predicate4.negate();
      Predicate<String> predicate5 = predicate4.negate();
      predicate3.and(predicate5);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) short0);
      Predicate<Object> predicate7 = predicate6.or(predicate6);
      Predicate<Object> predicate8 = predicate7.negate();
      predicate8.and(predicate7);
      Float.min((short)3570, (short)3570);
      predicate6.or(predicate8);
      Short.toUnsignedLong((short)3570);
      Float.isFinite(3570.0F);
      String string0 = JSONObject.valueToString(predicate7);
      assertNotNull(string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.3496546207226272
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Short.compare((short)3570, (short)3570);
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("w@1VN% SyGC?=9cqH\"", (-424L));
      Short short1 = new Short((short)3570);
      try { 
        jSONObject0.getLong("getcompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getcompare\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.0072954839197683
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "p:|gB1=F";
      stringArray0[0] = "y98Z5Nr aZu;A4tH0d";
      stringArray0[2] = "`An%Z_\"";
      stringArray0[3] = "p:|gB1=F";
      String string0 = "\\u";
      stringArray0[4] = string0;
      stringArray0[5] = "y98Z5Nr aZu;A4tH0d";
      stringArray0[6] = ",\n";
      stringArray0[7] = "p:|gB1=F";
      stringArray0[8] = "`An%Z_\"";
      JSONObject jSONObject0 = new JSONObject("}wZ)]EohrF?=hIW&", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optLong("p:|gB1=F", 0L);
      try { 
        jSONObject0.getLong("`An%Z_\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`An%Z_\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.455509923067768
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      jSONObject1.optInt("[G!+3x^");
      jSONObject0.optLong("80Gkvx=vX9", (long) 0);
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, (JSONObject) null);
      jSONObject0.getDouble("");
      Boolean.valueOf("[G!+3x^");
      Boolean.logicalXor(true, true);
      JSONObject jSONObject2 = new JSONObject();
      String[] stringArray0 = new String[7];
      Double.min(0, 0.0);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      HashMap<Double, Integer> hashMap2 = new HashMap<Double, Integer>();
      BiFunction<Double, Object, Integer> biFunction0 = (BiFunction<Double, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyDouble() , any());
      Double double0 = new Double(0);
      hashMap2.put(double0, integer0);
      Integer integer1 = new Integer(0);
      hashMap2.put((Double) null, integer1);
      hashMap2.computeIfPresent((Double) null, biFunction0);
      hashMap1.putAll(hashMap2);
      Short short0 = new Short((short) (-3287));
      assertEquals((short) (-3287), (short)short0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("Cr& t*2Mig$/qBqVK");
      linkedList0.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("ube?}Dh([K");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      Boolean boolean0 = new Boolean("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList0.add("Expected a ',' or ']'");
      linkedList4.add((String) null);
      linkedList2.add("miy");
      Float float0 = new Float(1.0F);
      Boolean boolean1 = new Boolean("hL}+sd#D");
      linkedList4.containsAll(linkedList0);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList2.iterator();
      linkedList2.add("H.c'QQm");
      linkedList1.addLast("ube?}Dh([K");
      linkedList3.listIterator();
      String string0 = "\\u";
      linkedList3.offerFirst(string0);
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList4.add("ube?}Dh([K");
      linkedList0.addLast("ube?}Dh([K");
      LinkedList<String> linkedList8 = new LinkedList<String>();
      boolean boolean2 = new Boolean((String) null);
      Float float1 = new Float((-4043.3F));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(float0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.7842068034002128
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Short short0 = new Short((short)818);
      String[] stringArray0 = new String[9];
      Object object0 = JSONObject.NULL;
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate2.negate();
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate5.and(predicate0);
      predicate2.test("Unterminated string");
      Predicate<String> predicate7 = predicate3.and(predicate6);
      Predicate<String> predicate8 = predicate2.negate();
      predicate6.and(predicate8);
      Object object1 = new Object();
      Predicate<Object> predicate9 = Predicate.isEqual(object1);
      Object object2 = new Object();
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate10.or(predicate9);
      Predicate<Object> predicate12 = predicate10.and(predicate11);
      Predicate<Object> predicate13 = predicate9.negate();
      Predicate<Object> predicate14 = predicate11.or(predicate10);
      Predicate<Object> predicate15 = predicate13.negate();
      predicate13.and(predicate15);
      Predicate<Object> predicate16 = predicate13.negate();
      Predicate<Object> predicate17 = predicate14.or(predicate12);
      predicate7.or(predicate3);
      Predicate<String> predicate18 = Predicate.isEqual((Object) predicate10);
      predicate18.and(predicate11);
      predicate16.and(predicate17);
      predicate15.negate();
      predicate11.and(predicate12);
      Long long0 = new Long((short)818);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("m?O2[9mH#M=X:]B8AM");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("m?O2[9mH#M=X:]B8AM");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("min");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList2.add("m?O2[9mH#M=X:]B8AM");
      Float float0 = new Float((-1.0F));
      Boolean boolean0 = new Boolean("e}w@D`n{AX");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList5.addLast("hL}+sd#D");
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList6.add("*i+.TVmCrWAiaSL?&U");
      LinkedList<String> linkedList7 = new LinkedList<String>();
      LinkedList<String> linkedList8 = new LinkedList<String>();
      linkedList5.add("min");
      linkedList5.offerFirst("hL}+sd#D");
      Double double0 = new Double((-344.2596));
      Double double1 = new Double((-344.2596));
      JSONObject jSONObject0 = new JSONObject(double1);
      Short short0 = new Short((short)13);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = (-873);
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Short.compare((short)3570, (short)3570);
      String[] stringArray0 = new String[9];
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Short short1 = new Short((short)3570);
      Short short2 = new Short((short) (-29));
      JSONObject.testValidity(short1);
      assertFalse(short1.equals((Object)short2));
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("[u!]m)}cXa}`x");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.parallelStream();
      linkedList2.toArray();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList0.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList2.addLast((String) null);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList5.poll();
      linkedList6.offerLast("L?eV!5Rx>vvs13S");
      linkedList6.add((String) null);
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList5.addLast("[u!]m)}cXa}`x");
      LinkedList<String> linkedList8 = new LinkedList<String>();
      linkedList8.add("h}+d#D");
      LinkedList<String> linkedList9 = new LinkedList<String>();
      linkedList7.clear();
      Long.valueOf(4600L);
      linkedList1.removeLastOccurrence("L?eV!5Rx>vvs13S");
      linkedList5.addLast("h}+d#D");
      LinkedList<String> linkedList10 = new LinkedList<String>();
      linkedList7.add(": ");
      Float float0 = new Float((float) 4600L);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ": ";
      stringArray0[1] = null;
      stringArray0[2] = ": ";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[19];
      stringArray0[3] = "W?ai%uTp";
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.optString("W?ai%uTp", "W?ai%uTp");
      assertEquals("W?ai%uTp", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.8753013613649663
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("ub?}Dh([K");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      Boolean boolean0 = new Boolean("hL}+sd#D");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList0.add("Missing value");
      linkedList4.add((String) null);
      linkedList2.add("min");
      Float float0 = new Float(1.0F);
      Boolean boolean1 = new Boolean("hL}+sd#D");
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList1.addLast("ub?}Dh([K");
      String string0 = "\\u";
      linkedList3.offerFirst(string0);
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList4.add("ub?}Dh([K");
      LinkedList<String> linkedList8 = new LinkedList<String>();
      LinkedList<String> linkedList9 = new LinkedList<String>();
      linkedList3.add("Cr& t*2Mig$/qBqVK");
      linkedList0.offerFirst(",\n");
      Double double0 = new Double((-10.018084147338078));
      Double double1 = new Double((-1.0F));
      JSONObject jSONObject0 = new JSONObject(linkedList6);
      String string1 = jSONObject0.optString("Missing value");
      assertEquals("", string1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.6022805041885344
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("Cr& t*2Mig$/qBqVK");
      linkedList0.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("ub?}Dh([K");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      Boolean boolean0 = new Boolean("hL}+sd#D");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList0.add("Missing value");
      linkedList4.add((String) null);
      linkedList2.add("miy");
      Float float0 = new Float(1.0F);
      Boolean boolean1 = new Boolean("hL}+sd#D");
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList1.addLast("ub?}Dh([K");
      String string0 = "\\u";
      linkedList3.offerFirst(string0);
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList4.add("ub?}Dh([K");
      LinkedList<String> linkedList8 = new LinkedList<String>();
      LinkedList<String> linkedList9 = new LinkedList<String>();
      linkedList3.add("Cr& t*2Mig$/qBqVK");
      linkedList0.offerFirst("ub?}Dh([K");
      Double double0 = new Double((-10.018084147338078));
      Double double1 = new Double((-1.0F));
      JSONObject jSONObject0 = new JSONObject(linkedList6);
      Short short0 = new Short((short) (-937));
      jSONObject0.put("Cr& t*2Mig$/qBqVK", (Collection) linkedList6);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.435187384735725
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Float.isFinite((-1.0F));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("] is not a number.");
      linkedList0.spliterator();
      linkedList0.add("w|^DzJ/G (O&");
      linkedList0.add("[=Q.fvJKw{%<Ct9q");
      linkedList0.add("w|^DzJ/G (O&");
      linkedList0.offerFirst("] is not a number.");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("'~sN)O");
      Boolean boolean0 = new Boolean("w|^DzJ/G (O&");
      linkedList0.add("Iwa");
      linkedList1.add("Iwa");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList2.add("getjoin");
      linkedList3.offerFirst("$'BK,");
      Double double0 = new Double((-10.018084147338078));
      Double double1 = new Double((-1.0F));
      Boolean boolean1 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean1);
      jSONObject0.put("Iwa", (Object) "[=Q.fvJKw{%<Ct9q");
      Short short0 = new Short((short)1770);
      assertEquals((short)1770, (short)short0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.3012417837020203
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Integer integer0 = new Integer(92);
      Integer integer1 = new Integer(124);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer2 = new Integer(2123);
      Integer integer3 = new Integer((-1345));
      Integer.divideUnsigned(1269, 61);
      Integer integer4 = new Integer(61);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      Double double0 = new Double(856.2548899762);
      Integer integer5 = new Integer(4124);
      Integer integer6 = new Integer(4124);
      hashMap1.replace(double0, integer5, integer6);
      Integer.getInteger("X[Pk,", 20);
      Integer.compareUnsigned(61, 124);
      Double double1 = new Double(0.0);
      Integer integer7 = new Integer(99);
      hashMap1.put(double1, integer7);
      Short short0 = new Short((short)44);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "X[Pk,";
      stringArray0[1] = "Bad value from toJSONString: ";
      stringArray0[2] = "X[Pk,";
      stringArray0[3] = "X[Pk,";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("R", 0.0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.9622594906199147
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("mTO2[9mV#M=X:]B8AM");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("hL}+sd#D");
      linkedList2.addLast("w~1z");
      linkedList0.add("\t");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.add("get");
      linkedList4.offerFirst((String) null);
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      Boolean.valueOf(true);
      try { 
        jSONObject0.getBoolean("RzJ3?c,>.-=!52x]z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"RzJ3?c,>.-=!52x]z\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.476941678592489
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("max");
      linkedList1.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList1.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList1.addAll((Collection<? extends String>) linkedList4);
      linkedList0.offerFirst("Cr& t*2Mig$/qBqVK");
      linkedList1.addLast("] is not a Boolean.");
      linkedList2.clear();
      linkedList4.add("isisNaN");
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList2.addAll((Collection<? extends String>) linkedList0);
      linkedList2.offerLast("isisNaN");
      linkedList1.add("e");
      linkedList2.removeLastOccurrence(linkedList5);
      linkedList6.add("n+");
      linkedList6.addLast("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList6.add("isisNaN");
      LinkedList<String> linkedList8 = new LinkedList<String>();
      linkedList1.add("hL}+sd#D");
      linkedList4.offerFirst("Cr& t*2Mig$/qBqVK");
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("qwP!rvteQv@[\"0fE");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.9844935290697796
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList2.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList1.addLast("] is not a Boolean.");
      linkedList4.add("isisNaN");
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList2.offerLast("isisNaN");
      linkedList1.add("e");
      Object object0 = JSONObject.NULL;
      linkedList2.removeLastOccurrence(object0);
      linkedList6.addLast("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList6.add("isisNaN");
      linkedList1.offerFirst((String) null);
      LinkedList<String> linkedList8 = new LinkedList<String>();
      linkedList1.add("hL}+sd#D");
      linkedList4.offerFirst("Cr& t*2Mig$/qBqVK");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("e", false);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Short short1 = new Short((short)3570);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      Double double0 = new Double((short)3570);
      Integer integer0 = new Integer((short)3570);
      hashMap0.put(double0, integer0);
      HashMap<Double, Integer> hashMap2 = new HashMap<Double, Integer>();
      HashMap<Double, Integer> hashMap3 = new HashMap<Double, Integer>();
      hashMap0.putAll(hashMap1);
      HashMap<Double, Integer> hashMap4 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      jSONObject0.put("java.lang.Short@0000000009.", true);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.9175503412075572
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("[u!]m)}cXa}`x");
      linkedList1.add("nWs+G=Nd+>K=[");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.parallelStream();
      linkedList2.toArray();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList2.addLast((String) null);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList5.poll();
      linkedList6.offerLast(" tc+QX)ZJuwrQ");
      linkedList6.add((String) null);
      linkedList1.pollLast();
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList1.add("nWs+G=Nd+>K=[");
      linkedList5.addLast("[u!]m)}cXa}`x");
      LinkedList<String> linkedList8 = new LinkedList<String>();
      linkedList8.add("hL}+sd#D");
      LinkedList<String> linkedList9 = new LinkedList<String>();
      linkedList7.clear();
      linkedList1.removeLastOccurrence(" tc+QX)ZJuwrQ");
      linkedList5.addLast("hL}+sd#D");
      LinkedList<String> linkedList10 = new LinkedList<String>();
      linkedList7.add(": ");
      Float float0 = new Float((float) 4600L);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "\\u";
      try { 
        jSONObject0.getLong(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Short short1 = new Short((short)3570);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) short1);
      Integer integer0 = new Integer(424);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Integer integer1 = new Integer(721);
      Predicate<String> predicate4 = Predicate.isEqual((Object) integer1);
      Predicate<String> predicate5 = predicate4.and(predicate0);
      Predicate<String> predicate6 = predicate5.negate();
      Predicate<String> predicate7 = predicate4.or(predicate6);
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate8.and(predicate0);
      Predicate<Object> predicate10 = predicate3.or(predicate2);
      Predicate<Object> predicate11 = predicate3.negate();
      Integer integer2 = new Integer(92);
      Predicate<Object> predicate12 = Predicate.isEqual((Object) integer2);
      predicate9.and(predicate12);
      predicate6.or(predicate12);
      predicate11.negate();
      Boolean boolean0 = Boolean.valueOf(false);
      Predicate<Object> predicate13 = Predicate.isEqual((Object) boolean0);
      Predicate<String> predicate14 = predicate5.or(predicate7);
      predicate14.and(predicate10);
      predicate10.and(predicate13);
      predicate7.or(predicate6);
      predicate7.negate();
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Short short0 = new Short((short)13);
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) "\n");
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.and(predicate1);
      predicate0.test("\"\n\"");
      Predicate<String> predicate3 = predicate2.or(predicate1);
      Predicate<String> predicate4 = predicate0.and(predicate3);
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate4.negate();
      Predicate<String> predicate7 = predicate1.or(predicate5);
      predicate6.or(predicate7);
      String string1 = JSONObject.quote((String) null);
      assertEquals("\"\"", string1);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.344794996472384
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      short short0 = (short)3570;
      Short short1 = new Short((short)3570);
      Short.compare((short)3570, (short)3570);
      short short2 = (short)34;
      Short.compare((short)34, (short)3570);
      Float.min((-1969.57F), (-3143.0F));
      JSONObject jSONObject0 = new JSONObject(short1);
      jSONObject0.optInt((String) null, 2296);
      try { 
        jSONObject0.accumulate((String) null, short1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Float float0 = new Float((-2261.139926684));
      linkedList2.add((String) null);
      JSONObject.numberToString(float0);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.add("getopt");
      linkedList3.add("Substring bounds error");
      linkedList3.removeLast();
      linkedList2.add("M");
      linkedList4.add("JKJ4FL");
      linkedList0.add("RaUrPpP`Y;?yo2");
      linkedList1.pollFirst();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList3.stream();
      linkedList4.add("Substring bounds error");
      linkedList0.listIterator();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      LinkedList<String> linkedList7 = new LinkedList<String>(linkedList0);
      Short short0 = new Short((short)1093);
      assertEquals((short)1093, (short)short0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("max");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.parallelStream();
      linkedList2.toArray();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList0.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList2.addLast((String) null);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList6.add("EiRaxDgW");
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList5.addLast("EiRaxDgW");
      LinkedList<String> linkedList8 = new LinkedList<String>();
      linkedList8.add("hL}+sd#D");
      Long.valueOf(4600L);
      linkedList1.removeLastOccurrence("EiRaxDgW");
      linkedList5.addLast("hL}+sd#D");
      LinkedList<String> linkedList9 = new LinkedList<String>();
      linkedList7.add(": ");
      LinkedList<String> linkedList10 = new LinkedList<String>();
      linkedList4.offer("isadd");
      linkedList4.add((String) null);
      linkedList6.offerFirst("s$");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject("Cr& t*2Mig$/qBqVK");
      Long long0 = new Long(0L);
      try { 
        jSONObject0.append((String) null, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.545202527023502
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("JSON does not allow non-finite numbers.", (-1182.8754648495542));
      jSONObject0.optInt("Y*", (-6139));
      Short.compare((short)4, (short)92);
      Short.compare((short)4, (short)1383);
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Y*";
      stringArray0[1] = "HZKnU==`O/v`e";
      stringArray0[3] = "Y*";
      stringArray0[5] = "";
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.5952629603288848
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("Cr& t*2Mig$/qBqVK");
      linkedList0.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("ube?4P([");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      Boolean boolean0 = new Boolean("hL9o}+sd#D");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList0.add("Expected a ',' or ']'");
      linkedList4.add((String) null);
      linkedList2.add("miy");
      Float float0 = new Float(1.0F);
      Boolean boolean1 = new Boolean("hL9o}+sd#D");
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList1.addLast("ube?4P([");
      linkedList3.listIterator();
      String string0 = "\\u";
      linkedList3.offerFirst(string0);
      LinkedList<String> linkedList7 = new LinkedList<String>();
      LinkedList<String> linkedList8 = new LinkedList<String>();
      LinkedList<String> linkedList9 = new LinkedList<String>();
      linkedList3.add("Cr& t*2Mig$/qBqVK");
      linkedList0.offerFirst("ube?4P([");
      Double double0 = new Double((-10.018084147338078));
      Double double1 = new Double((-1.0F));
      JSONObject jSONObject0 = new JSONObject(linkedList6);
      Short short0 = new Short((short) (-1818));
      jSONObject0.keys();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.120816856502942
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("");
      String string0 = "X[Pk,";
      jSONObject0.accumulate("lifloa~tValue", "X[Pk,");
      try { 
        jSONObject0.getBoolean("lifloa~tValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lifloa~tValue\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.566072437579588
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Short short1 = new Short((short)3570);
      String[] stringArray0 = new String[9];
      String string0 = "w@1VN% SyGC?=9cqH\"";
      stringArray0[0] = "w@1VN% SyGC?=9cqH\"";
      Short short2 = new Short((short)62);
      JSONObject jSONObject0 = new JSONObject(short2);
      jSONObject0.optDouble("w@1VN% SyGC?=9cqH\"", (double) (short)3570);
      boolean boolean0 = true;
      Boolean.compare(true, true);
      jSONObject0.optLong("!^Iv46J%FU", 1884L);
      jSONObject0.put("-;;X|v%t279|,3uV]M", 1295);
      JSONObject.valueToString(short2);
      try { 
        jSONObject0.getDouble("!^Iv46J%FU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!^Iv46J%FU\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.0560207728191937
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("");
      Boolean boolean0 = Boolean.FALSE;
      String string0 = "2";
      JSONObject jSONObject1 = jSONObject0.put("2", (-3553.366335420621));
      jSONObject1.optDouble("2", (-3553.366335420621));
      long long0 = 0L;
      jSONObject1.optLong("2", 0L);
      JSONObject jSONObject2 = jSONObject0.put("", (Object) boolean0);
      jSONObject2.toString((-3838));
      jSONObject0.accumulate("2", boolean0);
      jSONObject1.put("{\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000002\": java.lang.Double@0000000003\n}", (-3838));
      JSONObject jSONObject3 = jSONObject0.put("\"\"", (-1));
      jSONObject1.isNull("2");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      try { 
        jSONObject3.append("", jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.1567596141608942
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("[u!]m)}cXa}`x");
      linkedList0.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.parallelStream();
      linkedList2.toArray();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList0.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList2.addLast((String) null);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList5.poll();
      linkedList6.offerLast("L?eV!5Rx>vvs13S");
      linkedList6.add((String) null);
      LinkedList<String> linkedList7 = new LinkedList<String>();
      Float.max((-3683.52F), (-3683.52F));
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      Float.max(1.0F, 0.0F);
      Short short0 = new Short((short)1677);
      JSONObject jSONObject1 = jSONObject0.append("Tl>I:65jnXO_", short0);
      try { 
        jSONObject1.getJSONObject("Null pointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null pointer\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.7412699576190973
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Float float0 = new Float(0.0F);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Double double0 = new Double(0.0F);
      Integer integer0 = new Integer(10);
      Integer integer1 = Integer.getInteger("<'SY4", integer0);
      hashMap0.put(double0, integer1);
      BiFunction<Double, Integer, Integer> biFunction0 = (BiFunction<Double, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyDouble() , anyInt());
      hashMap0.replaceAll(biFunction0);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      Double double1 = new Double(0.0F);
      Byte byte0 = new Byte((byte)104);
      Long long0 = new Long((byte)104);
      HashMap<Byte, Long> hashMap2 = new HashMap<Byte, Long>();
      Long long1 = new Long(4163L);
      hashMap2.put(byte0, long1);
      Integer integer2 = new Integer(2623);
      JSONObject jSONObject0 = new JSONObject(integer2);
      jSONObject0.put("<'SY4", (Map) hashMap1);
      try { 
        Short.valueOf("1S2eu%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1S2eu%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.513374567150552
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Short short0 = new Short((short)818);
      String[] stringArray0 = new String[9];
      Object object0 = JSONObject.NULL;
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate4.and(predicate0);
      predicate2.test("Unterminated string");
      predicate2.and(predicate5);
      predicate0.and(predicate4);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) short0);
      Object object1 = new Object();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate6.or(predicate7);
      Predicate<Object> predicate9 = predicate6.and(predicate8);
      predicate9.negate();
      predicate6.or(predicate9);
      Predicate<Object> predicate10 = predicate6.or(predicate6);
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate11.and(predicate10);
      predicate11.negate();
      predicate12.or(predicate11);
      Predicate<String> predicate13 = predicate2.or(predicate2);
      predicate13.and(predicate2);
      Predicate<Object> predicate14 = predicate11.and(predicate10);
      predicate11.negate();
      predicate10.and(predicate14);
      JSONObject jSONObject0 = new JSONObject(predicate11, stringArray0);
      jSONObject0.optDouble("Unterminated string");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Short short1 = new Short((short)818);
      assertTrue(short1.equals((Object)short0));
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.040735136787293
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Short short0 = new Short((short)818);
      String[] stringArray0 = new String[9];
      Object object0 = JSONObject.NULL;
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate4.and(predicate0);
      predicate2.test("Unterminated string");
      predicate2.and(predicate5);
      predicate0.and(predicate4);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) short0);
      Object object1 = new Object();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate6.or(predicate7);
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate6.or(predicate6);
      Predicate<Object> predicate11 = predicate6.or(predicate6);
      Predicate<Object> predicate12 = predicate7.and(predicate11);
      Predicate.isEqual((Object) short0);
      predicate9.negate();
      predicate12.or(predicate10);
      predicate7.negate();
      Predicate<String> predicate13 = predicate2.or(predicate2);
      predicate13.and(predicate2);
      predicate9.and(predicate11);
      predicate8.negate();
      JSONObject jSONObject0 = new JSONObject(predicate7, stringArray0);
      Short short1 = new Short((short)818);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Short short2 = new Short((short)818);
      try { 
        jSONObject1.getJSONObject("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.1262965263520615
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("mTO2[9mV#M=X:]B8AM");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("mTO2[9mV#M=X:]B8AM");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("hL}+sd#D");
      linkedList2.addLast("w~1z");
      linkedList0.add("\t");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.add("get");
      linkedList4.offerFirst((String) null);
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      int int0 = jSONObject0.optInt("get");
      assertEquals(0, int0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Y7u7x~JM;^\"g\u0007");
      jSONTokener0.nextClean();
      jSONTokener0.syntaxError("issplit");
      jSONTokener0.syntaxError("{Y7u7x~JM;^\"g\u0007");
      jSONTokener0.back();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{Y7u7x~JM;^\"g\u0007");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {Y7u7x~JM;^\"g\u0007
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.3206053247947638
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Double double0 = new Double(0.0F);
      Double.max(1734.69, 1734.69);
      Integer integer0 = new Integer(10);
      Integer.remainderUnsigned((-30733247), 8192);
      Integer.getInteger("<'SY4", integer0);
      BiFunction<Double, Integer, Integer> biFunction0 = (BiFunction<Double, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double double1 = new Double(0.0F);
      Double.sum(10, 10);
      Integer.compare(10, 10);
      Double.sum((-197.389325), (-1012.743342));
      Double.max(Double.NaN, Double.NaN);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "<'SY4";
      stringArray0[1] = "<'SY4";
      stringArray0[2] = "<'SY4";
      stringArray0[3] = "<'SY4";
      stringArray0[4] = "<'SY4";
      stringArray0[5] = "<'SY4";
      stringArray0[6] = "<'SY4";
      JSONObject jSONObject0 = new JSONObject(double1, stringArray0);
      try { 
        jSONObject0.get("<'SY4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<'SY4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.add("");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("min");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList1.add("hL}+sd#D");
      Float float0 = new Float(0.0F);
      Boolean boolean0 = new Boolean("e}w@D`n{AX");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList4.push("Expected '");
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList6.addLast("e}w@D`n{AX");
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList1.add("is");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Expected '";
      stringArray0[1] = "*i+.TVmCrWAiaSL?&U";
      JSONObject jSONObject0 = new JSONObject(linkedList5, stringArray0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      String string1 = jSONObject0.toString((int) (short)3570, 1385);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Long long0 = new Long((-5079L));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "($AwDj<ir)D2P1xmPR";
      stringArray0[1] = "pDoM)V2)g4H43*[";
      stringArray0[2] = "2Z:C;&}]|1;Q}b$#jH";
      stringArray0[3] = "JSON does not allow non-finite numbers.";
      stringArray0[4] = "wheel.json.JSONException";
      stringArray0[5] = "Expected '";
      stringArray0[6] = "false";
      stringArray0[7] = "r~;";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.toString(9, 9);
      String string0 = jSONObject0.toString(9);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double.min((-1385.7840031), 2186.56218735);
      Double.max(1.0, 1.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Short short0 = new Short((short)47);
      Long long0 = new Long((short)47);
      Float float0 = new Float((float) (-873));
      Short short1 = new Short((short)47);
      String string0 = JSONObject.quote("w@1VN% SyGC?=9cqH\"");
      assertNotNull(string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.8743960986993704
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Object object0 = JSONObject.NULL;
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate3.or(predicate2);
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate3.and(predicate5);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) short0);
      Predicate<String> predicate8 = predicate0.negate();
      Predicate<Object> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate9.and(predicate7);
      predicate9.and(predicate10);
      Predicate<String> predicate11 = predicate8.negate();
      Predicate<Object> predicate12 = predicate7.or(predicate10);
      predicate8.negate();
      Short short1 = new Short((short)3570);
      predicate2.or(predicate10);
      predicate12.test(short1);
      Predicate<String> predicate13 = predicate8.or(predicate9);
      predicate2.negate();
      predicate7.negate();
      predicate3.test(":9^,^f>v5:,@gp':");
      predicate13.test(":9^,^f>v5:,@gp':");
      predicate10.negate();
      predicate13.and(predicate11);
      predicate8.and(predicate6);
      predicate12.and(predicate10);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Boolean boolean0 = new Boolean(true);
      Short short2 = new Short((short)3570);
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("Av,:iQ-S5I\"C~X@Ht", (double) (short)3570);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("max");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList2.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList1.addAll((Collection<? extends String>) linkedList4);
      linkedList1.addLast("] is not a Boolean.");
      linkedList4.add("isisNaN");
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList2.offerLast("isisNaN");
      linkedList1.add("e");
      Object object0 = JSONObject.NULL;
      linkedList2.removeLastOccurrence(object0);
      linkedList6.addLast("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList6.add("isisNaN");
      LinkedList<String> linkedList8 = new LinkedList<String>();
      linkedList1.add("hL}+sd#D");
      linkedList4.offerFirst("Cr& t*2Mig$/qBqVK");
      assertTrue(linkedList4.equals((Object)linkedList2));
      
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.1576770355110229
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Predicate<String> predicate0 = Predicate.isEqual((Object) "w@1VN% SyGC?=9cqH\"");
      Long long0 = new Long((short)3570);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) long0);
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Short short1 = new Short((short)3570);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate0.or(predicate3);
      Predicate<String> predicate5 = predicate0.and(predicate3);
      Predicate<String> predicate6 = predicate5.negate();
      Predicate<String> predicate7 = predicate5.or(predicate2);
      Predicate<String> predicate8 = predicate7.negate();
      Float float0 = new Float((double) (short)3570);
      predicate8.test("w@1VN% SyGC?=9cqH\"");
      Short short2 = new Short((short)3570);
      Predicate.isEqual((Object) short2);
      predicate5.or(predicate6);
      Predicate<Object> predicate9 = predicate3.and(predicate1);
      predicate2.and(predicate9);
      predicate9.and(predicate2);
      Predicate<Object> predicate10 = predicate2.or(predicate9);
      predicate4.or(predicate6);
      Predicate<String> predicate11 = predicate7.negate();
      predicate5.negate();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      predicate3.test(predicate11);
      predicate5.or(predicate10);
      linkedList0.add("w@1VN% SyGC?=9cqH\"");
      Boolean boolean0 = new Boolean((String) null);
      Boolean boolean1 = new Boolean("w@1VN% SyGC?=9cqH\"");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong(";/|n4&gjyq,rL)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";/|n4&gjyq,rL)\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.1762828211294414
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Object object0 = new Object();
      Object object1 = new Object();
      Float float1 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.isNull("zPP-5:A*");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject jSONObject1 = jSONObject0.append("zPP-5:A*", (Object) null);
      try { 
        jSONObject1.getLong("zPP-5:A*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"zPP-5:A*\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("[u!]m)}cXa}`x");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.parallelStream();
      linkedList2.toArray();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList0.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList2.addLast((String) null);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList5.poll();
      linkedList6.offerLast("L?eV!5Rx>vvs13S");
      linkedList6.add((String) null);
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList5.addLast("[u!]m)}cXa}`x");
      LinkedList<String> linkedList8 = new LinkedList<String>();
      linkedList8.add("h}+d#D");
      LinkedList<String> linkedList9 = new LinkedList<String>();
      linkedList7.clear();
      Long long0 = new Long(4600L);
      linkedList1.removeLastOccurrence("L?eV!5Rx>vvs13S");
      linkedList5.addLast("h}+d#D");
      LinkedList<String> linkedList10 = new LinkedList<String>();
      linkedList7.add(": ");
      Float float0 = new Float((float) 4600L);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ": ";
      stringArray0[1] = null;
      stringArray0[2] = ": ";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      try { 
        jSONObject0.getDouble(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\": \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.9175503412075572
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("[u!]m)}cXa}`x");
      linkedList1.add("[u!]m)}cXa}`x");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.parallelStream();
      linkedList2.toArray();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList2.addLast((String) null);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList5.poll();
      linkedList6.offerLast(" tc+QX)ZJuwrQ");
      linkedList6.add((String) null);
      linkedList1.pollLast();
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList5.addLast("[u!]m)}cXa}`x");
      LinkedList<String> linkedList8 = new LinkedList<String>();
      linkedList8.add("hL}+sd#D");
      LinkedList<String> linkedList9 = new LinkedList<String>();
      linkedList1.removeLastOccurrence(" tc+QX)ZJuwrQ");
      linkedList5.addLast("hL}+sd#D");
      LinkedList<String> linkedList10 = new LinkedList<String>();
      linkedList7.add(": ");
      Float float0 = new Float((float) 4600L);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "\\u";
      try { 
        jSONObject0.getLong(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.6022805041885344
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("Cr& t*2Mig$/qBqVK");
      linkedList0.add("Cr& t*2Mig$/qBqVK");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("ube?}Dh([K");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      Boolean boolean0 = new Boolean("hL}+sd#D");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList0.add("Expected a ',' or ']'");
      linkedList4.add((String) null);
      linkedList2.add("miy");
      Float float0 = new Float(1.0F);
      Boolean boolean1 = new Boolean("hL}+sd#D");
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList1.addLast("ube?}Dh([K");
      linkedList3.listIterator();
      String string0 = "\\u";
      linkedList3.offerFirst(string0);
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList4.add("ube?}Dh([K");
      LinkedList<String> linkedList8 = new LinkedList<String>();
      linkedList3.add("Cr& t*2Mig$/qBqVK");
      linkedList0.offerFirst("ube?}Dh([K");
      Double double0 = new Double((-10.018084147338078));
      Double double1 = new Double((-1.0F));
      JSONObject jSONObject0 = new JSONObject(linkedList6);
      Short short0 = new Short((short) (-937));
      jSONObject0.put("hL}+sd#D", 88);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Short, Object> hashMap1 = new HashMap<Short, Object>();
      BiFunction<Object, Object, Float> biFunction0 = (BiFunction<Object, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      HashMap<Boolean, Boolean> hashMap2 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = new Boolean(false);
      Boolean boolean1 = Boolean.TRUE;
      hashMap2.replace(boolean0, boolean0, boolean1);
      hashMap2.clear();
      Collection<Boolean> collection0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-2177), (-2177));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Object object0 = JSONObject.NULL;
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate3.or(predicate2);
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate3.and(predicate5);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) short0);
      Predicate<String> predicate8 = predicate5.or(predicate0);
      Predicate<Object> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate9.and(predicate7);
      Predicate<Object> predicate11 = predicate9.and(predicate10);
      Predicate<String> predicate12 = predicate8.negate();
      Predicate<Object> predicate13 = predicate7.or(predicate10);
      Predicate<String> predicate14 = predicate8.negate();
      Short short1 = new Short((short)116);
      predicate13.test(short1);
      Predicate<String> predicate15 = predicate8.or(predicate9);
      predicate2.negate();
      predicate7.negate();
      predicate3.test(":9^,^f>v5:@gp':");
      predicate10.negate();
      Predicate<String> predicate16 = predicate15.and(predicate12);
      Predicate<Object> predicate17 = predicate11.and(predicate7);
      predicate16.or(predicate17);
      Predicate<String> predicate18 = predicate16.or(predicate5);
      predicate18.and(predicate6);
      predicate13.and(predicate10);
      predicate14.negate();
      String string0 = JSONObject.quote(":9^,^f>v5:@gp':");
      assertEquals("\":9^,^f>v5:@gp':\"", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.9951323767276916
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Double.max(1734.69, 1734.69);
      Integer integer0 = new Integer(10);
      Integer.getInteger("<'SY4", integer0);
      Integer.remainderUnsigned(10, 48);
      Integer.toUnsignedString(65);
      Double double0 = new Double(10);
      int int0 = new Integer(48);
      Integer integer1 = new Integer(48);
      Integer.toUnsignedLong(201);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      Double.sum(1734.69, 1441.5984709617);
      Double.sum(10, 10);
      Integer integer2 = new Integer(10);
      Double.sum((-197.389325), (-1012.743342));
      Integer integer3 = new Integer(48);
      hashMap1.putAll(hashMap0);
      Double.max(201L, 201L);
      hashMap1.keySet();
      JSONObject.valueToString(hashMap1);
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Float float0 = new Float((-2261.139926684));
      linkedList2.add((String) null);
      JSONObject.numberToString(float0);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList3.add("Substring bounds error");
      linkedList3.removeLast();
      linkedList2.add("M");
      linkedList4.add("JKJ4FL");
      linkedList0.add("RaUrPpP`Y;?yo2");
      linkedList1.pollFirst();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList3.stream();
      linkedList4.add("Substring bounds error");
      linkedList0.listIterator();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      LinkedList<String> linkedList7 = new LinkedList<String>(linkedList0);
      assertFalse(linkedList7.contains("Substring bounds error"));
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.510011070924319
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Short short0 = new Short((short)818);
      String[] stringArray0 = new String[9];
      Object object0 = JSONObject.NULL;
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate2.negate();
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate5.and(predicate0);
      predicate2.test("Unterminated string");
      predicate3.and(predicate6);
      predicate3.and(predicate5);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) short0);
      Object object1 = new Object();
      Predicate<Object> predicate8 = predicate7.or(predicate7);
      predicate8.or(predicate7);
      predicate7.and(predicate8);
      Predicate<Object> predicate9 = predicate7.or(predicate7);
      Predicate<Object> predicate10 = predicate7.and(predicate9);
      predicate10.negate();
      predicate7.or(predicate10);
      Predicate<Object> predicate11 = predicate7.or(predicate7);
      Predicate<Object> predicate12 = predicate11.negate();
      predicate12.and(predicate11);
      predicate12.negate();
      predicate11.negate();
      Predicate<String> predicate13 = predicate3.or(predicate2);
      predicate13.and(predicate2);
      Double double0 = new Double((-952.31));
      Predicate.isEqual((Object) double0);
      Predicate<Object> predicate14 = predicate12.and(predicate11);
      predicate12.negate();
      predicate11.and(predicate14);
      JSONObject jSONObject0 = new JSONObject(predicate12, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String[] stringArray1 = JSONObject.getNames(jSONObject1);
      assertNull(stringArray1);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.9621693083585323
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Object object0 = new Object();
      Object object1 = new Object();
      Float float1 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.isNull("zPP-5:A*");
      assertTrue(boolean0);
      
      Double double0 = new Double((-6205.388F));
      JSONObject jSONObject1 = new JSONObject(float1);
      assertEquals(3, jSONObject1.length());
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.510011070924319
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Short short0 = new Short((short)818);
      String[] stringArray0 = new String[9];
      Object object0 = JSONObject.NULL;
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate2.negate();
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate5.and(predicate0);
      predicate2.test("Unterminated string");
      predicate3.and(predicate6);
      predicate3.and(predicate5);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) short0);
      Object object1 = new Object();
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate8.or(predicate7);
      predicate8.and(predicate9);
      Predicate<Object> predicate10 = predicate7.or(predicate8);
      Predicate<Object> predicate11 = predicate7.and(predicate10);
      predicate11.negate();
      predicate7.or(predicate11);
      Predicate<Object> predicate12 = predicate7.or(predicate7);
      Predicate<Object> predicate13 = predicate12.negate();
      predicate13.and(predicate12);
      predicate13.negate();
      predicate12.negate();
      Predicate<String> predicate14 = predicate3.or(predicate2);
      predicate14.and(predicate2);
      Double double0 = new Double((-952.31));
      Predicate.isEqual((Object) double0);
      Predicate<Object> predicate15 = predicate13.and(predicate12);
      predicate13.negate();
      predicate12.and(predicate15);
      JSONObject jSONObject0 = new JSONObject(predicate13, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String[] stringArray1 = JSONObject.getNames(jSONObject1);
      assertNull(stringArray1);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Predicate<String> predicate0 = Predicate.isEqual((Object) "\n");
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.and(predicate0);
      predicate1.negate();
      Predicate<String> predicate3 = predicate1.negate();
      predicate0.test("Me4d]RG6<GZ }>N");
      Predicate<String> predicate4 = predicate3.or(predicate2);
      predicate4.negate();
      Short short1 = new Short((short)3570);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Me4d]RG6<GZ }>N";
      stringArray0[1] = "\n";
      JSONObject jSONObject0 = new JSONObject(predicate4, stringArray0);
      try { 
        jSONObject0.getInt("Me4d]RG6<GZ }>N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Me4d]RG6<GZ }>N\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
