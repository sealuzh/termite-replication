/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 00:25:21 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9527911031282104
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Double.max((-1023.0525), (-220.4));
      Byte.toUnsignedLong((byte)79);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((short)3570);
      Integer integer1 = new Integer((-684));
      Integer integer2 = new Integer(1543);
      Integer.toUnsignedLong((-40561581));
      Integer.min((-3253), 44);
      Integer integer3 = new Integer(31);
      Integer.toUnsignedString((-927));
      Integer integer4 = new Integer(1899);
      Integer.min((-3152), 1899);
      Integer.toUnsignedLong((-3152));
      Integer integer5 = new Integer((-2690));
      jSONObject0.toString((-3152), 591);
      JSONObject.doubleToString((-40561581));
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.accumulate("-4.0561581E7", jSONObject1);
      StringWriter stringWriter0 = new StringWriter(1543);
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.830893944717778
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.isFinite(1406.0F);
      // Undeclared exception!
      jSONObject0.toString(6068);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3066687254045313
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (-4));
      jSONObject0.optDouble((String) null, (-311.8295522865));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Integer integer0 = new Integer(40);
      jSONObject0.getDouble("");
      jSONObject1.keys();
      Integer integer1 = new Integer((-1037));
      hashMap0.put(integer1, jSONObject1);
      Integer integer2 = new Integer((int) integer0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.153532456654254
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Double.max((-1023.0525), (-220.4));
      Byte.toUnsignedLong((byte)79);
      Byte.toUnsignedInt((byte)102);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((short)3570);
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      BiFunction<Object, Object, Float> biFunction0 = (BiFunction<Object, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap1.compute("", biFunction0);
      HashMap<String, Float> hashMap2 = new HashMap<String, Float>();
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalOr(true, false);
      Boolean.logicalOr(false, true);
      Boolean.logicalAnd(false, true);
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      
      jSONObject0.put("", (Object) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3056573382986394
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Short short0 = new Short((short)3570);
      String[] stringArray0 = new String[12];
      Short.toUnsignedLong((short)11);
      stringArray0[2] = "/xd|";
      stringArray0[3] = "";
      stringArray0[4] = "";
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      Object object0 = new Object();
      hashMap0.values();
      hashMap0.put("", jSONArray0);
      hashMap0.put(short0, jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(39);
      Integer integer1 = new Integer((short)11);
      jSONObject0.put("/xd|", 422L);
      Integer.toUnsignedLong(34);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6103331657007571
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("rx'nLe'", false);
      boolean boolean0 = jSONObject0.getBoolean("rx'nLe'");
      assertFalse(boolean0);
      
      Short short0 = new Short((short)13);
      Short.toUnsignedInt((short)5);
      Integer integer0 = new Integer((short) (-162));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList2.add((Double) null);
      LinkedList<JSONArray> linkedList5 = new LinkedList<JSONArray>();
      Integer integer1 = new Integer((short)5);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = JSONObject.valueToString(linkedList2);
      assertEquals("[null]", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.541191332155751
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "b!NMriYgXM";
      stringArray0[3] = "b!NMriYgXM";
      stringArray0[5] = "^/w`TUNO9T9,9j*Q";
      JSONObject jSONObject0 = new JSONObject("b!NMriYgXM", stringArray0);
      jSONObject0.optString("#C)NoVH#Y&a{\u0007-,5`", "#C)NoVH#Y&a{\u0007-,5`");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("b!NMriYgXM", (Collection) linkedList0);
      int int0 = jSONObject1.optInt("isdecode", 54);
      assertEquals(54, int0);
      
      boolean boolean0 = jSONObject1.isNull("A JSONObject text must end with '}'");
      assertTrue(boolean0);
      
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.accumulate("b!NMriYgXM", object0);
      jSONObject2.optDouble("b!NMriYgXM");
      Integer integer0 = new Integer(1548);
      JSONArray jSONArray0 = jSONObject2.names();
      assertNotNull(jSONArray0);
      
      jSONObject2.putOpt("@B", (Object) null);
      jSONArray0.put(1548, true);
      StringWriter stringWriter0 = new StringWriter(1548);
      jSONObject0.getString("b!NMriYgXM");
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "A JSONObject text must end with '}'");
      jSONArray0.write(stringWriter0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      stringWriter1.write(charArray0);
      StringWriter stringWriter3 = stringWriter2.append('f');
      jSONObject0.write(stringWriter3);
      double double0 = jSONObject1.optDouble("@B");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1109935981156895
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Short.valueOf((short)48);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.optString("", "^/w`sOO9TX,9j*Q");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("false", (Collection) linkedList1);
      jSONObject0.optInt("", 24);
      boolean boolean0 = new Boolean("");
      jSONObject0.put("2 -]", (Collection) linkedList1);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject1, 24, 8192);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1203439474224945
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Short short0 = new Short((short)1212);
      Double.max((-220.4), (-1023.0525));
      Byte.toUnsignedLong((byte)84);
      Byte.toUnsignedInt((byte)79);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((byte) (-116));
      Integer integer1 = new Integer((short)1212);
      Integer integer2 = new Integer((-40561581));
      Integer integer3 = new Integer(61);
      JSONTokener jSONTokener0 = new JSONTokener("?[n~Fyx:(*SD@>e,");
      JSONTokener jSONTokener1 = new JSONTokener("?[n~Fyx:(*SD@>e,");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      LinkedList<JSONArray> linkedList3 = new LinkedList<JSONArray>();
      linkedList3.add((JSONArray) null);
      linkedList1.retainAll(linkedList2);
      Integer integer4 = new Integer(1388);
      Integer integer5 = Integer.valueOf(13);
      hashMap0.put(integer4, integer5);
      JSONObject.valueToString(linkedList3, (-1285), (byte)84);
      try { 
        jSONObject0.getJSONObject("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.2779914688584595
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Short short0 = new Short((short) (-95));
      Integer integer0 = new Integer((short) (-95));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((short) (-95));
      Integer integer2 = new Integer((short) (-95));
      Integer.getInteger("Nzf|@eHpfV`}");
      Integer.getInteger("Nzf|@eHpfV`}", (Integer) null);
      int int0 = 47;
      Integer integer3 = new Integer((short) (-95));
      Integer integer4 = new Integer(47);
      Integer integer5 = new Integer((-1707));
      Integer integer6 = new Integer(47);
      Integer.compareUnsigned((-877), (-1635));
      linkedList0.add((Integer) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9683304358882807
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      String string0 = "";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "^/w`sOO9TX,9j*Q";
      stringArray0[1] = "^/w`sOO9TX,9j*Q";
      stringArray0[2] = "";
      stringArray0[3] = "^/w`sOO9TX,9j*Q";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "^/w`sOO9TX,9j*Q";
      JSONObject jSONObject0 = new JSONObject("^/w`sOO9TX,9j*Q", stringArray0);
      jSONObject0.optString("is", (String) null);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Boolean boolean0 = new Boolean(">Zeh:(Bie{L.IkB");
      linkedList1.offer(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("getcopyValueOf", (Collection) linkedList1);
      jSONObject1.optInt("getcopyValueOf", 24);
      jSONObject1.isNull("^/w`sOO9TX,9j*Q");
      // Undeclared exception!
      try { 
        linkedList1.forEach((Consumer<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.394700405858334
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Short short0 = new Short((short)3570);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.optString("", "");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("false", (Collection) linkedList1);
      jSONObject1.optInt("", 24);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSONObject0);
      Predicate.isEqual((Object) short0);
      linkedList1.removeIf(predicate0);
      jSONObject1.put("", 24);
      JSONObject jSONObject2 = jSONObject0.put("2 -]", (Collection) linkedList1);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1875550832758006
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("A@(7", "A@(7");
      jSONObject0.optLong("A@(7");
      jSONObject0.optInt("iscopyValueOf", 2083);
      jSONObject1.optBoolean("A@(7");
      JSONTokener jSONTokener0 = new JSONTokener("A@(7");
      JSONTokener jSONTokener1 = new JSONTokener("wheel.json.JSONArray");
      JSONTokener jSONTokener2 = new JSONTokener("eq");
      JSONTokener jSONTokener3 = new JSONTokener("A@(7");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      LinkedList<JSONArray> linkedList3 = new LinkedList<JSONArray>();
      Integer.min(65, (-1712));
      Integer integer0 = new Integer((-3004));
      Float float0 = new Float((float) (-3004));
      JSONTokener jSONTokener4 = new JSONTokener("islogicalOr");
      try { 
        jSONObject0.getLong("A@(7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A@(7\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2089381802373724
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "<z";
      JSONObject.testValidity("<z");
      JSONObject jSONObject0 = new JSONObject();
      String string1 = "D7wP";
      int int0 = 1041;
      JSONObject jSONObject1 = jSONObject0.put("D7wP", 1041);
      JSONObject jSONObject2 = jSONObject0.put("<z", (Collection) null);
      jSONObject2.optDouble("D7wP");
      jSONObject0.toString(1041, (-1062));
      jSONObject2.getDouble("D7wP");
      jSONObject1.put("D7wP", (Object) "D7wP");
      try { 
        jSONObject0.getJSONObject("{\n\"java.lang.String@0000000002\": java.lang.Integer@0000000003,\n\"java.lang.String@0000000005\": []\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000002\\\": java.lang.Integer@0000000003,\\n\\\"java.lang.String@0000000005\\\": []\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.250251169808933
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter(120);
      Float.max(1.0F, 0.0F);
      jSONObject0.isNull("v[f=)u]qV8'");
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("v[f=)u]qV8'", "");
      jSONObject1.optDouble("");
      Integer integer0 = new Integer(1548);
      JSONArray jSONArray0 = jSONObject0.names();
      StringWriter stringWriter1 = new StringWriter(120);
      stringWriter1.append('p');
      StringWriter stringWriter2 = stringWriter1.append('J');
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "@B");
      jSONArray0.write(stringWriter2);
      char[] charArray0 = new char[0];
      stringWriter3.write(charArray0);
      StringWriter stringWriter4 = stringWriter3.append('J');
      jSONObject1.write(stringWriter4);
      jSONObject0.optDouble("+1k!mJQU9YK(J]zte");
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.098147389135067
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 1342);
      jSONObject0.optDouble((String) null, (-311.8295522865));
      Integer integer0 = new Integer(40);
      jSONObject0.getDouble("");
      Integer.toUnsignedString(40);
      Integer integer1 = new Integer((-1037));
      hashMap0.put(integer1, jSONObject1);
      Integer integer2 = new Integer((int) integer0);
      jSONObject0.get("");
      jSONObject0.getLong("");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-3544));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1398003452667624
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Double double0 = new Double((-2677.73765230764));
      hashMap0.put("L~Y0R.)", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("L~Y0R.)");
      JSONObject.testValidity("JSONObject[");
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString(2880);
      jSONObject0.length();
      try { 
        jSONObject0.get("s.~5\">EJ]*x6JnmI*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"s.~5\\\">EJ]*x6JnmI*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.063066111932259
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<JSONObject, String> hashMap1 = new HashMap<JSONObject, String>();
      Double.sum(0.0, 1840.694631);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("69.0", 4107);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject1.put("wheel.json.JSONException", (Collection) linkedList0);
      int int0 = (-1062);
      String string0 = jSONObject1.toString(1, 4107);
      // Undeclared exception!
      jSONObject1.getDouble(string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject.quote("#j,\n");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.spliterator();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList3.pollFirst();
      linkedList4.clone();
      linkedList3.removeAll(linkedList4);
      LinkedList<String> linkedList5 = new LinkedList<String>();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList6.add("P");
      linkedList6.removeFirst();
      // Undeclared exception!
      try { 
        linkedList6.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "b!NMriYgXM";
      stringArray0[1] = "b!NMriYgXM";
      stringArray0[3] = "b!NMriYgXM";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      String string0 = "B_\\u&r.uVE8O:[1I1t";
      JSONTokener jSONTokener0 = new JSONTokener("java.lang.Float@0000000001.");
      JSONTokener jSONTokener1 = new JSONTokener("t$c1xM4\",yV*+6");
      JSONTokener jSONTokener2 = new JSONTokener("yqeY-TT=G=/d(");
      JSONTokener jSONTokener3 = new JSONTokener(string0);
      JSONTokener jSONTokener4 = new JSONTokener("\f");
      String string1 = "/(K}ea0^?@o6p!.#x";
      JSONTokener jSONTokener5 = new JSONTokener("/(K}ea0^?@o6p!.#x");
      try { 
        jSONTokener4.nextString('U');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 1 of \f
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.201040680056905
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "b!NMriYgXM";
      stringArray0[1] = "b!NMriYgXM";
      stringArray0[2] = "b!NMriYgXM";
      stringArray0[3] = "b!NMriYgXM";
      stringArray0[4] = "b!NMriYgXM";
      stringArray0[5] = "^/w`sOO9TX,9j*Q";
      JSONObject jSONObject0 = new JSONObject("b!NMriYgXM", stringArray0);
      jSONObject0.optString("#A)N{VH#Y&a{B-,5`", "#A)N{VH#Y&a{B-,5`");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("b!NMriYgXM", (Collection) linkedList0);
      jSONObject1.append("b!NMriYgXM", "b!NMriYgXM");
      int int0 = 54;
      jSONObject1.optInt("isdecode", 54);
      try { 
        jSONObject1.getLong("b!NMriYgXM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"b!NMriYgXM\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) null);
      try { 
        jSONObject1.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9830877585747856
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      hashMap0.put((Long) null, "ishashCode");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double.max((-1139.025), 0.0);
      Byte.toUnsignedLong((byte)102);
      Byte.toUnsignedInt((byte)0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((byte)0);
      hashMap0.put((Integer) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer1 = new Integer(0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((int) (byte)0, (-2992));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = "isrotateLeft";
      JSONTokener jSONTokener0 = new JSONTokener("t1x&4\",yV*+.6");
      JSONTokener jSONTokener1 = new JSONTokener((String) null);
      JSONTokener jSONTokener2 = new JSONTokener("par");
      jSONTokener2.syntaxError("[NbX6BJl<9><-/|_s<");
      jSONTokener2.nextTo('U');
      JSONTokener jSONTokener3 = new JSONTokener((String) null);
      JSONTokener jSONTokener4 = new JSONTokener("N:U#");
      jSONTokener3.back();
      JSONTokener jSONTokener5 = new JSONTokener("sL.OONUu}s3");
      JSONTokener jSONTokener6 = new JSONTokener("mi");
      try { 
        jSONTokener6.next('v');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'v' and instead saw 'm' at character 1 of mi
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.125108989015958
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Short short0 = new Short((short)3570);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "Unclosed comment";
      stringArray0[2] = "/xd|";
      stringArray0[3] = "";
      String string0 = "";
      stringArray0[4] = "";
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      Object object0 = new Object();
      jSONArray0.put((int) (short)3570, true);
      hashMap0.values();
      hashMap0.put("", jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.getJSONArray("");
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.putOpt("Unclosed comment", (Object) null);
      jSONObject0.optString("");
      jSONObject2.optBoolean("Unclosed comment", false);
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.337333884998908
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "*N^V ";
      JSONObject jSONObject1 = jSONObject0.accumulate("*N^V ", "*N^V ");
      jSONObject0.optLong("*N^V ");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^/w`sOO9TX,9j*Q";
      stringArray0[1] = "^/w`sOO9TX,9j*Q";
      stringArray0[2] = "^/w`sOO9TX,9j*Q";
      JSONObject jSONObject2 = new JSONObject("*N^V ", stringArray0);
      jSONObject0.optString("*N^V ", "*N^V ");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      jSONObject0.put("null", 0L);
      JSONObject jSONObject3 = new JSONObject((Object) "^/w`sOO9TX,9j*Q");
      jSONObject3.put("@9H`U", (Collection) linkedList0);
      jSONObject2.optInt("java.lang.String@0000000002", 24);
      jSONObject1.isNull("pb&U7>*");
      // Undeclared exception!
      try { 
        linkedList1.forEach((Consumer<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1428074196753928
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "Pg0";
      JSONTokener jSONTokener0 = new JSONTokener("Pg0");
      String string1 = null;
      try { 
        jSONObject0.put((String) null, 495);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.056871295422592
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer integer0 = new Integer(1496);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(1496);
      String string0 = "getmin";
      Integer integer2 = new Integer(1496);
      Integer.getInteger("getmin", integer2);
      int int0 = 47;
      Integer.max(47, (-1131));
      Integer integer3 = new Integer(37);
      linkedList0.add(integer3);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject((Object) "b!NMriYgXM");
      jSONObject0.toJSONArray(jSONArray0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer4 = new Integer(47);
      Integer integer5 = new Integer(47);
      hashMap0.putIfAbsent(integer4, integer5);
      int int1 = 1015;
      Integer integer6 = new Integer(2117);
      int int2 = 12;
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      hashMap0.replaceAll(biFunction0);
      // Undeclared exception!
      jSONObject0.toString(1496, 5);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.198233221708871
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "D7wP";
      jSONObject0.put("D7wP", 1041);
      JSONObject jSONObject1 = jSONObject0.put("<z", (Collection) null);
      int int0 = (-1062);
      jSONObject0.toString(1041, (-1062));
      jSONObject1.getDouble("D7wP");
      StringWriter stringWriter0 = new StringWriter(42);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{\n\"java.lang.String@0000000002\": java.lang.Integer@0000000003,\n\"java.lang.String@0000000005\": []\n}");
      char char0 = 'W';
      StringWriter stringWriter2 = stringWriter1.append('W');
      JSONObject.valueToString(jSONObject0);
      // Undeclared exception!
      try { 
        stringWriter2.append((CharSequence) "wheel.json.JSONObject@0000000001", 25, (-2445));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter(120);
      Float.max(1.0F, 0.0F);
      Float.valueOf(0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      stringWriter0.append((CharSequence) null);
      StringWriter stringWriter1 = new StringWriter(120);
      stringWriter1.append((CharSequence) null);
      StringWriter stringWriter2 = new StringWriter(936);
      StringWriter stringWriter3 = new StringWriter();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, linkedList1);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.689178166518139
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",`M\"ZeGV^7US,", 47);
      jSONObject1.optInt((String) null);
      Object object0 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^/w`sOO9TX,9j*Q";
      stringArray0[1] = "(KgbHNuM/S6Z7";
      stringArray0[2] = "^/w`sOO9TX,9j*Q";
      stringArray0[3] = "(KgbHNuM/S6Z7";
      stringArray0[4] = "(KgbHNuM/S6Z7";
      stringArray0[5] = "(KgbHNuM/S6Z7";
      stringArray0[6] = "(KgbHNuM/S6Z7";
      stringArray0[7] = "^/w`sOO9TX,9j*Q";
      stringArray0[8] = "^/w`sOO9TX,9j*Q";
      JSONObject jSONObject2 = new JSONObject(object0, stringArray0);
      jSONObject0.optString("-1.0", "(KgbHNuM/S6Z7");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject3 = jSONObject2.put("&g7xm,tW_u@S\")WgK.~", (Collection) linkedList0);
      Double double0 = new Double(47);
      jSONObject2.put("^/w`sOO9TX,9j*Q", (-854L));
      Integer integer0 = new Integer(47);
      jSONObject3.accumulate("^/w`sOO9TX,9j*Q", integer0);
      linkedList0.add(double0);
      JSONObject jSONObject4 = jSONObject3.put("&g7xm,tW_u@S\")WgK.~", false);
      assertNotSame(jSONObject4, jSONObject0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0905994737794786
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, 5, 5);
      jSONArray0.put(5, 0.0);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.7161442796273865
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "b!NMriYgXM";
      stringArray0[2] = "b!NMriYgXM";
      stringArray0[3] = "b!NMriYgXM";
      stringArray0[4] = "(KgbHNuM/S6Z7";
      stringArray0[5] = "^/w`sOO9TX,9j*Q";
      JSONObject jSONObject0 = new JSONObject("b!NMriYgXM", stringArray0);
      jSONObject0.optString("#A)N{VH#Y&a{B-,5`", "#A)N{VH#Y&a{B-,5`");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("b!NMriYgXM", (Collection) linkedList0);
      jSONObject1.optInt("isdecode", 54);
      jSONObject1.isNull("");
      JSONObject.doubleToString(1269.676644);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.accumulate("b!NMriYgXM", object0);
      jSONObject2.optDouble("b!NMriYgXM");
      Integer integer0 = new Integer(1548);
      jSONObject0.optLong(":TSfs");
      jSONObject2.putOpt("@B", (Object) null);
      StringWriter stringWriter0 = new StringWriter(1548);
      StringWriter stringWriter1 = stringWriter0.append('J');
      stringWriter1.append((CharSequence) "");
      jSONObject0.optBoolean("wheel.json.JSONObject$1");
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.1312124366588616
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Short short0 = new Short((short)3570);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "Unclosed comment";
      stringArray0[2] = "/xd|";
      stringArray0[3] = "";
      String string0 = "";
      stringArray0[4] = "";
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      Object object0 = new Object();
      hashMap0.put("", jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.getJSONArray("");
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.putOpt("Unclosed comment", (Object) null);
      jSONObject2.toString();
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1875550832758006
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("A=^@(X7", "A=^@(X7");
      jSONObject0.optLong("A=^@(X7");
      double double0 = new Double((-1892.0));
      jSONObject1.optBoolean("null", true);
      jSONObject0.optInt("iscopyValueOf", 2083);
      jSONObject1.optBoolean("A=^@(X7");
      JSONTokener jSONTokener0 = new JSONTokener("A=^@(X7");
      JSONTokener jSONTokener1 = new JSONTokener("wheel.json.JSONArray");
      jSONTokener1.next(16);
      JSONTokener jSONTokener2 = new JSONTokener("eq");
      jSONTokener1.skipTo('\'');
      JSONTokener jSONTokener3 = new JSONTokener("wheel.json.JSONTokener");
      jSONTokener1.back();
      JSONTokener jSONTokener4 = new JSONTokener((String) null);
      assertFalse(jSONTokener4.equals((Object)jSONTokener2));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject1.put("", (Collection) linkedList0);
      boolean boolean0 = jSONObject1.has("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.2554823251787535
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "rx'nLe'";
      JSONObject jSONObject1 = jSONObject0.put("rx'nLe'", false);
      try { 
        jSONObject1.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter(120);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Pg0");
      stringWriter1.append((CharSequence) "Pg0");
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      jSONObject0.optString("get");
      jSONObject0.put("Pg0", true);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<JSONObject, String> hashMap1 = new HashMap<JSONObject, String>();
      Double.sum(0.0, 1840.694631);
      Integer integer0 = new Integer(43);
      String string0 = null;
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.put((String) null, (Object) jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8605343774698508
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer.compareUnsigned((-550), (-550));
      Integer integer0 = new Integer((-592));
      BiConsumer<Long, Object> biConsumer0 = (BiConsumer<Long, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(2049L);
      hashMap0.putIfAbsent(long0, "JSON does not allow non-finite numbers.");
      hashMap0.forEach(biConsumer0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      hashMap0.clone();
      Integer integer1 = new Integer((-550));
      jSONObject0.names();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONArray> hashMap2 = new HashMap<Object, JSONArray>();
      JSONObject.valueToString(hashMap2, (-550), 9);
      String string0 = "\\u";
      JSONObject jSONObject1 = jSONObject0.put(string0, false);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Float float0 = new Float(1170.13F);
      Float.max((-1.0F), (-1483.5813F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.has("Substring bounds error");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.1201533207968826
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(65, 65);
      JSONObject.valueToString("");
      Boolean boolean0 = Boolean.FALSE;
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter(4071);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.append('T');
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("WEPxo", (Collection) linkedList0);
      try { 
        jSONObject1.getJSONObject("%~K^QR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%~K^QR\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0735428464085233
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray(".");
      Boolean boolean0 = Boolean.TRUE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = (-850);
      JSONObject.valueToString(boolean0, (-850), (-850));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      String string0 = "Expected a ',' or ']'";
      int int1 = (-143);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-143));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8174723264917572
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      String string0 = JSONObject.quote("1w/&c2Z#be4/'");
      assertEquals("\"1w/&c2Z#be4/'\"", string0);
      
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)hashMap1.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-2854));
      Integer integer1 = new Integer((-2854));
      Integer integer2 = new Integer((-684));
      Integer.toUnsignedLong((-684));
      Integer.min(2264, 160);
      Integer integer3 = new Integer((-45));
      Integer.toUnsignedString((-3152));
      Integer integer4 = new Integer(2264);
      Integer integer5 = new Integer(43);
      Integer.min(160, 43);
      Integer.toUnsignedLong((-1101));
      hashMap1.putIfAbsent(integer5, integer3);
      Integer integer6 = new Integer(47);
      JSONObject jSONObject1 = new JSONObject(set0);
      jSONObject1.toString(160, 43);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7664851267655348
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] not found.";
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.optInt("getshortValue");
      Boolean.compare(true, true);
      Boolean.logicalXor(true, false);
      jSONObject0.append("] not found.", boolean0);
      Boolean boolean1 = Boolean.TRUE;
      JSONObject.valueToString(boolean1);
      JSONTokener jSONTokener0 = new JSONTokener("] not found.");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ] not found.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8300637723929456
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "Oh=@sh";
      JSONObject.quote("Oh=@sh");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("i_B-#6_+j31Pc<&n66J");
      jSONObject0.optInt("Oh=@sh", 35);
      Object object0 = JSONObject.NULL;
      int int0 = (-486);
      JSONObject.valueToString(object0, 2315, (-486));
      jSONObject0.optLong("i_B-#6_+j31Pc<&n66J", (long) 35);
      jSONObject0.names();
      StringWriter stringWriter0 = new StringWriter(35);
      // Undeclared exception!
      try { 
        stringWriter0.write((String) null, 9, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.7006950327168457
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "b!NMriYgXM";
      stringArray0[3] = "b!NMriYgXM";
      stringArray0[5] = "^/w`TUNO9T9,9j*Q";
      JSONObject jSONObject0 = new JSONObject("b!NMriYgXM", stringArray0);
      jSONObject0.optString("#C)NoVH#Y&a{\u0007-,5`", "#C)NoVH#Y&a{\u0007-,5`");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("b!NMriYgXM", (Collection) linkedList0);
      jSONObject1.optInt("isdecode", 54);
      jSONObject1.isNull("");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.accumulate("b!NMriYgXM", object0);
      jSONObject2.optDouble("b!NMriYgXM");
      Integer integer0 = new Integer(1548);
      JSONArray jSONArray0 = jSONObject2.names();
      jSONObject2.putOpt("@B", (Object) null);
      StringWriter stringWriter0 = new StringWriter(1548);
      JSONObject.valueToString(jSONObject2, 1548, 1548);
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "");
      jSONArray0.write(stringWriter0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      stringWriter1.write(charArray0);
      StringWriter stringWriter3 = stringWriter2.append('r');
      jSONObject0.write(stringWriter3);
      jSONObject1.optDouble("@B");
      try { 
        jSONObject2.getDouble("b!NMriYgXM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"b!NMriYgXM\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Float.isFinite(1.0F);
      Float.min(792.665F, 792.665F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-74023248));
      linkedList0.addLast(integer0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = "wTMtSjW ]u@r@d";
      JSONTokener jSONTokener0 = new JSONTokener("TDTDN&BX_s_p!");
      JSONTokener jSONTokener1 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Double.max(0.0, (-1023.0525));
      StringWriter stringWriter0 = new StringWriter();
      JSONTokener jSONTokener0 = new JSONTokener("@{+q0M[805ng");
      jSONTokener0.next();
      Integer integer0 = new Integer(42);
      Integer integer1 = new Integer(42);
      Integer.max(766, (-486));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer2 = new Integer(59);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(88);
      hashMap0.put(integer0, integer4);
      Integer integer5 = new Integer((-1718));
      Integer integer6 = new Integer(766);
      Integer integer7 = new Integer(3);
      Integer.min(1318, 3);
      Integer.toUnsignedString(16);
      Integer.max((-1718), 1318);
      hashMap0.putIfAbsent(integer7, integer2);
      Integer integer8 = new Integer(3);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of @{+q0M[805ng
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.531461586568846
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONTokener jSONTokener0 = new JSONTokener("Pg0");
      StringWriter stringWriter0 = new StringWriter(120);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Pg0");
      stringWriter1.append((CharSequence) "Pg0");
      Object object0 = new Object();
      jSONObject0.put("lon", (Object) null);
      String string0 = ",\n";
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      Float.min(120, (-388.171F));
      jSONObject0.put(",\n", (Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Double.max((-1049.2558667221867), (-220.4));
      Byte.toUnsignedLong((byte)79);
      Byte.toUnsignedInt((byte)102);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(185);
      Long long0 = new Long(1862L);
      JSONObject jSONObject1 = jSONObject0.putOpt("JSONArray initial value should be a string or collection or array.", (Object) null);
      try { 
        jSONObject1.getJSONObject("' and instead saw '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"' and instead saw '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.1875550832758006
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("*N^V ", "*N^V ");
      jSONObject0.optLong("*N^V ");
      Double.sum((-765.049577116), (-1892.0));
      jSONObject0.optInt("icopyxValueOf", 8192);
      jSONObject1.optBoolean("*N^V ");
      JSONTokener jSONTokener0 = new JSONTokener("*N^V ");
      Long long0 = new Long(8192);
      JSONTokener jSONTokener1 = new JSONTokener("icopyxValueOf");
      jSONObject1.optBoolean("Bom", false);
      JSONTokener jSONTokener2 = new JSONTokener(",^{<%1+ST=");
      try { 
        jSONTokener2.next('P');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'P' and instead saw ',' at character 1 of ,^{<%1+ST=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.9050448138044374
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Short short0 = new Short((short)3570);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject.valueToString(jSONObject0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.offer("");
      JSONObject jSONObject1 = jSONObject0.put("false", (Collection) linkedList1);
      long long0 = jSONObject1.optLong("^/w`sOO9TX,9j*Q", (long) 24);
      assertEquals(24L, long0);
      
      int int0 = new Short((short)3570);
      boolean boolean0 = jSONObject1.isNull("false");
      assertFalse(boolean0);
      
      linkedList1.add((Object) null);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      boolean boolean1 = linkedList4.addAll((Collection<? extends String>) linkedList5);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.54193421140495
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      String string0 = "[]";
      JSONTokener jSONTokener0 = new JSONTokener("[]");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.accumulate("[]", "[]");
      jSONObject1.names();
      jSONObject2.remove("[]");
      int int0 = 70;
      Integer integer0 = new Integer(70);
      JSONObject jSONObject3 = jSONObject1.append("[]", integer0);
      JSONObject jSONObject4 = jSONObject3.put("[]", 0.0);
      JSONObject jSONObject5 = new JSONObject(integer0, stringArray0);
      String string1 = "sho";
      jSONObject5.optLong("sho");
      jSONObject4.optJSONObject("sho");
      Double double0 = new Double(0.0);
      Object object0 = new Object();
      JSONObject jSONObject6 = new JSONObject((Object) jSONObject2, stringArray0);
      try { 
        jSONObject1.getString("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer.compareUnsigned((-550), (-550));
      Float.isFinite(0);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.5644864411769253
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "b!NMriYgXM";
      stringArray0[1] = "b!NMriYgXM";
      stringArray0[2] = "b!NMriYgXM";
      stringArray0[3] = "b!NMriYgXM";
      stringArray0[4] = "nKgbHNuMOu6Z7";
      stringArray0[5] = "^/w`sOO9TX,9j*Q";
      JSONObject jSONObject0 = new JSONObject("b!NMriYgXM", stringArray0);
      jSONObject0.optString("#A)N{VH#Y&a{B-,5`", "#A)N{VH#Y&a{B-,5`");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("b!NMriYgXM", (Collection) linkedList0);
      jSONObject1.isNull("");
      JSONObject.getNames(jSONObject1);
      JSONObject.doubleToString(1271.1460790838219);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.accumulate("b!NMriYgXM", object0);
      jSONObject2.optDouble("b!NMriYgXM");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject2.getString("b!NMriYgXM");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "^/w`sOO9TX,9j*Q");
      Writer writer0 = jSONObject0.write(stringWriter1);
      jSONObject2.write(writer0);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.25126585158776
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.accumulate("A=^@(X7", "A=^@(X7");
      jSONObject1.optInt("nR", 3);
      jSONObject0.put("A=^@(X7", 415L);
      jSONObject1.optLong("A=^@(X7");
      JSONObject.valueToString("nR");
      Double double0 = new Double(1832.8967818455585);
      jSONObject1.getInt("A=^@(X7");
      JSONObject jSONObject2 = jSONObject0.put("Vc'NIWd8T!:}#{v<", false);
      try { 
        jSONObject2.getBoolean("0.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0.0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.098147389135067
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      jSONObject0.optDouble((String) null, (-311.8295522865));
      Integer integer0 = new Integer(40);
      jSONObject0.getDouble("");
      Integer.toUnsignedString(40);
      Integer integer1 = new Integer((-1037));
      hashMap0.put(integer1, jSONObject1);
      Integer integer2 = new Integer((int) integer0);
      jSONObject0.get("");
      jSONObject0.getLong("");
      JSONTokener jSONTokener0 = new JSONTokener("getvalueOf");
      jSONTokener0.back();
      JSONTokener jSONTokener1 = new JSONTokener("Z%Wa;Lxc}l]yU0'");
      assertTrue(jSONTokener1.more());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7913563426828252
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite((-2369.1758F));
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      Float.isFinite((-3167.488F));
      Float.sum(0.0F, (-1.0F));
      Float.sum(0.0F, 0.0F);
      Float.isFinite(0.0F);
      Float.max(2878.4421F, (-3167.488F));
      Float.sum(1.0F, 0.0F);
      Float.isFinite(0.0F);
      Float.max(0.0F, 1.0F);
      Float.sum(1.0F, (-3167.488F));
      Float.max((-734.8311F), (-2590.0251F));
      Float.isFinite((-734.8311F));
      Float.sum(0.0F, (-5182.826F));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.addAll((Collection<? extends String>) linkedList2);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString((-3170));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.294545165844896
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "b!NMriYgXM";
      stringArray0[1] = "b!NMriYgXM";
      stringArray0[2] = "b!NMriYgXM";
      JSONObject jSONObject0 = new JSONObject("b!NMriYgXM", stringArray0);
      Short.compare((short)579, (short)160);
      Byte byte0 = new Byte((byte)119);
      JSONObject jSONObject1 = new JSONObject("b!NMriYgXM", stringArray0);
      String string0 = JSONObject.valueToString(jSONObject0, (byte)119, (byte) (-49));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.3588186074559268
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "b!NMriYgXM";
      stringArray0[3] = "b!NMriYgXM";
      stringArray0[5] = "^/w`TUNO9T9,9j*Q";
      JSONObject jSONObject0 = new JSONObject("b!NMriYgXM", stringArray0);
      jSONObject0.optString("#C)NoVH#Y&a{\u0007-,5`", "#C)NoVH#Y&a{\u0007-,5`");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("b!NMriYgXM", (Collection) linkedList0);
      jSONObject1.optInt("isdecode", 54);
      jSONObject1.isNull("");
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.accumulate("b!NMriYgXM", object0);
      jSONObject2.optDouble("b!NMriYgXM");
      jSONObject2.optLong("sum", (long) 54);
      jSONObject0.optInt("b!NMriYgXM", 1163);
      String string0 = "nH`+>zqnYdMy7I(";
      jSONObject2.isNull("nH`+>zqnYdMy7I(");
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Float float0 = new Float(260.06278);
      linkedList1.add((Object) float0);
      // Undeclared exception!
      try { 
        linkedList1.forEach((Consumer<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7624988333496463
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = new Integer(116);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.lang.Long@0000000005.";
      stringArray0[1] = "|H=&;q34\"o>tqY|Hxy";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Integer.max((-313), (-313));
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("8", object0);
      Byte byte0 = new Byte((byte) (-93));
      jSONObject1.append(",:]}/\"[{;=#", byte0);
      try { 
        jSONObject1.getInt("8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.889803242047208
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("A=^@(X7", "A=^@(X7");
      jSONObject0.optLong("A=^@(X7");
      Double.sum((-765.049577116), (-1892.0));
      jSONObject0.optInt("A=^@(X7", 2083);
      JSONTokener jSONTokener0 = new JSONTokener("A=^@(X7");
      JSONTokener jSONTokener1 = new JSONTokener("wheel.json.JSONArray");
      JSONTokener jSONTokener2 = new JSONTokener("A=^@(X7");
      JSONTokener jSONTokener3 = new JSONTokener("wheel.json.JSONTokener");
      try { 
        jSONTokener0.next(2083);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Substring bounds error at character 0 of A=^@(X7
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.318003022525034
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "b!NMriYgXM";
      stringArray0[3] = "b!NMriYgXM";
      stringArray0[5] = "^/w`TUNO9T9,9j*Q";
      JSONObject jSONObject0 = new JSONObject("b!NMriYgXM", stringArray0);
      Double double0 = new Double(0.0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("b!NMriYgXM", object0);
      jSONObject1.optDouble("b!NMriYgXM");
      JSONArray jSONArray0 = jSONObject1.names();
      jSONObject1.putOpt("b!NMriYgXM", (Object) null);
      StringWriter stringWriter0 = new StringWriter(1548);
      jSONObject0.getString("b!NMriYgXM");
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "");
      jSONArray0.write(stringWriter0);
      stringWriter0.append(':');
      char[] charArray0 = new char[2];
      charArray0[1] = 'J';
      stringWriter1.write(charArray0);
      StringWriter stringWriter3 = stringWriter2.append('r');
      jSONObject0.write(stringWriter3);
      try { 
        jSONObject1.getDouble("b!NMriYgXM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"b!NMriYgXM\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "b!NMriYgXM";
      Short.compare((short) (-919), (short)102);
      Byte byte0 = new Byte((byte) (-49));
      String string0 = JSONObject.valueToString((Object) null, (short) (-200), (short) (-919));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Long long0 = new Long(2533L);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.addAll((Collection<? extends String>) linkedList1);
      jSONObject0.append("] not found.", (Object) null);
      jSONObject0.optJSONArray("7mCbiG[|{}ukRt");
      JSONArray jSONArray0 = (JSONArray)jSONObject0.get("] not found.");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Double.max(0.0, 0.0);
      Byte.toUnsignedLong((byte)12);
      Byte.toUnsignedInt((byte)102);
      Integer integer0 = new Integer((short)3570);
      Integer integer1 = new Integer(88);
      Integer integer2 = new Integer(1);
      Integer.toUnsignedLong(3);
      String[] stringArray0 = new String[4];
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("=8W8?:8%}ri{l%/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=8W8?:8%}ri{l%/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      BiFunction<String, Float, Float> biFunction0 = (BiFunction<String, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(2979L);
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0579054247036734
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Short short0 = new Short((short)3570);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "Unclosed comment";
      Byte.toUnsignedLong((byte)102);
      Byte.toUnsignedInt((byte)4);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.entrySet();
      Short.compare((short) (-200), (short)2692);
      Byte byte0 = new Byte((byte) (-118));
      Long long0 = new Long(0L);
      String string0 = JSONObject.valueToString(long0, 4, (-2146));
      assertNotNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.666278442414676
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[4] = "(KgbHNufM/S6Z7";
      Short.compare((short)160, (short) (-200));
      Byte byte0 = new Byte((byte) (-49));
      String string0 = JSONObject.valueToString("^/w`sOO9TX,9j*Q", (short)160, (short) (-200));
      assertNotNull(string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.30071885165292
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Short short0 = new Short((short)3570);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "Unclosed comment";
      stringArray0[2] = "/xd|";
      stringArray0[4] = "";
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      Object object0 = new Object();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      hashMap0.put("", jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.getJSONArray("");
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.remove("");
      JSONObject.valueToString(jSONObject2, (short)3570, (short)3570);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      jSONObject0.put("/xd|", 0L);
      jSONObject2.put("", (Collection) linkedList0);
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000005\": []}");
      Object object1 = JSONObject.NULL;
      jSONObject1.putOpt("/xd|", object1);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Double.sum(0.0, 0.0);
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      Integer.compareUnsigned(2147483645, 2147483645);
      Integer integer0 = new Integer(0);
      Long long0 = new Long((-1272L));
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      hashMap1.putIfAbsent(long0, "JSON doe not allow non-finte numbers.");
      BiConsumer<Long, Object> biConsumer0 = (BiConsumer<Long, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap1.forEach(biConsumer0);
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      Integer integer1 = new Integer(2147483645);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.names();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONArray> hashMap3 = new HashMap<Object, JSONArray>();
      Float float0 = new Float((float) 2147483645);
      JSONTokener jSONTokener0 = new JSONTokener("lo");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5740973368489726
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-248.270622526));
      JSONObject jSONObject1 = jSONObject0.putOpt("getintBitsToFloat", double0);
      try { 
        jSONObject1.append("getintBitsToFloat", "getintBitsToFloat");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[getintBitsToFloat] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.9361420199644204
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Short short0 = new Short((short)3570);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      String string0 = jSONObject0.optString("", "^/w`sOO9TX,9j*Q");
      assertEquals("^/w`sOO9TX,9j*Q", string0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.offer("");
      JSONObject jSONObject1 = jSONObject0.put("false", (Collection) linkedList1);
      long long0 = jSONObject1.optLong("^/w`sOO9TX,9j*Q", (long) 24);
      assertEquals(24L, long0);
      
      int int0 = jSONObject1.optInt("", 24);
      assertEquals(24, int0);
      
      boolean boolean0 = jSONObject1.isNull("false");
      assertFalse(boolean0);
      
      linkedList1.add((Object) "");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList3.clone();
      boolean boolean1 = linkedList2.addAll((Collection<? extends String>) linkedList3);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.1927586474199012
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("isspliterator", object0);
      jSONObject0.optLong("is");
      Double.sum(0L, 0.0);
      jSONObject1.optInt("isspliterator", 2083);
      jSONObject0.optBoolean("isspliterator");
      JSONTokener jSONTokener0 = new JSONTokener("iscopyValueOf");
      JSONTokener jSONTokener1 = new JSONTokener("isspliterator");
      String string0 = "eq";
      JSONTokener jSONTokener2 = new JSONTokener("wheel.json.JSONArray");
      try { 
        jSONTokener0.nextString('J');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 13 of iscopyValueOf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.247986372555539
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("*N^V ", "*N^V ");
      jSONObject0.optDouble("com", 0.0);
      jSONObject0.optLong("*N^V ");
      Double.sum((-765.049577116), (-1892.0));
      jSONObject0.optInt("icopyxValueOf", 8192);
      jSONObject1.optBoolean("*N^V ");
      JSONTokener jSONTokener0 = new JSONTokener("*N^V ");
      Long long0 = new Long(8192);
      JSONTokener jSONTokener1 = new JSONTokener("icopyxValueOf");
      JSONTokener jSONTokener2 = new JSONTokener(",^{<%1+ST=");
      JSONTokener jSONTokener3 = new JSONTokener("isremoveLast");
      try { 
        jSONTokener2.next('P');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'P' and instead saw ',' at character 1 of ,^{<%1+ST=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float.isFinite(0.0F);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("~E<;rHeoV<");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("~E<;rHeoV<");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList2.pop();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList2.addAll((Collection<? extends String>) linkedList3);
      JSONTokener jSONTokener0 = new JSONTokener("~E<;rHeoV<");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~E<;rHeoV<
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.6798652114003596
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer(4);
      JSONObject jSONObject0 = new JSONObject(integer0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter(120);
      Float.max(1.0F, 0.0F);
      Float.valueOf(0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      linkedList1.removeAll(linkedList0);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      LinkedList<JSONArray> linkedList3 = new LinkedList<JSONArray>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList3.retainAll(linkedList4);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      jSONObject1.optInt("istoString", (-234));
      JSONTokener jSONTokener0 = new JSONTokener("Unclosed comment");
      jSONTokener0.back();
      JSONTokener jSONTokener1 = new JSONTokener("istoString");
      assertTrue(jSONTokener1.more());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.8848713335781604
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      BiFunction<Object, Float, Float> biFunction0 = (BiFunction<Object, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("sho", biFunction0);
      BiFunction<String, Float, Float> biFunction1 = (BiFunction<String, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(anyString() , anyFloat());
      hashMap0.compute("", biFunction1);
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      Boolean.valueOf(true);
      Boolean.logicalOr(true, true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "max";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      hashMap1.clear();
      stringArray0[7] = "";
      JSONObject jSONObject0 = new JSONObject(hashMap1, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.9256504262569103
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "getformat";
      stringArray0[1] = "getformat";
      stringArray0[3] = " at character ";
      stringArray0[4] = "3~";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      try { 
        jSONObject0.getLong("67`/)/sVC%`R{;zE_{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"67`/)/sVC%`R{;zE_{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble((String) null, (double) 0);
      String[] stringArray0 = new String[6];
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("");
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.put("", (Object) boolean0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray(".");
      Boolean boolean0 = Boolean.TRUE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("s,KL6ws8BdzQ=Y7>)u", (Object) jSONArray0);
      JSONArray jSONArray1 = jSONObject1.getJSONArray("s,KL6ws8BdzQ=Y7>)u");
      assertSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.2945056947207823
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Long long0 = new Long(2533L);
      JSONObject jSONObject0 = new JSONObject(long0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add((String) null);
      linkedList2.addAll((Collection<? extends String>) linkedList1);
      jSONObject0.append("] not found.", (Object) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.611717802462841
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "b!NMriYgXM";
      stringArray0[3] = "b!NMriYgXM";
      stringArray0[5] = "^/w`TUNO9T9,9j*Q";
      JSONObject jSONObject0 = new JSONObject("b!NMriYgXM", stringArray0);
      jSONObject0.optString("#C)NoVH#Y&a{\u0007-,5`", "#C)NoVH#Y&a{\u0007-,5`");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("b!NMriYgXM", (Collection) linkedList0);
      jSONObject1.optInt("isdecode", 54);
      jSONObject1.isNull("");
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.accumulate("b!NMriYgXM", object0);
      jSONObject2.optDouble("b!NMriYgXM");
      Integer integer0 = new Integer(1548);
      JSONArray jSONArray0 = jSONObject2.names();
      jSONObject2.putOpt("@B", (Object) null);
      StringWriter stringWriter0 = new StringWriter(1548);
      jSONObject0.getString("b!NMriYgXM");
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "");
      jSONArray0.write(stringWriter0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      stringWriter1.write(charArray0);
      StringWriter stringWriter3 = stringWriter2.append('r');
      jSONObject0.write(stringWriter3);
      jSONObject1.optDouble("@B");
      try { 
        jSONObject2.getDouble("b!NMriYgXM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"b!NMriYgXM\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.9006732415188488
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Short short0 = new Short((short)8448);
      Short.toUnsignedInt((short)0);
      Short.compare((short)0, (short)0);
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      String string0 = "jo\"</a$ U-%!5Lp@";
      jSONObject0.optInt("jo\"</a$ U-%!5Lp@", 0);
      jSONObject0.optBoolean("wheel.json.JSONArray");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      linkedList0.removeLastOccurrence(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("I@4P0", (Collection) linkedList0);
      try { 
        jSONObject1.getBoolean(" at character ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" at character \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      BiFunction<String, Float, Float> biFunction0 = (BiFunction<String, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BiFunction<String, Float, Float> biFunction0 = (BiFunction<String, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = JSONObject.doubleToString(1770.044521337773);
      assertEquals("1770.044521337773", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      Float.isFinite((-3167.488F));
      Float.sum(0.0F, (-1.0F));
      Float.sum(0.0F, 0.0F);
      Float.isFinite(0.0F);
      Float.max(2878.4421F, (-3167.488F));
      Float.sum(1.0F, 0.0F);
      Float.isFinite(0.0F);
      Float.max(0.0F, 1.0F);
      Float.sum(1.0F, (-3167.488F));
      String string0 = JSONObject.doubleToString(0.0F);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Integer integer0 = new Integer((short)3570);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((short)3570);
      Integer integer2 = new Integer((short)3570);
      String string0 = "Nzf|@eHpfV`}";
      Integer.getInteger("Nzf|@eHpfV`}");
      Integer.getInteger("Nzf|@eHpfV`}", (Integer) null);
      Integer.max(47, 48);
      Integer integer3 = new Integer((-1270));
      int int0 = 316;
      linkedList0.listIterator();
      Integer.compareUnsigned(316, 395);
      linkedList0.add(integer1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.6702992181413672
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<JSONObject, String> hashMap1 = new HashMap<JSONObject, String>();
      hashMap1.put(jSONObject0, "7vA");
      JSONObject jSONObject1 = new JSONObject((Object) "7vA");
      jSONObject0.opt((String) null);
      String string0 = "";
      try { 
        jSONObject0.getLong("AAA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"AAA\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.1172348614758136
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = ",7<.7Rb D5w!B+c";
      String string0 = "Ek>/ cIt";
      stringArray0[2] = "Ek>/ cIt";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "d|1hkt9";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString(65, 65);
      JSONObject.valueToString("");
      JSONObject jSONObject2 = jSONObject0.put("", 4071);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames((Object) boolean0);
      Double double0 = new Double(232.2072898553);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute(double0, biFunction0);
      jSONObject2.opt("");
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.727631315352237
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, (JSONObject) null);
      jSONObject0.getDouble("");
      jSONObject1.keys();
      jSONObject0.optInt((String) null, 0);
      try { 
        jSONObject0.get("7P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7P\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.200317233123716
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      jSONObject0.optDouble((String) null, (-311.8295522865));
      Integer integer0 = new Integer(40);
      jSONObject0.getDouble("");
      Integer integer1 = new Integer(0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.replaceAll(biFunction0);
      Integer integer2 = new Integer(3978);
      Integer integer3 = new Integer(2832);
      Integer integer4 = new Integer(40);
      Integer.getInteger("Null pointer", 0);
      Integer integer5 = new Integer(0);
      Integer integer6 = new Integer(77);
      Integer integer7 = new Integer(77);
      hashMap2.putIfAbsent(integer6, integer7);
      Integer integer8 = new Integer((-267));
      jSONObject1.toString(2832, 3978);
      try { 
        jSONObject0.getInt("se");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"se\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      String string0 = "sho";
      BiFunction<Object, Float, Float> biFunction0 = (BiFunction<Object, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("sho", biFunction0);
      BiFunction<String, Float, Float> biFunction1 = (BiFunction<String, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(anyString() , anyFloat());
      String string1 = "";
      hashMap0.compute("", biFunction1);
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      Boolean.valueOf(true);
      Boolean.logicalOr(true, true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      String string2 = "max";
      stringArray0[1] = "max";
      stringArray0[2] = "";
      stringArray0[3] = "";
      hashMap1.clear();
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(long0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      Float.isFinite((-3167.488F));
      Float.sum(0.0F, 0.0F);
      Float.max(0.0F, 3204.892F);
      Float.isFinite(0.0F);
      Float.sum(1.0F, 0.0F);
      Float.isFinite(0.0F);
      Float.max(0.0F, 1.0F);
      Float.max((-734.8311F), (-2590.0251F));
      Float.isFinite((-734.8311F));
      Float.sum(3204.892F, (-5182.826F));
      Float.sum(0.0F, (-4190.3F));
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[7];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      hashMap0.clear();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      JSONTokener jSONTokener0 = new JSONTokener("istoHexString");
      JSONTokener jSONTokener1 = new JSONTokener(" of ");
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList1.retainAll(linkedList3);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.374210020685795
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A=^@(X7";
      JSONObject jSONObject1 = jSONObject0.accumulate("A=^@(X7", "A=^@(X7");
      jSONObject1.optLong("A=^@(X7");
      Double.sum(0.0, (-765.049577116));
      jSONObject0.optDouble("0");
      jSONObject1.length();
      jSONObject0.optInt("0", (-89));
      jSONObject0.optBoolean("getgetChars");
      jSONObject0.put("0", (double) 2315);
      String string1 = "] is not a JSONObject.";
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      BiFunction<String, Float, Float> biFunction0 = (BiFunction<String, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , anyFloat());
      hashMap0.compute("]4}5S~", biFunction0);
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>(hashMap0);
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer.compareUnsigned((-550), (-550));
      Integer integer0 = new Integer((-592));
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      hashMap1.put(integer0, integer0);
      jSONObject0.names();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONArray> hashMap2 = new HashMap<Object, JSONArray>();
      Float float0 = new Float((-348.76F));
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Byte.toUnsignedLong((byte) (-16));
      Byte.toUnsignedInt((byte)14);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-219));
      hashMap0.entrySet();
      Integer.compareUnsigned(14, 42);
      Integer integer1 = new Integer(42);
      Integer integer2 = new Integer(128);
      Integer integer3 = new Integer(3708);
      hashMap0.putIfAbsent(integer3, integer3);
      Integer integer4 = new Integer((-677));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3708);
      jSONObject1.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.023715506836125
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Float float0 = new Float(1170.13F);
      Float.sum(1170.13F, 1170.13F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("in", (Object) float0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.167723997949895
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter(120);
      Float.max(1.0F, 0.0F);
      Float.valueOf(0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      linkedList1.removeAll(linkedList0);
      Float.valueOf((-532.3F));
      Float float1 = new Float(0.0F);
      linkedList0.add(float1);
      linkedList1.removeAll(linkedList0);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      linkedList1.retainAll(linkedList0);
      jSONObject0.putOpt("~b(@", linkedList2);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      short short0 = (short)3570;
      Short short1 = new Short((short)3570);
      Double.max((-1023.0525), (-220.4));
      byte byte0 = (byte)102;
      Byte.toUnsignedLong((byte)79);
      Byte.toUnsignedInt((byte)102);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray initial value should be a string or collection or array.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Integer integer0 = new Integer((short)3570);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((short)3570);
      Integer integer2 = new Integer((short)3570);
      Integer.getInteger("Nzf|@eHpfV`}");
      Integer.getInteger("Nzf|@eHpfV`}", (Integer) null);
      Integer integer3 = new Integer((short)3570);
      Integer integer4 = new Integer((-2641));
      Integer.max((short)3570, (-3329));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer5 = new Integer(1669);
      Integer integer6 = new Integer((-24668172));
      Integer integer7 = new Integer((-38689130));
      Integer.divideUnsigned((-57), (-57));
      Integer integer8 = new Integer(766);
      Integer.max((-24668172), (-1884));
      hashMap0.putIfAbsent(integer0, integer6);
      Integer integer9 = new Integer((-950));
      JSONTokener jSONTokener0 = new JSONTokener("Nzf|@eHpfV`}");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Nzf|@eHpfV`}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Short short0 = new Short((short)1212);
      Double.max((-220.4), (-1023.0525));
      Byte.toUnsignedLong((byte)84);
      Byte.toUnsignedInt((byte)79);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((byte) (-116));
      Integer integer1 = new Integer((short)1212);
      Integer integer2 = new Integer((-40561581));
      Integer integer3 = new Integer(61);
      Integer.toUnsignedString((-2249));
      Integer integer4 = new Integer((-3467));
      Integer integer5 = new Integer((byte)84);
      hashMap0.put(integer5, integer3);
      Long long0 = new Long(1412);
      Integer integer6 = new Integer((-46638682));
      Boolean.valueOf("getsuLisMt");
      JSONObject jSONObject1 = new JSONObject(integer6);
      JSONObject jSONObject2 = new JSONObject(integer3);
      jSONObject0.put("4294965047", false);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.1285962936622183
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONTokener jSONTokener0 = new JSONTokener("b!NMriYgXM");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      jSONObject0.put("e_JPNgqANZ", true);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      assertTrue(linkedList5.equals((Object)linkedList3));
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("Z&CM]@UBJ,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z&CM]@UBJ,\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "b!NMriYgXM";
      JSONObject.quote((String) null);
      StringWriter stringWriter0 = new StringWriter();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("0");
      linkedList3.poll();
      linkedList3.parallelStream();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      boolean boolean0 = linkedList3.addAll((Collection<? extends String>) linkedList5);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Short short0 = new Short((short)3570);
      String[] stringArray0 = new String[12];
      Short.toUnsignedLong((short)11);
      stringArray0[2] = "/xd|";
      stringArray0[3] = "";
      String string0 = "";
      stringArray0[4] = "";
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.quote("");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        linkedList3.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      BiFunction<String, Float, Float> biFunction0 = (BiFunction<String, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , anyFloat());
      hashMap0.compute("C.xrn/0jPO", biFunction0);
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      Boolean.valueOf(true);
      Boolean.logicalOr(true, true);
      Boolean.logicalOr(false, true);
      Boolean.logicalAnd(true, true);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.3767266534724054
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter(120);
      Float.max(1.0F, 0.0F);
      Float.valueOf(0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      stringWriter0.append((CharSequence) null);
      StringWriter stringWriter1 = new StringWriter(120);
      stringWriter1.append((CharSequence) null);
      StringWriter stringWriter2 = new StringWriter(936);
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      try { 
        jSONObject0.accumulate((String) null, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.0090027922505898
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject.quote("gethashCode");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("gethashCode");
      JSONObject jSONObject1 = jSONObject0.put("Jsg+h(;qb{e=xm", (double) 0L);
      jSONObject0.optDouble("Jsg+h(;qb{e=xm", 0.0);
      jSONObject1.remove("5nC&{j]3[rrI=*%TGy");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.putOpt("|ir')?2", jSONObject0);
      jSONObject2.optDouble("5nC&{j]3[rrI=*%TGy", (-1003.0087614461));
      jSONObject0.remove("FNR|_lyQLLb~{");
      short short0 = (short)1498;
      Short short1 = new Short((short)1498);
      jSONObject1.append("com", short1);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.076252256532968
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Byte byte0 = new Byte((byte) (-105));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.optDouble("", (double) (byte) (-105));
      jSONObject0.optLong("0");
      Double.sum((short)3570, 458.503814);
      jSONObject0.optInt("0", 8192);
      jSONObject0.optBoolean((String) null);
      JSONTokener jSONTokener0 = new JSONTokener("0");
      Long long0 = new Long(8192);
      JSONTokener jSONTokener1 = new JSONTokener("isreverse");
      JSONTokener jSONTokener2 = new JSONTokener("icopyxValueOf");
      JSONTokener jSONTokener3 = new JSONTokener("wa");
      try { 
        jSONTokener3.next('P');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'P' and instead saw 'w' at character 1 of wa
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.3066687254045313
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      jSONObject0.optDouble((String) null, (-311.8295522865));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Integer integer0 = new Integer(40);
      jSONObject0.getDouble("");
      jSONObject1.keys();
      Integer integer1 = new Integer((-1037));
      hashMap0.put(integer1, jSONObject1);
      Integer integer2 = new Integer((int) integer0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.5536815580297962
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Short short0 = new Short((short)3570);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.optString("", "^/w`sOO9TX,9j*Q");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Short.compare((short)422, (short)128);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("false", (Collection) linkedList1);
      jSONObject1.remove("");
      jSONObject1.optInt("", 24);
      jSONObject1.isNull("false");
      // Undeclared exception!
      try { 
        linkedList1.forEach((Consumer<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("0~;$lS'a{(p%qMJ", 2718.77219618);
      String string0 = ".";
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = new Boolean(".");
      String string1 = "Zg0";
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "Zg0");
      StringWriter stringWriter1 = new StringWriter(37);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) ".", 37, (-1687));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.1671753637035533
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      Integer integer0 = new Integer(0);
      HashMap<Integer, JSONObject> hashMap1 = new HashMap<Integer, JSONObject>();
      jSONObject0.optInt("_-W p}wFcK", 2);
      jSONObject0.optBoolean("_-W p}wFcK");
      jSONObject1.put("", 0.0);
      jSONObject0.optBoolean("0q");
      String string0 = null;
      jSONObject1.optDouble("");
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      BiFunction<String, Float, Float> biFunction0 = (BiFunction<String, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("L_TYo.#q<Z", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Double.max((-1023.0525), (-220.4));
      Byte.toUnsignedLong((byte)79);
      Byte.toUnsignedInt((byte)102);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((short)3570);
      Integer integer1 = new Integer((-684));
      Integer integer2 = new Integer(1543);
      Integer.toUnsignedLong((-40561581));
      Integer.min((-3253), 44);
      Integer integer3 = new Integer(31);
      Integer.toUnsignedString((-927));
      Integer integer4 = new Integer(1899);
      Integer integer5 = new Integer((byte)102);
      Integer.min((-3152), 1899);
      Integer.getInteger((String) null, 35);
      Integer.toUnsignedLong((-3152));
      hashMap0.putIfAbsent(integer4, integer5);
      Integer integer6 = new Integer((-2690));
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject.quote("dk@}13/C");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        linkedList3.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Short short0 = new Short((short)1212);
      String string0 = "5=Pf*|HCY=rA/7?";
      JSONObject.quote("5=Pf*|HCY=rA/7?");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.spliterator();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList5.pollFirst();
      linkedList5.removeAll(linkedList4);
      // Undeclared exception!
      try { 
        linkedList4.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.6528388233121019
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = jSONObject0.optInt("isreplaceFirst");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.5309506908694182
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "b!NMriYgXM";
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1.0);
      linkedList0.add(double0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.getInt(">h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">h\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "isformat";
      String string1 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("isformat");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of isformat
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "b!NMriYgXM";
      String string1 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Integer integer0 = new Integer((short)3570);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((short)3570);
      Integer integer2 = new Integer((short)3570);
      Integer.getInteger("Nzf|@eHpfV`}");
      Integer.getInteger("Nzf|@eHpfV`}", (Integer) null);
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer3 = new Integer(2665);
      Integer integer4 = new Integer((-6254807));
      Integer integer5 = new Integer(47);
      Integer.toUnsignedLong((-2031));
      Integer.min(185, 93);
      Integer integer6 = new Integer((-40561581));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<JSONArray> linkedList2 = new LinkedList<JSONArray>();
      linkedList2.retainAll(linkedList1);
      jSONObject0.optJSONObject(" `oxG1l(nd7%`>Ec'4");
      try { 
        jSONObject0.get("Nzf|@eHpfV`}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Nzf|@eHpfV`}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Double.sum(1.0, 1.0);
      HashMap<Object, JSONArray> hashMap1 = new HashMap<Object, JSONArray>();
      JSONObject.quote("p~1(*A7qo-$=E=");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      JSONTokener jSONTokener0 = new JSONTokener("@{+q0M[805ng");
      JSONTokener jSONTokener1 = new JSONTokener("\"}`/H9M-CyeO");
      jSONTokener1.next();
      Integer integer0 = new Integer(182);
      Integer integer1 = new Integer((-30803738));
      Integer.max(3476, 766);
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      Integer integer2 = new Integer(397);
      Integer integer3 = new Integer((-861));
      hashMap2.putIfAbsent(integer3, integer0);
      Integer integer4 = new Integer(182);
      assertTrue(integer4.equals((Object)integer0));
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      BiFunction<String, Float, Float> biFunction0 = (BiFunction<String, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Boolean boolean0 = Boolean.valueOf(":`kQl#xf_SrZ'");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "w/y1\"uhP.6ljW^.";
      stringArray0[3] = "w/y1\"uhP.6ljW^.";
      stringArray0[4] = "8kS";
      stringArray0[5] = "]@)tRO'9ePZ";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      String string0 = jSONObject0.toString((-779));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "Expeted '";
      String string1 = "\"\"";
      JSONObject.quote("\"\"");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        linkedList3.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.6355828473490257
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Double double0 = Double.valueOf(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "getaddLast";
      stringArray0[1] = "Uyu{9(H#y9QO'Sa'";
      stringArray0[2] = " VtH5L";
      stringArray0[3] = "y4G.+0";
      stringArray0[4] = ">z$}Y;x!=vK=b\"O";
      stringArray0[5] = "] is not a JSONArray.";
      stringArray0[6] = "5s|4@";
      stringArray0[7] = "KBu*|#";
      stringArray0[8] = "2h='X^yQl{=";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.accumulate(" VtH5L", "2h='X^yQl{=");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Double double0 = new Double(1.0);
      Float.isFinite(0.0F);
      Double double1 = new Double((-649.38));
      JSONObject.numberToString(double0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("~E<;rHeoV<");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("~E<;rHeoV<");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList2.pop();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      boolean boolean1 = linkedList2.addAll((Collection<? extends String>) linkedList3);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "#j,\n";
      JSONObject.quote("#j,\n");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.spliterator();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList2.removeAll(linkedList3);
      // Undeclared exception!
      try { 
        linkedList3.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.6094379124341
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray(".");
      jSONObject0.put("getshortValue", (-927.5562721));
      Boolean boolean0 = new Boolean(".");
      String string0 = "Zg0";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Zg0");
      stringWriter1.append((CharSequence) ".");
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) ".", 37, (-1687));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Double double0 = new Double(1.0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.parallelStream();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("_#N,d=1nY3V`]", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.5732719802578203
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("not");
      Double.sum((-765.049577116), 0.0);
      String string0 = "iscopyValueOf";
      jSONObject0.optInt("isaddLast", 2083);
      jSONObject0.optBoolean("Eoru\u0000XAV~-sZ;s=e%@");
      JSONTokener jSONTokener0 = new JSONTokener("add");
      JSONTokener jSONTokener1 = new JSONTokener(" ?}c2H+1T");
      JSONTokener jSONTokener2 = new JSONTokener("iscopyValueOf");
      JSONTokener jSONTokener3 = new JSONTokener("eq");
      JSONTokener jSONTokener4 = new JSONTokener("iscopyValueOf");
      try { 
        jSONTokener4.nextString('\'');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 13 of iscopyValueOf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Double.max((-1023.0525), (-220.4));
      Byte.toUnsignedLong((byte)79);
      Byte.toUnsignedInt((byte)102);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("=meF73B?y", (-1L));
      Integer integer0 = new Integer((short)3570);
      Integer integer1 = new Integer((-684));
      Integer integer2 = new Integer(1543);
      Integer.toUnsignedLong((-40561581));
      Integer.min((-3253), 44);
      Integer integer3 = new Integer(31);
      Integer.toUnsignedString((-927));
      Integer integer4 = new Integer(1899);
      Integer integer5 = new Integer((byte)102);
      Integer.min((-3152), 1899);
      Integer.toUnsignedLong((-3152));
      hashMap0.putIfAbsent(integer4, integer5);
      Integer integer6 = new Integer((-2690));
      JSONTokener jSONTokener0 = new JSONTokener("A JSONObject text must end with '}'");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Float float0 = new Float((-3343.0505F));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fB|AV3^VaWIm1]<6=";
      stringArray0[1] = "4)V*\u0006)z;~X7Na)W`";
      stringArray0[2] = "x].D\"C[";
      stringArray0[3] = "LA(";
      stringArray0[4] = "DB6A4";
      stringArray0[5] = "getsum";
      stringArray0[6] = "isfloatToRawIntBits";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      try { 
        jSONObject0.getDouble("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Short short0 = new Short((short)1212);
      Double.max((-220.4), (-1023.0525));
      Byte.toUnsignedLong((byte)84);
      Byte.toUnsignedInt((byte)79);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((byte) (-116));
      Integer integer1 = new Integer((short)1212);
      Integer integer2 = new Integer((-40561581));
      Integer integer3 = new Integer(61);
      Integer.toUnsignedString((-2249));
      Integer integer4 = new Integer(1412);
      Integer integer5 = new Integer(79);
      Integer integer6 = new Integer(79);
      Integer integer7 = new Integer((-3467));
      Integer integer8 = new Integer((byte)84);
      Integer.remainderUnsigned((byte)84, (-40561581));
      hashMap0.put(integer8, integer3);
      Long long0 = new Long(1412);
      Integer integer9 = new Integer((-46638682));
      Boolean boolean0 = Boolean.valueOf("getsuLisMt");
      Integer integer10 = new Integer(84);
      Integer integer11 = new Integer(3162);
      hashMap0.put(integer10, integer11);
      jSONObject0.putOpt("4294965047", boolean0);
      try { 
        jSONObject0.getJSONObject("4294965047");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4294965047\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.8866967846580784
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = " at character ";
      stringArray0[2] = "getputOpt";
      stringArray0[3] = " at character ";
      stringArray0[4] = "isdoubleToString";
      stringArray0[5] = "hyCmO~h{)l";
      stringArray0[6] = "";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("op", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Byte.toUnsignedLong((byte) (-16));
      Byte.toUnsignedInt((byte)14);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-219));
      hashMap0.entrySet();
      Integer.compareUnsigned(14, 42);
      Integer integer1 = new Integer(42);
      Integer integer2 = new Integer(128);
      Integer integer3 = new Integer(3708);
      Integer.getInteger("N3P*?A", integer2);
      hashMap0.putIfAbsent(integer3, integer3);
      Integer integer4 = new Integer((-677));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3708);
      Float float0 = new Float(1.0F);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      BiFunction<String, Float, Float> biFunction0 = (BiFunction<String, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(2979L);
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Long long1 = new Long(2762L);
      hashMap1.putIfAbsent(long1, "java.lang.Long@00000000040");
      Float.sum(2380.621F, 1977.0F);
      Float.isFinite((-4190.3F));
      JSONObject.numberToString(long0);
      float float0 = Float.min(2380.621F, (-4190.3F));
      assertEquals((-4190.3F), float0, 0.01F);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.2511559833636317
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      Float.min(1.0F, 0.0F);
      JSONObject.valueToString(float0);
      JSONTokener jSONTokener0 = new JSONTokener("Expected a ',' or ']'");
      jSONTokener0.back();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Expected a ',' or ']'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.6890092384766586
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite((-2369.1758F));
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      Float.isFinite((-3167.488F));
      Float.sum(0.0F, (-1.0F));
      Float.sum(0.0F, 0.0F);
      Float.isFinite(0.0F);
      Float.max(2878.4421F, (-3167.488F));
      Float.sum(1.0F, 0.0F);
      Float.isFinite(0.0F);
      Float.max(0.0F, 1.0F);
      Float.sum(1.0F, (-3167.488F));
      Float.max((-734.8311F), (-2590.0251F));
      Float.isFinite((-734.8311F));
      Float.sum(0.0F, (-5182.826F));
      Float.sum(0.0F, (-4190.3F));
      Float.sum(0.0F, 0.0F);
      Float.isFinite(0.0F);
      JSONObject.numberToString(float0);
      Float.min(0.0F, 0.0F);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      assertEquals("", stringWriter1.toString());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.6108401206349068
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      BiFunction<String, Float, Float> biFunction0 = (BiFunction<String, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , anyFloat());
      hashMap0.compute("", biFunction0);
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      Boolean.valueOf(true);
      Boolean.logicalOr(true, true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "max";
      stringArray0[2] = "";
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optLong((String) null, 0L);
      int int0 = jSONObject0.optInt("getcompare", 57);
      assertEquals(57, int0);
      
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Long long0 = new Long(0L);
      linkedList0.add((Object) long0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList3.clone();
      boolean boolean1 = linkedList2.addAll((Collection<? extends String>) linkedList4);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Short short0 = new Short((short)3570);
      Double.max((-1023.0525), (-220.4));
      Byte.toUnsignedLong((byte)79);
      Byte.toUnsignedInt((byte)102);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((short)3570);
      Integer integer1 = new Integer((-684));
      Integer integer2 = new Integer(1543);
      Integer.toUnsignedLong((-40561581));
      Integer.min((-3253), 44);
      Integer integer3 = new Integer(31);
      Integer.toUnsignedString((-927));
      Integer integer4 = new Integer(1899);
      Integer integer5 = new Integer((byte)102);
      Integer.min((-3152), 1899);
      Integer.getInteger((String) null, 35);
      Integer.toUnsignedLong((-3152));
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }
}
