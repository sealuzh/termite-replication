/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 02:16:00 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.estimate.BayesNetEstimator;
import weka.classifiers.functions.Logistic;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.classifiers.trees.M5P;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.MiddleOutConstructor;
import weka.core.tokenizers.NGramTokenizer;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5684228856277849
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      locale0.getUnicodeLocaleAttributes();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(983);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("zq|jVJ{!g/~$4%u", arrayList0, 6);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("@relation", 11);
      instances0.setClass(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(0.0);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance1);
      arrayList0.add(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 2362.3807717435698, 1299.719030134314);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance1);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(983);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("0v(`^g5jx", arrayList0, 876);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.add((Instance) binarySparseInstance0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", 876);
      instances0.setClass(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@end";
      stringArray0[1] = "0v(`^g5jx";
      stringArray0[2] = "Whether debug information is output to the console.";
      jRip0.setOptions(stringArray0);
      try { 
        jRip0.rulesetForOneClass(1.0E-10, instances0, 1058.8, 983);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 876, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.082341631643019
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      locale0.getUnicodeLocaleAttributes();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(983);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("zq|jVJ{!g/~$4%u", arrayList0, 6);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("): the dl = ", 983);
      instances0.setClass(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      arrayList0.add(attribute0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList1.add("Title of a book, part of which is being cited. See the LaTeX book for how to type titles. For book entries, use the title field instead.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute1 = new Attribute("date", arrayList1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      jRip0.listOptions();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.splitData(instances0, 3, 2);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5969736466829452
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(983);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("zq|jVJ{!g4%u", arrayList0, 6);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      Instances instances1 = new Instances(".arff", arrayList0, 983);
      instances1.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("zq|jVJ{!g4%u", 11);
      instances1.setClass(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-3200.0762));
      instances1.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances1.add((Instance) binarySparseInstance0);
      arrayList0.add(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances1, (-1715.54918929048), 0.0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(1.0, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 5);
      Locale locale0 = Locale.PRC;
      locale0.getUnicodeLocaleAttributes();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = 1.0E-4;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 5;
      SparseInstance sparseInstance0 = new SparseInstance(1.0E-4, doubleArray0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("Q%KY_R*kI^", arrayList1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jRip_NumericAntd0.value = (double) 5;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      jRip0.listOptions();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      assertTrue(jRip0.getUsePruning());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Stacking: No model built yet.";
      stringArray0[1] = "";
      stringArray0[2] = "\tUse Kononenko's MDL criterion.";
      stringArray0[3] = "-S";
      stringArray0[4] = "";
      stringArray0[5] = "@";
      JRip.main(stringArray0);
      jRip0.setUsePruning(false);
      jRip0.getFolds();
      jRip0.usePruningTipText();
      boolean boolean0 = jRip0.getUsePruning();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1049561813316413
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      locale0.getUnicodeLocaleAttributes();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(983);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("zq|jVJ{!g/~$4%u", arrayList0, 6);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("@relation", 11);
      instances0.setClass(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      arrayList0.add(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_RipperRule0.prune(instances0, true);
      try { 
        CostMatrix.parseMatlab(".bsi");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2250426710122255
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(983);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("0v(`^g5jx", arrayList0, 876);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.add((Instance) binarySparseInstance0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("\tUse error on probabilities instead of misclassification error for stopping criterion of LogitBoost.", 876);
      instances0.setClass(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      arrayList0.add(attribute0);
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.setConsequent(983);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      RuleStats ruleStats0 = new RuleStats();
      RuleStats ruleStats1 = new RuleStats();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Object object0 = jRip_NumericAntd0.copy();
      attribute0.equals(object0);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 876
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7689192975524
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(983);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("0v(`^g5jx", arrayList0, 876);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", 876);
      instances0.setClass(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-53.70045890521));
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      RuleStats ruleStats0 = new RuleStats();
      RuleStats ruleStats1 = new RuleStats();
      attribute0.equals(ruleStats1);
      jRip_RipperRule0.grow(instances0);
      Attribute attribute1 = null;
      try {
        attribute1 = new Attribute((String) null, "DJM;Vl13");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'J'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(741);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("B<O@o&Y~", 9);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass(Double.NaN, (Instances) null, Double.NaN, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("LBX", arrayList1, 5);
      Locale locale0 = Locale.PRC;
      locale0.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode2);
      locale0.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Attribute attribute0 = new Attribute("@data");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      MockRandom mockRandom0 = new MockRandom(0);
      AllFilter allFilter0 = new AllFilter();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jRip_NominalAntd0.splitData(instances0, 0.0, 1);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      BayesNet bayesNet10 = new BayesNet();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-11.0));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      RuleStats ruleStats0 = new RuleStats();
      RuleStats ruleStats1 = new RuleStats();
      Attribute attribute0 = new Attribute("\tWhether NOT check the error rate>=0.5\n\tin stopping criteria \t(default: check)");
      attribute0.equals(bayesNet1);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jRip_RipperRule0.setConsequent(1.0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("+D_l ", arrayList1, 4);
      jRip_RipperRule0.grow(instances0);
      assertEquals(1.0, jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.enumerateMeasures();
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("herein", "S(", protectedProperties0);
      Attribute attribute1 = attribute0.copy("S(");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'S{Mbfq[__njSd:E\"G");
      jRip_NumericAntd0.value = (-1.0);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      attribute0.addRelation((Instances) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("^");
      jRip_NumericAntd0.toString();
      linkedList0.pop();
      jRip0.getUsePruning();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(110);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4241956453213316
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      jRip0.setDebug(true);
      Utils.log2 = 6071.506;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "+iy,W4;;dUt4Q/_";
      stringArray0[2] = "";
      stringArray0[3] = "rb";
      stringArray0[4] = "";
      stringArray0[5] = "\nNumber of Rules : ";
      stringArray0[6] = "";
      stringArray0[7] = "I_|Go#q8c~hRO";
      stringArray0[8] = "Zf[rc>,{1163";
      JRip.main(stringArray0);
      jRip0.getRevision();
      jRip0.getOptions();
      jRip0.enumerateMeasures();
      jRip0.getMinNo();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("g6^nOEC2][J^/;m**;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // g6^nOEC2][J^/;m**; not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      jRip_NumericAntd0.splitData(instances0, 2, 2406.859279357803);
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4553949936248007
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("c:,L7R\"");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip0.getTechnicalInformation();
      jRip_NominalAntd0.value = 492.8;
      bayesNet0.measureMDLScore();
      AbstractClassifier.makeCopies(bayesNet0, 11);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip_NominalAntd0.covers(sparseInstance0);
      JRip jRip1 = new JRip();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(741);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("B<O@o&Y~", 9);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(983);
      Instances instances0 = new Instances("zq|jVJ{!g4%u", arrayList1, 6);
      instances0.add((Instance) binarySparseInstance0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) null, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Integer integer0 = new Integer(9);
      instances0.lastIndexOf(integer0);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list0, locale_FilteringMode2);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList4, (Collection<String>) list0, locale_FilteringMode1);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getDebug();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(983);
      String string0 = "zq|jVJ{!g4%u";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("zq|jVJ{!g4%u", arrayList0, 6);
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass(983.0, instances0, 3167.8220489976716, 6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      linkedList0.removeLastOccurrence(locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(".@XGJxxwFY`jczUD`K", arrayList1, 3);
      attribute0.copy((String) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "numeric");
      DenseInstance denseInstance0 = new DenseInstance(20);
      jRip_NumericAntd0.covers(denseInstance0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add((String) null);
      jRip_NumericAntd0.toString();
      linkedList1.pop();
      System.setCurrentTimeMillis(1);
      jRip0.getUsePruning();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(3713);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5280883009539779
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[5];
      intArray0[0] = 108;
      intArray0[1] = 1425;
      intArray0[2] = 108;
      intArray0[3] = 474;
      intArray0[4] = 108;
      jRip0.setCheckErrorRate(false);
      jRip0.setMinNo((-886.0593286661));
      jRip0.getOptions();
      jRip0.getOptions();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Locale.getISOLanguages();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-56));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 5);
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode3);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list3 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list2, locale_FilteringMode4);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list3);
      Attribute attribute0 = new Attribute("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 2009.24557, 495.1294136);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      ArrayList<String> arrayList3 = new ArrayList<String>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, true);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      locale0.getUnicodeLocaleAttributes();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(983);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      System.setCurrentTimeMillis(350L);
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("", linkedList0, 146);
      attribute0.indexOfValue("");
      linkedList0.pollLast();
      Attribute attribute1 = attribute0.copy("");
      Utils.log2 = 0.0;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      jRip_NumericAntd0.value = (double) 1;
      linkedList0.add("date");
      jRip_NumericAntd0.toString();
      linkedList0.pop();
      jRip0.getUsePruning();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Running offline - unable to display available or all package information", arrayList0, 79);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      properties0.compute(jRip_NumericAntd1, biFunction0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("^");
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) linkedList0, locale_FilteringMode0);
      Locale locale0 = Locale.KOREAN;
      locale0.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList5 = new ArrayList<String>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      boolean boolean0 = jRip0.getUsePruning();
      assertTrue(boolean0);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 5);
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode2);
      locale0.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set1, locale_FilteringMode3);
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList4);
      Attribute attribute0 = new Attribute("import weka.core.Capabilities;\n");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" => import weka.core.Capabilities;\n=", string0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      ArrayList<String> arrayList5 = new ArrayList<String>();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 5);
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode3);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list2, locale_FilteringMode4);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      BayesNet bayesNet0 = new BayesNet();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      Attribute attribute0 = new Attribute("JRIP: No model built yet.");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int[] intArray0 = new int[0];
      SparseInstance sparseInstance0 = new SparseInstance(822.1, doubleArray0, intArray0, 3);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance2);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(boolean0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      BayesNet bayesNet10 = new BayesNet();
      BayesNet bayesNet11 = new BayesNet();
      BayesNet bayesNet12 = new BayesNet();
      BayesNet bayesNet13 = new BayesNet();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers((Instance) null);
      Attribute attribute0 = new Attribute("H_g2O,", 687);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.171659610384074
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.toXMLBIF03();
      jRip0.setMinNo(5602.658970565287);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = bayesNet0.m_Instances;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(linkedList0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-830.87);
      doubleArray0[1] = (-830.87);
      doubleArray0[2] = (-830.87);
      doubleArray0[3] = (-830.87);
      SparseInstance sparseInstance0 = new SparseInstance((-830.87), doubleArray0);
      JRip jRip1 = new JRip();
      jRip1.toString();
      JRip jRip2 = new JRip();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      jRip2.globalInfo();
      Attribute attribute0 = new Attribute("", "");
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(sparseInstance0);
      jRip2.getCapabilities();
      jRip0.debugTipText();
      assertEquals(5602.658970565287, jRip0.getMinNo(), 0.01);
      
      jRip_NominalAntd0.getCover();
      jRip1.getSeed();
      jRip2.getDebug();
      jRip1.checkErrorRateTipText();
      String string0 = jRip1.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.3080561808079394
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("herein", "S(", protectedProperties0);
      Attribute attribute1 = attribute0.copy("S(");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("^");
      jRip_NumericAntd0.toString();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      jRip_NumericAntd0.covers(sparseInstance0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.covers(sparseInstance0);
      JRip jRip1 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      Instances instances0 = decisionTable3.m_theInstances;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2261289670319746
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", "", protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      properties0.put(jRip_NominalAntd1, jRip_NominalAntd0);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd2 = jRip0.new NominalAntd(attribute0);
      BallNode ballNode0 = new BallNode(4);
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-2942.34), doubleArray0);
      boolean boolean0 = jRip_NominalAntd2.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd2.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd2.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(boolean0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd2.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd2.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      Instances instances0 = null;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.hasAntds();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2085716838811678
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis((-1627L));
      JRip jRip0 = new JRip();
      jRip0.seedTipText();
      Attribute attribute0 = new Attribute(" is ignored. It is found in initial network but not in data set.", 8);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.cover = (double) 2;
      jRip_NominalAntd0.getAccu();
      jRip_NominalAntd0.getRevision();
      jRip0.checkErrorRateTipText();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = 4;
      intArray0[5] = 1;
      intArray0[6] = 2;
      intArray0[7] = 2;
      intArray0[8] = 2;
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "real";
      stringArray0[2] = "8118";
      stringArray0[3] = "string";
      stringArray0[4] = ".arff";
      stringArray0[5] = "@end";
      stringArray0[6] = "date";
      stringArray0[7] = "@data";
      stringArray0[8] = "@attribute";
      jRip0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(intArray0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      double double0 = jRip0.getMinNo();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      bayesNet7.setEstimator(bayesNetEstimator0);
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      BayesNet bayesNet10 = new BayesNet();
      JRip jRip0 = new JRip();
      String string0 = jRip0.foldsTipText();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      Attribute attribute0 = new Attribute(".arff", (-1528));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd1.getAttr();
      RuleStats ruleStats0 = new RuleStats();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) (-319);
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 2;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1487.77), doubleArray0, (int[]) null, Integer.MIN_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(linkedList0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(983);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("zq|jVJ{!g4%u", arrayList2, 6);
      instances0.add((Instance) binarySparseInstance0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList4, (Collection<String>) null, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode2);
      ArrayList<Locale.LanguageRange> arrayList5 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) null, locale_FilteringMode3);
      ArrayList<Locale.LanguageRange> arrayList6 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0);
      Attribute attribute0 = new Attribute(".arff");
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 0.25, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 5);
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list2);
      Locale.lookupTag(linkedList0, (Collection<String>) null);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list2, locale_FilteringMode3);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list2, locale_FilteringMode4);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list2);
      Attribute attribute0 = new Attribute("", list1, 5);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
      
      jRip_NominalAntd0.splitData(instances0, 2, (-1516.382));
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "275L<-<d");
      stringArray0[0] = "/Ga8o#0?LM'47y";
      stringArray0[1] = "";
      stringArray0[2] = "-N";
      AbstractClassifier.makeCopy(jRip0);
      stringArray0[3] = "A*B\n";
      stringArray0[4] = "";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.3469992135645263
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jRip0.setOptions(stringArray0);
      assertEquals(11, stringArray0.length);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(741);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Cannot handle unknown attribute type '";
      stringArray0[1] = "-Hg]^P=:al";
      stringArray0[2] = "_ Q{PE^=K{9A6eVta";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "An Efficient Hybrid Conjugate Gradient Method for Unconstrained Optimization";
      stringArray0[6] = "weka.core.neighboursearch.balltrees.TopDownConstructor";
      stringArray0[7] = "SDOi2Y|1D+klP*F";
      JRip.main(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers(sparseInstance0);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      DecisionTable decisionTable5 = new DecisionTable();
      Instances instances0 = decisionTable3.m_theInstances;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains("-Hg]^P=:al"));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("115-123", 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1229.5195497784543;
      doubleArray0[1] = 1229.5195497784543;
      doubleArray0[2] = 1229.5195497784543;
      doubleArray0[3] = 1229.5195497784543;
      doubleArray0[4] = 1229.5195497784543;
      SparseInstance sparseInstance0 = new SparseInstance(1229.5195497784543, doubleArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      String string0 = jRip0.optimizationsTipText();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("The number of optimization runs.", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("49CkIL.|l=bjwvi", linkedList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(2);
      assertEquals(2.0, jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("jX7V~*e&{4!p(:#", "2 H.");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(1140.598, doubleArray0);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertTrue(boolean0);
      
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals("8118", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      
      jRip0.setMinNo(0.0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip0.getCapabilities();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Al3{{~O|}.e\"#Ab", protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAccuRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.9826862655087885
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(983);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 876;
      Instances instances0 = new Instances("0v(`^g5jx", arrayList0, 876);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.add((Instance) binarySparseInstance0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", 876);
      instances0.setClass(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      arrayList0.add(attribute0);
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.setConsequent((-53.70045890521));
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      RuleStats ruleStats0 = new RuleStats();
      RuleStats ruleStats1 = new RuleStats();
      attribute0.equals(ruleStats1);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 876
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      BayesNet bayesNet10 = new BayesNet();
      BayesNet bayesNet11 = new BayesNet();
      JRip jRip0 = new JRip();
      jRip0.setDebug(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers((Instance) null);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertTrue(boolean0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", (-1002));
      attribute0.equalsMsg("");
      jRip0.getSeed();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-63));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\nPruning the rule ...";
      stringArray0[1] = "I";
      Stacking stacking0 = new Stacking();
      Classifier[] classifierArray0 = new Classifier[7];
      classifierArray0[0] = (Classifier) stacking0;
      classifierArray0[1] = (Classifier) stacking0;
      Logistic logistic0 = new Logistic();
      classifierArray0[2] = (Classifier) logistic0;
      classifierArray0[3] = (Classifier) stacking0;
      BayesNet bayesNet0 = new BayesNet();
      classifierArray0[4] = (Classifier) bayesNet0;
      classifierArray0[5] = (Classifier) stacking0;
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      classifierArray0[6] = (Classifier) attributeSelectedClassifier0;
      stacking0.setClassifiers(classifierArray0);
      stacking0.getClassifier(6);
      AbstractClassifier.runClassifier(stacking0, stringArray0);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      Instances instances0 = decisionTable4.m_theInstances;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.321585437079472
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "R3Ex/xk,jH.E35yI'";
      jRip0.globalInfo();
      stringArray0[1] = "R3Ex/xk,jH.E35yI'";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      Attribute attribute0 = new Attribute("R3Ex/xk,jH.E35yI'", (List<String>) null, (-2057));
      attribute0.copy("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(2);
      jRip_NominalAntd0.maxInfoGain = (double) 1;
      Object object0 = jRip_RipperRule0.copy();
      attribute0.equalsMsg(object0);
      jRip_NominalAntd0.copy();
      jRip_NominalAntd0.value = (double) 0;
      attribute0.equals("R3Ex/xk,jH.E35yI'");
      jRip_NominalAntd0.getAttrValue();
      jRip_NominalAntd0.getMaxInfoGain();
      jRip0.minNoTipText();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("", (List<String>) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P,``0 ^sMr?H");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "integer");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P,``0 ^sMr?H");
      MockRandom mockRandom0 = new MockRandom();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("P,``0 ^sMr?H", protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("P,``0 ^sMr?H = ", string0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      jRip0.setMinNo(1315.62141158811);
      // Undeclared exception!
      try { 
        attribute0.parseDate(".bsi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only parse date values for date attributes!
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed(0L);
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      MockRandom mockRandom0 = new MockRandom(3147L);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 5);
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1);
      Locale.lookupTag(linkedList0, (Collection<String>) null);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode3);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list1, locale_FilteringMode4);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1);
      Attribute attribute0 = new Attribute("JRIP rules:\n===========\n\n");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      
      M5P m5P0 = new M5P();
      AbstractClassifier.runClassifier(m5P0, (String[]) null);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      int int0 = jRip0.getOptimizations();
      assertEquals(2, int0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(denseInstance0);
      boolean boolean0 = jRip_RipperRule0.covers(sparseInstance1);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(boolean0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 5);
      Locale locale0 = Locale.PRC;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode3);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list2);
      Attribute attribute0 = new Attribute("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 2009.24557, 495.1294136);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      ArrayList<String> arrayList3 = new ArrayList<String>();
      int int0 = jRip0.getOptimizations();
      assertEquals(2, int0);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(true);
      jRip0.checkErrorRateTipText();
      try { 
        jRip0.rulesetForOneClass(2.0, (Instances) null, 2910.07, (-2144.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 5);
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode3);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list3 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list2, locale_FilteringMode4);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list3);
      Attribute attribute0 = new Attribute("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 2009.24557, 495.1294136);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      String[] stringArray0 = new String[5];
      stringArray0[3] = ";NTDB1+5`m";
      stringArray0[1] = ";NTDB1+5`m";
      stringArray0[2] = ";NTDB1+5`m";
      stringArray0[3] = ";NTDB1+5`m";
      stringArray0[4] = ";NTDB1+5`m";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      BayesNet bayesNet10 = new BayesNet();
      BayesNet bayesNet11 = new BayesNet();
      bayesNet10.measureBDeuScore();
      BayesNet bayesNet12 = new BayesNet();
      bayesNet10.getEstimator();
      BayesNet bayesNet13 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = bayesNet12.getEstimator();
      bayesNet13.setEstimator(bayesNetEstimator0);
      BayesNet bayesNet14 = new BayesNet();
      BayesNet bayesNet15 = new BayesNet();
      BayesNet bayesNet16 = new BayesNet();
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = Environment.getSystemWide();
      Set<String> set0 = environment0.getVariableNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("Replace rule covers: ", list0, (-19));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.covers(sparseInstance0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALIAN;
      locale0.getUnicodeLocaleAttributes();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      BayesNet bayesNet10 = new BayesNet();
      BayesNet bayesNet11 = new BayesNet();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers((Instance) null);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The number of optimization runs.");
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("The number of optimization runs.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of optimization runs. not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      jRip_RipperRule0.hasAntds();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      AllFilter allFilter0 = new AllFilter();
      Filter.makeCopy(allFilter0);
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor1 = new MiddleOutConstructor();
      try { 
        middleOutConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      BayesNet bayesNet10 = new BayesNet();
      BayesNet bayesNet11 = new BayesNet();
      BayesNet bayesNet12 = new BayesNet();
      BayesNet bayesNet13 = new BayesNet();
      BayesNet bayesNet14 = new BayesNet();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertTrue(boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds((-9));
      MultiFilter multiFilter0 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter0.getFilter((-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }
}
