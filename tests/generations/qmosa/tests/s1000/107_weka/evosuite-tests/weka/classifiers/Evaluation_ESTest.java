/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 02:39:29 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Properties;
import java.util.Random;
import java.util.Stack;
import java.util.TimeZone;
import java.util.function.UnaryOperator;
import javax.imageio.metadata.IIOMetadataNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.InfoGainAttributeEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.IntervalEstimator;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.pmml.consumer.TreeModel;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.PART;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.REPTree;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ChebyshevDistance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.pmml.MiningSchema;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2639567569425716
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      instances0.randomize((Random) null);
      evaluation0.toClassDetailsString();
      evaluation1.areaUnderROC(46);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      evaluation0.m_SumPriorEntropy = 3474.716257514525;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      evaluation0.unweightedMicroFmeasure();
      objectArray0[1] = object1;
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      evaluation1.SFMeanEntropyGain();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(120);
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(2978);
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(0L);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      instances0.resampleWithWeights((Random) mockRandom0, booleanArray0);
      charArray0[0] = 'N';
      charArray0[1] = ' ';
      sparseInstance0.setMissing(2978);
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'N';
      intArray0[1] = (-3816);
      intArray0[2] = (int) 'N';
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(648, intArray0, 2978);
      instances0.add((Instance) sparseInstance0);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setNormalizeNumericClass(true);
      AbstractClassifier.makeCopy(multilayerPerceptron0);
      evaluation0.num2ShortID(78, charArray0, 0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelation("setOptions");
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = null;
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) naiveBayes0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.091159976929951
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SMOreg sMOreg0 = new SMOreg();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      MockRandom mockRandom0 = new MockRandom(73L);
      evaluation0.addNumericTrainClass(3.0, 3.0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.numFalsePositives(1);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9aGs:");
      NaiveBayes naiveBayes1 = new NaiveBayes();
      AbstractClassifier.makeCopy(naiveBayes0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.falsePositiveRate((-1));
      double double0 = evaluation0.m_SumClassPredicted;
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      evaluation0.truePositiveRate(1);
      evaluation0.weightedRecall();
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4153257998983673
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      testInstances0.setHandler(naiveBayes0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm((-1127.787245234363));
      naiveBayesMultinomialText0.getStopwords();
      MockFile mockFile0 = new MockFile("@relation");
      mockFile0.delete();
      PipedReader pipedReader0 = new PipedReader();
      PipedReader pipedReader1 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      IBk iBk0 = new IBk((-1));
      iBk0.setDebug(false);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setSeed((-4161));
      multilayerPerceptron0.setReset(false);
      Instances instances1 = new Instances(instances0, 2);
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation1.falseNegativeRate(4);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      evaluation2.weightedTruePositiveRate();
      evaluation0.kappa();
      evaluation2.areaUnderPRC(1);
      // Undeclared exception!
      try { 
        evaluation1.truePositiveRate(Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.173719770443147
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[4] = ",{U";
      stringArray0[5] = " seconds";
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " seconds");
      TestInstances testInstances0 = new TestInstances();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MultilayerPerceptron multilayerPerceptron1 = new MultilayerPerceptron();
      multilayerPerceptron0.setReset(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",{U");
      multilayerPerceptron0.listOptions();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      SMO sMO0 = new SMO();
      Classifier classifier0 = AbstractClassifier.makeCopy(sMO0);
      CSVLoader cSVLoader0 = new CSVLoader();
      Instances instances0 = testInstances0.generate(".dat");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 1000.0;
      evaluation0.updateMargins(doubleArray0, 0, (-1.0));
      evaluation0.totalCost();
      try { 
        evaluation0.evaluateModel(classifier0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3215350893894167
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CoverTree coverTree0 = new CoverTree();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedAreaUnderROC();
      Instances instances1 = new Instances(instances0, (-2149));
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      evaluation0.m_SumSqrClass = 674.95806735032;
      TreeModel treeModel0 = new TreeModel(iIOMetadataNode0, instances0, (MiningSchema) null);
      instances1.indexOf(treeModel0);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setNormalizeNumericClass(false);
      MultilayerPerceptron multilayerPerceptron1 = new MultilayerPerceptron();
      MultilayerPerceptron multilayerPerceptron2 = new MultilayerPerceptron();
      multilayerPerceptron2.setReset(false);
      multilayerPerceptron2.listOptions();
      MultilayerPerceptron multilayerPerceptron3 = new MultilayerPerceptron();
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation1.weightedAreaUnderPRC();
      Evaluation.getGlobalInfo(treeModel0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDirectory();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      textDirectoryLoader0.getOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "setUseSupervisedDiscretization");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      double double0 = 0.9413597527452795;
      DenseInstance denseInstance0 = new DenseInstance((-6.414583597022144), doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9603555993014674
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IBk iBk0 = new IBk();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(2);
      ArffLoader arffLoader0 = new ArffLoader();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      evaluation1.precision(1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.528788974667134
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IBk iBk0 = new IBk();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 6.7;
      doubleArray0[1] = 240.514828;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = 1648.0;
      doubleArray0[4] = 240.514828;
      doubleArray0[5] = 6.7;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = 6.7;
      doubleArray0[8] = (double) 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1263.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      LinearRegression linearRegression0 = new LinearRegression();
      SelectedTag selectedTag0 = linearRegression0.getAttributeSelectionMethod();
      iBk0.setDistanceWeighting(selectedTag0);
      binarySparseInstance1.setWeight(1263.0);
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix1);
      evaluation0.toSummaryString("@relation", true);
      evaluation0.precision((-1338));
      evaluation0.falseNegativeRate((-1338));
      evaluation0.addNumericTrainClass(2466.6310991, 480.0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.numTruePositives(0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6413051214511754
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setHandler((CapabilitiesHandler) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.priorEntropy();
      double double0 = evaluation0.m_SumErr;
      evaluation0.trueNegativeRate(1073741824);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.numFalsePositives(23);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.9940302114769565, doubleArray0);
      binarySparseInstance0.setWeight((-645.7));
      evaluation1.areaUnderPRC(18);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.numTrueNegatives(0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.467046800438269
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(97);
      evaluation0.numFalseNegatives(115);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      IBk iBk0 = new IBk((-1226));
      iBk0.setDebug(false);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setSeed(100);
      multilayerPerceptron0.setReset(false);
      Instances instances1 = new Instances(instances0, 113);
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.falseNegativeRate(115);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      evaluation3.weightedTruePositiveRate();
      evaluation0.kappa();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-4161));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0734736492244985
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[4] = ",{U";
      stringArray0[5] = " seconds";
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " seconds");
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom(621L);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      AbstractClassifier.makeCopy(logitBoost0);
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.numInstances();
      evaluation0.toClassDetailsString(".ANP@t<>85]1+V09N_(");
      PART pART0 = new PART();
      MockRandom mockRandom1 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) pART0, instances0, (-1347), (Random) mockRandom1, (Object[]) stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3127191813662296
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(120);
      SparseInstance sparseInstance0 = new SparseInstance(2978);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.add((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      evaluation0.priorEntropy();
      evaluation0.trueNegativeRate(280);
      Stacking stacking0 = new Stacking();
      evaluation0.equals(stacking0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4486869174985209
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile1 = null;
      String string0 = "Rq;Q7(HWi`wm'";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Rq;Q7(HWi`wm'");
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile2, (String) null);
      byte[] byteArray0 = new byte[4];
      instances0.toArray();
      byte byte0 = (byte) (-128);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.updateStatsForPredictor(2.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0353658399499057
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CoverTree coverTree0 = new CoverTree();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedAreaUnderROC();
      Instances instances1 = new Instances(instances0, (-2149));
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      evaluation0.m_SumSqrClass = 674.95806735032;
      Evaluation evaluation2 = new Evaluation(instances0);
      boolean boolean0 = false;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(false);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-1518.386669340364));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.687842675685304
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumErr;
      evaluation0.numFalseNegatives(115);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 97;
      doubleArray0[1] = (double) 115;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 240.514828;
      evaluation1.m_Incorrect = 4.0;
      doubleArray0[4] = 1648.0;
      doubleArray0[6] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1648.0, doubleArray0);
      binarySparseInstance0.setWeight(97.0);
      Stack<LMT> stack0 = new Stack<LMT>();
      Stack<LMT> stack1 = new Stack<LMT>();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      CostMatrix costMatrix0 = new CostMatrix(0);
      costMatrix0.initialize();
      evaluation1.weightedTrueNegativeRate();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.relativeAbsoluteError();
      Evaluation evaluation3 = new Evaluation(instances0, costMatrix0);
      evaluation1.falseNegativeRate(115);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      evaluation0.weightedTruePositiveRate();
      try { 
        evaluation3.crossValidateModel((Classifier) multiClassClassifierUpdateable0, instances0, 2, (Random) null, (Object[]) multiClassClassifierUpdateable0.TAGS_METHOD);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.975506102723865
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IBk iBk0 = new IBk();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      Instances instances1 = new Instances(instances0, 16);
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      instances0.indexOf(chebyshevDistance0);
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.trueNegativeRate(16);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.numFalsePositives(1);
      evaluation0.weightedFalseNegativeRate();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      evaluation0.falseNegativeRate(3247);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      evaluation0.weightedTruePositiveRate();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      try { 
        evaluation0.crossValidateModel((Classifier) randomCommittee0, (Instances) null, (-94), (Random) null, (Object[]) multiClassClassifierUpdateable0.TAGS_METHOD);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7158498682448617
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalseNegatives((-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(6);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = 115.0;
      Evaluation.k_MarginResolution = (-2);
      doubleArray0[6] = 115.0;
      Evaluation evaluation3 = null;
      try {
        evaluation3 = new Evaluation(instances0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6798088033056358
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[4] = ",{U";
      stringArray0[5] = " seconds";
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[5];
      intArray0[0] = 2853;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " seconds");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      intArray0[1] = 2853;
      evaluation0.SFPriorEntropy();
      evaluation0.KBMeanInformation();
      evaluation0.SFMeanEntropyGain();
      evaluation0.getDiscardPredictions();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.weightedPrecision();
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6730366045635394
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(97);
      evaluation0.numFalseNegatives(97);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 97;
      instances0.randomize((Random) null);
      Float float0 = new Float((double) 97);
      evaluation1.getRevision();
      evaluation1.areaUnderROC(46);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      evaluation0.m_SumPriorEntropy = 3474.716257514525;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      evaluation0.unweightedMicroFmeasure();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.SFSchemeEntropy();
      evaluation2.SFPriorEntropy();
      evaluation0.SFMeanPriorEntropy();
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.760876583000687
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(97);
      evaluation0.numFalseNegatives(115);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("{'\"W", ".dat");
      sVMLightLoader0.setSource(file0);
      sVMLightLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".dat");
      evaluation1.fMeasure(4);
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Logistic logistic0 = new Logistic();
      logistic0.getOptions();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) logistic0, instances0, objectArray0);
      evaluation0.getClassPriors();
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9509826645263395
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SMOreg sMOreg0 = new SMOreg();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      MockRandom mockRandom0 = new MockRandom((-717L));
      evaluation0.addNumericTrainClass(2009.88880421041, 2009.88880421041);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.numFalsePositives((-1938));
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      NaiveBayes naiveBayes1 = new NaiveBayes();
      AbstractClassifier.makeCopy(sMOreg0);
      evaluation0.falsePositiveRate(0);
      double double0 = evaluation0.m_SumClassPredicted;
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "setOptions");
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.16678027408837
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      testInstances0.setNumRelationalString((-2));
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getCapabilities();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.setPriors(instances1);
      double double1 = evaluation0.m_SumErr;
      double double2 = evaluation0.m_TotalCoverage;
      evaluation0.numTruePositives((-1));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Object object0 = new Object();
      Object object1 = new Object();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.falseNegativeRate(1540);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SimpleKMeans simpleKMeans1 = new SimpleKMeans();
      simpleKMeans1.getClusterCentroids();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3936571033892298
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(120);
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(2978);
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = ' ';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'Y';
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setNormalizeNumericClass(false);
      MultilayerPerceptron multilayerPerceptron1 = new MultilayerPerceptron();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(59, false, false);
      AbstractClassifier.makeCopy(multilayerPerceptron0);
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.falsePositiveRate(0);
      evaluation0.numTrueNegatives(24);
      evaluation0.toMatrixString(".arff");
      evaluation0.truePositiveRate((-1727386728));
      evaluation0.numTruePositives(648);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = (-2127);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("[fx");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)72;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      try { 
        Evaluation.handleCostOption("[fx", (-2127));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFFFD2\u0001H\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[4] = ",{U";
      stringArray0[5] = ",{U";
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[5];
      intArray0[0] = 2853;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      intArray0[1] = 2853;
      intArray0[2] = 5;
      MockFile mockFile0 = new MockFile("wG,y$8?c*g", "@relation");
      MockFile mockFile1 = new MockFile(mockFile0, "wG,y$8?c*g");
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      AbstractClassifier.makeCopy((Classifier) null);
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.getClassPriors();
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.399597183531169
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      int int0 = 120;
      textDirectoryLoader0.setRetrieval(120);
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(2978);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = ' ';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'Y';
      instances0.add((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation1.SFPriorEntropy();
      evaluation1.SFMeanPriorEntropy();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction((Classifier) additiveRegression0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9350037486674605
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CoverTree coverTree0 = new CoverTree();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      Instances instances1 = new Instances(instances0, (-814));
      instances0.indexOf(coverTree0);
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.trueNegativeRate(16);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.numFalsePositives((-2));
      evaluation0.weightedFalseNegativeRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.getHeader();
      evaluation0.numTrueNegatives(2233);
      evaluation0.correct();
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1471999698851483
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getModelFile();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".arff";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@relation";
      stringArray0[3] = ".arff";
      stringArray0[4] = "@data";
      stringArray0[5] = "@data";
      AbstractClassifier.runClassifier(serializedClassifier0, stringArray0);
      LinearRegression linearRegression1 = new LinearRegression();
      linearRegression1.setDebug(true);
      AbstractClassifier.makeCopy(serializedClassifier0);
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.meanPriorAbsoluteError();
      System.setCurrentTimeMillis(0L);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.meanAbsoluteError();
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.7285904213955003
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setHandler(naiveBayes0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      Utils.log2 = (double) (-2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "o?Eiepc}m/`BXaOC");
      evaluation1.priorEntropy();
      evaluation0.errorRate();
      evaluation0.trueNegativeRate((byte)4);
      evaluation0.weightedFalsePositiveRate();
      evaluation1.numFalsePositives(18);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (byte)4;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 18;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)4, doubleArray0);
      binarySparseInstance0.setWeight((byte)4);
      evaluation1.areaUnderPRC(18);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.numTrueNegatives((-1));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2692404415462466
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(120);
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(2978);
      Version.MAJOR = 107;
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = ' ';
      PipedReader pipedReader0 = new PipedReader();
      PipedReader pipedReader1 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader1);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setReset(true);
      multilayerPerceptron0.listOptions();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.setDebug(true);
      AbstractClassifier.makeCopy(linearRegression0);
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.setPriors(instances0);
      evaluation0.meanPriorAbsoluteError();
      System.setCurrentTimeMillis(1L);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.meanAbsoluteError();
      evaluation0.pctCorrect();
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.710290363123783
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setHandler(naiveBayes0);
      instances0.indexOf(evaluation0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.priorEntropy();
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      evaluation0.errorRate();
      evaluation0.trueNegativeRate((byte)0);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.numFalsePositives((byte)0);
      evaluation0.SFPriorEntropy();
      ArffLoader arffLoader0 = new ArffLoader();
      MockFile mockFile0 = new MockFile(".arff", "getDistanceWeighting");
      arffLoader0.setFile(mockFile0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-3183.71258002362);
      doubleArray0[2] = (-1046.28);
      doubleArray0[3] = 0.0;
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getNextInstance((Instances) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8524246485578795
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(120);
      SMOreg sMOreg0 = new SMOreg();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      MockRandom mockRandom0 = new MockRandom(0L);
      evaluation0.addNumericTrainClass(507.1, 2);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double double0 = evaluation0.numFalsePositives((-180));
      assertEquals(0.0, double0, 0.01);
      
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "setNominalToBinaryFilter");
      NaiveBayes naiveBayes0 = new NaiveBayes();
      AbstractClassifier.makeCopy(sMOreg0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falsePositiveRate(120);
      double double1 = evaluation0.m_SumClassPredicted;
      double double2 = evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " (lowValue = ");
      evaluation1.truePositiveRate(473);
      double double3 = evaluation1.weightedPrecision();
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = evaluation0.falsePositiveRate(120);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      double double5 = evaluation1.numFalsePositives(2);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.7671339779472772
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setCharSet("Using model trees for classification");
      evaluation0.areaUnderROC(97);
      double double0 = evaluation0.numFalseNegatives(97);
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 97;
      instances0.randomize((Random) null);
      evaluation1.areaUnderROC(97);
      String string0 = evaluation1.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      evaluation1.areaUnderROC(46);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      instances0.compactify();
      evaluation0.m_SumPriorEntropy = 3474.716257514525;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      objectArray0[1] = object1;
      evaluation0.makeDistribution(Double.NaN);
      MockRandom mockRandom0 = new MockRandom(0L);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getTechnicalInformation();
      simpleKMeans0.getClusterCentroids();
      double double2 = evaluation1.precision((-2264));
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.rootMeanPriorSquaredError();
      assertEquals(double3, double1, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.661034146408792
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(97);
      evaluation0.numFalseNegatives(115);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("{'\"W", ".dat");
      sVMLightLoader0.setSource(file0);
      sVMLightLoader0.reset();
      double double0 = evaluation0.numFalsePositives(97);
      Integer integer0 = new Integer(15);
      NaiveBayes naiveBayes0 = new NaiveBayes();
      instances0.remove((Object) naiveBayes0);
      double double1 = evaluation1.m_MissingClass;
      double double2 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.numInstances();
      assertEquals(0.0, double3, 0.01);
      
      IBk iBk0 = new IBk();
      TimeZone.getAvailableIDs();
      AbstractClassifier.makeCopy(iBk0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double4 = evaluation2.numTrueNegatives(34);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = evaluation0.trueNegativeRate(2024);
      assertEquals(double5, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6825210748201953
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(120);
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(2978);
      Version.MAJOR = 107;
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = ' ';
      PipedReader pipedReader0 = new PipedReader();
      PipedReader pipedReader1 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader1);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setReset(true);
      multilayerPerceptron0.listOptions();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.setDebug(true);
      AbstractClassifier.makeCopy(linearRegression0);
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.meanPriorAbsoluteError();
      System.setCurrentTimeMillis(1L);
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.meanAbsoluteError();
      evaluation0.addNumericTrainClass((-3273.9592), 815.0);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double double2 = evaluation0.numTrueNegatives(37);
      assertEquals(0.0, double2, 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.090486610958727
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      CoverTree coverTree0 = new CoverTree();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      Instances instances1 = new Instances(instances0, (-1));
      try { 
        evaluation0.evaluateModelOnce((Classifier) naiveBayes0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.878675371892228
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(120);
      SparseInstance sparseInstance0 = new SparseInstance(2978);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.add((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setReset(false);
      multilayerPerceptron0.listOptions();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.setDebug(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) 0, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7037935070525467
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CoverTree coverTree0 = new CoverTree();
      CostMatrix costMatrix0 = new CostMatrix(6);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      doubleArray0[6] = (-1.0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.m_SumSqrPredicted = (-2.0);
      CSVLoader cSVLoader0 = new CSVLoader();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      AbstractClassifier.makeCopy(multiClassClassifierUpdateable0);
      double double0 = evaluation0.numTrueNegatives(3);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8978141278730893
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(97);
      NaiveBayes naiveBayes0 = new NaiveBayes();
      CoverTree coverTree0 = new CoverTree();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      try { 
        evaluation1.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.7802413197359384
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CoverTree coverTree0 = new CoverTree();
      TestInstances testInstances0 = new TestInstances();
      ZeroR zeroR0 = new ZeroR();
      FileSystemHandling.shouldAllThrowIOExceptions();
      zeroR0.getCapabilities();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      ZeroR zeroR1 = new ZeroR();
      zeroR0.setDebug(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      NaiveBayesUpdateable naiveBayesUpdateable1 = new NaiveBayesUpdateable();
      naiveBayesUpdateable1.getTechnicalInformation();
      Evaluation.getGlobalInfo(zeroR0);
      MockRandom mockRandom0 = new MockRandom((-1));
      evaluation0.addNumericTrainClass((-2), 1.0E75);
      evaluation0.fMeasure(400);
      evaluation0.recall(130);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      AbstractClassifier.runClassifier(naiveBayesUpdateable1, testInstances0.DEFAULT_WORDS);
      multilayerPerceptron0.listOptions();
      AbstractClassifier.makeCopy(naiveBayesMultinomialUpdateable0);
      AbstractClassifier.makeCopy(naiveBayesMultinomialUpdateable0);
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.weightedPrecision();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-417), charArray0, 400);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2282791081380275
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      assertTrue(evaluation1.equals((Object)evaluation0));
      
      testInstances0.setHandler(naiveBayesUpdateable0);
      instances0.indexOf(evaluation0);
      Evaluation evaluation2 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesUpdateable naiveBayesUpdateable1 = new NaiveBayesUpdateable();
      NaiveBayesUpdateable naiveBayesUpdateable2 = new NaiveBayesUpdateable();
      naiveBayesUpdateable0.getTechnicalInformation();
      Evaluation.getGlobalInfo(naiveBayesUpdateable0);
      MockRandom mockRandom0 = new MockRandom();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      AbstractClassifier.runClassifier(naiveBayesUpdateable1, testInstances0.DEFAULT_WORDS);
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      Classifier classifier0 = AbstractClassifier.makeCopy(zeroR0);
      CSVLoader cSVLoader0 = new CSVLoader();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      String string0 = Evaluation.getGlobalInfo(classifier0);
      assertEquals("\nSynopsis for weka.classifiers.rules.ZeroR:\n\nClass for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      int int0 = (-1152);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)17;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedOutputStream0.connect(pipedInputStream0);
      byteArray0[4] = (byte)105;
      pipedOutputStream0.flush();
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte)122;
      // Undeclared exception!
      try { 
        pipedOutputStream0.write(byteArray0, 115, (-2886));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(97);
      evaluation0.numFalseNegatives(115);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 6.7;
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      int int0 = (-1953);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1906.538455, (int[]) null, (-1953));
      boolean boolean0 = true;
      PART pART0 = new PART();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) pART0, (Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.2883310013655076
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      int int1 = 4;
      textDirectoryLoader0.setRetrieval(4);
      double double0 = (-6.414583597022144);
      double[] doubleArray0 = new double[3];
      try { 
        evaluation0.evaluateModelOnce((Classifier) naiveBayes0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.517734194785151
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(97);
      double double0 = evaluation0.numFalseNegatives(115);
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      int[] intArray0 = new int[5];
      intArray0[0] = 97;
      intArray0[1] = 97;
      intArray0[2] = 115;
      intArray0[3] = 97;
      intArray0[4] = 115;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0, intArray0, 97);
      instances0.add((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      Evaluation.makeOptionString((Classifier) null, true);
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0182512322551083
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CoverTree coverTree0 = new CoverTree();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      Instances instances1 = new Instances(instances0, (-814));
      instances0.indexOf(coverTree0);
      double double1 = evaluation0.m_SumKBInfo;
      double double2 = evaluation0.trueNegativeRate(16);
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.weightedFalsePositiveRate();
      evaluation0.numFalsePositives((-2));
      evaluation0.weightedFalseNegativeRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double3 = evaluation1.weightedAreaUnderPRC();
      assertEquals(double3, double0, 0.01);
      
      evaluation0.getHeader();
      double double4 = evaluation0.numTrueNegatives(2233);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.31140819565015
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setHandler(naiveBayes0);
      instances0.indexOf(naiveBayes0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      double double1 = evaluation0.errorRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation1.trueNegativeRate((-2));
      evaluation1.m_SumAbsErr = 0.0;
      SystemInUtil.addInputLine(".arff");
      double double2 = evaluation1.m_MaxTarget;
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      instances0.spliterator();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double3 = evaluation1.m_SumKBInfo;
      double double4 = evaluation1.falseNegativeRate((-1));
      assertEquals(0.0, double4, 0.01);
      
      String string0 = evaluation2.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.2855007254987325
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CoverTree coverTree0 = new CoverTree();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Instances instances1 = new Instances(instances0, (-2149));
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      testInstances0.setNumRelationalNominal((-2149));
      evaluation0.m_SumSqrClass = 674.95806735032;
      TreeModel treeModel0 = new TreeModel(iIOMetadataNode0, instances0, (MiningSchema) null);
      instances1.indexOf(treeModel0);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setNormalizeNumericClass(false);
      MultilayerPerceptron multilayerPerceptron1 = new MultilayerPerceptron();
      int int0 = 19;
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(19, false, false);
      AbstractClassifier.makeCopy(simpleLogistic0);
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.falsePositiveRate(24);
      evaluation0.numTrueNegatives(2207);
      evaluation1.toMatrixString("@relation");
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.8351525789938434
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      ZeroR zeroR0 = new ZeroR();
      FileSystemHandling.shouldAllThrowIOExceptions();
      zeroR0.getCapabilities();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      infoGainAttributeEval0.getCapabilities();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getCapabilities();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      evaluation0.setPriors(instances0);
      Float float0 = new Float(0.9);
      double double0 = evaluation0.m_SumErr;
      double double1 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.m_MinTarget;
      double double3 = evaluation0.pctUnclassified();
      double double4 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double4, double3, 0.01);
      
      double double5 = evaluation0.numTruePositives(487);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.110456245088317
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      textDirectoryLoader0.getOptions();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@data";
      stringArray0[1] = "getErrorOnProbabilities";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@data";
      stringArray0[4] = ".arff";
      stringArray0[5] = ".bsi";
      stringArray0[6] = ".bsi";
      textDirectoryLoader0.setOptions(stringArray0);
      evaluation0.numFalseNegatives(115);
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 0.0;
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      double double1 = new Float((double) 115);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalsePositives(20);
      double double2 = evaluation1.weightedFalseNegativeRate();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.getHeader();
      evaluation0.numTrueNegatives(90);
      double double3 = evaluation2.SFEntropyGain();
      double double4 = evaluation1.weightedTrueNegativeRate();
      assertNotEquals(double4, double3, 0.01);
      
      double double5 = evaluation0.KBRelativeInformation();
      assertEquals(double5, double2, 0.01);
      
      evaluation0.numTrueNegatives(34);
      double double6 = evaluation2.falseNegativeRate(20);
      double double7 = evaluation1.pctIncorrect();
      assertNotEquals(double7, double6, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.0728820279227937
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      testInstances0.setHandler(naiveBayes0);
      instances0.indexOf(evaluation0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation1.m_Unclassified;
      evaluation1.errorRate();
      UnaryOperator.identity();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(18, (char[]) null, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.714559435468734
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CoverTree coverTree0 = new CoverTree();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedAreaUnderROC();
      Instances instances1 = new Instances(instances0, (-2149));
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      evaluation0.m_SumSqrClass = 674.95806735032;
      TreeModel treeModel0 = new TreeModel(iIOMetadataNode0, instances0, (MiningSchema) null);
      instances1.indexOf(treeModel0);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setNormalizeNumericClass(false);
      Object object0 = new Object();
      Object object1 = new Object();
      evaluation0.unweightedMicroFmeasure();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation0.falseNegativeRate(16);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      // Undeclared exception!
      try { 
        evaluation1.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.650671793514603
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      testInstances0.setHandler(naiveBayes0);
      instances0.indexOf(evaluation0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation1.m_Unclassified;
      evaluation1.errorRate();
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      evaluation0.trueNegativeRate((-1));
      SystemInUtil.addInputLine("4N@^eb~yU<p[Sj");
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      instances0.spliterator();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation1.falseNegativeRate((-1));
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      PipedInputStream pipedInputStream0 = new PipedInputStream(456);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 91);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.962977182578379
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.numFalseNegatives(115);
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (-0.14638014443157527);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      double double1 = evaluation0.trueNegativeRate(97);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.numFalsePositives(20);
      evaluation0.weightedFalseNegativeRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getHeader();
      evaluation1.numTrueNegatives(20);
      double double2 = evaluation1.weightedTrueNegativeRate();
      double double3 = evaluation1.KBRelativeInformation();
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation0.numTrueNegatives(2147483645);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.4963863904587136
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      CoverTree coverTree0 = new CoverTree();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      naiveBayesMultinomialText0.setMinWordFrequency(1263.0);
      stringArray0[0] = "@relation";
      stringArray0[1] = ".arff";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      
      evaluation0.SFSchemeEntropy();
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[5];
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      textDirectoryLoader0.setRetrieval(4);
      double double0 = (-6.414583597022144);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (-6.414583597022144);
      binarySparseInstance0.s_numericAfterDecimalPoint = 0;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.3015574568421027
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(97);
      double double0 = evaluation0.numFalseNegatives(115);
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[3] = Double.NaN;
      textDirectoryLoader0.setCharSet((String) null);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 6.7;
      doubleArray1[1] = (double) 115;
      doubleArray1[2] = 0.0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Evaluation evaluation2 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double double1 = evaluation0.precision(35);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.incorrect();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.184551445267297
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.numFalseNegatives(97);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Creating base classifiers");
      Evaluation evaluation1 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "author");
      instances0.toArray();
      textDirectoryLoader0.reset();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SystemInUtil.addInputLine("{Bi/7=3{\"))Jf?gi");
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      instances0.spliterator();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.falseNegativeRate((-1274));
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      evaluation1.sizeOfPredictedRegions();
      int int0 = 931;
      CostMatrix costMatrix0 = new CostMatrix(931);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.0423569973977633
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IBk iBk0 = new IBk();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-split-percentage <percentage>\n");
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelational(2853);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFMeanEntropyGain();
      double double2 = evaluation0.avgCost();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.5964432065194853
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[4] = ",{U";
      stringArray0[5] = " seconds";
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[5];
      intArray0[0] = 2853;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      intArray0[1] = 2853;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2853;
      doubleArray0[1] = (double) 2853;
      doubleArray0[2] = (double) 2853;
      doubleArray0[3] = (double) 2853;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 2853;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      instances0.checkInstance(binarySparseInstance0);
      intArray0[2] = 5;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      MockRandom mockRandom0 = new MockRandom();
      evaluation1.weightedFMeasure();
      SparseInstance sparseInstance1 = new SparseInstance(2853);
      Attribute attribute0 = new Attribute("w<>VBvS", (-696));
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance1);
      sparseInstance2.setMissing(attribute0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance1);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.listOptions();
      MultilayerPerceptron multilayerPerceptron1 = (MultilayerPerceptron)AbstractClassifier.makeCopy(multilayerPerceptron0);
      assertFalse(multilayerPerceptron1.getGUI());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.3109290309357102
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SystemInUtil.addInputLine("setFilter");
      NaiveBayes naiveBayes0 = new NaiveBayes();
      CoverTree coverTree0 = new CoverTree();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumNominalValues(4005);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4005);
      try { 
        evaluation0.evaluateModelOnce(1.0001, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.63887068547068
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(120);
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(2978);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      instances0.add((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFSchemeEntropy();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("Evaluation (for feature selection): CV ", arrayList0, 120);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.0205510251350907
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SystemInUtil.addInputLine("setFilter");
      NaiveBayes naiveBayes0 = new NaiveBayes();
      CoverTree coverTree0 = new CoverTree();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      double[] doubleArray0 = new double[0];
      int int0 = 123;
      testInstances0.setNumNominal(123);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[2] = ",{U";
      stringArray0[5] = " sconds";
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[5];
      intArray0[0] = 2853;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      intArray0[1] = 2853;
      intArray0[2] = 5;
      intArray0[3] = 2853;
      double double0 = evaluation0.m_WithClass;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.m_ClassPriorsSum = (double) 2853;
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = '^';
      charArray0[2] = 'g';
      charArray0[3] = 'D';
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.listOptions();
      AbstractClassifier.makeCopy(multilayerPerceptron0);
      CSVLoader cSVLoader0 = new CSVLoader();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-1136.25158387092);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1);
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7221489918454203
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(120);
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 2978;
      SparseInstance sparseInstance0 = new SparseInstance(2978);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      textDirectoryLoader0.getOptions();
      String string0 = "setUseSupervisedDiscretization";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2978;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2978;
      try { 
        evaluation1.updateStatsForClassifier(doubleArray0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.469025138554394
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(97);
      evaluation0.numFalseNegatives(115);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[3] = Double.NaN;
      textDirectoryLoader0.setCharSet((String) null);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 6.7;
      doubleArray1[1] = (double) 115;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 240.514828;
      doubleArray1[4] = 1648.0;
      doubleArray1[6] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1648.0, doubleArray1);
      binarySparseInstance0.toString(10, 99);
      binarySparseInstance0.setWeight(6.7);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation2 = new Evaluation(instances0, costMatrix0);
      evaluation0.precision(5);
      evaluation2.falseNegativeRate(5);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation2.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance0, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.1422352508457574
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CoverTree coverTree0 = new CoverTree();
      NaiveBayes naiveBayes1 = new NaiveBayes();
      CoverTree coverTree1 = new CoverTree();
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.trueNegativeRate(111);
      SystemInUtil.addInputLine("&6H;ygQ%W@*\"DZ");
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      instances1.spliterator();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.falseNegativeRate((-1));
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      // Undeclared exception!
      try { 
        evaluation1.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.3783071340259614
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IBk iBk0 = new IBk();
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-split-percentage <percentage>\n");
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelational(2853);
      evaluation0.SFPriorEntropy();
      double double0 = evaluation0.SFMeanEntropyGain();
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double1, 0.01);
      
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.1995219101255112
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Rq;Q7(HWi`wm'");
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, (String) null);
      byte[] byteArray0 = new byte[4];
      instances0.toArray();
      byteArray0[0] = (byte) (-128);
      evaluation0.m_SumSqrErr = (double) (byte) (-128);
      textDirectoryLoader0.reset();
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(626);
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@data";
      stringArray0[1] = "4Q/jR2J7;fF";
      stringArray0[2] = ".arff";
      stringArray0[3] = "Rq;Q7(HWi`wm'";
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.KBInformation();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.305172537224781
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setHandler(naiveBayes0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm((-1127.787245234363));
      naiveBayesMultinomialText0.getStopwords();
      MockFile mockFile0 = new MockFile("@relation");
      mockFile0.delete();
      PipedReader pipedReader0 = new PipedReader();
      PipedReader pipedReader1 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader1);
      evaluation0.numFalsePositives(5);
      Integer integer0 = new Integer((-2));
      NaiveBayes naiveBayes1 = new NaiveBayes();
      instances0.remove((Object) testInstances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.falsePositiveRate((-2045630184));
      evaluation0.numTrueNegatives(5);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.6255821340310974
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.numFalseNegatives(115);
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (-0.14638014443157527);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      double double1 = evaluation0.trueNegativeRate(97);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.numFalsePositives(92);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MultilayerPerceptron multilayerPerceptron1 = new MultilayerPerceptron();
      multilayerPerceptron1.setTrainingTime(725);
      multilayerPerceptron1.setReset(false);
      multilayerPerceptron1.setValidationSetSize(115);
      multilayerPerceptron1.listOptions();
      AbstractClassifier.makeCopy(multilayerPerceptron1);
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.falsePositiveRate(92);
      evaluation0.numTrueNegatives(92);
      evaluation0.toMatrixString(".dat");
      double double3 = evaluation0.truePositiveRate(498);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.2919166873259322
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 7;
      evaluation0.numFalseNegatives(7);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 97;
      doubleArray0[3] = 240.514828;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(240.514828, doubleArray0);
      binarySparseInstance0.setWeight(0.0);
      Stack<LMT> stack0 = new Stack<LMT>();
      Stack<LMT> stack1 = new Stack<LMT>();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      CostMatrix costMatrix0 = new CostMatrix(2);
      costMatrix0.initialize();
      evaluation0.weightedTrueNegativeRate();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.relativeAbsoluteError();
      Evaluation evaluation3 = null;
      try {
        evaluation3 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.2431996672650456
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(120);
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(2978);
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = ' ';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'Y';
      instances0.add((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation1.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation1.SFMeanPriorEntropy();
      double double3 = evaluation1.meanAbsoluteError();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.4486869174985209
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Rq;Q7(HWi`wm'");
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, (String) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      textDirectoryLoader0.reset();
      byteArray0[1] = (byte) (-128);
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(626);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Rq;Q7(HWi`wm'", (List<String>) null, protectedProperties0);
      binarySparseInstance0.value(attribute0);
      binarySparseInstance0.setMissing((int) (byte) (-128));
      try { 
        evaluation0.updateStatsForPredictor((-177.9410456736), binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CoverTree coverTree0 = new CoverTree();
      CostMatrix costMatrix0 = new CostMatrix(6);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      doubleArray0[6] = (-1.0);
      Evaluation evaluation0 = new Evaluation(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      AbstractClassifier.makeCopy(multiClassClassifierUpdateable0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.5010022021098646
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(97);
      int int0 = 115;
      evaluation0.numFalseNegatives(115);
      MockRandom mockRandom0 = new MockRandom((-884L));
      instances0.randomize(mockRandom0);
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, "@data");
      evaluation0.areaUnderROC(115);
      evaluation0.toSummaryString(false);
      evaluation0.areaUnderROC(115);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      instances0.compactify();
      Evaluation evaluation1 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Object object0 = new Object();
      Object object1 = new Object();
      evaluation0.unweightedMicroFmeasure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OneR oneR0 = new OneR();
      oneR0.getCapabilities();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, "-max <int>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.0423569973977633
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IBk iBk0 = new IBk();
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-split-percentage <percentage>\n");
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNominal(1036);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelational(2853);
      evaluation0.SFPriorEntropy();
      evaluation0.SFMeanEntropyGain();
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "-split-percentage <percentage>\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.768088661873535
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(97);
      evaluation0.numFalseNegatives(115);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 6.7;
      doubleArray1[1] = (double) 115;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 240.514828;
      doubleArray1[4] = 1648.0;
      evaluation1.fMeasure(97);
      evaluation0.recall((-2404));
      evaluation1.areaUnderPRC(2327);
      evaluation0.truePositiveRate(2327);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 115, 1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 115
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.8051066740221904
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SMOreg sMOreg0 = new SMOreg();
      AbstractClassifier.makeCopies(naiveBayes0, 17);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.setClassifier(naiveBayes0);
      Evaluation.getGlobalInfo(cVParameterSelection0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      MockRandom mockRandom0 = new MockRandom(73L);
      evaluation0.addNumericTrainClass(1, 1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.numFalsePositives(1);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Version.VERSION = "addCVParameter";
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      NaiveBayes naiveBayes1 = new NaiveBayes();
      AbstractClassifier.makeCopy(naiveBayes0);
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.falsePositiveRate((-1));
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      testInstances0.getOptions();
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 0.0;
      evaluation0.updateMargins(doubleArray0, 2, 1000.0);
      evaluation0.totalCost();
      try { 
        evaluation0.crossValidateModel((Classifier) cVParameterSelection0, instances0, 2, (Random) mockRandom0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(120);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(2978);
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = ' ';
      charArray0[2] = 'N';
      charArray0[3] = 'c';
      charArray0[4] = 'Y';
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'N';
      intArray0[1] = (-3816);
      intArray0[2] = (int) 'N';
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(648, intArray0, 2978);
      instances0.add((Instance) sparseInstance0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 120, 78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.4036690346512835
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(97);
      evaluation0.numFalseNegatives(115);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 115;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 97;
      doubleArray0[5] = (double) 115;
      doubleArray0[6] = 0.0;
      evaluation0.addNumericTrainClass(0.0, 115.0);
      doubleArray0[7] = (double) 115;
      int[] intArray0 = new int[8];
      intArray0[1] = 97;
      intArray0[2] = 115;
      intArray0[3] = 115;
      intArray0[7] = 97;
      intArray0[5] = 115;
      intArray0[6] = 97;
      intArray0[7] = 97;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, 488);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.6644262638123233
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SMOreg sMOreg0 = new SMOreg();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.setClassifier(naiveBayes0);
      Evaluation.getGlobalInfo(cVParameterSelection0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = new Integer((-1));
      MockRandom mockRandom0 = new MockRandom(73L);
      evaluation0.addNumericTrainClass(3.0, 3.0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier.main(testInstances0.DEFAULT_WORDS);
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.fMeasure(0);
      // Undeclared exception!
      try { 
        evaluation0.recall(577);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 577
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.9648324629659304
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CoverTree coverTree0 = new CoverTree();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedAreaUnderROC();
      Instances instances1 = new Instances(instances0, (-2149));
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      MockRandom mockRandom0 = new MockRandom(0L);
      evaluation1.addNumericTrainClass((-1), 0.975);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.numFalsePositives(2);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation2.falsePositiveRate(2);
      double double0 = evaluation2.m_SumClassPredicted;
      evaluation2.weightedMatthewsCorrelation();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?}3(BKZ");
      // Undeclared exception!
      try { 
        evaluation1.truePositiveRate(111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 111
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.4078851247110666
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CoverTree coverTree0 = new CoverTree();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      Instances instances1 = new Instances(instances0, (-1));
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      TreeModel treeModel0 = new TreeModel(iIOMetadataNode0, instances0, (MiningSchema) null);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setAutoBuild(false);
      multilayerPerceptron0.blocker(false);
      multilayerPerceptron0.setNormalizeNumericClass(false);
      MultilayerPerceptron multilayerPerceptron1 = new MultilayerPerceptron();
      MultilayerPerceptron multilayerPerceptron2 = new MultilayerPerceptron();
      MultilayerPerceptron multilayerPerceptron3 = new MultilayerPerceptron();
      multilayerPerceptron2.listOptions();
      MultilayerPerceptron multilayerPerceptron4 = new MultilayerPerceptron();
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.toCumulativeMarginDistributionString();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      CoverTree coverTree0 = new CoverTree();
      NaiveBayes naiveBayes1 = new NaiveBayes();
      CoverTree coverTree1 = new CoverTree();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      double double1 = evaluation0.m_WithClass;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.deleteAttributeAt(1546);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      double double2 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.1171019303194956
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(97);
      int int0 = 115;
      evaluation0.numFalseNegatives(115);
      Evaluation evaluation1 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        evaluation1.evaluateModel((Classifier) adaBoostM1_0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.695600427808076
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[2] = ",{U";
      stringArray0[5] = " sconds";
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[5];
      intArray0[0] = 2853;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      intArray0[1] = 2853;
      intArray0[2] = 5;
      intArray0[3] = 2853;
      double double0 = evaluation0.m_WithClass;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.m_ClassPriorsSum = (double) 2853;
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = '^';
      charArray0[2] = 'g';
      charArray0[3] = 'D';
      charArray0[4] = '<';
      charArray0[5] = '\"';
      String string0 = evaluation0.num2ShortID(11, charArray0, 11);
      assertEquals("         2\"", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.30045221348672
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      textDirectoryLoader0.getDataSet();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "`N*(;3");
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      binarySparseInstance0.setWeight(929.9456965848939);
      evaluation0.SFPriorEntropy();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.0545027463856176
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[4] = ",{U";
      stringArray0[5] = " seconds";
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[5];
      intArray0[0] = 2853;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      intArray0[1] = 2853;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2853, intArray0, 2853);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFSchemeEntropy();
      evaluation1.SFPriorEntropy();
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[1] = '2';
      charArray0[2] = 'N';
      charArray0[3] = 'v';
      charArray0[4] = 'E';
      charArray0[5] = 'a';
      charArray0[6] = 'D';
      charArray0[7] = '8';
      charArray0[8] = 'r';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2), charArray0, 2853);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.7094458197175149
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(120);
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(2978);
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = ' ';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'Y';
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'N';
      intArray0[1] = (-3816);
      intArray0[2] = (int) 'N';
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(648, intArray0, 2978);
      instances0.add((Instance) sparseInstance0);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setNormalizeNumericClass(true);
      AbstractClassifier.makeCopy(multilayerPerceptron0);
      String string0 = evaluation0.num2ShortID(78, charArray0, 0);
      assertEquals("", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.7834837839902993
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(97);
      evaluation0.numFalseNegatives(115);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      evaluation0.numFalsePositives(97);
      Integer integer0 = new Integer(15);
      NaiveBayes naiveBayes0 = new NaiveBayes();
      instances0.remove((Object) naiveBayes0);
      evaluation0.rootMeanPriorSquaredError();
      CSVLoader cSVLoader0 = new CSVLoader();
      double double0 = evaluation0.falsePositiveRate((-2045630184));
      double double1 = evaluation1.numTrueNegatives(24);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.toMatrixString("equals");
      double double2 = evaluation1.truePositiveRate(115);
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation1.rootMeanSquaredError();
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.431259504143956
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.randomize((Random) null);
      evaluation0.areaUnderROC((-1969743478));
      evaluation0.setDiscardPredictions(false);
      evaluation0.areaUnderROC((-1969743478));
      instances0.compactify();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[5];
      intArray0[0] = (-355);
      intArray0[1] = (-1969743478);
      intArray0[2] = (-1969743478);
      intArray0[3] = (-1969743478);
      intArray0[4] = (-1969743478);
      SparseInstance sparseInstance0 = new SparseInstance((-3049.9330392948305), doubleArray0, intArray0, (-2022042151));
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.1660899068057584
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      textDirectoryLoader0.getDataSet();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?`Y+$P{");
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1962);
      textDirectoryLoader1.setRetrieval(10);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.setWeight(1065.0);
      evaluation0.SFPriorEntropy();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((double[]) null, (Instance) binarySparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.31874710518711
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SMOreg sMOreg0 = new SMOreg();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" ");
      TreeModel treeModel0 = new TreeModel(iIOMetadataNode0, instances0, (MiningSchema) null);
      instances0.indexOf(sMOreg0);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setNormalizeNumericClass(false);
      MultilayerPerceptron multilayerPerceptron1 = new MultilayerPerceptron();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(2, false, false);
      AbstractClassifier.makeCopy(treeModel0);
      CSVLoader cSVLoader0 = new CSVLoader();
      sMOreg0.enumerateMeasures();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.numTrueNegatives((-2632));
      evaluation0.toMatrixString(".csv");
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.2962664515510975
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(97);
      evaluation0.numFalseNegatives((-4448));
      Evaluation evaluation1 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(97);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[4] = ",{U";
      stringArray0[5] = " seconds";
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " seconds");
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      testInstances0.setNumRelational(2853);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      // Undeclared exception!
      try { 
        evaluation0.precision(112);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 112
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.12833456529567
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(120);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(2978);
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = ' ';
      charArray0[2] = 'N';
      charArray0[3] = 'c';
      charArray0[4] = 'Y';
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'N';
      intArray0[1] = (-3816);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, (String[]) null);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      double double0 = evaluation0.precision(16);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.709639798266567
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setHandler(naiveBayes0);
      evaluation0.m_TotalCoverage = (double) (-2);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      evaluation0.trueNegativeRate((-1780));
      evaluation1.weightedFalsePositiveRate();
      testInstances0.setRelation("@data");
      CostSensitiveClassifier.main(testInstances0.DEFAULT_WORDS);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      // Undeclared exception!
      try { 
        evaluation1.fMeasure((-1780));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1780
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("The maximum number of instances in a leaf must be >=1.");
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.4578233145223547
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(97);
      double double0 = evaluation0.numFalseNegatives(115);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-147.8);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-147.8), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(115);
      LinearRegression linearRegression0 = new LinearRegression();
      SelectedTag selectedTag0 = linearRegression0.getAttributeSelectionMethod();
      IBk iBk0 = new IBk(627);
      iBk0.setDistanceWeighting(selectedTag0);
      binarySparseInstance0.setWeight(115);
      CostMatrix costMatrix0 = new CostMatrix(4);
      CostMatrix costMatrix1 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix1);
      String string0 = evaluation0.toSummaryString("be5m-b^", false);
      assertEquals("be5m-b^\nTotal Number of Instances                0     \n", string0);
      
      double double1 = evaluation0.precision(0);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.falseNegativeRate(627);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.1782356557936127
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getNumBoostingIterations");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray0[1] = (double) 0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".arff";
      stringArray0[1] = "getNumBoostingIterations";
      stringArray0[2] = "getNumBoostingIterations";
      stringArray0[3] = ".bsi";
      stringArray0[4] = ".arff";
      stringArray0[5] = "@data";
      stringArray0[6] = "main";
      stringArray0[7] = ".arff";
      textDirectoryLoader0.setOptions(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      testInstances0.setNumRelationalString(24);
      evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[1] = (-2);
      intArray0[4] = (-2);
      intArray0[5] = 0;
      intArray0[6] = 0;
      evaluation1.m_WithClass = 56.4609065;
      intArray0[7] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), intArray0, 0);
      instances0.add((Instance) binarySparseInstance0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      double double1 = evaluation1.errorRate();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.567637005227583
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.randomize((Random) null);
      evaluation0.areaUnderROC((-1969743478));
      evaluation0.setDiscardPredictions(false);
      instances0.compactify();
      MockRandom mockRandom0 = new MockRandom((-1969743478));
      evaluation0.fMeasure((-529));
      MockRandom mockRandom1 = new MockRandom((-1969743478));
      double double0 = evaluation0.fMeasure(2650);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.recall(2650);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.1012448189540684
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(120);
      SparseInstance sparseInstance0 = new SparseInstance(2978);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.add((Instance) sparseInstance0);
      instances0.add((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.1220585847090434
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(Double.NaN);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-68);
      byte byte0 = (byte)117;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)115;
      try { 
        pipedOutputStream0.write(byteArray0, (-1), (-3079));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SMOreg sMOreg0 = new SMOreg();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'N';
      intArray0[1] = (-2);
      intArray0[2] = 2;
      intArray0[3] = (int) 'N';
      intArray0[4] = 1;
      intArray0[5] = (-3816);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, intArray0, 2034);
      instances0.add((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      binarySparseInstance1.deleteAttributeAt(2034);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance0);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.listOptions();
      AbstractClassifier.makeCopy(naiveBayes0);
      CSVLoader cSVLoader0 = new CSVLoader();
      assertEquals("The range of attributes to force to be of type STRING, example ranges: 'first-last', '1,4,7-14,50-last'.", cSVLoader0.stringAttributesTipText());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(2845, false, true);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      String string0 = Evaluation.makeOptionString((Classifier) null, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.5250308858109047
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IBk iBk0 = new IBk();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 6.7;
      doubleArray0[1] = 240.514828;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = 1648.0;
      doubleArray0[4] = 240.514828;
      doubleArray0[5] = 6.7;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = 6.7;
      doubleArray0[8] = (double) 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1263.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      LinearRegression linearRegression0 = new LinearRegression();
      SelectedTag selectedTag0 = new SelectedTag(2, iBk0.TAGS_WEIGHTING);
      iBk0.setDistanceWeighting(selectedTag0);
      binarySparseInstance1.setWeight(1263.0);
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix1);
      String string0 = evaluation0.toSummaryString("@relation", true);
      assertEquals("@relation\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.weightedTruePositiveRate();
      double double1 = evaluation0.falseNegativeRate((-1338));
      double double2 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.numFalsePositives((-933));
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.falsePositiveRate(4);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.0099922935754155
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("debugTipText");
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.9650677749128738
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      double double1 = evaluation0.numFalseNegatives(115);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (-0.14638014443157527);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      double double2 = evaluation0.trueNegativeRate(97);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double3 = evaluation1.numFalsePositives(20);
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation1.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double4, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.getHeader();
      evaluation0.numTrueNegatives(105);
      evaluation2.SFEntropyGain();
      evaluation1.weightedTrueNegativeRate();
      double double5 = evaluation0.numTrueNegatives(34);
      assertEquals(0.0, double5, 0.01);
      
      evaluation2.falseNegativeRate(20);
      double double6 = evaluation2.priorEntropy();
      assertEquals(double6, double1, 0.01);
      assertEquals(0.0, double6, 0.01);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(120);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(2978);
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = ' ';
      charArray0[2] = 'N';
      charArray0[3] = 'c';
      charArray0[4] = 'Y';
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'N';
      intArray0[1] = (-3816);
      intArray0[2] = (int) 'N';
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setReset(false);
      MultilayerPerceptron multilayerPerceptron1 = new MultilayerPerceptron();
      multilayerPerceptron1.listOptions();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      AbstractClassifier.makeCopy(cVParameterSelection0);
      CSVLoader cSVLoader0 = new CSVLoader();
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.4283531240228515
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.indexOf(evaluation0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation1.m_Unclassified;
      evaluation1.errorRate();
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      evaluation0.trueNegativeRate((-1));
      SystemInUtil.addInputLine("4N@^eb~yU<p[Sj");
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      instances0.spliterator();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation1.falseNegativeRate((-1));
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      // Undeclared exception!
      try { 
        evaluation2.precision((-44));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -44
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.134163907688782
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.reset();
      evaluation0.areaUnderROC(97);
      double double0 = evaluation0.m_ConfLevel;
      IntervalEstimator intervalEstimator0 = null;
      try { 
        evaluation0.evaluateModelOnce((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.50804676777597
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(120);
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(2978);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = ' ';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'Y';
      instances0.add((Instance) sparseInstance0);
      evaluation0.m_MaxTarget = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation1.SFPriorEntropy();
      evaluation1.SFMeanPriorEntropy();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) ' ';
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      double double0 = (-6.414583597022144);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[0] = (-6.414583597022144);
      binarySparseInstance0.s_numericAfterDecimalPoint = 0;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.209805393341079
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IBk iBk0 = new IBk();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(4);
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(14);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'Y';
      intArray0[1] = (int) 'Y';
      intArray0[2] = 4;
      intArray0[3] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 0);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.deleteAttributeAt((-944));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      evaluation0.confusionMatrix();
      DecisionTable decisionTable0 = new DecisionTable();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.toMatrixString("'W$&@cLKB6Rycg");
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.2431996672650456
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(120);
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(2978);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      char[] charArray0 = new char[6];
      charArray0[1] = ' ';
      charArray0[2] = 'N';
      charArray0[4] = 'Y';
      instances0.add((Instance) sparseInstance0);
      evaluation0.fMeasure(120);
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ' ';
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.483453314954943
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CoverTree coverTree0 = new CoverTree();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate();
      CoverTree coverTree1 = new CoverTree();
      CoverTree coverTree2 = new CoverTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("setUseSupervisedDiscretization");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-o\n");
      try { 
        MockURI.URI(".arff", "LiKy@ZJBg^A[", (String) null, 13, "addCVParameter", "setOptions", "-o\n");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: .arff:addCVParameter?setOptions#-o%0A
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.5806789212792607
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(97);
      evaluation0.numFalseNegatives(115);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumErr;
      evaluation0.trueNegativeRate(97);
      evaluation1.weightedFalsePositiveRate();
      evaluation0.numFalsePositives(105);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[4] = " H)e>3X:bVUp$A();";
      stringArray0[5] = "N ecod";
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[5];
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      intArray0[1] = 2853;
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) 2853;
      doubleArray0[1] = (double) 2853;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      instances0.checkInstance(binarySparseInstance0);
      instances0.setClassIndex((-1770));
      intArray0[2] = 5;
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.661034146408792
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setDebug(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.numFalseNegatives(115);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      evaluation0.trueNegativeRate(97);
      Evaluation evaluation1 = new Evaluation(instances0);
      int int0 = 20;
      evaluation1.numFalsePositives(20);
      double double1 = evaluation0.m_MissingClass;
      evaluation1.setDiscardPredictions(true);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.getHeader();
      evaluation0.numTrueNegatives(105);
      CSVLoader cSVLoader0 = new CSVLoader();
      int int1 = 60;
      try { 
        evaluation1.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(31, false, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      REPTree rEPTree0 = new REPTree();
      String string0 = Evaluation.makeOptionString(rEPTree0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Instance instance0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Rq;Q7(HWi`wm'");
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, (String) null);
      instances0.toArray();
      evaluation0.m_TotalSizeOfRegions = 10.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(626);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[4] = ",{U";
      stringArray0[5] = " seconds";
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " seconds");
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom(621L);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.crossValidateModel(" seconds", instances0, 43, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called:  seconds
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      CoverTree coverTree0 = new CoverTree();
      NaiveBayes naiveBayes1 = new NaiveBayes();
      CoverTree coverTree1 = new CoverTree();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.deleteAttributeAt(1546);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, binarySparseInstance1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation.handleCostOption((String) null, (byte) (-66));
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-66);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.connect(pipedInputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream2 = null;
      try {
        pipedInputStream2 = new PipedInputStream(pipedOutputStream0, (byte) (-66));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation.handleCostOption("", (byte) (-66));
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      SGDText sGDText0 = new SGDText();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-66);
      // Undeclared exception!
      try { 
        pipedOutputStream0.write(byteArray0, (int) (byte) (-66), (int) (byte) (-66));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = (-2127);
      try { 
        Evaluation.handleCostOption("[fx", (-2127));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "Wx$QRLN)uF=bzuT";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      stringArray0[2] = "xSNTZ";
      stringArray0[3] = ",{U";
      stringArray0[4] = " seconds";
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Setting end of batch";
      stringArray0[1] = "Setting end of batch";
      stringArray0[2] = "Setting end of batch";
      stringArray0[3] = "Setting end of batch";
      stringArray0[4] = "Setting end of batch";
      try { 
        Evaluation.evaluateModel("Setting end of batch", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name Setting end of batch.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1341));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "bb::p(i?rZ'oXs[l/{";
      Evaluation.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "Wx$QRLN)uF=bzuT";
      stringArray0[2] = "xSNTZ";
      stringArray0[3] = ",{U";
      stringArray0[4] = " seconds";
      try { 
        Evaluation.evaluateModel((Classifier) naiveBayes0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.bayes.NaiveBayes:
         // 
         // -K
         // \tUse kernel density estimator rather than normal
         // \tdistribution for numeric attributes
         // -D
         // \tUse supervised discretization to process numeric attributes
         // 
         // -O
         // \tDisplay model in old format (good when there are many classes)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\tOnly outputs cumulative margin distribution.\n";
      stringArray0[1] = "";
      stringArray0[2] = "maxBoostingIterationsTipText";
      stringArray0[3] = "-i\n";
      LMT lMT0 = new LMT();
      J48 j48_0 = new J48();
      AbstractClassifier.makeCopy(j48_0);
      try { 
        Evaluation.evaluateModel((Classifier) j48_0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.4273451721596009
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IBk iBk0 = new IBk();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "measureAttributesUsed";
      AbstractClassifier.runClassifier(iBk0, stringArray0);
      String string0 = Evaluation.makeOptionString(iBk0, true);
      assertNotNull(string0);
  }
}
