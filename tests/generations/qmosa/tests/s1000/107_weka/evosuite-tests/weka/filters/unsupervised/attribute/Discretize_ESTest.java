/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 04:04:04 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      int int0 = 18;
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 18);
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      arrayList0.ensureCapacity((-342));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALIAN;
      locale0.getUnicodeLocaleKeys();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("@data", arrayList2);
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("@data", (String) null, (-342));
      attribute1.toString();
      arrayList0.add(attribute1);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9411865331900606
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 6);
      Discretize discretize0 = new Discretize();
      arrayList0.trimToSize();
      Attribute attribute0 = new Attribute("@data", (String) null, (-342));
      attribute0.toString();
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1152.9396, (int[]) null, (-2028178998));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance2);
      discretize0.batchFinished();
      assertEquals(10, discretize0.getBins());
      
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(1, (int[]) null, 2456);
      DenseInstance denseInstance0 = new DenseInstance(18);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(93);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(34);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      discretize0.m_NumBins = 0;
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(10.0, (int[]) null, 77);
      discretize0.calculateCutPoints();
      assertEquals(0, discretize0.getBins());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 18);
      Discretize discretize0 = new Discretize();
      arrayList0.ensureCapacity((-342));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREA;
      locale0.getUnicodeLocaleKeys();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("@data", (List<String>) null);
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("@data", (String) null, (-342));
      attribute1.toString();
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      int[] intArray0 = new int[2];
      binarySparseInstance0.setDataset(instances0);
      intArray0[1] = (-2063);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(18, intArray0, 0);
      discretize0.m_FindNumBins = true;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      attribute1.isInRange((-270.059032));
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      Locale.forLanguageTag("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(18);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      instances0.clear();
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5387687884711756
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 18);
      Discretize discretize0 = new Discretize();
      arrayList0.ensureCapacity((-342));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREA;
      locale0.getUnicodeLocaleKeys();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("@data", arrayList2);
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("@data", (String) null, (-342));
      attribute1.toString();
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      int[] intArray0 = new int[2];
      binarySparseInstance0.setDataset(instances0);
      discretize0.setDesiredWeightOfInstancesPerInterval(2);
      intArray0[1] = (-2063);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(18, intArray0, 0);
      discretize0.m_FindNumBins = true;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      Locale.forLanguageTag("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(18);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      discretize0.input(binarySparseInstance0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2512));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2512
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4904032277870636
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 18);
      Discretize discretize0 = new Discretize();
      arrayList0.ensureCapacity((-342));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("@data", list0);
      Attribute attribute1 = new Attribute("@data", (String) null, (-342));
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      attribute1.toString();
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      attribute1.toString();
      arrayList0.add(attribute1);
      boolean boolean0 = discretize0.m_UseBinNumbers;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale.forLanguageTag(".bsi");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0430592162457075
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 18);
      Discretize discretize0 = new Discretize();
      arrayList0.ensureCapacity((-342));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("@data", list0);
      Attribute attribute1 = new Attribute("@data", (String) null, (-342));
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      attribute1.toString();
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      int[] intArray0 = new int[2];
      binarySparseInstance0.setDataset(instances0);
      binarySparseInstance1.s_numericAfterDecimalPoint = 18;
      intArray0[1] = (-2063);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(18, intArray0, 0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale.forLanguageTag("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(2, (int[]) null, 1);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance2);
      discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
      
      discretize0.batchFinished();
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5464467350234012
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 18);
      Discretize discretize0 = new Discretize();
      arrayList0.ensureCapacity((-342));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("@data", list0);
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("@data", (String) null, (-342));
      attribute1.toString();
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      int[] intArray0 = new int[2];
      intArray0[1] = (-2063);
      discretize0.m_FindNumBins = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale.forLanguageTag("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, (int[]) null, 1);
      discretize0.calculateCutPoints();
      discretize0.invertSelectionTipText();
      discretize0.getUseEqualFrequency();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.06316420378249
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 6);
      Discretize discretize0 = new Discretize();
      arrayList0.trimToSize();
      Attribute attribute0 = new Attribute("@data", (String) null, (-342));
      attribute0.toString();
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1152.9396, (int[]) null, (-2028178998));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance2);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(89, (int[]) null, 89);
      DenseInstance denseInstance0 = new DenseInstance(89);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(89, (int[]) null, 649);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance2);
      Locale.forLanguageTag("@attribute");
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(1365.489667, (int[]) null, (-857));
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance0);
      discretize0.input(denseInstance0);
      discretize0.calculateCutPoints();
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.403413191539913
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 89);
      Discretize discretize0 = new Discretize();
      arrayList0.ensureCapacity((-342));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALIAN;
      locale0.getUnicodeLocaleKeys();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("@data", arrayList2);
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("@data", (String) null, (-342));
      attribute1.toString();
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      int[] intArray0 = new int[2];
      binarySparseInstance0.setDataset(instances0);
      binarySparseInstance1.s_numericAfterDecimalPoint = 89;
      intArray0[1] = (-2063);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(2, (int[]) null, 1);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      discretize0.input(binarySparseInstance0);
      discretize0.calculateCutPoints();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Locale.forLanguageTag("integer");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.05592522077561
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 6);
      Discretize discretize0 = new Discretize();
      arrayList0.trimToSize();
      Attribute attribute0 = new Attribute("@data", (String) null, (-342));
      attribute0.toString();
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1152.9396, (int[]) null, (-2028178998));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(1365.489667, (int[]) null, 18);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance2);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(18, (int[]) null, 18);
      DenseInstance denseInstance0 = new DenseInstance(18);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance6);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance(18, (int[]) null, 649);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance7);
      discretize0.input(binarySparseInstance6);
      assertFalse(discretize0.isNewBatch());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Random.setNextRandom(93);
      boolean boolean0 = discretize0.batchFinished();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2383497075834473
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 18);
      Discretize discretize0 = new Discretize();
      arrayList0.ensureCapacity((-342));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("@data", list0);
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("@data", (String) null, (-342));
      attribute1.toString();
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      int[] intArray0 = new int[2];
      binarySparseInstance0.setDataset(instances0);
      intArray0[1] = (-2063);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(18, intArray0, 0);
      discretize0.m_FindNumBins = true;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      Locale.forLanguageTag("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      discretize0.input(binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2327272160989624
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 18);
      Discretize discretize0 = new Discretize();
      arrayList0.ensureCapacity((-342));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALIAN;
      Attribute attribute0 = new Attribute("@data", (String) null, (-342));
      attribute0.toString();
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      int[] intArray0 = new int[2];
      intArray0[1] = (-2063);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale.forLanguageTag("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9851959139260487
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 18);
      Discretize discretize0 = new Discretize();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALIAN;
      locale0.getUnicodeLocaleKeys();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("@data", arrayList2);
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("@data", (String) null, (-342));
      attribute1.toString();
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      int[] intArray0 = new int[2];
      intArray0[1] = (-2063);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, (int[]) null, 1);
      discretize0.calculateCutPoints();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-O";
      stringArray0[1] = "relational";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@end";
      discretize0.setOptions(stringArray0);
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4497927527284427
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 18);
      Discretize discretize0 = new Discretize();
      arrayList0.ensureCapacity((-342));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("@data", list0);
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("@data", (String) null, (-342));
      attribute1.toString();
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      Attribute attribute2 = attribute1.copy("fHDt|,ntZ");
      arrayList0.add(attribute2);
      int[] intArray0 = new int[2];
      binarySparseInstance0.setDataset(instances0);
      intArray0[1] = (-2063);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(18, intArray0, 0);
      discretize0.m_FindNumBins = true;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale.forLanguageTag("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(2, (int[]) null, 1);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      discretize0.input(binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.418071368502732
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 18);
      Discretize discretize0 = new Discretize();
      arrayList0.ensureCapacity((-342));
      Attribute attribute0 = new Attribute("@data", (String) null, (-342));
      attribute0.toString();
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      int[] intArray0 = new int[2];
      intArray0[1] = (-2063);
      Locale.forLanguageTag("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2515));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2515
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3222530079942705
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 18);
      Discretize discretize0 = new Discretize();
      arrayList0.ensureCapacity((-342));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("@data", list0);
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("@data", (String) null, (-342));
      attribute1.toString();
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      int[] intArray0 = new int[2];
      binarySparseInstance0.setDataset(instances0);
      intArray0[1] = (-2063);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(18, intArray0, 0);
      discretize0.m_FindNumBins = true;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      Locale.forLanguageTag("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(2, (int[]) null, 1);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      discretize0.input(binarySparseInstance0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2515));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2515
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.189105515729269
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 18);
      Discretize discretize0 = new Discretize();
      arrayList0.ensureCapacity((-342));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("@data", list0);
      arrayList0.add(attribute0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) arrayList0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) discretize0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) "ZI@`-bv5N<";
      arrayList0.toArray(objectArray0);
      Attribute attribute1 = new Attribute("@data", (String) null, (-342));
      attribute1.toString();
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      int[] intArray0 = new int[2];
      binarySparseInstance0.setDataset(instances0);
      intArray0[1] = (-2063);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(18, intArray0, 0);
      discretize0.m_FindNumBins = true;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      Locale.forLanguageTag("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      discretize0.input(binarySparseInstance0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4914892835297806
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 18);
      Discretize discretize0 = new Discretize();
      arrayList0.ensureCapacity((-342));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("@data", list0);
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("@data", (String) null, (-342));
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      attribute1.toString();
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      int[] intArray0 = new int[2];
      binarySparseInstance0.setDataset(instances0);
      binarySparseInstance1.s_numericAfterDecimalPoint = 18;
      intArray0[1] = (-2063);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(18, intArray0, 0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale.forLanguageTag("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(2, (int[]) null, 1);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance2);
      discretize0.input(binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '@data' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.971558425985957
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 6);
      Discretize discretize0 = new Discretize();
      arrayList0.trimToSize();
      Attribute attribute0 = new Attribute("@data", (String) null, (-342));
      attribute0.toString();
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      int[] intArray0 = null;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, (int[]) null, (-2063));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(1, (int[]) null, (-2063));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance3);
      discretize0.batchFinished();
      int int0 = 766;
      // Undeclared exception!
      try { 
        discretize0.findNumBins(766);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 766
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9792071394460433
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[6] = "\r";
      stringArray0[1] = stringArray0[0];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Zfi", arrayList0, 19);
      Discretize discretize0 = new Discretize();
      arrayList0.ensureCapacity(41);
      Properties properties0 = new Properties();
      Attribute attribute0 = new Attribute("nSWEKgx8AG-_Ba^+", (String) null, 19);
      Attribute attribute1 = new Attribute("integer", instances0, 3);
      attribute1.addStringValue(attribute0, 0);
      attribute1.enumerateValues();
      attribute1.addStringValue("numeric");
      arrayList0.add(attribute0);
      System.setCurrentTimeMillis(2);
      discretize0.setInputFormat(instances0);
      int int0 = discretize0.m_NumBins;
      Attribute.typeToString(2);
      Discretize discretize1 = new Discretize("numeric");
      attribute1.copy();
      Filter filter0 = Filter.makeCopy(discretize0);
      Range range0 = new Range("real");
      discretize1.m_DiscretizeCols = range0;
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      Discretize discretize2 = new Discretize();
      filter0.batchFinished();
      filter0.batchFinished();
      // Undeclared exception!
      try { 
        discretize2.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.067648843266804
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 6);
      Discretize discretize0 = new Discretize();
      arrayList0.trimToSize();
      Attribute attribute0 = new Attribute("@data", (String) null, (-342));
      attribute0.toString();
      StringTokenizer stringTokenizer0 = new StringTokenizer(")%WE*<.(1V", "@end");
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Filter.makeCopy(discretize0);
      Filter filter0 = Filter.makeCopy(discretize0);
      MultiFilter multiFilter0 = new MultiFilter();
      Filter[] filterArray0 = new Filter[2];
      filterArray0[0] = (Filter) discretize0;
      filterArray0[1] = filter0;
      multiFilter0.setFilters(filterArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@attribute";
      stringArray0[1] = "  extends Filter {\n";
      stringArray0[2] = "numeric";
      stringArray0[3] = "@end";
      stringArray0[4] = "@attribute";
      stringArray0[5] = "relational";
      stringArray0[6] = "relational";
      stringArray0[7] = "Binary class";
      Filter.runFilter(filterArray0[1], stringArray0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      assertTrue(arrayList2.isEmpty());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3558258304206885
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 6);
      Discretize discretize0 = new Discretize();
      instances0.stringFreeStructure();
      arrayList0.trimToSize();
      arrayList0.ensureCapacity((-359));
      Attribute attribute0 = new Attribute("@data", (String) null, (-359));
      attribute0.toString();
      discretize0.m_NumBins = 0;
      StringTokenizer stringTokenizer0 = new StringTokenizer("real", "@relation");
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      int int0 = discretize0.m_NumBins;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.801150207871118
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getUseBinNumbers();
      discretize0.setInvertSelection(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.m_UseBinNumbers = true;
      discretize0.getCapabilities();
      discretize0.getOptions();
      discretize0.getUseEqualFrequency();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4459311899497576
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = stringArray0[0];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Zfi", arrayList0, 19);
      Discretize discretize0 = new Discretize();
      arrayList0.ensureCapacity(19);
      Properties properties0 = new Properties();
      Attribute attribute0 = new Attribute("nSWEKgx8AG-_Ba^+", (String) null, 19);
      Attribute attribute1 = new Attribute("integer", instances0, 3);
      attribute1.addStringValue(attribute0, 0);
      attribute1.enumerateValues();
      attribute1.addStringValue("numeric");
      arrayList0.add(attribute0);
      System.setCurrentTimeMillis(2);
      discretize0.setInputFormat(instances0);
      int int0 = discretize0.m_NumBins;
      Attribute.typeToString(2);
      Discretize discretize1 = new Discretize("numeric");
      Filter filter0 = Filter.makeCopy(discretize0);
      Properties properties1 = new Properties();
      filter0.input((Instance) null);
      Random.setNextRandom(896);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "KgdQV6fr^y&1'SA";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KgdQV6fr^y&1'SA");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vH?gpyZbGG^#A");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-45);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[][] doubleArray0 = new double[1][3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^zi4qh'/");
      discretize0.m_CutPoints = doubleArray0;
      byteArray0[0] = (byte) (-45);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      Random.setNextRandom((byte) (-45));
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      Random.setNextRandom((-1304));
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      discretize0.m_FindNumBins = false;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(625);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 625
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.4343252794844132
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 18);
      Discretize discretize0 = new Discretize();
      arrayList0.ensureCapacity((-342));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("@data", list0);
      Attribute attribute1 = new Attribute("@data", (String) null, (-342));
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      attribute1.toString();
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      attribute1.toString();
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale.forLanguageTag(".bsi");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '@data' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.091939703917201
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 6);
      Discretize discretize0 = new Discretize();
      arrayList0.trimToSize();
      Attribute attribute0 = new Attribute("@data", (String) null, (-342));
      attribute0.toString();
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1152.9396, (int[]) null, (-2028178998));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(1365.489667, (int[]) null, 18);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance2);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(0.0, (int[]) null, 18);
      DenseInstance denseInstance0 = new DenseInstance(18);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance6);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance(18, (int[]) null, 649);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance7);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1781274094291887
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 6);
      Discretize discretize0 = new Discretize();
      instances0.stringFreeStructure();
      arrayList0.trimToSize();
      arrayList0.ensureCapacity((-359));
      Attribute attribute0 = new Attribute("@data", (String) null, (-359));
      attribute0.toString();
      StringTokenizer stringTokenizer0 = new StringTokenizer("real", "@relation");
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      int int0 = discretize0.m_NumBins;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3725612711390283
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 18);
      Discretize discretize0 = new Discretize();
      arrayList0.ensureCapacity((-342));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("@data", list0);
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("@data", (String) null, (-342));
      attribute1.toString();
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      int[] intArray0 = new int[2];
      intArray0[1] = (-2063);
      discretize0.m_FindNumBins = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale.forLanguageTag("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, (int[]) null, 1);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '@data' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.883690599420432
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      discretize0.getOptions();
      discretize0.m_NumBins = (-2058005160);
      discretize0.m_ClassIndex = 10000;
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      Discretize.main(stringArray0);
      discretize0.m_DefaultCols = null;
      discretize0.m_UseBinNumbers = true;
      discretize0.attributeIndicesTipText();
      discretize0.getBins();
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      discretize0.getInvertSelection();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2111085617));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      discretize0.m_FindNumBins = true;
      discretize0.m_NumBins = 89;
      discretize0.getCapabilities();
      discretize0.getFindNumBins();
      int int0 = 98;
      try { 
        Filter.makeCopies(discretize0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.466035346895876
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tUse equal-frequency instead of equal-width discretization.");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.getCapabilities();
      discretize0.getRevision();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8964";
      Discretize.main(stringArray0);
      discretize0.m_IgnoreClass = true;
      discretize0.getOptions();
      discretize0.listOptions();
      int int0 = (-3636);
      discretize0.getCutPoints((-3636));
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-2116360694));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("<\"s.");
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-750.416832610623);
      doubleArray1[1] = (-1.7976931348623157E308);
      doubleArray1[2] = (-3545.464842716);
      doubleArray1[3] = (-474.612287723181);
      doubleArray1[4] = (-2726.8);
      doubleArray1[5] = 2687.873212051984;
      doubleArray1[6] = (-474.612287723181);
      doubleArray1[7] = 1132.1622;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2687.873212051984;
      doubleArray2[1] = (-3545.464842716);
      doubleArray2[2] = (-474.612287723181);
      doubleArray2[3] = 2687.873212051984;
      doubleArray2[4] = (-750.416832610623);
      doubleArray2[5] = (-1.7976931348623157E308);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-750.416832610623);
      doubleArray3[1] = 2687.873212051984;
      doubleArray3[2] = 2687.873212051984;
      doubleArray3[3] = (-3545.464842716);
      doubleArray3[4] = (-474.612287723181);
      doubleArray3[5] = (-1.7976931348623157E308);
      doubleArray3[6] = (-474.612287723181);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 2.0;
      doubleArray4[1] = (-1.7976931348623157E308);
      doubleArray4[2] = (-2726.8);
      doubleArray4[3] = 2687.873212051984;
      doubleArray4[4] = (-750.416832610623);
      doubleArray4[5] = (-1.7976931348623157E308);
      doubleArray4[6] = (-2726.8);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 2687.873212051984;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 1132.1622;
      doubleArray6[1] = 2.0;
      doubleArray6[2] = (-2726.8);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray4[3] = 1132.1622;
      doubleArray7[1] = (-2726.8);
      doubleArray7[2] = (-474.612287723181);
      doubleArray7[3] = Double.POSITIVE_INFINITY;
      doubleArray7[4] = (-474.612287723181);
      doubleArray7[5] = (-3545.464842716);
      doubleArray0[6] = doubleArray7;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.m_DefaultCols = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      discretize0.m_UseBinNumbers = false;
      discretize0.m_FindNumBins = false;
      discretize0.getCutPoints(6);
      // Undeclared exception!
      try { 
        discretize0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " is not assignable fro5 ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " is not assignable fro5 ");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, " is not assignable fro5 ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, " is not assignable fro5 ");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-45);
      byteArray0[0] = (byte) (-45);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-45);
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The following packages will be upgraded in order to install ");
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 6);
      Discretize discretize0 = new Discretize(".arff");
      arrayList0.trimToSize();
      Attribute attribute0 = new Attribute("@data", (String) null, (-342));
      attribute0.toString();
      arrayList0.add(attribute0);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at .arff
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5719579500515657
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize("-B");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-B";
      stringArray0[1] = "weka.filters.SimpleBatchFilter";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"weka.filters.SimpleBatchFilter\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "lJ0g*Cj9e";
      stringArray0[2] = "lJ0g*Cj9e";
      stringArray0[3] = "lJ0g*Cj9e";
      stringArray0[5] = "lJ0g*Cj9e";
      stringArray0[6] = "lJ0g*Cj9e";
      double[] doubleArray0 = new double[6];
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 18;
      doubleArray0[1] = (double) 18;
      doubleArray1[2] = (double) 18;
      doubleArray1[3] = (double) 18;
      doubleArray1[4] = (double) 18;
      doubleArray1[5] = (double) 18;
      doubleArray1[6] = (double) 18;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(18);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(18);
      binarySparseInstance1.dataset();
      Discretize discretize0 = new Discretize("\tInvert matching sense of column indexes.");
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      int int0 = 89;
      // Undeclared exception!
      try { 
        discretize0.findNumBins(89);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.016095749105256
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = stringArray0[0];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Zfi", arrayList0, 19);
      Discretize discretize0 = new Discretize();
      arrayList0.ensureCapacity(41);
      Properties properties0 = new Properties();
      Attribute attribute0 = new Attribute("nSWEKgx8AG-_Ba^+", (String) null, 19);
      Attribute attribute1 = new Attribute("integer", instances0, 3);
      attribute1.addStringValue(attribute0, 0);
      attribute1.enumerateValues();
      attribute1.addStringValue("numeric");
      arrayList0.add(attribute0);
      System.setCurrentTimeMillis(2);
      discretize0.setInputFormat(instances0);
      int int0 = discretize0.m_NumBins;
      Attribute.typeToString(2);
      Discretize discretize1 = new Discretize("numeric");
      Discretize discretize2 = (Discretize)Filter.makeCopy(discretize0);
      Range range0 = new Range("real");
      discretize1.m_DiscretizeCols = range0;
      Properties properties1 = new Properties();
      discretize2.m_FindNumBins = true;
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      Discretize discretize3 = new Discretize();
      discretize2.batchFinished();
      try { 
        discretize2.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "lvCj9e";
      Filter.runFilter(allFilter0, stringArray0);
      stringArray0[1] = "lvCj9e";
      stringArray0[2] = "lvCj9e";
      stringArray0[3] = "lvCj9e";
      stringArray0[4] = "lvCj9e";
      stringArray0[5] = "lvCj9e";
      stringArray0[6] = "lvCj9e";
      Filter.runFilter(allFilter0, stringArray0);
      Discretize discretize0 = new Discretize("lvCj9e");
      discretize0.getAttributeIndices();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      Discretize discretize1 = new Discretize();
      discretize1.setOutputFormat();
      discretize1.setInvertSelection(true);
      boolean boolean0 = discretize1.getInvertSelection();
      boolean boolean1 = discretize1.getUseBinNumbers();
      assertFalse(boolean1 == boolean0);
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getFindNumBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Properties properties4 = new Properties(properties2);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties2);
      Properties properties5 = new Properties();
      Properties properties6 = new Properties();
      Properties properties7 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties7);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties4);
      Object object0 = new Object();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties6);
      Discretize discretize0 = new Discretize("'");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'", arrayList0, 1872);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String string0 = "ZI@`-bv5N<";
      Instances instances0 = new Instances("ZI@`-bv5N<", arrayList0, 6);
      Discretize discretize0 = new Discretize();
      arrayList0.trimToSize();
      arrayList0.ensureCapacity((-61));
      arrayList0.ensureCapacity(373);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KgdQV6fr^y&1'SA");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KgdQV6fr^y&1'SA");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[][] doubleArray0 = new double[1][3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vH?gpyZbGG^#A");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^ziZqh'");
      discretize0.m_CutPoints = doubleArray0;
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-556));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -556
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KgdQV6fr^y&1'SA");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KgdQV6fr^y&1'SA");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[][] doubleArray0 = new double[10][3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vPze>xWfW`:_.");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^ziZqh'");
      discretize0.m_CutPoints = doubleArray0;
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-556));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -556
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      String[] stringArray0 = new String[7];
      stringArray0[4] = stringArray0[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Discretize discretize0 = new Discretize();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      discretize0.setFindNumBins(true);
      Locale locale1 = Locale.FRANCE;
      locale0.getDisplayCountry(locale1);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set1);
      Attribute attribute0 = new Attribute("r+c $@SE2", list0);
      double[][] doubleArray0 = new double[8][3];
      binarySparseInstance0.copy();
      discretize0.getBins();
      discretize0.getBins();
      Random.setNextRandom(2);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "lJ0g*Cj9e";
      stringArray0[1] = "lJ0g*Cj9e";
      stringArray0[2] = "lJ0g*Cj9e";
      stringArray0[3] = "lJ0g*Cj9e";
      stringArray0[5] = "lJ0g*Cj9e";
      stringArray0[6] = "lJ0g*Cj9e";
      double[] doubleArray0 = new double[7];
      MultiFilter multiFilter0 = new MultiFilter();
      Filter[] filterArray0 = new Filter[2];
      filterArray0[0] = (Filter) multiFilter0;
      AllFilter allFilter0 = new AllFilter();
      filterArray0[1] = (Filter) allFilter0;
      multiFilter0.setFilters(filterArray0);
      Discretize discretize0 = new Discretize("lJ0g*Cj9e");
      Filter.runFilter(multiFilter0, stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties2 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties2);
      properties1.putAll(protectedProperties2);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Properties properties3 = new Properties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      Properties properties4 = new Properties(protectedProperties1);
      Object object0 = new Object();
      protectedProperties1.propertyNames();
      Properties properties5 = new Properties();
      properties3.putAll(protectedProperties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties4.forEach(biConsumer0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties1);
      properties4.propertyNames();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties5);
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties4.forEach(biConsumer1);
      Properties properties6 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties1);
      UnaryOperator.identity();
      Object object1 = new Object();
      properties0.replace(object1, (Object) "");
      Object object2 = new Object();
      Object object3 = new Object();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties4);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties6);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties5);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(properties1);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.convertInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getAttributeIndices();
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " is not assignable from ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vH?gpyZbGG^#A");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vH?gpyZbGG^#A");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":p~-~(GxtxfthB-");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-17);
      byteArray0[7] = (byte) (-17);
      byteArray0[8] = (byte) (-17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval((byte) (-17));
      discretize0.setOutputFormat();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals((-17.0), double0, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties2 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties2);
      properties1.putAll(protectedProperties2);
      Properties properties3 = new Properties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      Properties properties4 = new Properties(protectedProperties1);
      protectedProperties1.propertyNames();
      Properties properties5 = new Properties();
      properties3.putAll(protectedProperties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties4.forEach(biConsumer0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      properties4.propertyNames();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties3.forEach(biConsumer1);
      Properties properties6 = new Properties();
      protectedProperties2.remove((Object) properties4, (Object) protectedProperties5);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 3282);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      sequenceInputStream1.close();
      bufferedInputStream0.markSupported();
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3282);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.4087256481539425
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.globalInfo();
      String[] stringArray0 = discretize0.getOptions();
      Discretize discretize1 = new Discretize("");
      discretize0.getCapabilities();
      discretize1.attributeIndicesTipText();
      Discretize discretize2 = new Discretize("weka/core/Capabilities.props");
      Filter.runFilter(discretize2, stringArray0);
      Discretize discretize3 = new Discretize();
      assertFalse(discretize3.getUseEqualFrequency());
      
      discretize3.setOptions(stringArray0);
      assertEquals(10, discretize3.getBins());
      assertFalse(discretize3.getUseBinNumbers());
      assertFalse(discretize3.getMakeBinary());
      assertEquals((-1.0), discretize3.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(4, stringArray0.length);
      
      discretize0.setOutputFormat();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(true);
      discretize0.setInvertSelection(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.setMakeBinary(true);
      discretize0.getCapabilities();
      discretize0.useEqualFrequencyTipText();
      discretize0.useBinNumbersTipText();
      // Undeclared exception!
      try { 
        discretize0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      Filter.runFilter(discretize0, (String[]) null);
      int int0 = 2296;
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties2 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties2);
      properties1.putAll(protectedProperties2);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      properties0.replace((Object) protectedProperties1, (Object) protectedProperties4);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      Properties properties3 = new Properties();
      properties2.put(protectedProperties1, properties1);
      protectedProperties1.propertyNames();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties3);
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties2);
      properties4.put(protectedProperties1, protectedProperties0);
      properties2.stringPropertyNames();
      protectedProperties0.propertyNames();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties3);
      properties4.clear();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(properties3);
      Discretize discretize0 = new Discretize();
      Random.setNextRandom((-799));
      String string0 = discretize0.makeBinaryTipText();
      assertEquals("Make resulting attributes binary.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.798534689126567
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("sU1YSK/_iX?W(-7'X");
      discretize0.setInvertSelection(true);
      discretize0.m_MakeBinary = true;
      discretize0.makeBinaryTipText();
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.6151104036339126
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "lJ0g*Cj9e";
      stringArray0[1] = "lJ0g*Cj9e";
      Discretize discretize0 = new Discretize("b:Yb@RoibWT~T%x_#");
      discretize0.m_MakeBinary = true;
      discretize0.getOptions();
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.runFilter(multiFilter0, stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.7132389994392954
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("sU1YSK/_iX?W(-7'X");
      discretize0.setInvertSelection(true);
      discretize0.m_MakeBinary = true;
      discretize0.makeBinaryTipText();
      discretize0.getOptions();
      discretize0.getMakeBinary();
      Discretize discretize1 = new Discretize("sU1YSK/_iX?W(-7'X");
      // Undeclared exception!
      try { 
        discretize1.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " is not assignable from ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " is not assignable from ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " is not assignable from ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!{=D?!d2&,o-XHj_Yg");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vH?gpyZbGG^#A");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vH?gpyZbGG^#A");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(false);
      String string0 = discretize0.binsTipText();
      assertEquals("Number of bins.", string0);
      
      String string1 = discretize0.findNumBinsTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string1);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9nCv");
      discretize0.setOutputFormat();
      discretize0.getInvertSelection();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "lJ0gCj9e";
      stringArray0[1] = "lJ0gCj9e";
      stringArray0[2] = "lJ0gCj9e";
      stringArray0[3] = "lJ0gCj9e";
      stringArray0[4] = "lJ0gCj9e";
      stringArray0[5] = "lJ0gCj9e";
      stringArray0[6] = "lJ0gCj9e";
      double[] doubleArray0 = new double[7];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      DenseInstance denseInstance0 = new DenseInstance((-3.447168974943226), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(denseInstance0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      // Undeclared exception!
      try { 
        denseInstance1.deleteAttributeAt(18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.findNumBinsTipText();
      Filter.makeCopies(discretize0, 1);
      Discretize discretize1 = new Discretize("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getFindNumBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getUseBinNumbers());
      
      discretize0.setUseEqualFrequency(false);
      String string0 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      
      String string1 = discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.1360570143460755
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Discretize discretize0 = new Discretize("ri&cid%m1{>5");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ri&cid%m1{>5";
      stringArray0[1] = "ri&cid%m1{>5";
      stringArray0[2] = "ri&cid%m1{>5";
      stringArray0[3] = "ri&cid%m1{>5";
      stringArray0[4] = "ri&cid%m1{>5";
      stringArray0[5] = "ri&cid%m1{>5";
      stringArray0[6] = "ri&cid%m1{>5";
      stringArray0[7] = "ri&cid%m1{>5";
      discretize0.setOptions(stringArray0);
      discretize0.m_UseEqualFrequency = true;
      discretize0.getOptions();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Discretize discretize0 = new Discretize("b:Yb@RoibWT~T%x_#");
      String[] stringArray0 = discretize0.getOptions();
      MultiFilter multiFilter0 = new MultiFilter();
      Filter[] filterArray0 = new Filter[4];
      filterArray0[0] = (Filter) discretize0;
      filterArray0[1] = (Filter) multiFilter0;
      filterArray0[2] = (Filter) multiFilter0;
      filterArray0[3] = (Filter) discretize0;
      multiFilter0.setFilters(filterArray0);
      Filter.runFilter(discretize0, stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " is not assignable from ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vH?gpyZbGG^#A");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'B2of2'");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KgdQV6fr^y&1'SA");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vH?gpyZbGG^#A");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-45);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[][] doubleArray0 = new double[1][3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vH?gpyZbGG^#A");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^zi4qh'/");
      discretize0.m_CutPoints = doubleArray0;
      byteArray0[0] = (byte) (-45);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      Random.setNextRandom((byte) (-45));
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      Random.setNextRandom((-1304));
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KgdQV6fr^y&1'SA");
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " is not assignable from ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vH?gpyZbGG^#A");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vH?gpyZbGG^#A");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vH?gpyZbGG^#A");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vH?gpyZbGG^#A");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("vH?gpyZbGG^#A");
      Properties properties0 = new Properties();
      discretize0.setAttributeIndices(" is not assignable from ");
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      String string0 = discretize0.getAttributeIndices();
      assertEquals("is not assignable from", string0);
      
      discretize0.getCutPoints((byte)37);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties2 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties2);
      properties1.putAll(protectedProperties2);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Properties properties3 = new Properties();
      properties0.replace((Object) protectedProperties1, (Object) properties3);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      Properties properties4 = new Properties();
      properties2.put(protectedProperties1, properties1);
      protectedProperties1.propertyNames();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties4);
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties2);
      protectedProperties0.propertyNames();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties0);
      Properties properties6 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties3);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      sequenceInputStream0.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 269);
      sequenceInputStream0.close();
      bufferedInputStream0.markSupported();
      Object object0 = new Object();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      protectedProperties4.computeIfAbsent(protectedProperties9, function0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties5);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(properties6);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getFindNumBins();
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties2 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties2);
      properties1.putAll(protectedProperties2);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      Properties properties3 = new Properties(protectedProperties1);
      Object object0 = new Object();
      protectedProperties1.propertyNames();
      Properties properties4 = new Properties();
      properties2.putAll(protectedProperties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties3.forEach(biConsumer0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties1);
      properties3.propertyNames();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties5);
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties1);
      UnaryOperator.identity();
      Object object1 = new Object();
      properties0.replace(object1, (Object) "\"}zd");
      Object object2 = new Object();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties4);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties1);
      Properties properties6 = new Properties();
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(properties6);
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-1647));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties2);
      Discretize discretize0 = new Discretize("az#=90L[Y4IT%C!o");
      System.setCurrentTimeMillis(20);
      String string0 = discretize0.invertSelectionTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1013.796030455);
      doubleArray0[4] = (-1130.1842265493758);
      doubleArray0[5] = (-1253.962523);
      doubleArray0[6] = (-460.429818229605);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-460.429818229605);
      doubleArray1[1] = 3240.079953295;
      doubleArray1[2] = (-460.429818229605);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1253.962523);
      double[] doubleArray2 = new double[7];
      doubleArray2[1] = (-1253.962523);
      doubleArray2[2] = 3240.079953295;
      doubleArray2[4] = (-1013.796030455);
      doubleArray2[5] = (-460.429818229605);
      doubleArray2[6] = 0.0;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-1130.1842265493758);
      doubleArray3[1] = 3240.079953295;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = (-1253.962523);
      doubleArray3[5] = 0.0;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 3240.079953295;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 3240.079953295;
      doubleArray6[1] = 467.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-1253.962523);
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 467.0;
      doubleArray7[2] = (-460.429818229605);
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 467.0;
      doubleArray7[5] = 5.70001;
      doubleArray7[6] = (-1013.796030455);
      doubleArray7[7] = (-1253.962523);
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties2 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties2);
      Properties properties3 = new Properties(protectedProperties1);
      properties1.putAll(properties3);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties3);
      Properties properties4 = new Properties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      Properties properties5 = new Properties();
      properties2.put(protectedProperties1, properties1);
      protectedProperties1.propertyNames();
      Properties properties6 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      Properties properties7 = new Properties();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties6);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      protectedProperties7.propertyNames();
      Properties properties8 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties0);
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      protectedProperties6.computeIfAbsent("'B", function0);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties7);
      Discretize discretize0 = new Discretize("'B");
      discretize0.setBins(66);
      Random.setNextRandom(16);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte) (-113);
      mockFileInputStream0.read(byteArray0, (int) (byte)124, (-634));
      sequenceInputStream0.markSupported();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream0, mockFileInputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.getBinRangesString(255);
      Random.setNextRandom((-1914));
      Random.setNextRandom((byte)7);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.8221303550794707
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      intArray0[1] = 86;
      Random.setNextRandom(1345);
      discretize0.setAttributeIndicesArray(intArray0);
      Filter.runFilter(discretize0, (String[]) null);
      int int0 = 2278;
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.8221303550794707
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      int int0 = 86;
      Random.setNextRandom(1345);
      discretize0.setAttributeIndicesArray(intArray0);
      Filter.runFilter(discretize0, (String[]) null);
      int int1 = 2278;
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }
}
