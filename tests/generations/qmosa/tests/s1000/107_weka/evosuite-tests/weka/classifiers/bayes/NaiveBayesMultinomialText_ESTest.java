/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 01:41:00 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.meta.Bagging;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.BottomUpConstructor;
import weka.core.neighboursearch.balltrees.MiddleOutConstructor;
import weka.core.neighboursearch.balltrees.TopDownConstructor;
import weka.core.stemmers.IteratedLovinsStemmer;
import weka.core.stemmers.LovinsStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText0.setPeriodicPruning(1176);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.m_t = (-1332.87401);
      IteratedLovinsStemmer iteratedLovinsStemmer2 = new IteratedLovinsStemmer();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3172681253748966
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = MockFile.createTempFile("/v]Wju=oZ]bznm5be#", "/v]Wju=oZ]bznm5be#");
      file0.toPath();
      naiveBayesMultinomialText0.setStopwords(file0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(2565);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2565);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.setMinWordFrequency(16);
      naiveBayesMultinomialText0.getOptions();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.433329464829618
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3Gc0rI JUmn8wP");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteStringAttributes();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(105);
      testInstances0.setNumInstancesRelational(18);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      naiveBayesMultinomialText0.toString();
      FileSystemHandling.createFolder(evoSuiteFile0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(2075.147223584, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(3.0, doubleArray0);
      Instances instances1 = testInstances0.generate();
      denseInstance1.setDataset(instances1);
      naiveBayesMultinomialText0.distributionForInstance(denseInstance1);
      naiveBayesMultinomialText0.LNormTipText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) denseInstance1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.68082764903455
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_tokenizer = null;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3594084030935805
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3Gc0rI JUmn8wP");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteStringAttributes();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(105);
      testInstances0.setNumInstancesRelational(18);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      naiveBayesMultinomialText0.toString();
      FileSystemHandling.createFolder(evoSuiteFile0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(2075.147223584, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(3.0, doubleArray0);
      Instances instances1 = testInstances0.generate();
      denseInstance1.setDataset(instances1);
      naiveBayesMultinomialText0.distributionForInstance(denseInstance1);
      Random.setNextRandom(117);
      try { 
        naiveBayesMultinomialText0.updateClassifier(denseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.661550160681755
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification";
      naiveBayesMultinomialText0.setMinWordFrequency(0);
      stringArray0[1] = "NaiveBayesMultinomialText: No model built yet.\n";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(4015L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.getStemmer();
      DenseInstance denseInstance0 = new DenseInstance(640);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.2264888225220867
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3Gc0rI Umn8wP");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteStringAttributes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[4];
      intArray0[0] = (-2);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-2);
      Instance instance0 = BallNode.calcCentroidPivot((-1), (-2), intArray0, instances0);
      instances0.add(instance0);
      naiveBayesMultinomialText0.m_periodicP = (-2);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(105);
      testInstances0.setNumInstancesRelational(18);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(16);
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      String string0 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.730292338790394
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = MockFile.createTempFile("/v]Wju=oZ]bznm5be#", "g?_(y:E9");
      naiveBayesMultinomialText0.setStopwords(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/v]Wju=oZ]bznm5be#0g?_(\\y:E9");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Random.setNextRandom(2565);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2565);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2565);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance2, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2797872636150824
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3Gc0rI Umn8wP");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = (-2);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) wordTokenizer0;
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(105);
      testInstances0.setNumInstancesRelational((-2));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-1), doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance3, false);
      Random.setNextRandom((-1));
      naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance1);
      // Undeclared exception!
      try { 
        binarySparseInstance0.stringValue((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.m_stopwordsFile = null;
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.getStopwords();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8048370781665377
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 79;
      naiveBayesMultinomialText0.setNorm((-1.0E100));
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals((-1.0E100), naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6211272758470872
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      Filter[] filterArray0 = new Filter[5];
      filterArray0[0] = (Filter) multiFilter0;
      filterArray0[1] = (Filter) multiFilter0;
      filterArray0[2] = (Filter) multiFilter0;
      filterArray0[3] = (Filter) multiFilter0;
      filterArray0[4] = (Filter) multiFilter0;
      multiFilter0.setFilters(filterArray0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      capabilities0.enableAllAttributes();
      SystemInUtil.addInputLine("0");
      DenseInstance denseInstance0 = new DenseInstance(226);
      denseInstance0.setDataset(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 226;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 16;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) 226;
      DenseInstance denseInstance1 = new DenseInstance((-2), doubleArray0);
      Instances instances1 = testInstances0.generate();
      instances1.setClassIndex((-1));
      denseInstance1.setDataset(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText1.distributionForInstance(denseInstance1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Size: 10
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.108906772045218
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3Gc0rI JUmn8wP");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = 15.0;
      doubleArray0[4] = (-1054.35495383707);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = 1.0001;
      DenseInstance denseInstance0 = new DenseInstance(15.0, doubleArray0);
      instances0.add((Instance) denseInstance0);
      instances0.deleteStringAttributes();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1810733004285683
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3Gc0rI Umn8wP");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteStringAttributes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(105);
      testInstances0.setNumInstancesRelational(18);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".arff");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DenseInstance denseInstance0 = new DenseInstance((-2), (double[]) null);
      DenseInstance denseInstance1 = null;
      try {
        denseInstance1 = new DenseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2267983649205267
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3Gc0rI JUmn8wP");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteStringAttributes();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm((-2));
      naiveBayesMultinomialText0.buildClassifier(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      int int0 = 406;
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      intArray0[3] = (-1);
      intArray0[4] = (-2);
      intArray0[5] = (-2);
      intArray0[6] = (-1);
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(intArray0, instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6141342688540803
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      Filter[] filterArray0 = new Filter[5];
      filterArray0[0] = (Filter) multiFilter0;
      filterArray0[1] = (Filter) multiFilter0;
      filterArray0[2] = (Filter) multiFilter0;
      filterArray0[3] = (Filter) multiFilter0;
      multiFilter0.getCapabilities();
      filterArray0[4] = (Filter) multiFilter0;
      multiFilter0.setFilters(filterArray0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      capabilities0.enableAllAttributes();
      SystemInUtil.addInputLine("0");
      DenseInstance denseInstance0 = new DenseInstance(226);
      denseInstance0.setDataset(instances0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.108872968847436
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteStringAttributes();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.m_leplace = 0.0;
      naiveBayesMultinomialText1.buildClassifier(instances0);
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      try { 
        topDownConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_t = 2079.529;
      naiveBayesMultinomialText0.setPeriodicPruning(1176);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer2 = new IteratedLovinsStemmer();
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals(1176, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4792137034100894
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|E78WcT1*|z");
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.m_leplace = 1.0;
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.setLNorm(0.0);
      naiveBayesMultinomialText0.stemmerTipText();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.listOptions();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9122";
      stringArray0[1] = "9122";
      stringArray0[2] = "Use word frequencies rather than binary bag of words representation";
      stringArray0[3] = "The tokenizing algorithm to use on the strings.";
      Tokenizer.runTokenizer(nGramTokenizer0, stringArray0);
      naiveBayesMultinomialText0.setTokenizer(nGramTokenizer0);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.normTipText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.normTipText();
      assertEquals(0.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.523020478958645
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.m_leplace = 1.0;
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.getRevision();
      boolean boolean0 = naiveBayesMultinomialText0.m_lowercaseTokens;
      naiveBayesMultinomialText0.setLNorm(0.0);
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.listOptions();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9122";
      stringArray0[1] = "9122";
      stringArray0[2] = "Use word frequencies rather than binary bag of words representation";
      stringArray0[3] = "The tokenizing algorithm to use on the strings.";
      Tokenizer.runTokenizer(nGramTokenizer0, stringArray0);
      naiveBayesMultinomialText0.setTokenizer(nGramTokenizer0);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.normTipText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.periodicPruningTipText();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2302982632284003
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3Gc0rI JUmn8wP");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteStringAttributes();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(105);
      testInstances0.setNumInstancesRelational(18);
      binarySparseInstance0.copy();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(2073.369375223281, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(3.0, doubleArray0);
      Instances instances1 = testInstances0.generate();
      denseInstance1.setDataset(instances1);
      naiveBayesMultinomialText0.distributionForInstance(denseInstance1);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(denseInstance1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-6.307332340782177);
      doubleArray0[1] = (-6.307332340782177);
      doubleArray0[2] = (-6.307332340782177);
      doubleArray0[3] = (-6.307332340782177);
      doubleArray0[4] = (-6.307332340782177);
      doubleArray0[5] = (-6.307332340782177);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.108838365573966
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3Gc0rI Umn8wP");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteStringAttributes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = (-2);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(105);
      testInstances0.setNumInstancesRelational(18);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(16);
      assertEquals(16, binarySparseInstance1.numValues());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning(1176);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer2 = new IteratedLovinsStemmer();
      int[] intArray0 = new int[7];
      intArray0[0] = 12;
      intArray0[1] = 2500;
      intArray0[2] = 12;
      intArray0[3] = 3070;
      intArray0[4] = (-1928);
      intArray0[5] = (-1928);
      intArray0[6] = 68;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3070, intArray0, (-1));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance3, false);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals(1176, naiveBayesMultinomialText0.getPeriodicPruning());
      
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText1.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.242212190971484
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ">G75E0G.;$U3oo";
      stringArray0[1] = ">G75E0G.;$U3oo";
      stringArray0[2] = "Qc ^jc-N";
      stringArray0[3] = "Qc ^jc-N";
      stringArray0[4] = "Ignore any words that don't occur bt least min frequency times in the training data. If periodc pruning is urned on, then the dictionary is pruned acording to'this value";
      stringArray0[5] = "Qc ^jc-N";
      stringArray0[6] = "Ignore any words that don't occur bt least min frequency times in the training data. If periodc pruning is urned on, then the dictionary is pruned acording to'this value";
      stringArray0[7] = "-tokenizer";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -tokenizer option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning(1176);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer2 = new IteratedLovinsStemmer();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[0];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("M1q", arrayList0, 1210);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4572637190629707
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(2565);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2565);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(16, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(sparseInstance1);
      naiveBayesMultinomialText0.tokenizeInstance(sparseInstance1, false);
      Random.setNextRandom(8);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Random.setNextRandom(2045222521);
      naiveBayesMultinomialText0.pruneDictionary();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.3142487148788504
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.3453915794619853
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-90);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_minWordP = 1.0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.getRevision();
      MockFile mockFile0 = new MockFile(")\ft:&PR7)\")PlbtV7");
      mockFile0.getAbsolutePath();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.reset();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.getOptions();
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 994);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.reset();
      mockFile0.deleteOnExit();
      System.setCurrentTimeMillis(0L);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.31400451463465
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.m_normalize = true;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      BallNode ballNode0 = new BallNode(1829, 1829, 1160);
      BallNode ballNode1 = ballNode0.m_Right;
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      BottomUpConstructor bottomUpConstructor1 = new BottomUpConstructor();
      BottomUpConstructor bottomUpConstructor2 = new BottomUpConstructor();
      try { 
        bottomUpConstructor2.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BottomUpConstructor", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-W";
      stringArray0[1] = "l";
      stringArray0[2] = "";
      MockFile mockFile0 = new MockFile(file0, "-W");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      stringArray0[3] = "}:\"ePG1p";
      stringArray0[4] = "The stemming algorithm to use on the words.";
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)39;
      doubleArray0[1] = (double) (byte)39;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-10.0), doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(233);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStopwords((File) null);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getLowercaseTokens();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 10.530508278909037;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      Random.setNextRandom(1694);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 1117;
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(105);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(2075.147223584, doubleArray0);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Random.setNextRandom(16);
      Bagging bagging0 = new Bagging();
      DenseInstance denseInstance1 = new DenseInstance(256);
      // Undeclared exception!
      try { 
        denseInstance1.stringValue(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Qc c-N";
      stringArray0[1] = "-tokenizer";
      stringArray0[2] = ">G75E0G.f$U3oo";
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.globalInfo();
      IteratedLovinsStemmer iteratedLovinsStemmer2 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer3 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer3.globalInfo();
      naiveBayesMultinomialText0.pruneDictionary();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratedLovinsStemmer iteratedLovinsStemmer4 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      iteratedLovinsStemmer3.toString();
      IteratedLovinsStemmer iteratedLovinsStemmer5 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer6 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer4.stemString(">G75E0G.f$U3oo");
      iteratedLovinsStemmer4.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      iteratedLovinsStemmer0.globalInfo();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      Random.setNextRandom(2384);
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8]jgl)VQS+d");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Qc c-N";
      TestInstances testInstances0 = new TestInstances();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(105);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Qc c-N");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) 16;
      doubleArray0[3] = (double) 16;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 16;
      doubleArray0[6] = (double) 105;
      doubleArray0[7] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1205.643640980908);
      doubleArray1[1] = (double) (-2);
      DenseInstance denseInstance1 = new DenseInstance((-1), doubleArray1);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2323.2381174515, doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.stemmerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.useWordFrequenciesTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      binarySparseInstance0.dataset();
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.toString();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      iteratedLovinsStemmer1.globalInfo();
      naiveBayesMultinomialText0.pruneDictionary();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instance instance0 = null;
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.230330547328481
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3Gc0rI JUmn8wP");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(105);
      testInstances0.setNumInstancesRelational(18);
      binarySparseInstance0.copy();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(2073.369375223281, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(3.0, doubleArray0);
      Instances instances1 = testInstances0.generate();
      instances1.setClassIndex(1);
      denseInstance1.setDataset(instances1);
      naiveBayesMultinomialText0.distributionForInstance(denseInstance1);
      boolean boolean0 = true;
      naiveBayesMultinomialText0.m_leplace = (double) 16;
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9698092248500694
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      capabilities0.getClassCapabilities();
      naiveBayesMultinomialText0.m_lowercaseTokens = false;
      naiveBayesMultinomialText0.setMinWordFrequency((-1.0));
      naiveBayesMultinomialText0.stemmerTipText();
      File file0 = MockFile.createTempFile("weka/core/Capabilities.props", "w**1hOOM>");
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.setNorm((-1.0));
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.LNormTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.900015079480596
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = ">G75E0G.f$U3oo";
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      stringArray0[3] = stringArray0[0];
      naiveBayesMultinomialText0.getOptions();
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.stemmerTipText();
      int[] intArray0 = new int[0];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.stopwordsTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      boolean boolean0 = false;
      Instance instance0 = null;
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.269394275120508
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Discretize discretize0 = new Discretize();
      discretize0.toString();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.357824131162865
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.reset();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText1.useStopListTipText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      double[] doubleArray0 = new double[5];
      DenseInstance denseInstance0 = new DenseInstance(226);
      // Undeclared exception!
      try { 
        denseInstance0.toString(955);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.188947438429127
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Qc c-N";
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      stringArray0[1] = "-tokenizer";
      stringArray0[2] = ">G75E0G.;$U3oo";
      stringArray0[3] = "Qc c-N";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "-tokenizer";
      stringArray0[7] = "Ignore any words that don't occur at least min frequency times in the training data. If periodc pruning is urned on, then the dictionary is pruned acording to this value";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer2 = new IteratedLovinsStemmer();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 45.0;
      doubleArray0[1] = 45.0;
      doubleArray0[2] = 45.0;
      SparseInstance sparseInstance0 = new SparseInstance(45.0, doubleArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.730292338790394
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = MockFile.createTempFile("/v]Wju=oZ]bznm5be#", "/v]Wju=oZ]bznm5be#");
      file0.toPath();
      naiveBayesMultinomialText0.setStopwords(file0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(2565);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2565);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2565;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[1] = (double) 16;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2565);
      doubleArray0[2] = (double) 16;
      doubleArray0[3] = (double) 16;
      doubleArray0[4] = (double) 16;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(16, doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance2);
      binarySparseInstance2.setMissing(16);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      System.setCurrentTimeMillis(16);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance2, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getTokenizer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Tokenizer tokenizer0 = naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning(1176);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "o`FA\"at=sCgNp0V\u0001");
      BallNode ballNode0 = new BallNode(1397, (-1), (-445));
      BallNode ballNode1 = new BallNode((-1), 1176, 1176);
      BallNode ballNode2 = ballNode0.m_Right;
      Random.setNextRandom(17);
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals(1176, int0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = ">G75E0G.f$U3oo";
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, int0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1.0;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.getStemmer();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Random.setNextRandom(4588);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3Gc0rI JUmn8wP");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(105);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(2075.147223584, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(3.0, doubleArray0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3Gc0rI JUmn8wP");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(105);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(2075.147223584, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(16, doubleArray0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[5];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3478.3574556054923;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1.0E-4;
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      file0.getAbsoluteFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-231.3027319648053);
      doubleArray0[1] = (-231.3027319648053);
      doubleArray0[2] = (-231.3027319648053);
      doubleArray0[3] = (-231.3027319648053);
      doubleArray0[4] = (-231.3027319648053);
      doubleArray0[5] = (-231.3027319648053);
      doubleArray0[6] = (-231.3027319648053);
      doubleArray0[7] = (-231.3027319648053);
      doubleArray0[8] = (-231.3027319648053);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xj,a_S/ML $Wsw+p|4_");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-231.3027319648053), doubleArray0);
      String string0 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string0);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.m_norm = 1.0;
      String string1 = naiveBayesMultinomialText1.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string1);
      
      naiveBayesMultinomialText1.getLowercaseTokens();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.setNormalizeDocLength(false);
      assertFalse(naiveBayesMultinomialText2.getNormalizeDocLength());
      
      String string2 = naiveBayesMultinomialText0.LNormTipText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals("The LNorm to use for document length normalization.", string2);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.108906772045218
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteStringAttributes();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.reset();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      int int0 = 105;
      int int1 = (-2082);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-2082));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.3117676775595015
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Qc c-N";
      stringArray0[1] = "-tokenizer";
      stringArray0[2] = ">G75E0G.;$U3oo";
      stringArray0[3] = "Qc c-N";
      stringArray0[4] = "";
      naiveBayesMultinomialText0.setLNorm(6.0);
      stringArray0[5] = "Qc c-N";
      stringArray0[6] = "-tokenizer";
      stringArray0[7] = "Ignore any words that don't occur at least min frequency times in the training data. If periodc pruning is urned on, then the dictionary is pruned acording to this value";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.269394275120508
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_norm = (-2973.724583);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(1176);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      naiveBayesMultinomialText0.pruneDictionary();
      double double0 = naiveBayesMultinomialText0.getLNorm();
      assertEquals(1176.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.218770771174388
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteStringAttributes();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      testInstances0.setNumInstancesRelational(18);
      naiveBayesMultinomialText0.toString();
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1941.99147515;
      doubleArray0[1] = 1941.99147515;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1941.99147515, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Instance instance0 = null;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "-tokenizer";
      stringArray0[2] = ">G75E0G.f$U3oo";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      stringArray0[3] = "";
      stringArray0[4] = "";
      Random.setNextRandom(2565);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2565);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "-tokenizer";
      stringArray0[2] = ">G75E0G.f$U3oo";
      naiveBayesMultinomialText0.getUseStopList();
      stringArray0[3] = "";
      stringArray0[4] = "";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      stringArray0[5] = "";
      int[] intArray0 = new int[3];
      intArray0[0] = 72;
      intArray0[1] = 72;
      intArray0[2] = 72;
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.measureBayesScore();
      Instances instances0 = bayesNet0.m_Instances;
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(72, 72, intArray0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }
}
