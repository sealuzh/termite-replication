/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 09 22:38:16 GMT 2020
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1231670442800543
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "JG9lWDrb=4BE6A+Odm\"";
      stringArray0[1] = "JG9lWDrb=4BE6A+Odm\"";
      stringArray0[2] = "uvl";
      stringArray0[3] = "editor";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("An annotation. It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("ahpc:?G:O");
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("an annot. it is not us by th standard bibliograph styl, but may be us by other that produc an annot bibliograph.");
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer1.stemString("GEoE<*/no3C;U83KW7");
      lovinsStemmer2.toString();
      lovinsStemmer1.stemString("an annot. it is not us by th standard bibliograph styl, but may be us by other that produc an annot bibliograph.");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1312095594687475
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("[`{JWs6Y?m.K42Pv");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("onsert");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("Indices from stable sort (doubles): ");
      assertEquals("indic from st sort (doubl): ", string1);
      
      lovinsStemmer1.stem("$Revision: 8080 $");
      lovinsStemmer0.toString();
      lovinsStemmer1.stem("4;w8^D_]kWmbGgY");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("Normalized again (doubles): ");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer0.stem("lud");
      String string2 = lovinsStemmer2.stem("4;w8^D_]kWmbGgY");
      assertEquals("4;w8^d_]kwmbg", string2);
      
      String string3 = lovinsStemmer1.stemString("MONTH");
      assertEquals("month", string3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.2184131209531697
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[0] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stem("The sponsoring institution of a technical report.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("iful");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("the sponsoring institution of a technical report.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      String string1 = lovinsStemmer1.stem("istr");
      assertEquals("ister", string1);
      
      lovinsStemmer0.stem("INBOOK");
      String string2 = lovinsStemmer1.stemString("ix");
      assertEquals("ix", string2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1255192108162224
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.";
      lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      stringArray0[1] = "a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.";
      lovinsStemmer0.stemString("Max index (ints): ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("doublert");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("ational");
      String string1 = lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer2.stemString("Max index (ints): ");
      lovinsStemmer2.stem("@#N3%u1hoejo(X*`C#");
      lovinsStemmer3.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("@#N3%u1hoejo(X*`C#");
      lovinsStemmer1.stemString("@#N3%u1hoejo(X*`C#");
      lovinsStemmer2.toString();
      lovinsStemmer0.toString();
      lovinsStemmer2.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("7ybb+_#b:cfm@{.ert");
      assertEquals("7yb+_#b:cfm@{.ers", string2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1231492302294936
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("The organization that sponsors a conference or that publishes a manual.");
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.toString();
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString("th organ that sponsor a confer or that publish a manu.");
      lovinsStemmer4.toString();
      lovinsStemmer3.getRevision();
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer3.getRevision();
      assertEquals("8034", string2);
      
      lovinsStemmer3.globalInfo();
      lovinsStemmer3.globalInfo();
      String string3 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1719685221495726
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[0] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stem("The sponsoring institution of a technical report.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("` #E8E40geqk,*5nN");
      assertEquals("` #e8e40geqk,*5n", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      lovinsStemmer0.globalInfo();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[1] = "8034";
      stringArray1[2] = "";
      stringArray1[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[4] = "";
      stringArray1[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1387685664344056
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("i");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "i";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("S");
      String string0 = lovinsStemmer0.stemString("ha4vad");
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stem("HUbvEy<'GdQe+<b");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("arizer");
      lovinsStemmer2.stemString("erid");
      lovinsStemmer1.stem("erid");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("'w*zeyW|L)sE_D");
      lovinsStemmer3.toString();
      lovinsStemmer2.stemString("uasend");
      lovinsStemmer0.stemString("^");
      lovinsStemmer2.stem("i");
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2578552613565008
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[18];
      stringArray0[0] = "";
      stringArray0[1] = "-l";
      stringArray0[2] = "Proceeding of the Sixteenth International Conference on Machine Learning";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer3.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string0 = lovinsStemmer4.getRevision();
      lovinsStemmer3.getRevision();
      lovinsStemmer1.stemString("iev");
      lovinsStemmer3.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string1 = lovinsStemmer5.getRevision();
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0990712259223907
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      lovinsStemmer0.stemString("UeIEv");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1730606365894656
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Array-Dimensions of'yew int[][]{{1,2,},{4,5,6}}'v ");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "b%/, ,DZ<V{&Lf^)tZt";
      stringArray0[1] = "Array-Dimensions of'yew int[][]{{1,2,},{4,5,6}}'v ";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "arra-dimens of'yew int[][]{{1,2,},{4,5,6}}'v ";
      stringArray0[5] = "arra-dimens of'yew int[][]{{1,2,},{4,5,6}}'v ";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("arra-dimens of'yew int[][]{{1,2,},{4,5,6}}'v ");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("isation");
      lovinsStemmer0.stemString("Array-Dimensions of'yew int[][]{{1,2,},{4,5,6}}'v ");
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2092254706455021
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      lovinsStemmer0.getRevision();
      stringArray0[1] = "-l";
      stringArray0[2] = "Proceeding of the Sixteenth International Conference on Machine Learning";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("YEAR");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer1.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      String string1 = lovinsStemmer1.stemString("Can't construct a path to file relative to user dir.");
      assertEquals("can't construc a path to fil rel to user dir.", string1);
      
      String string2 = lovinsStemmer1.getRevision();
      assertEquals("8034", string2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.198287319086113
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[8];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("KEYWORDS");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string0 = lovinsStemmer2.getRevision();
      assertEquals("8034", string0);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stem("KEYWORDS");
      assertEquals("keyword", string1);
      
      lovinsStemmer4.getTechnicalInformation();
      String string2 = lovinsStemmer4.stemString("Can't add object to itself!");
      assertEquals("can't ad object to itself!", string2);
      
      lovinsStemmer3.getTechnicalInformation();
      String string3 = lovinsStemmer0.stemString("CEYiRV");
      assertEquals("ceyirv", string3);
      
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.getTechnicalInformation();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      String string4 = lovinsStemmer7.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
      
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer9 = new LovinsStemmer();
      lovinsStemmer5.getTechnicalInformation();
      String string5 = lovinsStemmer2.stem("keyword");
      assertEquals("keyword", string5);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.135275507896224
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "epk_l|kimn=wuqend";
      stringArray0[1] = "$Revision: 8080 $";
      stringArray0[2] = "epk_l|kimn=wuquad";
      stringArray0[3] = "epk_l|kimn=wuqend";
      stringArray0[4] = "f";
      lovinsStemmer0.globalInfo();
      stringArray0[5] = "ication";
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[6] = "vad";
      lovinsStemmer0.stem("$Revision: 8080 $");
      stringArray0[7] = "R9]Oor9";
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("epk_l|kimn=wuqlud");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("yearbex");
      lovinsStemmer0.stem("epk_l|kimn=wuqlus");
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("W");
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.212028149350838
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"A8a)UzW_=z{2Zs";
      String string0 = lovinsStemmer0.stemString("mB<Enk;GE$t:");
      assertEquals("mb<enk;ge$t:", string0);
      
      stringArray0[1] = "5yv^E,";
      String string1 = lovinsStemmer0.stem(",BRVtTE,O");
      assertEquals(",brvtte,", string1);
      
      lovinsStemmer0.stemString("5yv^E,");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("olv");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString(">%@b^>gilSmh&$dqf<");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("mR.");
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("yearlud");
      assertEquals("yearlus", string3);
      
      lovinsStemmer0.stem("{~*|Z|.07s(&*8hBat5");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("M=G+a]'e?x/e?P\"x");
      String string4 = lovinsStemmer1.stem("yearlud");
      assertEquals("yearlus", string4);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.091190743207234
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("LOCATION");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "loc";
      stringArray0[1] = "LOCATION";
      stringArray0[2] = "LOCATION";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "LOCATION";
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stem("LOCATION");
      assertEquals("loc", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      lovinsStemmer0.stem("loc");
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.stemString("ancies");
      assertEquals("anci", string3);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.291566313453444
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("rpt");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("rb");
      assertTrue(string1.equals((Object)string0));
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer2.stemString("r0]");
      assertEquals("r0]", string2);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.globalInfo();
      String string3 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1862125933885779
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("lud");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer1.stemString("ide");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer4.stemString("ahpc:?G:O");
      lovinsStemmer5.getTechnicalInformation();
      lovinsStemmer1.stemString("lus");
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer5.getTechnicalInformation();
      lovinsStemmer6.globalInfo();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer9 = new LovinsStemmer();
      lovinsStemmer9.getTechnicalInformation();
      lovinsStemmer6.stemString("C{g>T&M\"%m{P8EB");
      lovinsStemmer2.toString();
      lovinsStemmer9.stemString("\"Cc");
      TechnicalInformation technicalInformation1 = lovinsStemmer5.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1848552258967295
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "GG9lWDb=4Bh6A+MOdm\"";
      stringArray0[1] = "@l|dT}>K~H&";
      stringArray0[2] = "ul";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("atives");
      assertEquals("ativ", string0);
      
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getRevision();
      String string1 = lovinsStemmer1.stemString("String should not finish with ");
      assertEquals("string should not finish with ", string1);
      
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.268237297884703
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "-l";
      stringArray0[2] = "Proceeding of the Sixteenth International Conference on Machine Learning";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer3.stemString("iDix.Z:MYZ ");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer3.toString();
      lovinsStemmer3.stemString("");
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1549307482809672
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("~r=?pR)E2|K");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("~r=?pR)E2|K");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("JOURNAL");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("i");
      lovinsStemmer1.stemString("affiliex");
      lovinsStemmer1.stem("as");
      lovinsStemmer1.stem("affiliex");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.toString();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0725301918237893
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("as");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string0 = lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stem("affiliex");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1692470666035741
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "GG9lWDb=4Bh6A+MOdm\"";
      stringArray0[1] = "GG9lWDb=4Bh6A+MOdm\"";
      stringArray0[2] = "uvl";
      stringArray0[3] = "editor";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("@l|dT}>K~H&");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("ahpc:?G:O");
      lovinsStemmer2.getTechnicalInformation();
      String string0 = lovinsStemmer1.stemString("editor");
      assertEquals("edit", string0);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer5.getTechnicalInformation();
      lovinsStemmer6.stemString("4ysjaOgF");
      lovinsStemmer2.toString();
      String string2 = lovinsStemmer5.stemString("Freund, Y. and Mason, L.");
      assertEquals("freund, y. and mason, l.", string2);
      
      lovinsStemmer6.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer4.stemString("erid");
      assertEquals("eris", string3);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1668692433174856
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("title of a book, part of which is being cited. see the latex book for how to type titles. for book entries, use the title field instead.her");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("title of a book, part of which is being cited. see the latex book for how to type titles. for book entries, use the title field instead.her");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "title of a book, part of which is being cited. see the latex book for how to type titles. for book entries, use the title field instead.her";
      stringArray0[1] = "titl of a book, part of which is being cit. se th latic book for how to typ titl. for book entr, us th titl field instead.hes";
      stringArray0[2] = "umpt";
      stringArray0[3] = "Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ";
      stringArray0[4] = "Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ";
      stringArray0[5] = "umpt";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ";
      stringArray1[1] = "titl of a book, part of which is being cit. se th latic book for how to typ titl. for book entr, us th titl field instead.hes";
      stringArray1[2] = "titl of a book, part of which is being cit. se th latic book for how to typ titl. for book entr, us th titl field instead.hes";
      stringArray1[3] = "Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ";
      stringArray1[4] = "al";
      LovinsStemmer.main(stringArray1);
      String string0 = lovinsStemmer0.stemString("Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ");
      assertEquals("arra-dimens of 'new int[][]{{1,2,3},{4,5,6}}': ", string0);
      
      lovinsStemmer0.stemString("vaQ");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("cid");
      assertEquals("cis", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1981755459814496
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ");
      assertEquals("arra-dimens of 'new int[][]{{1,2,3},{4,5,6}}': ", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "arra-dimens of 'new int[][]{{1,2,3},{4,5,6}}': ";
      stringArray0[2] = "b%/, ,DZ<V{&Lf^)tZt";
      stringArray0[3] = "arra-dimens of 'new int[][]{{1,2,3},{4,5,6}}': ";
      stringArray0[4] = "arra-dimens of 'new int[][]{{1,2,3},{4,5,6}}': ";
      stringArray0[5] = "Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ";
      stringArray0[6] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[7] = "arra-dimens of 'new int[][]{{1,2,3},{4,5,6}}': ";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("xcypandix");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("lid");
      assertEquals("lis", string1);
      
      lovinsStemmer0.stemString("ealy");
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.stemString("ax");
      assertEquals("ax", string3);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0647824091811633
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "-l";
      stringArray0[2] = "Proceeding of the Sixteenth International Conference on Machine Learning";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("iY%6+p-`>Pm8i^o^X");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stem("otide");
      assertEquals("ot", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stem("Proceeding of the Sixteenth International Conference on Machine Learning");
      assertEquals("proceeding of the sixteenth international conference on machine learn", string1);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      String string2 = lovinsStemmer1.stemString("linguet");
      assertEquals("lingues", string2);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      String string3 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1868713406592502
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "weka.core.TechnicalInformation";
      stringArray0[3] = "&EormY=D\"KMPr";
      stringArray0[4] = "weka.core.TechnicalInformation";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("'pr/lvx|d0\tm*end");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("<^3:U?");
      lovinsStemmer0.stemString("&EormY=D\"KMPr");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1815696745455784
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("%hcFH(`e'aX");
      assertEquals("%hcfh(`e'ac", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("Dgs{t[|w|");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stem("ludpand");
      assertEquals("ludpans", string3);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.2649182995346826
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      lovinsStemmer0.getRevision();
      stringArray0[1] = "-l";
      stringArray0[2] = "Proceeding of the Sixteenth International Conference on Machine Learning";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("modmdex");
      assertEquals("modmdic", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1568467785920582
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "$Revision: 8080 $";
      lovinsStemmer0.stemString("$Revision: 8080 $");
      stringArray0[2] = "epk_l|kimn=wuquad";
      stringArray0[3] = "ers";
      stringArray0[4] = "f";
      stringArray0[5] = "ication";
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[6] = "vad";
      stringArray0[7] = "R9]Oor9";
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("$Revision: 8080 $");
      lovinsStemmer0.stemString("epk_l|kimn=wuqlud");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("z'*zd-M");
      lovinsStemmer0.stemString("ical");
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Field");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("vad");
      LovinsStemmer.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3010993733705218
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "epk_l|kimn=wuqend";
      stringArray0[1] = "$Revision: 8080 $";
      stringArray0[3] = "epk_l|kimn=wuqend";
      stringArray0[4] = "f";
      lovinsStemmer0.globalInfo();
      stringArray0[5] = "ication";
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("2U6cGuTT./={");
      assertEquals("2u6cgut./={", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer3.stemString("R9]Oor9");
      assertEquals("r9]oor9", string1);
      
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getTechnicalInformation();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string2 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1177397543453547
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stem("vad");
      assertEquals("vas", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer1.stemString("ides");
      assertEquals("id", string1);
      
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "Sorted array with NaN (doubles): ";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "Sorted array with NaN (doubles): ";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[5] = "id";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.182944821211818
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "epk_l|kimn=wuqend";
      stringArray0[1] = "$Revision: 8080 $";
      stringArray0[2] = "epk_l|kimn=wuquad";
      stringArray0[3] = "epk_l|kimn=wuqend";
      stringArray0[4] = "f";
      lovinsStemmer0.stemString("epk_l|kimn=wuqend");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString(".hQ&ot");
      lovinsStemmer0.stemString("epk_l|kimn=wuqens");
      String string0 = lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1712007598289584
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("8034");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.getRevision();
      assertTrue(string2.equals((Object)string0));
      
      String string3 = lovinsStemmer2.stemString("Array-Dimensions of 'new String[3][4][]': ");
      assertEquals("arra-dimens of 'new string[3][4][]': ", string3);
      
      lovinsStemmer2.globalInfo();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "Array-Dimensions of 'new String[3][4][]': ";
      stringArray0[5] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.globalInfo();
      lovinsStemmer2.globalInfo();
      String string4 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0888441200446377
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("A part of a book having its own title.");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("uvl");
      lovinsStemmer1.getTechnicalInformation();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.164955238935016
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer0.stemString("$Revision: 8080 $");
      assertEquals("$revis: 8080 $", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stem("INPROCEEDINGS");
      assertEquals("inproceed", string2);
      
      lovinsStemmer1.stemString("6PLRVl");
      String string3 = lovinsStemmer0.stemString("_4WHXkOWAV4'k]4_t");
      assertEquals("_4whxkowav4'k]4_t", string3);
      
      lovinsStemmer1.stem("_4whxkowav4'k]4_t");
      lovinsStemmer0.stem("6plrvl");
      lovinsStemmer1.stemString("XConU");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("inproceed");
      lovinsStemmer1.stem("6plrvl");
      lovinsStemmer1.stem("'ptAJA`[rq");
      lovinsStemmer1.toString();
      lovinsStemmer0.toString();
      String string4 = lovinsStemmer1.stemString("yt");
      assertEquals("yt", string4);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.177044897163502
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "GG9lWDb=4Bh6A+MOdm\"";
      stringArray0[1] = "@l|dT}>K~H&";
      stringArray0[2] = "ul";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString(" option.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("TECHREPORT");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stemString("rud");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.toString();
      lovinsStemmer4.stemString("SA30q Y[UTw_VL<");
      lovinsStemmer4.getTechnicalInformation();
      String[] stringArray1 = new String[9];
      stringArray1[0] = " option.";
      stringArray1[1] = "dotpex";
      stringArray1[2] = " option.";
      stringArray1[3] = "GG9lWDb=4Bh6A+MOdm\"";
      stringArray1[4] = "goTi";
      stringArray1[5] = "ul";
      stringArray1[6] = "ul";
      stringArray1[7] = "ot";
      stringArray1[8] = "GG9lWDb=4Bh6A+MOdm\"";
      LovinsStemmer.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.146230145415185
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("b%/, ,DZ<V{&Lf^)tZt");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("b%/, ,DZ<V{&Lf^)tZt");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stem("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "iful";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("Use this type when nothing else fits.");
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stem("7\"VWL}c(qYsg");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("t8H\"FWa^[Mt0bSvX");
      lovinsStemmer1.toString();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0988392020473414
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("b%/, ,DZ<V{&Lf^)tZt");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      lovinsStemmer0.stemString("b%/, ,DZ<V{&Lf^)tZt");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("as");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("null");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("vad");
      lovinsStemmer1.stem("R");
      lovinsStemmer0.stem("b%/, ,dz<v{&lf^)tzt");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem("us");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.14583934739484
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "epk_l|kimn=wuqend";
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[2] = "epk_l|kimn=wuquad";
      stringArray0[3] = "epk_l|kimn=wuqend";
      stringArray0[4] = "epk_l|kimn=wuquad";
      lovinsStemmer0.globalInfo();
      stringArray0[5] = "ication";
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("pex");
      assertEquals("pic", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3064982239713663
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("V.`=FJ'");
      lovinsStemmer0.stem("/IY;SZ4}+T/vs3^,");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stem("o}xk3yT");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.2137695626846285
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stemString("Na74y:'pe");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "editor";
      stringArray0[1] = "@l|dT}>K~H&";
      stringArray0[2] = "uvl";
      stringArray0[3] = "Freund, Y. and Mason, L.";
      stringArray0[4] = "na74:'pe";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("uvl");
      lovinsStemmer3.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("SJn.Y9L");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer4.globalInfo();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer7.stemString("Na74y:'pe");
      lovinsStemmer1.toString();
      lovinsStemmer5.stemString("5.70001 > 5.7 ? ert");
      TechnicalInformation technicalInformation0 = lovinsStemmer2.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9689972972005365
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "epk_l|kimn=wuqend";
      stringArray0[1] = "$Revision: 8080 $";
      stringArray0[2] = "epk_l|kimn=wuquad";
      stringArray0[4] = "f";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "epk_l|kimn=wuqend";
      stringArray1[2] = "epk_l|kimn=wuquad";
      stringArray1[4] = "$Revision: 8080 $";
      stringArray1[5] = "ers";
      String string0 = lovinsStemmer0.stem("epk_l|kimn=wuquad");
      assertEquals("epk_l|kimn=wuquas", string0);
      
      stringArray1[6] = "f";
      stringArray1[7] = "11z=e(wQ/_(z[";
      stringArray1[8] = "epk_l|kimn=wuquad";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.143844641721974
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ";
      stringArray0[1] = "";
      stringArray0[2] = "b%/, ,DZ<V{&Lf^)tZt";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("linguet");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Can't find class called: ");
      lovinsStemmer2.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer3.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer2.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1267294150810778
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.";
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("@");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer0.stemString("Taf");
      assertEquals("taf", string1);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("Taf");
      lovinsStemmer1.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("GUPU@,<Ivl|`#");
      lovinsStemmer1.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stem("@");
      String string2 = lovinsStemmer1.stem("less");
      assertEquals("les", string2);
      
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
      
      lovinsStemmer3.toString();
      String string4 = lovinsStemmer3.stem("ZO@j");
      assertEquals("zo@j", string4);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1848104078392194
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ";
      stringArray0[1] = "";
      stringArray0[2] = "b%/, ,DZ<V{&Lf^)tZt";
      stringArray0[3] = "arra-dimens of 'new int[][]{{1,2,3},{4,5,6}}': ";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("xphet");
      lovinsStemmer0.stemString("\tThe file to output the processed data to (default stdout).");
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.2936794873353832
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "-l";
      stringArray0[2] = "Proceeding of the Sixteenth International Conference on Machine Learning";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("@hE41489'>4^wr");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("6shM1mT?");
      lovinsStemmer2.stemString("booktitlmit");
      String string0 = lovinsStemmer0.stemString("stdoutlux");
      lovinsStemmer1.stemString("dex");
      lovinsStemmer2.stem("\"p^W=zcRQf@B?SQ");
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.stem("GPcdcR");
      lovinsStemmer1.stemString("@hE41489'>4^wr");
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1512360887016433
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[8];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("8034");
      lovinsStemmer1.getRevision();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer1.stemString("affiliation");
      assertEquals("affili", string0);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer2.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer2.stemString("proceeding of the sixteenth international conference on machine learnlud");
      assertEquals("proceed of th sixteenth intern confer on mach learnlus", string2);
      
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer2.stemString("linguetpand");
      assertEquals("linguetpans", string4);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1250522988067098
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[0] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stem("The sponsoring institution of a technical report.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("iful");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("~lqgjond");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("ifl");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("editor");
      lovinsStemmer0.toString();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.087682293768024
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("Fatal error.");
      String string0 = lovinsStemmer0.stemString("Fatal error.");
      assertEquals("fat error.", string0);
      
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1668692433174856
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("title of a book, part of which is being cited. see the latex book for how to type titles. for book entries, use the title field instead.her");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("title of a book, part of which is being cited. see the latex book for how to type titles. for book entries, use the title field instead.her");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "title of a book, part of which is being cited. see the latex book for how to type titles. for book entries, use the title field instead.her";
      stringArray0[1] = "titl of a book, part of which is being cit. se th latic book for how to typ titl. for book entr, us th titl field instead.hes";
      stringArray0[2] = "umpt";
      stringArray0[3] = "Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ";
      stringArray0[4] = "Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ";
      stringArray0[5] = "umpt";
      lovinsStemmer0.stemString("umpt");
      String[] stringArray1 = new String[5];
      stringArray1[0] = "Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ";
      stringArray1[1] = "um";
      stringArray1[2] = "titl of a book, part of which is being cit. se th latic book for how to typ titl. for book entr, us th titl field instead.hes";
      stringArray1[3] = "um";
      stringArray1[4] = "al";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ");
      lovinsStemmer0.stemString("vaQ");
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1150713411842237
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.";
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("YEAR");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string1 = lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer1.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      lovinsStemmer0.stem("'ptAJA`[rq");
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string2 = lovinsStemmer0.stemString("9j%H#w.<9::.U");
      assertEquals("9j%h#w.<9::.u", string2);
      
      lovinsStemmer1.toString();
      lovinsStemmer0.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      String string3 = lovinsStemmer1.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.pex");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.pic", string3);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.072571630499732
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "invalid CVS revision - not enough parts separated by dots!";
      lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.her");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("invalid CVS revision - not enough parts separated by dots!");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("invalid CVS revision - not enough parts separated by dots!");
      lovinsStemmer0.stemString("ating");
      lovinsStemmer1.stemString("invalis cv revis - not enough part separ by dot!");
      lovinsStemmer2.stem("F");
      lovinsStemmer2.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.tex");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.lud");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer2.stem("gmC2_|/Q)4/d");
      lovinsStemmer0.stem("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.lus");
      lovinsStemmer2.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1772261708113878
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Array-Dimensions of'yew int[][]{{1,2,},{4,5,6}}'v ");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "b%/, ,DZ<V{&Lf^)tZt";
      stringArray0[1] = "Array-Dimensions of'yew int[][]{{1,2,},{4,5,6}}'v ";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "arra-dimens of'yew int[][]{{1,2,},{4,5,6}}'v ";
      stringArray0[5] = "arra-dimens of'yew int[][]{{1,2,},{4,5,6}}'v ";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("The language the document is in.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("isation");
      lovinsStemmer0.stemString("The language the document is in.");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.073097749225421
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("erjIU}p<U{5PPQ8");
      assertEquals("erjiu}p<u{5ppq8", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.2044761997673474
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka.core.stemmers.lovinsstemmererid";
      stringArray0[1] = "icity";
      stringArray0[2] = "mis";
      stringArray0[3] = "weka.core.stemmers.lovinsstemmerond";
      stringArray0[4] = "TYPE";
      stringArray0[5] = "entation";
      stringArray0[6] = "weka.core.stemmers.lovinsstemmerond";
      stringArray0[7] = " <classname>\n";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("#x'-~mND*YZ `l$5");
      lovinsStemmer0.getTechnicalInformation();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0276355151602763
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString(".?FTW?R2;3F4agDs_");
      assertEquals(".?ftw?r2;3f4agd_", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1258314459155105
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Array-Dimensions of'yew int[][]{{1,2,},{4,5,6}}'v ";
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("Sorted array with NaN (doubles): ");
      assertEquals("sort arra with nan (doubl): ", string1);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0072681493954485
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("jvo@ocl1nj>hgt9#mit");
      assertEquals("jv@ocl1nj>hgt9#mis", string0);
  }
}
