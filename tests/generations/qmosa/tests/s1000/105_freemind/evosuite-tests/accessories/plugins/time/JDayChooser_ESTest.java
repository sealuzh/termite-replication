/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 04:20:57 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.schememode.SchemeController;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.ImageObserver;
import java.beans.PropertyChangeListener;
import java.sql.Date;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.text.AttributedCharacterIterator;
import java.util.Calendar;
import java.util.Locale;
import java.util.Map;
import javax.help.ForwardAction;
import javax.swing.AbstractButton;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.JMenuBar;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JTable;
import javax.swing.JWindow;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.ChangeListener;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicSplitPaneUI;
import javax.swing.plaf.basic.BasicToolBarUI;
import javax.swing.plaf.metal.MetalScrollBarUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.xml.transform.TransformerException;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.css.parser.Parser;
import org.apache.batik.ext.awt.color.NamedProfileCache;
import org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit;
import org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.xalan.templates.ElemLiteralResult;
import org.apache.xalan.templates.ElemPI;
import org.apache.xalan.templates.ElemTemplateElement;
import org.apache.xalan.templates.ElemValueOf;
import org.apache.xalan.templates.StylesheetRoot;
import org.apache.xalan.transformer.TransformerImpl;
import org.apache.xml.utils.DefaultErrorHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.26906214183364
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(27);
      jDayChooser0.setFocus();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Color.getColor("day");
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getColorSpace();
      float[] floatArray0 = new float[9];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      fopImage_ImageInfo0.data = (Object) locale_Category0;
      floatArray0[0] = (float) 0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jCheckBoxMenuItem0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.drawDays();
      Locale locale0 = new Locale("{9}");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth((byte)13);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)68;
      byteArray0[5] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[1] = objectArray1[0];
      objectArray2[2] = (Object) null;
      objectArray2[4] = (Object) null;
      objectArray2[5] = (Object) null;
      objectArray0[1] = objectArray2;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray2);
      JTable jTable0 = new JTable(defaultTableModel0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object object0 = jDayChooser0.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent(object0, (byte) (-18), "Metal", (byte)120, 2742);
      ActionEvent actionEvent1 = new ActionEvent("Metal", (byte)68, (String) null, 2000L, (byte)67);
      actionEvent1.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.208313128881091
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis((-589L));
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = new Date((-589L));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      NamedProfileCache namedProfileCache0 = sVGColorProfileElementBridge0.cache;
      namedProfileCache0.request((String) null);
      sVGColorProfileElementBridge0.getInstance();
      JMenuBar jMenuBar0 = new JMenuBar();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      menuSelectionManager0.clearSelectedPath();
      MenuElement[] menuElementArray0 = new MenuElement[9];
      menuElementArray0[0] = (MenuElement) jMenuBar0;
      menuElementArray0[1] = (MenuElement) jMenuBar0;
      menuElementArray0[2] = (MenuElement) jMenuBar0;
      menuElementArray0[3] = (MenuElement) jMenuBar0;
      menuElementArray0[4] = (MenuElement) jMenuBar0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("./icons/.png");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      menuElementArray0[6] = (MenuElement) jMenuBar0;
      menuElementArray0[7] = (MenuElement) jMenuBar0;
      menuElementArray0[8] = (MenuElement) jMenuBar0;
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jMenuBar0, 3, 1, 0, 4, '*', menuElementArray0, menuSelectionManager1);
      menuKeyEvent0.getPath();
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.114399273529393
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Image image0 = null;
      int int0 = 1672;
      int int1 = 1002;
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      jDayChooser0.getTreeLock();
      objectArray2[1] = (Object) jDayChooser0;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) jDayChooser0;
      objectArray2[4] = (Object) null;
      Parser parser0 = new Parser();
      parser0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2699754841000703
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setDayBordersVisible(false);
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, true, true, true);
      JRootPane jRootPane0 = jInternalFrame0.getRootPane();
      jRootPane0.getDefaultButton();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      jCheckBoxMenuItem0.isPaintingTile();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      JDayChooser jDayChooser1 = new JDayChooser();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      AbstractDocument.BranchElement abstractDocument_BranchElement0 = defaultStyledDocument0.new BranchElement((Element) null, (AttributeSet) null);
      LabelView labelView0 = new LabelView(abstractDocument_BranchElement0);
      labelView0.getBackground();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDayBordersVisible());
      
      jDayChooser2.setDecorationBackgroundVisible(true);
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1700179605675673
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocusable(true);
      jDayChooser0.getDay();
      jDayChooser0.createToolTip();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.getInsets();
      jDayChooser0.drawDays();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.addListeners(14);
      jDayChooser0.getDayPanel();
      jDayChooser0.isDecorationBackgroundVisible();
      Color color0 = jDayChooser0.weekdayForeground;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 14;
      floatArray0[8] = (float) 0;
      color0.getComponents(floatArray0);
      jDayChooser0.setForeground(color0);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2937814272551496
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(43);
      jDayChooser0.setFocus();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("v$U,yQ&ER#", true);
      jCheckBoxMenuItem0.getAccelerator();
      AWTKeyStroke.getAWTKeyStroke('r');
      Color color0 = Color.green;
      JDayChooser jDayChooser1 = new JDayChooser();
      Color color1 = Color.getHSBColor(8.0F, 3063.0F, 0.0F);
      jDayChooser0.setDecorationBackgroundColor(color1);
      JDayChooser jDayChooser2 = new JDayChooser();
      Color color2 = jDayChooser0.getDecorationBackgroundColor();
      assertEquals(0, color2.getGreen());
      
      jDayChooser1.setDecorationBackgroundVisible(true);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2319748430821966
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      Date date0 = new Date(0L);
      date0.setTime(0L);
      date0.toLocalDate();
      jDayChooser1.setDayBordersVisible(true);
      jDayChooser1.setSelectableDateRange(date0, (java.util.Date) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AWTKeyStroke.getAWTKeyStroke('M');
      JDayChooser jDayChooser2 = new JDayChooser();
      KeyStroke.getKeyStroke('');
      jDayChooser2.updateUI();
      jDayChooser0.setMaxSelectableDate((java.util.Date) null);
      jDayChooser2.getMinSelectableDate();
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2875376591079486
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setDayBordersVisible(true);
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, false, true, false);
      JRootPane jRootPane0 = jInternalFrame0.getRootPane();
      jRootPane0.getTransferHandler();
      jRootPane0.getDefaultButton();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      jCheckBoxMenuItem0.setBounds(865, 9999, (-131), 9999);
      jCheckBoxMenuItem0.getAccelerator();
      AWTKeyStroke.getAWTKeyStroke('r');
      JDayChooser jDayChooser1 = new JDayChooser(true);
      KeyStroke.getKeyStroke('>');
      jDayChooser0.setFocus();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setSelectableDateRange((java.util.Date) null, (java.util.Date) null);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.170076619162811
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      Object object0 = jDayChooser0.getTreeLock();
      objectArray2[1] = object0;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) jDayChooser0;
      objectArray2[4] = (Object) null;
      objectArray2[5] = (Object) null;
      objectArray2[6] = (Object) jDayChooser0;
      objectArray2[7] = (Object) jDayChooser0;
      objectArray2[8] = (Object) jDayChooser0;
      objectArray0[1] = objectArray2;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray2);
      JTable jTable0 = new JTable(defaultTableModel0);
      jDayChooser0.checkImage((Image) null, 1678, 1002, (ImageObserver) jTable0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getClosedIcon();
      Locale locale0 = Locale.TAIWAN;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth((-1431655763));
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(28);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2297294069117655
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, false, true, false);
      JRootPane jRootPane0 = jInternalFrame0.getRootPane();
      jRootPane0.getTransferHandler();
      jRootPane0.getDefaultButton();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      jCheckBoxMenuItem0.isPaintingTile();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      jCheckBoxMenuItem0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jCheckBoxMenuItem0.setBounds(865, 9999, (-131), 9999);
      KeyStroke.getKeyStroke("");
      AWTKeyStroke.getAWTKeyStroke('r');
      JDayChooser jDayChooser1 = new JDayChooser(true);
      KeyStroke.getKeyStroke('>');
      jDayChooser0.setFocus();
      jDayChooser1.isWeekOfYearVisible();
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler(false);
      ElemLiteralResult elemLiteralResult0 = new ElemLiteralResult();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      TransformerException transformerException0 = new TransformerException("M-ku,I,H\"$=}");
      defaultErrorHandler0.error(transformerException0);
      StylesheetRoot stylesheetRoot0 = new StylesheetRoot(defaultErrorHandler0);
      StylesheetRoot stylesheetRoot1 = new StylesheetRoot(defaultErrorHandler0);
      stylesheetRoot1.lookupNamespaceURI("J7 ogGK(");
      TransformerImpl transformerImpl0 = new TransformerImpl(stylesheetRoot0);
      transformerImpl0.getCountersTable();
      Font font0 = new Font((Map<? extends AttributedCharacterIterator.Attribute, ?>) null);
      jDayChooser0.setFont(font0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2317002133745856
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-589L));
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = new Date((-589L));
      date0.setTime((-589L));
      date0.toLocalDate();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setSelectableDateRange(date0, date0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AWTKeyStroke.getAWTKeyStroke('@');
      JDayChooser jDayChooser1 = new JDayChooser();
      KeyStroke.getKeyStroke('');
      jDayChooser0.updateUI();
      jDayChooser1.setMaxSelectableDate(date0);
      jDayChooser1.getMinSelectableDate();
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(31, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1511086575642353
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AWTKeyStroke.getAWTKeyStroke('r');
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Metal";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[1] = "Metal";
      stringArray0[2] = "Metal";
      stringArray0[3] = "Metal";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      stringArray0[4] = "Metal";
      AWTKeyStroke.getAWTKeyStroke('r');
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyStroke.getKeyStroke('');
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters((-770));
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2640646693254545
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      Object object0 = jDayChooser0.getTreeLock();
      objectArray2[1] = object0;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) jDayChooser0;
      objectArray2[4] = (Object) null;
      objectArray2[5] = (Object) null;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray2);
      JTable jTable0 = new JTable(defaultTableModel0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.checkImage((Image) null, 1002, (-753), (ImageObserver) jTable0);
      jDayChooser1.getAutoscrolls();
      jTable0.getToolkit();
      jDayChooser1.setYear((-2898));
      Object[] objectArray3 = new Object[3];
      Object object1 = new Object();
      objectArray3[0] = object1;
      objectArray3[1] = (Object) null;
      objectArray3[2] = (Object) jDayChooser0;
      defaultTableModel0.setColumnIdentifiers(objectArray3);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 32, (-753), 1002, 40, '2', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(21, jDayChooser0.getDay());
      
      jDayChooser1.setMonth(32);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.164847049148182
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String string0 = AbstractButton.PRESSED_ICON_CHANGED_PROPERTY;
      jDayChooser0.getMaximumSize();
      jDayChooser0.setDay((-261));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JInternalFrame jInternalFrame0 = new JInternalFrame("b?a`ArYli9No", true, false, false, false);
      JRootPane jRootPane0 = jInternalFrame0.getRootPane();
      JRootPane jRootPane1 = new JRootPane();
      jRootPane1.getTransferHandler();
      jRootPane0.getDefaultButton();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jCheckBoxMenuItem0.isPaintingTile();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jCheckBoxMenuItem0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.drawDays();
      Locale locale0 = new Locale("pressedIcon");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth((-760));
      System.setCurrentTimeMillis((-261));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3402818878717846
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Boolean boolean0 = new Boolean(false);
      BorderLayout borderLayout0 = new BorderLayout((-2896), 639);
      jDayChooser0.getDecorationBackgroundColor();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Color color0 = jDayChooser0.getForeground();
      jDayChooser_DecoratorButton0.addNotify();
      jDayChooser_DecoratorButton0.isDefaultButton();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.setDecorationBackgroundColor(color0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1355, 20, 3851, 20, 20, 4);
      mockGregorianCalendar0.isWeekDateSupported();
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, 111, "14", 639);
      JDayChooser jDayChooser1 = new JDayChooser();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.EXPLICIT_LAYOUT;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 20, (long) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_NONE, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_TTB, 34, 'V', (MenuElement[]) null, (MenuSelectionManager) null);
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed(menuKeyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.175605168129436
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      Object object0 = new Object();
      objectArray2[1] = object0;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) jDayChooser0;
      objectArray2[4] = (Object) null;
      objectArray2[5] = (Object) null;
      objectArray2[6] = (Object) jDayChooser0;
      objectArray2[7] = (Object) jDayChooser0;
      objectArray2[8] = (Object) jDayChooser0;
      objectArray0[1] = objectArray2;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray2);
      JTable jTable0 = new JTable(defaultTableModel0);
      jDayChooser0.checkImage((Image) null, 1678, 1002, (ImageObserver) jTable0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getClosedIcon();
      MenuElement[] menuElementArray0 = new MenuElement[9];
      JMenuBar jMenuBar0 = new JMenuBar();
      menuElementArray0[2] = (MenuElement) jMenuBar0;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jTable0, (-1431655763), (-1431655763), 27, 32, ';', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.193428640036987
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ElemLiteralResult elemLiteralResult0 = new ElemLiteralResult();
      TransformerException transformerException0 = new TransformerException("M-ku,I,H\"$=}", elemLiteralResult0);
      Color color0 = jDayChooser0.getForeground();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addNotify();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.isDefaultButton();
      jDayChooser0.setDecorationBackgroundVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDecorationBackgroundColor(color0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton1, 1002, (String) null, 3491);
      JDayChooser jDayChooser2 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1701099558298114
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("Metal", false);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      jCheckBoxMenuItem0.addInputMethodListener((InputMethodListener) null);
      jCheckBoxMenuItem0.revalidate();
      jCheckBoxMenuItem0.getAccelerator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AWTKeyStroke.getAWTKeyStroke('r');
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyStroke.getKeyStroke('6');
      jDayChooser0.updateUI();
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getDaysInMonth();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3866218896646907
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setAlignmentY(2149.2515F);
      Color color0 = Color.GRAY;
      Color.getColor("GvA G}", 9733);
      jDayChooser1.setDecorationBackgroundColor(color0);
      jDayChooser1.getDecorationBackgroundColor();
      jDayChooser1.initDecorations();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser1, 15, 15, 3276, 6, 'r', (MenuElement[]) null, (MenuSelectionManager) null);
      jDayChooser0.keyPressed(menuKeyEvent0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser1, 3276, true);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setMonth(3276);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2021525171555334
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler(false);
      ElemLiteralResult elemLiteralResult0 = new ElemLiteralResult();
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      defaultListCellRenderer0.getIcon();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster2);
      KeyStroke.getKeyStroke("M-ku,I,H\"$=}");
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((ItemListener) aWTEventMulticaster3, (ItemListener) jMonthChooser0);
      AWTEventMulticaster.remove((ItemListener) jMonthChooser0, (ItemListener) aWTEventMulticaster4);
      KeyStroke.getKeyStroke('L');
      jDayChooser0.setFocus();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addHierarchyListener(aWTEventMulticaster3);
      jDayChooser_DecoratorButton0.isRequestFocusEnabled();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      java.util.Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setEnabled(false);
      StyleContext styleContext0 = new StyleContext();
      // Undeclared exception!
      try { 
        styleContext0.getFont((AttributeSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.StyleConstants", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3294865448867146
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setAlignmentY(2149.2515F);
      Color color0 = Color.green;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2149.2515F;
      floatArray0[1] = (float) 9733;
      floatArray0[2] = 2149.2515F;
      floatArray0[3] = 2149.2515F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 2149.2515F;
      floatArray0[6] = 2149.2515F;
      floatArray0[7] = (-185.7879F);
      color0.getRGBColorComponents(floatArray0);
      Color.getColor("GvA G}", 9733);
      jDayChooser1.setDecorationBackgroundColor(color0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Color color1 = jDayChooser1.getDecorationBackgroundColor();
      assertEquals((-16711936), color1.getRGB());
      
      jDayChooser1.initDecorations();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser1, 15, 15, 3276, 6, 'r', (MenuElement[]) null, (MenuSelectionManager) null);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getSundayForeground();
      jDayChooser0.setMinSelectableDate((java.util.Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.264636915784148
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(33);
      jDayChooser0.setFocus();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.getSundayForeground();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getColorSpace();
      float[] floatArray0 = new float[9];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      fopImage_ImageInfo0.data = (Object) locale_Category0;
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      String[] stringArray0 = new String[6];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)113;
      byteArray0[1] = (byte)14;
      byteArray0[4] = (byte)32;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/bN&O]IHav`X'eD8s<v");
      stringArray0[0] = "day";
      stringArray0[1] = "/bN&O]IHav`X'eD8s<v";
      stringArray0[2] = "day";
      stringArray0[3] = "/bN&O]IHav`X'eD8s<v";
      stringArray0[4] = "Cp1K@UI1CVoo";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.128740136354448
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String string0 = AbstractButton.PRESSED_ICON_CHANGED_PROPERTY;
      jDayChooser0.getMaximumSize();
      jDayChooser0.setDay(1777);
      String[] stringArray0 = new String[15];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      basicToolBarUI0.getFloatingColor();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      NamedProfileCache namedProfileCache0 = sVGColorProfileElementBridge0.cache;
      namedProfileCache0.request(stringArray0[1]);
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[3] = 4;
      JMenuBar jMenuBar0 = new JMenuBar();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[2];
      menuElementArray0[0] = (MenuElement) jMenuBar0;
      menuElementArray0[1] = (MenuElement) jMenuBar0;
      MenuSelectionManager menuSelectionManager2 = new MenuSelectionManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jMenuBar0, 1, 4, Integer.MAX_VALUE, 2, 4, 1, 44, 4, false, menuElementArray0, menuSelectionManager2);
      menuSelectionManager1.processMouseEvent(menuDragMouseEvent0);
      menuSelectionManager1.clearSelectedPath();
      jDayChooser0.setMonth(1005);
      JWindow jWindow0 = null;
      try {
        jWindow0 = new JWindow();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.264636915784148
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(43);
      jDayChooser0.setFocus();
      jDayChooser0.isDecorationBordersVisible();
      Color.getColor("no_previous_find");
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.load(0);
      jpegImage0.getColorSpace();
      float[] floatArray0 = new float[9];
      fopImage_ImageInfo0.dpiVertical = (double) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      stringArray0[1] = "/bN&O]IHav`X'eD8s<v";
      stringArray0[2] = "no_previous_find";
      stringArray0[3] = "/bN&O]IHav`X'eD8s<v";
      stringArray0[4] = "";
      stringArray0[5] = "14";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1143857569107105
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Metal");
      AWTKeyStroke.getAWTKeyStroke('r');
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Metal";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[1] = "Metal";
      stringArray0[2] = "Metal";
      stringArray0[3] = "Metal";
      stringArray0[4] = "Metal";
      AWTKeyStroke.getAWTKeyStroke('r');
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2367038224848548
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setAlignmentY(2149.2515F);
      Color color0 = Color.green;
      jDayChooser1.setDecorationBackgroundColor(color0);
      Color color1 = jDayChooser1.getDecorationBackgroundColor();
      assertEquals(0, color1.getRed());
      
      jDayChooser1.initDecorations();
      Locale locale0 = Locale.FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jDayChooser0.initDecorations();
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate((-3723), (-1368), (-1368), (-3723), (-3723));
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1286651860090515
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String string0 = AbstractButton.PRESSED_ICON_CHANGED_PROPERTY;
      jDayChooser0.getMaximumSize();
      jDayChooser0.setDay((-261));
      String[] stringArray0 = new String[2];
      stringArray0[1] = "day";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.isDecorationBackgroundVisible();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      basicToolBarUI0.getFloatingColor();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      NamedProfileCache namedProfileCache0 = sVGColorProfileElementBridge0.cache;
      namedProfileCache0.request("day");
      int[] intArray0 = new int[4];
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0);
      ElemPI elemPI0 = new ElemPI();
      ElemValueOf elemValueOf0 = new ElemValueOf();
      // Undeclared exception!
      try { 
        elemValueOf0.appendChild((ElemTemplateElement) elemPI0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Can not add processing-instruction to value-of
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1410682228425664
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      AttributeSet attributeSet0 = styleContext_NamedStyle0.copyAttributes();
      Color color0 = styleContext0.getBackground(attributeSet0);
      jDayChooser1.setBackground(color0);
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.096591278091726
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[1] = objectArray1[0];
      objectArray2[2] = (Object) null;
      objectArray2[4] = (Object) null;
      objectArray2[5] = (Object) null;
      objectArray0[1] = objectArray2;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray2);
      JTable jTable0 = new JTable(defaultTableModel0);
      JTable jTable1 = new JTable((byte)120, (byte)120);
      Color color0 = jTable0.getSelectionForeground();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setForeground(color0);
      jDayChooser0.initDecorations();
      Color color1 = jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals((-16754012), color1.getRGB());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMouseListeners();
      jDayChooser0.getInputMap(0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setDecorationBordersVisible(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-622), (-622), 523, 0, '<', 0);
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.259516129352286
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      BorderLayout borderLayout0 = new BorderLayout(37, (-2896));
      jDayChooser0.setLayout(borderLayout0);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getForeground();
      Color.getColor("day", color0);
      jDayChooser_DecoratorButton0.addNotify();
      jDayChooser0.init();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.setDecorationBackgroundColor(color0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ActionEvent actionEvent0 = new ActionEvent(locale_Category0, (-2896), "horiz-origin-y", 1549L, 37);
      actionEvent0.paramString();
      JDayChooser jDayChooser1 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale$Category cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.2368490567160553
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String string0 = AbstractButton.PRESSED_ICON_CHANGED_PROPERTY;
      jDayChooser0.getMaximumSize();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(1777);
      String[] stringArray0 = new String[15];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      basicToolBarUI0.getFloatingColor();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      NamedProfileCache namedProfileCache0 = sVGColorProfileElementBridge0.cache;
      namedProfileCache0.request(stringArray0[1]);
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      namedProfileCache0.clear("28");
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[3] = 4;
      JMenuBar jMenuBar0 = new JMenuBar();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[2];
      menuElementArray0[0] = (MenuElement) jMenuBar0;
      jMenuBar0.getMenuCount();
      menuElementArray0[1] = (MenuElement) jMenuBar0;
      MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jMenuBar0, 1026, 1125L, 3916, (-1407), 'O', menuElementArray0, menuSelectionManager1);
      menuKeyEvent0.getPath();
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.getSelectedDay();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.2033486842942582
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setAlignmentY(2149.2515F);
      Color color0 = Color.GRAY;
      Color.getColor("GvA G}", 9733);
      jDayChooser1.setDecorationBackgroundColor(color0);
      jDayChooser1.getDecorationBackgroundColor();
      jDayChooser1.initDecorations();
      AWTKeyStroke.getAWTKeyStroke('m');
      JDayChooser jDayChooser2 = new JDayChooser();
      KeyStroke.getKeyStroke('m');
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler(false);
      ElemLiteralResult elemLiteralResult0 = new ElemLiteralResult();
      TransformerException transformerException0 = new TransformerException("day");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "day");
      SQLWarning sQLWarning0 = new SQLWarning("day", sQLTimeoutException0);
      TransformerException transformerException1 = new TransformerException("M-ku,I,H\"$=}");
      transformerException1.initCause(sQLTimeoutException0);
      defaultErrorHandler0.error(transformerException1);
      StylesheetRoot stylesheetRoot0 = new StylesheetRoot(defaultErrorHandler0);
      TransformerImpl transformerImpl0 = new TransformerImpl(stylesheetRoot0);
      transformerImpl0.getCountersTable();
      Font font0 = new Font((Map<? extends AttributedCharacterIterator.Attribute, ?>) null);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.133547707061807
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      Object object0 = jDayChooser0.getTreeLock();
      objectArray2[1] = object0;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) jDayChooser0;
      objectArray2[4] = (Object) null;
      objectArray2[7] = (Object) null;
      objectArray2[6] = (Object) jDayChooser0;
      objectArray2[7] = (Object) jDayChooser0;
      objectArray2[8] = (Object) jDayChooser0;
      objectArray0[1] = objectArray2;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray2);
      JTable jTable0 = new JTable(defaultTableModel0);
      jDayChooser0.checkImage((Image) null, 1678, 989, (ImageObserver) jTable0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getClosedIcon();
      JMenuBar jMenuBar0 = new JMenuBar();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setEnabled(true);
      StyleContext styleContext0 = new StyleContext();
      // Undeclared exception!
      try { 
        styleContext0.getFont((AttributeSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.StyleConstants", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isValidateRoot();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      ForwardAction forwardAction0 = new ForwardAction(integer0);
      AWTEventMulticaster.remove((MouseListener) forwardAction0, (MouseListener) forwardAction0);
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[1] = objectArray1[0];
      objectArray2[2] = (Object) null;
      objectArray2[4] = (Object) null;
      objectArray2[5] = (Object) null;
      objectArray0[1] = objectArray2;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray2);
      JTable jTable0 = new JTable(defaultTableModel0);
      JTable jTable1 = new JTable((byte)120, (byte)120);
      Color color0 = jTable0.getSelectionForeground();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      int int0 = 5;
      Line2D.Double line2D_Double0 = new Line2D.Double();
      line2D_Double0.getBounds();
      jYearChooser0.value = 5;
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.activeCaption;
      jDayChooser0.setSundayForeground(systemColor0);
      BrowseMode browseMode0 = new BrowseMode();
      SchemeController schemeController0 = null;
      try {
        schemeController0 = new SchemeController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.175605168129436
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Center");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getRootPane();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2, 772L, 2, 12, 'F');
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicSplitPaneUI basicSplitPaneUI0 = new BasicSplitPaneUI();
      basicSplitPaneUI0.getDivider();
      jDayChooser0.removePropertyChangeListener((String) null, (PropertyChangeListener) null);
      jDayChooser0.setDecorationBordersVisible(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      Color.RGBtoHSB(0, 917, 917, (float[]) null);
      jDayChooser0.setWeekdayForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.240247623800649
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StyleContext styleContext0 = new StyleContext();
      AttributeSet attributeSet0 = styleContext0.getEmptySet();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      styleContext0.removeAttribute(attributeSet0, defaultStyledDocument0);
      AttributeSet attributeSet1 = SimpleAttributeSet.EMPTY;
      Color color0 = defaultStyledDocument0.getForeground(attributeSet1);
      MetalScrollBarUI metalScrollBarUI0 = new MetalScrollBarUI();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      styleContext0.removeChangeListener((ChangeListener) null);
      jDayChooser0.setLayout(metalScrollBarUI0);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.keyTyped((KeyEvent) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "month";
      stringArray0[1] = "day";
      JButton jButton0 = new JButton();
      jDayChooser0.transferFocusBackward();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.2054733035890117
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      JTable jTable0 = new JTable();
      jYearChooser0.createVolatileImage(0, 7);
      Rectangle rectangle0 = jTable0.getCellRect(0, (-1950), false);
      TurbulenceRable8Bit turbulenceRable8Bit0 = new TurbulenceRable8Bit(rectangle0, (-2566), (-624), 0, 0, false, false);
      MorphologyRable8Bit morphologyRable8Bit0 = new MorphologyRable8Bit(turbulenceRable8Bit0, 7, 1.0E-6, false);
      Rectangle2D rectangle2D0 = morphologyRable8Bit0.getBounds2D();
      rectangle0.setFrame(rectangle2D0);
      jYearChooser0.computeVisibleRect(rectangle0);
      jDayChooser0.setYearChooser(jYearChooser0);
      FocusEvent focusEvent0 = new FocusEvent(jYearChooser0, 7);
      jDayChooser0.focusGained(focusEvent0);
      java.util.Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.1708493740339265
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setDayBordersVisible(false);
      JButton[] jButtonArray0 = new JButton[7];
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", false, false, false, false);
      JRootPane jRootPane0 = jInternalFrame0.getRootPane();
      jRootPane0.getDefaultButton();
      jButtonArray0[0] = null;
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.getDisabledIcon();
      JButton jButton0 = new JButton((Icon) null);
      jButtonArray0[1] = jButton0;
      JButton jButton1 = jDayChooser1.selectedDay;
      jButtonArray0[2] = null;
      JButton jButton2 = new JButton((String) null, (Icon) null);
      jButtonArray0[3] = jButton2;
      Object[][] objectArray0 = new Object[3][3];
      objectArray0[0] = (Object[]) jButtonArray0;
      jDayChooser_DecoratorButton0.addNotify();
      jDayChooser_DecoratorButton0.isFocusable();
      MockGregorianCalendar mockGregorianCalendar0 = null;
      try {
        mockGregorianCalendar0 = new MockGregorianCalendar((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      Object object0 = jDayChooser0.getTreeLock();
      objectArray2[1] = object0;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) jDayChooser0;
      objectArray2[4] = (Object) null;
      objectArray2[5] = (Object) null;
      objectArray2[6] = (Object) jDayChooser0;
      objectArray2[7] = (Object) jDayChooser0;
      objectArray0[1] = objectArray2;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray2);
      JTable jTable0 = new JTable(defaultTableModel0);
      jDayChooser0.checkImage((Image) null, 1678, 1002, (ImageObserver) jTable0);
      jDayChooser0.setYear(10136);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      Object object0 = jDayChooser0.getTreeLock();
      objectArray2[1] = object0;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) jDayChooser0;
      objectArray2[4] = (Object) null;
      objectArray2[5] = (Object) null;
      objectArray2[6] = (Object) jDayChooser0;
      objectArray2[7] = (Object) jDayChooser0;
      objectArray2[8] = (Object) jDayChooser0;
      objectArray0[1] = objectArray2;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray2);
      JTable jTable0 = new JTable(defaultTableModel0);
      jDayChooser0.checkImage((Image) null, 1678, 1002, (ImageObserver) jTable0);
      jDayChooser0.setWeekOfYearVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.175592593151128
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("Metal", false);
      jCheckBoxMenuItem0.getAccelerator();
      AWTKeyStroke.getAWTKeyStroke('r');
      Color color0 = Color.green;
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getClosedIcon();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource0.getIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("Metal", (Icon) null);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jCheckBoxMenuItem0, 524, 1L, 90, 524, ' ', menuElementArray0, (MenuSelectionManager) null);
      menuKeyEvent0.consume();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.1345606492920375
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      jDayChooser0.getColorModel();
      AttributeSet attributeSet0 = styleContext_NamedStyle0.copyAttributes();
      styleContext_NamedStyle0.addChangeListener((ChangeListener) null);
      Color color0 = styleContext0.getBackground(attributeSet0);
      jDayChooser1.setBackground(color0);
      jDayChooser0.setWeekOfYearVisible(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ElemLiteralResult elemLiteralResult0 = new ElemLiteralResult();
      TransformerException transformerException0 = new TransformerException("M-ku,I,H\"$=}", elemLiteralResult0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("hUi(|;ArLo;M7v6@x&", "<", 1002);
      SQLTransientException sQLTransientException0 = new SQLTransientException("pD$AKbZ]e", "hUi(|;ArLo;M7v6@x&", sQLFeatureNotSupportedException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLWarning sQLWarning0 = new SQLWarning("`la\"3HEZmi^{Kb", sQLFeatureNotSupportedException0);
      SQLTransientException sQLTransientException1 = new SQLTransientException("1", (String) null, 1002, sQLWarning0);
      TransformerException transformerException1 = new TransformerException("1", sQLTransientException1);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
