/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 09 22:59:45 GMT 2020
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.MindIcon;
import freemind.modes.common.plugins.MapNodePositionHolderBase;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentListener;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.geom.Rectangle2D;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.text.DateFormatSymbols;
import java.util.Comparator;
import java.util.Date;
import java.util.Locale;
import java.util.Stack;
import java.util.Vector;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.InputVerifier;
import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JEditorPane;
import javax.swing.JInternalFrame;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.MenuElement;
import javax.swing.event.ChangeListener;
import javax.swing.event.TableModelListener;
import javax.swing.plaf.basic.BasicToolBarUI;
import javax.swing.plaf.metal.MetalScrollBarUI;
import javax.swing.plaf.multi.MultiRootPaneUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit;
import org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getTreeLock();
      JButton jButton0 = jDayChooser0.selectedDay;
      MindIcon.factory("Metal");
      ImageIcon imageIcon0 = MapNodePositionHolderBase.getMapLocationIcon();
      JButton jButton1 = new JButton("freemind.modes.mindmapmode.actions.ColorArrowLinkAction", imageIcon0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JTextPane jTextPane0 = new JTextPane();
      jTextPane0.getDisabledTextColor();
      StyleContext styleContext0 = new StyleContext();
      Style style0 = jTextPane0.getLogicalStyle();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Font font0 = defaultStyledDocument0.getFont(style0);
      jDayChooser0.setFont(font0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6527697871323417
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1");
      jDayChooser1.getTreeLock();
      JButton jButton0 = jDayChooser1.selectedDay;
      MindIcon mindIcon0 = MindIcon.factory("$nKcV}$");
      mindIcon0.getIcon();
      JButton jButton1 = new JButton("day");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7385791605222836
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setBounds(1875, 41, (-145), (-145));
      jDayChooser0.setDay(32);
      jDayChooser0.updateUI();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-145), (-145), (-581), 32, 'S');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMonth((-581));
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext styleContext1 = new StyleContext();
      AttributeSet attributeSet0 = null;
      // Undeclared exception!
      try { 
        styleContext0.removeAttributes((AttributeSet) null, (AttributeSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.StyleContext", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6558715339526153
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setBounds(1875, 41, (-145), (-145));
      jDayChooser0.setDay(32);
      jDayChooser0.updateUI();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-145), (-145), (-581), 32, 'S');
      Vector<MockCalendar> vector0 = new Vector<MockCalendar>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 41);
      defaultTableModel0.addTableModelListener((TableModelListener) null);
      DefaultTableModel defaultTableModel1 = new DefaultTableModel();
      JTable jTable0 = new JTable(defaultTableModel1);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setMonth((-3069));
      assertEquals(30, jDayChooser0.getDay());
      
      JDayChooser jDayChooser2 = new JDayChooser(true);
      JDayChooser jDayChooser3 = new JDayChooser(true);
      jDayChooser3.getDay();
      JDayChooser jDayChooser4 = new JDayChooser();
      jDayChooser4.drawDays();
      jDayChooser1.getDaysInMonth();
      assertFalse(jDayChooser1.isWeekOfYearVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7736275476159054
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.fppdfASCIIHexFilter");
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      locale1.getScript();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      locale1.clone();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setLocale(locale1);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser1.removeContainerListener((ContainerListener) null);
      jDayChooser0.getLocale();
      jDayChooser0.getMaxDayCharacters();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 35, 35, 35, 35, 'F');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.89822316376328
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.getDisabledIcon();
      JButton jButton0 = new JButton("0", (Icon) null);
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      jDayChooser1.setDecorationBackgroundColor(systemColor0);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.getMaxSelectableDate();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 3985, 10, 2, 3, '*', 3);
      jDayChooser1.keyPressed(keyEvent0);
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      basicToolBarUI0.getMaximumSize(jDayChooser0);
      basicToolBarUI0.getDockingColor();
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.setMaxDayCharacters(3);
      Locale locale0 = Locale.ENGLISH;
      jDayChooser0.setLocale(locale0);
      KeyEvent keyEvent1 = null;
      try {
        keyEvent1 = new KeyEvent(jDayChooser_DecoratorButton0, 3985, 10, 2, 3985, '*', 982);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.939780132480636
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.getComponentListeners();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser2.new DecoratorButton();
      jDayChooser_DecoratorButton0.getDisabledIcon();
      JButton jButton0 = new JButton("Windows", (Icon) null);
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      JDayChooser jDayChooser3 = new JDayChooser(true);
      Date date0 = jDayChooser3.getMaxSelectableDate();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1872, 0L, 3170, 1928, '*', 3);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      basicToolBarUI0.getDockingColor();
      jDayChooser3.setForeground(systemColor0);
      jDayChooser2.setMaxDayCharacters(629);
      jDayChooser3.setMaxSelectableDate(date0);
      boolean boolean0 = jDayChooser2.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser2.isWeekOfYearVisible();
      assertTrue(jDayChooser2.isDayBordersVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7216895901039444
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getTreeLock();
      JDayChooser jDayChooser1 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.getComponentListeners();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser1.setMaxDayCharacters(840);
      jDayChooser1.getTreeLock();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(46, 21, 840, 919, (-80), 3);
      int int0 = 39;
      JButton jButton0 = new JButton();
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 39, "day");
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getTreeLock();
      JButton jButton0 = jDayChooser0.selectedDay;
      MindIcon.factory("Metal");
      JDayChooser jDayChooser1 = new JDayChooser(false);
      DateFormatSymbols.getInstance();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6442551993262904
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&K.:");
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getComponentListeners();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser1.setMaxDayCharacters(3);
      jDayChooser1.getTreeLock();
      MindIcon mindIcon0 = MindIcon.factory("dYok");
      ImageIcon imageIcon0 = mindIcon0.getIcon();
      imageIcon0.getImage();
      JButton jButton0 = new JButton("", imageIcon0);
      jDayChooser1.setMonth(883);
      assertEquals(3, jDayChooser1.getMaxDayCharacters());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6266116706270757
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.fppdfASCIIHexFilter");
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getComponentListeners();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setMaxDayCharacters(46);
      jDayChooser0.getTreeLock();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1323), 4041, 8935, (-386), 2237, 8935);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(31, 15, (-1323), 46, 3709, 31);
      // Undeclared exception!
      try { 
        mockGregorianCalendar1.getLeastMaximum(31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 31
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.757689330507757
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("ontimer", 556);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = (-37);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.paintImmediately(440, (-334), (-37), 440);
      jDayChooser0.drawWeeks();
      jDayChooser0.isDecorationBackgroundVisible();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setMaxDayCharacters((-68));
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.initDecorations();
      jDayChooser0.getDayPanel();
      int int1 = 8885;
      long long0 = 0L;
      int int2 = 627;
      char char0 = 'g';
      MenuElement[] menuElementArray0 = new MenuElement[2];
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", true);
      jInternalFrame0.getJMenuBar();
      menuElementArray0[0] = (MenuElement) null;
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      JButton[] jButtonArray0 = new JButton[7];
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", false, false, false, false);
      JRootPane jRootPane0 = jInternalFrame0.getRootPane();
      jRootPane0.getDefaultButton();
      jButtonArray0[0] = null;
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.getDisabledIcon();
      JButton jButton0 = new JButton((Icon) null);
      jButtonArray0[1] = jButton0;
      JButton jButton1 = jDayChooser1.selectedDay;
      jButtonArray0[2] = null;
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7502443039254847
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object object0 = new Object();
      Date date0 = jDayChooser0.minSelectableDate;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      dateFormatSymbols0.setLocalPatternChars("day");
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      floatArray0[1] = 0.97F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2390.53F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      Date date1 = jDayChooser2.setMinSelectableDate(date0);
      jDayChooser1.getClientProperty(date1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      jDayChooser0.setMinSelectableDate(date1);
      jDayChooser0.setMaxSelectableDate(date1);
      Date date2 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMinSelectableDate(date2);
      jDayChooser1.setSelectableDateRange(date0, date2);
      jDayChooser0.setDay((-1071));
      jDayChooser0.getMinSelectableDate();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.641992437260311
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jDayChooser0;
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      AttributeSet attributeSet0 = styleContext_NamedStyle0.copyAttributes();
      Color color0 = styleContext0.getBackground(attributeSet0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setBackground(color0);
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.67757642633837
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      Object object0 = jDayChooser0.getTreeLock();
      objectArray2[1] = object0;
      objectArray2[3] = (Object) jDayChooser0;
      objectArray2[6] = (Object) jDayChooser0;
      objectArray2[7] = (Object) jDayChooser0;
      JButton jButton0 = jDayChooser0.selectedDay;
      MindIcon mindIcon0 = MindIcon.factory("");
      ImageIcon imageIcon0 = mindIcon0.getIcon();
      JButton jButton1 = new JButton("", imageIcon0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "icons.list";
      stringArray0[2] = "";
      stringArray0[3] = "menu_bar/edit/.";
      stringArray0[4] = "icons.list";
      jDayChooser0.setMonth((-800));
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getDay();
      jDayChooser0.drawDays();
      jDayChooser0.setDay(14);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser1.setMaxDayCharacters((-1));
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6558715339526153
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object object0 = jDayChooser0.getTreeLock();
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray1[1] = object0;
      objectArray1[2] = object0;
      objectArray1[3] = object0;
      objectArray1[4] = object0;
      objectArray1[5] = object0;
      objectArray1[6] = object0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      Stack<MockGregorianCalendar> stack0 = new Stack<MockGregorianCalendar>();
      Comparator<MockGregorianCalendar> comparator0 = (Comparator<MockGregorianCalendar>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      DefaultTableModel defaultTableModel1 = new DefaultTableModel(stack0, stack0);
      jDayChooser0.updateUI();
      jDayChooser0.getMouseListeners();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.getComponents();
      jDayChooser1.setDayBordersVisible(false);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setFocus();
      jDayChooser2.isDecorationBordersVisible();
      jDayChooser0.setDay((-540));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      Object object0 = jDayChooser0.getTreeLock();
      objectArray2[1] = object0;
      objectArray2[7] = (Object) jDayChooser0;
      objectArray2[8] = (Object) jDayChooser0;
      objectArray0[1] = objectArray2;
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.removeContainerListener((ContainerListener) null);
      jDayChooser1.getLocale();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.712399438446259
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      Object object0 = jDayChooser0.getTreeLock();
      objectArray2[1] = object0;
      objectArray2[3] = (Object) jDayChooser0;
      objectArray2[6] = (Object) jDayChooser0;
      objectArray2[7] = (Object) jDayChooser0;
      JDayChooser jDayChooser1 = new JDayChooser();
      Date date0 = jDayChooser1.defaultMaxSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      Color color0 = DebugGraphics.flashColor();
      jDayChooser1.setBackground(color0);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setWeekOfYearVisible(true);
      JDayChooser jDayChooser3 = new JDayChooser(true);
      Date date2 = jDayChooser3.setMinSelectableDate(date1);
      Date date3 = jDayChooser1.setMaxSelectableDate(date2);
      assertSame(date1, date3);
      
      Date date4 = jDayChooser2.defaultMaxSelectableDate;
      jDayChooser2.addListeners(22);
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DebugGraphics.flashColor();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      DateFormatSymbols.getInstance();
      jDayChooser0.getSelectedDay();
      jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.710079913333388
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.fppdfASCIIHexFilter");
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      ImageIcon imageIcon0 = MapNodePositionHolderBase.getMapLocationIcon();
      MindIcon mindIcon0 = MindIcon.factory("fsy|qs&d", imageIcon0);
      ImageIcon imageIcon1 = mindIcon0.getIcon();
      imageIcon1.getIconWidth();
      JButton jButton0 = new JButton("fsy|qs&d", imageIcon1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MindIcon.factory("org.apache.fppdfASCIIHexFilter", imageIcon0);
      KeyEvent keyEvent0 = new KeyEvent(jButton0, (-1), 10, 10037, 10, 'J');
      KeyEvent.getKeyModifiersText(0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay(16);
      jDayChooser0.getDayPanel();
      assertEquals(16, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7376047233857554
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String string0 = "";
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("", false);
      jDayChooser0.getVerifyInputWhenFocusTarget();
      jDayChooser0.setEnabled(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addNotify();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.getMinimumSize();
      int int0 = 0;
      int int1 = 10043;
      FocusEvent focusEvent0 = new FocusEvent(jCheckBoxMenuItem0, 10043, false);
      jDayChooser0.focusLost(focusEvent0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = null;
      try {
        pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false, (OutputStream) null, 10043, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.fop.pdf.PDFDocument", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      jDayChooser0.getTreeLock();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      Vector<MockGregorianCalendar> vector0 = new Vector<MockGregorianCalendar>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1655), (-1655), (-1655), (-1655), (-1655));
      vector0.add(mockGregorianCalendar0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JEditorPane jEditorPane0 = new JEditorPane();
      Color color0 = jEditorPane0.getDisabledTextColor();
      jDayChooser0.setForeground(color0);
      Color color1 = jDayChooser0.getSundayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals((-6029312), color1.getRGB());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.677371952581733
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      Object object0 = jDayChooser0.getTreeLock();
      objectArray2[1] = object0;
      objectArray2[3] = (Object) jDayChooser0;
      objectArray2[6] = (Object) jDayChooser0;
      objectArray2[7] = (Object) jDayChooser0;
      JButton jButton0 = jDayChooser0.selectedDay;
      MindIcon mindIcon0 = MindIcon.factory("");
      ImageIcon imageIcon0 = mindIcon0.getIcon();
      JButton jButton1 = new JButton("", imageIcon0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1366), (-1L), (-1484), (-1), 'n');
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser1.drawDays();
      jDayChooser2.drawWeeks();
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.isDayBordersVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyStroke.getKeyStroke("day");
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.drawWeeks();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      mockGregorianCalendar0.getTimeInMillis();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.createImage(1958, 1958);
      jDayChooser0.imageUpdate((Image) null, 1958, 1958, 0, 0, 0);
      jDayChooser0.getMouseListeners();
      jDayChooser0.getInputMap(0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setDecorationBordersVisible(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-622), (-622), 523, 0, '<', 0);
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.init();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      jDayChooser0.getMinSelectableDate();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getFocusTraversalPolicy();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.decorationBackgroundVisible = false;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(false);
      int int0 = 0;
      jDayChooser0.updateUI();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, byteArrayOutputStream0, 30, 10043);
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(false);
      // Undeclared exception!
      try { 
        pDFDocumentGraphics2D1.clipRect(32, 30, 645, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.868064951410278
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&K.:");
      JDayChooser jDayChooser1 = new JDayChooser(false);
      ComponentListener[] componentListenerArray0 = jDayChooser0.getComponentListeners();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setMaxDayCharacters(1);
      Object object0 = jDayChooser0.getTreeLock();
      Object[][] objectArray0 = new Object[7][8];
      objectArray0[0] = (Object[]) componentListenerArray0;
      objectArray0[1] = (Object[]) componentListenerArray0;
      objectArray0[2] = (Object[]) componentListenerArray0;
      objectArray0[3] = (Object[]) componentListenerArray0;
      objectArray0[4] = (Object[]) componentListenerArray0;
      objectArray0[5] = (Object[]) componentListenerArray0;
      objectArray0[6] = (Object[]) componentListenerArray0;
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) jDayChooser1;
      objectArray1[1] = object0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      JTable jTable0 = new JTable();
      defaultTableModel0.addTableModelListener(jTable0);
      DefaultTableModel defaultTableModel1 = new DefaultTableModel();
      JTable jTable1 = new JTable(defaultTableModel1);
      jDayChooser0.setYear(210);
      jDayChooser0.setMonth(210);
      jDayChooser0.getDay();
      jDayChooser0.getSelectedDay();
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      Object object0 = jDayChooser0.getTreeLock();
      objectArray2[1] = object0;
      objectArray2[3] = (Object) jDayChooser0;
      objectArray2[6] = (Object) jDayChooser0;
      objectArray2[7] = (Object) jDayChooser0;
      JButton jButton0 = jDayChooser0.selectedDay;
      MindIcon mindIcon0 = MindIcon.factory("");
      ImageIcon imageIcon0 = mindIcon0.getIcon();
      JButton jButton1 = new JButton("", imageIcon0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "icons.list";
      stringArray0[2] = "";
      stringArray0[3] = "menu_bar/edit/.";
      stringArray0[4] = "icons.list";
      Integer integer0 = StrokingTextPainter.WRITING_MODE_RTL;
      ActionEvent actionEvent0 = new ActionEvent(integer0, (-1), "");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      Object object0 = jDayChooser0.getTreeLock();
      objectArray2[0] = object0;
      objectArray2[7] = (Object) jDayChooser0;
      objectArray2[8] = (Object) jDayChooser0;
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isValidateRoot();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MindIcon mindIcon0 = MindIcon.factory("Gg&|");
      ImageIcon imageIcon0 = mindIcon0.getIcon();
      imageIcon0.getIconWidth();
      JButton jButton0 = new JButton("icons.list", (Icon) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MindIcon.factory("M `D|o.)5", imageIcon0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JEditorPane jEditorPane0 = new JEditorPane();
      jEditorPane0.getDisabledTextColor();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBordersVisible(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      Color.RGBtoHSB(0, 917, 917, (float[]) null);
      jDayChooser0.setWeekdayForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StyleContext styleContext0 = new StyleContext();
      styleContext0.getEmptySet();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      Color color0 = defaultStyledDocument0.getForeground(attributeSet0);
      MetalScrollBarUI metalScrollBarUI0 = new MetalScrollBarUI();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      styleContext0.removeChangeListener((ChangeListener) null);
      jDayChooser0.setLayout(metalScrollBarUI0);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setSundayForeground(color0);
      ImageIcon imageIcon0 = new ImageIcon();
      JButton jButton0 = new JButton((String) null, imageIcon0);
      JButton jButton1 = new JButton();
      JButton jButton2 = new JButton((String) null, imageIcon0);
      JButton jButton3 = new JButton();
      jDayChooser0.transferFocusBackward();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setDayBordersVisible(false);
      JButton[] jButtonArray0 = new JButton[7];
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", false, false, false, false);
      JRootPane jRootPane0 = jInternalFrame0.getRootPane();
      jRootPane0.getDefaultButton();
      jButtonArray0[0] = null;
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.getDisabledIcon();
      JButton jButton0 = new JButton((Icon) null);
      jButtonArray0[1] = jButton0;
      JButton jButton1 = jDayChooser1.selectedDay;
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser1.keyTyped((KeyEvent) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "wgQ";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      DateFormatSymbols.getInstance();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7419541084422874
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      CardLayout cardLayout0 = new CardLayout();
      JPanel jPanel0 = new JPanel(cardLayout0);
      jDayChooser0.dayPanel = jPanel0;
      jDayChooser0.setDoubleBuffered(true);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.initDecorations();
      BorderLayout borderLayout0 = new BorderLayout((-2305), 281);
      jDayChooser0.setLayout(borderLayout0);
      jDayChooser0.getDecorationBackgroundColor();
      ImageIcon imageIcon0 = MapNodePositionHolderBase.sMapLocationIcon;
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("month", (Icon) null, false);
      jCheckBoxMenuItem0.getAccelerator();
      AWTKeyStroke.getAWTKeyStroke('(');
      jDayChooser0.unregisterKeyboardAction((KeyStroke) null);
      JMonthChooser jMonthChooser1 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser1);
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      JTable jTable0 = new JTable();
      jYearChooser0.createVolatileImage(0, 7);
      Rectangle rectangle0 = jTable0.getCellRect(0, (-1950), false);
      TurbulenceRable8Bit turbulenceRable8Bit0 = new TurbulenceRable8Bit(rectangle0, (-2566), (-624), 0, 0, false, false);
      MorphologyRable8Bit morphologyRable8Bit0 = new MorphologyRable8Bit(turbulenceRable8Bit0, 7, 1.0E-6, false);
      Rectangle2D rectangle2D0 = morphologyRable8Bit0.getBounds2D();
      rectangle0.setFrame(rectangle2D0);
      jYearChooser0.computeVisibleRect(rectangle0);
      jDayChooser0.setYearChooser(jYearChooser0);
      FocusEvent focusEvent0 = new FocusEvent(jYearChooser0, 7);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.669576756952125
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlignmentY(2149.2515F);
      Color color0 = Color.green;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7736275476159054
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", false, false, false, false);
      JRootPane jRootPane0 = jInternalFrame0.getRootPane();
      MultiRootPaneUI multiRootPaneUI0 = new MultiRootPaneUI();
      jRootPane0.setUI(multiRootPaneUI0);
      jRootPane0.getDefaultButton();
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.getDisabledIcon();
      JButton jButton0 = new JButton((Icon) null);
      JButton jButton1 = jDayChooser1.selectedDay;
      JButton jButton2 = new JButton("l`sZo", (Icon) null);
      jDayChooser_DecoratorButton0.hasFocus();
      jDayChooser1.setMonth(6);
      KeyEvent keyEvent0 = new KeyEvent(jButton0, 6, 6, 6, 436, 'Z');
      jDayChooser1.keyPressed(keyEvent0);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      jDayChooser0.getTreeLock();
      objectArray0[1] = objectArray1;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      JTable jTable0 = new JTable();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      ListSelectionModel listSelectionModel0 = defaultTableColumnModel0.getSelectionModel();
      jTable0.setSelectionModel(listSelectionModel0);
      defaultTableModel0.addTableModelListener(jTable0);
      JTable jTable1 = new JTable(defaultTableModel0);
      jDayChooser0.setYear(1002);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      jDayChooser0.getTreeLock();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      JTable jTable0 = new JTable();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      defaultTableColumnModel0.getSelectionModel();
      JTable jTable1 = new JTable();
      ListSelectionModel listSelectionModel0 = defaultTableColumnModel0.getSelectionModel();
      jTable1.setSelectionModel(listSelectionModel0);
      Stack<MockCalendar> stack0 = new Stack<MockCalendar>();
      DefaultTableModel defaultTableModel1 = new DefaultTableModel(stack0, 1002);
      defaultTableModel1.addTableModelListener(jTable0);
      JTable jTable2 = new JTable(defaultTableModel0);
      jDayChooser0.setYear(9);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6442551993262904
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.getTreeLock();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1, 210);
      JTable jTable0 = new JTable();
      Stack<MapDialog.ResultTableModel> stack0 = new Stack<MapDialog.ResultTableModel>();
      DefaultTableModel defaultTableModel1 = new DefaultTableModel(stack0, 28);
      defaultTableModel1.setRowCount(28);
      JList<Integer> jList0 = new JList<Integer>((Integer[]) null);
      ListSelectionModel listSelectionModel0 = jList0.getSelectionModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable1 = new JTable(defaultTableModel1, defaultTableColumnModel0, listSelectionModel0);
      JTable jTable2 = new JTable(stack0, stack0);
      defaultTableModel1.addTableModelListener(jTable2);
      DefaultTableModel defaultTableModel2 = new DefaultTableModel();
      JTable jTable3 = new JTable(defaultTableModel1);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setDayBordersVisible(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.5876788665337553
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      jDayChooser0.getTreeLock();
      jDayChooser0.setWeekOfYearVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("Dialog Plain 11", dateFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'i'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      jDayChooser0.removeContainerListener((ContainerListener) null);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(90, color0.getGreen());
  }
}
