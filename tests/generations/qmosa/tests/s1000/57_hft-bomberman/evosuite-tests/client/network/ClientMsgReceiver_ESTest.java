/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 02:17:50 GMT 2019
 */

package client.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import client.BomberClient;
import client.network.ClientMsgReceiver;
import java.awt.HeadlessException;
import java.net.Proxy;
import java.net.Socket;
import java.net.URL;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLWarning;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Predicate;
import messages.global.GlobalStateMsg;
import messages.global.MapInfo;
import messages.global.MapListMsg;
import messages.round.CountdownMsg;
import messages.round.TileHitPlayerMsg;
import org.apache.log4j.helpers.LogLog;
import org.apache.log4j.helpers.OptionConverter;
import org.apache.log4j.spi.LoggerRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W>Bb\"");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getSendBufferSize();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      CountdownMsg countdownMsg0 = new CountdownMsg(3898);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(countdownMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      int int0 = (-213);
      boolean boolean0 = false;
      SQLWarning sQLWarning0 = new SQLWarning();
      int int1 = 1;
      DataTruncation dataTruncation0 = new DataTruncation(int1, boolean0, boolean0, int0, int1);
      String string0 = "";
      String string1 = "CONNECTION LOST";
      SQLDataException sQLDataException0 = new SQLDataException(string0, string1, int0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLWarning0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(string0, string0, dataTruncation0);
      String string2 = "k1+;F";
      String string3 = " #+G.UuI_mj";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(string2, string3);
      int int2 = (-835);
      String string4 = "";
      int[] intArray0 = new int[8];
      intArray0[0] = int0;
      intArray0[1] = int0;
      int int3 = 2393;
      intArray0[2] = int3;
      intArray0[3] = int2;
      intArray0[4] = int1;
      intArray0[5] = int1;
      intArray0[1] = int2;
      intArray0[7] = int2;
      String string5 = "CONNECTION LOST";
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException(string5);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(string0, string4, intArray0, sQLNonTransientException1);
      int int4 = 0;
      TileHitPlayerMsg tileHitPlayerMsg0 = new TileHitPlayerMsg(int4);
      clientMsgReceiver0.processMsg(tileHitPlayerMsg0);
      assertFalse(clientMsgReceiver0.isInterrupted());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W>Bb\"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W>Bb\"");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockSocket mockSocket0 = new MockSocket();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.displayErrorMessage();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      LoggerRepository loggerRepository0 = mock(LoggerRepository.class, new ViolatedAssumptionAnswer());
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      int int0 = MockThread.MAX_PRIORITY;
      Stack<MapInfo> stack0 = new Stack<MapInfo>();
      MapInfo mapInfo0 = mock(MapInfo.class, new ViolatedAssumptionAnswer());
      Stack<MapInfo> stack1 = new Stack<MapInfo>();
      Vector<MapInfo> vector0 = new Vector<MapInfo>();
      MapInfo mapInfo1 = mock(MapInfo.class, new ViolatedAssumptionAnswer());
      TreeSet<MapInfo> treeSet0 = new TreeSet<MapInfo>();
      HashSet<MapInfo> hashSet0 = new HashSet<MapInfo>();
      MapInfo mapInfo2 = mock(MapInfo.class, new ViolatedAssumptionAnswer());
      hashSet0.add(mapInfo2);
      Vector<MapInfo> vector1 = new Vector<MapInfo>(hashSet0);
      MapInfo mapInfo3 = mock(MapInfo.class, new ViolatedAssumptionAnswer());
      vector0.add(mapInfo3);
      MapInfo mapInfo4 = mock(MapInfo.class, new ViolatedAssumptionAnswer());
      vector0.add(mapInfo4);
      LinkedList<MapInfo> linkedList0 = new LinkedList<MapInfo>();
      LinkedList<MapInfo> linkedList1 = new LinkedList<MapInfo>();
      MapInfo mapInfo5 = mock(MapInfo.class, new ViolatedAssumptionAnswer());
      Predicate<MapInfo> predicate0 = Predicate.isEqual((Object) linkedList0);
      predicate0.test((MapInfo) null);
      LinkedList<MapInfo> linkedList2 = new LinkedList<MapInfo>();
      linkedList2.add((MapInfo) null);
      linkedList2.remove();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) mockSocket0);
      linkedList2.removeIf(predicate1);
      System.setCurrentTimeMillis(10);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.displayErrorMessage();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getLocalPort();
      Thread[] threadArray0 = new Thread[2];
      MockThread.enumerate(threadArray0);
      MockURL.getFtpExample();
      LoggerRepository loggerRepository0 = mock(LoggerRepository.class, new ViolatedAssumptionAnswer());
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      LogLog.setQuietMode(true);
      mockSocket0.getTrafficClass();
      MockThread.enumerate(threadArray0);
      MockURL.getFtpExample();
      GlobalStateMsg globalStateMsg0 = new GlobalStateMsg(1);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(globalStateMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      Thread[] threadArray0 = new Thread[2];
      MockThread.enumerate(threadArray0);
      URL uRL0 = MockURL.getFtpExample();
      LoggerRepository loggerRepository0 = mock(LoggerRepository.class, new ViolatedAssumptionAnswer());
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      mockSocket0.getTrafficClass();
      int[] intArray0 = new int[9];
      intArray0[0] = 480;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      OptionConverter.selectAndConfigure(uRL0, "", loggerRepository0);
      intArray0[6] = (-749);
      intArray0[7] = 1;
      intArray0[8] = 1;
      Stack<MapInfo> stack0 = new Stack<MapInfo>();
      MapInfo mapInfo0 = mock(MapInfo.class, new ViolatedAssumptionAnswer());
      stack0.add(mapInfo0);
      MapInfo mapInfo1 = mock(MapInfo.class, new ViolatedAssumptionAnswer());
      stack0.add(mapInfo1);
      MapInfo mapInfo2 = mock(MapInfo.class, new ViolatedAssumptionAnswer());
      stack0.add(mapInfo2);
      MapInfo mapInfo3 = mock(MapInfo.class, new ViolatedAssumptionAnswer());
      stack0.add(mapInfo3);
      LinkedList<MapInfo> linkedList0 = new LinkedList<MapInfo>();
      MapListMsg mapListMsg0 = new MapListMsg(linkedList0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(mapListMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("messages.global.MapListMsg", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Socket socket0 = null;
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = null;
      try {
        clientMsgReceiver0 = new ClientMsgReceiver(socket0, bomberClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("common.network.MsgReceiver", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("Couldn't close input stream", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockSocket mockSocket0 = new MockSocket();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      String string0 = "^xQk";
      int[] intArray0 = new int[5];
      int int0 = (-2214);
      intArray0[3] = int0;
      MockThread.dumpStack();
      intArray0[1] = int0;
      int int1 = 926;
      intArray0[2] = int1;
      int int2 = (-1957);
      intArray0[3] = int2;
      int int3 = 153;
      intArray0[4] = int3;
      String string1 = "client.gui.GlobalLobby";
      int int4 = 1;
      SQLDataException sQLDataException0 = new SQLDataException(string1, string0, int4);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException0);
      String string2 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(string2, string0, sQLNonTransientConnectionException0);
      String string3 = "";
      StackTraceElement stackTraceElement0 = new StackTraceElement(string0, string3, string3, int1);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElement0;
      sQLSyntaxErrorException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLDataException0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W>Bjb\"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W>Bjb\"");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockSocket mockSocket0 = new MockSocket();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }
}
