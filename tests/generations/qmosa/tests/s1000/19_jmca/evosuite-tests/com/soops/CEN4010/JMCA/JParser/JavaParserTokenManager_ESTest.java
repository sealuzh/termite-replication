/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 02:54:58 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6852961136496276
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      StringReader stringReader0 = new StringReader("X05#{14h)tSr");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      StringReader stringReader1 = new StringReader("");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-1), (-2271));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 3);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: \"{\" (123), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5100371498201912
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("2Y%W-K|>'JbucK");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
       //  fail("Expecting exception: Error");
       // Unstable assertion
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"Y\" (89), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9171477010153852
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("GHqi~:Uz");
      StringReader stringReader1 = new StringReader("GHqi~:Uz");
      stringReader0.close();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader2 = new StringReader("GHqi~:Uz");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      stringReader1.reset();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("\"/*\"");
      stringReader2.close();
      StringReader stringReader3 = new StringReader("\"/*\"");
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: \":\" (58), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9642494367964642
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("aqt");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.getNextToken();
      MockFile mockFile0 = new MockFile("DEFAULT");
      stringReader0.close();
      StringReader stringReader1 = new StringReader("sQOmK+pxV7 p,KJ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringReader0.markSupported();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("&=", "b7p`i;M\"-))g/a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"b7p`i;M\"-))g/a\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9446498316836602
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-65);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[2] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((-2950L));
      String string0 = "I!Ix";
      StringReader stringReader0 = new StringReader("I!Ix");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2219), 43);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjimageLen = (-629);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = null;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("true", "I!Ix");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"I!Ix\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4764272492223247
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      StringReader stringReader0 = new StringReader("H5!R3T6I,k");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 21, (-2681), (byte)46);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-2680), javaCharStream0.getColumn());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8177060825036828
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      StringReader stringReader0 = new StringReader("X05#{14h)tSr");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("<<");
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.curLexState = (-1);
      javaParserTokenManager0.jjround = (-1);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("");
      StringReader stringReader3 = new StringReader("X05#{14h)tSr");
      StringReader stringReader4 = new StringReader("X05#{14h)tSr");
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-436));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -436. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.454234061815658
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringReader stringReader0 = new StringReader("M^)BHA");
      StringReader stringReader1 = new StringReader("M^)BHA");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      StringReader stringReader2 = new StringReader("M^)BHA");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, (-1), (-1));
      StringReader stringReader3 = new StringReader("gA`");
      stringReader2.close();
      StringReader stringReader4 = new StringReader("_2S");
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader4);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      stringReader1.reset();
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile(">");
      stringReader0.close();
      StringReader stringReader5 = new StringReader("gA`");
      stringReader4.markSupported();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("4j=gxw5", "enum");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"enum\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5453732586890288
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      StringReader stringReader0 = new StringReader("Yj;!Uo(\u0004");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("Yj");
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("Yj;!Uo(\u0004");
      stringReader1.close();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager2.getNextToken();
      MockFile mockFile1 = new MockFile("Yj");
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream1);
      JavaParserTokenManager javaParserTokenManager4 = null;
      try {
        javaParserTokenManager4 = new JavaParserTokenManager(javaCharStream0, (-1328));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1328. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4694113437304561
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("owxo4#)j$g7m=)r\"f");
      stringReader0.close();
      StringReader stringReader1 = new StringReader("owxo4#)j$g7m=)r\"f");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-1044), (-1044));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1044, column -1039.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.510809350592392
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1m2");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 66, 751);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      //  // Unstable assertion: assertEquals(2, javaCharStream0.bufpos);
      //  // Unstable assertion: assertEquals("1m2", token0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1981388430782163
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringReader stringReader0 = new StringReader("abBstract");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 39, 39);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(12);
      javaParserTokenManager0.jjround = 3791;
      StringReader stringReader1 = new StringReader("-`HxDo:^S|f~.");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 93, 39, 12);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("abBstract");
      StringReader stringReader2 = new StringReader("abBstract");
      StringReader stringReader3 = new StringReader("abBstract");
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1, 32);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 32. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5352664458946315
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      StringReader stringReader0 = new StringReader("X05#{14h)tSr");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      StringReader stringReader1 = new StringReader("X05#{14h)tSr");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (byte)46, (-3514));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.endLine = (int) (byte)46;
      javaParserTokenManager0.jjFillToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.481402165603261
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("-");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, (-326), (byte) (-60));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, (byte)0);
      javaParserTokenManager1.getNextToken();
      Token.newToken(2985);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(":o%zF", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0415905311329077
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringReader stringReader0 = new StringReader("M^)BHA");
      StringReader stringReader1 = new StringReader("M^)BHA");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("[tx;Up|&uRL,j");
      stringReader1.markSupported();
      StringReader stringReader2 = new StringReader("M");
      stringReader2.close();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile1 = new MockFile("~I!!L!@[C2wu!");
      StringReader stringReader3 = new StringReader("(");
      stringReader0.close();
      StringReader stringReader4 = new StringReader("M^)BHA");
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JavaCharStream javaCharStream2 = new JavaCharStream(bufferedInputStream0, (-473), (-838));
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream1, 3);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager3.getNextToken();
      javaParserTokenManager2.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(6, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.522499556601033
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-65);
      StringBuffer stringBuffer0 = new StringBuffer("IN_MULTI_LINE_COMMENT");
      stringBuffer0.append("IN_MULTI_LINE_COMMENT");
      StringReader stringReader0 = new StringReader("IN_MULTI_LINE_COMMENT");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-171), 40);
      StringReader stringReader1 = new StringReader("<FLOATING_POINT_LITERAL>");
      stringReader1.close();
      StringReader stringReader2 = new StringReader("<FLOATING_POINT_LITERAL>");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("Wax3vOjOC!");
      StringReader stringReader3 = new StringReader("8'%M H!+Wai");
      stringReader3.close();
      StringReader stringReader4 = new StringReader("IN_MULTI_LINE_COMMENT");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringReader0.markSupported();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((String) null, "IN_MULTI_LINE_COMMENT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"IN_MULTI_LINE_COMMENT\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9230875906474085
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)115);
      StringReader stringReader0 = new StringReader("/)dzy]P");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 25, (byte)115, 1393);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("goto");
      StringReader stringReader1 = new StringReader("");
      stringReader0.close();
      stringReader0.markSupported();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("\"class\"", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6732700895767931
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      StringReader stringReader0 = new StringReader("X05#{14h)tSr");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("<<");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 1735, (byte)46);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      Token.newToken(46);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "~5'>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"~5'>\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.472333658650057
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-50);
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-65);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+3`UwM%p:x{i");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)115;
      StringReader stringReader0 = new StringReader("$d4fjin");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-50), (byte) (-65));
      stringReader0.mark(2121);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, token0.endLine);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -50. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.588295830350237
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringBuffer stringBuffer0 = new StringBuffer(961);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte) (-115);
      StringReader stringReader0 = new StringReader("q~");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)75, (byte)75);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (byte) (-115));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -115. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0383982329598296
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-50);
      byteArray0[15] = (byte) (-63);
      StringReader stringReader0 = new StringReader("{cQ6<6=4/m 4G9Sy");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3, (byte) (-50));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 15);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 15. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9707032936899633
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("xT=vgU>Dn t");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      stringReader0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SwitchTo(3);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "5ySL:Eu_AtA%D!l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"5ySL:Eu_AtA%D!l\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9439041054621389
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("=(D.dLHJ>;.m9aladvl");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("=");
      stringReader0.close();
      StringReader stringReader1 = new StringReader("=(D.dLHJ>;.m9aladvl");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.525791498893665
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "u5A'o7\"!Eg0DJXC";
      StringReader stringReader0 = new StringReader("u5A'o7\"!Eg0DJXC");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.readChar();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
       //  fail("Expecting exception: Error");
       // Unstable assertion
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"A\" (65), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.92602487092306
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("r5$9~Y:`]hUl{Bb$|(");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "r5$9");
      stringReader0.read(charBuffer0);
      MockFile mockFile0 = new MockFile("8<MHxLxA");
      stringReader0.close();
      StringReader stringReader1 = new StringReader("-}CYyKv@~?,ZKx_e'}");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringReader0.markSupported();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "p+*.;dP uf3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"p+*.;dP uf3\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1637729500592577
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      StringReader stringReader0 = new StringReader(",");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile(" ph{5D9lc/o3 t`T");
      stringReader0.markSupported();
      stringReader0.close();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile1 = new MockFile(",");
      StringReader stringReader1 = new StringReader("");
      stringReader1.close();
      StringReader stringReader2 = new StringReader("");
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1, 1224);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1224. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5233853050575745
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      StringReader stringReader0 = new StringReader("X05#{14h)tSr");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      StringReader stringReader1 = new StringReader("X05#{14h)tSr");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (byte)46, (-3514));
      JavaCharStream javaCharStream2 = new JavaCharStream(mockFileInputStream0, 54, (-1), (-1));
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(mockFileInputStream0);
      StringReader stringReader2 = new StringReader("");
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      JavaCharStream javaCharStream3 = new JavaCharStream(byteArrayInputStream0, (-1894), 46);
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream3, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9393178471808854
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      String string0 = "3]?`[X\\pRAEM{VxV";
      StringReader stringReader0 = new StringReader("owxo4#)j$g7m=)r\"f");
      stringReader0.close();
      StringReader stringReader1 = new StringReader("3]?`[XpRAEM{VxV");
      StringReader stringReader2 = new StringReader("t,,AM!1#`L-.:");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      int int0 = (-3064);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-3064));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8045304716163573
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringReader stringReader0 = new StringReader("hk]NU");
      stringReader0.close();
      StringReader stringReader1 = new StringReader("hk]NU");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("hk", "hk]NU");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile1 = new MockFile("hk");
      stringReader0.close();
      StringReader stringReader2 = new StringReader("");
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 2);
      javaParserTokenManager1.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6237515933538273
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte) (-20);
      byteArray0[8] = (byte)64;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("3]?`[XpRAEM{VxV");
      stringReader0.close();
      StringReader stringReader1 = new StringReader("3]?`[XpRAEM{VxV");
      StringReader stringReader2 = new StringReader("3]?`[XpRAEM{VxV");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
       //  fail("Expecting exception: Error");
       // Unstable assertion
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"]\" (93), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9716982977043345
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringBuffer stringBuffer0 = new StringBuffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(117);
      StringReader stringReader0 = new StringReader("| !");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 117, 117, 117);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("goto");
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.533977021705245
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("VJb`B0,Z");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 988, 988, 988);
      javaCharStream0.readChar();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 988, column 991.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4553757830364698
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-50);
      StringReader stringReader0 = new StringReader("5ySL:Eu_AtA%D!l");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      stringReader0.close();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      MockFile mockFile0 = new MockFile("fNSn*");
      stringReader0.close();
      StringReader stringReader1 = new StringReader("28#kTK}VHd/~'-_4_");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader2 = new StringReader("=");
      stringReader2.markSupported();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("fNSn*", "RQcU(2I=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"RQcU(2I=\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5718268267167306
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("GHqi~:Uz");
      StringReader stringReader1 = new StringReader("GHqi~:Uz");
      stringReader0.close();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader2 = new StringReader("[Xn6r*");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      stringReader1.reset();
      javaParserTokenManager0.getNextToken();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      StringReader stringReader3 = new StringReader("extends");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "extends");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-764), (-764));
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      Token.newToken(2653);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.490648222505606
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringBuffer stringBuffer0 = new StringBuffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(117);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)6;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      StringReader stringReader0 = new StringReader("strictfp");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)85, (byte)6);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token.newToken((byte)85);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.448574958691757
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringBuffer stringBuffer0 = new StringBuffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      StringReader stringReader0 = new StringReader("Z3>n-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0, 11);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 961, 961, 961);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z3>n-");
      Token token0 = token_GTToken0.next;
      javaParserTokenManager0.getNextToken();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("), ", "), ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"), \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9756087332382997
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringBuffer stringBuffer0 = new StringBuffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(117);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer1 = new StringBuffer(117);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)75;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (byte)75, (-87), 3);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      StringReader stringReader0 = new StringReader("w7^TajIQ!Vl!{M0,Edd");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-2119), 3);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, (-2119));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2119. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9437840308178593
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      String string0 = "*P?S;;_`-`";
      StringReader stringReader0 = new StringReader("*P?S;;_`-`");
      StringReader stringReader1 = new StringReader("*P?S;;_`-`");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1137, (-1644));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((String) null, "*P?S;;_`-`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"*P?S;;_`-`\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.346219474337729
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringBuffer stringBuffer0 = new StringBuffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(117);
      String string0 = "| !";
      StringReader stringReader0 = new StringReader("| !");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 117, 117, 117);
      javaCharStream0.inBuf = 4159;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5100371498201912
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringReader stringReader0 = new StringReader("#5YwB7r0$w");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 988, 988, 988);
      javaCharStream0.readChar();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      stringReader0.close();
      Token token0 = new Token();
      try { 
        stringReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.9681204045383998
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      StringReader stringReader0 = new StringReader("package");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("package");
      stringReader0.close();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((String) null, "package");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"package\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4847802543608357
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringReader stringReader0 = new StringReader("abstract");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 39, 39);
      StringReader stringReader1 = new StringReader("Xi");
      StringReader stringReader2 = new StringReader("a(");
      StringReader stringReader3 = new StringReader("vK&-cv~=aST}]~");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader3);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("Xi", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.448574958691757
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuffer stringBuffer0 = new StringBuffer(961);
      StringReader stringReader0 = new StringReader("u#K`7KZ7#E");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 61, 61, 61);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("goto");
      StringReader stringReader1 = new StringReader("u#K`7KZ7#E");
      stringReader1.close();
      stringReader0.markSupported();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("`wjPtxC[Pt2", "@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"@\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5142174411433418
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, (byte)16);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      StringReader stringReader0 = new StringReader("DnC\"5ue|");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-729), 65);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token.newToken(74);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -729, column 73.  Encountered: <EOF> after : \"\\\"5ue|\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9566098281617053
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<STRING_LITERAL>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile(".  Encountered: ");
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("[tx;Up|&uRL,j");
      stringReader0.close();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      MockFile mockFile1 = new MockFile("<STRING_LITERAL>");
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.getNextToken();
      MockFile mockFile2 = new MockFile("STRING_LITERAL");
      StringReader stringReader2 = new StringReader("<STRING_LITERAL>");
      stringReader2.read();
      javaParserTokenManager2.getNextToken();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile3 = new MockFile("");
      StringReader stringReader3 = new StringReader("f$uX2");
      stringReader1.mark(23);
      stringReader3.close();
      stringReader0.markSupported();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "\"73q'ofR_3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\"73q'ofR_3\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3604749842997659
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringReader stringReader0 = new StringReader("f");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)0, 64);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(39);
      StringReader stringReader1 = new StringReader("");
      javaParserTokenManager0.getNextToken();
      StringReader stringReader2 = new StringReader("0i_{U");
      stringReader2.close();
      stringReader1.markSupported();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("f", "ivG\u0005S;Eq_TT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"ivG\u0005S;Eq_TT\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6057859189015395
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)115;
      String string0 = "^=";
      StringReader stringReader0 = new StringReader("^=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 22, (-939));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      token0.endColumn = 22;
      // Undeclared exception!
      try { 
        javaParserTokenManager1.ReInit(javaCharStream0, 22);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 22. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5572941687016906
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-65);
      StringReader stringReader0 = new StringReader("-=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-50), (byte) (-50));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-50));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -50. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5776166579246298
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)115;
      StringReader stringReader0 = new StringReader("$d4fjin");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-50), (byte) (-65));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-4178));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -4178. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5053383168413812
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringBuffer stringBuffer0 = new StringBuffer(961);
      StringBuffer stringBuffer1 = new StringBuffer();
      StringReader stringReader0 = new StringReader("m)3\"f<");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjimageLen = (-1);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("OfSWh");
      stringReader0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 14);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 14. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.7037289055829872
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((byte) (-65));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)115);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 122, 2155, (-2499));
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      StringReader stringReader0 = new StringReader("@5~jP(@uIg<?Z");
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      byteArrayInputStream0.reset();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (byte) (-50));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -50. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.1591241476800294
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      StringReader stringReader0 = new StringReader(" column ");
      stringReader0.close();
      StringReader stringReader1 = new StringReader(" column ");
      StringBuffer stringBuffer0 = new StringBuffer("MYa_<?7");
      stringBuffer0.append("MYa_<?7");
      StringReader stringReader2 = new StringReader(" column ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1691), 40);
      StringReader stringReader3 = new StringReader(" column ");
      stringReader0.close();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("<FLOATING_POINT_LITERAL>");
      StringReader stringReader4 = new StringReader("\"int\"");
      stringReader4.close();
      StringReader stringReader5 = new StringReader("pN~8&vLE X");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("<FLOATING_POINT_LITERAL>", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9842257778294128
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringReader stringReader0 = new StringReader("k]NU");
      stringReader0.close();
      StringReader stringReader1 = new StringReader("k]NU");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)115);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 121, 121, (byte)115);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("public");
      stringReader0.close();
      StringReader stringReader2 = new StringReader("false");
      stringReader1.ready();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringReader0.markSupported();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("-wd?7aRBOx\"", "5e~YQ-x[.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"5e~YQ-x[.\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.4260588613359277
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("package");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("\"|\"");
      stringReader0.close();
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.0440516481230215
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("GXqq&ND=*,G^B");
      StringReader stringReader0 = new StringReader("t&upM+{");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 10, 126);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-4784));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -4784. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.9380988696203851
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringReader stringReader0 = new StringReader("hk]NU");
      stringReader0.close();
      StringReader stringReader1 = new StringReader("hk]NU");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      StringBuffer stringBuffer0 = new StringBuffer("MYa_<?7");
      Object object0 = new Object();
      stringBuffer0.append(object0);
      stringBuffer0.append("MYa_<?7");
      StringReader stringReader2 = new StringReader("6");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-2444), (-1691));
      StringReader stringReader3 = new StringReader("t&upM+{");
      stringReader2.close();
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader3);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("t&upM+{");
      stringReader0.close();
      StringReader stringReader4 = new StringReader("\"@\"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringReader4.markSupported();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("/iOC+=RA@[*\"{|<~_o", "/iOC+=RA@[*\"{|<~_o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"/iOC+=RA@[*\"{|<~_o\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.4600710457681791
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-65);
      byteArray0[1] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("&");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-65), (-880));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      StringReader stringReader1 = new StringReader("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "this");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-880), (-484));
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      Token.newToken((-880));
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 3913);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 3913. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.9222153471135361
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-50);
      byteArray0[0] = (byte) (-50);
      StringReader stringReader0 = new StringReader("bE#k#A4NB4");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 68, 98);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token.newToken(12);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9435528515000753
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)115;
      StringReader stringReader0 = new StringReader(">pwuc@s\"5h");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 55, (byte) (-77));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token.newToken(124);
      stringReader0.skip((byte)115);
      MockFile mockFile0 = new MockFile(">pwuc@s\"5h");
      StringReader stringReader1 = new StringReader("");
      stringReader1.close();
      StringReader stringReader2 = new StringReader("\"goto\"");
      stringReader1.markSupported();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", ">pwuc@s\"5h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \">pwuc@s\"5h\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5666745634092076
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringBuffer stringBuffer0 = new StringBuffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(117);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-32);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("N");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("");
      stringReader0.close();
      StringReader stringReader1 = new StringReader(" ");
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 28);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 28. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8908419547146147
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringReader stringReader0 = new StringReader("hk]NU");
      stringReader0.close();
      StringReader stringReader1 = new StringReader("hk]NU");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaParserTokenManager0.getNextToken();
      stringReader0.close();
      StringReader stringReader2 = new StringReader("");
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1546985398959184
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)115);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (-283), 24, 122);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      StringReader stringReader0 = new StringReader("@5~jP(@uIg<?Z");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 94, (-1167));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 2503);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2503. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6601346075620529
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-50);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringReader stringReader0 = new StringReader("\"+=\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 56, 98);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token.newToken(101);
      StringReader stringReader1 = new StringReader("");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 542, 207, 56);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager2.getNextToken();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("iBR&pOx$oJS}Z6`K");
      StringReader stringReader2 = new StringReader("le|krnBHv");
      StringReader stringReader3 = new StringReader("le|krnBHv");
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.getNextToken();
      assertEquals(101, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager3.getNextToken();
      assertEquals(0, token0.kind);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.4894534918397335
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-60);
      StringReader stringReader0 = new StringReader("~ac12l>h[*i8>i\"G3");
      StringReader stringReader1 = new StringReader("\"byte\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("JvlBT|?7>S2BH}A)Z-");
      StringReader stringReader2 = new StringReader("\"byte\"");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader3 = new StringReader("{Mc/lGYH");
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      stringReader3.close();
      charArray0[1] = '+';
      charArray0[2] = 'V';
      try { 
        stringReader3.read(charArray0, 73, (int) (byte) (-50));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5098513352571596
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      StringBuffer stringBuffer0 = new StringBuffer(961);
      String string0 = "OfSWh";
      StringReader stringReader0 = new StringReader("OfSWh");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 126, 126);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token.newToken(126);
      try { 
        stringReader0.skip(74);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.030964473220763
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<STRING_LITERAL>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      StringReader stringReader1 = new StringReader("gA`");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), (-1691));
      StringReader stringReader2 = new StringReader("enum");
      stringReader1.close();
      StringReader stringReader3 = new StringReader("gA`");
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader2);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      stringReader3.reset();
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("<STRING_LITERAL>");
      stringReader2.close();
      StringReader stringReader4 = new StringReader("4j=gxw5");
      boolean boolean0 = stringReader2.markSupported();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.3018601525891627
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)115);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (-283), 24, 122);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      StringReader stringReader0 = new StringReader("@5~jP(@uIg<?Z");
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -283, column 24.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.4981761906601778
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("GHqi~:Uz");
      stringReader0.close();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader2 = new StringReader("j}1iH?&'V7v`\"V");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringReader stringReader3 = new StringReader("TRNMc+,b8j'q)<}]<");
      stringReader3.reset();
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("TRNMc+,b8j'q)<}]<");
      stringReader1.close();
      StringReader stringReader4 = new StringReader("import");
      stringReader2.markSupported();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("Cgu_^^;w,Lz", "NDR:A6DLQpvW}:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"NDR:A6DLQpvW}:\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.504377927211992
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-50);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringBuffer stringBuffer0 = new StringBuffer(49);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      StringReader stringReader0 = new StringReader("Z3>n-");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-50), (-1191));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      int int0 = 1318;
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1318);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1318. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.504377927211992
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-50);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      StringReader stringReader0 = new StringReader("Z3>n-");
      dataInputStream0.skip((byte) (-50));
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-50), (-1191));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1318);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1318. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.504377927211992
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-50);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      StringReader stringReader0 = new StringReader("Z3>n-");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-50), (-1191));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1318);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1318. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.6651540405354512
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringReader stringReader0 = new StringReader("k]NU");
      stringReader0.close();
      StringReader stringReader1 = new StringReader("k]NU");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("k");
      Token token1 = new Token();
      token1.kind = (-1637);
      stringReader1.read();
      javaParserTokenManager0.TokenLexicalActions(token0);
      Token token2 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.SkipLexicalActions(token2);
      javaParserTokenManager0.SwitchTo(0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo(591);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 591. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      bufferedInputStream0.mark(0);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 46, 116, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 1);
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
      assertFalse(JavaCharStream.staticFlag);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5421691537366728
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-50);
      byteArray0[1] = (byte)0;
      StringReader stringReader0 = new StringReader("5ySL:Eu_AtA%D!l");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.getNextToken();
      stringReader0.close();
      javaParserTokenManager0.jjFillToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-2414));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2414. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0, 0, (-1394), 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = 't';
      charArray0[2] = '[';
      charArray0[3] = 'n';
      charArray0[4] = 'V';
      charArray0[5] = 'y';
      charArray0[6] = 'p';
      javaCharStream0.nextCharBuf = charArray0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, true);
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-65);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+3`UwM%p:x{i");
      byteArray0[2] = (byte)115;
      StringReader stringReader0 = new StringReader("$d4fjin");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-50), (byte) (-65));
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.9512667872451708
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte) (-65);
      StringReader stringReader0 = new StringReader("6:eU.5sk.`WQC&>y");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      MockFile mockFile0 = new MockFile("P=|m");
      stringReader0.close();
      StringReader stringReader1 = new StringReader("Sp6 ");
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, (byte)0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager3 = null;
      try {
        javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0, 493);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 493. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.1118328723970734
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      StringReader stringReader0 = new StringReader("*wz_s");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-50), (byte) (-50));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.beginColumn = 338;
      javaParserTokenManager1.ReInit(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, (-646));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -646. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RmmVzyO;={Z8.<");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2285, 2285);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\f");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = '?';
      charArray0[2] = ')';
      charArray0[3] = 'w';
      charArray0[4] = 'J';
      stringReader0.read(charArray0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
