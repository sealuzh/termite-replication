/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 02:51:21 GMT 2019
 */

package com.lts.application.international;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.application.ApplicationException;
import com.lts.application.international.MessageFormatter;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MessageFormatter_ESTest extends MessageFormatter_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.457465386999542
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.lts.application.errors.ReadingProperties");
      MessageFormatter messageFormatter0 = new MessageFormatter();
      MessageFormatter.buildList(messageFormatter0.DEFAULT_BUNDLE_PATH);
      MessageFormatter messageFormatter1 = new MessageFormatter();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      List<String> list1 = ResourceBundle.Control.FORMAT_PROPERTIES;
      ResourceBundle.Control.getControl(list0);
      messageFormatter1.addBundle((ResourceBundle) null);
      messageFormatter0.temp();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A\"HsBmu");
      List<String> list2 = ResourceBundle.Control.FORMAT_CLASS;
      MessageFormatter messageFormatter2 = new MessageFormatter();
      MessageFormatter messageFormatter3 = new MessageFormatter();
      List<String> list3 = ResourceBundle.Control.FORMAT_CLASS;
      messageFormatter1.getLastException();
      // Undeclared exception!
      try { 
        messageFormatter1.getMessage((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream1.flush();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      pipedOutputStream1.flush();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      MessageFormatter messageFormatter0 = new MessageFormatter();
      messageFormatter0.addBundle((ResourceBundle) null);
      String string0 = "com.lts.application.international.MessageFormatter$LoadBundleError";
      // Undeclared exception!
      try { 
        messageFormatter0.getMessage("resources.messages.standard");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.setDefaultAssertionStatus(false);
      LinkedList<ResourceBundle> linkedList0 = new LinkedList<ResourceBundle>();
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)2;
      byteArray0[3] = (byte) (-70);
      Object object0 = new Object();
      ApplicationException applicationException0 = new ApplicationException((Throwable) null, "v<HL0Q%", object0);
      messageFormatter0.myLastException = (Throwable) applicationException0;
      messageFormatter0.getLastException();
      // Undeclared exception!
      try { 
        applicationException0.initCause(messageFormatter0.myLastException);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with org.evosuite.runtime.mock.java.lang.MockThrowable: v<HL0Q%
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.95571359982777
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ApplicationException applicationException0 = new ApplicationException(", ");
      applicationException0.setKey(", ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "X:sO`");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("\"?GDqUiq0B0|");
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(stringReader0);
      String string0 = MessageFormatter.DEFAULT_BUNDLE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y\u0006V");
      LinkedList<ResourceBundle> linkedList0 = new LinkedList<ResourceBundle>();
      ApplicationException applicationException1 = new ApplicationException("qF|[;Y");
      MessageFormatter messageFormatter0 = new MessageFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      Object[] objectArray0 = new Object[20];
      objectArray0[0] = (Object) ", ";
      objectArray0[1] = (Object) fileSystemHandling0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      messageFormatter0.formatMessage("\"?GDqUiq0B0|", objectArray0, (ResourceBundle) propertyResourceBundle0);
      messageFormatter0.addBundle(propertyResourceBundle0);
      messageFormatter0.getMessage("\"?GDqUiq0B0|", (Object[]) messageFormatter0.DEFAULT_BUNDLE_PATH);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        MockFile.createTempFile(", ", "r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1065));
      linkedList0.add(integer0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Integer integer1 = new Integer((-1011));
      linkedList1.retainAll(linkedList0);
      linkedList1.add((Integer) null);
      Integer integer2 = new Integer((-110));
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList1.clear();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      Integer integer3 = new Integer((-110));
      Integer integer4 = new Integer((-1011));
      Integer integer5 = new Integer((-1011));
      linkedList0.add(integer5);
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      Integer integer6 = new Integer((-804));
      LinkedList<Integer> linkedList6 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList7 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList8 = new LinkedList<Integer>();
      Integer integer7 = new Integer(9);
      linkedList1.add(integer7);
      LinkedList<Integer> linkedList9 = new LinkedList<Integer>();
      Locale locale0 = new Locale("Vi", "Vi", "");
      ClassLoader.getSystemClassLoader();
      MessageFormatter messageFormatter0 = new MessageFormatter();
      MessageFormatter messageFormatter1 = new MessageFormatter();
      // Undeclared exception!
      try { 
        messageFormatter1.initializeResourceBundle((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      List list0 = MessageFormatter.buildList((Object[]) null);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream1.flush();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      pipedOutputStream1.flush();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      MessageFormatter messageFormatter0 = new MessageFormatter();
      messageFormatter0.addBundle((ResourceBundle) null);
      String string0 = "com.lts.application.international.MessageFormatter$LoadBundleError";
      // Undeclared exception!
      try { 
        messageFormatter0.formatMessage("com.lts.application.international.MessageFormatter$LoadBundleError", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      pipedOutputStream0.close();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      pipedOutputStream2.close();
      pipedOutputStream2.close();
      pipedOutputStream1.close();
      pipedOutputStream4.flush();
      pipedOutputStream1.flush();
      pipedOutputStream1.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream2);
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream4);
      PipedInputStream pipedInputStream3 = new PipedInputStream(pipedOutputStream1);
      MessageFormatter messageFormatter0 = new MessageFormatter();
      // Undeclared exception!
      try { 
        messageFormatter0.tryLoad("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(399);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer1 = new Integer(399);
      linkedList1.addFirst(integer1);
      Integer integer2 = new Integer(399);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer3 = new Integer(399);
      Integer integer4 = new Integer(399);
      linkedList2.add(integer4);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList3.addAll((Collection<? extends Integer>) linkedList0);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      MessageFormatter messageFormatter0 = new MessageFormatter();
      // Undeclared exception!
      try { 
        messageFormatter0.initializeResourceBundle((List) linkedList1, (List) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      MessageFormatter messageFormatter0 = new MessageFormatter();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(sequenceInputStream0);
      messageFormatter0.addBundle(propertyResourceBundle0);
      try { 
        messageFormatter0.formatMessage("#-QHs[U}s*/xk+Fy", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.lts.application.ApplicationMessages.error.keyNotFound
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7612118325115627
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ApplicationException applicationException0 = new ApplicationException(", ");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("!&F5sxoou", "!&F5sxoou", "#JG 8YL2uaWMi%C", 261);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(", ", "%~=E/d_/", "SwZ4+P^D1q.4W", 1198);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("com.lts.application.errors.unrecognizedSwitch", "; and resource path: ", "; and resource path: ", 4);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("com.lts.application.errors.unrecognizedSwitch", "; and resource path: ", "%~=E/d_/", 261);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("Wq@SG{", "Wq@SG{", "SwZ4+P^D1q.4W", (-183));
      stackTraceElementArray0[4] = stackTraceElement4;
      applicationException0.setStackTrace(stackTraceElementArray0);
      applicationException0.setKey("/");
      StringReader stringReader0 = new StringReader("/");
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(stringReader0);
      String string0 = MessageFormatter.DEFAULT_BUNDLE;
      LinkedList<ResourceBundle> linkedList0 = new LinkedList<ResourceBundle>();
      ApplicationException applicationException1 = new ApplicationException("qF|[;Y");
      MessageFormatter messageFormatter0 = new MessageFormatter();
      messageFormatter0.addBundle(propertyResourceBundle0);
      messageFormatter0.formatMessage("/", (Object[]) null);
      MockThrowable mockThrowable0 = new MockThrowable(", ");
      // Undeclared exception!
      try { 
        messageFormatter0.getMessage("resources.messages.standard");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.lts.application.ApplicationMessages.error.keyNotFound
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      String string0 = messageFormatter0.listToString((List<String>) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<MessageFormatter.LoadBundleError> linkedList0 = new LinkedList<MessageFormatter.LoadBundleError>();
      MockThrowable mockThrowable0 = new MockThrowable();
      ApplicationException applicationException0 = new ApplicationException("resources.messages.standard");
      MessageFormatter.LoadBundleError messageFormatter_LoadBundleError0 = new MessageFormatter.LoadBundleError("resources.messages.standard", applicationException0);
      linkedList0.add(messageFormatter_LoadBundleError0);
      messageFormatter0.createLoadException(linkedList0);
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      Locale locale0 = Locale.UK;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream1);
      Locale locale1 = Locale.FRANCE;
      ClassLoader.getSystemClassLoader();
      MessageFormatter messageFormatter1 = new MessageFormatter();
      List<String> list1 = ResourceBundle.Control.FORMAT_PROPERTIES;
      assertFalse(list1.equals((Object)list0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1011));
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList4.retainAll(linkedList0);
      linkedList3.add((Integer) null);
      Integer integer1 = new Integer((-110));
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      Integer integer2 = new Integer((-110));
      Integer integer3 = new Integer((-2070));
      linkedList0.add(integer3);
      LinkedList<Integer> linkedList6 = new LinkedList<Integer>();
      Integer integer4 = new Integer((-778));
      LinkedList<Integer> linkedList7 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList8 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList9 = new LinkedList<Integer>();
      Integer integer5 = new Integer(74);
      linkedList8.add(integer5);
      LinkedList<Integer> linkedList10 = new LinkedList<Integer>();
      linkedList10.add(integer4);
      Locale locale0 = new Locale("Q.", "6:D|j/+Q>D~O>_OG2PT", "");
      ClassLoader.getSystemClassLoader();
      MessageFormatter messageFormatter0 = new MessageFormatter();
      MessageFormatter messageFormatter1 = new MessageFormatter();
      MessageFormatter messageFormatter2 = new MessageFormatter();
      // Undeclared exception!
      try { 
        messageFormatter2.tryLoad((String) null, "-+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      MessageFormatter messageFormatter0 = new MessageFormatter();
      Locale locale0 = Locale.US;
      classLoader1.getParent();
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        messageFormatter0.initializeResourceBundle((List<String>) null, (List<String>) null, locale0, (ClassLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("4*6kFSBm=]x");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4*6kFSBm=]x");
      mockPrintWriter0.write(2);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "mN", 2, 2);
      printWriter0.write("4*6kFSBm=]x", 2, 2);
      printWriter0.print((long) '\u001B');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      printWriter0.print((-1L));
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter2.println((-1L));
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter2);
      MockPrintWriter mockPrintWriter4 = new MockPrintWriter("mN");
      mockPrintWriter0.write(418);
      MockPrintWriter mockPrintWriter5 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.println(418);
      mockPrintWriter5.write((-1978));
      mockPrintWriter4.close();
      mockPrintWriter4.flush();
      mockPrintWriter2.flush();
      mockPrintWriter5.print("4*6kFSBm=]x");
      mockPrintWriter2.flush();
      char[] charArray0 = new char[6];
      mockPrintWriter4.flush();
      mockPrintWriter2.println(charArray0);
      mockPrintWriter4.println(charArray0);
      mockPrintWriter4.flush();
      mockPrintWriter4.println(charArray0);
      MessageFormatter messageFormatter0 = new MessageFormatter();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      ResourceBundle.Control resourceBundle_Control0 = ResourceBundle.Control.getControl(list0);
      List<String> list1 = resourceBundle_Control0.getFormats("mN");
      String string0 = messageFormatter0.listToString(list1);
      assertEquals("java.class, java.properties", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream1.flush();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedOutputStream1.connect(pipedInputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedOutputStream1.close();
      ClassLoader.getSystemClassLoader();
      pipedOutputStream2.flush();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      MessageFormatter messageFormatter0 = new MessageFormatter();
      // Undeclared exception!
      try { 
        messageFormatter0.createLoadException((List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-110));
      linkedList0.add(integer0);
      Integer integer1 = new Integer((-1011));
      linkedList3.add(integer1);
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList4.push(integer1);
      Integer integer2 = new Integer((-110));
      linkedList0.add(integer2);
      linkedList3.add((Integer) null);
      Integer integer3 = new Integer((-110));
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      Integer integer4 = new Integer((-110));
      Integer integer5 = new Integer((-2077));
      linkedList0.add(integer5);
      LinkedList<Integer> linkedList6 = new LinkedList<Integer>();
      Integer integer6 = new Integer((-778));
      LinkedList<Integer> linkedList7 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList8 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList9 = new LinkedList<Integer>();
      Integer integer7 = new Integer((-110));
      linkedList8.add(integer7);
      LinkedList<Integer> linkedList10 = new LinkedList<Integer>();
      linkedList10.add(integer6);
      LinkedList<Integer> linkedList11 = new LinkedList<Integer>();
      Integer integer8 = new Integer((-2004318069));
      linkedList11.add(integer8);
      MessageFormatter messageFormatter0 = new MessageFormatter();
      // Undeclared exception!
      try { 
        messageFormatter0.tryLoad("~", "~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hi`3y}");
      mockPrintWriter0.write(2);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("hi`3y}");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("hi`3y}");
      mockPrintWriter1.write("hi`3y}", 2, 2);
      mockPrintWriter1.println();
      mockPrintWriter0.print(true);
      mockPrintWriter1.flush();
      mockPrintWriter1.println(true);
      mockPrintWriter1.print((long) '?');
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.print((long) '?');
      mockPrintWriter0.print('?');
      MockPrintWriter mockPrintWriter4 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter4.println((long) 2);
      mockPrintWriter0.flush();
      mockPrintWriter3.println("hi`3y}");
      mockPrintWriter4.println((long) 2);
      MockPrintWriter mockPrintWriter5 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter6 = new MockPrintWriter("hi`3y}");
      mockPrintWriter1.print((long) '?');
      MockPrintWriter mockPrintWriter7 = new MockPrintWriter(">EV0/s<e");
      MockPrintWriter mockPrintWriter8 = new MockPrintWriter("hi`3y}");
      mockPrintWriter8.println(true);
      MockPrintWriter mockPrintWriter9 = new MockPrintWriter(mockPrintWriter1);
      mockPrintWriter1.close();
      mockPrintWriter6.println("e??U-!z");
      mockPrintWriter1.println((long) 2);
      MessageFormatter messageFormatter0 = new MessageFormatter();
      Object[] objectArray0 = new Object[0];
      try { 
        messageFormatter0.getMessage("e??U-!z", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.lts.application.ApplicationMessages.error.keyNotFound
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      String string0 = "!o:0u+v";
      Object object0 = new Object();
      Integer integer0 = new Integer(953);
      // Undeclared exception!
      try { 
        messageFormatter0.getMessage("!o:0u+v", object0, (Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.lts.application.ApplicationMessages.error.keyNotFound
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) messageFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        messageFormatter0.formatMessage("wDV", objectArray0, (ResourceBundle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(sequenceInputStream0);
      String string0 = messageFormatter0.formatMessage("\u0000Yug;( ]", (Object[]) null, (ResourceBundle) propertyResourceBundle0);
      assertNull(string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      ApplicationException applicationException0 = new ApplicationException("EN");
      applicationException0.getMessage();
      // Undeclared exception!
      try { 
        messageFormatter0.getMessage((Throwable) applicationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.lts.application.ApplicationMessages.error.keyNotFound
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      mockPrintWriter1.write("xR@/:OH?.)6i;HKxhj", 2, 2);
      mockPrintWriter1.println();
      mockPrintWriter0.print(false);
      mockPrintWriter0.write("xR@/:OH?.)6i;HKxhj");
      mockPrintWriter1.write(2);
      mockPrintWriter1.print((long) '8');
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.print((long) '8');
      mockPrintWriter1.println('8');
      mockPrintWriter0.print('8');
      MockPrintWriter mockPrintWriter4 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter2.print('B');
      mockPrintWriter4.println((long) 2);
      mockPrintWriter4.print((double) 2);
      MockPrintWriter mockPrintWriter5 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      mockPrintWriter4.println((double) 2);
      mockPrintWriter5.println(false);
      mockPrintWriter4.println((long) 2);
      MockPrintWriter mockPrintWriter6 = new MockPrintWriter(mockPrintWriter5);
      MockPrintWriter mockPrintWriter7 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      mockPrintWriter2.print((long) 'i');
      MockPrintWriter mockPrintWriter8 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      MockPrintWriter mockPrintWriter9 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      mockPrintWriter2.checkError();
      mockPrintWriter8.flush();
      MockPrintWriter mockPrintWriter10 = new MockPrintWriter(mockPrintWriter9);
      mockPrintWriter0.print(0L);
      MessageFormatter messageFormatter0 = new MessageFormatter();
      List list0 = messageFormatter0.loadCriticalBundles();
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      mockPrintWriter1.write("xR@/:OH?.)6i;HKxhj", 2, 2);
      mockPrintWriter1.println();
      mockPrintWriter0.print(false);
      mockPrintWriter0.write("xR@/:OH?.)6i;HKxhj");
      mockPrintWriter1.write(2);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter0, false);
      MockPrintWriter mockPrintWriter4 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter2.print('B');
      mockPrintWriter4.println((long) 2);
      mockPrintWriter4.print((double) 2);
      MockPrintWriter mockPrintWriter5 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      mockPrintWriter4.println((double) 2);
      mockPrintWriter5.println(false);
      mockPrintWriter4.println((long) 2);
      MockPrintWriter mockPrintWriter6 = new MockPrintWriter(mockPrintWriter5);
      MockPrintWriter mockPrintWriter7 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      mockPrintWriter2.print((long) 'i');
      MockPrintWriter mockPrintWriter8 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      MockPrintWriter mockPrintWriter9 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      mockPrintWriter2.checkError();
      mockPrintWriter8.flush();
      MockPrintWriter mockPrintWriter10 = new MockPrintWriter(mockPrintWriter9);
      mockPrintWriter0.print(0L);
      MessageFormatter messageFormatter0 = new MessageFormatter();
      List list0 = messageFormatter0.loadCriticalBundles();
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      mockPrintWriter1.write("xR@/:OH?.)6i;HKxhj", 2, 2);
      mockPrintWriter1.println();
      mockPrintWriter0.print(false);
      mockPrintWriter1.flush();
      mockPrintWriter1.println(false);
      mockPrintWriter1.print((long) '8');
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.print((long) '8');
      mockPrintWriter0.println('W');
      mockPrintWriter0.print('8');
      MockPrintWriter mockPrintWriter4 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter4.println((long) 2);
      MockPrintWriter mockPrintWriter5 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      mockPrintWriter4.println((double) 2);
      mockPrintWriter4.println((long) 2);
      MockPrintWriter mockPrintWriter6 = new MockPrintWriter(mockPrintWriter5);
      MockPrintWriter mockPrintWriter7 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      mockPrintWriter2.print((long) 'W');
      MockPrintWriter mockPrintWriter8 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      MockPrintWriter mockPrintWriter9 = new MockPrintWriter("xR@/:OH?.)6i;HKxhj");
      Locale locale0 = Locale.CANADA;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      classLoader0.getParent();
      MessageFormatter messageFormatter0 = new MessageFormatter();
      messageFormatter0.initializeResourceBundle();
      try { 
        messageFormatter0.initializeResourceBundle((List<String>) linkedList0, (List<String>) null, locale0, classLoader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not find any resource bundle give names: null; and resource path: 
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream0.flush();
      pipedOutputStream0.flush();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      pipedOutputStream2.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      pipedInputStream0.close();
      pipedInputStream0.mark(246);
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      pipedOutputStream3.close();
      pipedOutputStream0.flush();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      pipedOutputStream1.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream5 = new PipedOutputStream(pipedInputStream1);
      byte[] byteArray0 = new byte[4];
      pipedOutputStream2.close();
      pipedOutputStream3.flush();
      pipedOutputStream5.write(byteArray0);
      byteArray0[0] = (byte)20;
      byteArray0[3] = (byte)20;
      pipedOutputStream4.close();
      pipedOutputStream1.close();
      pipedOutputStream0.flush();
      pipedOutputStream1.flush();
      pipedOutputStream2.flush();
      PipedOutputStream pipedOutputStream6 = new PipedOutputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream4);
      PipedOutputStream pipedOutputStream7 = new PipedOutputStream();
      PipedInputStream pipedInputStream3 = new PipedInputStream(pipedOutputStream6);
      PipedInputStream pipedInputStream4 = new PipedInputStream(pipedOutputStream7);
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      MessageFormatter messageFormatter0 = new MessageFormatter();
      // Undeclared exception!
      try { 
        messageFormatter0.createLoadException(list0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.lts.application.international.MessageFormatter$LoadBundleError
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8641220054657963
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hi`3y}");
      mockPrintWriter0.print(0L);
      mockPrintWriter0.write(2);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("hi`3y}");
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "hi`3y}");
      mockPrintWriter1.write("hi`3y}", 2, 2);
      mockPrintWriter1.println();
      mockPrintWriter0.print(true);
      mockPrintWriter1.flush();
      mockPrintWriter1.println(true);
      mockPrintWriter1.println((-319L));
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, true);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter3.println((-10L));
      printWriter0.flush();
      mockPrintWriter2.println("hi`3y}");
      mockPrintWriter3.println((long) 2);
      MockPrintWriter mockPrintWriter4 = new MockPrintWriter("hi`3y}");
      MockPrintWriter mockPrintWriter5 = new MockPrintWriter(mockPrintWriter4);
      MockPrintWriter mockPrintWriter6 = new MockPrintWriter("hi`3y}");
      MockPrintWriter mockPrintWriter7 = new MockPrintWriter("JVjnL*IWq");
      MockPrintWriter mockPrintWriter8 = new MockPrintWriter("hi`3y}");
      mockPrintWriter8.println(true);
      mockPrintWriter8.write(2);
      MockPrintWriter mockPrintWriter9 = new MockPrintWriter(mockPrintWriter1);
      mockPrintWriter1.close();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      MessageFormatter messageFormatter0 = new MessageFormatter();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      try { 
        messageFormatter0.initializeResourceBundle(list0, list0, locale0, classLoader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not find any resource bundle give names: java.class, java.properties; and resource path: java.class, java.properties
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.1537308399247914
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      ResourceBundle.Control resourceBundle_Control0 = ResourceBundle.Control.getNoFallbackControl(list0);
      List<String> list1 = resourceBundle_Control0.getFormats("~%");
      try { 
        messageFormatter0.initializeResourceBundle(list1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not find any resource bundle give names: messages; and resource path: java.class, java.properties
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream0.flush();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      pipedOutputStream2.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark(246);
      pipedOutputStream0.connect(pipedInputStream0);
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      pipedOutputStream3.close();
      pipedOutputStream0.flush();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      pipedOutputStream1.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream5 = new PipedOutputStream(pipedInputStream1);
      byte[] byteArray0 = new byte[4];
      pipedOutputStream2.close();
      byteArray0[0] = (byte)14;
      byteArray0[3] = (byte)64;
      pipedOutputStream5.write(byteArray0);
      pipedOutputStream4.close();
      pipedInputStream1.markSupported();
      pipedOutputStream5.write((-2115431640));
      pipedOutputStream5.close();
      pipedOutputStream3.flush();
      pipedOutputStream2.flush();
      pipedOutputStream1.close();
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream1);
      PipedOutputStream pipedOutputStream6 = new PipedOutputStream();
      PipedInputStream pipedInputStream3 = new PipedInputStream(pipedOutputStream2);
      PipedInputStream pipedInputStream4 = new PipedInputStream(pipedOutputStream3);
      MessageFormatter messageFormatter0 = new MessageFormatter();
      // Undeclared exception!
      try { 
        messageFormatter0.addResourceBundles();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-110));
      linkedList0.add(integer0);
      Integer integer1 = new Integer((-1011));
      linkedList3.add(integer1);
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList4.push(integer1);
      linkedList4.retainAll(linkedList0);
      Integer integer2 = new Integer((-110));
      linkedList0.add(integer2);
      linkedList3.add((Integer) null);
      Integer integer3 = new Integer((-110));
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      Integer integer4 = new Integer((-110));
      Integer integer5 = new Integer((-2077));
      linkedList0.add(integer5);
      LinkedList<Integer> linkedList6 = new LinkedList<Integer>();
      Integer integer6 = new Integer((-778));
      LinkedList<Integer> linkedList7 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList8 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList9 = new LinkedList<Integer>();
      Integer integer7 = new Integer((-110));
      linkedList8.add(integer7);
      LinkedList<Integer> linkedList10 = new LinkedList<Integer>();
      linkedList10.add(integer6);
      LinkedList<Integer> linkedList11 = new LinkedList<Integer>();
      Integer integer8 = new Integer((-2004318069));
      linkedList11.add(integer8);
      MessageFormatter messageFormatter0 = new MessageFormatter();
      // Undeclared exception!
      try { 
        messageFormatter0.listResources("6:D|j/+Q>D~O>_OG2PT", (ClassLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("resources.messages.standard", false);
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.setClassAssertionStatus(":}bs{2=", true);
      List list0 = messageFormatter0.listResources(")pD)e1/)%-(4M>,<FG", classLoader1);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(286);
      Integer integer1 = new Integer(2721);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer2 = new Integer(3);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.add(integer1);
      Integer integer3 = new Integer((-2561));
      linkedList1.add(integer3);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      MessageFormatter messageFormatter0 = new MessageFormatter();
      try { 
        messageFormatter0.initializeResourceBundle((List) linkedList0, (List) linkedList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not find any resource bundle give names: ; and resource path: 
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      ApplicationException applicationException0 = new ApplicationException("-qe[|v$* kb", "-qe[|v$* kb");
      ApplicationException applicationException1 = new ApplicationException(applicationException0, "app.files.lastDirectory", "app.files.lastDirectory", "-qe[|v$* kb");
      messageFormatter0.myLastException = (Throwable) applicationException1;
      // Undeclared exception!
      try { 
        messageFormatter0.initializeResourceBundle((List) null, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      MockThrowable mockThrowable0 = new MockThrowable("resources.messages.standard", (Throwable) null);
      // Undeclared exception!
      try { 
        messageFormatter0.getMessage((Throwable) mockThrowable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.lts.application.ApplicationMessages.error.keyNotFound
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      pipedOutputStream1.flush();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream5 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream4.close();
      pipedOutputStream5.flush();
      pipedOutputStream2.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream5);
      PipedOutputStream pipedOutputStream6 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream3);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      MessageFormatter messageFormatter0 = new MessageFormatter();
      PipedInputStream pipedInputStream2 = new PipedInputStream(3796);
      // Undeclared exception!
      try { 
        messageFormatter0.getMessage("com.lts.application.errors.settingLookAndFeel", (Object) classLoader0, (Object) "com.lts.application.errors.settingLookAndFeel", (Object) pipedInputStream2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.lts.application.ApplicationMessages.error.keyNotFound
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      String string0 = "8H6lW5B'e3U-]+Y=ioD";
      // Undeclared exception!
      try { 
        messageFormatter0.getMessage("8H6lW5B'e3U-]+Y=ioD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.lts.application.ApplicationMessages.error.keyNotFound
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hi`3y}");
      mockPrintWriter0.print(0L);
      mockPrintWriter0.write(2);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("hi`3y}");
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "hi`3y}");
      mockPrintWriter1.write("hi`3y}", 2, 2);
      mockPrintWriter1.println();
      mockPrintWriter0.print(false);
      mockPrintWriter1.flush();
      mockPrintWriter1.println(false);
      mockPrintWriter1.println((-319L));
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, false);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter3.println((-10L));
      printWriter0.flush();
      mockPrintWriter2.println("hi`3y}");
      mockPrintWriter3.println((long) 2);
      MockPrintWriter mockPrintWriter4 = new MockPrintWriter("hi`3y}");
      MockPrintWriter mockPrintWriter5 = new MockPrintWriter(mockPrintWriter4);
      MockPrintWriter mockPrintWriter6 = new MockPrintWriter("hi`3y}");
      MockPrintWriter mockPrintWriter7 = new MockPrintWriter("JVjnLZ*IWq");
      MockPrintWriter mockPrintWriter8 = new MockPrintWriter("hi`3y}");
      mockPrintWriter8.println(false);
      mockPrintWriter8.write(2);
      mockPrintWriter2.println((-1615.8434F));
      mockPrintWriter5.print((double) 2);
      mockPrintWriter7.print('I');
      MessageFormatter messageFormatter0 = new MessageFormatter();
      // Undeclared exception!
      try { 
        messageFormatter0.tryLoad("y,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("resources.messages.standard", "Z6?");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      String string0 = messageFormatter0.listToString(list0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      pipedOutputStream0.flush();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream1.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      pipedInputStream0.mark(7);
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      pipedOutputStream2.close();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedOutputStream3.flush();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream2.mark((-5575));
      pipedOutputStream2.close();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      pipedOutputStream4.flush();
      pipedOutputStream1.close();
      pipedOutputStream4.close();
      pipedOutputStream0.flush();
      pipedOutputStream2.flush();
      pipedOutputStream1.flush();
      pipedOutputStream3.close();
      pipedOutputStream1.close();
      PipedOutputStream pipedOutputStream5 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream6 = new PipedOutputStream(pipedInputStream2);
      pipedOutputStream0.flush();
      MessageFormatter messageFormatter0 = new MessageFormatter();
      // Undeclared exception!
      try { 
        messageFormatter0.tryLoad("y,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.application.international.MessageFormatter", e);
      }
  }
}
