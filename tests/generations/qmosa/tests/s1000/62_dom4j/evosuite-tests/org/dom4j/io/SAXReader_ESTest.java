/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 04:01:45 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.Text;
import org.dom4j.bean.BeanAttribute;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultText;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.4401405002515815
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "//tmp/tmp/(~@X[d+Ew.5.:`9O00/tmp/(~@X[d+Ew.5.:`9O0";
          SAXReader sAXReader0 = new SAXReader(true);
          sAXReader0.setEncoding("//tmp/tmp/(~@X[d+Ew.5.:`9O00/tmp/(~@X[d+Ew.5.:`9O0");
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
          FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
          URL uRL0 = MockURL.getHttpExample();
          String string1 = ">Kmy3";
          URL uRL1 = MockURL.URL(uRL0, "//tmp/tmp/(~@X[d+Ew.5.:`9O00/tmp/(~@X[d+Ew.5.:`9O0");
          sAXReader0.getDispatchHandler();
          try { 
            sAXReader0.read(uRL1);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"tmp\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor312.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"tmp\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor312.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "ZO?dixzHG$%<";
      StringReader stringReader0 = new StringReader("ZO?dixzHG$%<");
      sAXReader0.setEncoding("org.jaxen.expr.iter.IterablePrecedingAxis");
      try { 
        sAXReader0.read((Reader) stringReader0, "ZO?dixzHG$%<");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document ZO?dixzHG$%< : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3235346639983794
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e8;jL@_(g");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("e8;jL@_(g");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sAXReader0.setEncoding("e8;jL@_(g");
      String string0 = "8lC_Ls9:6";
      sAXReader0.createDefaultEntityResolver("8lC_Ls9:6");
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("?>", "");
      Object object0 = new Object();
      Class<String> class0 = String.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      BeanElement beanElement0 = new BeanElement("", (Object) null);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      beanAttributeList0.toArray();
      BeanAttributeList beanAttributeList1 = new BeanAttributeList(beanElement0);
      BeanAttributeList beanAttributeList2 = new BeanAttributeList(beanElement0);
      Object object1 = new Object();
      sAXReader0.setProperty("http://xml.org/sax/properties/declaration-handler", (Object) null);
      try { 
        MockURI.URI("[<irlZ0VAp4^<j33", "", "RFK>@ J?~+2j/", "//tmp/http:/x~l.org/sax/features/namespaces0ends-with() requires two arguments.", "*'#W\"NHra5;.hu|PT^&");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: [<irlZ0VAp4^<j33://RFK%7F%3E@%20J%3F~+2j/?//tmp/http:/x~l.org/sax/features/namespaces0ends-with()%20requires%20two%20arguments.#*'%23W%22NHra5;.hu%7CPT%5E&
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.349742765197841
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/http:/xml.org/s[/fatures/nmespces0org.jaxen.ContextSupport");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "http://xml.org/s[/faurs/nmespces";
      File file0 = MockFile.createTempFile("http://xml.org/s[/faurs/nmespces", "org.jaxen.ContextSupport");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/http:/xml.org/s[/fatures/nmespces0org.jaxen.ContextSupport");
      FileSystemHandling.createFolder(evoSuiteFile0);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      file0.setExecutable(true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      file0.getCanonicalPath();
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, true);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3872942996011255
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SAXReader sAXReader0 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      String string0 = " of document ";
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, " of document ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2792257981339743
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      SAXReader sAXReader1 = new SAXReader(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/http:/xml.og/sax/features/namespaces0http:/xml.og/sax/features/namespaces");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//tmp/http:/xml.og/sax/features/namespaces0http:/xml.og/sax/features/namespaces");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      StringReader stringReader0 = new StringReader("6X8{");
      InputSource inputSource0 = new InputSource("ni5]flW$RR@");
      inputSource0.getPublicId();
      InputSource inputSource1 = new InputSource(stringReader0);
      try { 
        sAXReader0.read(inputSource1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/http:/xml.org/s[/fatures/nmespces0org.jaxen.ContextSupport");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "http://xml.org/s[/faurs/nmespces";
      File file0 = MockFile.createTempFile("http://xml.org/s[/faurs/nmespces", "org.jaxen.ContextSupport");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/http:/xml.org/s[/fatures/nmespces0org.jaxen.ContextSupport");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "org.jaxen.ContextSupport");
      file0.setExecutable(true, true);
      FileSystemHandling.setPermissions(evoSuiteFile1, true, false, true);
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, false);
      String string1 = "%";
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SAXReader sAXReader0 = new SAXReader(false);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "/#@[9Gv[f{?u(q`;";
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader0.read("/#@[9Gv[f{?u(q`;");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: /#@[9Gv[f{?u(q`; Nested exception: no protocol: /#@[9Gv[f{?u(q`;
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/http:/xml.org/s[/fatures/nmespces0org.jaxen.ContextSupport");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader();
      File file0 = MockFile.createTempFile("http:/xml.org/s[/-aurs/nmespces", "C1!]T");
      file0.toURL();
      file0.toURI();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/http:/xml.org/s[/faurs");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile0);
      file0.setReadable(true, true);
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file1 = file0.getAbsoluteFile();
      file1.createNewFile();
      file1.getCanonicalFile();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "C1!]T");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.addHandler((String) null, (ElementHandler) null);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.setSystemId("h{5D");
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      sAXReader0.setFeature("http://xml.org/sax/features/namespaces", true);
      byteArray0[1] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sAXReader0.getEntityResolver();
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertTrue(sAXReader0.isValidating());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      Object object0 = new Object();
      Object object1 = new Object();
      BeanElement beanElement0 = new BeanElement("", object1);
      BeanElement beanElement1 = new BeanElement((String) null, (Object) null);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement1);
      BeanAttributeList beanAttributeList1 = new BeanAttributeList(beanElement1);
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, beanAttributeList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setValidation(false);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-11);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-11), (byte) (-11));
      sequenceInputStream0.skip(1009L);
      PipedInputStream pipedInputStream2 = new PipedInputStream(15);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1, 2471);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream1);
      try { 
        MockURI.URI("k85|a");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 3: k85|a
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3863046904967216
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/http:/xml.org/sax/features");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "http://xml.org/s[/fatures/nmespces";
      DefaultDocumentFactory.getInstance();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      File file0 = MockFile.createTempFile("http://xml.org/s[/fatures/nmespces", "org.jaxe.ContextSupprt");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Simulated IOException Nested exception: Simulated IOException
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0477604168384906
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl1);
      try { 
        sAXReader0.configureReader(parserAdapter0, sAXContentHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@acb172d Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "";
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement("", object0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      BeanAttributeList beanAttributeList1 = new BeanAttributeList(beanElement0);
      Object[] objectArray0 = new Object[7];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) beanElement0;
      objectArray0[2] = (Object) "";
      objectArray0[4] = (Object) beanAttributeList1;
      objectArray0[5] = (Object) beanElement0;
      beanAttributeList1.toArray();
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader1.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      xMLFilterImpl3.startDocument();
      try { 
        MockURI.URI(":9;\"0=Bk?0@6UC", ":9;\"0=Bk?0@6UC", "", "y:T-cg^", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :9;\"0=Bk?0@6UC://:9;%220=Bk%3F0@6UC?y:T-cg%5E
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.299954001690369
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("q_#g{9");
      sAXReader_SAXEntityResolver0.resolveEntity("@{+@l|>XtojKS<\"", "@{+@l|>XtojKS<\"");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("http://xml.org/sax/features/string-interning");
      sAXReader_SAXEntityResolver1.resolveEntity("http://xml.org/sax/features/string-interning", "/");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver2 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver2.resolveEntity("\"%", "http://xml.org/sax/features/string-interning");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)102, 723);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      Enumeration<PipedInputStream> enumeration3 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration4);
      URL uRL0 = MockURL.getHttpExample();
      MockURL.URL(uRL0, "http://xml.org/sax/properties/lexical-handler");
      String string0 = "org.jaxen.util.SingletonList";
      MockURL.URL(uRL0, "file://");
      MockURL.URL("http://xml.org/sax/properties/lexical-handler");
      String string1 = "http://xml.org/sax/properties/declaration-handler";
      try { 
        MockURI.URI("", "org.jaxen.util.SingletonList", "http://xml.org/sax/properties/declaration-handler", "http://xml.org/sax/properties/declaration-handler", "http://xml.org/sax/properties/declaration-handler");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://org.jaxen.util.SingletonListhttp://xml.org/sax/properties/declaration-handler?http://xml.org/sax/properties/declaration-handler#http://xml.org/sax/properties/declaration-handler
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/http:/xml.org/s[/fatures/nmespces0org.jaxen.ContextSupport");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      File file0 = MockFile.createTempFile("http://xml.org/s[/faurs/nmespces", "C!]&TZ");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "C!]&TZ");
      file0.toURI();
      file0.getAbsoluteFile();
      FileSystemHandling.createFolder(evoSuiteFile0);
      file0.getCanonicalPath();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "comment()");
      StringReader stringReader0 = new StringReader("comment()");
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getDocumentFactory();
      try { 
        MockURI.URI("{s", "http://xml.org/s[/faurs/nmespces", "%", "F6nU~[d}(4RL", "`5BHo^_");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: {s://http:%2F%2Fxml.org%2Fs[%2Ffaurs%2Fnmespces%25?F6nU~[d%7D(4RL#%605BHo%5E_
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.275805525146526
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locator2Impl2.getLineNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl2);
      SAXParseException sAXParseException0 = new SAXParseException("", locatorImpl0);
      locatorImpl0.setPublicId(";5<)%&v/v");
      locator2Impl4.setXMLVersion("");
      locator2Impl1.setXMLVersion("f^^<|s%FydR");
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl1);
      locator2Impl4.getXMLVersion();
      MockException mockException0 = new MockException("");
      InputSource inputSource0 = new InputSource("");
      inputSource0.getPublicId();
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      boolean boolean0 = sAXReader0.isValidating();
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.endDocument();
      sAXReader0.isValidating();
      xMLFilterImpl1.startDocument();
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.getParent();
      xMLFilterImpl0.getEntityResolver();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.startPrefixMapping("org.dom4j.dom.DOMDocumentFactory", "<V{&Lf^)tZtDsJw'Qr");
      // Undeclared exception!
      try { 
        sAXReader0.configureReader(xMLFilterImpl2, defaultHandler0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.5058805592598903
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("", "");
      QName qName0 = QName.get("/sam~7i0P0}by%#", (Namespace) null, "");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.startPrefixMapping("//tmp/http:/xml.org/sax/features/namespaces0http:/xml.org/sax/features/namespaces", "line.separator");
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilter xMLFilter0 = sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader(xMLFilter0);
      sAXReader0.getXMLReader();
      SAXReader sAXReader2 = new SAXReader((DocumentFactory) null);
      DispatchHandler dispatchHandler0 = sAXReader2.getDispatchHandler();
      dispatchHandler0.getHandler(";+S_a]`\".((eU>b0;!");
      sAXReader1.setDefaultHandler((ElementHandler) null);
      sAXReader1.isStringInternEnabled();
      BeanElement beanElement0 = new BeanElement("/sam~7i0P0}by%#", "(~@X[d+Ew.5.:`9O");
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument("bvE^nR_jvSr+");
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.normalize(uRI0);
      URL uRL0 = MockURI.toURL(uRI1);
      try { 
        sAXReader1.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SAXReader sAXReader0 = new SAXReader(false);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      Enumeration<PipedInputStream> enumeration3 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration4);
      Enumeration<InputStream> enumeration5 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration5).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration5);
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream2);
      sequenceInputStream3.available();
      byte[] byteArray0 = new byte[3];
      sequenceInputStream6.skip(0L);
      byteArray0[0] = (byte)80;
      sequenceInputStream0.available();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream3);
      MockURI.URI((String) null, (String) null, (String) null, "//tmp/RU9SABu;-A[&;ZcN6=0RU9SABu;-A[&;ZcN6=", "//tmp/RU9SABu;-A[&;ZcN6=0RU9SABu;-A[&;ZcN6=");
      sAXReader0.createDefaultEntityResolver(" uri: ");
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.335212748356618
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      locator2Impl0.getSystemId();
      locator2Impl3.setPublicId("-");
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl7.setLineNumber((-685));
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl8.setColumnNumber((-685));
      Locator2Impl locator2Impl9 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl9);
      Locator2Impl locator2Impl10 = new Locator2Impl(locator2Impl5);
      SAXParseException sAXParseException0 = new SAXParseException(" />]", locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl11 = new Locator2Impl(locator2Impl7);
      Locator2Impl locator2Impl12 = new Locator2Impl(locator2Impl4);
      Locator2Impl locator2Impl13 = new Locator2Impl();
      locator2Impl13.getLineNumber();
      locator2Impl7.setPublicId((String) null);
      locator2Impl0.setPublicId("-");
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.jaxen.saxpath.helpers.DefaultXPathHandler", "org.jaxen.saxpath.helpers.DefaultXPathHandler", "-", 1242);
      locator2Impl7.setSystemId((String) null);
      StringReader stringReader0 = new StringReader("-");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.jaxen.saxpath.helpers.DefaultXPathHandler");
      sAXReader_SAXEntityResolver0.resolveEntity(" />]", "http://xml.org/sax/features/string-interning");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream2);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 44);
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(sequenceInputStream3, pushbackInputStream0);
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /tmp/foo.bar (No such file or directory) Nested exception: /tmp/foo.bar (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "";
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement("", "");
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      Object object1 = new Object();
      Class<Integer> class0 = Integer.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      Object[] objectArray0 = new Object[7];
      Object object2 = new Object();
      objectArray0[0] = object2;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) beanMetaData0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) beanAttributeList0;
      objectArray0[6] = (Object) class0;
      beanAttributeList0.toArray(objectArray0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2786004072646815
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      locator2Impl2.setColumnNumber(0);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl0.setPublicId("kO");
      locator2Impl0.setLineNumber(0);
      locator2Impl5.getColumnNumber();
      locator2Impl5.setPublicId("lZ(`K)$.`l");
      locator2Impl5.getLineNumber();
      locator2Impl3.setColumnNumber(0);
      locator2Impl3.setXMLVersion("lZ(`K)$.`l");
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl0.getColumnNumber();
      locator2Impl5.setLineNumber(7);
      Namespace namespace0 = new Namespace((String) null, (String) null);
      QName qName0 = new QName("http://xml.org/sax/properties/declaration-handler", namespace0);
      StringReader stringReader0 = new StringReader("org.jaxen.function.FalseFunction");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      HandlerBase handlerBase0 = new HandlerBase();
      sAXReader0.setEntityResolver(handlerBase0);
      try { 
        sAXReader0.read((Reader) stringReader0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 2);
      SAXParseException sAXParseException0 = new SAXParseException("", "", "", 2, 2);
      sAXParseException0.printStackTrace();
      StackTraceElement stackTraceElement1 = new StackTraceElement("^", "The node cannot be a child of attribute", "^", 2);
      sAXParseException0.getColumnNumber();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      sAXParseException0.getSystemId();
      StackTraceElement stackTraceElement2 = new StackTraceElement("^", "//tmp/http:/xml.og/sax/features/namespaces0http:/xml.og/sax/features/namespaces", ">}%^.w1V0", 2);
      stackTraceElementArray0[2] = stackTraceElement2;
      stackTraceElementArray0[3] = stackTraceElement1;
      stackTraceElementArray0[4] = stackTraceElement0;
      stackTraceElementArray0[5] = stackTraceElement1;
      stackTraceElementArray0[6] = stackTraceElement0;
      stackTraceElementArray0[7] = stackTraceElement0;
      sAXParseException0.setStackTrace(stackTraceElementArray0);
      MockURL.getHttpExample();
      StringReader stringReader0 = new StringReader("O.J>`Ia%~|kO");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Class<Integer> class0 = Integer.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      SAXParseException sAXParseException0 = new SAXParseException("http://xml.org/sax/handlers/LexicalHandler", locator2Impl0);
      beanMetaData0.getData(62, sAXParseException0);
      Object[] objectArray0 = new Object[7];
      Object object2 = new Object();
      objectArray0[0] = object2;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) beanMetaData0;
      objectArray0[4] = (Object) class0;
      objectArray0[6] = (Object) class0;
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.4406133134903523
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = "";
      StackTraceElement stackTraceElement0 = new StackTraceElement("file://", "x(XP35/g`HA|kumvr", "|1y#Y(Z(vB. +K6[a", (-2595));
      StackTraceElement stackTraceElement1 = new StackTraceElement("file://", "|1y#Y(Z(vB. +K6[a", "Tqqi[At[[", (-1350));
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "dIE;g!]}e", "Tqqi[At[[", (-2204));
      String string1 = "?%iFcDFG71W\"j.JKIlH";
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.removeHandler("dIE;g!]}e");
      sAXReader0.setDefaultHandler((ElementHandler) null);
      StackTraceElement stackTraceElement3 = new StackTraceElement("file://", "dIE;g!]}e", "?%iFcDFG71W\"j.JKIlH", 1044);
      StringReader stringReader0 = new StringReader("//tmp/ends-with() requires two arguments.0^'-ipKG-|");
      String string2 = null;
      try { 
        sAXReader0.read((Reader) stringReader0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getEntityResolver();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5350813079469847
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setErrorHandler((ErrorHandler) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("?>", "");
      sAXReader_SAXEntityResolver0.resolveEntity("\"%", "?>");
      sAXReader_SAXEntityResolver0.resolveEntity("", ":/b/6=");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2839, 2620);
      assertEquals((-2833), byteArrayInputStream0.available());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        sAXReader0.setFeature("", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.getDocumentFactory();
      URI uRI0 = MockURI.aFileURI;
      MockURI.relativize(uRI0, uRI0);
      MockURI.toURL(uRI0);
      DOMDocument dOMDocument0 = new DOMDocument();
      assertNull(dOMDocument0.getNodeValue());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/http:/xml.org/s[/fatures/nmespces0org.jaxen.ContextSupport");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "http://xml.org/s[/faurs/nmespces";
      MockFile.createTempFile("http://xml.org/s[/faurs/nmespces", "http://xml.org/s[/faurs/nmespces");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/http:/xml.org/s[/fatures/nmespces0org.jaxen.ContextSupport");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("http://xml.org/s[/faurs/nmespces");
      mockFile0.setExecutable(true, true);
      FileSystemHandling.createFolder(evoSuiteFile0);
      sAXReader0.setEncoding("http://xml.org/s[/faurs/nmespces");
      mockFile0.getCanonicalPath();
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, false);
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">Kmy3");
      sAXReader0.getEncoding();
      URL uRL1 = MockURL.URL(uRL0, ">Kmy3");
      MockURL.URL(uRL1, ">Kmy3");
      URL uRL2 = MockURL.URL(uRL0, " [CDATA: \"");
      MockURL.getFileExample();
      URL uRL3 = MockURL.URL(uRL0, "KR(xgK)");
      assertNotSame(uRL3, uRL2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/http:/xml.org/s[/fatures/nmespces0org.jaxen.ContextSupport");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setStripWhitespaceText(false);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFileExample();
      MockURL.URL(uRL0, "\"GaS~)#\"MB) =g]c");
      URL uRL1 = MockURL.getFileExample();
      URL uRL2 = MockURL.URL(uRL0, "\"GaS~)#\"MB) =g]c");
      assertNotSame(uRL2, uRL1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[22];
      Object object2 = new Object();
      objectArray0[0] = object2;
      objectArray0[1] = (Object) class0;
      objectArray0[4] = (Object) class0;
      objectArray0[6] = (Object) class0;
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertTrue(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.4384521309148504
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DOMNamespace dOMNamespace0 = new DOMNamespace("", "");
      String string0 = "Error on line ";
      QName.get("(~@X[d+Ew.5.:`9O", (Namespace) dOMNamespace0, "Error on line ");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl0.startPrefixMapping("", "line.separator");
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      XMLReader xMLReader0 = sAXReader1.getXMLReader();
      BeanElement beanElement0 = new BeanElement("zB]vX?f>sl=.=-F,*e", xMLReader0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      xMLFilterImpl0.startElement("Validation not supported for XMLReader: ", "org.dom4j.tree.ConcurrentReaderHashMap", "a@nGLmu)e1", attributes2Impl0);
      sAXReader0.createXMLReader();
      defaultDocumentFactory1.createDocument((String) null);
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /tmp/foo.bar (No such file or directory) Nested exception: /tmp/foo.bar (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.notationDecl("", "", (String) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 2);
      Namespace namespace0 = Namespace.get("", "//tmp/t5&[.[`AGh;ir0/tmp/http:/xml.org/s[/fatures/nmespces0.tmp");
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement("", namespace0, object0);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = object0;
      objectArray0[3] = (Object) namespace0;
      objectArray0[4] = (Object) sAXReader0;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) sAXReader0;
      String string0 = "xcT`";
      StackTraceElement stackTraceElement1 = new StackTraceElement("-`-KR{NHL4YZBcK9", "#### Warning: couldn't create bean: ", "", 994);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement("", "");
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      BeanAttributeList beanAttributeList1 = new BeanAttributeList(beanElement0);
      Object object1 = new Object();
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[22];
      Object object2 = new Object();
      objectArray0[0] = object2;
      objectArray0[1] = (Object) class0;
      objectArray0[3] = (Object) beanAttributeList0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) beanAttributeList0;
      objectArray0[6] = (Object) class0;
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.isIgnoreComments();
      URI uRI0 = MockURI.URI((String) null, (String) null, "", "E{c.XYa&|d.)c+<E^4", "vv6ZdJ}%>~an");
      assertFalse(uRI0.isAbsolute());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl0.setLineNumber(92);
      locator2Impl6.getColumnNumber();
      locator2Impl3.setColumnNumber(0);
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl7.getColumnNumber();
      locator2Impl5.setLineNumber(0);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      SAXParseException sAXParseException0 = new SAXParseException((String) null, locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl9 = new Locator2Impl(locatorImpl1);
      Locator2Impl locator2Impl10 = new Locator2Impl(locator2Impl9);
      locator2Impl0.setPublicId((String) null);
      locator2Impl1.setXMLVersion((String) null);
      locator2Impl5.setXMLVersion("");
      Locator2Impl locator2Impl11 = new Locator2Impl(locatorImpl1);
      locator2Impl2.getXMLVersion();
      locator2Impl4.getColumnNumber();
      MockException mockException0 = new MockException((String) null);
      InputSource inputSource0 = new InputSource("kV0:");
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      ElementStack elementStack0 = new ElementStack(0);
      elementStack0.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.installXMLFilter((XMLReader) null);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 2);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      SAXParseException sAXParseException0 = new SAXParseException(";{g", locatorImpl0);
      sAXParseException0.printStackTrace();
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "The node cannot be a child of attribute", "", 2);
      sAXParseException0.getColumnNumber();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "//tmp/http:/xml.og/sax/features/namespaces0http:/xml.og/sax/features/namespaces", ">}%^.w1V0", 2);
      stackTraceElementArray0[2] = stackTraceElement2;
      stackTraceElementArray0[3] = stackTraceElement1;
      StackTraceElement stackTraceElement3 = new StackTraceElement("http://xml.org/sax/features/use-locator2", "/", "//tmp/http:/xml.og/sax/features/namespaces0http:/xml.og/sax/features/namespaces", 8031);
      StringReader stringReader0 = new StringReader("@3(d");
      MockURI.URI("");
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertNotNull(xMLReader0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement("", "");
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      BeanAttributeList beanAttributeList1 = new BeanAttributeList(beanElement0);
      Object object1 = new Object();
      Class<Integer> class0 = Integer.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      Object[] objectArray0 = new Object[7];
      Object object2 = new Object();
      objectArray0[0] = object2;
      objectArray0[4] = (Object) class0;
      objectArray0[2] = (Object) beanMetaData0;
      objectArray0[3] = (Object) beanAttributeList0;
      beanAttributeList0.containsAll(beanAttributeList1);
      MockFile mockFile0 = new MockFile("//tmp/http:/xml.org/sax/features/namespaces0%h");
      MockFile mockFile1 = new MockFile(mockFile0, "//tmp/?4EO<0?4EO<");
      URL uRL0 = mockFile1.toURL();
      URL uRL1 = MockURL.URL(uRL0, "//tmp/lifxA^Gi8s7Gd+MS0http:/xml.org/sax/properties/lexical-handler");
      DOMDocument dOMDocument0 = new DOMDocument("");
      URL uRL2 = MockURL.getHttpExample();
      MockURL.URL(uRL1, "//tmp/j3ruKq0j3ruKq");
      URL uRL3 = MockURL.getFileExample();
      MockURL.URL(uRL2, "//tmp/http:/xml.org/s[/faurs/nmespces0http:/xml.org/s[/faurs/nmespces");
      MockURL.getFileExample();
      MockURL.getFileExample();
      MockURL.URL(uRL3, "");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getErrorHandler();
      sAXReader0.getDispatchHandler();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertNotNull(dispatchHandler0);
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setMergeAdjacentText(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(")");
      String string0 = "WR<;$670_V99{75*";
      String string1 = "k9rj#1oZUNyfF1zM";
      sAXReader_SAXEntityResolver0.resolveEntity("k9rj#1oZUNyfF1zM", ")");
      try { 
        MockURL.URL("//tmp/HuHN)KUC0!}Uat|@(Rrq;DOl^s\"+", ":z]T`g?rLfuF4", "WR<;$670_V99{75*");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: //tmp/huhn)kuc0!}uat|@(rrq;dol^s\"+
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.823242702131751
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.skippedEntity((String) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.removeHandler("GguUU53");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.resetHandlers();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      sAXReader0.installXMLFilter(xMLReader0);
      MockException mockException0 = new MockException((String) null);
      SAXParseException sAXParseException0 = new SAXParseException("http://xml.org/sax/properties/lexical-handler", "{B`", "http://xml.org/sax/properties/lexical-handler", 92, 1031, mockException0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      MockException mockException1 = new MockException("yIC{Rs1>c?sAk*");
      SAXParseException sAXParseException1 = new SAXParseException("", locatorImpl0, mockException1);
      Object object0 = new Object();
      try { 
        sAXReader0.setProperty("onz,Z9eA9{=k2.hby-", object0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: onz,Z9eA9{=k2.hby-
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl0.setLineNumber(92);
      locator2Impl5.getColumnNumber();
      Locator2Impl locator2Impl8 = new Locator2Impl();
      SAXParseException sAXParseException0 = new SAXParseException((String) null, locator2Impl2);
      locator2Impl5.setXMLVersion((String) null);
      locator2Impl0.setPublicId((String) null);
      locator2Impl6.setXMLVersion("hw|/~8r~^-=f");
      locator2Impl3.setXMLVersion("j;Qc");
      Locator2Impl locator2Impl9 = new Locator2Impl(locator2Impl8);
      locator2Impl9.getXMLVersion();
      locator2Impl9.getColumnNumber();
      StackTraceElement stackTraceElement0 = new StackTraceElement("hG3PS6jF<Yk,Fdhfg", "hG3PS6jF<Yk,Fdhfg", "TAA9'ON_n", 0);
      StringReader stringReader0 = new StringReader("org.dom4j.tree.AbstractEntity");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.read((Reader) stringReader0, "W(X20");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.0477604168384906
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte) (-38);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      assertFalse(sAXReader0.isValidating());
      
      sAXReader0.configureReader(xMLFilterImpl0, sAXContentHandler0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl0.setLineNumber(92);
      locator2Impl5.getColumnNumber();
      locator2Impl3.setColumnNumber(92);
      locator2Impl3.setXMLVersion("lZ(`K)$.`l");
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl0.getColumnNumber();
      locator2Impl5.setLineNumber(7);
      SAXParseException sAXParseException0 = new SAXParseException((String) null, locator2Impl2);
      locator2Impl0.getLineNumber();
      Locator2Impl locator2Impl9 = new Locator2Impl(locator2Impl3);
      locator2Impl5.setXMLVersion((String) null);
      locator2Impl0.setPublicId((String) null);
      locator2Impl6.setXMLVersion("hw|/~8r~^-=f");
      locator2Impl3.setXMLVersion("j;Qc");
      Locator2Impl locator2Impl10 = new Locator2Impl(locator2Impl8);
      locator2Impl10.getXMLVersion();
      locator2Impl10.getColumnNumber();
      locator2Impl10.getColumnNumber();
      locator2Impl10.setPublicId(".bg&0");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("lZ(`K)$.`l");
      sAXReader_SAXEntityResolver0.resolveEntity("hw|/~8r~^-=f", (String) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "";
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement("", "");
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      Object object1 = new Object();
      Class<Integer> class0 = Integer.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      Object[] objectArray0 = new Object[22];
      Object object2 = new Object();
      objectArray0[0] = object2;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) beanMetaData0;
      objectArray0[3] = (Object) beanAttributeList0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) beanAttributeList0;
      objectArray0[6] = (Object) class0;
      beanAttributeList0.toArray(objectArray0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.961095617831518
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.removeHandler("/#@[9GX[f{?u(q`;");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.notationDecl("/#@[9GX[f{?u(q`;", "/#@[9GX[f{?u(q`;", "Mifi3#L'`H3ssQq");
      sAXReader0.resetHandlers();
      sAXReader0.configureReader(xMLReader0, defaultHandler0);
      sAXReader0.installXMLFilter(xMLReader0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("/IiWi3X-P");
      PipedInputStream pipedInputStream0 = new PipedInputStream(16);
      try { 
        sAXReader0.setProperty("/IiWi3X-P", defaultHandler0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '/IiWi3X-P' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLReader((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, (DefaultHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 2);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      SAXParseException sAXParseException0 = new SAXParseException(";{g", locatorImpl0);
      sAXParseException0.printStackTrace();
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "The node cannot be a child of attribute", "", 2);
      sAXParseException0.getColumnNumber();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "org.jaxen.pattern.UnionPattern", ">}%^.w1V0", 2);
      stackTraceElementArray0[2] = stackTraceElement2;
      stackTraceElementArray0[3] = stackTraceElement1;
      stackTraceElementArray0[4] = stackTraceElement0;
      stackTraceElementArray0[5] = stackTraceElement1;
      stackTraceElementArray0[6] = stackTraceElement0;
      StringReader stringReader0 = new StringReader("p1#.l0zLF");
      try { 
        sAXReader0.read((Reader) stringReader0, ">}%^.w1V0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document >}%^.w1V0 : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl0.setLineNumber(92);
      locator2Impl5.getColumnNumber();
      locator2Impl3.setColumnNumber(92);
      locator2Impl3.setXMLVersion("lZ(`K)$.`l");
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl0.getColumnNumber();
      locator2Impl5.setLineNumber(0);
      SAXParseException sAXParseException0 = new SAXParseException((String) null, locator2Impl2);
      locator2Impl0.getLineNumber();
      Locator2Impl locator2Impl9 = new Locator2Impl(locator2Impl3);
      locator2Impl0.setPublicId((String) null);
      locator2Impl6.setXMLVersion("hw|/~8r~^-=f");
      locator2Impl3.setXMLVersion("j;Qc");
      Locator2Impl locator2Impl10 = new Locator2Impl(locator2Impl8);
      locator2Impl10.getXMLVersion();
      locator2Impl10.getColumnNumber();
      locator2Impl10.getColumnNumber();
      locator2Impl10.setPublicId(".bg&0");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("lZ(`K)$.`l");
      sAXReader_SAXEntityResolver0.resolveEntity("hw|/~8r~^-=f", (String) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream1);
      sequenceInputStream0.close();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      byteArray0[5] = (byte)124;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)124;
      sequenceInputStream0.read(byteArray0);
      Enumeration<PipedInputStream> enumeration2 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration2);
      sequenceInputStream3.available();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1, 27);
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream2.read(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream3);
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("-");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class - not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.275805525146526
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      locator2Impl0.getSystemId();
      locator2Impl3.setPublicId("-");
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl6.setSystemId(" />]");
      locator2Impl0.setLineNumber(92);
      locator2Impl6.getColumnNumber();
      locator2Impl3.setColumnNumber(0);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl5);
      Locator2Impl locator2Impl8 = new Locator2Impl(locator2Impl4);
      SAXParseException sAXParseException0 = new SAXParseException("-", locator2Impl8);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl9 = new Locator2Impl(locator2Impl7);
      Locator2Impl locator2Impl10 = new Locator2Impl(locatorImpl1);
      locator2Impl2.getLineNumber();
      Locator2Impl locator2Impl11 = new Locator2Impl();
      locator2Impl2.getSystemId();
      locator2Impl8.setPublicId((String) null);
      locator2Impl2.setXMLVersion("-");
      locator2Impl8.setXMLVersion("-");
      Locator2Impl locator2Impl12 = new Locator2Impl(locator2Impl4);
      locator2Impl9.getColumnNumber();
      Locator2Impl locator2Impl13 = new Locator2Impl(locator2Impl3);
      locator2Impl8.setXMLVersion("-");
      Locator2Impl locator2Impl14 = new Locator2Impl(locator2Impl4);
      locator2Impl7.getColumnNumber();
      InputSource inputSource0 = new InputSource("-");
      SAXReader sAXReader0 = new SAXReader((String) null);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/- (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/- (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/http:/xml.org/sax/features");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultDocumentFactory.getInstance();
      MockFile.createTempFile("http://xml.org/s[/fatures/nmespces", "org.jaxen.ContextSupport");
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream(59);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      
      SAXReader sAXReader1 = new SAXReader((XMLReader) null, false);
      assertFalse(sAXReader1.isValidating());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = "";
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement("", object0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      BeanAttributeList beanAttributeList1 = new BeanAttributeList(beanElement0);
      DefaultText defaultText0 = new DefaultText(beanElement0, "");
      beanElement0.remove((Text) defaultText0);
      MockException mockException0 = new MockException("@8", (Throwable) null);
      mockException0.getLocalizedMessage();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("@8", "j", "", 9);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("@8", "@8", "//tmp/http:/xml.org/sax/features/namespaces0ends-with() requires two arguments.", 9);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("@8", "//tmp/http:/xml.org/sax/features/namespaces0ends-with() requires two arguments.", "+!5[!je", (-299));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("//tmp/http:/xml.org/sax/features/namespaces0ends-with() requirestwo arguments", "", "j", 9);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "@8", "*", (-299));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("@8", "2*#\": [<0d-Z+3A", "*Vhyy%?q", 72);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("", "Validation not supported for XMLReader: ", "//home/ubuntu/termite/projects/62_dom4j/Error on line /Error on line /Error on line 0Error on line ", 2396);
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("Validation not supported for XMLReader: ", "_5Oc", "//home/ubuntu/termite/projects/62_dom4j/Error on line /Error on line /Error on line 0Error on line ", (-299));
      stackTraceElementArray0[7] = stackTraceElement7;
      mockException0.setStackTrace(stackTraceElementArray0);
      SAXParseException sAXParseException0 = new SAXParseException("", "", "@8", 0, 9, mockException0);
      BeanElement beanElement1 = new BeanElement("@8", sAXParseException0);
      BeanAttributeList beanAttributeList2 = new BeanAttributeList(beanElement1);
      BeanAttributeList beanAttributeList3 = new BeanAttributeList(beanElement0);
      Object object1 = new Object();
      try { 
        sAXReader0.setProperty("!(eRgoM0", "");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '!(eRgoM0' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      HandlerBase handlerBase0 = new HandlerBase();
      sAXReader0.setEntityResolver(handlerBase0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIgnoreComments(true);
      assertTrue(sAXReader0.isIgnoreComments());
      
      SAXReader sAXReader1 = new SAXReader();
      assertFalse(sAXReader1.isIgnoreComments());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.2366306944608842
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("?>", "");
      sAXReader_SAXEntityResolver0.resolveEntity("\"%", "?>");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      StackTraceElement stackTraceElement0 = new StackTraceElement("?>", "\"%", "\"%", (byte)102);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      SAXParseException sAXParseException0 = new SAXParseException("vZ", locator2Impl0);
      sAXParseException0.getColumnNumber();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      sAXParseException0.setStackTrace(stackTraceElementArray0);
      URL uRL0 = MockURL.getHttpExample();
      MockURL.URL(uRL0, "k;");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader1 = new SAXReader(parserAdapter0, true);
      try { 
        sAXReader1.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@3363e755 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@3363e755 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.3219307546040406
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SAXReader sAXReader0 = new SAXReader(false);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-20);
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte) (-11);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream2.read(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-2743));
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader1 = new SAXReader(parserAdapter0, false);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(pipedInputStream0, sequenceInputStream2);
      try { 
        sAXReader1.read((InputStream) sequenceInputStream3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Object object0 = new Object();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<PipedInputStream> enumeration1 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream2, sequenceInputStream1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-11);
      sequenceInputStream1.read(byteArray0, (-2756), (int) (byte)29);
      sequenceInputStream3.close();
      sequenceInputStream1.read(byteArray0);
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream0);
      sequenceInputStream4.available();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream2, 620);
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(sequenceInputStream3, sequenceInputStream1);
      sequenceInputStream0.read(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte) (-87), 705);
      byteArrayInputStream1.reset();
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("//tmp/http:/xml.org/s[/-aurs/nmespces0C1!]T/tmp/j3ruKq0j3ruKq/tmp/http:/xml.org/s[/-aurs/nmespces0C1!]T0/tmp/http:/xml.org/s[/-aurs/nmespces0C1!]T", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class //tmp/http:/xml.org/s[/-aurs/nmespces0C1!]T/tmp/j3ruKq0j3ruKq/tmp/http:/xml.org/s[/-aurs/nmespces0C1!]T0/tmp/http:/xml.org/s[/-aurs/nmespces0C1!]T not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.addHandler("_", (ElementHandler) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      String string0 = "WR<;$67BwV99?75*";
      String string1 = "9rj#1oZUNyfF1wzM";
      sAXReader_SAXEntityResolver0.resolveEntity("9rj#1oZUNyfF1wzM", "");
      try { 
        MockURL.URL("//tmp/lifxA^Gi8s7Gd+MS0http:/xml.org/sax2prop?rties/lexical-handleL", ":z]T`k?rLfuF4", "WR<;$67BwV99?75*");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: //tmp/lifxa^gi8s7gd+ms0http:/xml.org/sax2prop?rties/lexical-handlel
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SAXReader sAXReader0 = new SAXReader(false);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-11);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-11), (byte) (-11));
      PipedInputStream pipedInputStream2 = new PipedInputStream(15);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1, 2471);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream1);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "k85|a");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement("", object0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      BeanAttributeList beanAttributeList1 = new BeanAttributeList(beanElement0);
      BeanAttribute beanAttribute0 = new BeanAttribute(beanAttributeList1, (-2658));
      DOMNamespace dOMNamespace0 = new DOMNamespace("", "");
      dOMNamespace0.getPath((Element) beanElement0);
      try { 
        sAXReader0.read("pqg#2eb|s");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: pqg#2eb|s Nested exception: no protocol: pqg#2eb|s
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      locator2Impl0.getLineNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl4);
      locator2Impl3.getXMLVersion();
      locator2Impl0.setColumnNumber(1459);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl6 = new Locator2Impl(locatorImpl0);
      locator2Impl3.getPublicId();
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl1.setLineNumber(0);
      locator2Impl0.getColumnNumber();
      Locator2Impl locator2Impl8 = new Locator2Impl();
      Locator2Impl locator2Impl9 = new Locator2Impl(locator2Impl1);
      String string0 = "";
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      String string1 = "i\"mrpFexao+";
      xMLFilterImpl0.unparsedEntityDecl("i\"mrpFexao+", (String) null, "//tmp/http:/xml.org/s[x/fatures/namespaces0org.jaxen.ContextSupport", "");
      SAXReader sAXReader0 = new SAXReader();
      String string2 = "//tmp/d+B!9Yvd\"G&Dd0d+B!9Yvd\"G&Dd";
      try { 
        sAXReader0.setXMLReaderClassName("//tmp/d+B!9Yvd\"G&Dd0d+B!9Yvd\"G&Dd");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //tmp/d+B!9Yvd\"G&Dd0d+B!9Yvd\"G&Dd not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.275805525146526
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      locator2Impl0.getSystemId();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl0.setColumnNumber(0);
      locator2Impl6.setColumnNumber((-3061));
      locator2Impl0.setPublicId("//tmp/Unrecognized axis code: 0Validation not supported for XMLReader: ");
      locator2Impl6.setSystemId(" />]");
      locator2Impl0.setLineNumber(0);
      locator2Impl6.getColumnNumber();
      locator2Impl3.setColumnNumber(0);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl5);
      Locator2Impl locator2Impl8 = new Locator2Impl(locator2Impl4);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl9 = new Locator2Impl(locator2Impl7);
      Locator2Impl locator2Impl10 = new Locator2Impl(locatorImpl1);
      locator2Impl2.getLineNumber();
      Locator2Impl locator2Impl11 = new Locator2Impl();
      locator2Impl8.setPublicId((String) null);
      locator2Impl2.setXMLVersion("-");
      locator2Impl8.setXMLVersion("-");
      Locator2Impl locator2Impl12 = new Locator2Impl(locator2Impl4);
      locator2Impl9.getColumnNumber();
      Locator2Impl locator2Impl13 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl14 = new Locator2Impl(locator2Impl4);
      locator2Impl7.getColumnNumber();
      InputSource inputSource0 = new InputSource(" />]");
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol:  />] Nested exception: no protocol:  />]
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
