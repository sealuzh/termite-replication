/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 01:36:55 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-omitEncoding", false, "-omitEncoding");
      assertFalse(outputFormat0.isOmitEncoding());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-omitEncoding";
      stringArray0[1] = "6";
      stringArray0[2] = "-omitEncoding";
      stringArray0[3] = "</*nmX`*A";
      stringArray0[4] = "6";
      stringArray0[5] = "-omitEncoding";
      stringArray0[6] = "</*nmX`*A";
      stringArray0[7] = "6";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isOmitEncoding());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty\"exp[ndEmktymtrioexx", true, "-expandEmpylineSeparator");
      assertEquals("-expandEmpylineSeparator", outputFormat0.getEncoding());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-timTxt";
      stringArray0[1] = "-expandEmpty\"exp[ndEmktymtrioexx";
      stringArray0[2] = "-timTxt";
      stringArray0[0] = "-encoding";
      stringArray0[4] = "-expandEmpylineSeparator";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-expandEmpty\"exp[ndEmktymtrioexx", outputFormat0.getEncoding());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-padText", false, "eIq4b|gUnM]yz8#g=S1>");
      assertFalse(outputFormat0.isPadText());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".GV/Yf;iy]ZiL\b&3";
      stringArray0[2] = "-padText";
      stringArray0[3] = "eIq4b|gUnM]yz8#g=S1>";
      int int0 = outputFormat0.parseOptions(stringArray0, 2);
      assertTrue(outputFormat0.isPadText());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      // Undeclared exception!
      outputFormat0.setIndentSize(2147483645);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-XrimText";
      stringArray0[1] = "-newlines";
      stringArray0[2] = "-trimTt";
      stringArray0[3] = "Wc$Cd'Ck3md+1D[oSV#";
      stringArray0[4] = "-trimTt";
      stringArray0[5] = "-newlines";
      stringArray0[4] = "-XrimText";
      stringArray0[7] = ">7ozi?Why^xS$X5h2";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals(2, int0);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("", outputFormat0.getIndent());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1646253843123113
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty#v{%<\"UmszwY}", false, (String) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[2] = null;
      outputFormat0.getNewLineAfterNTags();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewLineAfterNTags(1787);
      outputFormat1.setTrimText(false);
      outputFormat0.getEncoding();
      outputFormat1.setNewlines(false);
      outputFormat0.setIndent("");
      outputFormat1.parseOptions(stringArray0, 1787);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setLineSeparator("r^y+5:Z|i9a");
      outputFormat2.setNewlines(false);
      outputFormat1.parseOptions(stringArray0, 1083);
      assertEquals(1787, outputFormat1.getNewLineAfterNTags());
      
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      outputFormat3.setPadText(false);
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat4 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat4.isSuppressDeclaration());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.117355851040232
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setLineSeparator("Xp*`l]b");
      outputFormat0.setNewlines(true);
      OutputFormat.createCompactFormat();
      OutputFormat.createCompactFormat();
      outputFormat0.setIndent((String) null);
      outputFormat0.setIndent(false);
      outputFormat0.getEncoding();
      outputFormat0.getAttributeQuoteCharacter();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setAttributeQuoteCharacter('\"');
      outputFormat1.getAttributeQuoteCharacter();
      outputFormat0.setIndent("-xhtml-riuexCt");
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "!8E#Ac";
      stringArray0[2] = null;
      // Undeclared exception!
      try { 
        outputFormat2.parseOptions(stringArray0, (-3182));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3182
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("iL)V6yr>gZ8Ju)5o");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('\u0012');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (\u0012)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2313434945384207
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(");PA5e4 .Y(KT[_T", false, "-indent");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expandEmpty-expandEmpty-trimText";
      stringArray0[1] = "-expandEmpty-expandEmpty-trimText";
      stringArray0[2] = "-expandEmpty-expandEmpty-trimText";
      stringArray0[3] = "-expandEmpty-expandEmpty-trimText";
      stringArray0[4] = "-indent";
      stringArray0[5] = "-expandEmpty-expandEmpty-trimText";
      stringArray0[6] = "-expandEmpty-expandEmpty-trimText";
      stringArray0[7] = ");PA5e4 .Y(KT[_T";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-expandEmpty-expandEmpty-trimText", outputFormat0.getIndent());
      assertEquals(7, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-newlines");
      String[] stringArray0 = new String[13];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "s&ressDWcAaration";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"s&ressDWcAaration\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.128183350293198
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty", true, "-expandEmpty-expandEmpty-trimText");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-expandEmpty-expzndEmpty";
      stringArray0[1] = "-expandEmpty-expandEmpty-triText";
      stringArray0[2] = "-indentSize";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.19116170477562
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Invalid attribute quote character (", false);
      OutputFormat outputFormat1 = new OutputFormat("");
      outputFormat1.setIndentSize(2084);
      outputFormat1.setIndent("-indent");
      OutputFormat outputFormat2 = new OutputFormat();
      outputFormat2.setIndent("IC-{");
      outputFormat0.setIndent(false);
      OutputFormat.createPrettyPrint();
      outputFormat1.setLineSeparator("6@d");
      outputFormat1.setSuppressDeclaration(false);
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterDeclaration(true);
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat2.setNewLineAfterDeclaration(false);
      outputFormat3.setExpandEmptyElements(true);
      outputFormat2.isNewLineAfterDeclaration();
      outputFormat3.getLineSeparator();
      OutputFormat outputFormat4 = OutputFormat.createPrettyPrint();
      outputFormat4.setIndent("6@d");
      outputFormat4.setIndent("#v{%<\"");
      assertEquals("#v{%<\"", outputFormat4.getIndent());
      
      outputFormat4.setIndent("  ");
      outputFormat4.setIndent("");
      assertEquals('\"', outputFormat4.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7782518680634487
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("ERX!");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ERX!";
      outputFormat0.setLineSeparator("vce%Uy$F1KtySY-");
      stringArray0[1] = "ERX!";
      stringArray0[2] = "ERX!";
      stringArray0[3] = "ERX!";
      outputFormat0.setIndent("ERX!");
      stringArray0[4] = "ERX!";
      stringArray0[5] = "ERX!";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("vce%Uy$F1KtySY-", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator(stringArray0[6]);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.getLineSeparator();
      outputFormat0.setIndent(false);
      outputFormat0.getLineSeparator();
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-suppressDeclaration", false, "-expanEmpty-trimText");
      assertFalse(outputFormat0.isTrimText());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-expanEmpty-trimText";
      stringArray0[2] = "-trimText";
      stringArray0[5] = "-trimText";
      stringArray0[6] = "-expanEmpty-trimText";
      stringArray0[7] = "-xhtml";
      stringArray0[8] = "!Vr{=4vpRcdO8s!y`nm";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isTrimText());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.852140740384332
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("eI4b|gUnM]yz8#g=1>", true);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      
      outputFormat0.setNewLineAfterNTags(1);
      outputFormat0.getNewLineAfterNTags();
      assertEquals(1, outputFormat0.getNewLineAfterNTags());
      
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7055388825605595
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(":@\"+pr>\"yjq\"I*Shn", true, ":@\"+pr>\"yjq\"I*Shn");
      outputFormat0.setIndent(":@\"+pr>\"yjq\"I*Shn");
      outputFormat0.setEncoding(":@\"+pr>\"yjq\"I*Shn");
      outputFormat0.setNewlines(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndentSize(0);
      OutputFormat outputFormat1 = new OutputFormat(":@\"+pr>\"yjq\"I*Shn");
      outputFormat1.isSuppressDeclaration();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":@\"+pr>\"yjq\"I*Shn";
      outputFormat2.parseOptions(stringArray0, 0);
      outputFormat2.setSuppressDeclaration(true);
      outputFormat1.getIndent();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isNewlines();
      assertTrue(outputFormat0.isXHTML());
      
      outputFormat2.setIndent(":@\"+pr>\"yjq\"I*Shn");
      assertEquals(":@\"+pr>\"yjq\"I*Shn", outputFormat2.getIndent());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3217798019468048
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("np=vHjV", true);
      outputFormat0.setPadText(true);
      outputFormat0.setNewlines(true);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setXHTML(true);
      outputFormat0.isTrimText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "xG_lA0)fEeA";
      stringArray0[1] = "\n";
      stringArray0[2] = "xG_lA0)fEeA";
      stringArray0[3] = "";
      stringArray0[4] = "\n";
      stringArray0[5] = "";
      stringArray0[6] = "0W1#[f5.'yz/MItu1";
      stringArray0[7] = "xG_lA0)fEeA";
      stringArray0[8] = "";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setNewlines(false);
      outputFormat0.isPadText();
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.isOmitEncoding();
      outputFormat1.setSuppressDeclaration(true);
      outputFormat1.setNewlines(false);
      boolean boolean0 = outputFormat0.isXHTML();
      assertFalse(outputFormat0.isNewlines());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setIndentSize((-1));
      outputFormat0.setIndent(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Invalid attr";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setEncoding("_V a,*TAUDZr");
      outputFormat0.setAttributeQuoteCharacter('\'');
      outputFormat0.setAttributeQuoteCharacter('\'');
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals("_V a,*TAUDZr", outputFormat0.getEncoding());
      assertEquals('\'', char0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "-drimTex\\";
      String string1 = "-xhtml-xhcuml";
      String string2 = "-lineSeparator";
      String string3 = "-trimText";
      String string4 = "-expandEmpty-lineSeparator";
      OutputFormat outputFormat0 = new OutputFormat("-trimText", false, "-expandEmpty-lineSeparator");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('#');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (#)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expanBEh.y-trimTet", false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.setIndentSize((-1723849154));
      outputFormat0.setIndentSize((-1723849154));
      outputFormat0.setIndent("-trimTi~ext");
      outputFormat0.setIndent(true);
      assertEquals("  ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expanEmpty-trimText", false, "-xhtml-expanBEmpty-trimText");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-expandEmpty-expandEmpty-trimText";
      stringArray0[1] = "-expandEmpty-expandEmpty-trimText";
      stringArray0[2] = "-expanEmpty-trimText";
      stringArray0[4] = "-trimTt";
      stringArray0[5] = "-trimTt";
      stringArray0[6] = "-expanBEmpty-timText";
      stringArray0[7] = "-expanBEmpty-trimText";
      stringArray0[8] = "-trimText";
      outputFormat0.parseOptions(stringArray0, 9);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("-expanEmpty-trimText", outputFormat0.getIndent());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("-xhtml-expanBEmpty-trimText", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5782737395252497
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText", true);
      outputFormat0.setNewlines(false);
      OutputFormat outputFormat1 = new OutputFormat("qf&MUWuo");
      outputFormat1.setIndent("qf&MUWuo");
      outputFormat1.setIndent("");
      outputFormat1.setLineSeparator("E]BcrU n\"F");
      OutputFormat outputFormat2 = new OutputFormat("qf&MUWuo");
      outputFormat2.setNewLineAfterDeclaration(false);
      outputFormat1.getIndent();
      assertEquals("E]BcrU n\"F", outputFormat1.getLineSeparator());
      
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.getLineSeparator();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%nvU~";
      stringArray0[1] = "\n";
      stringArray0[0] = "qf&MUWuo";
      String string0 = outputFormat2.getLineSeparator();
      assertEquals("\n", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.090529997275233
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setXHTML(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setTrimText(false);
      outputFormat0.isExpandEmptyElements();
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("  ");
      outputFormat0.setIndentSize((-1));
      outputFormat0.setPadText(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setIndent("  ");
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent("  ");
      assertEquals("UTF-8", outputFormat1.getEncoding());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0902110180088855
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setTrimText(false);
      outputFormat0.isExpandEmptyElements();
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("  ");
      outputFormat0.setIndentSize((-1));
      outputFormat0.setPadText(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setIndent("  ");
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat1.getIndent());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.362686725255768
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      outputFormat0.setNewlines(false);
      outputFormat0.setXHTML(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndentSize(0);
      OutputFormat outputFormat1 = new OutputFormat((String) null);
      outputFormat1.setExpandEmptyElements(false);
      outputFormat1.isSuppressDeclaration();
      OutputFormat outputFormat2 = new OutputFormat("", false);
      outputFormat0.parseOptions(stringArray0, 0);
      OutputFormat outputFormat3 = new OutputFormat("", true);
      outputFormat3.setSuppressDeclaration(false);
      outputFormat3.getIndent();
      outputFormat3.isSuppressDeclaration();
      outputFormat0.isNewlines();
      outputFormat3.setIndent("RJ`cD!Y>yVR~BadP");
      assertEquals("RJ`cD!Y>yVR~BadP", outputFormat3.getIndent());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3035514829319883
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setXHTML(false);
      outputFormat0.isTrimText();
      outputFormat0.setPadText(true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "xG_lA0)fEeA";
      stringArray0[1] = "|=G|3>+7UVC7d";
      stringArray0[2] = "\n";
      stringArray0[3] = "-xhtml|B7vq`t_N>\"";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "xG_lA0)fEeA";
      stringArray0[7] = "O^wG,&lH";
      stringArray0[8] = "3$)l}cI$<F.2o8+8";
      outputFormat0.parseOptions(stringArray0, 3067);
      outputFormat0.setPadText(true);
      outputFormat0.setNewlines(false);
      outputFormat0.isPadText();
      outputFormat0.isOmitEncoding();
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setNewlines(true);
      OutputFormat outputFormat1 = new OutputFormat("\n", false);
      outputFormat1.setXHTML(false);
      outputFormat1.setLineSeparator("0R-P?3Ce");
      outputFormat1.isXHTML();
      assertEquals("0R-P?3Ce", outputFormat1.getLineSeparator());
      
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6439556568820564
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText", true);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setNewlines(true);
      outputFormat0.setLineSeparator("|B7vq`t_N>\"");
      outputFormat0.setXHTML(true);
      outputFormat0.isTrimText();
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.setNewLineAfterDeclaration(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "|B7vq`t_N>\"";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "xG_lA0)fEeA";
      stringArray0[3] = "|B7vq`t_N>\"";
      stringArray0[4] = "|B7vq`t_N>\"";
      stringArray0[5] = "F|XIf";
      stringArray0[6] = "|B7vq`t_N>\"";
      outputFormat0.isNewLineAfterDeclaration();
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals("|B7vq`t_N>\"", outputFormat0.getLineSeparator());
      assertEquals('\"', char0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "eIq4b|gUnM]yz8#g=S1>";
      stringArray0[1] = "eIq4b|gUnM]yz8#g=S1>";
      stringArray0[2] = "-xhtmleIq4b|gUnM]yz8#g=S1>";
      stringArray0[3] = "-xhtmleIq4b|gUnM]yz8#g=S1>";
      stringArray0[4] = "-xhtmleIq4b|gUnM]yz8#g=S1>";
      stringArray0[5] = "eIq4b|gUnM]yz8#g=S1>";
      stringArray0[6] = "eIq4b|gUnM]yz8#g=S1>";
      outputFormat0.parseOptions(stringArray0, 737);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4604647768925116
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setSuppressDeclaration(false);
      outputFormat0.setIndentSize(0);
      OutputFormat outputFormat2 = new OutputFormat("");
      outputFormat1.isSuppressDeclaration();
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "-indent";
      stringArray0[2] = "*M{MCN";
      stringArray0[3] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      OutputFormat outputFormat3 = new OutputFormat("*M{MCN", false);
      // Undeclared exception!
      try { 
        outputFormat3.parseOptions(stringArray0, (-473));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -473
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "a\\WHD#^\\c]$$e&";
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.isOmitEncoding();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('f');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (f)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4929506110564383
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(":@\"+pr>\"yjq\"I*Shn", true, ":@\"+pr>\"yjq\"I*Shn");
      outputFormat0.setIndent(":@\"+pr>\"yjq\"I*Shn");
      outputFormat0.setEncoding(":@\"+pr>\"yjq\"I*Shn");
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndentSize(0);
      outputFormat0.isSuppressDeclaration();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":@\"+pr>\"yjq\"I*Shn";
      outputFormat0.setOmitEncoding(true);
      outputFormat1.parseOptions(stringArray0, 0);
      outputFormat0.setIndent("-omitEncoding");
      outputFormat0.setIndent(true);
      OutputFormat.createCompactFormat();
      outputFormat0.setIndent("#v{%<\"");
      assertEquals("#v{%<\"", outputFormat0.getIndent());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6711893730418441
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, false, "-xhtml-xhtmleIq4b|gUnM]yz8#g=S1>");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "eIq4b|gUnM]yz8#g=S1>";
      stringArray0[1] = "$)(TvuW$?{<ISu?";
      stringArray0[2] = null;
      stringArray0[3] = "-xhtml-xhtmleIq4b|gUnM]yz8#g=S1>";
      stringArray0[4] = null;
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("-xhtml-xhtmleIq4b|gUnM]yz8#g=S1>", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-sup_reSsDeclaration", false, "-expanEmpty-trimText");
      outputFormat0.setIndentSize(258);
      assertEquals("                                                                                                                                                                                                                                                                  ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml-XrimText");
      OutputFormat outputFormat1 = new OutputFormat("\"-QmNwKV>rWK.'30w");
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      outputFormat1.setEncoding((String) null);
      stringArray0[1] = "\"-QmNwKV>rWK.'30w";
      stringArray0[2] = stringArray0[0];
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String string0 = outputFormat0.getEncoding();
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("UTF-8", string0);
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.2665523914311523
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "";
      stringArray0[1] = "";
      stringArray0[2] = "j~j9/L9ZP";
      stringArray0[3] = "";
      stringArray0[4] = "v*Nq|:W";
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setIndent(false);
      outputFormat0.isSuppressDeclaration();
      assertTrue(outputFormat0.isPadText());
      
      String[] stringArray1 = new String[5];
      stringArray1[0] = "de";
      stringArray1[1] = "de";
      stringArray1[2] = "";
      stringArray1[3] = "de";
      stringArray1[4] = "";
      outputFormat0.setPadText(false);
      outputFormat0.parseOptions(stringArray1, 0);
      outputFormat0.isPadText();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.isSuppressDeclaration();
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(boolean0);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "*M{MCN";
      stringArray0[1] = "";
      stringArray0[2] = "*M{MCN";
      stringArray0[4] = "*M{MCN";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(0, int0);
      
      String string0 = outputFormat0.getLineSeparator();
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("", outputFormat0.getIndent());
      assertEquals("\n", string0);
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expanEmpty-trimText", false, "-xhtml-expanBEmpty-trimText");
      outputFormat0.setNewLineAfterNTags((-102));
      String[] stringArray0 = new String[8];
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals((-102), int0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "a\\WHD#^\\c]$$e&";
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setIndentSize((-1347));
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.isOmitEncoding();
      outputFormat0.getAttributeQuoteCharacter();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('f');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (f)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.929538535746656
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("eIq4b|gUnM]yz8#g=S1>", false, "-suppressDeclaration");
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-suppressDeclaration";
      stringArray0[1] = "-suppressDeclaration";
      stringArray0[2] = "hhB{E.OU6;uFVs.7m)";
      stringArray0[3] = "-suppressDeclaration";
      stringArray0[4] = "hhB{E.OU6;uFVs.7m)";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmptylineSeparator", false, "\"exp[ndEmktymtrioexx");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-lineSeparator";
      stringArray0[2] = "\"exp[ndEmktymtrioexx";
      stringArray0[3] = "-expandEmpty\"exp[ndEmktymtrioexx";
      stringArray0[4] = "\"exp[ndEmktymtrioexx";
      stringArray0[5] = "-expandEmpty\"exp[ndEmktymtrioexx";
      stringArray0[6] = "\"exp[ndEmktymtrioexx";
      stringArray0[7] = "-expandEmptylineSeparator";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-lineSeparator", outputFormat0.getLineSeparator());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("RHjBxMJ~");
      outputFormat0.setNewLineAfterNTags(0);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("RHjBxMJ~", outputFormat0.getIndent());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("spressDeclaration", false, "eI4b|gUnM]yz8#g=1>");
      outputFormat0.setIndentSize((-1935479761));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-XrimText";
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("j8OSi}:{Dy");
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', char0);
      assertEquals("j8OSi}:{Dy", outputFormat0.getIndent());
      assertEquals("UTF-8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isXHTML();
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setLineSeparator("UTF-8");
      OutputFormat.createCompactFormat();
      outputFormat0.isNewLineAfterDeclaration();
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, 631);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.590194978739079
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setLineSeparator("");
      outputFormat0.getIndent();
      outputFormat0.getLineSeparator();
      outputFormat0.parseOptions(stringArray0, 2697);
      outputFormat0.getLineSeparator();
      outputFormat0.setIndent("-xhtml-xhcuml");
      outputFormat0.parseOptions(stringArray0, 979);
      assertEquals("-xhtml-xhcuml", outputFormat0.getIndent());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.203456186693981
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setIndent("");
      outputFormat0.setIndentSize(1076);
      OutputFormat outputFormat1 = new OutputFormat("");
      assertEquals("\n", outputFormat1.getLineSeparator());
      
      outputFormat0.setLineSeparator("");
      outputFormat0.getIndent();
      outputFormat0.getLineSeparator();
      outputFormat0.getLineSeparator();
      assertEquals("", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-expandEmpty-triText", false, "6");
      outputFormat0.setExpandEmptyElements(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expandEmpty-exPpandEmpty";
      stringArray0[1] = "-expandEmpty-expandEmpty-trimText";
      stringArray0[5] = "-expandEmpty-exPpandEmpty";
      stringArray0[3] = "-exPandEmty";
      stringArray0[4] = "-expandEmpty-exPpandEmpty";
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "-exPandEmty";
      String string1 = "-expandEmpty-expandEmpty-trimText";
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-expandEmpty-triText", false, "6");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter(';');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (;)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.929538535746656
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expanBEmpty-trimText", false, "-xhtml-expanBEmpty-trimText");
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-expandEmpty-expandEmpty-trimText";
      stringArray0[1] = "-expandEmpty-expandEmpty-trimText";
      stringArray0[2] = "-expanBEmpty-trimText";
      stringArray0[4] = "-trimTt";
      stringArray0[5] = "-trimTt";
      stringArray0[6] = "-expanBEmpty-timText";
      stringArray0[7] = "-expanBEmpty-trimText";
      stringArray0[8] = "";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6711893730418441
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("%+;=;?u!xDsir", false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "%+;=;?u!xDsir";
      stringArray0[1] = "%+;=;?u!xDsir";
      stringArray0[2] = "eIq4b|gUnM]yz8#g=S1>";
      stringArray0[3] = "%|YU,2j<dEYq[qV|z+";
      stringArray0[4] = "eIq4b|gUnM]yz8#g=S1>";
      stringArray0[5] = "-xhtmleIq4b|gUnM]yz8#g=S1>";
      stringArray0[6] = "eIq4b|gUnM]yz8#g=S1>";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("%+;=;?u!xDsir", outputFormat0.getIndent());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(1, int0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("eIq4b|gUnM]yz8#g=S1>", false, "-suppressDeclaration");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-omitEfnIding";
      stringArray0[2] = "$)(TvuW$?{<ISu?";
      String[] stringArray1 = new String[2];
      stringArray1[1] = "eIq4b|gUnM]yz8#g=S1>";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1265386804514934
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmkty-trimext", false, "-expandEmpty-expandEmpty-triText");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-xhtml";
      stringArray0[1] = "-expandEmpty-expandEmpty-triText";
      stringArray0[2] = "-expandEmpty-expandEmpty-trimText";
      stringArray0[3] = "-xhtml";
      stringArray0[4] = "-expandEmpty-expandEmpty-trimText";
      stringArray0[5] = "QO!B";
      stringArray0[6] = "-xhtml";
      stringArray0[7] = "-expandEmpty-expandEmpty-expandEmpty-triText";
      stringArray0[8] = "-expandEmpty-trimText";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(5, int0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expanEmpty-trimText", true, "-xhtml-expanBEmpty-trimText");
      outputFormat0.setNewLineAfterDeclaration(true);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertEquals("-xhtml-expanBEmpty-trimText", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("-expanEmpty-trimText", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }
}
