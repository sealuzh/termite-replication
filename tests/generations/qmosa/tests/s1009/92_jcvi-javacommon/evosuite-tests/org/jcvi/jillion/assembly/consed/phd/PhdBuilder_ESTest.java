/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 07:18:16 GMT 2019
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jcvi.jillion.assembly.consed.phd.ArtificialPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.assembly.consed.phd.PhdBuilder;
import org.jcvi.jillion.assembly.consed.phd.PhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.PhdWholeReadItem;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannel;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhdBuilder_ESTest extends PhdBuilder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      DefaultPhd defaultPhd0 = new DefaultPhd(",`X", (NucleotideSequence) null, qualitySequence0, (PositionSequence) null);
      defaultPhd0.toString();
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      phdBuilder0.fakePeaks(65, 65);
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      // Undeclared exception!
      try { 
        phdBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.ArtificialPhd", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      DefaultPhd defaultPhd0 = new DefaultPhd("positions must all have the same length", nucleotideSequence0, qualitySequence0, (PositionSequence) null, map0);
      List<PhdWholeReadItem> list0 = defaultPhd0.getWholeReadItems();
      defaultPhd0.toString();
      List<PhdReadTag> list1 = null;
      DefaultPhd defaultPhd1 = new DefaultPhd("positions must all have the same length", nucleotideSequence0, qualitySequence0, (PositionSequence) null, map0, list0, (List<PhdReadTag>) null);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(defaultPhd1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      hashMap0.put("UrVOjbO]cS%k:Ed", (String) null);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.remove((Object) "UrVOjbO]cS%k:Ed");
      hashMap1.put((String) null, (String) null);
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap2.values();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      PhdBuilder phdBuilder0 = new PhdBuilder("ANlWj`SgCw0", nucleotideSequence0, qualitySequence0);
      hashMap2.put((String) null, "");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      hashMap3.put((String) null, "");
      hashMap2.entrySet();
      hashMap3.put("~\":~rLI", "sSa#Q3r+*+xq9_,f7:8");
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      hashMap5.put("~\":~rLI", (String) null);
      hashMap5.put((String) null, ";N6rm\"H\"`SIZl`Fy");
      hashMap7.put(")lGB!ivg,i~&lBZ)V", "");
      hashMap6.entrySet();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      hashMap1.put((String) null, (String) null);
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      hashMap1.put("", (String) null);
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        phdBuilder0.wholeReadItems((List<PhdWholeReadItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(34L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(10L);
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis(10L);
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-128L));
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("WxLS$q", (NucleotideSequence) null, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sequence can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      LinkedList<PhdReadTag> linkedList1 = new LinkedList<PhdReadTag>();
      PhdBuilder phdBuilder0 = new PhdBuilder("AMBIGUITY_TO_CONSTIUENT", nucleotideSequence0, qualitySequence0);
      phdBuilder0.readTags(linkedList1);
      String string0 = "";
      String string1 = "id can not be null";
      // Undeclared exception!
      try { 
        Range.ofLength((-1393L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedList<PhdReadTag> linkedList0 = new LinkedList<PhdReadTag>();
      MockDate mockDate0 = new MockDate((-1843), 2501, 20000, 3, (-2271), 255);
      DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$RangeIterator", "", (Range) null, mockDate0, "al!4[,0uI4j", "TVqb[n");
      linkedList0.add((PhdReadTag) defaultPhdReadTag0);
      ArtificialPhd artificialPhd0 = new ArtificialPhd("org.jcvi.jillion.core.Range$RangeIterator", nucleotideSequence0, (QualitySequence) null, map0, (List<PhdWholeReadItem>) null, linkedList0, (-1843), (-2013));
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(")f4b[61=2Rus~u+", nucleotideSequence0, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualities can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      hashMap0.put("UrVOjbO]cS%k:Ed", (String) null);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put((String) null, (String) null);
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap2.values();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((String) null, nucleotideSequence0, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("qxLS$q", nucleotideSequence0, qualitySequence0);
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-2698L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-2698L));
      System.setCurrentTimeMillis((-2698L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(34L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-2698L));
      System.setCurrentTimeMillis(10L);
      System.setCurrentTimeMillis((-2698L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis(34L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis(34L);
      System.setCurrentTimeMillis((-263L));
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(0, (-4048));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4187591973137939
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      hashMap0.put("UrVOjbO]cS%k:Ed", (String) null);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.remove((Object) "UrVOjbO]cS%k:Ed");
      hashMap1.put((String) null, (String) null);
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap2.values();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      PhdBuilder phdBuilder0 = new PhdBuilder("ANlWj`SgCw0", nucleotideSequence0, qualitySequence0);
      hashMap2.put((String) null, "");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      hashMap3.put((String) null, "");
      hashMap2.entrySet();
      hashMap3.put("~\":~ErLI", "UrVOjbO]cS%k:Ed");
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      hashMap5.put("~\":~ErLI", (String) null);
      hashMap5.put((String) null, ";N6rE\"H`;IZl`Fy");
      hashMap7.put(")lGB!ivgai~&lBZ)V", "");
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      hashMap8.entrySet();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      hashMap1.put((String) null, (String) null);
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      phdBuilder0.fakePeaks();
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks((-203), (-203));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Phd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // phd to copy can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("qxLS$q", nucleotideSequence0, qualitySequence0);
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-2681L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2681L));
      System.setCurrentTimeMillis((-2681L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-4300L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-4300L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-4300L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2681L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2575L));
      // Undeclared exception!
      try { 
        phdBuilder0.readTags((List<PhdReadTag>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("qxLS$q", nucleotideSequence0, qualitySequence0);
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-2698L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-2698L));
      System.setCurrentTimeMillis((-2698L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(34L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis((-2698L));
      System.setCurrentTimeMillis(10L);
      System.setCurrentTimeMillis((-2698L));
      System.setCurrentTimeMillis(10L);
      System.setCurrentTimeMillis((-263L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        phdBuilder0.comments((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      hashMap0.put("UrVOjbO]cS%k:Ed", (String) null);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.remove((Object) "UrVOjbO]cS%k:Ed");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap2.values();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      hashMap0.putAll(hashMap1);
      PhdBuilder phdBuilder0 = new PhdBuilder("org.jcvi.jillion.core.Range$LongStartIntLengthRange", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap3.put((String) null, "");
      hashMap2.entrySet();
      hashMap3.put("", "");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap4.put((String) null, ";N6rE\"H`;IZl`Fy");
      hashMap6.put((String) null, "H2h/&AE&{_h");
      hashMap3.entrySet();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      hashMap4.put("peak spacing must be >0", "");
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      PhdBuilder phdBuilder1 = phdBuilder0.comments(hashMap0);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = (-15L);
      System.setCurrentTimeMillis((-15L));
      System.setCurrentTimeMillis((-15L));
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(3, (-2245));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // peak spacing must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      phdBuilder0.fakePeaks();
      PositionSequence positionSequence0 = null;
      phdBuilder0.build();
      byte[] byteArray0 = null;
      short[] shortArray0 = null;
      DefaultChannel defaultChannel0 = null;
      try {
        defaultChannel0 = new DefaultChannel((byte[]) null, (short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableByteArray", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      Locale locale0 = Locale.GERMAN;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList2);
      locale0.getUnicodeLocaleAttributes();
      PhdBuilder phdBuilder1 = phdBuilder0.wholeReadItems(linkedList0);
      PhdBuilder phdBuilder2 = phdBuilder1.wholeReadItems(linkedList0);
      assertSame(phdBuilder2, phdBuilder0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      hashMap0.put("UrVOjbO]cWS%k:Ed", (String) null);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.remove((Object) "UrVOjbO]cWS%k:Ed");
      hashMap1.put((String) null, (String) null);
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap2.values();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      PhdBuilder phdBuilder0 = new PhdBuilder("ANlWj`SgCw0", nucleotideSequence0, qualitySequence0);
      phdBuilder0.fakePeaks(3, 3);
      hashMap2.put((String) null, "");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      hashMap2.entrySet();
      hashMap3.put("~\":~rLI", "sSa#Q3r+*+xq9_,f7:8");
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      hashMap5.put("~\":~rLI", (String) null);
      hashMap5.put((String) null, ";N6rm\"H\"`SIZl`Fy");
      hashMap7.put("UrVOjbO]cWS%k:Ed", ",jMX");
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      hashMap8.entrySet();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      assertFalse(hashMap10.equals((Object)hashMap3));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      hashMap0.put("UrVOjbO]cS%k:Ed", (String) null);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap2.values();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      hashMap2.put("NotThymine", (String) null);
      hashMap0.putAll(hashMap1);
      PhdBuilder phdBuilder0 = new PhdBuilder("org.jcvi.jillion.core.Range$LongStartIntLengthRange", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap3.put((String) null, "");
      hashMap2.entrySet();
      hashMap3.put("", "");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap4.put((String) null, "0:*M1Q");
      hashMap6.put((String) null, "H2h/&AE&{_h");
      hashMap3.entrySet();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      hashMap4.put("peak spacing must be >0", "");
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      hashMap3.put((String) null, "cPbPQNa/+");
      PhdBuilder phdBuilder1 = phdBuilder0.peaks((PositionSequence) null);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis((-115L));
      System.setCurrentTimeMillis((-115L));
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("_Ais", nucleotideSequence0, qualitySequence0);
      phdBuilder0.copy();
      System.setCurrentTimeMillis(2877L);
      System.setCurrentTimeMillis((-115L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-115L));
      System.setCurrentTimeMillis((-115L));
      System.setCurrentTimeMillis((-2681L));
      System.setCurrentTimeMillis(3888L);
      System.setCurrentTimeMillis((-2631L));
      System.setCurrentTimeMillis(3888L);
      System.setCurrentTimeMillis((-115L));
      System.setCurrentTimeMillis((-2681L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Chromatogram chromatogram0 = null;
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      PositionSequence positionSequence0 = null;
      phdBuilder0.build();
      byte[] byteArray0 = null;
      short[] shortArray0 = null;
      DefaultChannel defaultChannel0 = null;
      try {
        defaultChannel0 = new DefaultChannel((byte[]) null, (short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableByteArray", e);
      }
  }
}
