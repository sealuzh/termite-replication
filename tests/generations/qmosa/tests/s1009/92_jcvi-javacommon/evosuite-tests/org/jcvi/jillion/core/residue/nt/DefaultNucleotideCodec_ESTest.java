/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 05:53:20 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3502428861504887
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedLength(byteArray1);
      defaultNucleotideCodec2.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      Byte byte0 = new Byte((byte) (-29));
      Byte.compare((byte) (-29), (byte) (-29));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.poll();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.isGap(byteArray0, (-2012959712));
      linkedList0.listIterator();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.isGap(byteArray1, (-390));
      int int0 = new Integer(0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode((Nucleotide) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4212460282453456
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = new byte[5];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-55));
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      byteArray0[0] = (byte) (-55);
      byteArray0[2] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[4] = (byte) (-55);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray1);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, 0);
      defaultNucleotideCodec0.isGap(byteArray0, (byte)7);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Byte byte0 = new Byte((byte) (-55));
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, 10);
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-55);
      byteArray2[1] = (byte)85;
      byteArray2[2] = (byte)7;
      byteArray2[3] = (byte)7;
      byteArray2[4] = (byte) (-55);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec2.iterator(byteArray2);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode(61696, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)5;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte) (-84);
      byteArray1[5] = (byte) (-120);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-119);
      byteArray2[1] = (byte)5;
      byteArray2[2] = (byte)4;
      byteArray2[3] = (byte)4;
      byteArray2[4] = (byte) (-84);
      byteArray2[5] = (byte)5;
      byteArray2[6] = (byte)32;
      byteArray2[7] = (byte)4;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray2, 4294967295L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483645
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3587399791251906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)4;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getGapOffsets(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray1);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, 1);
      defaultNucleotideCodec0.isGap(byteArray0, (-2126221431));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray1, (byte)116);
      int int0 = 10;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (-2351));
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, 10);
      // Undeclared exception!
      try { 
        Range.parseRange(")9chc E-)=4(g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse )9chc E-)=4(g into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.432332734219647
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-55);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.getNumberOfGapsUntil(byteArray1, (byte) (-55));
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 3790);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec6.isGap(byteArray1, 0);
      assertTrue(boolean0);
      
      int int0 = defaultNucleotideCodec1.getUngappedOffsetFor(byteArray1, (-860));
      assertEquals((-860), int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec7.getNumberOfGaps(byteArray1);
      assertEquals(1, int1);
      assertEquals(5, byteArray1.length);
      
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec8 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec8.isGap(byteArray0, (-860));
      DefaultNucleotideCodec defaultNucleotideCodec9 = DefaultNucleotideCodec.INSTANCE;
      int int2 = defaultNucleotideCodec9.getGappedOffsetFor(byteArray0, 1918);
      assertEquals(0, int2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.398719416162238
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-2012959712));
      defaultNucleotideCodec0.isGap(byteArray0, (-2012959712));
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 1);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("&jJ%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.&jJ%
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9397928111645655
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)5;
      defaultNucleotideCodec0.isGap(byteArray0, 3583);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(8, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4132130431348466
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.valueOf("INSTANCE");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)74;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 1952257861);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.808463885562474
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-125);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(151, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = 65535L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      range0.equals(defaultNucleotideCodec0);
      String string0 = "\\gTYH.E`";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.ofLength(65535L);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, 697);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      long long0 = 22L;
      Range.of((-727L));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-2), iterator0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6910517378300467
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 685);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 264);
      defaultNucleotideCodec0.isGap(byteArray0, 1369);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8863990313046046
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byte byte0 = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-84);
      byte byte1 = (byte)32;
      byteArray0[3] = (byte)32;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(2, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-40);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, (byte) (-40));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)5;
      byte byte0 = (byte)8;
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor((byte[]) null, (byte)5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2263741809732966
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 2060997177);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-89);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      defaultNucleotideCodec0.encode((-1), iterator0);
      byteArray0[0] = (byte)10;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)0;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1441);
      byte[] byteArray1 = new byte[7];
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte) (-74);
      byteArray1[3] = (byte) (-89);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)76;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.279591398074532
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 2060997177);
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-89);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((-1), iterator0);
      byteArray0[0] = (byte)10;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1441);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.toString(byteArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.45126227595883
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 644);
      Range range0 = Range.ofLength(0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.iterator(byteArray0, range0);
      Range.of((long) 644);
      // Undeclared exception!
      try { 
        Range.parseRange("VPJ|xRV%NSJ2plXl_I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse VPJ|xRV%NSJ2plXl_I into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.5002156089339054
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide1);
      Nucleotide nucleotide2 = Nucleotide.Strong;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide3 = Nucleotide.Adenine;
      linkedList0.offerLast(nucleotide3);
      linkedList0.add(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) linkedList0);
      linkedList0.add(nucleotide1);
      int int0 = defaultNucleotideCodec2.getUngappedOffsetFor(byteArray1, 82);
      assertEquals(82, int0);
      
      int int1 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray2, 82);
      Range range0 = Range.of((long) 0);
      defaultNucleotideCodec2.iterator(byteArray1, range0);
      Nucleotide nucleotide4 = Nucleotide.Gap;
      int int2 = defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray2, 82);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)27}, byteArray2);
      assertTrue(int2 == int1);
      
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getGappedOffsetFor(byteArray1, 0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec4.isGap(byteArray1, (-77));
      assertFalse(boolean0);
      
      String string0 = defaultNucleotideCodec1.toString(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("G", string0);
      
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = defaultNucleotideCodec5.encode((Collection<Nucleotide>) linkedList0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)27, (byte) (-128)}, byteArray3);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-89);
      Byte byte0 = new Byte((byte) (-89));
      Range range0 = Range.of((long) (byte)76);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 42
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7974304538187877
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)74;
      byte[] byteArray1 = new byte[7];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, 685);
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, 264);
      defaultNucleotideCodec0.isGap(byteArray1, 1369);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, 0);
      defaultNucleotideCodec0.toString(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3302875499638307
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-2012959712));
      defaultNucleotideCodec0.isGap(byteArray0, (-2012959712));
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 0);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("&jJ%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.&jJ%
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-58);
      byte byte0 = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)17);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)5;
      defaultNucleotideCodec0.isGap(byteArray0, 3583);
      byte[] byteArray1 = new byte[8];
      byte byte0 = (byte) (-15);
      byteArray1[2] = (byte) (-15);
      int int0 = 3;
      Iterator<Nucleotide> iterator0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.858427108492624
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-120);
      defaultNucleotideCodec0.isGap(byteArray0, 3583);
      byte[] byteArray1 = new byte[8];
      byteArray1[3] = (byte) (-15);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (byte)0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (byte) (-15));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-120);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 2L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 2 corresponds to encodedIndex 5  encodedglyph length is 5
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.75012938226178
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byte byte0 = (byte)35;
      byteArray0[1] = (byte)35;
      byte byte1 = (byte)47;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte byte2 = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte)47;
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide.getAmbiguityFor(linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec.values();
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)47;
      byteArray2[1] = (byte)47;
      Range range0 = Range.ofLength(1559L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray2, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 644);
      Range range0 = Range.of((long) 644);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 644 .. 644 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.650442143368543
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.03449904738929
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)32;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.encode(2, iterator0);
      byteArray0[4] = (byte)5;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)5;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, 1840700269);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 3583);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)4;
      Range range0 = Range.of((-1253L), 1824L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1804285533205268
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 1711276032);
      int int0 = defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 2);
      assertEquals(2, int0);
      
      defaultNucleotideCodec1.iterator(byteArray0);
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-34)}, byteArray0);
      assertEquals("CT", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5257538231683174
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)74;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.426244263196083
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)7;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getUngappedLength(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec3.getNumberOfGapsUntil(byteArray0, (byte)85);
      defaultNucleotideCodec4.isGap(byteArray1, (byte)85);
      Byte byte0 = new Byte((byte) (-55));
      Integer integer0 = new Integer(1853);
      defaultNucleotideCodec5.encode((Collection<Nucleotide>) set0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec3.iterator(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec6.encode(0, iterator0);
      defaultNucleotideCodec4.getNumberOfGapsUntil(byteArray2, 6);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec6.iterator(byteArray1, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-53);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, (byte)0);
      nucleotide0.complement();
      // Undeclared exception!
      try { 
        Nucleotide.valueOf("*5qA^44\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.Nucleotide.*5qA^44\"
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)63;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-2000), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.3628433742803376
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)35;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Strong;
      linkedList0.add(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Pyrimidine;
      linkedList0.add(nucleotide1);
      Nucleotide nucleotide2 = Nucleotide.Gap;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte)47;
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide3 = Nucleotide.Unknown;
      linkedList1.add(nucleotide3);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set0 = nucleotide3.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec[] defaultNucleotideCodecArray0 = DefaultNucleotideCodec.values();
      assertEquals(1, defaultNucleotideCodecArray0.length);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.430758633903798
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)6;
      defaultNucleotideCodec2.isGap(byteArray0, 4);
      defaultNucleotideCodec1.isGap(byteArray0, (byte)0);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)93;
      byte byte0 = (byte) (-16);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 2);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.7323510765910033
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Keto;
      defaultNucleotideCodec0.encode(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Strong;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.encode(nucleotide1);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-2469));
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-80)}, byteArray0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.403763330235561
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-13);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-13);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-13));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.3952163216885523
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)25;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-51));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8136605216916037
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte) (-86);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.5678136347030915
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Range range0 = Range.of((long) (byte)0);
      String string0 = "@WY^e{E21YW}Y1w,OX";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, (byte) (-13));
      String string1 = "ORDINAL_VALUES";
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1470);
      // Undeclared exception!
      try { 
        Range.parseRange("ORDINAL_VALUES");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ORDINAL_VALUES into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 1330L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 1330 corresponds to encodedIndex 669  encodedglyph length is 1
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.79438837168257
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 685);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 264);
      defaultNucleotideCodec0.isGap(byteArray0, 1369);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode((byte[]) null, 38L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-13);
      Range range0 = Range.of((long) (byte)0);
      String string0 = "@WY^e{E21YW}Y1w,OX";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte) (-13));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -13
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-13);
      Range range0 = Range.of((long) (byte)0);
      String string0 = "@WY^e{E21YW}Y1w,OX";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-13);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-13);
      Range range0 = Range.of((long) (byte)0);
      String string0 = "@WY^e{E21YW}Y1w,OX";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-13);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.034902741187544
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)0;
      defaultNucleotideCodec0.decode(byteArray0, 1L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-13);
      Range range0 = Range.of((long) (byte)0);
      String string0 = "@WY^e{E21YW}Y1w,OX";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.1495187761408894
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)5;
      defaultNucleotideCodec0.isGap(byteArray0, 3583);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-84));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.iterator();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte)5, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-13);
      Range range0 = Range.of((long) (byte)0);
      String string0 = "@WY^e{E21YW}Y1w,OX";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.521452740110338
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Range range0 = Range.of((long) (byte)0);
      String string0 = "@WY^e{E21YW}Y1w,OX";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, (byte) (-13));
      String string1 = "ORDINAL_VALUES";
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.657838843714085
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-84);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 2687);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)5;
      defaultNucleotideCodec0.isGap(byteArray0, 3583);
      byte[] byteArray1 = new byte[8];
      byteArray1[2] = (byte) (-15);
      byteArray1[3] = (byte) (-15);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (byte) (-15));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6701418099785283
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)4;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-2540));
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)5;
      defaultNucleotideCodec0.isGap(byteArray0, 3583);
      byte[] byteArray1 = new byte[8];
      byte byte0 = (byte) (-15);
      byteArray1[2] = (byte) (-15);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)10;
      byteArray2[1] = (byte) (-120);
      byteArray2[2] = (byte)5;
      byteArray2[3] = (byte)5;
      byteArray2[4] = (byte)4;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray2, 1234);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.4045403310125617
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte)24;
      byteArray0[8] = (byte)14;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.417715857393759
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)107;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.4045403310125617
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-45);
      byteArray0[7] = (byte)107;
      byteArray0[8] = (byte)64;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.510357617990278
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-89);
      byteArray0[8] = (byte)7;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-583));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.2090786973748964
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)35;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Strong;
      linkedList0.add(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Gap;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte)47;
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      nucleotide1.getAllPossibleAmbiguities();
      linkedList1.add(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set0 = nucleotide1.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec.values();
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray2);
      assertEquals(0L, long0);
      
      String string0 = defaultNucleotideCodec0.toString(byteArray2);
      assertEquals("-", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray2);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.1292797349431543
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Adenine;
      Set<Nucleotide> set1 = nucleotide1.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte) (-80);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray1, 5);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.0020202316574616
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)80;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[5] = (byte)53;
      byteArray0[7] = (byte)0;
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, 1L);
      assertEquals(Nucleotide.Gap, nucleotide0);
      
      int int0 = new Byte((byte)80);
      DefaultNucleotideCodec.values();
      int int1 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 743);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.1476595185936755
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      Integer integer0 = new Integer((-2012959710));
      Integer integer1 = new Integer(0);
      Integer.getInteger("  encodedglyph length is ", integer0);
      Integer.getInteger("", integer1);
      Integer.min(0, (-15));
      defaultNucleotideCodec0.isGap(byteArray0, (-2012959710));
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 0);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("&jJ%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.&jJ%
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.48940315962994
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-84);
      byteArray0[4] = (byte)32;
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 3583);
      assertFalse(boolean0);
      
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-84));
      assertEquals(0, int0);
      
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, 0L);
      assertEquals(Nucleotide.Guanine, nucleotide0);
      
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals((-2012959744L), long0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)5;
      defaultNucleotideCodec0.isGap(byteArray0, 3583);
      byte[] byteArray1 = new byte[8];
      byte byte0 = (byte) (-15);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-120);
      byteArray2[1] = (byte)87;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray2, 16);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.4211346608125623
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-13);
      byteArray0[2] = (byte) (-13);
      Range.of((long) (byte)0);
      String string0 = "@WY^e{E21YW}w,OX";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
