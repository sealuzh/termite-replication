/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 07:04:01 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.094936762607074
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(2147483603L);
      Object object0 = new Object();
      Long long0 = new Long(0L);
      Long long1 = new Long(4294967295L);
      Range range1 = Range.of(4294967295L);
      range0.equals(range1);
      Object object1 = new Object();
      Object object2 = new Object();
      Long long2 = new Long(2147483647L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range.of(4294967295L);
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object4));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.977711214265509
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 5785L);
      Range range1 = Range.of((-9223372036854775291L));
      List<Range> list0 = range1.complement(range0);
      range1.getBegin();
      List<Range> list1 = range1.complementFrom(list0);
      range1.complementFrom(list1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(5785L, (-9223372036854775291L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775291 would make range [5785 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.779708586886793
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = (-4L);
      Range range0 = Range.of((-85L), (-4L));
      Range range1 = Range.of((-85L), (-85L));
      Object object0 = new Object();
      Long.divideUnsigned((-4L), (-4L));
      Long long1 = new Long(1389L);
      Object object1 = new Object();
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.equals(range1);
      Range range2 = Range.of(range_CoordinateSystem0, (-653L), 32767L);
      Long long2 = new Long((-85L));
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      range2.complementFrom(list1);
      try { 
        Long.parseUnsignedLong("number of entries must be <= Integer.MAX_VALUE", (-481));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -481 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.624399113825616
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder0 = new Range.Builder(255L);
      range_Builder0.copy();
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long(255L);
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals((Object) null);
      Object object5 = new Object();
      Range.of(255L);
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object3));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.821975088678728
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      long long0 = (-328L);
      Long long1 = new Long((-328L));
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range range1 = Range.of(2147483647L, 2147483647L);
      Range.of(9223372036854743005L);
      Range range2 = range0.intersection(range1);
      Object object4 = new Object();
      range0.equals(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("|b2oYD%p?(5ts05");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.|b2oYD%p?(5ts05
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.839219294708217
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of((-1118L), (-4L));
      Range range1 = Range.of((-1118L), (-1118L));
      range1.equals(range0);
      Object object0 = new Object();
      long long0 = 255L;
      Range range2 = Range.of(255L);
      range1.intersection(range2);
      long long1 = 0L;
      long long2 = 0L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(0L, (-1118L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=4.019655819807209
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long long1 = new Long((-1L));
      long long2 = (-32768L);
      Range range0 = Range.of((-32768L));
      Range range1 = Range.ofLength(4294967295L);
      range1.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder((-1123L), 1L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range2 = range_Builder2.build();
      long long3 = (-10L);
      range_Builder0.contractBegin((-10L));
      Range range3 = range0.intersection(range2);
      Range.of((-1079L), 2470L);
      Range.Builder range_Builder3 = new Range.Builder(range3);
      Range.Builder range_Builder4 = new Range.Builder(127L);
      Range.Builder range_Builder5 = new Range.Builder(2470L);
      Range.Builder range_Builder6 = new Range.Builder();
      Range.Builder range_Builder7 = new Range.Builder();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("given length %d would make range [%d - ? ] beyond max allowed end offset", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse given length %d would make range [%d - ? ] beyond max allowed end offset into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=4.059561043502926
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = 2147483603L;
      Range range0 = Range.ofLength(2147483603L);
      Range range1 = Range.of(2147483603L, 2147483603L);
      range0.intersection(range1);
      Range range2 = Range.of((-9223372036854775772L), (-32768L));
      range2.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(2147483603L);
      Object object0 = new Object();
      range_Builder1.contractBegin((-9223372032559808511L));
      Range.Builder range_Builder3 = new Range.Builder(range1);
      Long long1 = new Long((-9223372036854775772L));
      Object object1 = new Object();
      range1.equals(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range range3 = Range.of((-9223372036854775772L));
      Range.Builder range_Builder5 = new Range.Builder(4294967295L);
      range_Builder2.build();
      range2.complement(range3);
      range_Builder4.shift(2147483603L);
      Range.Builder range_Builder6 = null;
      try {
        range_Builder6 = new Range.Builder(2379L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.6460916239756207
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.complement(range0);
      Long long0 = new Long(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Long long1 = new Long(9223372036854775807L);
      long long2 = 9223372034707292246L;
      Range range2 = Range.of(9223372034707292246L);
      range0.equals(range2);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(9223372036854775807L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4545835673965124
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.ofLength(2147483623L);
      Range.of(2147483623L, 2147483623L);
      Long long0 = new Long((-9223372036854765845L));
      Range.Builder range_Builder0 = new Range.Builder();
      Long long1 = new Long(2147483623L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = 9223372032559808513L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372032559808513L, (-9223372036854765845L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854765846 would make range [9223372032559808512 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.8773452325930697
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = range0.intersection(range0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 2147483647L, 4294967295L);
      Object object6 = new Object();
      range0.equals(object6);
      Object object7 = new Object();
      Range.of(235L, 2147483603L);
      Range range2 = Range.of(range_CoordinateSystem0, (-4010L), 4294967295L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.876898356085611
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(4L, 4L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1533L), 4L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(4L, 1158L);
      range1.getBegin();
      Range range2 = Range.ofLength(4L);
      range2.equals(range0);
      range0.equals(range2);
      Object object0 = new Object();
      range0.intersection(range1);
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 9223372034707292185L;
      Range.of(range_CoordinateSystem2, (-1447L), 9223372034707292185L);
      Object object2 = new Object();
      Range range3 = Range.of(range_CoordinateSystem1, (-1447L), 4L);
      range3.getBegin();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1817L, 1158L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.714574434265154
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      range0.intersection(range1);
      Object object2 = new Object();
      Long long1 = new Long(9223372036854748827L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("xK'=9mp/)Dj*}w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.xK'=9mp/)Dj*}w
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=4.0829073970411285
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(4L, 4L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1533L), 4L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range range2 = Range.of(4L, 1158L);
      range2.getBegin();
      Range range3 = Range.ofLength(4L);
      range0.equals(range3);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range1));
      
      Range range4 = range0.intersection(range2);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range5 = Range.of(range_CoordinateSystem2, 4L, 9223372034707292185L);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
      
      Object object1 = new Object();
      Range range6 = Range.of(range_CoordinateSystem1, (-1533L), 4L);
      range6.getBegin();
      Range range7 = Range.of(range_CoordinateSystem1, 1158L, 1158L);
      List<Range> list0 = range2.complement(range6);
      range4.complementFrom(list0);
      List<Range> list1 = range6.complementFrom(list0);
      List<Range> list2 = range7.complementFrom(list1);
      //  // Unstable assertion: assertFalse(list1.contains(range2));
      //  // Unstable assertion: assertEquals(1, list2.size());
      
      Range.CoordinateSystem.values();
      List<Range> list3 = range0.complement(range6);
      range6.complementFrom(list3);
      //  // Unstable assertion: assertFalse(list3.equals((Object)list2));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.7948035039118313
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.ofLength(13L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 9223372034707292259L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long((-338L));
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(0L, 0L);
      range1.intersection(range0);
      Object object3 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(9223372034707292259L);
      Range.Builder range_Builder5 = new Range.Builder();
      Range.Builder range_Builder6 = new Range.Builder();
      range_Builder6.build();
      Range.Comparators.values();
      range_Builder6.expandBegin((-1372L));
      // Undeclared exception!
      try { 
        range_Builder3.contractEnd(2585L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=4.063729785826244
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(254L);
      Object object0 = new Object();
      Long long0 = new Long(65535L);
      Long long1 = new Long(254L);
      range0.equals(long1);
      Range.Builder range_Builder0 = new Range.Builder(1746L, 1746L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder2.build();
      Range.Builder range_Builder3 = range_Builder2.contractBegin((-8239L));
      Range.of(1746L, 1746L);
      range0.intersection(range1);
      Range.of((-8239L), 4294967295L);
      Range.Builder range_Builder4 = new Range.Builder(range1);
      range_Builder3.build();
      Range range2 = Range.of((-8239L), (-8239L));
      // Undeclared exception!
      try { 
        range2.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.934142051579716
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.ofLength(2147483623L);
      Range range1 = Range.of(2147483623L, 2147483623L);
      long long0 = (-9223372036854765845L);
      Long long1 = new Long((-9223372036854765845L));
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Long long2 = new Long(2147483623L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Object object1 = new Object();
      range1.intersection(range0);
      range_Builder0.expandBegin((-65L));
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 258L, 258L);
      Range.of(range_CoordinateSystem0, (-2206L), 258L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.408641287701287
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-216L);
      Range range0 = Range.of(range_CoordinateSystem0, (-216L), 4294975535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.5993709489974566
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Long long1 = new Long(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Long long2 = new Long(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Object object1 = new Object();
      range0.intersection(range1);
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Yl4,S,r-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Yl4,S,r-
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.982702315112322
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of((-85L), 127L);
      Range range1 = Range.ofLength(127L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 9223372034707292259L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range2 = range0.intersection(range1);
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 27759L, 9223372034707292259L);
      Range range4 = Range.of(range_CoordinateSystem0, (-85L), 9223372034707292259L);
      boolean boolean0 = range4.endsBefore(range3);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range2);
      assertEquals(2, list0.size());
      
      range_Builder0.contractEnd(4364L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.intersection(range0);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3310752848182723
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = 2147483603L;
      Range.of(2147483603L);
      Object object0 = new Object();
      Long long1 = new Long(0L);
      Long long2 = new Long(4294967295L);
      Range range0 = Range.of(4294967295L);
      range0.equals((Object) null);
      long long3 = 1746L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(0L, (-5818L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.9656443428650947
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.ofLength(2147483603L);
      Range range1 = Range.of(2147483603L, 2147483603L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of((-9223372036854775772L), (-32768L));
      range3.getEnd();
      range3.equals(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Object object0 = new Object();
      Long long0 = new Long((-1L));
      Object object1 = new Object();
      Object object2 = new Object();
      range2.equals((Object) null);
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        Range.of(2147483603L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.648397160382301
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of(255L, 255L);
      Range.of(255L, 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294975752L, 9223372036854775647L);
      range0.getEnd(range_CoordinateSystem0);
      Range range2 = Range.of((-630L), 255L);
      range1.startsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 255L, (-630L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=4.02034945222546
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.equals((Object) null);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder1.build();
      range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.Builder range_Builder2 = range_Builder0.contractBegin((-319L));
      Range.of((-1595L), (-165L));
      range1.intersection(range0);
      range_Builder2.expandBegin(127L);
      Range.of(9223372032559808513L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of((-1595L), (-3076L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.355647603099659
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-85L), (-4L));
      range0.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder((-85L), 9223372034707292246L);
      Object object0 = new Object();
      int int0 = (-2147218917);
      try { 
        Long.valueOf("ih@ vGi9tj7?Eb", (-2147218917));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -2147218917 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.442225882343271
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder0);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range1 = range_Builder1.build();
      long long0 = (-310L);
      Range range2 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range_Builder0.contractBegin((-319L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.clone();
      Object object0 = new Object();
      range0.equals(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-319L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.9948894724604327
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.ofLength(2147483603L);
      range0.intersection(range0);
      Range range1 = Range.of((-9223372036854775772L), (-32768L));
      range1.equals(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(2147483603L);
      Object object0 = new Object();
      range_Builder1.contractBegin((-9223372032559808511L));
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Long long0 = new Long((-9223372036854775772L));
      Object object1 = new Object();
      range0.equals(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range range2 = Range.of((-9223372036854775772L));
      Range.Builder range_Builder5 = new Range.Builder(4294967295L);
      range_Builder2.build();
      range1.complement(range2);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775772L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.6913572334206766
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(2147483603L);
      Range range1 = Range.of(2147483603L, 2147483603L);
      range0.intersection(range1);
      range0.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Long long0 = new Long(2147483603L);
      Range.Builder range_Builder1 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.of(3915L, 1557L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.4279783730534703
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = 4L;
      Range range0 = Range.of(4L, 4L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.3755268803270857
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(250L, 250L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.359243777812971
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = 5786L;
      Range range0 = Range.ofLength(5786L);
      range0.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=4.16040876927464
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(9223372036854773493L, (-9223372036854775290L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = Range.of(255L);
      Range range3 = Range.ofLength(255L);
      range2.complement(range3);
      Range range4 = range1.intersection(range2);
      range_Builder1.expandBegin(3518L);
      List<Range> list0 = range4.complement(range0);
      //  // Unstable assertion: assertSame(range4, range2);
      //  // Unstable assertion: assertTrue(list0.contains(range2));
      
      boolean boolean1 = range3.intersects(range0);
      //  // Unstable assertion: assertFalse(boolean1);
      
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, (-3208L));
      range_Builder1.expandBegin(400L);
      Range.of((-1441L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of((-1441L), 1596L);
      Range range5 = Range.of(range_CoordinateSystem1, 32767L, 32767L);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.664726774679421
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.complement(range0);
      Long long1 = new Long(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Long long2 = new Long(9223372036854775807L);
      Range range2 = Range.of(9223372036854775807L);
      range0.equals(range2);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(9223372036854775807L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.956376264369794
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854773493L, (-9223372036854775290L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = Range.of((-9223372036854775290L), (-9223372036854775290L));
      range2.isSubRangeOf(range1);
      Range.Builder range_Builder2 = range_Builder1.contractEnd((-3000L));
      range_Builder2.contractEnd((-2759L));
      Range range3 = range2.asRange();
      range1.intersection(range0);
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 255L, 9223372036854773493L);
      Object object0 = new Object();
      Long long1 = new Long(1160L);
      range1.equals(long1);
      Range.Builder range_Builder4 = new Range.Builder(range3);
      Range.Builder range_Builder5 = new Range.Builder(1160L);
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854769531 would make range [9223372036854773493 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=4.0630303850321114
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long long0 = 2147483603L;
      Range range0 = Range.ofLength(2147483603L);
      Range range1 = Range.of(2147483603L, 2147483603L);
      range0.intersection(range1);
      Range range2 = Range.of((-9223372036854775772L), (-32768L));
      range2.equals(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(2147483603L, 9223372032559808513L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      range_Builder3.build();
      range_Builder1.contractBegin((-3486L));
      range0.intersection(range2);
      long long1 = (-3804L);
      Range.of((-3804L), 0L);
      Range.Builder range_Builder5 = new Range.Builder(range0);
      Range.Builder range_Builder6 = null;
      try {
        range_Builder6 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=4.06490860340408
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of((-85L), (-4L));
      Range range1 = Range.of((-85L), (-85L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 27759L, 9223372034707292246L);
      boolean boolean0 = range3.equals("org.jcvi.jill8on.core.Range$hyteRangc");
      assertFalse(boolean0);
      
      Range range4 = Range.of((-85L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range5 = Range.of(range_CoordinateSystem1, (-1L), 27759L);
      List<Range> list0 = range5.complement(range2);
      assertTrue(list0.contains(range5));
      
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      List<Range> list3 = range4.complementFrom(list2);
      assertEquals(1, list3.size());
      
      Range.CoordinateSystem.values();
      range2.complementFrom(list2);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
      assertFalse(list2.equals((Object)list3));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.7062966713669785
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder0);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      range_Builder1.build();
      range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = (-725L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      range_Builder0.contractBegin(0L);
      range1.intersection(range0);
      Range.of(2470L, 6442460931L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3123058872862807
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Long long0 = new Long(4336L);
      Long long1 = new Long(0L);
      long long2 = 9223372034707292161L;
      Range range0 = Range.of(9223372034707292161L);
      range0.equals(long0);
      long long3 = (-5818L);
      long long4 = (-25L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-25L), (-32767L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=4.010821627186731
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of((-85L), 0L);
      Range range1 = range0.asRange();
      range1.iterator();
      Range range2 = Range.of((-2147483648L), (-85L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range3 = Range.of((-2303L));
      range3.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.toString(range_CoordinateSystem0);
      Range range4 = Range.ofLength(10868L);
      range2.equals((Object) null);
      Range.of(10868L, 10868L);
      range2.split(9223372036854775807L);
      // Undeclared exception!
      try { 
        range4.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.7216162006832585
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder0 = new Range.Builder(255L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(255L, 255L);
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 255L, 4294967294L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder(255L, 1688L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      long long0 = (-8239L);
      range_Builder5.contractBegin((-8239L));
      range0.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-240L), 1725L);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder4);
      long long1 = 4176L;
      Range.Builder range_Builder7 = null;
      try {
        range_Builder7 = new Range.Builder((-240L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.933173655251171
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = range0.intersection(range1);
      range2.iterator();
      range2.complement(range1);
      range1.intersects(range2);
      Range range3 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      range3.equals(range0);
      range3.intersects(range0);
      String string0 = "/LVT?1";
      // Undeclared exception!
      try { 
        Range.parseRange("/LVT?1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse /LVT?1 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.8116654023821472
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(2147483623L);
      Long long0 = new Long((-9223372036854765845L));
      Range.Builder range_Builder0 = new Range.Builder();
      Long long1 = new Long(2147483623L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = range0.intersection(range0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range1.equals(object4);
      Range.of(2147483623L, 2147483623L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 32767L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967295L, 2147483623L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.998851789574853
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder1.build();
      range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range_Builder0.contractBegin((-319L));
      range_Builder0.expandEnd((-1595L));
      Range.of((-1595L), (-165L));
      range1.intersection(range0);
      Range range3 = Range.of((-165L), 1575L);
      range3.spliterator();
      List<Range> list0 = range0.complement(range3);
      range2.complementFrom(list0);
      range3.intersects(range1);
      Range range4 = Range.of((-319L), 594L);
      assertFalse(range4.equals((Object)range2));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.490212542379043
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long long1 = new Long((-154L));
      Object object0 = new Object();
      Object object1 = new Object();
      Long long2 = new Long((-154L));
      Object object2 = new Object();
      Object object3 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-1L));
      range0.equals(long1);
      Object object4 = new Object();
      Range.of((-2147483648L), (-215L));
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object4));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.557417702682568
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder0);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      range_Builder0.build();
      Range range1 = range_Builder1.build();
      range1.complement(range0);
      long long1 = 1204L;
      long long2 = (-725L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(0L, (-725L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.6488189650259546
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(622L, 622L);
      range_Builder0.expandEnd(1L);
      range_Builder0.copy();
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      boolean boolean0 = range1.startsBefore(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      
      Range.of(1L, 622L);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2081819478882956
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 256L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.8542263211437215
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(127L, 127L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder1.shift(127L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder2.build();
      Range range0 = Range.ofLength(205L);
      Range range1 = Range.of(0L, 0L);
      range0.getLength();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) range1;
      objectArray0[1] = (Object) range_Builder1;
      objectArray0[2] = (Object) range_Builder0;
      objectArray0[3] = (Object) range_Builder1;
      objectArray0[4] = (Object) range_Builder0;
      objectArray0[5] = (Object) range0;
      linkedList0.toArray(objectArray0);
      range1.complementFrom(linkedList0);
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        Range.of(271L, (-1840L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.3903421687483357
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Long long0 = new Long(9223372036854775807L);
      long long1 = 9223372034707292205L;
      Long long2 = new Long(9223372034707292205L);
      long long3 = (-72L);
      Range range0 = Range.of((-72L));
      range0.equals(long2);
      long long4 = (-5818L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1L), (-5818L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.749264631481954
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-85L), (-25L));
      Range range1 = Range.of((-85L));
      range1.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder((-85L), 9223372034707292246L);
      Object object0 = new Object();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range2 = Range.of((-641L));
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      range1.intersection(range0);
      long long0 = (-2518L);
      Range.of((-993L), 65535L);
      Range range3 = null;
      Range.Builder range_Builder4 = new Range.Builder(range2);
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder((-25L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.7742644988941607
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1123L), (-1L));
      range_Builder0.build();
      long long0 = 2147483647L;
      Range.Builder range_Builder1 = new Range.Builder((-1123L), 2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range0 = range_Builder3.build();
      range_Builder2.contractBegin(1L);
      long long1 = 32767L;
      Range range1 = Range.of((-3825L), (-1544L));
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-1544L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.5278692503270213
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.isEmpty();
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range1 = range_Builder1.build();
      long long0 = (-310L);
      Range range2 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range_Builder0.contractBegin((-319L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.clone();
      Object object0 = new Object();
      range0.equals(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-319L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.884500462913762
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.of((-128L));
      Range.of((-2147483648L));
      long long0 = 0L;
      Range.of(0L);
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.9047984046813147
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(254L);
      Object object0 = new Object();
      Long long0 = new Long(65535L);
      range0.equals(long0);
      Range.Builder range_Builder0 = new Range.Builder(1746L, 1746L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = range_Builder2.contractBegin((-8239L));
      Range range1 = Range.of(1746L, 1746L);
      Range range2 = range0.intersection(range0);
      range2.equals((Object) null);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range_Builder3.build();
      Range.of((-8239L), (-8239L));
      range1.equals(long0);
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder((-495L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.5695537774052006
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object object0 = new Object();
      long long0 = (-240L);
      Range.of((-240L), 4294967294L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-240L), 1725L);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=4.258207592343203
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of((-85L), 0L);
      Range range1 = range0.asRange();
      range1.iterator();
      Range range2 = Range.of((-2147483648L), (-85L));
      Long long1 = new Long((-2147483648L));
      long long2 = 2073L;
      Range range3 = Range.of(2073L, 32767L);
      List<Range> list0 = range3.split(1476L);
      List<Range> list1 = range2.complementFrom(list0);
      range3.complementFrom(list1);
      String string0 = "<lBoS=}QJ\\Osym";
      // Undeclared exception!
      try { 
        Range.parseRange("<lBoS=}QJOsym");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse <lBoS=}QJOsym into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.4199549994902383
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.ofLength(13L);
      Range range1 = Range.ofLength(13L);
      long long0 = 9223372034707292259L;
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 9223372034707292259L);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(object0);
      Object object2 = new Object();
      Long long1 = new Long((-328L));
      range1.equals(range0);
      range_Builder0.build();
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-328L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.3025579078108627
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.ofLength(1538L);
      Long long0 = new Long(1538L);
      Long long1 = new Long(1538L);
      Object object0 = new Object();
      range0.equals("inputstream can not be null");
      Object object1 = new Object();
      Object object2 = new Object();
      Long long2 = new Long(1538L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range.of(1538L);
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object0));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.312778700525052
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(2147483623L);
      Long long0 = new Long(9223372036854775806L);
      Long long1 = new Long(2147483623L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long2 = new Long(2147483623L);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals("pD3Yi3Q.%/5");
      Object object4 = new Object();
      // Undeclared exception!
      try { 
        Range.of(78L, (-82L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.583641859891433
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(2147483603L);
      Object object0 = new Object();
      long long0 = 0L;
      Long long1 = new Long(0L);
      Long long2 = new Long(4294967295L);
      range0.equals(range0);
      long long3 = 1746L;
      Range.Builder range_Builder0 = new Range.Builder(0L, 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.of(2147483603L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range0.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(2147483603L, 1746L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.9686969465516073
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of((-2664L), (-2664L));
      Range range1 = Range.of((-2664L), (-2664L));
      range1.getBegin();
      range0.getLength();
      range1.intersects(range0);
      range0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getLength();
      Range range2 = Range.of((-2664L));
      Range.CoordinateSystem.values();
      range2.equals(range0);
      Range range3 = Range.of((-2790L));
      range2.startsBefore(range0);
      range1.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.2879799350142385
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = 2147483623L;
      Range range0 = Range.of(2147483623L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(127L);
      range0.intersects(range1);
      range1.toString(range_CoordinateSystem0);
      long long1 = 886L;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 127 .. 127 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 127 .. 127 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.3133775438667996
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Long long1 = new Long(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Long long2 = new Long((-1L));
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      Object object4 = new Object();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.9906940918879568
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of((-85L), 13L);
      Range range1 = Range.of(13L);
      Range.Builder range_Builder0 = new Range.Builder(13L, 9223372034707292259L);
      range1.endsBefore(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range2 = range0.intersection(range1);
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 27759L, 9223372034707292259L);
      Range.of(range_CoordinateSystem0, (-85L), 9223372034707292259L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 13L, 13L);
      List<Range> list0 = range0.complement(range2);
      assertFalse(list0.contains(range0));
      assertSame(range2, range1);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=4.020249438061512
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder1.build();
      long long0 = range2.getLength();
      assertEquals(0L, long0);
      
      Range range3 = range_Builder1.build();
      range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Range.Builder range_Builder2 = range_Builder0.contractBegin((-319L));
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range5 = range_Builder2.build();
      range3.complement(range1);
      Range.Builder range_Builder3 = new Range.Builder(4294967295L);
      range_Builder3.build();
      range3.complement(range5);
      range_Builder3.contractEnd(4449L);
      Range range6 = range5.intersection(range4);
      assertFalse(range5.isEmpty());
      assertFalse(range4.isEmpty());
      assertTrue(range6.isEmpty());
      assertSame(range6, range1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.9939294854776617
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 261L, 261L);
      Range range1 = Range.ofLength(261L);
      range0.startsBefore(range0);
      range1.spliterator();
      range1.endsBefore(range0);
      range0.intersects(range1);
      range1.isEmpty();
      Long long0 = new Long(5009L);
      Range range2 = Range.of(5009L, 32767L);
      Range.of(261L, 9223372034707292246L);
      range0.intersection(range2);
      range2.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 261L, 32767L);
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.7051291260406187
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = (-1501L);
      Range range0 = Range.of((-1501L));
      String string0 = null;
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder(1746L, 1746L);
      range_Builder0.shift((-380L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.604084712589038
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-85L), (-25L));
      Range range1 = Range.of((-85L), (-25L));
      range0.intersects(range1);
      Range.Builder range_Builder0 = new Range.Builder((-85L), 9223372034707292246L);
      Object object0 = new Object();
      Range.Builder range_Builder1 = new Range.Builder((-85L), 1212L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder((-5818L), (-5818L));
      Range.of((-5818L));
      Range.Builder range_Builder4 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder0);
      Range.of((-25L));
      Range.Builder range_Builder7 = new Range.Builder(range_Builder0);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.552237561767257
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(2147483623L, 2147483623L);
      Long long0 = new Long((-356L));
      Long long1 = new Long(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long2 = new Long(2147483623L);
      Object object4 = new Object();
      Object object5 = new Object();
      range0.isEmpty();
      Object object6 = new Object();
      Range.of((-1L), 2147483623L);
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object4));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.4594807996221904
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.443946621241721
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = (-1L);
      Range.Builder range_Builder0 = new Range.Builder((-1123L), (-1L));
      Range range0 = Range.of(311L);
      Object object0 = new Object();
      range0.equals(object0);
      long long1 = (-5818L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(1746L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=4.029953708014825
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(5786L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder0 = new Range.Builder(5786L);
      Range range1 = range_Builder0.build();
      Range range2 = Range.ofLength(5786L);
      range_Builder0.contractEnd(5786L);
      Object object1 = new Object();
      Object object2 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) range_Builder0;
      linkedList0.toArray(objectArray0);
      List<Range> list0 = range2.complement(range1);
      //  // Unstable assertion: assertTrue(list0.isEmpty());
      
      List<Range> list1 = range0.complement(range1);
      range2.complementFrom(list1);
      range0.intersects(range2);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      
      Range.of(5786L, 4294977292L);
      Range.CoordinateSystem.values();
      List<Range> list2 = range2.split(5786L);
      //  // Unstable assertion: assertFalse(list2.equals((Object)list0));
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.8779149314037626
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(5786L);
      range0.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range0.intersection(range0);
      range0.complement(range1);
      range1.intersects(range0);
      long long0 = 331L;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem0, 331L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.6308479172824466
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of((-85L), (-85L));
      long long0 = 4294967295L;
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.intersection(range0);
      Range range1 = Range.of(1583L, 32767L);
      range1.split(1L);
      Object object3 = new Object();
      long long1 = 256L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, long1, long0);
      Range.of(long1);
      String string0 = "";
      Range.Comparators.valueOf(string0);
      Range.Comparators.valueOf(string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.86690264566776
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(254L);
      Object object0 = new Object();
      Long long0 = new Long(65535L);
      range0.equals(long0);
      Range.Builder range_Builder0 = new Range.Builder(1746L, 1746L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder2.build();
      Range.Builder range_Builder3 = range_Builder2.contractBegin((-8239L));
      Range.of(1746L, 1746L);
      Range.ofLength(65535L);
      Range.Builder range_Builder4 = new Range.Builder(range1);
      range_Builder3.build();
      // Undeclared exception!
      try { 
        Range.of((-1963L), (-9223372036854775292L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.6892908782371876
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.ofLength(1714L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.spliterator();
      Range.of(range_CoordinateSystem0, 255L, 1843L);
      range0.split(1714L);
      Range.of(9223372036854775550L);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.589506276356582
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Long long1 = new Long(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      // Undeclared exception!
      try { 
        range1.split(9223372036854775807L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.5398836581206155
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(250L, 250L);
      range0.split(250L);
      Long long0 = new Long(4294977283L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(1746L, 65535L);
      String string0 = "3G6v]3y?.YS:X7=l9,|";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("3G6v]3y?.YS:X7=l9,|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.3G6v]3y?.YS:X7=l9,|
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.7621116702307242
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(250L, 250L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.of((-2129L));
      Range.of(65535L);
      Range.of((-2129L));
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.7606758272205507
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(2147483623L);
      Range range1 = Range.of(2147483623L, 2147483623L);
      long long0 = (-9223372036854765845L);
      Long long1 = new Long((-9223372036854765845L));
      Range.Builder range_Builder0 = new Range.Builder();
      Long long2 = new Long(2147483623L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range range2 = range1.intersection(range0);
      Object object2 = new Object();
      Object object3 = new Object();
      range2.split(2147483623L);
      Object object4 = new Object();
      range2.equals(object4);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.6471316876621476
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Long long1 = new Long(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Range range2 = range1.intersection(range0);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.complement(range2);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.of((-32768L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.2009388382289825
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.5288161826608144
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.build();
      range_Builder0.build();
      range_Builder0.build();
      range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      range_Builder0.contractBegin(0L);
      long long0 = 2470L;
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 695L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.7270550587219953
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      long long1 = 2147483647L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 0L, 2147483647L);
      Range range1 = Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854770023L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.9456650440197034
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.ofLength(2147483623L);
      Range range1 = Range.of(2147483623L, 2147483623L);
      Long long0 = new Long((-9223372036854765845L));
      Range.Builder range_Builder0 = new Range.Builder();
      Long long1 = new Long(2147483623L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range range2 = range1.intersection(range0);
      Object object2 = new Object();
      Object object3 = new Object();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range3 = Range.of((-9223372036854765845L));
      range2.intersection(range3);
      // Undeclared exception!
      try { 
        Range.of((-9223372036854765845L), 2147483623L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.922445562437118
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range.of(255L, 255L);
      Long long0 = new Long(255L);
      Range.Builder range_Builder0 = new Range.Builder(255L, 255L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = Range.of(32767L);
      Range range2 = Range.of((-128L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range0.intersection(range1);
      Range.of(23L, 255L);
      Range.Builder range_Builder3 = new Range.Builder(range2);
      Range.Builder range_Builder4 = new Range.Builder(255L);
      Range.Builder range_Builder5 = new Range.Builder(407L);
      Range.Builder range_Builder6 = new Range.Builder();
      Range.Builder range_Builder7 = new Range.Builder();
      range_Builder7.build();
      Range.Builder range_Builder8 = new Range.Builder(range2);
      Range.Builder range_Builder9 = range_Builder5.contractEnd((-128L));
      assertNotSame(range_Builder9, range_Builder7);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.7277408067570232
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(250L, 250L);
      long long0 = (-5818L);
      long long1 = 538L;
      Range.Builder range_Builder0 = new Range.Builder((-5818L), 538L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = Range.of(4294977283L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.of(1018L, 31L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.2663099104328785
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = 2147483603L;
      Range range0 = Range.of(2147483603L);
      Object object0 = new Object();
      long long1 = 0L;
      Long long2 = new Long(0L);
      Long long3 = new Long(4294967295L);
      Range range1 = Range.of(4294967295L);
      range1.getEnd();
      range1.equals(range0);
      long long4 = 1746L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(0L, (-5818L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.465779530898699
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.of((-128L));
      Range.of(2147483647L);
      long long0 = 0L;
      Range.of(0L);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=4.231471072499892
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.ofLength(2147483603L);
      Range range1 = Range.of(2147483603L, 2147483603L);
      range0.intersects(range1);
      Range range2 = range0.intersection(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      List<Range> list0 = range2.complementFrom(linkedList0);
      Range range3 = Range.ofLength(2147483603L);
      range0.toString();
      range3.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, (-9223372036854765820L), (-9223372036854765820L));
      range1.equals((Object) null);
      range1.split(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(2147483520L);
      range_Builder0.contractEnd((-889L));
      Range range5 = Range.parseRange("[ 0 .. 2147483602 ]/0B");
      range5.isSubRangeOf(range4);
      range5.complement(range0);
      range3.complementFrom(list0);
      Range.of(4294967295L);
      Range range6 = range4.asRange();
      assertFalse(range6.equals((Object)range2));
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.859630538787584
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.of(0L);
      range1.getBegin();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.of((-128L));
      Range.of((-2147483648L));
      Range.of(0L);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      range_Builder0.build();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.7943751926722773
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = 2147483623L;
      Range range0 = Range.ofLength(2147483623L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(127L);
      range0.intersects(range1);
      range1.toString(range_CoordinateSystem0);
      long long1 = 886L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.parseRange("[ 127 .. 127 ]/0B", range_CoordinateSystem1);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      range0.complement(range1);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 0 .. 2147483622 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 0 .. 2147483622 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.318366493346887
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = 2147483603L;
      Range range0 = Range.of(2147483603L);
      Object object0 = new Object();
      long long1 = (-2129L);
      Long long2 = new Long((-2129L));
      Long long3 = new Long(4294967295L);
      Range.of(4294967295L);
      range0.isSubRangeOf(range0);
      long long4 = 1746L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(7L, (-5818L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=4.0634301696441835
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-85L), (-4L));
      Range range1 = Range.of((-85L), (-85L));
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 9223372034707292246L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range2 = range0.intersection(range1);
      Object object2 = new Object();
      Object object3 = new Object();
      Range range3 = Range.of((-1804L), 0L);
      Range range4 = Range.of(0L, 3645L);
      long long0 = 9223372036854775807L;
      Range range5 = Range.of(9223372036854775807L);
      range2.spliterator();
      range5.isSubRangeOf(range4);
      range0.startsBefore(range1);
      List<Range> list0 = range4.complement(range5);
      range5.complementFrom(list0);
      range1.isSubRangeOf(range3);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("r;yy:(`RRnYKBkRu6Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.r;yy:(`RRnYKBkRu6Z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.446290125546826
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1123L), (-1L));
      Range range0 = range_Builder0.build();
      long long0 = 2136L;
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2136L);
      range0.equals(range_Builder1);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-1123L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.432894600546479
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.startsBefore(range0);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      range_Builder1.build();
      range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = (-725L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(1204L, (-725L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.5075877602031467
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(2512L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 23L, 23L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1325L), (-1325L));
      // Undeclared exception!
      try { 
        range0.split((-2059L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.8157436608409503
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = (-85L);
      Range range0 = Range.of((-85L), 0L);
      Range range1 = range0.asRange();
      range1.iterator();
      long long1 = (-2147483648L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractBegin((-85L));
      range1.getBegin();
      Range.CoordinateSystem.values();
      Range range2 = Range.of((-85L));
      Range range3 = null;
      // Undeclared exception!
      try { 
        range2.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.6503231768787288
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Long long0 = new Long((-216L));
      long long1 = (-32768L);
      long long2 = (-1L);
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-1L));
      range1.startsBefore(range0);
      Range range2 = Range.of((-1364L));
      range1.intersection(range2);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$1 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.6580442715628902
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-216L);
      Range range0 = Range.of(range_CoordinateSystem0, (-216L), 4294975535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range range1 = Range.of(4726L, 4294975534L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.of(2147483562L, 5834L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.914968432124112
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Range.Builder range_Builder0 = new Range.Builder(255L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(255L, 255L);
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 255L, 4294967294L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder(255L, 1688L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      Range.Builder range_Builder6 = range_Builder5.contractBegin((-8239L));
      Range range1 = Range.of((-240L), 4294967294L);
      range1.intersection(range0);
      range_Builder4.expandEnd((-240L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-240L), 1725L);
      range_Builder5.expandBegin(790L);
      Range.Builder range_Builder7 = new Range.Builder(range_Builder4);
      Range.Builder range_Builder8 = new Range.Builder();
      range_Builder6.build();
      range0.complement(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd(0L);
      long long1 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.6005225513082406
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-85L));
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-85L));
      range0.getEnd();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals((Object) null);
      Object object4 = new Object();
      Range.of((-785L), 4294967295L);
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.6900338505520454
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.of(range_CoordinateSystem0, 0L, 5785L);
      Range.of((-9223372036854775291L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(5785L, (-9223372036854775291L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775291 would make range [5785 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.797726408451037
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 9L, 9L);
      Range.of(range_CoordinateSystem0, 9L, 5785L);
      Range.of((-9223372036854775291L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(5785L, (-9223372036854775291L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775291 would make range [5785 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=4.018062595935229
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Range range1 = Range.ofLength(255L);
      range0.getEnd(range_CoordinateSystem0);
      range0.endsBefore(range1);
      range1.spliterator();
      range1.endsBefore(range0);
      range0.intersects(range1);
      range0.endsBefore(range1);
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem2.getAbbreviatedName();
      Range range2 = range1.asRange();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem3, 1L, 1L);
      List<Range> list0 = range2.split(1L);
      range0.complementFrom(list0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("ZSN<bum A:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.ZSN<bum A:
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.7311256251260847
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.ofLength(2147483603L);
      Range range1 = Range.of(2147483603L, 2147483603L);
      Range range2 = range0.intersection(range1);
      range1.getBegin();
      Range range3 = Range.of(2147483603L);
      range0.intersects(range1);
      Range range4 = range3.intersection(range2);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.clone();
      range0.complement(range4);
      Object object1 = new Object();
      Object object2 = new Object();
      linkedList0.clone();
      Object object3 = new Object();
      long long0 = 4726L;
      // Undeclared exception!
      try { 
        Range.of(2147483603L, (-4936L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.3877987679922255
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = 4L;
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 4L, 4L);
      long long1 = 13L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 13L, 4L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=4.125853550597831
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.of(255L, 255L);
      Long long0 = new Long(255L);
      Range.Builder range_Builder0 = new Range.Builder(255L, 255L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = Range.of(32767L);
      Range range3 = Range.of((-128L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range4 = range0.intersection(range2);
      Range.of(23L, 255L);
      Range.Builder range_Builder3 = new Range.Builder(range3);
      Range.Builder range_Builder4 = new Range.Builder(255L);
      Range.Builder range_Builder5 = new Range.Builder(407L);
      Range.Builder range_Builder6 = new Range.Builder();
      Range.Builder range_Builder7 = new Range.Builder();
      range_Builder7.build();
      range_Builder7.expandBegin(9223372036854775553L);
      range_Builder7.build();
      Range.Builder range_Builder8 = new Range.Builder(255L);
      range_Builder3.expandBegin(255L);
      range1.complement(range0);
      Range.Builder range_Builder9 = new Range.Builder(range4);
      // Undeclared exception!
      try { 
        range_Builder8.contractEnd(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.4685053049350194
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 255L;
      Range.of(range_CoordinateSystem0, 255L, 255L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 255L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.build();
      range_Builder1.build();
      long long1 = 1204L;
      long long2 = (-725L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(2147483647L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.466183881666937
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-3235L), (-1230L));
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-1473L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.80507658819755
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.ofLength(2147483603L);
      Range range1 = Range.of(2147483603L, 2147483603L);
      range0.intersects(range1);
      range0.intersection(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.593841814596908
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-85L), 0L);
      Range range1 = range0.asRange();
      range1.iterator();
      Range.of((-2147483648L), (-85L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-85L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.546661477007043
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = (-4L);
      Range range0 = Range.of((-1118L), (-4L));
      Range range1 = Range.of((-1118L), (-1118L));
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), 2432L);
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of((-1118L), (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.7661874232163624
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long0 = new Long((-216L));
      Range range0 = Range.of(range_CoordinateSystem0, (-216L), 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem2);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of((-1L), (-1L));
      Range.ofLength(0L);
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 0L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.7421465399374285
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(2147483562L);
      Object object0 = new Object();
      Long long0 = new Long(2147483562L);
      range0.intersects(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.intersection(range0);
      Range.of(0L, 86L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.8228741964650528
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of((-85L), 13L);
      Range range1 = Range.ofLength(13L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range2 = range0.intersection(range1);
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 27759L, 9223372034707292259L);
      range0.complement(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967295L, (-85L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.905895572512156
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.intersects(range0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder1.build();
      long long0 = (-310L);
      range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range_Builder0.contractBegin((-319L));
      Range.of((-1595L), (-170L));
      range1.intersection(range0);
      Range range3 = Range.of((-170L), 1575L);
      range3.spliterator();
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Range coordinates %d, %d are not valid %s coordinates");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Range coordinates %d, %d are not valid %s coordinates
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.626730831718567
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-85L), (-4L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.intersection(range0);
      Long long0 = new Long((-85L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range.of(3627L);
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.7177975943303045
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of(13L, 13L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(0L);
      range0.intersection(range1);
      range1.complement(range0);
      long long0 = 9223372036854748827L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854748827L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.587852583597322
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.of(250L, 250L);
      Long long0 = new Long(4294977283L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(65535L);
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder1.expandBegin(4294977283L);
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder3.build();
      Range.Builder range_Builder5 = new Range.Builder(4294977283L);
      Range.Builder range_Builder6 = new Range.Builder(1746L);
      range_Builder6.expandBegin((-2822L));
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-4L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-4L), (-4L));
      range_Builder0.expandEnd((-1100L));
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd((-237L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.112227645912027
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.ofLength(10866L);
      long long0 = range0.getLength();
      assertEquals(10866L, long0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.381115388606448
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 9223372034707292259L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long((-328L));
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Long long1 = new Long(9223372034707292259L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range range1 = Range.of(4294967295L, 9223372034707292259L);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.3235437321314656
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = 311L;
      Range range0 = Range.of(1L, 311L);
      range0.toString();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 1 .. 311 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 1 .. 311 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.972335784433352
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of(4L, 4L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1533L), 4L);
      Long long0 = new Long((-1533L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range2 = range0.intersection(range1);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.complement(range2);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.of((-32768L), (-32768L));
      range1.complement(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("K*V*[*o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.K*V*[*o
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.6564062405789666
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range range1 = range_Builder1.build();
      Range range2 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Object object0 = new Object();
      range2.complement(range0);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(4364L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=4.05336782874416
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = (-85L);
      Range range0 = Range.of((-85L), 13L);
      Range range1 = Range.of((-85L), (-85L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.of(2944L);
      Range.of((-2147483648L));
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      range1.complementFrom(list1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 32510L, 886L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.151798682372979
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.8851218920964308
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.contractBegin((-132L));
      range_Builder1.expandBegin(0L);
      // Undeclared exception!
      try { 
        Range.parseRange("%c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse %c into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.5110165232989634
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 1042L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-463L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1042L, (-463L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.456908815346539
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object object0 = new Object();
      long long0 = 1688L;
      long long1 = (-240L);
      Range range0 = Range.of((-240L), 4294967294L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.651903750512787
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long0 = new Long((-216L));
      Range range0 = Range.of(range_CoordinateSystem0, (-216L), 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem2);
      assertEquals(0L, long1);
      
      boolean boolean0 = range0.isSubRangeOf(range0);
      Range range1 = Range.of((-1L), (-1L));
      boolean boolean1 = range0.startsBefore(range1);
      boolean boolean2 = range0.endsBefore(range1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      range1.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.1925863485716692
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.of((-32768L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.344704836150969
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = 2147483623L;
      Range range0 = Range.ofLength(2147483623L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(127L);
      range0.intersects(range1);
      range1.toString(range_CoordinateSystem0);
      long long1 = 886L;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 127 .. 127 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 127 .. 127 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.8708338370373707
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      long long1 = 255L;
      long long2 = (-9223372036854775290L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854773493L, (-9223372036854775290L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = Range.of((-9223372036854775290L), (-9223372036854775290L));
      range2.isSubRangeOf(range1);
      long long3 = (-3000L);
      range_Builder1.contractEnd((-3000L));
      // Undeclared exception!
      try { 
        range0.intersection(range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775290 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.569828593325779
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long0 = new Long((-216L));
      Range range0 = Range.of(range_CoordinateSystem0, (-216L), 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem2);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of((-1L), (-1L));
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 0L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.718054994587705
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of(255L, 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.ofLength(0L);
      range0.intersection(range1);
      range1.complement(range0);
      long long0 = 9223372036854748827L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854748827L, (-1903L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.6612475920054877
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.of(0L, (-1L));
      Range.of(0L);
      Long long0 = new Long((-443L));
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.of(9223372034707292246L, 1746L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.of((-1968L), (-1968L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("3G6v]3y?.YS:X7=l9,|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.3G6v]3y?.YS:X7=l9,|
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.7528584159534595
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Range.of(255L, 255L);
      Long long0 = new Long(255L);
      long long1 = 255L;
      Range.Builder range_Builder0 = new Range.Builder(255L, 255L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd((-128L));
      Range.of(32767L);
      Range range1 = Range.ofLength(32513L);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(32513L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.87279870523861
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd(0L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(255L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      range_Builder0.contractEnd(0L);
      range_Builder0.contractEnd(0L);
      Range range2 = range1.asRange();
      Range range3 = range1.intersection(range2);
      Range range4 = Range.of(0L, 255L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range2.complementFrom(list0);
      assertFalse(range0.equals((Object)range4));
      assertSame(range2, range3);
      assertFalse(list1.contains(range3));
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.386182706029501
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Long long0 = new Long(255L);
      Range.of((-2517L), 65535L);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.3203691289568624
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(1L, 255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.1133442736467214
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long long1 = new Long((-1L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long2 = new Long(255L);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range.of(688L);
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object2));
  }
}
