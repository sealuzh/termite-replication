/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 18:32:11 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.8234295653006543
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of((-3338L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(4294967295L);
      range0.equals(range1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      range1.split(4294967295L);
      range1.equals(range0);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 9223372036854775686L);
      Long long0 = new Long(9223372036854775686L);
      range1.equals((Object) null);
      Range.Builder range_Builder1 = new Range.Builder(2318L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.complementFrom(linkedList0);
      Range.of(range_CoordinateSystem1, (-32768L), 568L);
      Range range2 = Range.of(9223372036854775686L);
      Range range3 = range2.intersection(range1);
      range3.intersects(range1);
      range1.intersects(range3);
      range1.intersects(range3);
      // Undeclared exception!
      try { 
        Range.of(2318L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.5833647860754994
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(610L);
      Range range0 = Range.of((-9223372036854775799L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(610L, 1433L);
      range0.equals(range1);
      Range.Builder range_Builder1 = new Range.Builder(1433L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.Builder range_Builder2 = new Range.Builder(range2);
      Range.CoordinateSystem.values();
      range0.intersection(range2);
      range0.intersection(range2);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder4 = new Range.Builder(1L, 1L);
      // Undeclared exception!
      try { 
        Range.of(0L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.472962951924858
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-128L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of((-128L), 127L);
      Range range2 = Range.of((-128L), 4294967295L);
      range2.equals(range_Builder0);
      Range.Builder range_Builder1 = new Range.Builder(1941L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range1.intersection(range0);
      range2.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, (-2041L), (-128L));
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder5 = new Range.Builder((-2790L), 4294967295L);
      assertFalse(range_Builder5.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5122521458933074
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(3706L, 3706L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(9223372036854775198L);
      Range range1 = Range.of(127L, 9223372036854775198L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 792L, 9223372036854775807L);
      Object object1 = new Object();
      range2.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.CoordinateSystem.values();
      range2.intersection(range0);
      Range.ofLength(1L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.603841513898235
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372036854775793L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = 1433L;
      Range range1 = Range.of(610L, 1433L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) range_Builder0;
      objectArray0[2] = (Object) consumer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      linkedList0.toArray(objectArray0);
      linkedList0.addFirst(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range range2 = Range.ofLength(9223372036854775793L);
      Long long1 = new Long(9223372036854775807L);
      range1.endsBefore(range2);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer1);
      range2.equals(objectArray0[0]);
      // Undeclared exception!
      try { 
        Range.parseRange("KwGUwgGU@=8N+,)W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse KwGUwgGU@=8N+,)W into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.5721268732200544
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      long long0 = 65535L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 65535L, 2147483647L);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.build();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder1.contractEnd((-3194L));
      Long long1 = new Long(610L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals((Object) null);
      long long2 = 251L;
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(0L, (-3194L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.68823209780654
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(3706L, 3706L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(9223372032559808512L);
      Range range2 = Range.of(4294967295L, 4294967295L);
      Range range3 = Range.of(4294967295L, 4294967295L);
      range2.iterator();
      range3.complement(range1);
      long long0 = 4294967295L;
      Range range4 = Range.of(4294967295L, 9223372032559808512L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) range0;
      objectArray0[2] = (Object) range0;
      objectArray0[3] = (Object) range_Builder0;
      linkedList0.toArray(objectArray0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.addFirst(range4);
      linkedList1.add(range3);
      range3.complementFrom(linkedList1);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.4850224915021286
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-128L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object1 = new Object();
      linkedList0.addFirst(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      Range range1 = Range.of((-128L), (-128L));
      Range range2 = range1.intersection(range0);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.isEmpty());
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer1);
      Range range3 = range1.asRange();
      assertSame(range3, range0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2379692291584212
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(610L);
      long long0 = 9223372036854775793L;
      Range range0 = Range.of(9223372036854775793L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(610L, 1433L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) range_Builder0;
      objectArray0[2] = (Object) consumer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775793L, 9223372036854775807L);
      Object object1 = new Object();
      range0.equals(range1);
      Range.CoordinateSystem.values();
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.41819637693716
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range.ofLength(2147483647L);
      Object object0 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5275113000598872
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of((-1501L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1501L), 65535L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range2 = Range.of((-498L), (-498L));
      range1.equals(range2);
      Range.Builder range_Builder2 = new Range.Builder(255L);
      Range.Builder range_Builder3 = new Range.Builder(range2);
      range1.intersection(range2);
      range0.intersection(range1);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder5 = new Range.Builder((-1253L), 9223372032559808513L);
      assertFalse(range_Builder5.equals((Object)range_Builder3));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.5997192395169226
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(3706L, 3706L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(9223372032559808512L);
      Range range2 = Range.of(0L, 0L);
      Range range3 = Range.of(0L, 0L);
      range2.iterator();
      range3.complement(range1);
      Range range4 = Range.of(4294967311L, 9223372032559808512L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range4.equals(range0);
      Range.Comparators.values();
      range_Builder0.build();
      Range.CoordinateSystem.values();
      range3.isSubRangeOf(range1);
      range0.intersects(range1);
      Range.CoordinateSystem.values();
      range0.intersection(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.D
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.5097896903812327
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(610L);
      Range.of(9223372036854775793L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(610L, 1433L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(127L, 127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 610L, 9223372036854775793L);
      Object object0 = new Object();
      range2.equals(object0);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.CoordinateSystem.values();
      range1.intersection(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.585807441425611
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(610L);
      Range range0 = Range.of(9223372036854775793L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(610L, 1433L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) range_Builder0;
      objectArray0[2] = (Object) consumer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      linkedList0.toArray(objectArray0);
      linkedList0.addFirst(range0);
      range1.isSubRangeOf(range0);
      range1.complement(range1);
      Range.ofLength(9223372036854775793L);
      Long long0 = new Long(9223372036854775807L);
      Object object1 = new Object();
      range1.equals(object1);
      Range range2 = Range.of((-32768L), (-684L));
      // Undeclared exception!
      try { 
        range0.intersection(range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -684 would make range [9223372036854775793 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.632229727923839
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-716L), (-716L));
      Range range0 = Range.ofLength(9223372036854775806L);
      range0.getLength();
      Range range1 = Range.of(9223372036854775806L);
      boolean boolean0 = range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals(9223372036854775806L, long0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      long long1 = range1.getLength();
      //  // Unstable assertion: assertEquals(1L, long1);
      
      Range range2 = range_Builder0.build();
      Object object0 = new Object();
      range1.equals(object0);
      boolean boolean1 = range2.equals(range0);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      Range range3 = Range.of(1L, 406L);
      Range range4 = range1.intersection(range3);
      //  // Unstable assertion: assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.6562345616825698
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.of(3706L, 3706L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372032559808512L);
      Range range1 = Range.of(0L, 0L);
      Range range2 = Range.of(0L, 0L);
      range1.iterator();
      range2.complement(range0);
      Range range3 = Range.of(4294967295L, 9223372032559808512L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.equals((Object) null);
      range2.forEach(consumer0);
      range0.equals(range1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      assertFalse(range_Builder2.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.270588595110636
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.startsBefore(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = Range.of(9223372036854775807L);
      Range.of(9223372032559808512L, 9223372036854772102L);
      range2.iterator();
      // Undeclared exception!
      try { 
        range0.split(9223372032559808512L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -8589934593 would make range [9223372032559808512 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.6077453927268914
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-1501L));
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem.values();
      range1.equals((Object) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Long long0 = new Long((-3194L));
      range1.equals(long0);
      Range.CoordinateSystem.values();
      Range range2 = Range.of((-9223372036854775808L), (-125L));
      Range range3 = range0.intersection(range2);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4547518062163705
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(610L);
      Range range0 = Range.of((-9223372036854775789L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(610L, 1433L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) range_Builder0;
      objectArray0[1] = (Object) consumer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      linkedList0.addFirst(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775789L), 1433L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8234169983973922
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) range0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) linkedList0;
      objectArray0[3] = (Object) linkedList0;
      objectArray0[4] = (Object) linkedList0;
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2709004116210534
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(590L, 4294967295L);
      Range.of(1L, 1188L);
      Range range2 = Range.of(1L);
      range1.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(1464L);
      range2.equals(range1);
      range2.intersection(range2);
      // Undeclared exception!
      try { 
        Range.of(1188L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3035393031766143
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) range0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[3] = (Object) linkedList0;
      Object object0 = new Object();
      range0.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1600L, 2147483647L);
      Object object1 = new Object();
      range1.equals((Object) null);
      Range.CoordinateSystem.values();
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.940142702686837
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = 622L;
      Range range0 = Range.ofLength(1L);
      range0.iterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      long long1 = 4294967295L;
      long long2 = 2403L;
      Range range1 = Range.ofLength(2403L);
      range1.equals(range0);
      Consumer<Object> consumer3 = null;
      // Undeclared exception!
      try { 
        range1.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.586506478301362
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.startsBefore(range1);
      Range range2 = Range.ofLength(9223372036854775807L);
      range2.getLength();
      Range range3 = Range.of((-4873L));
      range2.intersects(range3);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range2.spliterator();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      range1.getLength();
      Range range4 = Range.of(9223372036854775807L);
      range0.startsBefore(range4);
      List<Range> list0 = range4.complement(range0);
      // Undeclared exception!
      try { 
        range3.complementFrom(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4873 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9190235060608334
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.of((-1501L));
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 127L, (-1501L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.5256025210288358
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(610L);
      Range.of(9223372036854775793L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(610L, 1433L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(127L, 127L);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range range1 = Range.ofLength(1433L);
      Long long0 = new Long(2966L);
      Object object0 = new Object();
      Range.CoordinateSystem.values();
      Range range2 = Range.ofLength(610L);
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("number of entries must be <= Integer.MAX_VALUE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.number of entries must be <= Integer.MAX_VALUE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.5630977662632928
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = (-1501L);
      Range range0 = Range.of((-1501L));
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem.values();
      range1.getLength();
      Range range2 = Range.of((-120L));
      range0.startsBefore(range2);
      range1.complement(range2);
      range2.equals((Object) null);
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.071745959910163
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(4294967288L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Range range1 = Range.ofLength(4294967288L);
      Object object0 = new Object();
      range1.equals(object0);
      Consumer<Long> consumer3 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range1.forEach(consumer3);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.8259659679339477
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(3706L, 3706L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(9223372032559808512L, 9223372032559808512L);
      Range range2 = Range.of(4294967295L, 4294967295L);
      Range range3 = Range.of(4294967295L, 4294967295L);
      range2.iterator();
      List<Range> list0 = range3.complement(range1);
      Range range4 = Range.of(4294967295L, 9223372032559808512L);
      range4.equals(range0);
      Range.Comparators.values();
      Range range5 = range_Builder0.build();
      Range.CoordinateSystem.values();
      range3.isSubRangeOf(range1);
      range5.iterator();
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      range5.complementFrom(list0);
      Range.of(4294967295L, 4294967295L);
      Range range6 = Range.ofLength(1979L);
      assertFalse(range6.isEmpty());
      
      Range.CoordinateSystem.values();
      Range.of((-1L), 9223372032559808512L);
      Range range7 = range4.intersection(range1);
      assertFalse(range7.isEmpty());
      
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.6780940448204555
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) range0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) linkedList0;
      objectArray0[3] = (Object) linkedList0;
      objectArray0[4] = (Object) linkedList0;
      linkedList0.toArray(objectArray0);
      linkedList0.addFirst(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of((-1500L), 0L);
      Long long0 = new Long((-1500L));
      range0.equals(list0);
      assertEquals(0, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1500L), 2147483647L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.288964100115001
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      Range range0 = Range.of(226L);
      long long0 = (-1692L);
      Range.of((-1692L), 1433L);
      range0.equals((Object) null);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(32767L, (-1692L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.401243095289945
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 255L, 255L);
      Range range1 = Range.of(609L);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder2 = new Range.Builder();
      long long0 = 127L;
      // Undeclared exception!
      try { 
        Range.of(609L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.7004863914646577
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of((-3338L));
      Range range1 = Range.ofLength(9223372032559808512L);
      List<Range> list0 = range1.complement(range1);
      Range range2 = Range.of(122L, 9223372032559808512L);
      List<Range> list1 = range2.complementFrom(list0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean0 = range2.equals(range1);
      range2.equals(list1);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
      //  // Unstable assertion: assertFalse(list1.contains(range1));
      
      boolean boolean1 = range0.endsBefore(range2);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range range3 = range1.intersection(range0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.619649812232054
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of((-1501L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 127L, 65535L);
      range1.complement(range0);
      range1.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.CoordinateSystem.values();
      Range.of(65535L, 65535L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.788857832195542
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of((-1501L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(1953L);
      range0.intersects(range0);
      List<Range> list1 = range1.complement(range0);
      Range range2 = Range.ofLength(65535L);
      range2.complementFrom(list1);
      Range.Builder range_Builder1 = new Range.Builder(65535L);
      Range range3 = range_Builder1.build();
      Range range4 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Range.CoordinateSystem.values();
      range4.isSubRangeOf(range3);
      range0.isSubRangeOf(range2);
      range1.complementFrom(list0);
      Range.of(891L);
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9564942071794795
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.endsBefore(range1);
      range0.getLength();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer2);
      Range range2 = Range.ofLength(9223372036854775807L);
      range2.equals(range1);
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer3);
      range1.equals("/D~");
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9966356757792143
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(610L);
      long long0 = (-9223372036854775808L);
      Range range0 = Range.of((-9223372036854775808L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.331595945140791
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(276L, 276L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = range_Builder2.expandBegin(276L);
      range_Builder2.contractEnd((-3194L));
      Long long0 = new Long(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals((Object) null);
      Range.Builder range_Builder4 = new Range.Builder((-3181L), (-128L));
      Range.Builder range_Builder5 = new Range.Builder(range0);
      range_Builder3.contractBegin(251L);
      Range.Builder range_Builder6 = range_Builder3.expandBegin((-1462L));
      range0.intersection(range1);
      Range.Builder range_Builder7 = new Range.Builder(range0);
      range_Builder6.build();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.4880833232535693
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = 1244L;
      Range range0 = Range.of(1244L);
      Range range1 = Range.of((-1118L));
      Range.of((-1118L), 32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.addFirst(range0);
      linkedList0.add(range0);
      range1.complementFrom(linkedList1);
      // Undeclared exception!
      try { 
        Range.of(1244L, 788L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.6961077567355907
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(1244L);
      long long0 = 32767L;
      Range range1 = Range.of(32767L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = Range.ofLength(32767L);
      range0.equals("[6Zb4wFxw9@p(");
      Range range3 = Range.of(1244L, 1387L);
      range1.isSubRangeOf(range2);
      List<Range> list0 = range3.complement(range2);
      range1.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      range3.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-349L), 32767L);
      Range range4 = range_Builder1.build();
      range1.isSubRangeOf(range3);
      range4.intersects(range3);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("yOY`aSvIp\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.yOY`aSvIp\"
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.225288114593955
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(622L, 622L);
      Range range0 = Range.ofLength(1475L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Range range1 = Range.ofLength(622L);
      range1.equals(range0);
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer3);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range range2 = range1.intersection(range0);
      boolean boolean1 = range2.equals(range1);
      boolean boolean2 = range0.intersects(range1);
      assertTrue(boolean2 == boolean1);
      assertSame(range1, range2);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.103985363657137
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(610L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(610L, 9223372036854775793L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) consumer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      linkedList0.toArray(objectArray0);
      Range range1 = Range.ofLength(9223372036854775793L);
      Long long0 = new Long(9223372036854775807L);
      Object object1 = new Object();
      range1.equals(object1);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.equals(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.6449421919965124
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-3338L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(9223372032559808512L);
      Range range2 = Range.of(0L, 0L);
      range1.iterator();
      List<Range> list0 = range2.complement(range1);
      range2.complementFrom(list0);
      assertTrue(list0.isEmpty());
      
      Range.CoordinateSystem.values();
      List<Range> list1 = range2.complement(range0);
      assertFalse(list1.contains(range1));
      assertEquals(1, list1.size());
      
      Range.Comparators.values();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range3 = range_Builder2.build();
      Range.CoordinateSystem.values();
      range_Builder1.contractEnd((-641L));
      boolean boolean0 = range3.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.6995750890656427
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(1244L);
      Range range1 = Range.of(32767L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals("[6Zb4wFxw9@p(");
      Range range2 = Range.ofLength(1387L);
      range2.complement(range0);
      range1.isSubRangeOf(range1);
      List<Range> list0 = range2.complement(range0);
      range1.complementFrom(list0);
      Range.Comparators.values();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer1);
      Range range3 = Range.ofLength(0L);
      range3.equals(list0);
      //  // Unstable assertion: assertEquals(2, list0.size());
      
      Range range4 = Range.of(1387L);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range4.forEach(consumer2);
      range2.equals(range3);
      Range range5 = range4.intersection(range0);
      boolean boolean0 = range5.intersects(range2);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range6 = Range.ofLength(32767L);
      Range range7 = range6.intersection(range1);
      //  // Unstable assertion: assertFalse(range7.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1612136685436916
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.of(0L, 255L);
      range0.getEnd();
      Range range1 = Range.of((-38L), 1414L);
      range1.getEnd();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.342833574307242
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(1244L);
      Range range1 = Range.of(1014L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range2 = Range.ofLength(1014L);
      range2.equals(range0);
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer2);
      range1.split(1426L);
      range1.equals(range0);
      range2.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1363L), 1426L);
      Long long0 = new Long(9223372036854775686L);
      Range.ofLength(1014L);
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer3);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775198L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.942076302152282
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(610L);
      Range range0 = Range.of(9223372036854775805L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.equals((Object) null);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.3866202615893464
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 0L, 2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem2);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.678852144155189
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertTrue(list1.contains(range0));
      
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem.values();
      range_Builder0.expandBegin(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3194L));
      Long long0 = new Long((-950L));
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(object1);
      Range range2 = range_Builder0.build();
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      range_Builder1.expandBegin(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range range3 = range0.intersection(range1);
      range0.intersection(range3);
      Range.of((-2147483648L));
      range3.intersection(range0);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      //  // Unstable assertion: assertSame(range3, range1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.6582402157929206
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-1501L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1501L), 65535L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range range2 = Range.of((-1L), 65535L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) list0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      linkedList0.toArray(objectArray0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.addFirst(range2);
      linkedList0.add(range1);
      range2.complementFrom(linkedList1);
      Range.ofLength(652L);
      Long long0 = new Long((-1493L));
      Object object2 = new Object();
      range0.equals(list0);
      // Undeclared exception!
      try { 
        Range.of(714L, (-922L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3458480500702206
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 65535L, 65535L);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.6515855130592754
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(610L);
      Range range0 = Range.of(9223372036854775793L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(610L, 1433L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) range_Builder0;
      objectArray0[2] = (Object) consumer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      linkedList0.toArray(objectArray0);
      linkedList0.addFirst(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range range2 = Range.ofLength(9223372036854775793L);
      Long long0 = new Long(9223372036854775807L);
      Object object1 = new Object();
      range1.equals(object1);
      Range range3 = Range.of((-32768L), (-686L));
      range2.intersection(range3);
      // Undeclared exception!
      try { 
        range1.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.500056612725446
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of((-1501L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1501L), 65535L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range2 = Range.of((-491L), (-491L));
      range2.intersects(range0);
      Range.Builder range_Builder2 = new Range.Builder(255L);
      Range.Builder range_Builder3 = new Range.Builder(range2);
      range1.intersection(range2);
      range0.intersection(range1);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(range_CoordinateSystem0, 255L, (-491L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.5542553048406655
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = 3706L;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(9223372032559808512L);
      Range.CoordinateSystem.values();
      Range.of(0L, 249L);
      Range range1 = Range.of(3706L);
      range0.complement(range1);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_Builder0.build();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, 9223372032559808512L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.595927028044313
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = (-3338L);
      Range.of((-3338L));
      Range range0 = Range.ofLength(9223372032559808512L);
      List<Range> list0 = range0.complement(range0);
      Range range1 = Range.of(122L, 9223372032559808512L);
      range1.complementFrom(list0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long1 = 1442L;
      Range.Builder range_Builder0 = new Range.Builder(1442L, 1448L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(9223372032559808512L, 1443L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.380177717418273
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      range1.complementFrom(list1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.CoordinateSystem.values();
      long long0 = (-3194L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2856L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.6640237034549226
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of((-1501L));
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3194L));
      Long long0 = new Long((-950L));
      range0.isSubRangeOf(range0);
      Range range2 = Range.of((-1501L));
      range2.endsBefore(range0);
      range1.isSubRangeOf(range2);
      range_Builder1.build();
      Range.CoordinateSystem.values();
      range1.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 65535L, (-1501L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.4996422693434877
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of((-1501L));
      Range range1 = Range.ofLength(1462L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer2);
      Range range2 = Range.of(1462L);
      boolean boolean0 = range0.endsBefore(range2);
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer3);
      Range range3 = Range.of(32767L);
      boolean boolean1 = range3.equals(range2);
      assertFalse(boolean1 == boolean0);
      
      Range range4 = range0.intersection(range1);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.060287092608695
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.ofLength(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(9223372032559808512L);
      range_Builder0.build();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(1433L, 783L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.044404464687264
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(622L, 622L);
      long long0 = 1L;
      Range range0 = Range.of(2147483647L);
      range0.split(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 622L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.478146643194946
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of((-3338L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(9223372032559808512L);
      range1.complement(range0);
      range1.complementFrom(linkedList0);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder2 = range_Builder0.contractEnd(0L);
      range_Builder2.expandBegin((-3338L));
      Long long0 = new Long((-1L));
      range0.equals(long0);
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.344953965373091
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(622L, 622L);
      Range range0 = Range.ofLength(1462L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Range range1 = Range.ofLength(622L);
      range1.forEach(consumer0);
      Long long0 = new Long(1409L);
      range1.equals(long0);
      range0.intersection(range1);
      Range range2 = Range.of(622L, 1409L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.582961952231928
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372036854775793L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) range_Builder0;
      objectArray0[2] = (Object) consumer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Range range1 = Range.ofLength(9223372036854775793L);
      Long long0 = new Long(9223372036854775807L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
      
      Range range2 = Range.of((-32768L), (-686L));
      Range range3 = range1.intersection(range2);
      assertTrue(range3.isEmpty());
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.1970314163612734
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.isEmpty();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) range0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[3] = (Object) linkedList0;
      Object object0 = new Object();
      range0.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.complementFrom(linkedList0);
      Range.ofLength(4294967295L);
      Long long0 = new Long(4294967295L);
      Object object1 = new Object();
      range0.equals(objectArray0[3]);
      long long1 = (-32768L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-32768L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.1032372377054718
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of((-950L));
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder(622L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.6080009416149537
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(9223372036854775793L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(610L, 1433L);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) consumer0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) range_Builder0;
      objectArray0[3] = (Object) range_Builder0;
      objectArray0[5] = (Object) consumer0;
      objectArray0[6] = object0;
      objectArray0[7] = (Object) range_Builder0;
      Range range1 = Range.ofLength(1433L);
      Long long0 = new Long(1433L);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Object object1 = new Object();
      range0.equals(objectArray0[7]);
      Range range2 = Range.of((-32768L), 610L);
      Range range3 = range1.intersection(range2);
      Range range4 = range3.intersection(range0);
      assertNotSame(range1, range3);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.4651717343696347
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = (-3338L);
      Range range0 = Range.of((-3338L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range range1 = Range.ofLength(4294967295L);
      range0.equals(range1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      range1.split(4294967295L);
      // Undeclared exception!
      range1.forEach(consumer0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.4950746742206475
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(590L, 4294967295L);
      Range range2 = Range.of(1L, 1188L);
      Range range3 = Range.of(1L);
      Range range4 = Range.of(2250L, 65558L);
      range1.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(1464L);
      range0.isSubRangeOf(range2);
      Range range5 = range4.intersection(range3);
      boolean boolean0 = range3.intersects(range4);
      assertFalse(boolean0);
      
      range5.intersects(range2);
      assertFalse(range3.isEmpty());
      assertTrue(range5.isEmpty());
      assertFalse(range5.equals((Object)range0));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.1791785746709094
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.ofLength(0L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      boolean boolean0 = range2.intersects(range1);
      assertFalse(range2.isEmpty());
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.3597210682330374
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = 610L;
      long long1 = (-9223372036854775789L);
      Range range0 = Range.of((-9223372036854775789L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(610L, 1433L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) consumer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      linkedList0.toArray(objectArray0);
      linkedList0.addFirst(range1);
      linkedList0.add((Range) null);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The first parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.2915844883716994
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.parseRange("[ 1 .. 0 ]/RB", range_CoordinateSystem1);
      range1.asRange();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem2.toString();
      assertEquals("Zero Based", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.401185059879504
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.pollFirst();
      linkedList0.add(range0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) range0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[3] = (Object) linkedList0;
      Object object0 = new Object();
      range0.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.complementFrom(linkedList0);
      Range range1 = Range.ofLength(4294967295L);
      range1.startsBefore(range0);
      long long0 = 9223372036854775807L;
      Long long1 = new Long(4294967295L);
      Object object1 = new Object();
      range0.equals(objectArray0[3]);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf(")'6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.)'6
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.831480240067973
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.shift(0L);
      Range range0 = range_Builder0.build();
      Range.ofLength(0L);
      range0.getLength();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.4033732720007173
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.ofLength(1475L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of((-3700L), 9223372036854772102L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.1318969517045296
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.of(5786L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(9223372036854775807L);
      long long0 = (-716L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 5786L, (-716L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.266512364050755
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-128L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Range range1 = Range.of(0L);
      boolean boolean0 = range1.endsBefore(range0);
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer3);
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1);
      
      boolean boolean2 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.1987754925574587
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(610L);
      long long0 = 9223372036854775793L;
      Range.ofLength(9223372036854775793L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(610L, 1433L);
      range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) range_Builder0;
      objectArray0[2] = (Object) consumer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775793L, (-9223372036854775807L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854775792 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.1318969517045296
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range2 = Range.ofLength(0L);
      range1.getBegin(range_CoordinateSystem0);
      assertSame(range1, range2);
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 2147483650L, 4294967295L);
      assertNotSame(range3, range0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.619218118603298
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(764L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(610L, 1433L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) range_Builder0;
      objectArray0[2] = (Object) consumer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      linkedList0.toArray(objectArray0);
      linkedList0.addFirst(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
      
      Range range2 = Range.ofLength(764L);
      Long long0 = new Long(9223372036854775807L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer1);
      Object object1 = new Object();
      boolean boolean0 = range1.equals(object1);
      assertFalse(boolean0);
      
      Range range3 = Range.of(1433L);
      Range range4 = range2.intersection(range3);
      assertFalse(range2.isEmpty());
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.3597210682330374
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(610L);
      Range.of((-9223372036854775808L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(610L, 1433L);
      Range.Builder range_Builder1 = new Range.Builder((-3568L), 1433L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder2.build();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      assertFalse(range_Builder3.equals((Object)range_Builder2));
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.315323164043424
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(622L, 622L);
      Range range0 = Range.ofLength(1462L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Range range1 = Range.ofLength(622L);
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer3);
      range1.equals(range0);
      Range range2 = range1.intersection(range0);
      range2.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.of(1462L, 622L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.9504258637418848
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = 610L;
      Range.Builder range_Builder0 = new Range.Builder(610L);
      Range range0 = Range.of((-9223372036854775808L));
      range0.getBegin();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long1 = 1433L;
      // Undeclared exception!
      try { 
        Range.ofLength((-268L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.3726476828923992
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(622L, 622L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(622L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(1475L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.262448055261479
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getLength();
      Range range1 = Range.of(2147483646L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.endsBefore(range0);
      range0.toString(range_CoordinateSystem1);
      long long1 = 4294967295L;
      Range.parseRange("[ 0 .. 0 ]/0B");
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.675717218813239
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(1244L);
      Range range1 = Range.of(1014L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals("[6Zb4wFxw9@p(");
      Range range2 = Range.ofLength(1387L);
      range2.complement(range0);
      boolean boolean0 = range1.isSubRangeOf(range1);
      List<Range> list0 = range2.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(3, list1.size());
      
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem0);
      Long long0 = new Long(1387L);
      String string0 = range0.toString();
      assertEquals("[ 1244 .. 1244 ]/0B", string0);
      
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(3447L);
      range2.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.parseRange("[ 1244 .. 1244 ]/0B", range_CoordinateSystem1);
      Range range4 = range3.intersection(range0);
      assertTrue(range4.isEmpty());
      
      range3.intersects(range2);
      boolean boolean2 = range0.intersects(range3);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.9668267598925535
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3194L));
      Long long0 = new Long((-950L));
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      assertFalse(range_Builder3.equals((Object)range_Builder2));
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.491952620023213
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.startsBefore(range1);
      Range range2 = Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(2579L, 65558L);
      Range.of(65558L, 9223372036854775807L);
      Range.of((-457L));
      Range range3 = Range.of(65558L, 9223372036854775807L);
      range2.complementFrom(linkedList0);
      Range.of(2579L);
      Long long0 = new Long(4294967295L);
      Object object0 = new Object();
      Range.CoordinateSystem.values();
      range2.intersection(range3);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("}~Wm(6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.}~Wm(6
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.0890552998538734
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(1475L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Range.ofLength(622L);
      Range.ofLength(1475L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.0814159903238956
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(622L);
      long long0 = 9223372036854775793L;
      Range range0 = Range.of(9223372036854775793L, 9223372036854775793L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(622L, 1433L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) range_Builder0;
      objectArray0[2] = (Object) consumer0;
      Object object0 = new Object();
      long long1 = 635L;
      // Undeclared exception!
      try { 
        range0.split((-4130L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.8152049266199466
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = 622L;
      long long1 = 1L;
      Range range0 = Range.ofLength(1L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.68447109317971
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of((-3338L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(9223372032559808512L);
      Range range2 = Range.of((-10L), (-10L));
      range2.complement(range1);
      Range range3 = Range.of(122L, 9223372032559808512L);
      range2.startsBefore(range0);
      range3.complement(range2);
      boolean boolean0 = range2.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      List<Range> list0 = range3.complement(range1);
      assertEquals(1, list0.size());
      
      range_Builder0.contractEnd((-10L));
      Long long0 = new Long(122L);
      range_Builder0.build();
      range3.isSubRangeOf(range1);
      Range range4 = range_Builder0.build();
      Range.CoordinateSystem.values();
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      List<Range> list1 = range3.complement(range0);
      assertFalse(list1.equals((Object)list0));
      
      Range range5 = range1.intersection(range4);
      assertFalse(range5.isEmpty());
      assertSame(range4, range5);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.987813724355642
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.5938731482417525
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3194L));
      range_Builder1.copy();
      Long long0 = new Long((-950L));
      Range range1 = range_Builder1.build();
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range range2 = Range.of((-3194L), 3971L);
      Range range3 = range2.intersection(range0);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.5234574372311056
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) range0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) linkedList0;
      objectArray0[3] = (Object) linkedList0;
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) linkedList0;
      linkedList0.toArray(objectArray0);
      linkedList0.addFirst(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long0 = new Long((-1732L));
      range0.split(32767L);
      Range.Builder range_Builder0 = new Range.Builder((-3429L), 32766L);
      Range.Builder range_Builder1 = new Range.Builder((-3162L), 4294967295L);
      range_Builder1.expandEnd(2946L);
      range_Builder1.expandBegin((-1875L));
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.6494728329777226
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-1494L));
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-1494L));
      Range.Builder range_Builder2 = range_Builder0.contractEnd((-3194L));
      Long long0 = new Long((-950L));
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(object1);
      Range.Builder range_Builder3 = range_Builder2.expandBegin((-1494L));
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder3.build();
      range1.asRange();
      range_Builder4.expandEnd(0L);
      Range.Builder range_Builder5 = range_Builder0.contractEnd((-3194L));
      assertSame(range_Builder5, range_Builder1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.6095227499814784
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = (-1501L);
      Range range0 = Range.of((-1501L));
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3194L));
      range1.complementFrom(list1);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 4294967295L;
      Range range3 = Range.of(range_CoordinateSystem0, (-1501L), 4294967295L);
      range3.intersection(range2);
      range_Builder1.expandBegin(255L);
      Range.Builder range_Builder3 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 917L, (-608L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.2309413652360255
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(610L);
      range_Builder0.expandBegin(610L);
      Range range0 = Range.of(610L);
      range0.getEnd();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(255L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      assertFalse(range_Builder2.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.183922421665312
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(0L, 255L);
      assertFalse(range1.isEmpty());
      
      long long0 = range0.getEnd();
      assertEquals((-1L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.3343072668301064
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.of((-9L), (-9L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-9L), 2147483647L);
      Range.ofLength(2147483647L);
      long long0 = new Long(2147483647L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.184734928782018
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(619L, 4294967295L);
      Range.of((-3568L), 65558L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-151L), (-9223372036854774180L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.349308175114309
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) range0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[3] = (Object) linkedList0;
      Object object0 = new Object();
      range0.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.complementFrom(linkedList0);
      Range.ofLength(4294967295L);
      Long long0 = new Long(4294967295L);
      Object object1 = new Object();
      range0.equals(objectArray0[3]);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-32768L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.372264049063421
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = 2674L;
      Range range0 = Range.of(2674L);
      long long1 = 65535L;
      Range range1 = Range.of((-364L));
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.5839271461491236
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range range1 = Range.of(range_CoordinateSystem0, 871L, 871L);
      range1.iterator();
      range1.complement(range0);
      range1.iterator();
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = range1.intersection(range0);
      range1.getBegin(range_CoordinateSystem1);
      range_CoordinateSystem1.getAbbreviatedName();
      range1.asRange();
      range0.isSubRangeOf(range1);
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("4!o,5bw[GQ;zSa", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 4!o,5bw[GQ;zSa into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.463211045672898
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = (-1501L);
      Range range0 = Range.of((-1501L));
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.CoordinateSystem.values();
      range_Builder0.contractEnd((-3194L));
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) range_Builder0;
      linkedList0.toArray(objectArray0);
      linkedList0.addFirst(range0);
      linkedList0.add(range0);
      Collection<Range> collection0 = null;
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.4580629275065897
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-128L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Range range1 = Range.of(0L);
      range1.endsBefore(range0);
      long long0 = range1.getBegin();
      assertEquals(0L, long0);
      
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer3);
      boolean boolean0 = range0.equals(range1);
      Range range2 = range1.intersection(range0);
      Range range3 = range1.intersection(range2);
      boolean boolean1 = range3.intersects(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(range3.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.939099261288858
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.getBegin();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long0 = 9223372032559808512L;
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      range0.forEach(consumer0);
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Consumer<Long> consumer3 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer3);
      range0.equals(range0);
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.3667294294083123
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(622L, 622L);
      long long0 = 1462L;
      long long1 = (-1502L);
      Range range0 = Range.of((-1502L), 2403L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      linkedList0.toArray(objectArray0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.addFirst(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.of(2403L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.5633519968853045
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-1501L));
      Range range1 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(65558L, 65558L);
      Range range2 = Range.of(1L, 0L);
      Range.of(1L);
      Range range3 = Range.of(65558L, 4294967295L);
      linkedList0.add(range3);
      range0.complementFrom(linkedList0);
      Range.ofLength(1L);
      Long long0 = new Long((-1501L));
      Object object0 = new Object();
      Range.CoordinateSystem.values();
      range1.intersection(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("can not remove from Range");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.can not remove from Range
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.3330012013764834
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(622L, 622L);
      Range range0 = Range.ofLength(1462L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Range range1 = Range.ofLength(622L);
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer3);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range range2 = range1.intersection(range0);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
      assertFalse(range0.equals((Object)range1));
      
      Range range3 = Range.of(466L, 622L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.302030793907853
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(622L, 622L);
      Range range0 = Range.ofLength(1462L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Range range1 = Range.ofLength(622L);
      assertNotSame(range1, range0);
      
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer3);
      boolean boolean0 = range0.isSubRangeOf(range1);
      Range.of(622L, 622L);
      range1.intersects(range0);
      boolean boolean1 = range1.intersects(range0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.460821602115071
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.iterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(622L, 65558L);
      range0.intersects(range1);
      Range range2 = Range.of(622L);
      boolean boolean0 = range2.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      List<Range> list0 = range0.complement(range0);
      range1.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder(3707L);
      Range range3 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, 1L, 2054L);
      Range.CoordinateSystem.values();
      range2.isSubRangeOf(range0);
      range2.intersects(range1);
      range0.complementFrom(list0);
      assertEquals(0, list0.size());
      
      Range range5 = Range.of(3707L);
      range3.isSubRangeOf(range5);
      range1.intersection(range4);
      assertNotSame(range4, range3);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range6 = Range.of(range_CoordinateSystem1, 2922L, 3707L);
      boolean boolean1 = range6.intersects(range1);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.363084257067551
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range.of(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.5214226042595054
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3194L));
      range_Builder1.copy();
      Long long0 = new Long((-950L));
      Range range1 = range_Builder1.build();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range3 = range1.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.complement(range3);
      long long1 = range0.getEnd(range_CoordinateSystem1);
      assertEquals((-1L), long1);
      
      List<Range> list0 = range0.complement(range3);
      assertFalse(list0.contains(range1));
      assertFalse(list0.isEmpty());
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.936427216825098
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem.values();
      range_Builder0.contractEnd((-3194L));
      Object object0 = new Object();
      Range.Builder range_Builder1 = new Range.Builder(1353L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.CoordinateSystem.values();
      range0.intersection(range0);
      range0.intersection(range0);
      Range range1 = range0.asRange();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.2468287385897425
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 1678L);
      Range range0 = Range.ofLength(1678L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.8716496251359276
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.ofLength(5786L);
      Range.Builder range_Builder0 = new Range.Builder(5786L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(5786L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.7097029932964114
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1123L, 1123L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.576873000869291
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = (-1501L);
      Range range0 = Range.of((-1501L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      Range.ofLength(127L);
      range0.intersection(range0);
      range0.spliterator();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = (-1123L);
      long long1 = (-1L);
      Range.Builder range_Builder0 = new Range.Builder((-1123L), (-1L));
      range_Builder0.shift((-1L));
      long long2 = 2132L;
      range_Builder0.expandBegin(2132L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("r-ga?bv~WtM]Ygd", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse r-ga?bv~WtM]Ygd into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.2556191453982968
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1400L), 65535L);
      range_Builder0.build();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.contractEnd((-1400L));
      assertNotSame(range_Builder0, range_Builder2);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.044901827613184
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.ofLength(5786L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 5786L, 5786L);
      long long0 = range0.getLength();
      assertEquals(5786L, long0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.9669434861893547
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 344L, 1454L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(344L, 1454L);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.212742032549861
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.ofLength(1475L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(1475L);
      range_Builder1.build();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder2 = new Range.Builder(1387L, 1387L);
      assertFalse(range_Builder2.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.5949219583787517
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-3338L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range range1 = Range.ofLength(4294967295L);
      range0.equals(range1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.complement(range0);
      range0.forEach(consumer2);
      range1.equals(range0);
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem.values();
      range1.toString();
      // Undeclared exception!
      try { 
        Range.of(33L, 11L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.0890552998538734
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.ofLength(1475L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2935L, 1475L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.474803645239993
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-128L));
      long long0 = (-1612L);
      Range range1 = Range.of((-1612L), (-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) range1;
      objectArray0[2] = (Object) range0;
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) null);
      linkedList0.retainAll(linkedList1);
      objectArray0[3] = object0;
      objectArray0[4] = (Object) range0;
      objectArray0[5] = (Object) range0;
      objectArray0[6] = (Object) range0;
      linkedList0.toArray(objectArray0);
      linkedList0.addFirst(range1);
      linkedList0.add(range1);
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.2465298222286805
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1123L), (-32L));
      Range.Builder range_Builder1 = range_Builder0.shift((-32L));
      range_Builder0.contractEnd((-1L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.copy();
      Long long0 = new Long(4007L);
      range_Builder0.build();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), 567L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-1123L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.3527464143487307
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = (-1501L);
      Range range0 = Range.of((-1501L));
      long long1 = 65535L;
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.9668267598925535
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.of(1997L, 1997L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 1997L, 1997L);
      // Undeclared exception!
      try { 
        Range.of(123L, (-1522L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = (-1501L);
      Range range0 = Range.of((-1501L));
      String string0 = null;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.5690325466605892
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-128L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Range range1 = Range.of(0L);
      range1.endsBefore(range0);
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer3);
      Range range2 = Range.of(0L, (-1L));
      range1.intersection(range2);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.954002719889012
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.of((-9223372036854775789L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Long long0 = new Long((-950L));
      Range.of((-3194L));
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.9761388013384353
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1158L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.580175408937283
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of(1244L);
      Range range1 = Range.of(32767L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals("[6Zb4wFxw9@p(");
      Range range2 = Range.ofLength(1387L);
      range2.complement(range0);
      range1.isSubRangeOf(range1);
      List<Range> list0 = range2.complement(range0);
      range1.complementFrom(list0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem0);
      Long long0 = new Long(1387L);
      range0.toString();
      range0.equals(range1);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.Builder range_Builder0 = new Range.Builder(2455L);
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.4122448595968033
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 2147483650L);
      Range range0 = Range.ofLength(2147483650L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 0L, 0L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.2069294300187585
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.ofLength(9223372036854775807L);
      Range.ofLength(5786L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      long long1 = 2930L;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(2930L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.6585907520141805
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-3338L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(9223372032559808512L);
      Range range2 = Range.of((-10L), (-10L));
      range2.complement(range1);
      Range range3 = Range.of(122L, 9223372032559808512L);
      range3.complement(range2);
      range2.isSubRangeOf(range1);
      range3.complement(range1);
      range_Builder0.contractEnd((-10L));
      Long long0 = new Long(122L);
      range_Builder0.build();
      range3.isSubRangeOf(range1);
      Range.of(122L, 1469L);
      Range range4 = range_Builder0.build();
      Range.CoordinateSystem.values();
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      range3.complement(range0);
      range1.intersection(range4);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.6150164636135966
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of((-1501L));
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem.values();
      long long0 = (-3194L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3194L));
      Long long1 = new Long((-950L));
      range0.isSubRangeOf(range0);
      Range range2 = Range.of((-1501L));
      range1.isSubRangeOf(range2);
      range_Builder1.build();
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(65535L, (-1597L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.0654032980858816
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(610L);
      Range.of(9223372036854775805L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(1158L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      assertFalse(range_Builder2.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = new Object();
      Range.of((-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, 65534L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.195085608204764
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.of(32767L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-362L), 1244L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.755549790664179
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.ofLength(4753L);
      assertFalse(range0.isEmpty());
  }
}
