/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 05:33:27 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.Mode;
import freemind.modes.filemode.FileController;
import freemind.modes.mindmapmode.actions.NodeHookAction;
import freemind.modes.schememode.SchemeMode;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeListener;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.PriorityBlockingQueue;
import javax.help.BackAction;
import javax.swing.DebugGraphics;
import javax.swing.ImageIcon;
import javax.swing.InputVerifier;
import javax.swing.JButton;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.SwingConstants;
import javax.swing.TransferHandler;
import javax.swing.event.RowSorterEvent;
import javax.swing.plaf.basic.BasicOptionPaneUI;
import javax.swing.plaf.basic.BasicRootPaneUI;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeCellEditor;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.CompositeGraphicsNode;
import org.apache.batik.gvt.RootGraphicsNode;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.fop.pdf.PDFInfo;
import org.apache.xml.serializer.ToTextSAXHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.182465705741514
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      GraphicContext graphicContext0 = new GraphicContext();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setMonth(90);
      JButton jButton0 = new JButton("14");
      jDayChooser0.setFocus();
      MockDate mockDate0 = new MockDate();
      jDayChooser1.setMaxSelectableDate(mockDate0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3+C{46L=>MNqX?2EBV");
      jDayChooser0.setDay(90);
      jDayChooser1.initDecorations();
      jDayChooser0.setMonth(1480);
      jDayChooser0.setMonth(337);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2649736404330465
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getActionMap();
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      JOptionPane jOptionPane0 = new JOptionPane();
      jOptionPane0.getHierarchyListeners();
      JOptionPane jOptionPane1 = new JOptionPane();
      jOptionPane0.getInitialValue();
      BasicOptionPaneUI basicOptionPaneUI1 = new BasicOptionPaneUI();
      basicOptionPaneUI1.selectInitialValue(jOptionPane1);
      Dimension dimension0 = basicOptionPaneUI0.getMinimumOptionPaneSize();
      jDayChooser0.setSize(dimension0);
      Color color0 = Color.cyan;
      jDayChooser0.setMonth(90);
      JButton jButton0 = new JButton("RU\"r\"AD|FMs");
      SchemeMode schemeMode0 = new SchemeMode();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.setMaxDayCharacters(10018);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1707, 10018, 16387, 35, 'a');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2168993875779086
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      GraphicContext graphicContext0 = new GraphicContext();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wrb");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.getHierarchyListeners();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 24, (-1L), 392, 34, '#');
      InputEvent.getModifiersExText((-108));
      jDayChooser1.updateUI();
      KeyEvent.getKeyText(48);
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2772298941063234
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      JOptionPane jOptionPane0 = new JOptionPane();
      jOptionPane0.getHierarchyListeners();
      JOptionPane jOptionPane1 = new JOptionPane();
      jOptionPane0.getInitialValue();
      BasicOptionPaneUI basicOptionPaneUI1 = new BasicOptionPaneUI();
      basicOptionPaneUI1.selectInitialValue(jOptionPane1);
      Dimension dimension0 = basicOptionPaneUI0.getMinimumOptionPaneSize();
      jDayChooser0.setSize(dimension0);
      Color color0 = Color.cyan;
      jDayChooser0.setMonth(261);
      JButton jButton0 = new JButton("RU\"r\"AD|FMs");
      jDayChooser0.setFocus();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)119;
      MockDate mockDate0 = new MockDate(4001L);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      byteArray0[6] = (byte) (-99);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.initDecorations();
      Locale locale0 = jDayChooser0.getLocale();
      jDayChooser0.setLocale(locale0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.208313128881091
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "E>I+K!=+O|$P7I+z";
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 0L, 41, 39, 'z');
      keyEvent0.setSource("E>I+K!=+O|$P7I+z");
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(15, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2307969867806654
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getWeeksInWeekYear();
      mockGregorianCalendar0.getCalendarType();
      jDayChooser0.setMaxDayCharacters(52);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 52, 41, 27, 39, 'l');
      keyEvent0.setSource(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2055099842350803
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicRootPaneUI basicRootPaneUI0 = new BasicRootPaneUI();
      jDayChooser0.addPropertyChangeListener("2", (PropertyChangeListener) basicRootPaneUI0);
      ComponentOrientation componentOrientation0 = ComponentOrientation.RIGHT_TO_LEFT;
      Locale locale0 = Locale.CANADA_FRENCH;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ComponentOrientation.getOrientation(locale0);
      jDayChooser0.applyComponentOrientation(componentOrientation0);
      jDayChooser0.setFocus();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      
      jDayChooser0.getMinSelectableDate();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setMonth(2160);
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.240486093536656
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      JOptionPane jOptionPane0 = new JOptionPane();
      jOptionPane0.getHierarchyListeners();
      JOptionPane jOptionPane1 = new JOptionPane();
      jOptionPane0.getInitialValue();
      BasicOptionPaneUI basicOptionPaneUI1 = new BasicOptionPaneUI();
      basicOptionPaneUI1.containsCustomComponents(jOptionPane1);
      basicOptionPaneUI1.getAccessibleChildrenCount(jDayChooser0);
      basicOptionPaneUI1.selectInitialValue(jOptionPane1);
      Dimension dimension0 = basicOptionPaneUI0.getMinimumOptionPaneSize();
      jDayChooser0.setSize(dimension0);
      Color color0 = Color.cyan;
      jDayChooser0.setMonth(261);
      JButton jButton0 = new JButton("RU\"r\"AD|FMs");
      jDayChooser0.setFocus();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)119;
      KeyEvent keyEvent0 = new KeyEvent(jOptionPane1, (byte) (-29), (byte)32, 261, (byte)124, 'x');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawWeeks();
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.133766650651363
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(914);
      Color color0 = Color.getColor("day", 28);
      jDayChooser0.setForeground(color0);
      System.setCurrentTimeMillis(941L);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2404282305331034
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "E>I+a!=+O|$P7]+z";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 41, 894L, 1705, 1705, 'a');
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke(41, 1705);
      BackAction backAction0 = new BackAction(aWTKeyStroke0);
      jDayChooser0.addMouseListener(backAction0);
      keyEvent0.setSource("b U+z#8s8fas6gTe;");
      jDayChooser0.keyPressed(keyEvent0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(16, 1705, 7);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2308802695494605
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = SwingConstants.TRAILING;
      mockGregorianCalendar0.getCalendarType();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL;
      Integer integer1 = StrokingTextPainter.ADJUST_SPACING;
      Integer.getInteger("j", integer1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setSelectableDateRange(date0, date0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      Integer integer2 = StrokingTextPainter.ADJUST_ALL;
      Integer integer3 = JLayeredPane.POPUP_LAYER;
      Integer.getInteger((String) null, integer3);
      mockGregorianCalendar0.before("T/{qs");
      Date date1 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setMinSelectableDate(date1);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1345967642426418
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      boolean boolean0 = jDayChooser1.isDecorationBackgroundVisible();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1601156442325116
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getWeeksInWeekYear();
      mockGregorianCalendar0.getWeeksInWeekYear();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL;
      Integer.getInteger("T/{qs", integer0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArray0[4] = (byte) (-120);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getGraphicsConfiguration();
      jDayChooser1.getAlignmentY();
      jDayChooser1.getHierarchyListeners();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.grabFocus();
      jDayChooser2.getDaysInMonth();
      jDayChooser2.setMaxDayCharacters((byte)0);
      jDayChooser0.setDayBordersVisible(true);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.196412172806106
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      GraphicContext graphicContext0 = new GraphicContext();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Color color0 = Color.cyan;
      jDayChooser0.setMonth(44);
      JButton jButton0 = new JButton("RU\"r\"AD|FMs");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)119;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      JButton jButton1 = new JButton(imageIcon0);
      jDayChooser0.getVetoableChangeListeners();
      jDayChooser0.setMaxDayCharacters((byte)124);
      ActionEvent actionEvent0 = new ActionEvent(jButton1, (byte)119, "9");
      ActionEvent actionEvent1 = new ActionEvent(actionEvent0, (byte) (-52), "yeKuJTw,?");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.event.ActionEvent cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.170884464103756
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      GraphicContext graphicContext0 = new GraphicContext();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.getHierarchyListeners();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1");
      jDayChooser1.setDay(24);
      jDayChooser1.isDecorationBordersVisible();
      assertEquals(24, jDayChooser1.getDay());
      
      jDayChooser0.initDecorations();
      jDayChooser0.getSundayForeground();
      jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2445484159231595
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      JOptionPane jOptionPane0 = new JOptionPane();
      jOptionPane0.getHierarchyListeners();
      JOptionPane jOptionPane1 = new JOptionPane();
      jOptionPane1.firePropertyChange("day", (short)728, (short)728);
      jOptionPane0.getInitialValue();
      BasicOptionPaneUI basicOptionPaneUI1 = new BasicOptionPaneUI();
      basicOptionPaneUI1.selectInitialValue(jOptionPane1);
      Dimension dimension0 = basicOptionPaneUI0.getMinimumOptionPaneSize();
      jDayChooser0.setSize(dimension0);
      Color color0 = Color.cyan;
      jDayChooser0.setMonth(261);
      JButton jButton0 = new JButton("RU\"r\"AD|FMs");
      jDayChooser0.setFocus();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)119;
      MockDate mockDate0 = new MockDate(4001L);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      byteArray0[6] = (byte) (-99);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setDayBordersVisible(true);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(4, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.221740079821127
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      jDayChooser0.getTransferHandler();
      jDayChooser0.setYear(53);
      jDayChooser0.setMaxDayCharacters((-693));
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, int0);
      
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.addListeners(19);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      JOptionPane jOptionPane0 = new JOptionPane();
      jOptionPane0.getInitialValue();
      basicOptionPaneUI0.contains(jOptionPane0, 49, 49);
      basicOptionPaneUI0.containsCustomComponents(jOptionPane0);
      basicOptionPaneUI0.selectInitialValue(jOptionPane0);
      basicOptionPaneUI0.getMinimumOptionPaneSize();
      Color color0 = Color.cyan;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      PriorityBlockingQueue<Locale> priorityBlockingQueue0 = new PriorityBlockingQueue<Locale>();
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jOptionPane0, (-4), (-4), 48, 48, '?');
      jDayChooser0.keyTyped(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1700300170400846
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.removeNotify();
      Color color0 = Color.BLACK;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.decorationBackgroundColor = color0;
      Locale locale0 = Locale.ROOT;
      locale0.clone();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setWeekdayForeground(color0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "29";
      stringArray0[1] = "29";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2030750666334824
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      GraphicContext graphicContext0 = new GraphicContext();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getHierarchyListeners();
      TransferHandler transferHandler0 = new TransferHandler("zT");
      jDayChooser1.setTransferHandler(transferHandler0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-&mnK36");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser1.isDecorationBordersVisible();
      jDayChooser0.initDecorations();
      Locale locale0 = Locale.KOREAN;
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(46);
      CompositeGraphicsNode compositeGraphicsNode0 = new CompositeGraphicsNode();
      Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) compositeGraphicsNode0);
      jDayChooser1.setLocale(locale0);
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2012080540996264
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getWeeksInWeekYear();
      mockGregorianCalendar0.getCalendarType();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL;
      Integer integer1 = StrokingTextPainter.ADJUST_SPACING;
      Integer.getInteger("j", integer1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getGraphicsConfiguration();
      jDayChooser1.getAlignmentY();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.getHierarchyListeners();
      JDayChooser jDayChooser3 = new JDayChooser(true);
      jDayChooser3.getDaysInMonth();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser3, (-865), 52, (-865), 891, 'u');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser1.drawWeeks();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.160947366049311
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      int int0 = 6155;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 6155);
      focusEvent0.paramString();
      focusEvent0.setSource("onevent");
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 806.7455F;
      floatArray0[1] = 806.7455F;
      floatArray0[2] = (float) 6155;
      floatArray0[3] = (float) 6155;
      floatArray0[4] = (float) 6155;
      floatArray0[5] = (-269.4173F);
      floatArray0[6] = 806.7455F;
      floatArray0[7] = (float) 6155;
      floatArray0[8] = 806.7455F;
      systemColor0.getRGBColorComponents(floatArray0);
      jDayChooser0.setSundayForeground(systemColor0);
      int int1 = 1883;
      int int2 = 2279;
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(2279);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2033311349183586
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4^E`wS=NQ!h");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getHierarchyListeners();
      TransferHandler transferHandler0 = new TransferHandler("zp\"/R9f\"rzr");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-&mnK36");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      boolean boolean0 = jDayChooser1.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.initDecorations();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(46);
      CompositeGraphicsNode compositeGraphicsNode0 = new CompositeGraphicsNode();
      Locale.filterTags((List<Locale.LanguageRange>) compositeGraphicsNode0, (Collection<String>) compositeGraphicsNode0);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser1.setEnabled(false);
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.4891157777112274
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getWeeksInWeekYear();
      mockGregorianCalendar0.getCalendarType();
      mockGregorianCalendar0.getGregorianChange();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL;
      Integer.getInteger("T/{qs", integer0);
      mockGregorianCalendar0.before(integer0);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      SchemeMode schemeMode0 = new SchemeMode();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.getTemporaryCalendar();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.init();
      JYearChooser jYearChooser1 = new JYearChooser();
      jYearChooser1.getComponents();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setYear(952);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setDay(777);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.272719822928451
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      JOptionPane jOptionPane0 = new JOptionPane();
      jOptionPane0.getHierarchyListeners();
      basicOptionPaneUI0.getBaselineResizeBehavior(jOptionPane0);
      JOptionPane jOptionPane1 = new JOptionPane();
      jOptionPane1.getRegisteredKeyStrokes();
      jOptionPane0.getInitialValue();
      BasicOptionPaneUI basicOptionPaneUI1 = new BasicOptionPaneUI();
      basicOptionPaneUI1.selectInitialValue(jOptionPane1);
      basicOptionPaneUI0.getMinimumOptionPaneSize();
      Color color0 = Color.cyan;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setEnabled(false);
      KeyEvent keyEvent0 = new KeyEvent(jOptionPane0, (-134), (-134), (-1310), (-1310), '<');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDayBordersVisible(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.196255230930651
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-45);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)109;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte) (-73);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getGraphicsConfiguration();
      jDayChooser0.getComponentPopupMenu();
      jDayChooser0.getAlignmentY();
      jDayChooser0.getHierarchyListeners();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMaxDayCharacters((byte)71);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.isDayBordersVisible();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1598187038266783
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.minSelectableDate;
      JDayChooser jDayChooser1 = new JDayChooser();
      Date date1 = jDayChooser1.setMaxSelectableDate(date0);
      assertSame(date1, date0);
      
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser1.setMinSelectableDate((Date) null);
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "E>I+a!=+O|$P7]+z";
      stringArray0[1] = "";
      stringArray0[2] = "org.openstreetmap.gui.jmapviewer.MemoryTileCache";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "8AJf";
      stringArray0[7] = "|";
      stringArray0[8] = "BcSVEyj)rdX_s{(WHol";
      JDayChooser jDayChooser0 = new JDayChooser();
      JButton[] jButtonArray0 = new JButton[0];
      jDayChooser0.days = jButtonArray0;
      // Undeclared exception!
      try { 
        jDayChooser0.setDayBordersVisible(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.119396863952878
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      GraphicContext graphicContext0 = new GraphicContext();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.getHierarchyListeners();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">>\n");
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.getHierarchyListeners();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "11");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setDay(36);
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(28, jDayChooser0.getDay());
      
      jDayChooser2.initDecorations();
      jDayChooser1.getWeekdayForeground();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      ToTextSAXHandler toTextSAXHandler0 = new ToTextSAXHandler((ContentHandler) null, "day");
      toTextSAXHandler0.getOutputFormat();
      HsqlProperties hsqlProperties0 = new HsqlProperties((Properties) null);
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.persist.HsqlProperties", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2513598347179564
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      JOptionPane jOptionPane0 = new JOptionPane();
      basicOptionPaneUI0.containsCustomComponents(jOptionPane0);
      jOptionPane0.getHierarchyListeners();
      JOptionPane jOptionPane1 = new JOptionPane();
      jOptionPane0.getInitialValue();
      BasicOptionPaneUI basicOptionPaneUI1 = new BasicOptionPaneUI();
      basicOptionPaneUI1.selectInitialValue(jOptionPane1);
      Dimension dimension0 = basicOptionPaneUI0.getMinimumOptionPaneSize();
      jDayChooser0.setSize(dimension0);
      Color color0 = Color.cyan;
      jDayChooser0.setMonth(261);
      JButton jButton0 = new JButton("U\"r\"AD|FMs");
      jDayChooser0.setFocus();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-29);
      jDayChooser0.setSize(dimension0);
      DebugGraphics.flashColor();
      jDayChooser0.setMonth((byte) (-29));
      jDayChooser0.getSelectedDay();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay((-163));
      jDayChooser0.getLocale();
      jDayChooser1.setDay(261);
      int int0 = jDayChooser1.getDay();
      assertEquals(28, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 8192, 0, '!');
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2790660650286343
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-876));
      JTree jTree0 = new JTree();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Font font0 = styleContext0.getFont("Windows", 10, 16);
      defaultTreeCellEditor0.setFont(font0);
      defaultTreeCellEditor0.stopCellEditing();
      DefaultTreeCellEditor defaultTreeCellEditor1 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0, defaultTreeCellEditor0);
      jTree0.getCellEditor();
      DefaultTreeCellEditor defaultTreeCellEditor2 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0, (TreeCellEditor) null);
      defaultTreeCellEditor2.getFont();
      jDayChooser0.setFont((Font) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JInternalFrame jInternalFrame0 = new JInternalFrame("E>I+K!=+O|$P7I+z");
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 32, 0L, 2002, 1442, 'j');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.170005734881401
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getHeight();
      Class<NodeHookAction> class0 = NodeHookAction.class;
      jDayChooser0.getListeners(class0);
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      metalComboBoxEditor0.addActionListener(jDayChooser0);
      jDayChooser0.addFocusListener(metalComboBoxEditor0);
      Dimension dimension0 = jDayChooser0.getPreferredSize();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.getDayPanel();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isContentAreaFilled();
      BackAction backAction0 = new BackAction(dimension0);
      jDayChooser_DecoratorButton0.addMouseListener(backAction0);
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORT_ORDER_CHANGED;
      int int0 = (-623);
      // Undeclared exception!
      try { 
        RowSorterEvent.Type.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant javax.swing.event.RowSorterEvent.Type.day
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3411777530089086
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "E>I+a!=+O|$P7]+z";
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL;
      Integer integer1 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_ALL;
      Integer.getInteger((String) null, integer1);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      SchemeMode schemeMode0 = new SchemeMode();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.add(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener2);
      AWTEventMulticaster.add(hierarchyBoundsListener1, hierarchyBoundsListener2);
      jDayChooser0.setWeekOfYearVisible(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(164, color0.getBlue());
      
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.init();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setYear(29);
      jDayChooser0.getDecorationBackgroundColor();
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.drawDays();
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.151027626853596
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL;
      Integer integer1 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_ALL;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      SchemeMode schemeMode0 = new SchemeMode();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.setMaxDayCharacters((-4289));
      jDayChooser0.setDay(27);
      assertEquals(27, jDayChooser0.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2083377530546424
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "E>I+K!=+O|$P7I+z";
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL;
      Integer integer1 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_ALL;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JInternalFrame jInternalFrame0 = new JInternalFrame("E>I+K!=+O|$P7I+z");
      KeyEvent keyEvent0 = new KeyEvent(jInternalFrame0, 32, (-1L), 33, (-579), 'j');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.297787860728799
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getWeeksInWeekYear();
      mockGregorianCalendar0.getCalendarType();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setSelectableDateRange(date0, date0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL;
      Integer.getInteger("T/{qs", integer0);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.repaint(866, (-2913), 866, (-2913));
      jDayChooser0.setMonthChooser(jMonthChooser0);
      SchemeMode schemeMode0 = new SchemeMode();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "|";
      stringArray0[1] = "";
      stringArray0[2] = "BcSVEyj)rdX_s{(WHol";
      stringArray0[3] = "gregory";
      stringArray0[4] = "|";
      stringArray0[5] = "T/{qs";
      stringArray0[6] = "^XnU,";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.114399273529393
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "E>I+a!=+O|$P7]+z";
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL;
      RootGraphicsNode rootGraphicsNode0 = new RootGraphicsNode();
      Locale.lookup(rootGraphicsNode0, rootGraphicsNode0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      RootGraphicsNode rootGraphicsNode1 = rootGraphicsNode0.getRoot();
      Locale.lookup(rootGraphicsNode1, rootGraphicsNode0);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.2207951357211178
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      JOptionPane jOptionPane0 = new JOptionPane();
      JOptionPane jOptionPane1 = new JOptionPane();
      jOptionPane0.getInitialValue();
      BasicOptionPaneUI basicOptionPaneUI1 = new BasicOptionPaneUI();
      basicOptionPaneUI1.selectInitialValue(jOptionPane1);
      Dimension dimension0 = basicOptionPaneUI0.getMinimumOptionPaneSize();
      jDayChooser0.setSize(dimension0);
      DebugGraphics.flashColor();
      jDayChooser0.setMonth(90);
      assertEquals(14, jDayChooser0.getDay());
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JButton jButton0 = new JButton("RU\"r\"AD|FMs");
      MockDate mockDate0 = new MockDate(2099L);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser1.getMinSelectableDate();
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.097531604030678
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.updateUI();
      GraphicContext graphicContext0 = new GraphicContext();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.getHierarchyListeners();
      KeyEvent.getKeyText(48);
      jDayChooser1.updateUI();
      jDayChooser1.drawDays();
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1962175022002226
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      JOptionPane jOptionPane0 = new JOptionPane();
      jOptionPane0.getHierarchyListeners();
      basicOptionPaneUI0.getBaselineResizeBehavior(jOptionPane0);
      JOptionPane jOptionPane1 = new JOptionPane();
      jOptionPane1.getRegisteredKeyStrokes();
      jOptionPane0.getInitialValue();
      BasicOptionPaneUI basicOptionPaneUI1 = new BasicOptionPaneUI();
      basicOptionPaneUI1.selectInitialValue(jOptionPane1);
      basicOptionPaneUI0.getMinimumOptionPaneSize();
      Color color0 = Color.cyan;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JButton jButton0 = new JButton("RU\"r\"AD|FMs");
      MockDate mockDate0 = new MockDate(4001L);
      mockDate0.toInstant();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-4123));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1962302574649577
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      jDayChooser0.setMaxDayCharacters(13);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1771683501486114
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      jDayChooser0.setMaxDayCharacters(1);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.226686582030316
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.remove(hierarchyBoundsListener2, (HierarchyBoundsListener) null);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) aWTEventMulticaster1);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster1, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((AdjustmentListener) aWTEventMulticaster3, (AdjustmentListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster2, (HierarchyBoundsListener) aWTEventMulticaster3);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener2);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) aWTEventMulticaster1);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster4, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) aWTEventMulticaster2);
      AWTEventMulticaster.add(hierarchyBoundsListener1, (HierarchyBoundsListener) aWTEventMulticaster1);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      Color color0 = jDayChooser0.getWeekdayForeground();
      JDayChooser jDayChooser1 = new JDayChooser();
      System.setCurrentTimeMillis((-371L));
      Color color1 = Color.magenta;
      jDayChooser1.setDecorationBackgroundColor(color0);
      jDayChooser1.updateUI();
      jDayChooser0.setForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser1.initDecorations();
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.1411043377931707
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      JOptionPane jOptionPane0 = new JOptionPane();
      jOptionPane0.getInitialValue();
      JOptionPane jOptionPane1 = new JOptionPane();
      jOptionPane0.getInitialValue();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      JDayChooser jDayChooser1 = new JDayChooser();
      System.setCurrentTimeMillis((-371L));
      Color color0 = Color.magenta;
      jDayChooser1.updateUI();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1709024879132084
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getWeeksInWeekYear();
      mockGregorianCalendar0.getWeeksInWeekYear();
      mockGregorianCalendar0.getCalendarType();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL;
      Integer.getInteger("T/{qs", integer0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-120);
      jDayChooser0.setYear(9);
      jDayChooser0.updateUI();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, (-2477), true);
      jDayChooser0.focusLost(focusEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay(9);
      assertEquals(9, jDayChooser1.getDay());
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1962914038371437
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      JOptionPane jOptionPane0 = new JOptionPane();
      jOptionPane0.getHierarchyListeners();
      JOptionPane jOptionPane1 = new JOptionPane();
      jOptionPane0.getInitialValue();
      BasicOptionPaneUI basicOptionPaneUI1 = new BasicOptionPaneUI();
      basicOptionPaneUI1.selectInitialValue(jOptionPane1);
      Dimension dimension0 = jDayChooser0.getSize();
      dimension0.clone();
      jDayChooser0.setSize(dimension0);
      Color color0 = Color.cyan;
      jDayChooser0.setMonth(261);
      JButton jButton0 = new JButton("RU\"r\"AD|FMs");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte) (-99);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      JButton jButton1 = new JButton(imageIcon0);
      jDayChooser0.getVetoableChangeListeners();
      jDayChooser0.setMaxDayCharacters(421);
      ActionEvent actionEvent0 = new ActionEvent(jButton1, (-917), "RU\"r\"AD|FMs");
      Integer integer0 = StrokingTextPainter.WRITING_MODE_RTL;
      jDayChooser0.getClientProperty(integer0);
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.133742703431037
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      JOptionPane jOptionPane0 = new JOptionPane();
      jOptionPane0.getInitialValue();
      JOptionPane jOptionPane1 = new JOptionPane();
      jOptionPane0.getInitialValue();
      BasicOptionPaneUI basicOptionPaneUI1 = new BasicOptionPaneUI();
      basicOptionPaneUI1.selectInitialValue(jOptionPane1);
      Dimension dimension0 = basicOptionPaneUI0.getMinimumOptionPaneSize();
      jDayChooser0.setSize(dimension0);
      Color color0 = Color.cyan;
      jDayChooser0.setMonth(25);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.1962795130893347
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 6155);
      focusEvent0.getOppositeComponent();
      jDayChooser0.setMonth(6155);
      String string0 = "RU\"r\"AD|FMs";
      JButton jButton0 = new JButton("RU\"r\"AD|FMs");
      jDayChooser0.setFocus();
      byte[] byteArray0 = new byte[0];
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      JButton jButton1 = new JButton(imageIcon0);
      FileController fileController0 = null;
      try {
        fileController0 = new FileController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.3028568228009125
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      JOptionPane jOptionPane0 = new JOptionPane();
      JOptionPane jOptionPane1 = new JOptionPane();
      jOptionPane0.getInitialValue();
      BasicOptionPaneUI basicOptionPaneUI1 = new BasicOptionPaneUI();
      basicOptionPaneUI1.selectInitialValue(jOptionPane1);
      Dimension dimension0 = basicOptionPaneUI0.getMinimumOptionPaneSize();
      jDayChooser0.setSize(dimension0);
      DebugGraphics.flashColor();
      jDayChooser0.setMonth(90);
      jDayChooser0.getSelectedDay();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 262, 262, 262, 90, 'W');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      jDayChooser0.getDayPanel();
      jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.297787860728799
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 6155);
      focusEvent0.getOppositeComponent();
      focusEvent0.paramString();
      focusEvent0.setSource("onevent");
      jDayChooser0.focusGained((FocusEvent) null);
      jDayChooser0.getDayPanel();
      jDayChooser0.initialized = false;
      jDayChooser0.getPopupLocation((MouseEvent) null);
      int int0 = 2663;
      jDayChooser0.setYear(2663);
      jDayChooser0.getSelectedDay();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.1867881674001883
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      JOptionPane jOptionPane0 = new JOptionPane();
      jOptionPane0.getHierarchyListeners();
      JOptionPane jOptionPane1 = new JOptionPane();
      jOptionPane0.getInitialValue();
      BasicOptionPaneUI basicOptionPaneUI1 = new BasicOptionPaneUI();
      basicOptionPaneUI1.selectInitialValue(jOptionPane1);
      Dimension dimension0 = basicOptionPaneUI1.getMinimumOptionPaneSize();
      dimension0.clone();
      jDayChooser0.setSize(dimension0);
      Color color0 = Color.cyan;
      jDayChooser0.setMonth(261);
      JButton jButton0 = new JButton("RU\"r\"AD|FMs");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)124;
      byte byte0 = (byte) (-52);
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte) (-99);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      JButton jButton1 = new JButton(imageIcon0);
      jButton1.getVetoableChangeListeners();
      int int0 = (-464);
      jDayChooser0.setMaxDayCharacters((-464));
      ActionEvent actionEvent0 = new ActionEvent(jButton1, (-917), "RU\"r\"AD|FMs");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.230857286591324
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getWeeksInWeekYear();
      mockGregorianCalendar0.getCalendarType();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setSelectableDateRange(date0, date0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Integer integer0 = StrokingTextPainter.ADJUST_ALL;
      Integer.getInteger("T/{qs", integer0);
      mockGregorianCalendar0.before(integer0);
      Date date1 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMaxSelectableDate(date1);
      Date date2 = jDayChooser0.setMinSelectableDate(date0);
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date2.toString());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }
}
