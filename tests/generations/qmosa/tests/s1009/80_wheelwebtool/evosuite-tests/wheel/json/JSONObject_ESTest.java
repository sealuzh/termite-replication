/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 18:04:39 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Spliterator;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.438287276494989
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("0[HlG,N", linkedList0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      jSONObject1.optBoolean("isnumberToString", true);
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = jSONObject1.accumulate("Q%9fumeh8_rEGV<", "0[HlG,N");
      assertEquals(2, jSONObject1.length());
      
      JSONObject jSONObject3 = jSONObject2.put("Q%9fumeh8_rEGV<", true);
      jSONObject2.toString();
      Double double1 = new Double(0.0);
      jSONObject1.optDouble(":*oU");
      jSONObject0.optInt("Q%9fumeh8_rEGV<");
      Boolean.logicalXor(false, true);
      JSONObject.quote("");
      jSONObject0.optBoolean("Q%9fumeh8_rEGV<");
      boolean boolean0 = jSONObject3.optBoolean("{\"java.lang.String@0000000006\":java.lang.Boolean@0000000007,\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.052630705922642
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(58);
      Integer integer1 = new Integer(10);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer.min(47, 128);
      Integer.getInteger((String) null, 14);
      Integer integer2 = new Integer((-197));
      Integer integer3 = new Integer((short)2189);
      Integer integer4 = new Integer(47);
      Integer integer5 = new Integer((short)2189);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("<l0");
      assertEquals(0L, long0);
      
      Integer integer6 = new Integer((-543));
      boolean boolean0 = jSONObject0.optBoolean("<l0");
      JSONObject jSONObject1 = jSONObject0.put("is", true);
      Boolean boolean1 = new Boolean(false);
      Boolean.logicalOr(true, true);
      JSONObject jSONObject2 = jSONObject1.putOpt("A1-", boolean1);
      boolean boolean2 = jSONObject2.getBoolean("is");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8646466795477876
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 46;
      String[] stringArray0 = new String[9];
      String string0 = "\\u";
      stringArray0[0] = string0;
      stringArray0[1] = "cp8e@]#yYx3T";
      stringArray0[2] = "cp8e@]#yYx3T";
      stringArray0[3] = "cp8e@]#yYx3T";
      stringArray0[4] = "cp8e@]#yYx3T";
      stringArray0[7] = "cp8e@]#yYx3T";
      stringArray0[6] = "cp8e@]#yYx3T";
      stringArray0[7] = "@ixq[l,NMV^<]";
      stringArray0[8] = "cp8e@]#yYx3T";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.accumulate("cp8e@]#yYx3T", jSONObject1);
      jSONObject0.remove("cp8e@]#yYx3T");
      Float.sum(46, (-965.9004F));
      try { 
        jSONObject0.getLong("cp8e@]#yYx3T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"cp8e@]#yYx3T\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("'");
      linkedList0.add("\"\"");
      linkedList0.add("true");
      linkedList0.add("Expected '");
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.listIterator();
      linkedList0.add("isaddFirst");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.iterator();
      linkedList1.add("true");
      linkedList1.push((String) null);
      linkedList0.iterator();
      linkedList1.removeLast();
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>(1484);
      Float float0 = new Float(0.0F);
      hashMap0.put(float0, "isput");
      hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.197711773424226
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      stringArray0[2] = "Substring bounds error";
      JSONObject.quote("");
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject.valueToString("' and instead saw '");
      String string0 = jSONObject0.optString("Substring bounds error", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4056179562890714
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)92);
      long long0 = new Byte((byte)92);
      JSONObject jSONObject1 = jSONObject0.put("Wq%_6p &)9lNlfLR", 58);
      jSONObject1.optInt("Wq%_6p &)9lNlfLR");
      jSONObject1.toString(3502);
      Integer integer0 = new Integer(53);
      boolean boolean0 = new Boolean("D`M1i+k}gI-]3o");
      jSONObject1.optLong("Wq%_6p &)9lNlfLR");
      try { 
        jSONObject1.get("getappend");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getappend\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.995670112133977
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(46);
      JSONObject jSONObject1 = new JSONObject("{}");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = null;
      JSONObject jSONObject2 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject3 = jSONObject1.append("{}", object0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject4 = new JSONObject();
      jSONObject3.optJSONArray("{}");
      try { 
        jSONObject0.getLong("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.252728336819822
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.append("rfdE", (Object) null);
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(1381);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.getJSONArray("rfdE");
      jSONObject2.optJSONArray("w+enhM,9C.mmb\"");
      JSONObject jSONObject3 = jSONObject1.put("XtXTLi\"c", 1381);
      assertFalse(jSONObject3.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.listIterator();
      linkedList0.add("a3ws:-ocEJN");
      linkedList0.add("com");
      linkedList0.add("\"\"");
      linkedList0.offer("\n");
      linkedList0.add("p2ZUa :JrZ_");
      linkedList0.add("\n");
      linkedList0.add("p2ZUa :JrZ_");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.listIterator();
      linkedList0.add((String) null);
      linkedList0.iterator();
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9529888037507501
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)92);
      Byte.toUnsignedLong((byte)23);
      JSONObject jSONObject1 = jSONObject0.putOpt("0[HlG,N", byte0);
      HashMap<Short, String> hashMap0 = new HashMap<Short, String>();
      jSONObject1.put("0[HlG,N", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter((byte)92);
      JSONObject.valueToString(linkedList0);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "0[HlG,N");
      stringWriter1.write("0[HlG,N");
      jSONObject1.write(stringWriter1);
      try { 
        jSONObject1.getJSONArray("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7219049413578618
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      jSONArray0.put(true);
      jSONArray0.put(48, (Map) hashMap0);
      jSONObject0.toJSONArray(jSONArray0);
      Integer.sum((-170), 8192);
      JSONObject.valueToString(hashMap0, (-170), 1640);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      assertFalse(linkedList1.contains(48));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7710962879776524
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1201.725401848);
      JSONObject jSONObject1 = jSONObject0.append("0[HlG,N", double0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0[HlG,N";
      stringArray0[1] = "0[HlG,N";
      stringArray0[2] = "Q%9fumeh8_rEGV<";
      stringArray0[3] = "0[HlG,N";
      stringArray0[4] = "0[HlG,N";
      stringArray0[5] = "Q%9fumeh8_rEGV<";
      stringArray0[6] = "0[HlG,N";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.toJSONArray(jSONArray0);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject3 = new JSONObject(boolean0);
      JSONObject jSONObject4 = new JSONObject((Object) "0[HlG,N");
      Boolean.logicalOr(false, true);
      Double double1 = new Double(1201.725401848);
      Double double2 = new Double(1201.725401848);
      jSONObject0.opt("0[HlG,N");
      Short short0 = new Short((short)3);
      Object object0 = new Object();
      JSONObject jSONObject5 = jSONObject2.putOpt("0[HlG,N", object0);
      assertFalse(jSONObject5.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.267609927121015
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      String string0 = "] n+t foqnd.";
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] n+t foqnd.";
      stringArray0[1] = "] n+t foqnd.";
      stringArray0[2] = "] n+t foqnd.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      JSONObject jSONObject3 = jSONObject2.put("] n+t foqnd.", 48);
      int int0 = (-170);
      jSONObject2.toString((-170), 17);
      JSONObject.valueToString(hashMap0, (-170), 1640);
      try { 
        jSONObject3.getJSONArray("] n+t foqnd.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] n+t foqnd.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1315440925406044
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)92);
      Byte.toUnsignedLong((byte)92);
      JSONObject jSONObject1 = jSONObject0.putOpt("D`M1i+k}gI-]3o", "D`M1i+k}gI-]3o");
      jSONObject1.put("Wq%_6p &)9lNlfLR", 58);
      double double0 = jSONObject0.optDouble("Wq%_6p &)9lNlfLR");
      assertEquals(58.0, double0, 0.01);
      
      jSONObject1.put("Wq%_6p &)9lNlfLR", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter((byte)92);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "D`M1i+k}gI-]3o");
      jSONObject0.write(stringWriter1);
      jSONObject1.toJSONArray((JSONArray) null);
      double double1 = jSONObject1.optDouble("D`M1i+k}gI-]3o", (double) (byte)92);
      assertEquals(92.0, double1, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4525197171331894
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "toU";
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      jSONArray0.put(true);
      int int0 = 48;
      jSONArray0.put(48, (Map) hashMap0);
      jSONObject0.toJSONArray(jSONArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "toU";
      stringArray0[1] = "toU";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      JSONObject jSONObject3 = jSONObject2.put("toU", 48);
      jSONObject3.toString(48, 47);
      jSONObject2.put("toU", (Object) jSONObject3);
      jSONObject3.getJSONObject("toU");
      try { 
        jSONArray0.getBoolean(28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[28] is not a Boolean.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      Byte byte0 = new Byte((byte) (-19));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{xpected a ',' or ']L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 13 of {xpected a ',' or ']L
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "{";
      Boolean boolean0 = new Boolean("{");
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)127);
      double double0 = (-1.0);
      Double double1 = new Double(0.0);
      Byte byte2 = new Byte((byte)2);
      hashMap0.put(byte2, double1);
      Byte.valueOf((byte)2);
      Double double2 = new Double((byte)2);
      HashMap<Byte, Double> hashMap1 = new HashMap<Byte, Double>();
      Byte byte3 = new Byte((byte)2);
      Double double3 = new Double((-1.0));
      hashMap1.put(byte3, double3);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("pn4,\"Q");
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject.quote("1%ZhmX(</ep$Ef}AR");
      jSONObject0.toString((-1473));
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5152319918562764
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("XtXTLi\"c");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "XtXTLi\"c";
      Boolean.logicalAnd(false, false);
      stringArray0[1] = "XtXTLi\"c";
      stringArray0[2] = "XtXTLi\"c";
      stringArray0[3] = "XtXTLi\"c";
      stringArray0[4] = "XtXTLi\"c";
      stringArray0[5] = "XtXTLi\"c";
      stringArray0[6] = "XtXTLi\"c";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Object object0 = new Object();
      jSONObject0.accumulate("XtXTLi\"c", object0);
      try { 
        jSONObject0.getJSONObject("XtXTLi\"c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"XtXTLi\\\"c\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3884125832928
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      boolean boolean0 = true;
      jSONArray0.put(true);
      jSONArray0.put((Object) float0);
      jSONArray0.put(48, (Map) hashMap0);
      jSONObject0.toJSONArray(jSONArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] no4found.";
      stringArray0[1] = "] no4found.";
      stringArray0[2] = "] no4found.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      JSONObject jSONObject3 = jSONObject2.put("] no4found.", 48);
      Integer.sum((-170), 8192);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(44);
      jSONObject1.put("] no4found.", (Object) jSONObject0);
      linkedList1.add(integer0);
      linkedList1.poll();
      jSONObject3.getInt("] no4found.");
      jSONObject2.optString("] no4found.");
      Object object0 = JSONObject.NULL;
      jSONObject0.put("k;ucm", object0);
      // Undeclared exception!
      jSONObject2.toString(8192, 59);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      String string0 = "D`M1i+\\k}gI-]3o";
      Byte byte0 = new Byte((byte)22);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute((JSONArray) null, biFunction0);
      Float.min(835.07F, 2654.5386F);
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Object) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5599511647956277
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Q%9fumeh8_rEGV<", linkedList0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      Double double0 = new Double(0.0);
      jSONObject1.accumulate("Q%9fumeh8_rEGV<", "Q%9fumeh8_rEGV<");
      String string0 = "\\:*oU";
      jSONObject1.optLong(":*oU", (-750L));
      Integer integer0 = new Integer((-2430));
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        linkedList2.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9960309859581935
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)92);
      Byte.toUnsignedLong((byte)92);
      JSONObject jSONObject1 = jSONObject0.putOpt("Wq%_6p &)9lNlfLR", "Wq%_6p &)9lNlfLR");
      JSONObject jSONObject2 = jSONObject1.put("Wq%_6p &)9lNlfLR", 58);
      StringWriter stringWriter0 = new StringWriter((byte)92);
      JSONObject.valueToString(hashMap0);
      stringWriter0.close();
      stringWriter0.append((CharSequence) "Wq%_6p &)9lNlfLR");
      Object object0 = new Object();
      jSONObject2.putOpt("Wq%_6p &)9lNlfLR", object0);
      JSONObject jSONObject3 = jSONObject0.accumulate("Wq%_6p &)9lNlfLR", jSONObject1);
      assertSame(jSONObject1, jSONObject3);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.179236220600481
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Float float0 = new Float(617.48057068);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.append("] not found.", "\b");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\b";
      stringArray0[1] = "] not found.";
      stringArray0[2] = "] not found.";
      stringArray0[3] = "\b";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = "7/ n#I/";
      stringArray0[6] = "7/ n#I/";
      stringArray0[7] = "7/ n#I/";
      stringArray0[8] = "\b";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject3 = jSONObject1.put("CeQQ,HICWh}grV", 617.48057068);
      jSONObject3.has("] not found.");
      JSONObject.numberToString(float0);
      JSONTokener jSONTokener0 = new JSONTokener("\b");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \b
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7734391053982044
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Float float0 = new Float(617.48057068);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "] not found.";
      JSONObject jSONObject1 = jSONObject0.append("] not found.", "] not found.");
      Float.min(1.0F, 1.0F);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "] not found.";
      stringArray0[1] = "] not found.";
      stringArray0[2] = "] not found.";
      stringArray0[3] = "] not found.";
      stringArray0[5] = "7/ n#I/";
      stringArray0[6] = "7/ n#I/";
      stringArray0[8] = "] not found.";
      JSONObject.numberToString(float0);
      jSONObject1.optJSONArray((String) null);
      try { 
        jSONObject1.get("7/ n#I/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7/ n#I/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.213675906574668
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Float float0 = new Float((-2418.0344F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optLong("getsplz/t");
      jSONObject0.optDouble("isfloatToRawIntBits", 0.0);
      jSONObject0.toString((-1791));
      String string0 = "pa";
      JSONObject jSONObject1 = jSONObject0.putOpt("pa", (Object) null);
      String string1 = "\\f";
      try { 
        jSONObject1.getBoolean("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3529791347928772
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("0[HlG,N", linkedList0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONObject1.toJSONArray(jSONArray0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = jSONObject1.accumulate("Q%9fumeh8_rEGV<", "0[HlG,N");
      Double.min(0.0, 0.0);
      jSONObject0.optDouble((String) null);
      jSONObject0.optInt((String) null);
      // Undeclared exception!
      jSONObject2.toString(5145);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2967697930808764
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 46;
      jSONObject0.toString(46);
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject1 = jSONObject0.append("{}", boolean0);
      String string0 = ",`GNF--_B,(?/szJ";
      jSONObject0.optLong("getsplz/t");
      jSONObject0.optDouble("gettoString", (double) 0L);
      jSONObject0.toString(46);
      String string1 = "va";
      jSONObject1.putOpt("va", ",`GNF--_B,(?/szJ");
      try { 
        jSONObject1.getBoolean("va");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"va\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      Integer.min(88, 45);
      JSONObject.getNames((Object) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(88);
      Integer integer1 = new Integer(45);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer.min(45, 45);
      String string0 = null;
      Integer.getInteger("isaccumulate", 47);
      linkedList0.add(integer1);
      Integer integer2 = new Integer((-2584));
      Integer integer3 = new Integer(2297);
      Integer integer4 = new Integer((-1867));
      // Undeclared exception!
      try { 
        linkedList1.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.499459669677198
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "Q%9fumeh8_rEGV<";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("0[HlG,N", linkedList0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      jSONObject1.optBoolean("isnumberToString", true);
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(0.0);
      jSONObject1.accumulate("Q%9fumeh8_rEGV<", "0[HlG,N");
      Double double1 = new Double(0.0);
      String string1 = "\\:*oU";
      jSONObject1.optDouble(":*oU");
      jSONObject0.optInt("Q%9fumeh8_rEGV<");
      jSONObject1.toString(0);
      Integer integer0 = new Integer(157);
      jSONObject1.optBoolean(":*oU");
      jSONObject0.optLong("iTkW");
      try { 
        jSONObject1.get("{\n\"java.lang.String@0000000006\": \"java.lang.String@0000000003\",\n\"java.lang.String@0000000003\": [[]]\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000006\\\": \\\"java.lang.String@0000000003\\\",\\n\\\"java.lang.String@0000000003\\\": [[]]\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.722103980957437
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[9];
      String string0 = "\\u";
      stringArray0[0] = string0;
      stringArray0[1] = "cp8e@]#ylx0T";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string1 = "uf{lA!5";
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = jSONObject1.accumulate("uf{lA!5", jSONArray0);
      try { 
        jSONObject2.getJSONObject(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "' and instead saw '";
      stringArray0[1] = "";
      stringArray0[2] = "Substring bounds error";
      Long long0 = new Long((short)0);
      Long.getLong("I -v}Z6vXZM/a&gq.c", long0);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.optJSONObject("' and instead saw '");
      String string0 = "W";
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9261462360026143
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("0[HlG,N", linkedList0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      double double0 = 0.0;
      Double double1 = new Double(0.0);
      JSONObject jSONObject2 = jSONObject1.accumulate("Q%9fumeh8_rEGV<", "0[HlG,N");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Q%9fumeh8_rEGV<");
      stringWriter1.write("Substring bounds error");
      StringWriter stringWriter2 = new StringWriter();
      jSONObject2.write(stringWriter2);
      String string0 = "Ikg=hc";
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("0[HlG,N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 0[HlG,N
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.68165794209895
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1791), (-128044258));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "istoLowerCase";
      linkedList0.add("Expected a ',' or ']'");
      linkedList0.removeLast();
      JSONObject jSONObject1 = new JSONObject((Object) "istoLowerCase");
      Float float1 = new Float(0.0F);
      JSONObject.getNames((Object) float1);
      try { 
        jSONObject1.putOpt("istoLowerCase", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.520267108835806
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.accumulate("x(U9uVlgTYH.E`fBD:", "x(U9uVlgTYH.E`fBD:");
      jSONObject0.optInt("x(U9uVlgTYH.E`fBD:");
      jSONObject1.toString(0, 0);
      jSONObject0.toString(0);
      jSONObject0.put("x(U9uVlgTYH.E`fBD:", (-303.9539479215717));
      jSONObject1.optInt("x(U9uVlgTYH.E`fBD:");
      jSONObject0.toString();
      String string0 = "Hk_-bx";
      try { 
        jSONObject0.getString("Hk_-bx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Hk_-bx\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1083462517896923
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("*{y>7wvGbL4i2c!");
      String[] stringArray0 = new String[14];
      stringArray0[0] = "*{y>7wvGbL4i2c!";
      stringArray0[1] = "*{y>7wvGbL4i2c!";
      stringArray0[2] = "*{y>7wvGbL4i2c!";
      stringArray0[3] = "*{y>7wvGbL4i2c!";
      stringArray0[4] = "*{y>7wvGbL4i2c!";
      stringArray0[0] = "*{y>7wvGbL4i2c!";
      stringArray0[6] = "*{y>7wvGbL4i2c!";
      stringArray0[7] = "*{y>7wvGbL4i2c!";
      stringArray0[8] = "*{y>7wvGbL4i2c!";
      JSONObject jSONObject0 = new JSONObject("*{y>7wvGbL4i2c!", stringArray0);
      JSONObject jSONObject1 = new JSONObject((Object) "*{y>7wvGbL4i2c!");
      JSONObject jSONObject2 = jSONObject1.append("*{y>7wvGbL4i2c!", (Object) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject2.optInt("Z}3@nzI7g$wbgot*", (-1332));
      jSONArray0.optJSONObject(126);
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      Double double0 = new Double(126);
      jSONObject3.putOpt("Z}3@nzI7g$wbgot*", double0);
      try { 
        jSONObject2.getDouble("*{y>7wvGbL4i2c!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*{y>7wvGbL4i2c!\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.2058622742410656
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[9];
      String string0 = "\\u";
      stringArray0[0] = string0;
      stringArray0[1] = "cp8e@]#ylx0T";
      stringArray0[2] = "cp8e@]#ylx0T";
      stringArray0[3] = "cp8e@]#ylx0T";
      stringArray0[4] = "cp8e@]#ylx0T";
      stringArray0[5] = "cp8e@]#ylx0T";
      stringArray0[6] = "cp8e@]#ylx0T";
      stringArray0[7] = "@ixq[l,NMV^<]";
      stringArray0[8] = "cp8e@]#ylx0T";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.accumulate("cp8e@]#ylx0T", jSONObject1);
      Float.sum(46, (-965.9004F));
      Float.isFinite((-965.9004F));
      JSONObject jSONObject3 = new JSONObject((Object) "cp8e@]#ylx0T");
      jSONObject3.toString();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      hashMap0.put(jSONArray0, jSONArray0);
      try { 
        jSONObject2.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8648251293449651
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(46);
      JSONObject jSONObject1 = new JSONObject("{}");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("{}", 633L);
      Boolean boolean0 = new Boolean("{}");
      linkedList0.add("`9>");
      linkedList0.removeLast();
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      Object object0 = jSONObject1.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4844575358174863
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "0[HlG,N";
      Double double0 = new Double(1201.725401848);
      jSONObject0.append("0[HlG,N", double0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      int int0 = (-671);
      Integer.sum((-671), (-2499));
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Double.sum(1201.725401848, (-3170));
      Integer integer0 = new Integer(39);
      Integer.getInteger((String) null, 39);
      Integer integer1 = new Integer(39);
      int int1 = 160;
      Integer integer2 = new Integer(160);
      Integer integer3 = new Integer(39);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.968195999030428
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      jSONArray0.put(true);
      JSONArray jSONArray1 = jSONArray0.put(48, (Map) hashMap0);
      jSONObject0.toJSONArray(jSONArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] not found.";
      stringArray0[1] = "] not found.";
      stringArray0[2] = "] not found.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      Double double0 = new Double(1.0);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray1, 48, 777);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7511755822413677
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Float float0 = new Float(617.48057068);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.isFinite(132.18F);
      jSONObject0.optDouble("5K'k<\"zs1ne4K1t]f#a", (-1.0));
      JSONObject jSONObject1 = jSONObject0.putOpt("5K'k<\"zs1ne4K1t]f#a", float0);
      long long0 = jSONObject1.optLong("5K'k<\"zs1ne4K1t]f#a", (-2133L));
      assertEquals(4, jSONObject0.length());
      assertEquals(617L, long0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8550742570553047
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Float float0 = new Float(617.48057068);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = ")O6 +";
      jSONObject0.optInt(")O6 +");
      Long.getLong(")O6 +");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("b)yo5", (Object) float0);
      try { 
        jSONObject1.getBoolean("b)yo5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"b)yo5\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9872830069860186
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)92);
      Byte.toUnsignedLong((byte)92);
      JSONObject jSONObject1 = jSONObject0.putOpt("D`M1i+k}gI-]3o", "D`M1i+k}gI-]3o");
      JSONObject jSONObject2 = jSONObject1.put("Wq%_6p &)9lNlfLR", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter((byte)92);
      JSONObject.valueToString(hashMap0);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "D`M1i+k}gI-]3o");
      stringWriter1.write("D`M1i+k}gI-]3o");
      jSONObject0.write(stringWriter1);
      try { 
        jSONObject2.getJSONArray("`{-gA3xNPN+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`{-gA3xNPN+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.208508675966988
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.optInt("isquote");
      Double double0 = new Double((-954));
      JSONObject.valueToString(double0, 0, 86);
      jSONObject0.optInt("isquote");
      String string0 = "\\^GTG\\";
      JSONObject jSONObject1 = jSONObject0.putOpt("52Q~@<|s5+!nd`7;2 ", "isquote");
      Double double1 = new Double(0.0);
      byte byte0 = (byte)40;
      Byte byte1 = new Byte((byte)40);
      Short short0 = new Short((short)0);
      JSONObject.valueToString(short0);
      try { 
        jSONObject1.getLong("istoUnsignedString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoUnsignedString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7615175912261756
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("0[HlG,N", linkedList0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = jSONObject1.accumulate("Q%9fumeh8_rEGV<", "0[HlG,N");
      jSONObject2.put("f+FmjJd{GZ.XQI-L", (Object) null);
      jSONObject1.optLong(":*oU", (-750L));
      Byte byte0 = new Byte((byte)73);
      Integer integer0 = new Integer(613);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(613);
      Integer integer3 = new Integer(7);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer4 = Integer.getInteger("] is not a JSONArray.", 613);
      linkedList2.add(integer4);
      Integer integer5 = new Integer(3738);
      linkedList2.add(integer5);
      Integer integer6 = new Integer((-380));
      try { 
        jSONObject0.getInt("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.445250065787779
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Float float0 = new Float(0.0);
      String string0 = "b)yo5";
      String string1 = "fl";
      JSONObject jSONObject1 = jSONObject0.put("fl", (Object) null);
      Integer integer0 = new Integer(11);
      String string2 = "%Tp)FYH{^\\aZN_9 ";
      Byte byte0 = new Byte((byte)62);
      Long long0 = new Long(11);
      JSONObject.valueToString((Object) null);
      String string3 = "istoString";
      String string4 = "y>+dG_DCCqB~";
      try { 
        jSONObject1.getLong("y>+dG_DCCqB~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y>+dG_DCCqB~\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.8058378117245406
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Boolean.valueOf("XtXTLi\"c");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "XtXTLi\"c";
      stringArray0[1] = "XtXTLi\"c";
      stringArray0[2] = "XtXTLi\"c";
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      stringWriter0.close();
      Object object1 = new Object();
      JSONObject.valueToString(object1);
      stringWriter0.append((CharSequence) "\"java.lang.Object@0000000002\"");
      StringWriter stringWriter1 = new StringWriter(2149);
      String string0 = ";,?T^<'xu";
      stringWriter1.write(";,?T^<'xu");
      StringWriter stringWriter2 = new StringWriter();
      try { 
        jSONArray0.getJSONObject(2149);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2149] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      Byte byte0 = new Byte((byte)92);
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>();
      hashMap1.keySet();
      HashMap<JSONArray, Boolean> hashMap2 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      BiFunction<Object, Float, Float> biFunction0 = (BiFunction<Object, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("getputOpt");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.80548105607576
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Float float0 = new Float(617.48057068);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.append("] not found.", "\b");
      String[] stringArray0 = new String[9];
      Float.sum((-619.34F), 0.0F);
      stringArray0[6] = "\b";
      stringArray0[1] = "] not found.";
      stringArray0[2] = "] not found.";
      stringArray0[3] = "\b";
      stringArray0[4] = "] is not aEnumber.";
      stringArray0[6] = "7/ fSI/";
      stringArray0[7] = "7/ fSI/";
      stringArray0[1] = "\b";
      jSONObject0.optLong("seVW38{pDk,k^", 0L);
      jSONObject1.optString("] not found.", "fUimXP6IQMR6");
      jSONObject0.remove("AFpc+M8&");
      try { 
        jSONObject1.getDouble("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.2757690270397415
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-0.39506921046126225));
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = null;
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      try { 
        jSONObject1.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.4272171500680497
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte byte0 = (byte)127;
      Byte byte1 = new Byte((byte)127);
      JSONObject jSONObject0 = new JSONObject(byte1);
      Integer.valueOf((int) (byte)127);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      byte byte2 = (byte)104;
      Byte.toUnsignedInt((byte)104);
      Float float0 = new Float((double) (byte)127);
      linkedList0.add(float0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      jSONObject0.toJSONArray(jSONArray0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer.min((-1289), (-75));
      Integer integer0 = new Integer((byte)127);
      Integer integer1 = new Integer((-1289));
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer2 = new Integer((-1289));
      try { 
        Integer.parseUnsignedInt("app");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"app\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.846494559277028
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      String string0 = "D`M1i+\\k}gI-]3o";
      Byte byte0 = new Byte((byte)92);
      Byte.compare((byte)92, (byte)92);
      Byte byte1 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("false", (long) (byte)92);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optBoolean("|C|4(f</O9T]akj-O", true);
      JSONObject.doubleToString(92L);
      jSONObject1.optInt("D`M1i+k}gI-]3o");
      jSONObject0.optLong("Wv%OiQt");
      try { 
        Byte.valueOf("#:%XJ-6k7v~9[P", 101);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 101 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.0778267003957414
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("0[HlG,N", linkedList0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = jSONObject1.accumulate("Q%9fumeh8_rEGV<", "0[HlG,N");
      Long long0 = new Long((-750L));
      Byte byte0 = new Byte((byte)73);
      jSONObject2.optInt("ac");
      jSONObject2.optDouble("] is not a JSONObject.", Double.NaN);
      Object object0 = JSONObject.NULL;
      jSONObject1.put("] not found.", object0);
      jSONObject2.put("ac", 0.0);
      jSONObject2.optString("0[HlG,N");
      jSONObject2.getInt("ac");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.0161537172613797
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[9];
      String string0 = "\\u";
      stringArray0[0] = string0;
      stringArray0[1] = "cp8e@]#ylx0T";
      stringArray0[2] = "cp8e@]#ylx0T";
      stringArray0[3] = "cp8e@]#ylx0T";
      stringArray0[4] = "cp8e@]#ylx0T";
      stringArray0[6] = "cp8e@]#ylx0T";
      stringArray0[7] = "@ixq[l,NMV^<]";
      stringArray0[8] = "cp8e@]#ylx0T";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.accumulate("cp8e@]#ylx0T", jSONObject1);
      Float.sum(46, (-965.9004F));
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double((-919.9004F));
      jSONObject0.optJSONArray("cp8e@]#ylx0T");
      try { 
        jSONObject2.put("mu0d:IU(GN'irmQp8~", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6739927314888052
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("0[HlG,N", linkedList0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      jSONObject1.optBoolean("isnumberToString", true);
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = jSONObject1.accumulate("Q%9fumeh8_rEGV<", "0[HlG,N");
      jSONObject2.get("0[HlG,N");
      Double double1 = new Double(0.0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("isnumberToString");
      String string0 = "/I|Z-VT:E";
      linkedList0.add("/I|Z-VT:E");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("] is not a number.");
      linkedList0.listIterator();
      linkedList2.add("Q%9fumeh8_rEGV<");
      linkedList0.add("isnumberToString");
      linkedList2.iterator();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList3.add("#B@");
      linkedList4.removeAll(linkedList3);
      linkedList3.add("k7?P(BtIkqht%UI_b");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList5.iterator();
      // Undeclared exception!
      try { 
        linkedList5.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1580510496905323
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = "\\b";
      try { 
        jSONObject1.append("\b", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.8158154609170039
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Float float0 = new Float(617.48057068);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optDouble("5K'k<\"zs1ne4K1t]f#a", (-1.0));
      JSONObject jSONObject1 = jSONObject0.putOpt("5K'k<\"zs1ne4K1t]f#a", float0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "5K'k<\"zs1ne4K1t]f#a";
      stringArray0[1] = "5K'k<\"zs1ne4K1t]f#a";
      stringArray0[2] = "5K'k<\"zs1ne4K1t]f#a";
      stringArray0[3] = "fr1vavT.;`D]z1DBS";
      stringArray0[4] = "5K'k<\"zs1ne4K1t]f#a";
      stringArray0[5] = "5K'k<\"zs1ne4K1t]f#a";
      stringArray0[6] = "5K'k<\"zs1ne4K1t]f#a";
      stringArray0[7] = "5K'k<\"zs1ne4K1t]f#a";
      stringArray0[8] = "5K'k<\"zs1ne4K1t]f#a";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.getDouble("5K'k<\"zs1ne4K1t]f#a");
      jSONObject1.opt("ndp6W/??Yx");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.89150302418475
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = new Float(617.48057068);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.append("] not found.", "\b");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\b";
      stringArray0[1] = "\b";
      stringArray0[2] = "] not found.";
      stringArray0[3] = "] not found.";
      stringArray0[4] = "] not found.";
      stringArray0[5] = "\b";
      // Undeclared exception!
      jSONObject0.toString(5769, 3931);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.6418065596721658
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)127);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Integer.valueOf((int) (byte)127);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("] is not a number.");
      linkedList0.add("true");
      linkedList0.add("true");
      linkedList0.listIterator();
      linkedList0.add("");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.iterator();
      linkedList2.add("isputOpt");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.push("true");
      linkedList1.iterator();
      linkedList0.removeLast();
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>(1850);
      hashMap0.values();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1285962936622183
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("\"\"");
      linkedList0.add("Expected '");
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.listIterator();
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.iterator();
      linkedList0.add("get");
      linkedList0.iterator();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList0.removeAll(linkedList1);
      linkedList0.removeLast();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("Expected '", false);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.0978720872425702
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("gethashCode", 2012.9032428990101);
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[9];
      String string0 = "\\u";
      stringArray0[0] = string0;
      stringArray0[1] = "cp8e@]#ylx0T";
      stringArray0[2] = "cp8e@]#ylx0T";
      stringArray0[3] = "cp8e@]#ylx0T";
      stringArray0[4] = "cp8e@]#ylx0T";
      stringArray0[5] = "cp8e@]#ylx0T";
      stringArray0[6] = "cp8e@]#ylx0T";
      stringArray0[7] = "@ixq[l,NMV^<]";
      stringArray0[8] = "cp8e@]#ylx0T";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.accumulate("cp8e@]#ylx0T", jSONObject1);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 0, 0);
      Float.sum(46, (-965.9004F));
      Float.isFinite((-965.9004F));
      jSONObject0.optInt("cp8e@]#ylx0T", 27);
      int int0 = jSONObject2.optInt(string0, 46);
      assertEquals(1, jSONObject0.length());
      assertEquals(46, int0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.0501335246204593
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      String string0 = "\\u";
      stringArray0[0] = string0;
      jSONObject0.optLong(string0, (long) 46);
      stringArray0[1] = "cp8e@N9]#yYx3T";
      stringArray0[2] = "cp8e@N9]#yYx3T";
      stringArray0[3] = "cp8e@N9]#yYx3T";
      stringArray0[4] = "cp8e@N9]#yYx3T";
      stringArray0[7] = "cp8e@N9]#yYx3T";
      stringArray0[6] = "cp8e@N9]#yYx3T";
      stringArray0[7] = "@ixq[l,NMV^<]";
      stringArray0[8] = "cp8e@N9]#yYx3T";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optLong("cp8e@N9]#yYx3T", 46L);
      jSONObject0.accumulate("cp8e@N9]#yYx3T", jSONObject1);
      Float.sum(46, (-965.9004F));
      jSONObject1.optInt("cp8e@N9]#yYx3T", 59);
      try { 
        jSONObject0.getLong("cp8e@N9]#yYx3T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"cp8e@N9]#yYx3T\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.684533900059347
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "uE0 ]\"99\r, ";
      stringArray0[1] = "cp8e@]#ylx0T";
      stringArray0[2] = "cp8e@]#ylx0T";
      stringArray0[3] = "cp8e@]#ylx0T";
      stringArray0[4] = "cp8e@]#ylx0T";
      stringArray0[7] = "cp8e@]#ylx0T";
      stringArray0[6] = "cp8e@]#ylx0T";
      stringArray0[7] = "@ixq[l,NMV^<]";
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optLong("cp8e@]#ylx0T", 0L);
      Byte.compare((byte) (-41), (byte)12);
      Byte byte0 = new Byte((byte) (-14));
      jSONObject0.optLong((String) null, 0L);
      jSONObject0.optLong("ZRx`=i wvqa6", (long) (-53));
      jSONObject0.isNull("D");
      jSONObject0.optLong("Expected a ',' or '}'");
      jSONObject0.put("9T=*Bg", (Object) "cp8e@]#ylx0T");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.3279106202930016
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Float float0 = new Float((-2418.0344F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString((-1791), (-1791));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ii}7^";
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}", stringArray0);
      String string0 = jSONObject0.toString(6296, (-3041));
      jSONObject0.names();
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject2 = jSONObject0.put("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}", (Collection) linkedList0);
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      // Undeclared exception!
      jSONObject1.getDouble(string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.11371910650665
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)92);
      Byte.toUnsignedLong((byte)92);
      JSONObject jSONObject1 = jSONObject0.putOpt("D`M1i+k}gI-]3o", "D`M1i+k}gI-]3o");
      jSONObject1.put("Wq%_6p &)9lNlfLR", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter((byte)92);
      JSONObject.valueToString(hashMap0);
      stringWriter0.close();
      stringWriter0.append((CharSequence) "D`M1i+k}gI-]3o");
      jSONObject0.isNull("ac");
      jSONObject0.names();
      JSONObject.valueToString((Object) null);
      try { 
        jSONObject0.getString("OYoJZ#>E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"OYoJZ#>E\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)92);
      long long0 = new Byte((byte)92);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.1169040757122786
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 2740, 34);
      String string0 = "istoUnsignedString";
      jSONObject0.optInt("{}");
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("istoUnsignedString", object0);
      Double double0 = new Double((-954));
      byte byte0 = (byte)40;
      Byte byte1 = new Byte((byte)40);
      JSONObject.valueToString("{}");
      String string1 = "toH";
      try { 
        jSONObject1.getLong("toH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toH\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.788191435362226
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float float0 = new Float((-2418.0344F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString((-3537), 553);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("-`Uy");
      linkedList0.removeLast();
      Float float1 = new Float((-2304.707F));
      JSONObject jSONObject1 = new JSONObject(float1);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.8869312248636236
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject((Object) "ii}7^");
      jSONObject0.toString(48, 2);
      assertEquals(3, jSONObject0.length());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("yt");
      linkedList0.add("ii}7^");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject(object0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Boolean.valueOf("XtXTLi\"c");
      Long long0 = new Long((-1L));
      String string0 = JSONObject.doubleToString(2931.604383304);
      assertEquals("2931.604383304", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.listIterator();
      linkedList0.add("'");
      linkedList0.add("\"\"");
      linkedList0.add("'");
      linkedList0.spliterator();
      linkedList0.add("Expected '");
      linkedList0.add("/I|Z-VT:E");
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.listIterator();
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.add("%ev34i?o^");
      linkedList0.iterator();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.removeAll(linkedList1);
      linkedList0.add("get");
      linkedList0.iterator();
      linkedList0.removeLast();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(4, int0);
      
      jSONObject0.keys();
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.4016171508386506
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("'");
      linkedList0.add("\"\"");
      linkedList0.add("true");
      linkedList0.add("Expected '");
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.listIterator();
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.iterator();
      linkedList0.add("get");
      linkedList0.push("E?8 mTBp>J");
      linkedList0.iterator();
      linkedList0.removeLast();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>(88);
      Object object0 = new Object();
      boolean boolean0 = jSONObject0.isNull("getgetNames");
      assertEquals(4, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.144560153355918
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 46;
      jSONObject0.toString(46);
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject2 = jSONObject1.append("{}", boolean0);
      String string0 = ",`GNF--_B,(?/szJ";
      jSONObject1.optLong("getsplit");
      jSONObject0.optDouble("gettoString", (double) 0L);
      jSONObject1.toString(46);
      JSONObject jSONObject3 = jSONObject2.putOpt("va", ",`GNF--_B,(?/szJ");
      jSONObject1.toString(46);
      jSONObject3.optLong("{\n                                              \"java.lang.String@0000000003\": [\n                                                                                            \"java.lang.String@0000000003\",\n                                                                                            java.lang.Boolean@0000000005\n                                              ],\n                                              \"java.lang.String@0000000006\": \"java.lang.String@0000000007\"\n}");
      String string1 = "\\u";
      try { 
        jSONObject0.get(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5751765904639274
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.listIterator();
      linkedList0.add("'");
      linkedList0.add("\"\"");
      linkedList0.add("true");
      linkedList0.add("Expected '");
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.listIterator();
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.iterator();
      linkedList0.add("get");
      linkedList0.iterator();
      linkedList0.removeLast();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      Integer integer0 = new Integer((-62375756));
      hashMap0.put(integer0, (JSONArray) null);
      JSONObject jSONObject1 = jSONObject0.put("Substring bounds error", (Map) hashMap0);
      try { 
        jSONObject1.append("Substring bounds error", "true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Substring bounds error] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.4609855560478324
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("true");
      linkedList0.add("tri");
      Spliterator<String> spliterator0 = linkedList0.spliterator();
      linkedList0.add("true");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("\"\"");
      linkedList1.add("fjH>GH2q.D1~I_");
      linkedList1.add("/I|Z-VT:E");
      linkedList0.listIterator();
      linkedList0.add(" at character ");
      linkedList1.add("`");
      linkedList2.iterator();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList2.removeAll(linkedList0);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.add("\"\"");
      linkedList2.iterator();
      linkedList4.removeLast();
      JSONObject jSONObject1 = new JSONObject(spliterator0);
      JSONObject jSONObject2 = jSONObject1.put("`", (Object) linkedList3);
      try { 
        jSONObject2.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.712227691559177
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = jSONObject0.toString((-1791), 410);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("J;'Fppg]s71<");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      assertTrue(linkedList0.contains(string0));
      
      linkedList0.removeLast();
      JSONObject jSONObject1 = new JSONObject((Object) "istoLowerCase");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      JSONObject.valueToString((Object) null, 46, 46);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.9115040885084702
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-221.51686745403248));
      jSONObject0.append("^yK%C]ylZR", double0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      Double double1 = new Double(0.0);
      Short short0 = new Short((short)88);
      JSONObject jSONObject1 = jSONObject0.accumulate("{3hRBsAd&", short0);
      Long long0 = new Long(0L);
      Byte byte0 = new Byte((byte)25);
      jSONObject1.put("0[HlG,N", (Object) jSONObject0);
      jSONObject1.optBoolean("^yK%C]ylZR");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("0[HlG,N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 0[HlG,N
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.078399287499838
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("0[HlG,N", linkedList0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = jSONObject1.accumulate("Q%9fumeh8_rEGV<", "0[HlG,N");
      jSONObject1.optDouble("Zo$'!<0H3Btkb", (-2384.07));
      Long long0 = new Long((-750L));
      Byte byte0 = new Byte((byte)73);
      JSONObject jSONObject3 = new JSONObject(jSONObject1);
      jSONObject0.optBoolean("Q%9fumeh8_rEGV<");
      Object object0 = new Object();
      jSONObject2.append("Unterminated string", object0);
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject("pxX/qFt/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of pxX/qFt/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.469483727358999
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      linkedList0.add("Q%9fumeh8_rEGV<");
      linkedList0.add(" at character ");
      linkedList0.iterator();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("Q%9fumeh8_rEGV<");
      linkedList1.iterator();
      linkedList1.removeLast();
      JSONObject jSONObject1 = new JSONObject((Object) "Q%9fumeh8_rEGV<");
      try { 
        jSONObject0.getJSONArray(" at character ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" at character \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject.quote(",\n");
      Byte byte0 = new Byte((byte)13);
      Integer.getInteger("I-$RqQM", 46);
      Integer integer0 = new Integer(46);
      Integer integer1 = new Integer(114);
      Integer integer2 = new Integer(114);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer3 = new Integer((byte)13);
      Integer integer4 = new Integer(949);
      Integer integer5 = new Integer(1983);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer6 = new Integer(4);
      Integer integer7 = new Integer(5);
      Integer integer8 = new Integer(46);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\",\n\"", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      Byte byte0 = new Byte((byte)92);
      Byte.toUnsignedLong((byte)92);
      String string0 = JSONObject.quote("\t");
      assertEquals("\"\\t\"", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Boolean boolean0 = new Boolean("XtXTLi\"c");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "XtXTLi\"c";
      stringArray0[0] = "XtXTLi\"c";
      stringArray0[2] = "XtXTLi\"c";
      stringArray0[3] = "XtXTLi\"c";
      stringArray0[4] = "XtXTLi\"c";
      stringArray0[5] = "XtXTLi\"c";
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("getputOpt");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.6761389064361045
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "' and instead saw '";
      JSONObject jSONObject1 = jSONObject0.append("' and instead saw '", jSONObject0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optInt("' and instead saw '");
      try { 
        jSONObject1.getInt("' and instead saw '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"' and instead saw '\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.6957425341696348
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 46;
      String string0 = "cp8e@]#ylx0T";
      String[] stringArray0 = new String[9];
      String string1 = "\\u";
      stringArray0[0] = string1;
      stringArray0[1] = "cp8e@]#ylx0T";
      stringArray0[2] = "cp8e@]#ylx0T";
      stringArray0[3] = "cp8e@]#ylx0T";
      stringArray0[4] = "cp8e@]#ylx0T";
      stringArray0[7] = "cp8e@]#ylx0T";
      stringArray0[6] = "cp8e@]#ylx0T";
      stringArray0[7] = "@ixq[l,NMV^<]";
      stringArray0[8] = "cp8e@]#ylx0T";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.395908119293929
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(46);
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      jSONObject0.getString("{}");
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.9730038344472078
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      String string0 = "] n+t foqnd.";
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("] n+t foqnd.");
      stringWriter0.close();
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "] n+t foqnd.");
      stringWriter1.append('L');
      stringWriter1.write("H&S(Q1Fl)2as");
      StringWriter stringWriter2 = new StringWriter();
      jSONObject0.put("] n+t foqnd.", 120);
      stringWriter2.append((CharSequence) "H&S(Q1Fl)2as");
      jSONObject0.write(stringWriter2);
      try { 
        jSONObject0.getJSONArray("] n+t foqnd.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] n+t foqnd.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.5179216905846646
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "0[HlG,N";
      Double double0 = new Double(1201.725401848);
      JSONObject jSONObject1 = jSONObject0.append("0[HlG,N", double0);
      JSONObject jSONObject2 = jSONObject1.put("000", (Collection) linkedList0);
      try { 
        jSONObject2.getDouble("0[HlG,N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0[HlG,N\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("get");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      short short0 = (short)2189;
      Integer integer0 = new Integer((short)2189);
      linkedList0.removeLastOccurrence(integer0);
      int int0 = 14;
      Integer.min((short)2189, 14);
      JSONObject.getNames((Object) linkedList0);
      Integer integer1 = new Integer(10);
      Integer integer2 = new Integer(10);
      Integer.min(47, 128);
      String string0 = null;
      Integer.getInteger((String) null, 14);
      int int1 = (-197);
      Integer integer3 = new Integer((-197));
      Integer integer4 = new Integer((short)2189);
      Integer integer5 = new Integer(47);
      try { 
        Integer.valueOf((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = new Short((short)38);
      Short.toUnsignedInt((short)8);
      String string0 = "getappend";
      Long.getLong("getappend");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("OjtyN%rl5D2:%");
      linkedList0.add("DXz8RD6LX 6&Q-");
      linkedList0.add("DXz8RD6LX 6&Q-");
      linkedList0.add("\"\"");
      linkedList0.add("2<BD?d!oD,U\"~F8m");
      linkedList0.add("\"\"");
      linkedList0.offer("2<BD?d!oD,U\"~F8m");
      linkedList0.add("OjtyN%rl5D2:%");
      linkedList0.add("*{y>7wvGbLirc!");
      linkedList0.listIterator();
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("HKmwIT{/;", (-3861L));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "uE0 ]\"99\r, ";
      stringArray0[1] = "c8e@]#ylx0T";
      stringArray0[2] = "c8e@]#ylx0T";
      stringArray0[3] = "c8e@]#ylx0T";
      stringArray0[4] = "c8e@]#ylx0T";
      stringArray0[7] = "c8e@]#ylx0T";
      stringArray0[1] = "c8e@]#ylx0T";
      stringArray0[7] = "@ixq[l,NMV^<]";
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Boolean boolean0 = new Boolean("XtXTLi\"c");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "XtXTLi\"c";
      stringArray0[0] = "XtXTLi\"c";
      Boolean.logicalXor(false, false);
      String string0 = JSONObject.quote("XtXTLi\"c");
      assertEquals("\"XtXTLi\\\"c\"", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Boolean.logicalXor(true, true);
      Float.min(1125.5603F, 0.0F);
      String string0 = JSONObject.quote("@}m,/gD#;;kK`A");
      assertEquals("\"@}m,/gD#;;kK`A\"", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.4016171508386506
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("'");
      linkedList0.add("\"\"");
      linkedList0.add("true");
      linkedList0.add("Expected '");
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.listIterator();
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.add("\"\"");
      linkedList0.iterator();
      linkedList0.add("get");
      linkedList0.iterator();
      linkedList0.removeLast();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      double double0 = jSONObject0.optDouble("get");
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.664556478966277
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-34));
      JSONObject jSONObject0 = new JSONObject(byte0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "&onUU.J{I;K@3RD";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.has("&onUU.J{I;K@3RD");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.9736489231972635
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.listIterator();
      linkedList0.add("'");
      linkedList0.add("\"\"");
      linkedList0.add("'");
      linkedList0.spliterator();
      linkedList0.add("Expected '");
      linkedList0.add("/I|Z-VT:E");
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.listIterator();
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.add("%ev34i?o^");
      linkedList0.iterator();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.removeAll(linkedList1);
      linkedList0.add("get");
      linkedList0.iterator();
      linkedList0.removeLast();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.testValidity("*{y>7wvGbL4i2c!");
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.7376441483182865
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      String string0 = "\\u";
      stringArray0[0] = string0;
      stringArray0[1] = "cp8e@]#ylx0T";
      stringArray0[2] = "cp8e@]#ylx0T";
      stringArray0[3] = "cp8e@]#ylx0T";
      stringArray0[4] = "cp8e@]#ylx0T";
      stringArray0[7] = "cp8e@]#ylx0T";
      stringArray0[6] = "cp8e@]#ylx0T";
      String[] stringArray1 = new String[2];
      stringArray1[0] = string0;
      stringArray1[1] = "fGn@[7cf";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray1);
      JSONObject jSONObject2 = jSONObject0.accumulate(string0, (Object) null);
      Float.sum(0.0F, 46);
      try { 
        jSONObject2.getLong("cp8e@]#ylx0T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"cp8e@]#ylx0T\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.iterator();
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>(101);
      BiFunction<Float, Object, String> biFunction0 = (BiFunction<Float, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      HashMap<Float, String> hashMap1 = new HashMap<Float, String>();
      hashMap1.values();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      Byte byte0 = new Byte((byte)92);
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>();
      hashMap1.keySet();
      HashMap<JSONArray, Boolean> hashMap2 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.accumulate("getputOpt", hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("|lK4*<?cT`-\"atkL`");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |lK4*<?cT`-\"atkL`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Iknr(tANg 7P";
      stringArray0[1] = "gm%}-";
      stringArray0[2] = ",\n";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = "Expected a ',' or '}'";
      stringArray0[5] = "Lb";
      stringArray0[6] = "Omu}KMm#s";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.6891887613447487
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 48;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] n+t foqnd.";
      stringArray0[2] = "] n+t foqnd.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      try { 
        jSONObject2.put(stringArray0[1], 48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.4184836619456564
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Float float0 = new Float(617.48057068);
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Substring bounds error";
      Float.min(0L, 0L);
      stringArray0[1] = ")O6 +";
      Double double0 = new Double(0.0F);
      Double.max(686.3290191, 0L);
      Double.sum((-126.872711221), 0L);
      try { 
        jSONObject0.accumulate(stringArray0[2], double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.5352069314454737
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Float float0 = new Float((-2418.0344F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = JSONObject.valueToString(float0, (-1791), (-1791));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = new Boolean("java.lang.Float@0000000008");
      linkedList0.add("java.lang.Float@0000000008");
      //  // Unstable assertion: assertTrue(linkedList0.contains(string0));
      
      linkedList0.removeLast();
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      //  // Unstable assertion: assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.3853603777875552
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(47);
      Integer.divideUnsigned(47, 47);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(1111);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "!'q|Sb\"B'6";
      stringArray0[1] = "Null key.";
      stringArray0[2] = "1B`aR+fbQq.";
      stringArray0[4] = "";
      stringArray0[5] = "PZG.}][j";
      JSONObject jSONObject0 = new JSONObject(integer1, stringArray0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0, 47, 1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[3];
      stringArray0[2] = "";
      stringArray0[2] = "Substring bounds error";
      Integer integer0 = new Integer((short)0);
      Integer integer1 = new Integer((-62353088));
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(boolean0, (short)0, 12);
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = (-1791);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ii}7^";
      int int1 = 6296;
      Object object0 = JSONObject.NULL;
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "5K'k<\"zs1ne4K1t]f#a";
      jSONObject0.optDouble("5K'k<\"zs1ne4K1t]f#a", (-1.0));
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, jSONObject0);
      try { 
        jSONObject1.getLong("OrS{w1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"OrS{w1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.557857555718354
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)127);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Integer.valueOf((int) (byte)127);
      Byte byte1 = new Byte((byte) (-120));
      Integer integer0 = new Integer((-1));
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = "qttQ^F%r.d%";
      Object object0 = new Object();
      jSONObject1.optLong(":aZkGZt-=;|@JDhnM|#");
      jSONObject1.optDouble("qttQ^F%r.d%", (-2613.7966401));
      JSONObject jSONObject2 = jSONObject1.putOpt("qttQ^F%r.d%", ":aZkGZt-=;|@JDhnM|#");
      String string1 = "getcompare";
      jSONObject2.optLong("getcompare", (long) (byte)127);
      Byte.compare((byte) (-58), (byte)127);
      Byte byte2 = new Byte((byte)127);
      jSONObject2.optLong("qttQ^F%r.d%", (long) (byte) (-120));
      jSONObject2.optLong("8", (-1L));
      jSONObject2.isNull("qttQ^F%r.d%");
      jSONObject1.optLong("qttQ^F%r.d%");
      Object object1 = new Object();
      jSONObject0.put("-B0Va>naz", object1);
      JSONObject jSONObject3 = jSONObject1.put("[Z_Qa'/2PbRc", (double) (-1));
      jSONObject1.optString("[Z_Qa'/2PbRc");
      jSONObject3.toString();
      try { 
        jSONObject3.getInt("-B0Va>naz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-B0Va>naz\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.5358551955461084
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.optDouble("5K'k<\"zs1ne4K1t]f#a", 0.0);
      jSONObject1.putOpt("5K'k<\"zs1ne4K1t]f#a", "5K'k<\"zs1ne4K1t]f#a");
      long long0 = (-34L);
      JSONTokener jSONTokener0 = new JSONTokener("5K'k<\"zs1ne4K1t]f#a");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 5K'k<\"zs1ne4K1t]f#a
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.3678892575994501
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "uE0 ]\"99\r, ";
      stringArray0[1] = "cp8e@]#ylx0T";
      stringArray0[2] = "cp8e@]#ylx0T";
      stringArray0[3] = "cp8e@]#ylx0T";
      stringArray0[4] = "cp8e@]#ylx0T";
      stringArray0[7] = "cp8e@]#ylx0T";
      stringArray0[6] = "cp8e@]#ylx0T";
      stringArray0[7] = "@ixq[l,NMV^<]";
      int int0 = 2545;
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      stringWriter0.close();
      stringWriter0.append((CharSequence) "cp8e@]#ylx0T");
      stringWriter0.write("cp8e@]#ylx0T");
      StringWriter stringWriter1 = new StringWriter();
      jSONObject0.write(stringWriter1);
      String string0 = "Ikg=hc";
      try { 
        jSONObject0.getJSONArray("Ikg=hc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ikg=hc\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Byte byte0 = new Byte((byte) (-73));
      Byte.toUnsignedLong((byte)43);
      Boolean boolean0 = new Boolean("PGZLvD");
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.1521701395927608
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      hashMap0.clear();
      Byte byte0 = new Byte((byte)92);
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.put(jSONArray0, "isnames");
      Byte.toUnsignedLong((byte)92);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.1211357798412864
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "b\"v9[FKn<-(wsPAzD";
      stringArray0[1] = "";
      stringArray0[2] = "`U$U9Bx";
      stringArray0[3] = "";
      stringArray0[4] = ",`GNF--_B,(?/szJ";
      stringArray0[5] = "7/ n#I/";
      stringArray0[6] = "@z";
      stringArray0[7] = "] is not a number.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getDouble(",`GNF--_B,(?/szJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",`GNF--_B,(?/szJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      HashMap<Short, JSONObject> hashMap0 = new HashMap<Short, JSONObject>();
      HashMap<Short, Object> hashMap1 = new HashMap<Short, Object>();
      HashMap<String, LinkedList<Short>> hashMap2 = new HashMap<String, LinkedList<Short>>();
      JSONObject jSONObject1 = jSONObject0.put("63t5)j#g]be:vW", (Map) hashMap1);
      jSONObject1.put("", 8);
      jSONObject1.put("63t5)j#g]be:vW", (-1334L));
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.4795008699302592
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("'");
      linkedList0.add("\"\"");
      linkedList0.add("true");
      linkedList0.add("'");
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.listIterator();
      boolean boolean0 = new Boolean("'");
      linkedList0.iterator();
      linkedList0.add("get");
      linkedList0.iterator();
      linkedList0.removeLast();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.getString(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      Byte byte0 = new Byte((byte)22);
      Float.min(835.07F, 2654.5386F);
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>();
      JSONObject.quote("Expected a ',' or ']'");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      double double0 = jSONObject0.optDouble("C'+{{/@e%_**^;R", (double) (byte)48);
      assertEquals(1, jSONObject0.length());
      assertEquals(48.0, double0, 0.01);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.1839637727244874
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.iterator();
      linkedList0.iterator();
      linkedList0.removeLast();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("*{y>7wvGbL4i2c!", 0.0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)92);
      Integer integer0 = new Integer(76);
      Integer.getInteger("getintValue", integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer.getInteger("Wq%_6p &)9lNlfLR", (-22));
      linkedList0.add((Integer) null);
      Integer.getInteger("getintValue", (-22));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer1 = new Integer(76);
      Integer integer2 = new Integer(65);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList3.add(integer2);
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      Integer.getInteger("getintValue", (Integer) null);
      linkedList4.add((Integer) null);
      linkedList4.poll();
      long long0 = jSONObject0.optLong("pa");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.4444190426347405
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      jSONObject0.optInt("Q%9fumeh8_rEGV<");
      jSONObject0.optLong("ikW");
      try { 
        jSONObject0.getInt("getformat");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getformat\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.132749236521753
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Byte byte0 = new Byte((byte)127);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Integer.valueOf((int) (byte)127);
      Byte.compare((byte) (-120), (byte) (-120));
      jSONObject0.optBoolean("MCU7Ssy^", false);
      Integer integer0 = new Integer((-1));
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Object object0 = new Object();
      jSONObject1.optLong(":aZkGZt-=;|@JDhnM|#");
      jSONObject1.optDouble("qttQ^F%r.d%", (-2613.7966401));
      JSONObject jSONObject2 = jSONObject1.putOpt("qttQ^F%r.d%", ":aZkGZt-=;|@JDhnM|#");
      jSONObject2.optLong("getcompare", (-504L));
      Byte.compare((byte) (-58), (byte)127);
      Byte byte1 = new Byte((byte)127);
      jSONObject2.optLong("false", 1491L);
      jSONObject0.optInt((String) null);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.034896177812045
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)127);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Integer.valueOf((int) (byte)127);
      Byte byte1 = new Byte((byte) (-120));
      Integer integer0 = new Integer((-1));
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Object object0 = new Object();
      jSONObject1.optLong(":aZkGZt-=;|@JDhnM|#");
      jSONObject1.optDouble("qttQ^F%r.d%", (-2613.7966401));
      JSONObject jSONObject2 = jSONObject1.putOpt("qttQ^F%r.d%", ":aZkGZt-=;|@JDhnM|#");
      jSONObject2.optLong("getcompare", (-504L));
      Byte.compare((byte) (-58), (byte)127);
      jSONObject2.optBoolean("getcompare", true);
      Byte byte2 = new Byte((byte)127);
      jSONObject2.optLong("false", (long) (byte) (-120));
      jSONObject2.optLong("8", (-1L));
      jSONObject2.isNull("qttQ^F%r.d%");
      long long0 = jSONObject1.optLong("i/r");
      assertEquals(2, jSONObject1.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(46);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("true");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.pop();
      linkedList0.add("{}");
      assertTrue(linkedList0.contains(string0));
      
      linkedList0.removeLast();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer0 = new Integer(34);
      Integer.getInteger("Pu$?uV7qzV]lm{@{^*!", 34);
      linkedList2.add(integer0);
      linkedList2.poll();
      String string1 = jSONObject0.toString(97, 46);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      Byte byte0 = new Byte((byte)83);
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>();
      hashMap1.keySet();
      HashMap<JSONArray, Boolean> hashMap2 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.listIterator();
      linkedList0.add("'");
      linkedList0.add("\"\"");
      linkedList0.add("'");
      linkedList0.spliterator();
      linkedList0.add("Expected '");
      linkedList0.add("/I|Z-VT:E");
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.listIterator();
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.add("%ev34i?o^");
      linkedList0.iterator();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Boolean boolean0 = new Boolean("Q%9fumeh8_rEGV<");
      Boolean.logicalXor(true, true);
      String string0 = JSONObject.quote("ezCnwV");
      assertEquals("\"ezCnwV\"", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("] is not a JSONArray.", 12);
      assertEquals(12, int0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      Integer.getInteger("8rK+fj~7Zv]'N8@)I", 4396);
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer((-927));
      Integer integer2 = new Integer((-964));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer3 = new Integer(370);
      Integer integer4 = new Integer(39);
      Integer integer5 = new Integer(19);
      Boolean boolean0 = new Boolean("Wq%_6p &)9lNlfLR");
      Integer integer6 = new Integer(70);
      Integer integer7 = new Integer(6);
      Integer integer8 = new Integer((-2579));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean1 = jSONObject0.optBoolean("Wq%_6p &)9lNlfLR");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.back();
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add((String) null);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("{}");
      jSONObject0.length();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList0.pop();
      linkedList1.add("tri");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList2.removeLast();
      try { 
        Integer.valueOf("tri", (-1657));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1657 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Short short0 = new Short((short)13);
      Short.toUnsignedInt((short) (-98));
      Short.toUnsignedInt((short) (-98));
      Short.compare((short)38, (short)16);
      Short.toUnsignedInt((short)1459);
      Short.toUnsignedLong((short) (-98));
      Short.toUnsignedInt((short)1459);
      Short.toUnsignedLong((short) (-1592));
      Short.toUnsignedInt((short)70);
      Short.toUnsignedInt((short) (-98));
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.listIterator();
      linkedList0.add("'");
      linkedList0.add("\"\"");
      linkedList0.add("'");
      linkedList0.spliterator();
      linkedList0.add("Expected '");
      linkedList0.add("/I|Z-VT:E");
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.listIterator();
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.add("%ev34i?o^");
      linkedList0.iterator();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("%ev34i?o^");
      linkedList0.removeAll(linkedList1);
      linkedList0.add("get");
      linkedList0.iterator();
      linkedList0.removeLast();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.optString("Expected '", "get");
      assertEquals("get", string0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(47);
      Integer integer1 = new Integer(42);
      linkedList0.add(integer1);
      linkedList0.add(integer0);
      linkedList0.poll();
      Integer integer2 = new Integer(1111);
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("b9f($<fO>E;l");
      assertEquals("", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.4795008699302594
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.listIterator();
      linkedList0.add("'");
      linkedList0.add("\"\"");
      linkedList0.add("'");
      linkedList0.spliterator();
      linkedList0.add("Expected '");
      linkedList0.add("/I|Z-VT:E");
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.listIterator();
      linkedList0.add("*{y>7wvGbL4i2c!");
      linkedList0.add("%ev34i?o^");
      linkedList0.iterator();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("istoUnsignedLong");
      linkedList1.add("%ev34i?o^");
      linkedList0.removeAll(linkedList1);
      linkedList0.add("get");
      linkedList0.iterator();
      linkedList0.removeLast();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.getLong("istoUnsignedLong");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoUnsignedLong\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Byte byte0 = new Byte((byte)22);
      Float.min(835.07F, 2654.5386F);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      HashMap<Float, String> hashMap1 = new HashMap<Float, String>();
      hashMap1.values();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("A(0:;m.R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of A(0:;m.R
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "WacLJ,V<QYo";
      JSONTokener jSONTokener0 = new JSONTokener("WacLJ,V<QYo");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of WacLJ,V<QYo
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.0042424730540764
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short.toUnsignedLong((short) (-2798));
      Short.toUnsignedInt((short) (-400));
      Short.compare((short)1459, (short)21);
      Short.compare((short) (-2798), (short)65);
      Short.toUnsignedInt((short)1459);
      Short.toUnsignedInt((short) (-2798));
      Short.toUnsignedInt((short)1285);
      Short.toUnsignedLong((short) (-98));
      Short.toUnsignedInt((short) (-98));
      Short.toUnsignedLong((short) (-2798));
      Short.toUnsignedInt((short)819);
      Short.toUnsignedInt((short) (-2798));
      Byte byte0 = new Byte((byte) (-4));
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }
}
